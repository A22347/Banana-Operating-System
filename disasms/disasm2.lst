
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf fc 00 00       	call   c000fcdf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 68 02 c0       	mov    eax,0xc0026868
c0000025:	3d 68 68 02 c0       	cmp    eax,0xc0026868
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 68 02 c0       	push   0xc0026868
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 68 02 c0       	mov    eax,0xc0026868
c0000051:	2d 68 68 02 c0       	sub    eax,0xc0026868
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 68 02 c0       	push   0xc0026868
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 90 23 02 c0       	mov    ebx,0xc0022390
c0000097:	81 eb 8c 23 02 c0    	sub    ebx,0xc002238c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 8c 23 02 c0       	mov    esi,0xc002238c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 68 02 c0       	push   0xc0026868
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 68 68 02 c0       	push   0xc0026868
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 33 62 01 00       	call   c00164e0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f6 42 01 00       	call   c00145bb <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 11 62 01 00       	call   c00164e0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 62 67 01 00       	call   c0016a50 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 91 6c 01 00       	call   c0016f88 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6e ef 00 00       	jmp    c000f2ed <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 23 02 c0 02 	test   BYTE PTR [edx-0x3ffddc60],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 23 02 c0 01 	test   BYTE PTR [edx-0x3ffddc60],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 23 02 c0 08 	test   BYTE PTR [edx-0x3ffddc60],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 23 02 c0 08 	test   BYTE PTR [edx-0x3ffddc60],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 23 02 c0 04 	test   BYTE PTR [ecx-0x3ffddc60],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 23 02 c0 01 	test   BYTE PTR [edx-0x3ffddc60],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 9b eb 00 00       	call   c000fa2e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 a8 ea 00 00       	call   c000f9d0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 83 e9 00 00       	call   c000f99a <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 7e e9 00 00       	call   c000f9d0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 74 e8 00 00       	call   c000f99a <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 8f e7 00 00       	call   c000f99a <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 79 e7 00 00       	call   c000f99a <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 a4 24 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddb5c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 11 9c 01 00       	jmp    c001bbcc <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 3b 9c 01 00       	jmp    c001bc0c <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 5c 9c 01 00       	jmp    c001bc4c <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 00 26 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdda00]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 00 26 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdda00]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba f8 53 02 c0       	mov    edx,0xc00253f8
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba bc 24 02 c0       	mov    edx,0xc00224bc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 c2 24 02 c0       	mov    eax,0xc00224c2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 80 25 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdda80]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 cb 24 02 c0       	mov    eax,0xc00224cb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 00 26 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdda00]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 50 25 02 c0       	mov    eax,0xc0022550
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 40 25 02 c0       	mov    ebx,0xc0022540
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 20 25 02 c0       	mov    eax,0xc0022520
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 30 25 02 c0       	mov    eax,0xc0022530
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba d2 24 02 c0       	mov    edx,0xc00224d2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba de 24 02 c0       	mov    edx,0xc00224de
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba f2 24 02 c0       	mov    edx,0xc00224f2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 6d 9c 00 00       	call   c000fab0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 65 9c 00 00       	call   c000fac0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 20 29 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022920
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 20 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022920
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 20 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd9e0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 20 2a 02 c0       	push   0xc0022a20
c0006327:	e8 44 62 01 00       	call   c001c570 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 2e 2a 02 c0       	push   0xc0022a2e
c000635f:	e8 0c 62 01 00       	call   c001c570 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 75 61 01 00       	call   c001c514 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 3d 2a 02 c0       	push   0xc0022a3d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 40 2a 02 c0       	push   0xc0022a40
c0006a0f:	e8 5c 5b 01 00       	call   c001c570 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 6a 5b 01 00       	call   c001c58c <iso_kprintfd>
c0006a22:	c7 04 24 45 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a45
c0006a29:	e8 42 5b 01 00       	call   c001c570 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 52 5b 01 00       	call   c001c58c <iso_kprintfd>
c0006a3a:	c7 04 24 4b 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a4b
c0006a41:	e8 2a 5b 01 00       	call   c001c570 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 3a 5b 01 00       	call   c001c58c <iso_kprintfd>
c0006a52:	c7 04 24 51 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a51
c0006a59:	e8 12 5b 01 00       	call   c001c570 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 22 5b 01 00       	call   c001c58c <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 3d 2a 02 c0       	push   0xc0022a3d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 5a 2a 02 c0       	push   0xc0022a5a
c0006c32:	e8 39 59 01 00       	call   c001c570 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 65 2a 02 c0       	push   0xc0022a65
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 6c 2a 02 c0       	push   0xc0022a6c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 73 2a 02 c0       	push   0xc0022a73
c0006d49:	e8 22 58 01 00       	call   c001c570 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 7e 2a 02 c0       	push   0xc0022a7e
c0006d64:	e8 07 58 01 00       	call   c001c570 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 1d 8d 00 00       	call   c000fab0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 0c 8d 00 00       	call   c000fab0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 f7 8c 00 00       	call   c000fab0 <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 de 8c 00 00       	call   c000fab0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 bc 8c 00 00       	call   c000fac0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ae 8c 00 00       	call   c000fac0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 94 8c 00 00       	call   c000fac0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 7f 8c 00 00       	call   c000fac0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 90 2a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd570]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 e0 2b 02 c0       	push   0xc0022be0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 f4 2b 02 c0       	push   0xc0022bf4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 fe 2b 02 c0       	push   0xc0022bfe
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 08 2c 02 c0       	push   0xc0022c08
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 4c 2d 02 c0       	push   0xc0022d4c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 12 2c 02 c0       	push   0xc0022c12
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 6c 2d 02 c0       	push   0xc0022d6c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 27 2c 02 c0       	push   0xc0022c27
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 41 2c 02 c0       	push   0xc0022c41
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 00 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda200]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 94 2d 02 c0       	push   0xc0022d94
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 4c 2d 02 c0       	push   0xc0022d4c
c00071bc:	e8 35 8c 00 00       	call   c000fdf6 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 dc 2d 02 c0       	push   0xc0022ddc
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 dc 2d 02 c0       	push   0xc0022ddc
c00071eb:	e8 06 8c 00 00       	call   c000fdf6 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 4c 2c 02 c0       	push   0xc0022c4c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 4c 2c 02 c0       	push   0xc0022c4c
c0007217:	e8 da 8b 00 00       	call   c000fdf6 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 69 2c 02 c0       	push   0xc0022c69
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 69 2c 02 c0       	push   0xc0022c69
c0007243:	e8 ae 8b 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 fc 2d 02 c0       	push   0xc0022dfc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 fc 2d 02 c0       	push   0xc0022dfc
c000726f:	e8 82 8b 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 20 2e 02 c0       	push   0xc0022e20
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 20 2e 02 c0       	push   0xc0022e20
c000729b:	e8 56 8b 00 00       	call   c000fdf6 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 85 2c 02 c0       	push   0xc0022c85
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 85 2c 02 c0       	push   0xc0022c85
c00072c7:	e8 2a 8b 00 00       	call   c000fdf6 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 a1 2c 02 c0       	push   0xc0022ca1
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 a1 2c 02 c0       	push   0xc0022ca1
c00072f3:	e8 fe 8a 00 00       	call   c000fdf6 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 40 2e 02 c0       	push   0xc0022e40
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 40 2e 02 c0       	push   0xc0022e40
c000731f:	e8 d2 8a 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 64 2e 02 c0       	push   0xc0022e64
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 64 2e 02 c0       	push   0xc0022e64
c000734b:	e8 a6 8a 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 fe 86 00 00       	call   c000fab0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073bb:	68 83 2e 02 c0       	push   0xc0022e83
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 a1 2e 02 c0       	push   0xc0022ea1
c00073d7:	e8 1a 8a 00 00       	call   c000fdf6 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 bb 2e 02 c0       	push   0xc0022ebb
c00073f8:	e8 f9 89 00 00       	call   c000fdf6 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 d5 2e 02 c0       	push   0xc0022ed5
c000743f:	e8 b2 89 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 ef 2e 02 c0       	push   0xc0022eef
c000746f:	e8 82 89 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 f0 6d 00 00       	call   c000e2b1 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 0a 93 00 00       	call   c00107e5 <KeRand()>
c00074db:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 09 2f 02 c0       	push   0xc0022f09
c0007510:	e8 e1 88 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c000755b:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 93 02 c0       	push   0xc0029300
c00075d0:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075da:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 aa 5a 00 00       	call   c000d0a1 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 ad 84 00 00       	call   c000fab0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000760c:	68 83 2e 02 c0       	push   0xc0022e83
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 12 2f 02 c0       	push   0xc0022f12
c0007628:	e8 c9 87 00 00       	call   c000fdf6 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 2f 2f 02 c0       	push   0xc0022f2f
c0007659:	e8 98 87 00 00       	call   c000fdf6 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 4c 2f 02 c0       	push   0xc0022f4c
c0007693:	e8 5e 87 00 00       	call   c000fdf6 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007776:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 1e 83 00 00       	call   c000fab0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000779b:	68 83 2e 02 c0       	push   0xc0022e83
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 67 2f 02 c0       	push   0xc0022f67
c00077b7:	e8 3a 86 00 00       	call   c000fdf6 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 82 2f 02 c0       	push   0xc0022f82
c00077ea:	e8 07 86 00 00       	call   c000fdf6 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 f7 81 00 00       	call   c000fab0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 6d 80 00 00       	call   c000fab0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 9d 2f 02 c0       	mov    esi,0xc0022f9d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 74 30 02 c0       	mov    edx,0xc0023074
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 05 b3 00 00       	call   c0012fda <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 26 55 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 90 30 02 c0       	mov    edx,0xc0023090
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 b7 b2 00 00       	call   c0012fda <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 d8 54 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 08 30 02 c0       	mov    edx,0xc0023008
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 08 30 02 c0       	mov    edx,0xc0023008
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 82 54 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 d0 7c 00 00       	call   c000fab0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 84 3f 01 00       	call   c001bd6c <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 bc 7c 00 00       	call   c000fab0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9e 4e 01 00       	call   c001cc9a <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 b5 4c 02 c0       	push   0xc0024cb5
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 a6 2f 02 c0       	push   0xc0022fa6
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 c1 2f 02 c0       	push   0xc0022fc1
c0008018:	e8 d9 7d 00 00       	call   c000fdf6 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 ac ad 00 00       	call   c0012df4 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 74 30 02 c0       	mov    edx,0xc0023074
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 e7 2f 02 c0       	push   0xc0022fe7
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 0a 28 00 00       	call   c000a92e <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 05 24 00 00       	call   c000a92e <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 3e 75 00 00       	call   c000fab0 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 d6 a7 00 00       	call   c0012df4 <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 90 30 02 c0       	mov    edx,0xc0023090
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 62 22 00 00       	call   c000a92e <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 e0 11 00 00       	call   c0009afc <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 41 0f 00 00       	call   c000989c <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 a0 48 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000899c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	52                   	push   edx
c00089aa:	52                   	push   edx
c00089ab:	99                   	cdq    
c00089ac:	52                   	push   edx
c00089ad:	50                   	push   eax
c00089ae:	e8 65 e5 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c00089b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089ba:	e8 f6 15 01 00       	call   c0019fb5 <HalMakeBeep(int)>
c00089bf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c7:	83 c4 1c             	add    esp,0x1c
c00089ca:	e9 15 e4 00 00       	jmp    c0016de4 <blockTask(TaskState)>

c00089cf <KeBeep(int, int, bool)>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	83 ec 10             	sub    esp,0x10
c00089d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 d0 15 01 00       	call   c0019fb5 <HalMakeBeep(int)>
c00089e5:	89 f0                	mov    eax,esi
c00089e7:	83 c4 10             	add    esp,0x10
c00089ea:	84 c0                	test   al,al
c00089ec:	74 1f                	je     c0008a0d <KeBeep(int, int, bool)+0x3e>
c00089ee:	50                   	push   eax
c00089ef:	50                   	push   eax
c00089f0:	6b c3 0a             	imul   eax,ebx,0xa
c00089f3:	99                   	cdq    
c00089f4:	52                   	push   edx
c00089f5:	50                   	push   eax
c00089f6:	e8 1d e5 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c00089fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a03:	83 c4 14             	add    esp,0x14
c0008a06:	5b                   	pop    ebx
c0008a07:	5e                   	pop    esi
c0008a08:	e9 a8 15 01 00       	jmp    c0019fb5 <HalMakeBeep(int)>
c0008a0d:	68 e6 00 00 00       	push   0xe6
c0008a12:	53                   	push   ebx
c0008a13:	68 8e 89 00 c0       	push   0xc000898e
c0008a18:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a1e:	e8 81 e0 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c0008a23:	83 c4 14             	add    esp,0x14
c0008a26:	5b                   	pop    ebx
c0008a27:	5e                   	pop    esi
c0008a28:	c3                   	ret    
c0008a29:	90                   	nop

c0008a2a <KeLoadTimezoneStrings()>:
c0008a2a:	55                   	push   ebp
c0008a2b:	89 e5                	mov    ebp,esp
c0008a2d:	53                   	push   ebx
c0008a2e:	83 ec 44             	sub    esp,0x44
c0008a31:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a38:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a3f:	83 ec 0c             	sub    esp,0xc
c0008a42:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a45:	e8 66 70 00 00       	call   c000fab0 <malloc>
c0008a4a:	83 c4 10             	add    esp,0x10
c0008a4d:	89 c3                	mov    ebx,eax
c0008a4f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a54:	83 ec 04             	sub    esp,0x4
c0008a57:	50                   	push   eax
c0008a58:	68 e0 30 02 c0       	push   0xc00230e0
c0008a5d:	53                   	push   ebx
c0008a5e:	e8 c9 f6 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0008a63:	83 c4 10             	add    esp,0x10
c0008a66:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a69:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a6d:	75 10                	jne    c0008a7f <KeLoadTimezoneStrings()+0x55>
c0008a6f:	83 ec 0c             	sub    esp,0xc
c0008a72:	68 ff 30 02 c0       	push   0xc00230ff
c0008a77:	e8 7a 73 00 00       	call   c000fdf6 <KePanic(char const*)>
c0008a7c:	83 c4 10             	add    esp,0x10
c0008a7f:	83 ec 08             	sub    esp,0x8
c0008a82:	6a 01                	push   0x1
c0008a84:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a87:	e8 be f6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0008a8c:	83 c4 10             	add    esp,0x10
c0008a8f:	83 ec 04             	sub    esp,0x4
c0008a92:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a95:	50                   	push   eax
c0008a96:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a99:	50                   	push   eax
c0008a9a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a9d:	e8 aa f9 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008aa2:	83 c4 10             	add    esp,0x10
c0008aa5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aa8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aab:	83 ec 08             	sub    esp,0x8
c0008aae:	50                   	push   eax
c0008aaf:	68 15 31 02 c0       	push   0xc0023115
c0008ab4:	e8 95 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ab9:	83 c4 10             	add    esp,0x10
c0008abc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008abf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac2:	83 c0 01             	add    eax,0x1
c0008ac5:	83 ec 0c             	sub    esp,0xc
c0008ac8:	50                   	push   eax
c0008ac9:	e8 e2 6f 00 00       	call   c000fab0 <malloc>
c0008ace:	83 c4 10             	add    esp,0x10
c0008ad1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ad7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ada:	83 ec 04             	sub    esp,0x4
c0008add:	50                   	push   eax
c0008ade:	6a 00                	push   0x0
c0008ae0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae3:	e8 08 7a ff ff       	call   c00004f0 <memset>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af0:	83 c0 0c             	add    eax,0xc
c0008af3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008af8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008afb:	83 ec 0c             	sub    esp,0xc
c0008afe:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b01:	53                   	push   ebx
c0008b02:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b05:	52                   	push   edx
c0008b06:	50                   	push   eax
c0008b07:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0a:	ff d1                	call   ecx
c0008b0c:	83 c4 20             	add    esp,0x20
c0008b0f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b12:	83 ec 08             	sub    esp,0x8
c0008b15:	50                   	push   eax
c0008b16:	68 25 31 02 c0       	push   0xc0023125
c0008b1b:	e8 2e e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	83 ec 0c             	sub    esp,0xc
c0008b26:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b29:	e8 7a f6 ff ff       	call   c00081a8 <File::close()>
c0008b2e:	83 c4 10             	add    esp,0x10
c0008b31:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b35:	74 15                	je     c0008b4c <KeLoadTimezoneStrings()+0x122>
c0008b37:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3c:	83 c0 08             	add    eax,0x8
c0008b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b41:	83 ec 0c             	sub    esp,0xc
c0008b44:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b47:	ff d0                	call   eax
c0008b49:	83 c4 10             	add    esp,0x10
c0008b4c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b53:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b61:	7f 3a                	jg     c0008b9d <KeLoadTimezoneStrings()+0x173>
c0008b63:	83 ec 0c             	sub    esp,0xc
c0008b66:	6a 78                	push   0x78
c0008b68:	e8 43 6f 00 00       	call   c000fab0 <malloc>
c0008b6d:	83 c4 10             	add    esp,0x10
c0008b70:	89 c2                	mov    edx,eax
c0008b72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b75:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b7f:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b86:	83 ec 08             	sub    esp,0x8
c0008b89:	68 2e 31 02 c0       	push   0xc002312e
c0008b8e:	50                   	push   eax
c0008b8f:	e8 bc 7a ff ff       	call   c0000650 <strcpy>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9b:	eb bd                	jmp    c0008b5a <KeLoadTimezoneStrings()+0x130>
c0008b9d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0008baa:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bad:	89 c2                	mov    edx,eax
c0008baf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb2:	01 d0                	add    eax,edx
c0008bb4:	8a 00                	mov    al,BYTE PTR [eax]
c0008bb6:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bb9:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bbd:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc0:	0f be c0             	movsx  eax,al
c0008bc3:	83 f8 0d             	cmp    eax,0xd
c0008bc6:	0f 84 82 01 00 00    	je     c0008d4e <KeLoadTimezoneStrings()+0x324>
c0008bcc:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bcf:	0f be c0             	movsx  eax,al
c0008bd2:	83 f8 09             	cmp    eax,0x9
c0008bd5:	75 44                	jne    c0008c1b <KeLoadTimezoneStrings()+0x1f1>
c0008bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bda:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be1:	83 ec 0c             	sub    esp,0xc
c0008be4:	50                   	push   eax
c0008be5:	e8 96 79 ff ff       	call   c0000580 <strlen>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	83 f8 08             	cmp    eax,0x8
c0008bf0:	0f 96 c0             	setbe  al
c0008bf3:	0f b6 c0             	movzx  eax,al
c0008bf6:	85 c0                	test   eax,eax
c0008bf8:	0f 84 56 01 00 00    	je     c0008d54 <KeLoadTimezoneStrings()+0x32a>
c0008bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c01:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c08:	83 ec 08             	sub    esp,0x8
c0008c0b:	68 2e 31 02 c0       	push   0xc002312e
c0008c10:	50                   	push   eax
c0008c11:	e8 5a 7c ff ff       	call   c0000870 <strcat>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	eb bc                	jmp    c0008bd7 <KeLoadTimezoneStrings()+0x1ad>
c0008c1b:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1e:	0f be c0             	movsx  eax,al
c0008c21:	83 f8 0a             	cmp    eax,0xa
c0008c24:	0f 85 9b 00 00 00    	jne    c0008cc5 <KeLoadTimezoneStrings()+0x29b>
c0008c2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c2d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c34:	83 ec 0c             	sub    esp,0xc
c0008c37:	50                   	push   eax
c0008c38:	e8 43 79 ff ff       	call   c0000580 <strlen>
c0008c3d:	83 c4 10             	add    esp,0x10
c0008c40:	83 f8 35             	cmp    eax,0x35
c0008c43:	0f 96 c0             	setbe  al
c0008c46:	0f b6 c0             	movzx  eax,al
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	74 1d                	je     c0008c6a <KeLoadTimezoneStrings()+0x240>
c0008c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c50:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c57:	83 ec 08             	sub    esp,0x8
c0008c5a:	68 2e 31 02 c0       	push   0xc002312e
c0008c5f:	50                   	push   eax
c0008c60:	e8 0b 7c ff ff       	call   c0000870 <strcat>
c0008c65:	83 c4 10             	add    esp,0x10
c0008c68:	eb c0                	jmp    c0008c2a <KeLoadTimezoneStrings()+0x200>
c0008c6a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c71:	89 c2                	mov    edx,eax
c0008c73:	c1 fa 1f             	sar    edx,0x1f
c0008c76:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c79:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c7c:	39 c8                	cmp    eax,ecx
c0008c7e:	89 d0                	mov    eax,edx
c0008c80:	19 d8                	sbb    eax,ebx
c0008c82:	0f 82 d2 00 00 00    	jb     c0008d5a <KeLoadTimezoneStrings()+0x330>
c0008c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8b:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c90:	83 ec 08             	sub    esp,0x8
c0008c93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c96:	68 30 31 02 c0       	push   0xc0023130
c0008c9b:	e8 ae e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ca0:	83 c4 10             	add    esp,0x10
c0008ca3:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008ca8:	83 ec 08             	sub    esp,0x8
c0008cab:	50                   	push   eax
c0008cac:	68 45 31 02 c0       	push   0xc0023145
c0008cb1:	e8 98 e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc0:	e9 9b 00 00 00       	jmp    c0008d60 <KeLoadTimezoneStrings()+0x336>
c0008cc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cc8:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	50                   	push   eax
c0008cd3:	e8 a8 78 ff ff       	call   c0000580 <strlen>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	83 f8 31             	cmp    eax,0x31
c0008cde:	0f 96 c0             	setbe  al
c0008ce1:	0f b6 c0             	movzx  eax,al
c0008ce4:	85 c0                	test   eax,eax
c0008ce6:	74 1f                	je     c0008d07 <KeLoadTimezoneStrings()+0x2dd>
c0008ce8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ceb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf2:	83 ec 08             	sub    esp,0x8
c0008cf5:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cf8:	52                   	push   edx
c0008cf9:	50                   	push   eax
c0008cfa:	e8 71 7b ff ff       	call   c0000870 <strcat>
c0008cff:	83 c4 10             	add    esp,0x10
c0008d02:	e9 9d fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0a:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d11:	83 ec 0c             	sub    esp,0xc
c0008d14:	50                   	push   eax
c0008d15:	e8 66 78 ff ff       	call   c0000580 <strlen>
c0008d1a:	83 c4 10             	add    esp,0x10
c0008d1d:	83 f8 32             	cmp    eax,0x32
c0008d20:	0f 94 c0             	sete   al
c0008d23:	0f b6 c0             	movzx  eax,al
c0008d26:	85 c0                	test   eax,eax
c0008d28:	0f 84 76 fe ff ff    	je     c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d31:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d38:	83 ec 08             	sub    esp,0x8
c0008d3b:	68 49 31 02 c0       	push   0xc0023149
c0008d40:	50                   	push   eax
c0008d41:	e8 2a 7b ff ff       	call   c0000870 <strcat>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	e9 56 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d4e:	90                   	nop
c0008d4f:	e9 50 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d54:	90                   	nop
c0008d55:	e9 4a fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d5a:	90                   	nop
c0008d5b:	e9 44 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d60:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d65:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d68:	7d 49                	jge    c0008db3 <KeLoadTimezoneStrings()+0x389>
c0008d6a:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d6f:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d72:	0f 9c c0             	setl   al
c0008d75:	0f b6 d0             	movzx  edx,al
c0008d78:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d7d:	52                   	push   edx
c0008d7e:	50                   	push   eax
c0008d7f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d82:	68 4e 31 02 c0       	push   0xc002314e
c0008d87:	e8 c2 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d92:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d99:	83 ec 04             	sub    esp,0x4
c0008d9c:	50                   	push   eax
c0008d9d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da0:	68 5c 31 02 c0       	push   0xc002315c
c0008da5:	e8 a4 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008daa:	83 c4 10             	add    esp,0x10
c0008dad:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db1:	eb ad                	jmp    c0008d60 <KeLoadTimezoneStrings()+0x336>
c0008db3:	90                   	nop
c0008db4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008db7:	c9                   	leave  
c0008db8:	c3                   	ret    

c0008db9 <KeGetTimezoneStringFromID(int)>:
c0008db9:	55                   	push   ebp
c0008dba:	89 e5                	mov    ebp,esp
c0008dbc:	83 ec 08             	sub    esp,0x8
c0008dbf:	83 ec 08             	sub    esp,0x8
c0008dc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc5:	68 65 31 02 c0       	push   0xc0023165
c0008dca:	e8 7f e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008dcf:	83 c4 10             	add    esp,0x10
c0008dd2:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008dd7:	83 f0 01             	xor    eax,0x1
c0008dda:	0f b6 c0             	movzx  eax,al
c0008ddd:	85 c0                	test   eax,eax
c0008ddf:	74 15                	je     c0008df6 <KeGetTimezoneStringFromID(int)+0x3d>
c0008de1:	e8 44 fc ff ff       	call   c0008a2a <KeLoadTimezoneStrings()>
c0008de6:	83 ec 0c             	sub    esp,0xc
c0008de9:	68 83 31 02 c0       	push   0xc0023183
c0008dee:	e8 5b e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008df3:	83 c4 10             	add    esp,0x10
c0008df6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dfb:	83 ec 04             	sub    esp,0x4
c0008dfe:	50                   	push   eax
c0008dff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e02:	68 94 31 02 c0       	push   0xc0023194
c0008e07:	e8 42 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e14:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e17:	7d 06                	jge    c0008e1f <KeGetTimezoneStringFromID(int)+0x66>
c0008e19:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e1d:	79 07                	jns    c0008e26 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e1f:	b8 00 00 00 00       	mov    eax,0x0
c0008e24:	eb 2e                	jmp    c0008e54 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e29:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e30:	83 c0 01             	add    eax,0x1
c0008e33:	83 ec 04             	sub    esp,0x4
c0008e36:	50                   	push   eax
c0008e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3a:	68 a7 31 02 c0       	push   0xc00231a7
c0008e3f:	e8 0a e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4a:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e51:	83 c0 01             	add    eax,0x1
c0008e54:	c9                   	leave  
c0008e55:	c3                   	ret    

c0008e56 <KeUpdateTimezone(char const*)>:
c0008e56:	55                   	push   ebp
c0008e57:	89 e5                	mov    ebp,esp
c0008e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e5c:	8a 00                	mov    al,BYTE PTR [eax]
c0008e5e:	0f be c0             	movsx  eax,al
c0008e61:	83 f8 2b             	cmp    eax,0x2b
c0008e64:	74 11                	je     c0008e77 <KeUpdateTimezone(char const*)+0x21>
c0008e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e69:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6b:	0f be c0             	movsx  eax,al
c0008e6e:	83 f8 2d             	cmp    eax,0x2d
c0008e71:	0f 85 be 00 00 00    	jne    c0008f35 <KeUpdateTimezone(char const*)+0xdf>
c0008e77:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e81:	83 c0 02             	add    eax,0x2
c0008e84:	8a 00                	mov    al,BYTE PTR [eax]
c0008e86:	0f be c0             	movsx  eax,al
c0008e89:	83 f8 2e             	cmp    eax,0x2e
c0008e8c:	75 10                	jne    c0008e9e <KeUpdateTimezone(char const*)+0x48>
c0008e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e91:	83 c0 03             	add    eax,0x3
c0008e94:	8a 00                	mov    al,BYTE PTR [eax]
c0008e96:	0f be c0             	movsx  eax,al
c0008e99:	83 f8 35             	cmp    eax,0x35
c0008e9c:	74 20                	je     c0008ebe <KeUpdateTimezone(char const*)+0x68>
c0008e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea1:	83 c0 03             	add    eax,0x3
c0008ea4:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea6:	0f be c0             	movsx  eax,al
c0008ea9:	83 f8 2e             	cmp    eax,0x2e
c0008eac:	75 14                	jne    c0008ec2 <KeUpdateTimezone(char const*)+0x6c>
c0008eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb1:	83 c0 04             	add    eax,0x4
c0008eb4:	8a 00                	mov    al,BYTE PTR [eax]
c0008eb6:	0f be c0             	movsx  eax,al
c0008eb9:	83 f8 35             	cmp    eax,0x35
c0008ebc:	75 04                	jne    c0008ec2 <KeUpdateTimezone(char const*)+0x6c>
c0008ebe:	b0 01                	mov    al,0x1
c0008ec0:	eb 02                	jmp    c0008ec4 <KeUpdateTimezone(char const*)+0x6e>
c0008ec2:	b0 00                	mov    al,0x0
c0008ec4:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ecc:	83 c0 01             	add    eax,0x1
c0008ecf:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed1:	0f be c0             	movsx  eax,al
c0008ed4:	83 e8 30             	sub    eax,0x30
c0008ed7:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edf:	83 c0 03             	add    eax,0x3
c0008ee2:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee4:	0f be c0             	movsx  eax,al
c0008ee7:	83 f8 2e             	cmp    eax,0x2e
c0008eea:	75 2e                	jne    c0008f1a <KeUpdateTimezone(char const*)+0xc4>
c0008eec:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef2:	89 d0                	mov    eax,edx
c0008ef4:	c1 e0 02             	shl    eax,0x2
c0008ef7:	01 d0                	add    eax,edx
c0008ef9:	d1 e0                	shl    eax,1
c0008efb:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	8a 00                	mov    al,BYTE PTR [eax]
c0008f08:	0f be c0             	movsx  eax,al
c0008f0b:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f0e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f13:	01 d0                	add    eax,edx
c0008f15:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0008f1f:	0f be c0             	movsx  eax,al
c0008f22:	83 f8 2d             	cmp    eax,0x2d
c0008f25:	75 26                	jne    c0008f4d <KeUpdateTimezone(char const*)+0xf7>
c0008f27:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f2c:	f7 d8                	neg    eax
c0008f2e:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f33:	eb 18                	jmp    c0008f4d <KeUpdateTimezone(char const*)+0xf7>
c0008f35:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f3c:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f43:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f4d:	90                   	nop
c0008f4e:	5d                   	pop    ebp
c0008f4f:	c3                   	ret    

c0008f50 <KeSetTimezone(char const*)>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 18             	sub    esp,0x18
c0008f56:	83 ec 0c             	sub    esp,0xc
c0008f59:	68 b4 31 02 c0       	push   0xc00231b4
c0008f5e:	e8 19 43 00 00       	call   c000d27c <CmOpen(char const*)>
c0008f63:	83 c4 10             	add    esp,0x10
c0008f66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f69:	83 ec 08             	sub    esp,0x8
c0008f6c:	68 d9 31 02 c0       	push   0xc00231d9
c0008f71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f74:	e8 fe 4e 00 00       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f79:	83 c4 10             	add    esp,0x10
c0008f7c:	83 ec 04             	sub    esp,0x4
c0008f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f82:	50                   	push   eax
c0008f83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f86:	e8 c3 47 00 00       	call   c000d74e <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f94:	e8 01 44 00 00       	call   c000d39a <CmClose(Reghive_Tag*)>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	83 ec 0c             	sub    esp,0xc
c0008f9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa2:	e8 af fe ff ff       	call   c0008e56 <KeUpdateTimezone(char const*)>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	90                   	nop
c0008fab:	c9                   	leave  
c0008fac:	c3                   	ret    

c0008fad <KeSetTimezone(int)>:
c0008fad:	55                   	push   ebp
c0008fae:	89 e5                	mov    ebp,esp
c0008fb0:	83 ec 18             	sub    esp,0x18
c0008fb3:	83 ec 0c             	sub    esp,0xc
c0008fb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fb9:	e8 fb fd ff ff       	call   c0008db9 <KeGetTimezoneStringFromID(int)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fc8:	74 12                	je     c0008fdc <KeSetTimezone(int)+0x2f>
c0008fca:	83 ec 0c             	sub    esp,0xc
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 7b ff ff ff       	call   c0008f50 <KeSetTimezone(char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	b0 01                	mov    al,0x1
c0008fda:	eb 02                	jmp    c0008fde <KeSetTimezone(int)+0x31>
c0008fdc:	b0 00                	mov    al,0x0
c0008fde:	c9                   	leave  
c0008fdf:	c3                   	ret    

c0008fe0 <KeLoadTimezone()>:
c0008fe0:	55                   	push   ebp
c0008fe1:	89 e5                	mov    ebp,esp
c0008fe3:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fe9:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff0:	83 ec 0c             	sub    esp,0xc
c0008ff3:	68 b4 31 02 c0       	push   0xc00231b4
c0008ff8:	e8 7f 42 00 00       	call   c000d27c <CmOpen(char const*)>
c0008ffd:	83 c4 10             	add    esp,0x10
c0009000:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009003:	83 ec 08             	sub    esp,0x8
c0009006:	68 d9 31 02 c0       	push   0xc00231d9
c000900b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000900e:	e8 64 4e 00 00       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009013:	83 c4 10             	add    esp,0x10
c0009016:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009019:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000901d:	7e 18                	jle    c0009037 <KeLoadTimezone()+0x57>
c000901f:	83 ec 04             	sub    esp,0x4
c0009022:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009028:	50                   	push   eax
c0009029:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000902c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902f:	e8 b8 43 00 00       	call   c000d3ec <CmGetString(Reghive_Tag*, int, char*)>
c0009034:	83 c4 10             	add    esp,0x10
c0009037:	83 ec 0c             	sub    esp,0xc
c000903a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000903d:	e8 58 43 00 00       	call   c000d39a <CmClose(Reghive_Tag*)>
c0009042:	83 c4 10             	add    esp,0x10
c0009045:	83 ec 0c             	sub    esp,0xc
c0009048:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000904e:	50                   	push   eax
c000904f:	e8 02 fe ff ff       	call   c0008e56 <KeUpdateTimezone(char const*)>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	90                   	nop
c0009058:	c9                   	leave  
c0009059:	c3                   	ret    

c000905a <Clock::Clock(char const*)>:
c000905a:	83 ec 0c             	sub    esp,0xc
c000905d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009061:	83 ec 08             	sub    esp,0x8
c0009064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009068:	50                   	push   eax
c0009069:	e8 8e 0a 00 00       	call   c0009afc <Device::Device(char const*)>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	ba 38 32 02 c0       	mov    edx,0xc0023238
c0009076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907a:	89 10                	mov    DWORD PTR [eax],edx
c000907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009080:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908a:	90                   	nop
c000908b:	83 c4 0c             	add    esp,0xc
c000908e:	c3                   	ret    
c000908f:	90                   	nop

c0009090 <Clock::~Clock()>:
c0009090:	83 ec 0c             	sub    esp,0xc
c0009093:	ba 38 32 02 c0       	mov    edx,0xc0023238
c0009098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a2:	83 ec 0c             	sub    esp,0xc
c00090a5:	50                   	push   eax
c00090a6:	e8 f1 07 00 00       	call   c000989c <Device::~Device()>
c00090ab:	83 c4 10             	add    esp,0x10
c00090ae:	90                   	nop
c00090af:	83 c4 0c             	add    esp,0xc
c00090b2:	c3                   	ret    
c00090b3:	90                   	nop

c00090b4 <Clock::~Clock()>:
c00090b4:	83 ec 0c             	sub    esp,0xc
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 cd ff ff ff       	call   c0009090 <Clock::~Clock()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	83 ec 08             	sub    esp,0x8
c00090c9:	68 58 01 00 00       	push   0x158
c00090ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d2:	e8 50 41 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c00090d7:	83 c4 10             	add    esp,0x10
c00090da:	83 c4 0c             	add    esp,0xc
c00090dd:	c3                   	ret    

c00090de <Clock::timeInSecondsLocal()>:
c00090de:	55                   	push   ebp
c00090df:	89 e5                	mov    ebp,esp
c00090e1:	53                   	push   ebx
c00090e2:	83 ec 04             	sub    esp,0x4
c00090e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ea:	83 c0 24             	add    eax,0x24
c00090ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f5:	ff d0                	call   eax
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	89 d3                	mov    ebx,edx
c00090fe:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009103:	0f b6 d0             	movzx  edx,al
c0009106:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910b:	01 d0                	add    eax,edx
c000910d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009113:	89 c2                	mov    edx,eax
c0009115:	c1 fa 1f             	sar    edx,0x1f
c0009118:	01 c1                	add    ecx,eax
c000911a:	11 d3                	adc    ebx,edx
c000911c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009121:	0f b6 c0             	movzx  eax,al
c0009124:	85 c0                	test   eax,eax
c0009126:	74 0c                	je     c0009134 <Clock::timeInSecondsLocal()+0x56>
c0009128:	b8 08 07 00 00       	mov    eax,0x708
c000912d:	ba 00 00 00 00       	mov    edx,0x0
c0009132:	eb 0a                	jmp    c000913e <Clock::timeInSecondsLocal()+0x60>
c0009134:	b8 00 00 00 00       	mov    eax,0x0
c0009139:	ba 00 00 00 00       	mov    edx,0x0
c000913e:	01 c8                	add    eax,ecx
c0009140:	11 da                	adc    edx,ebx
c0009142:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009145:	c9                   	leave  
c0009146:	c3                   	ret    
c0009147:	90                   	nop

c0009148 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009148:	55                   	push   ebp
c0009149:	89 e5                	mov    ebp,esp
c000914b:	56                   	push   esi
c000914c:	53                   	push   ebx
c000914d:	83 ec 10             	sub    esp,0x10
c0009150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009153:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009156:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009159:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000915c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000915f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009161:	83 c0 2c             	add    eax,0x2c
c0009164:	8b 30                	mov    esi,DWORD PTR [eax]
c0009166:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000916b:	0f b6 d0             	movzx  edx,al
c000916e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009173:	01 d0                	add    eax,edx
c0009175:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009183:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009186:	29 c1                	sub    ecx,eax
c0009188:	19 d3                	sbb    ebx,edx
c000918a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000918f:	0f b6 c0             	movzx  eax,al
c0009192:	85 c0                	test   eax,eax
c0009194:	74 0c                	je     c00091a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009196:	b8 08 07 00 00       	mov    eax,0x708
c000919b:	ba 00 00 00 00       	mov    edx,0x0
c00091a0:	eb 0a                	jmp    c00091ac <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091a2:	b8 00 00 00 00       	mov    eax,0x0
c00091a7:	ba 00 00 00 00       	mov    edx,0x0
c00091ac:	29 c1                	sub    ecx,eax
c00091ae:	19 d3                	sbb    ebx,edx
c00091b0:	89 c8                	mov    eax,ecx
c00091b2:	89 da                	mov    edx,ebx
c00091b4:	83 ec 04             	sub    esp,0x4
c00091b7:	52                   	push   edx
c00091b8:	50                   	push   eax
c00091b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091bc:	ff d6                	call   esi
c00091be:	83 c4 10             	add    esp,0x10
c00091c1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091c4:	5b                   	pop    ebx
c00091c5:	5e                   	pop    esi
c00091c6:	5d                   	pop    ebp
c00091c7:	c3                   	ret    

c00091c8 <KeDatetimeToSeconds(datetime_t)>:
c00091c8:	55                   	push   ebp
c00091c9:	89 e5                	mov    ebp,esp
c00091cb:	53                   	push   ebx
c00091cc:	83 ec 24             	sub    esp,0x24
c00091cf:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091d3:	2d 6c 07 00 00       	sub    eax,0x76c
c00091d8:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091dc:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091df:	83 e8 01             	sub    eax,0x1
c00091e2:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c00091e5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c00091ec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00091f3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00091fa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009201:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009204:	0f b6 c8             	movzx  ecx,al
c0009207:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000920a:	0f b6 d0             	movzx  edx,al
c000920d:	89 d0                	mov    eax,edx
c000920f:	c1 e0 04             	shl    eax,0x4
c0009212:	29 d0                	sub    eax,edx
c0009214:	c1 e0 02             	shl    eax,0x2
c0009217:	8d 14 01             	lea    edx,[ecx+eax*1]
c000921a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000921d:	0f b6 c0             	movzx  eax,al
c0009220:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009226:	01 d0                	add    eax,edx
c0009228:	89 c2                	mov    edx,eax
c000922a:	c1 fa 1f             	sar    edx,0x1f
c000922d:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009230:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009233:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009236:	0f b6 c0             	movzx  eax,al
c0009239:	83 e8 01             	sub    eax,0x1
c000923c:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000923f:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009242:	0f b6 c0             	movzx  eax,al
c0009245:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c000924c:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000924f:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009252:	0f b6 c0             	movzx  eax,al
c0009255:	83 f8 01             	cmp    eax,0x1
c0009258:	76 7c                	jbe    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000925a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000925e:	0f b7 c0             	movzx  eax,ax
c0009261:	83 e0 03             	and    eax,0x3
c0009264:	85 c0                	test   eax,eax
c0009266:	75 6e                	jne    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009268:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000926c:	0f b7 c8             	movzx  ecx,ax
c000926f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009274:	89 c8                	mov    eax,ecx
c0009276:	f7 e2                	mul    edx
c0009278:	c1 ea 05             	shr    edx,0x5
c000927b:	89 d0                	mov    eax,edx
c000927d:	c1 e0 02             	shl    eax,0x2
c0009280:	01 d0                	add    eax,edx
c0009282:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009289:	01 d0                	add    eax,edx
c000928b:	c1 e0 02             	shl    eax,0x2
c000928e:	29 c1                	sub    ecx,eax
c0009290:	89 c8                	mov    eax,ecx
c0009292:	0f b7 c0             	movzx  eax,ax
c0009295:	85 c0                	test   eax,eax
c0009297:	75 39                	jne    c00092d2 <KeDatetimeToSeconds(datetime_t)+0x10a>
c0009299:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929d:	0f b7 c0             	movzx  eax,ax
c00092a0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092a6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092ab:	f7 e9                	imul   ecx
c00092ad:	c1 fa 07             	sar    edx,0x7
c00092b0:	89 c8                	mov    eax,ecx
c00092b2:	c1 f8 1f             	sar    eax,0x1f
c00092b5:	29 c2                	sub    edx,eax
c00092b7:	89 d0                	mov    eax,edx
c00092b9:	c1 e0 02             	shl    eax,0x2
c00092bc:	01 d0                	add    eax,edx
c00092be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092c5:	01 d0                	add    eax,edx
c00092c7:	c1 e0 04             	shl    eax,0x4
c00092ca:	29 c1                	sub    ecx,eax
c00092cc:	89 ca                	mov    edx,ecx
c00092ce:	85 d2                	test   edx,edx
c00092d0:	75 04                	jne    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092d2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00092d6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092da:	0f b7 c0             	movzx  eax,ax
c00092dd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00092e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00092e3:	83 f8 46             	cmp    eax,0x46
c00092e6:	0f 9f c0             	setg   al
c00092e9:	0f b6 c0             	movzx  eax,al
c00092ec:	85 c0                	test   eax,eax
c00092ee:	0f 84 a4 00 00 00    	je     c0009398 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c00092f4:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c00092fb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ff:	0f b7 d0             	movzx  edx,ax
c0009302:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009305:	39 c2                	cmp    edx,eax
c0009307:	0f 8e b8 01 00 00    	jle    c00094c5 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c000930d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009310:	83 e0 03             	and    eax,0x3
c0009313:	85 c0                	test   eax,eax
c0009315:	75 6b                	jne    c0009382 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009317:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000931a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000931f:	f7 e9                	imul   ecx
c0009321:	c1 fa 05             	sar    edx,0x5
c0009324:	89 c8                	mov    eax,ecx
c0009326:	c1 f8 1f             	sar    eax,0x1f
c0009329:	29 c2                	sub    edx,eax
c000932b:	89 d0                	mov    eax,edx
c000932d:	c1 e0 02             	shl    eax,0x2
c0009330:	01 d0                	add    eax,edx
c0009332:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009339:	01 d0                	add    eax,edx
c000933b:	c1 e0 02             	shl    eax,0x2
c000933e:	29 c1                	sub    ecx,eax
c0009340:	89 ca                	mov    edx,ecx
c0009342:	85 d2                	test   edx,edx
c0009344:	75 35                	jne    c000937b <KeDatetimeToSeconds(datetime_t)+0x1b3>
c0009346:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009349:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000934f:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009354:	f7 e9                	imul   ecx
c0009356:	c1 fa 07             	sar    edx,0x7
c0009359:	89 c8                	mov    eax,ecx
c000935b:	c1 f8 1f             	sar    eax,0x1f
c000935e:	29 c2                	sub    edx,eax
c0009360:	89 d0                	mov    eax,edx
c0009362:	c1 e0 02             	shl    eax,0x2
c0009365:	01 d0                	add    eax,edx
c0009367:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000936e:	01 d0                	add    eax,edx
c0009370:	c1 e0 04             	shl    eax,0x4
c0009373:	29 c1                	sub    ecx,eax
c0009375:	89 ca                	mov    edx,ecx
c0009377:	85 d2                	test   edx,edx
c0009379:	75 07                	jne    c0009382 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000937b:	b8 6e 01 00 00       	mov    eax,0x16e
c0009380:	eb 05                	jmp    c0009387 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c0009382:	b8 6d 01 00 00       	mov    eax,0x16d
c0009387:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000938a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938d:	83 c0 01             	add    eax,0x1
c0009390:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009393:	e9 63 ff ff ff       	jmp    c00092fb <KeDatetimeToSeconds(datetime_t)+0x133>
c0009398:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000939b:	83 f8 45             	cmp    eax,0x45
c000939e:	0f 8f 21 01 00 00    	jg     c00094c5 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c00093a4:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093ab:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093af:	0f b7 d0             	movzx  edx,ax
c00093b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093b5:	39 c2                	cmp    edx,eax
c00093b7:	0f 8d 8b 00 00 00    	jge    c0009448 <KeDatetimeToSeconds(datetime_t)+0x280>
c00093bd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093c0:	83 e0 03             	and    eax,0x3
c00093c3:	85 c0                	test   eax,eax
c00093c5:	75 6b                	jne    c0009432 <KeDatetimeToSeconds(datetime_t)+0x26a>
c00093c7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093ca:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093cf:	f7 e9                	imul   ecx
c00093d1:	c1 fa 05             	sar    edx,0x5
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	c1 f8 1f             	sar    eax,0x1f
c00093d9:	29 c2                	sub    edx,eax
c00093db:	89 d0                	mov    eax,edx
c00093dd:	c1 e0 02             	shl    eax,0x2
c00093e0:	01 d0                	add    eax,edx
c00093e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093e9:	01 d0                	add    eax,edx
c00093eb:	c1 e0 02             	shl    eax,0x2
c00093ee:	29 c1                	sub    ecx,eax
c00093f0:	89 ca                	mov    edx,ecx
c00093f2:	85 d2                	test   edx,edx
c00093f4:	75 35                	jne    c000942b <KeDatetimeToSeconds(datetime_t)+0x263>
c00093f6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f9:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ff:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009404:	f7 e9                	imul   ecx
c0009406:	c1 fa 07             	sar    edx,0x7
c0009409:	89 c8                	mov    eax,ecx
c000940b:	c1 f8 1f             	sar    eax,0x1f
c000940e:	29 c2                	sub    edx,eax
c0009410:	89 d0                	mov    eax,edx
c0009412:	c1 e0 02             	shl    eax,0x2
c0009415:	01 d0                	add    eax,edx
c0009417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000941e:	01 d0                	add    eax,edx
c0009420:	c1 e0 04             	shl    eax,0x4
c0009423:	29 c1                	sub    ecx,eax
c0009425:	89 ca                	mov    edx,ecx
c0009427:	85 d2                	test   edx,edx
c0009429:	75 07                	jne    c0009432 <KeDatetimeToSeconds(datetime_t)+0x26a>
c000942b:	b8 6e 01 00 00       	mov    eax,0x16e
c0009430:	eb 05                	jmp    c0009437 <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009432:	b8 6d 01 00 00       	mov    eax,0x16d
c0009437:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000943a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943d:	83 e8 01             	sub    eax,0x1
c0009440:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009443:	e9 63 ff ff ff       	jmp    c00093ab <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009448:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000944b:	83 e0 03             	and    eax,0x3
c000944e:	85 c0                	test   eax,eax
c0009450:	75 6b                	jne    c00094bd <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009452:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009455:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000945a:	f7 e9                	imul   ecx
c000945c:	c1 fa 05             	sar    edx,0x5
c000945f:	89 c8                	mov    eax,ecx
c0009461:	c1 f8 1f             	sar    eax,0x1f
c0009464:	29 c2                	sub    edx,eax
c0009466:	89 d0                	mov    eax,edx
c0009468:	c1 e0 02             	shl    eax,0x2
c000946b:	01 d0                	add    eax,edx
c000946d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009474:	01 d0                	add    eax,edx
c0009476:	c1 e0 02             	shl    eax,0x2
c0009479:	29 c1                	sub    ecx,eax
c000947b:	89 ca                	mov    edx,ecx
c000947d:	85 d2                	test   edx,edx
c000947f:	75 35                	jne    c00094b6 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c0009481:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009484:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000948a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948f:	f7 e9                	imul   ecx
c0009491:	c1 fa 07             	sar    edx,0x7
c0009494:	89 c8                	mov    eax,ecx
c0009496:	c1 f8 1f             	sar    eax,0x1f
c0009499:	29 c2                	sub    edx,eax
c000949b:	89 d0                	mov    eax,edx
c000949d:	c1 e0 02             	shl    eax,0x2
c00094a0:	01 d0                	add    eax,edx
c00094a2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a9:	01 d0                	add    eax,edx
c00094ab:	c1 e0 04             	shl    eax,0x4
c00094ae:	29 c1                	sub    ecx,eax
c00094b0:	89 ca                	mov    edx,ecx
c00094b2:	85 d2                	test   edx,edx
c00094b4:	75 07                	jne    c00094bd <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094b6:	b8 6e 01 00 00       	mov    eax,0x16e
c00094bb:	eb 05                	jmp    c00094c2 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c00094bd:	b8 6d 01 00 00       	mov    eax,0x16d
c00094c2:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094c8:	89 c2                	mov    edx,eax
c00094ca:	c1 fa 1f             	sar    edx,0x1f
c00094cd:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c00094d3:	6b c8 00             	imul   ecx,eax,0x0
c00094d6:	01 d9                	add    ecx,ebx
c00094d8:	bb 80 51 01 00       	mov    ebx,0x15180
c00094dd:	f7 e3                	mul    ebx
c00094df:	01 d1                	add    ecx,edx
c00094e1:	89 ca                	mov    edx,ecx
c00094e3:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00094e6:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00094e9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00094ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00094ef:	83 c4 24             	add    esp,0x24
c00094f2:	5b                   	pop    ebx
c00094f3:	5d                   	pop    ebp
c00094f4:	c3                   	ret    
c00094f5:	90                   	nop

c00094f6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00094f6:	55                   	push   ebp
c00094f7:	89 e5                	mov    ebp,esp
c00094f9:	56                   	push   esi
c00094fa:	53                   	push   ebx
c00094fb:	83 ec 20             	sub    esp,0x20
c00094fe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009501:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009504:	e8 bf fc ff ff       	call   c00091c8 <KeDatetimeToSeconds(datetime_t)>
c0009509:	83 c4 08             	add    esp,0x8
c000950c:	89 c3                	mov    ebx,eax
c000950e:	89 d6                	mov    esi,edx
c0009510:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009515:	0f b6 d0             	movzx  edx,al
c0009518:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000951d:	01 d0                	add    eax,edx
c000951f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009525:	89 c2                	mov    edx,eax
c0009527:	c1 fa 1f             	sar    edx,0x1f
c000952a:	29 c3                	sub    ebx,eax
c000952c:	19 d6                	sbb    esi,edx
c000952e:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009533:	0f b6 c0             	movzx  eax,al
c0009536:	85 c0                	test   eax,eax
c0009538:	74 0c                	je     c0009546 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c000953a:	b8 08 07 00 00       	mov    eax,0x708
c000953f:	ba 00 00 00 00       	mov    edx,0x0
c0009544:	eb 0a                	jmp    c0009550 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009546:	b8 00 00 00 00       	mov    eax,0x0
c000954b:	ba 00 00 00 00       	mov    edx,0x0
c0009550:	29 c3                	sub    ebx,eax
c0009552:	19 d6                	sbb    esi,edx
c0009554:	89 d8                	mov    eax,ebx
c0009556:	89 f2                	mov    edx,esi
c0009558:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000955b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000955e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009561:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009564:	89 d0                	mov    eax,edx
c0009566:	31 d2                	xor    edx,edx
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000956f:	80 e5 ff             	and    ch,0xff
c0009572:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009575:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009578:	83 e1 00             	and    ecx,0x0
c000957b:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000957e:	83 ec 0c             	sub    esp,0xc
c0009581:	56                   	push   esi
c0009582:	53                   	push   ebx
c0009583:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009586:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009589:	68 ee 31 02 c0       	push   0xc00231ee
c000958e:	e8 bb d9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009593:	83 c4 20             	add    esp,0x20
c0009596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009599:	8b 00                	mov    eax,DWORD PTR [eax]
c000959b:	83 c0 2c             	add    eax,0x2c
c000959e:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a0:	83 ec 04             	sub    esp,0x4
c00095a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095ac:	ff d0                	call   eax
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095b4:	5b                   	pop    ebx
c00095b5:	5e                   	pop    esi
c00095b6:	5d                   	pop    ebp
c00095b7:	c3                   	ret    

c00095b8 <KeSecondsToDatetime(unsigned long long)>:
c00095b8:	55                   	push   ebp
c00095b9:	89 e5                	mov    ebp,esp
c00095bb:	83 ec 48             	sub    esp,0x48
c00095be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095c1:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00095c7:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00095ca:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095cd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095d0:	6a 00                	push   0x0
c00095d2:	68 80 51 01 00       	push   0x15180
c00095d7:	52                   	push   edx
c00095d8:	50                   	push   eax
c00095d9:	e8 e6 80 01 00       	call   c00216c4 <__udivdi3>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	05 6c fa 0a 00       	add    eax,0xafa6c
c00095e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00095e9:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095ec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095ef:	6a 00                	push   0x0
c00095f1:	68 80 51 01 00       	push   0x15180
c00095f6:	52                   	push   edx
c00095f7:	50                   	push   eax
c00095f8:	e8 c7 81 01 00       	call   c00217c4 <__umoddi3>
c00095fd:	83 c4 10             	add    esp,0x10
c0009600:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009603:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009607:	79 0b                	jns    c0009614 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009609:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009610:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009614:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009617:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000961c:	89 c8                	mov    eax,ecx
c000961e:	f7 ea                	imul   edx
c0009620:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009623:	c1 f8 0b             	sar    eax,0xb
c0009626:	89 c2                	mov    edx,eax
c0009628:	89 c8                	mov    eax,ecx
c000962a:	c1 f8 1f             	sar    eax,0x1f
c000962d:	29 c2                	sub    edx,eax
c000962f:	89 d0                	mov    eax,edx
c0009631:	88 c2                	mov    dl,al
c0009633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009636:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009639:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000963c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009641:	89 c8                	mov    eax,ecx
c0009643:	f7 ea                	imul   edx
c0009645:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009648:	c1 f8 0b             	sar    eax,0xb
c000964b:	89 c2                	mov    edx,eax
c000964d:	89 c8                	mov    eax,ecx
c000964f:	c1 f8 1f             	sar    eax,0x1f
c0009652:	29 c2                	sub    edx,eax
c0009654:	89 d0                	mov    eax,edx
c0009656:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000965c:	29 c1                	sub    ecx,eax
c000965e:	89 c8                	mov    eax,ecx
c0009660:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009663:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009666:	ba 89 88 88 88       	mov    edx,0x88888889
c000966b:	89 c8                	mov    eax,ecx
c000966d:	f7 ea                	imul   edx
c000966f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009672:	c1 f8 05             	sar    eax,0x5
c0009675:	89 c2                	mov    edx,eax
c0009677:	89 c8                	mov    eax,ecx
c0009679:	c1 f8 1f             	sar    eax,0x1f
c000967c:	29 c2                	sub    edx,eax
c000967e:	89 d0                	mov    eax,edx
c0009680:	88 c2                	mov    dl,al
c0009682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009685:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009688:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000968b:	ba 89 88 88 88       	mov    edx,0x88888889
c0009690:	89 c8                	mov    eax,ecx
c0009692:	f7 ea                	imul   edx
c0009694:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009697:	c1 f8 05             	sar    eax,0x5
c000969a:	89 c2                	mov    edx,eax
c000969c:	89 c8                	mov    eax,ecx
c000969e:	c1 f8 1f             	sar    eax,0x1f
c00096a1:	29 c2                	sub    edx,eax
c00096a3:	89 d0                	mov    eax,edx
c00096a5:	c1 e0 04             	shl    eax,0x4
c00096a8:	29 d0                	sub    eax,edx
c00096aa:	c1 e0 02             	shl    eax,0x2
c00096ad:	29 c1                	sub    ecx,eax
c00096af:	89 ca                	mov    edx,ecx
c00096b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c00096b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00096bb:	79 20                	jns    c00096dd <KeSecondsToDatetime(unsigned long long)+0x125>
c00096bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096c0:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c00096c6:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096cb:	89 c8                	mov    eax,ecx
c00096cd:	f7 ea                	imul   edx
c00096cf:	c1 fa 0f             	sar    edx,0xf
c00096d2:	89 c8                	mov    eax,ecx
c00096d4:	c1 f8 1f             	sar    eax,0x1f
c00096d7:	29 c2                	sub    edx,eax
c00096d9:	89 d0                	mov    eax,edx
c00096db:	eb 18                	jmp    c00096f5 <KeSecondsToDatetime(unsigned long long)+0x13d>
c00096dd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00096e0:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096e5:	89 c8                	mov    eax,ecx
c00096e7:	f7 ea                	imul   edx
c00096e9:	c1 fa 0f             	sar    edx,0xf
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	c1 f8 1f             	sar    eax,0x1f
c00096f1:	29 c2                	sub    edx,eax
c00096f3:	89 d0                	mov    eax,edx
c00096f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00096f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00096fb:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c0009701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009704:	01 d0                	add    eax,edx
c0009706:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009709:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000970c:	c1 e8 02             	shr    eax,0x2
c000970f:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009714:	f7 e2                	mul    edx
c0009716:	c1 ea 07             	shr    edx,0x7
c0009719:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000971c:	29 d0                	sub    eax,edx
c000971e:	89 c1                	mov    ecx,eax
c0009720:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009723:	c1 e8 02             	shr    eax,0x2
c0009726:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000972b:	f7 e2                	mul    edx
c000972d:	89 d0                	mov    eax,edx
c000972f:	c1 e8 0b             	shr    eax,0xb
c0009732:	01 c1                	add    ecx,eax
c0009734:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009737:	c1 e8 04             	shr    eax,0x4
c000973a:	ba 41 d6 72 00       	mov    edx,0x72d641
c000973f:	f7 e2                	mul    edx
c0009741:	89 d0                	mov    eax,edx
c0009743:	c1 e8 04             	shr    eax,0x4
c0009746:	29 c1                	sub    ecx,eax
c0009748:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000974d:	89 c8                	mov    eax,ecx
c000974f:	f7 e2                	mul    edx
c0009751:	89 c8                	mov    eax,ecx
c0009753:	29 d0                	sub    eax,edx
c0009755:	d1 e8                	shr    eax,1
c0009757:	01 d0                	add    eax,edx
c0009759:	c1 e8 08             	shr    eax,0x8
c000975c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000975f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009762:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009767:	f7 e2                	mul    edx
c0009769:	89 d1                	mov    ecx,edx
c000976b:	c1 e9 05             	shr    ecx,0x5
c000976e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0009771:	89 d0                	mov    eax,edx
c0009773:	c1 e0 03             	shl    eax,0x3
c0009776:	01 d0                	add    eax,edx
c0009778:	c1 e0 03             	shl    eax,0x3
c000977b:	01 d0                	add    eax,edx
c000977d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009784:	01 c2                	add    edx,eax
c0009786:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009789:	c1 e8 02             	shr    eax,0x2
c000978c:	01 d0                	add    eax,edx
c000978e:	29 c1                	sub    ecx,eax
c0009790:	89 ca                	mov    edx,ecx
c0009792:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009795:	01 d0                	add    eax,edx
c0009797:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000979a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e0 02             	shl    eax,0x2
c00097a2:	01 d0                	add    eax,edx
c00097a4:	83 c0 02             	add    eax,0x2
c00097a7:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c00097ac:	f7 e2                	mul    edx
c00097ae:	89 d0                	mov    eax,edx
c00097b0:	c1 e8 07             	shr    eax,0x7
c00097b3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00097b6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00097b9:	89 d0                	mov    eax,edx
c00097bb:	c1 e0 03             	shl    eax,0x3
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 c2                	mov    edx,eax
c00097c2:	c1 e2 04             	shl    edx,0x4
c00097c5:	01 d0                	add    eax,edx
c00097c7:	83 c0 02             	add    eax,0x2
c00097ca:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00097cf:	f7 e2                	mul    edx
c00097d1:	c1 ea 02             	shr    edx,0x2
c00097d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00097d7:	29 d0                	sub    eax,edx
c00097d9:	83 c0 01             	add    eax,0x1
c00097dc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00097df:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c00097e3:	77 07                	ja     c00097ec <KeSecondsToDatetime(unsigned long long)+0x234>
c00097e5:	b8 02 00 00 00       	mov    eax,0x2
c00097ea:	eb 05                	jmp    c00097f1 <KeSecondsToDatetime(unsigned long long)+0x239>
c00097ec:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00097f1:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00097f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00097f7:	89 d0                	mov    eax,edx
c00097f9:	c1 e0 02             	shl    eax,0x2
c00097fc:	01 d0                	add    eax,edx
c00097fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009805:	01 d0                	add    eax,edx
c0009807:	c1 e0 04             	shl    eax,0x4
c000980a:	89 c2                	mov    edx,eax
c000980c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000980f:	01 c2                	add    edx,eax
c0009811:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009815:	0f 96 c0             	setbe  al
c0009818:	0f b6 c0             	movzx  eax,al
c000981b:	01 d0                	add    eax,edx
c000981d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009820:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009823:	89 c2                	mov    edx,eax
c0009825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009828:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000982c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000982f:	83 c0 01             	add    eax,0x1
c0009832:	88 c2                	mov    dl,al
c0009834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009837:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000983a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000983d:	88 c2                	mov    dl,al
c000983f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009842:	88 10                	mov    BYTE PTR [eax],dl
c0009844:	90                   	nop
c0009845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009848:	c9                   	leave  
c0009849:	c2 04 00             	ret    0x4

c000984c <Clock::timeInDatetimeLocal()>:
c000984c:	55                   	push   ebp
c000984d:	89 e5                	mov    ebp,esp
c000984f:	83 ec 08             	sub    esp,0x8
c0009852:	83 ec 0c             	sub    esp,0xc
c0009855:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009858:	e8 81 f8 ff ff       	call   c00090de <Clock::timeInSecondsLocal()>
c000985d:	83 c4 10             	add    esp,0x10
c0009860:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009863:	83 ec 04             	sub    esp,0x4
c0009866:	52                   	push   edx
c0009867:	50                   	push   eax
c0009868:	51                   	push   ecx
c0009869:	e8 4a fd ff ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c000986e:	83 c4 0c             	add    esp,0xc
c0009871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009874:	c9                   	leave  
c0009875:	c2 04 00             	ret    0x4

c0009878 <Device::hibernate()>:
c0009878:	c3                   	ret    
c0009879:	90                   	nop

c000987a <Device::wake()>:
c000987a:	c3                   	ret    
c000987b:	90                   	nop

c000987c <Device::detect()>:
c000987c:	c3                   	ret    
c000987d:	90                   	nop

c000987e <Device::disableLegacy()>:
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <Device::powerSaving(PowerSavingLevel)>:
c0009880:	c3                   	ret    
c0009881:	90                   	nop

c0009882 <DriverlessDevice::close(int, int, void*)>:
c0009882:	31 c0                	xor    eax,eax
c0009884:	c3                   	ret    
c0009885:	90                   	nop

c0009886 <DriverlessDevice::detect()>:
c0009886:	c3                   	ret    
c0009887:	90                   	nop

c0009888 <DriverlessDevice::open(int, int, void*)>:
c0009888:	83 ec 18             	sub    esp,0x18
c000988b:	68 6c 32 02 c0       	push   0xc002326c
c0009890:	e8 61 65 00 00       	call   c000fdf6 <KePanic(char const*)>
c0009895:	83 c8 ff             	or     eax,0xffffffff
c0009898:	83 c4 1c             	add    esp,0x1c
c000989b:	c3                   	ret    

c000989c <Device::~Device()>:
c000989c:	ba 10 33 02 c0       	mov    edx,0xc0023310
c00098a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a5:	89 10                	mov    DWORD PTR [eax],edx
c00098a7:	90                   	nop
c00098a8:	c3                   	ret    
c00098a9:	90                   	nop

c00098aa <Device::~Device()>:
c00098aa:	83 ec 0c             	sub    esp,0xc
c00098ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00098b1:	e8 e6 ff ff ff       	call   c000989c <Device::~Device()>
c00098b6:	83 c4 04             	add    esp,0x4
c00098b9:	83 ec 08             	sub    esp,0x8
c00098bc:	68 58 01 00 00       	push   0x158
c00098c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098c5:	e8 5d 39 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	83 c4 0c             	add    esp,0xc
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop

c00098d2 <Device::findAndLoadDriver()>:
c00098d2:	c7 44 24 04 8a 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc002328a
c00098da:	e9 6f d6 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00098df:	90                   	nop

c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>:
c00098e0:	57                   	push   edi
c00098e1:	b9 09 00 00 00       	mov    ecx,0x9
c00098e6:	56                   	push   esi
c00098e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00098eb:	8d 74 24 10          	lea    esi,[esp+0x10]
c00098ef:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00098f9:	81 c7 18 01 00 00    	add    edi,0x118
c00098ff:	fc                   	cld    
c0009900:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009902:	5e                   	pop    esi
c0009903:	5f                   	pop    edi
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::preOpenACPI(void*, char*, char*)>:
c0009906:	57                   	push   edi
c0009907:	b9 1e 00 00 00       	mov    ecx,0x1e
c000990c:	56                   	push   esi
c000990d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009911:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009915:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009919:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009923:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009929:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000992f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009931:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009937:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000993b:	b9 0e 00 00 00       	mov    ecx,0xe
c0009940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009942:	5e                   	pop    esi
c0009943:	5f                   	pop    edi
c0009944:	c3                   	ret    
c0009945:	90                   	nop

c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009946:	53                   	push   ebx
c0009947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000994b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009953:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009957:	0f b6 c0             	movzx  eax,al
c000995a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000995e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009962:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009966:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000996a:	5b                   	pop    ebx
c000996b:	e9 0d 0a 01 00       	jmp    c001a37d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009970 <Device::getParent()>:
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000997a:	c3                   	ret    
c000997b:	90                   	nop

c000997c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000997c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009980:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009984:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000998d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009991:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009995:	e9 54 0b 01 00       	jmp    c001a4ee <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000999a <Device::addChild(Device*)>:
c000999a:	53                   	push   ebx
c000999b:	83 ec 08             	sub    esp,0x8
c000999e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00099ac:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00099b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00099b4:	85 d2                	test   edx,edx
c00099b6:	74 04                	je     c00099bc <Device::addChild(Device*)+0x22>
c00099b8:	89 d3                	mov    ebx,edx
c00099ba:	eb f6                	jmp    c00099b2 <Device::addChild(Device*)+0x18>
c00099bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00099bf:	83 ec 0c             	sub    esp,0xc
c00099c2:	6a 08                	push   0x8
c00099c4:	e8 e7 60 00 00       	call   c000fab0 <malloc>
c00099c9:	89 03                	mov    DWORD PTR [ebx],eax
c00099cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00099d8:	83 c4 18             	add    esp,0x18
c00099db:	5b                   	pop    ebx
c00099dc:	c3                   	ret    
c00099dd:	90                   	nop

c00099de <Device::removeAllChildren()>:
c00099de:	56                   	push   esi
c00099df:	53                   	push   ebx
c00099e0:	52                   	push   edx
c00099e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00099e5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00099eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00099ee:	74 17                	je     c0009a07 <Device::removeAllChildren()+0x29>
c00099f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00099f3:	85 c0                	test   eax,eax
c00099f5:	74 0c                	je     c0009a03 <Device::removeAllChildren()+0x25>
c00099f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00099f9:	83 ec 0c             	sub    esp,0xc
c00099fc:	50                   	push   eax
c00099fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a00:	83 c4 10             	add    esp,0x10
c0009a03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a05:	eb e4                	jmp    c00099eb <Device::removeAllChildren()+0xd>
c0009a07:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a13:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a20:	58                   	pop    eax
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	c3                   	ret    

c0009a24 <Device::hibernateAll()>:
c0009a24:	53                   	push   ebx
c0009a25:	83 ec 14             	sub    esp,0x14
c0009a28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a2e:	53                   	push   ebx
c0009a2f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a38:	83 c4 10             	add    esp,0x10
c0009a3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a3e:	74 0f                	je     c0009a4f <Device::hibernateAll()+0x2b>
c0009a40:	83 ec 0c             	sub    esp,0xc
c0009a43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a46:	e8 d9 ff ff ff       	call   c0009a24 <Device::hibernateAll()>
c0009a4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a4d:	eb e9                	jmp    c0009a38 <Device::hibernateAll()+0x14>
c0009a4f:	83 c4 08             	add    esp,0x8
c0009a52:	5b                   	pop    ebx
c0009a53:	c3                   	ret    

c0009a54 <Device::wakeAll()>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 14             	sub    esp,0x14
c0009a58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a5e:	53                   	push   ebx
c0009a5f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009a62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a68:	83 c4 10             	add    esp,0x10
c0009a6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a6e:	74 0f                	je     c0009a7f <Device::wakeAll()+0x2b>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a76:	e8 d9 ff ff ff       	call   c0009a54 <Device::wakeAll()>
c0009a7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a7d:	eb e9                	jmp    c0009a68 <Device::wakeAll()+0x14>
c0009a7f:	83 c4 08             	add    esp,0x8
c0009a82:	5b                   	pop    ebx
c0009a83:	c3                   	ret    

c0009a84 <Device::detectAll()>:
c0009a84:	53                   	push   ebx
c0009a85:	83 ec 14             	sub    esp,0x14
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8e:	53                   	push   ebx
c0009a8f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009a92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a98:	83 c4 10             	add    esp,0x10
c0009a9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9e:	74 0f                	je     c0009aaf <Device::detectAll()+0x2b>
c0009aa0:	83 ec 0c             	sub    esp,0xc
c0009aa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa6:	e8 d9 ff ff ff       	call   c0009a84 <Device::detectAll()>
c0009aab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aad:	eb e9                	jmp    c0009a98 <Device::detectAll()+0x14>
c0009aaf:	83 c4 08             	add    esp,0x8
c0009ab2:	5b                   	pop    ebx
c0009ab3:	c3                   	ret    

c0009ab4 <Device::disableLegacyAll()>:
c0009ab4:	c3                   	ret    
c0009ab5:	90                   	nop

c0009ab6 <Device::loadDriversForAll()>:
c0009ab6:	c3                   	ret    
c0009ab7:	90                   	nop

c0009ab8 <Device::powerSavingAll(PowerSavingLevel)>:
c0009ab8:	56                   	push   esi
c0009ab9:	53                   	push   ebx
c0009aba:	83 ec 0c             	sub    esp,0xc
c0009abd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009ac1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009ac5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac7:	56                   	push   esi
c0009ac8:	53                   	push   ebx
c0009ac9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009acc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ad2:	83 c4 10             	add    esp,0x10
c0009ad5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad8:	74 0f                	je     c0009ae9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009ada:	52                   	push   edx
c0009adb:	52                   	push   edx
c0009adc:	56                   	push   esi
c0009add:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ae0:	e8 d3 ff ff ff       	call   c0009ab8 <Device::powerSavingAll(PowerSavingLevel)>
c0009ae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ae7:	eb e9                	jmp    c0009ad2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ae9:	58                   	pop    eax
c0009aea:	5b                   	pop    ebx
c0009aeb:	5e                   	pop    esi
c0009aec:	c3                   	ret    
c0009aed:	90                   	nop

c0009aee <Device::setName(char const*)>:
c0009aee:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009af6:	e9 55 6b ff ff       	jmp    c0000650 <strcpy>
c0009afb:	90                   	nop

c0009afc <Device::Device(char const*)>:
c0009afc:	83 ec 1c             	sub    esp,0x1c
c0009aff:	ba 10 33 02 c0       	mov    edx,0xc0023310
c0009b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b08:	89 10                	mov    DWORD PTR [eax],edx
c0009b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b0e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b1c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b2a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b38:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b42:	83 ec 08             	sub    esp,0x8
c0009b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4d:	e8 9c ff ff ff       	call   c0009aee <Device::setName(char const*)>
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009b5d:	83 ec 0c             	sub    esp,0xc
c0009b60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009b64:	e8 47 5f 00 00       	call   c000fab0 <malloc>
c0009b69:	83 c4 10             	add    esp,0x10
c0009b6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b7d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ba8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bbe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bcc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bda:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009bf2:	90                   	nop
c0009bf3:	83 c4 1c             	add    esp,0x1c
c0009bf6:	c3                   	ret    
c0009bf7:	90                   	nop

c0009bf8 <Device::getName()>:
c0009bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bfc:	05 d0 00 00 00       	add    eax,0xd0
c0009c01:	c3                   	ret    

c0009c02 <Device::closeAll()>:
c0009c02:	53                   	push   ebx
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c0a:	53                   	push   ebx
c0009c0b:	e8 e8 ff ff ff       	call   c0009bf8 <Device::getName()>
c0009c10:	52                   	push   edx
c0009c11:	50                   	push   eax
c0009c12:	68 c4 32 02 c0       	push   0xc00232c4
c0009c17:	e8 32 d3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009c1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c1e:	6a 00                	push   0x0
c0009c20:	6a 00                	push   0x0
c0009c22:	6a 00                	push   0x0
c0009c24:	53                   	push   ebx
c0009c25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c2e:	83 c4 20             	add    esp,0x20
c0009c31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c34:	74 12                	je     c0009c48 <Device::closeAll()+0x46>
c0009c36:	83 ec 0c             	sub    esp,0xc
c0009c39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c3c:	e8 c1 ff ff ff       	call   c0009c02 <Device::closeAll()>
c0009c41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c43:	83 c4 10             	add    esp,0x10
c0009c46:	eb e9                	jmp    c0009c31 <Device::closeAll()+0x2f>
c0009c48:	83 c4 08             	add    esp,0x8
c0009c4b:	5b                   	pop    ebx
c0009c4c:	c3                   	ret    
c0009c4d:	90                   	nop

c0009c4e <DriverlessDevice::DriverlessDevice(char const*)>:
c0009c4e:	83 ec 0c             	sub    esp,0xc
c0009c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c55:	83 ec 08             	sub    esp,0x8
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	50                   	push   eax
c0009c5d:	e8 9a fe ff ff       	call   c0009afc <Device::Device(char const*)>
c0009c62:	83 c4 10             	add    esp,0x10
c0009c65:	ba 3c 33 02 c0       	mov    edx,0xc002333c
c0009c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c6e:	89 10                	mov    DWORD PTR [eax],edx
c0009c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c74:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009c7e:	90                   	nop
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	c3                   	ret    
c0009c83:	90                   	nop

c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009c84:	57                   	push   edi
c0009c85:	56                   	push   esi
c0009c86:	53                   	push   ebx
c0009c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009c8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009c93:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009c99:	75 0c                	jne    c0009ca7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009c9b:	52                   	push   edx
c0009c9c:	52                   	push   edx
c0009c9d:	53                   	push   ebx
c0009c9e:	56                   	push   esi
c0009c9f:	e8 98 7c 01 00       	call   c002193c <LinkedList<Device>::addElement(Device*)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009cad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cb0:	74 12                	je     c0009cc4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009cb2:	50                   	push   eax
c0009cb3:	57                   	push   edi
c0009cb4:	56                   	push   esi
c0009cb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cb8:	e8 c7 ff ff ff       	call   c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009cbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	eb e9                	jmp    c0009cad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009cc4:	5b                   	pop    ebx
c0009cc5:	5e                   	pop    esi
c0009cc6:	5f                   	pop    edi
c0009cc7:	c3                   	ret    

c0009cc8 <getDevicesOfType(DeviceType)>:
c0009cc8:	53                   	push   ebx
c0009cc9:	83 ec 14             	sub    esp,0x14
c0009ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009cd0:	53                   	push   ebx
c0009cd1:	e8 42 7d 01 00       	call   c0021a18 <LinkedList<Device>::LinkedList()>
c0009cd6:	83 c4 0c             	add    esp,0xc
c0009cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009cdd:	53                   	push   ebx
c0009cde:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009ce4:	e8 9b ff ff ff       	call   c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009ce9:	83 c4 18             	add    esp,0x18
c0009cec:	89 d8                	mov    eax,ebx
c0009cee:	5b                   	pop    ebx
c0009cef:	c2 04 00             	ret    0x4
c0009cf2:	66 90                	xchg   ax,ax

c0009cf4 <HardDiskController::HardDiskController(char const*)>:
c0009cf4:	83 ec 0c             	sub    esp,0xc
c0009cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cfb:	83 ec 08             	sub    esp,0x8
c0009cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d02:	50                   	push   eax
c0009d03:	e8 f4 fd ff ff       	call   c0009afc <Device::Device(char const*)>
c0009d08:	83 c4 10             	add    esp,0x10
c0009d0b:	ba 68 33 02 c0       	mov    edx,0xc0023368
c0009d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d14:	89 10                	mov    DWORD PTR [eax],edx
c0009d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d1a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d24:	90                   	nop
c0009d25:	83 c4 0c             	add    esp,0xc
c0009d28:	c3                   	ret    
c0009d29:	90                   	nop
c0009d2a:	66 90                	xchg   ax,ax

c0009d2c <HardDiskController::~HardDiskController()>:
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	ba 68 33 02 c0       	mov    edx,0xc0023368
c0009d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d38:	89 10                	mov    DWORD PTR [eax],edx
c0009d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	50                   	push   eax
c0009d42:	e8 55 fb ff ff       	call   c000989c <Device::~Device()>
c0009d47:	83 c4 10             	add    esp,0x10
c0009d4a:	90                   	nop
c0009d4b:	83 c4 0c             	add    esp,0xc
c0009d4e:	c3                   	ret    
c0009d4f:	90                   	nop

c0009d50 <HardDiskController::~HardDiskController()>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	83 ec 0c             	sub    esp,0xc
c0009d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5a:	e8 cd ff ff ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c0009d5f:	83 c4 10             	add    esp,0x10
c0009d62:	83 ec 08             	sub    esp,0x8
c0009d65:	68 58 01 00 00       	push   0x158
c0009d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6e:	e8 b4 34 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <PhysicalDisk::eject()>:
c0009d7a:	83 c8 ff             	or     eax,0xffffffff
c0009d7d:	c3                   	ret    

c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009d7e:	83 ec 0c             	sub    esp,0xc
c0009d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d85:	83 ec 08             	sub    esp,0x8
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	50                   	push   eax
c0009d8d:	e8 6a fd ff ff       	call   c0009afc <Device::Device(char const*)>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	ba 94 33 02 c0       	mov    edx,0xc0023394
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	89 10                	mov    DWORD PTR [eax],edx
c0009da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009daf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009dcc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009de0:	90                   	nop
c0009de1:	83 c4 0c             	add    esp,0xc
c0009de4:	c3                   	ret    
c0009de5:	90                   	nop

c0009de6 <PhysicalDisk::startCache()>:
c0009de6:	56                   	push   esi
c0009de7:	53                   	push   ebx
c0009de8:	83 ec 10             	sub    esp,0x10
c0009deb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009def:	6a 44                	push   0x44
c0009df1:	e8 ba 5c 00 00       	call   c000fab0 <malloc>
c0009df6:	89 c6                	mov    esi,eax
c0009df8:	58                   	pop    eax
c0009df9:	5a                   	pop    edx
c0009dfa:	53                   	push   ebx
c0009dfb:	56                   	push   esi
c0009dfc:	e8 d3 13 00 00       	call   c000b1d4 <VCache::VCache(PhysicalDisk*)>
c0009e01:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e07:	83 c4 14             	add    esp,0x14
c0009e0a:	5b                   	pop    ebx
c0009e0b:	5e                   	pop    esi
c0009e0c:	c3                   	ret    
c0009e0d:	90                   	nop

c0009e0e <PhysicalDisk::~PhysicalDisk()>:
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	ba 94 33 02 c0       	mov    edx,0xc0023394
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	89 10                	mov    DWORD PTR [eax],edx
c0009e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e20:	83 ec 0c             	sub    esp,0xc
c0009e23:	50                   	push   eax
c0009e24:	e8 73 fa ff ff       	call   c000989c <Device::~Device()>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	90                   	nop
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	c3                   	ret    
c0009e31:	90                   	nop

c0009e32 <PhysicalDisk::~PhysicalDisk()>:
c0009e32:	83 ec 0c             	sub    esp,0xc
c0009e35:	83 ec 0c             	sub    esp,0xc
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	e8 cd ff ff ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c0009e41:	83 c4 10             	add    esp,0x10
c0009e44:	83 ec 08             	sub    esp,0x8
c0009e47:	68 6c 01 00 00       	push   0x16c
c0009e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e50:	e8 d2 33 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c0009e55:	83 c4 10             	add    esp,0x10
c0009e58:	83 c4 0c             	add    esp,0xc
c0009e5b:	c3                   	ret    

c0009e5c <startGUI(void*)>:
c0009e5c:	55                   	push   ebp
c0009e5d:	89 e5                	mov    ebp,esp
c0009e5f:	53                   	push   ebx
c0009e60:	83 ec 04             	sub    esp,0x4
c0009e63:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009e6b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009e70:	85 c0                	test   eax,eax
c0009e72:	75 01                	jne    c0009e75 <startGUI(void*)+0x19>
c0009e74:	fb                   	sti    
c0009e75:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009e7b:	83 ec 08             	sub    esp,0x8
c0009e7e:	6a 01                	push   0x1
c0009e80:	68 c4 33 02 c0       	push   0xc00233c4
c0009e85:	e8 33 c3 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c0009e8a:	83 c4 10             	add    esp,0x10
c0009e8d:	83 ec 08             	sub    esp,0x8
c0009e90:	53                   	push   ebx
c0009e91:	50                   	push   eax
c0009e92:	e8 87 c5 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	6a 01                	push   0x1
c0009ea5:	68 de 33 02 c0       	push   0xc00233de
c0009eaa:	e8 0e c3 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	83 ec 08             	sub    esp,0x8
c0009eb5:	53                   	push   ebx
c0009eb6:	50                   	push   eax
c0009eb7:	e8 62 c5 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c0009ebc:	83 c4 10             	add    esp,0x10
c0009ebf:	eb fe                	jmp    c0009ebf <startGUI(void*)+0x63>

c0009ec1 <startGUIVESA(void*)>:
c0009ec1:	55                   	push   ebp
c0009ec2:	89 e5                	mov    ebp,esp
c0009ec4:	53                   	push   ebx
c0009ec5:	83 ec 04             	sub    esp,0x4
c0009ec8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ed0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed5:	85 c0                	test   eax,eax
c0009ed7:	75 01                	jne    c0009eda <startGUIVESA(void*)+0x19>
c0009ed9:	fb                   	sti    
c0009eda:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009ee0:	83 ec 08             	sub    esp,0x8
c0009ee3:	6a 01                	push   0x1
c0009ee5:	68 fc 33 02 c0       	push   0xc00233fc
c0009eea:	e8 ce c2 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	83 ec 08             	sub    esp,0x8
c0009ef5:	53                   	push   ebx
c0009ef6:	50                   	push   eax
c0009ef7:	e8 22 c5 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c0009efc:	83 c4 10             	add    esp,0x10
c0009eff:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f05:	83 ec 08             	sub    esp,0x8
c0009f08:	6a 01                	push   0x1
c0009f0a:	68 de 33 02 c0       	push   0xc00233de
c0009f0f:	e8 a9 c2 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	83 ec 08             	sub    esp,0x8
c0009f1a:	53                   	push   ebx
c0009f1b:	50                   	push   eax
c0009f1c:	e8 fd c4 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c0009f21:	83 c4 10             	add    esp,0x10
c0009f24:	eb fe                	jmp    c0009f24 <startGUIVESA(void*)+0x63>

c0009f26 <sendKeyToTerminal(unsigned char)>:
c0009f26:	55                   	push   ebp
c0009f27:	89 e5                	mov    ebp,esp
c0009f29:	83 ec 28             	sub    esp,0x28
c0009f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f32:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f37:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f3b:	83 ec 08             	sub    esp,0x8
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	e8 41 8a 00 00       	call   c0012986 <VgaText::receiveKey(unsigned char)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f4c:	83 f8 0a             	cmp    eax,0xa
c0009f4f:	74 16                	je     c0009f67 <sendKeyToTerminal(unsigned char)+0x41>
c0009f51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f55:	83 f8 03             	cmp    eax,0x3
c0009f58:	74 0d                	je     c0009f67 <sendKeyToTerminal(unsigned char)+0x41>
c0009f5a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f5e:	83 f8 1c             	cmp    eax,0x1c
c0009f61:	0f 85 92 00 00 00    	jne    c0009ff9 <sendKeyToTerminal(unsigned char)+0xd3>
c0009f67:	fa                   	cli    
c0009f68:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f6d:	83 c0 01             	add    eax,0x1
c0009f70:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009f75:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009f7a:	83 c0 01             	add    eax,0x1
c0009f7d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009f82:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009f87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009f8a:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009f94:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009f98:	74 1f                	je     c0009fb9 <sendKeyToTerminal(unsigned char)+0x93>
c0009f9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f9d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fa0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fa3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fa6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fa9:	83 ec 0c             	sub    esp,0xc
c0009fac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009faf:	e8 c8 d0 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	eb db                	jmp    c0009f94 <sendKeyToTerminal(unsigned char)+0x6e>
c0009fb9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fbe:	83 e8 01             	sub    eax,0x1
c0009fc1:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fc6:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fcb:	85 c0                	test   eax,eax
c0009fcd:	75 18                	jne    c0009fe7 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fcf:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0009fd4:	85 c0                	test   eax,eax
c0009fd6:	74 0f                	je     c0009fe7 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fd8:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0009fe2:	e8 3d cd 00 00       	call   c0016d24 <schedule()>
c0009fe7:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009fef:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ff4:	85 c0                	test   eax,eax
c0009ff6:	75 01                	jne    c0009ff9 <sendKeyToTerminal(unsigned char)+0xd3>
c0009ff8:	fb                   	sti    
c0009ff9:	90                   	nop
c0009ffa:	c9                   	leave  
c0009ffb:	c3                   	ret    

c0009ffc <sendKeyboardToken(KeyboardToken)>:
c0009ffc:	55                   	push   ebp
c0009ffd:	89 e5                	mov    ebp,esp
c0009fff:	83 ec 18             	sub    esp,0x18
c000a002:	e8 1a 67 00 00       	call   c0010721 <KeUserIOReceived()>
c000a007:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a00a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a00d:	0f b7 c0             	movzx  eax,ax
c000a010:	83 f2 01             	xor    edx,0x1
c000a013:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a019:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a01e:	85 c0                	test   eax,eax
c000a020:	74 24                	je     c000a046 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a022:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a028:	83 ec 04             	sub    esp,0x4
c000a02b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a030:	83 ec 08             	sub    esp,0x8
c000a033:	89 e0                	mov    eax,esp
c000a035:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a038:	89 08                	mov    DWORD PTR [eax],ecx
c000a03a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a03d:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a041:	ff d2                	call   edx
c000a043:	83 c4 10             	add    esp,0x10
c000a046:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a04a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a04d:	0f b6 c0             	movzx  eax,al
c000a050:	85 c0                	test   eax,eax
c000a052:	0f 84 da 00 00 00    	je     c000a132 <sendKeyboardToken(KeyboardToken)+0x136>
c000a058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a05b:	0f b7 c0             	movzx  eax,ax
c000a05e:	3d 18 03 00 00       	cmp    eax,0x318
c000a063:	75 06                	jne    c000a06b <sendKeyboardToken(KeyboardToken)+0x6f>
c000a065:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a06b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06e:	0f b7 c0             	movzx  eax,ax
c000a071:	3d 19 03 00 00       	cmp    eax,0x319
c000a076:	75 06                	jne    c000a07e <sendKeyboardToken(KeyboardToken)+0x82>
c000a078:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a081:	0f b7 c0             	movzx  eax,ax
c000a084:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a089:	75 06                	jne    c000a091 <sendKeyboardToken(KeyboardToken)+0x95>
c000a08b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a094:	0f b7 c0             	movzx  eax,ax
c000a097:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a09c:	75 06                	jne    c000a0a4 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a09e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a7:	0f b7 c0             	movzx  eax,ax
c000a0aa:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0af:	75 06                	jne    c000a0b7 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0b1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	0f b7 c0             	movzx  eax,ax
c000a0bd:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0c2:	75 06                	jne    c000a0ca <sendKeyboardToken(KeyboardToken)+0xce>
c000a0c4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cd:	0f b7 c0             	movzx  eax,ax
c000a0d0:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a0d5:	75 06                	jne    c000a0dd <sendKeyboardToken(KeyboardToken)+0xe1>
c000a0d7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e0:	0f b7 c0             	movzx  eax,ax
c000a0e3:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a0e8:	75 06                	jne    c000a0f0 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a0ea:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f3:	0f b7 c0             	movzx  eax,ax
c000a0f6:	3d 20 03 00 00       	cmp    eax,0x320
c000a0fb:	75 06                	jne    c000a103 <sendKeyboardToken(KeyboardToken)+0x107>
c000a0fd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a106:	0f b7 c0             	movzx  eax,ax
c000a109:	3d 21 03 00 00       	cmp    eax,0x321
c000a10e:	75 06                	jne    c000a116 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a110:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a119:	0f b7 c0             	movzx  eax,ax
c000a11c:	3d 22 03 00 00       	cmp    eax,0x322
c000a121:	0f 85 f1 00 00 00    	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a127:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a12d:	e9 e6 00 00 00       	jmp    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a135:	0f b7 c0             	movzx  eax,ax
c000a138:	3d 18 03 00 00       	cmp    eax,0x318
c000a13d:	75 0a                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a13f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a145:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 19 03 00 00       	cmp    eax,0x319
c000a154:	75 0a                	jne    c000a160 <sendKeyboardToken(KeyboardToken)+0x164>
c000a156:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a15c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a163:	0f b7 c0             	movzx  eax,ax
c000a166:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a16b:	75 0a                	jne    c000a177 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a16d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a173:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a17a:	0f b7 c0             	movzx  eax,ax
c000a17d:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a182:	75 0a                	jne    c000a18e <sendKeyboardToken(KeyboardToken)+0x192>
c000a184:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a18a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a19b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1b2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a1c9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a1e0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 20 03 00 00       	cmp    eax,0x320
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x205>
c000a1f7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 21 03 00 00       	cmp    eax,0x321
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a20e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 00 02 00 00       	cmp    eax,0x200
c000a223:	75 2f                	jne    c000a254 <sendKeyboardToken(KeyboardToken)+0x258>
c000a225:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a22a:	83 f0 01             	xor    eax,0x1
c000a22d:	0f b6 c0             	movzx  eax,al
c000a230:	85 c0                	test   eax,eax
c000a232:	74 20                	je     c000a254 <sendKeyboardToken(KeyboardToken)+0x258>
c000a234:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a239:	6a 01                	push   0x1
c000a23b:	6a 00                	push   0x0
c000a23d:	68 5c 9e 00 c0       	push   0xc0009e5c
c000a242:	50                   	push   eax
c000a243:	e8 5c c8 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a252:	eb 3a                	jmp    c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a257:	0f b7 c0             	movzx  eax,ax
c000a25a:	3d 01 02 00 00       	cmp    eax,0x201
c000a25f:	75 2d                	jne    c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a261:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a266:	83 f0 01             	xor    eax,0x1
c000a269:	0f b6 c0             	movzx  eax,al
c000a26c:	85 c0                	test   eax,eax
c000a26e:	74 1e                	je     c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a270:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a275:	6a 01                	push   0x1
c000a277:	6a 00                	push   0x0
c000a279:	68 c1 9e 00 c0       	push   0xc0009ec1
c000a27e:	50                   	push   eax
c000a27f:	e8 20 c8 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c000a284:	83 c4 10             	add    esp,0x10
c000a287:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a291:	0f b7 c0             	movzx  eax,ax
c000a294:	3d 25 03 00 00       	cmp    eax,0x325
c000a299:	75 06                	jne    c000a2a1 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a29b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a4:	0f b7 c0             	movzx  eax,ax
c000a2a7:	3d 24 03 00 00       	cmp    eax,0x324
c000a2ac:	75 06                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2ae:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 23 03 00 00       	cmp    eax,0x323
c000a2bf:	75 06                	jne    c000a2c7 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2c1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ca:	0f b7 c0             	movzx  eax,ax
c000a2cd:	3d 26 03 00 00       	cmp    eax,0x326
c000a2d2:	75 06                	jne    c000a2da <sendKeyboardToken(KeyboardToken)+0x2de>
c000a2d4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2dd:	0f b7 c0             	movzx  eax,ax
c000a2e0:	3d 27 03 00 00       	cmp    eax,0x327
c000a2e5:	75 06                	jne    c000a2ed <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a2e7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f0:	0f b7 c0             	movzx  eax,ax
c000a2f3:	3d 22 03 00 00       	cmp    eax,0x322
c000a2f8:	75 06                	jne    c000a300 <sendKeyboardToken(KeyboardToken)+0x304>
c000a2fa:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a300:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a304:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a307:	83 f0 01             	xor    eax,0x1
c000a30a:	0f b6 c0             	movzx  eax,al
c000a30d:	85 c0                	test   eax,eax
c000a30f:	74 7c                	je     c000a38d <sendKeyboardToken(KeyboardToken)+0x391>
c000a311:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a316:	0f b6 c0             	movzx  eax,al
c000a319:	85 c0                	test   eax,eax
c000a31b:	74 43                	je     c000a360 <sendKeyboardToken(KeyboardToken)+0x364>
c000a31d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a321:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a325:	85 c0                	test   eax,eax
c000a327:	74 2b                	je     c000a354 <sendKeyboardToken(KeyboardToken)+0x358>
c000a329:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a32f:	89 d0                	mov    eax,edx
c000a331:	c1 e0 02             	shl    eax,0x2
c000a334:	01 d0                	add    eax,edx
c000a336:	d1 e0                	shl    eax,1
c000a338:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a340:	0f b7 c0             	movzx  eax,ax
c000a343:	8d 50 d0             	lea    edx,[eax-0x30]
c000a346:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a34b:	01 d0                	add    eax,edx
c000a34d:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a352:	eb 71                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a354:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a35e:	eb 65                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a360:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a365:	85 c0                	test   eax,eax
c000a367:	74 18                	je     c000a381 <sendKeyboardToken(KeyboardToken)+0x385>
c000a369:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a36e:	0f b6 c0             	movzx  eax,al
c000a371:	83 ec 0c             	sub    esp,0xc
c000a374:	50                   	push   eax
c000a375:	e8 ac fb ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a37a:	83 c4 10             	add    esp,0x10
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a38b:	eb 38                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a390:	0f b7 c0             	movzx  eax,ax
c000a393:	3d 01 01 00 00       	cmp    eax,0x101
c000a398:	75 2b                	jne    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a39a:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a39f:	85 c0                	test   eax,eax
c000a3a1:	74 18                	je     c000a3bb <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3a3:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a8:	0f b6 c0             	movzx  eax,al
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	50                   	push   eax
c000a3af:	e8 72 fb ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a3b4:	83 c4 10             	add    esp,0x10
c000a3b7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3bb:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3c5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a3c8:	83 f0 01             	xor    eax,0x1
c000a3cb:	0f b6 c0             	movzx  eax,al
c000a3ce:	85 c0                	test   eax,eax
c000a3d0:	74 5a                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3d2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3d5:	83 f0 01             	xor    eax,0x1
c000a3d8:	0f b6 c0             	movzx  eax,al
c000a3db:	85 c0                	test   eax,eax
c000a3dd:	74 4d                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3df:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a3e4:	83 f0 01             	xor    eax,0x1
c000a3e7:	0f b6 c0             	movzx  eax,al
c000a3ea:	85 c0                	test   eax,eax
c000a3ec:	74 3e                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f1:	0f b7 c0             	movzx  eax,ax
c000a3f4:	83 f8 1f             	cmp    eax,0x1f
c000a3f7:	76 0b                	jbe    c000a404 <sendKeyboardToken(KeyboardToken)+0x408>
c000a3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3fc:	0f b7 c0             	movzx  eax,ax
c000a3ff:	83 f8 7e             	cmp    eax,0x7e
c000a402:	76 16                	jbe    c000a41a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a407:	0f b7 c0             	movzx  eax,ax
c000a40a:	83 f8 0a             	cmp    eax,0xa
c000a40d:	74 0b                	je     c000a41a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a412:	0f b7 c0             	movzx  eax,ax
c000a415:	83 f8 08             	cmp    eax,0x8
c000a418:	75 12                	jne    c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a41d:	0f b6 c0             	movzx  eax,al
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	50                   	push   eax
c000a424:	e8 fd fa ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a429:	83 c4 10             	add    esp,0x10
c000a42c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a42f:	83 f0 01             	xor    eax,0x1
c000a432:	0f b6 c0             	movzx  eax,al
c000a435:	85 c0                	test   eax,eax
c000a437:	74 5d                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a439:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a43c:	83 f0 01             	xor    eax,0x1
c000a43f:	0f b6 c0             	movzx  eax,al
c000a442:	85 c0                	test   eax,eax
c000a444:	74 50                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a446:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a44b:	0f b6 c0             	movzx  eax,al
c000a44e:	85 c0                	test   eax,eax
c000a450:	74 44                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a455:	0f b7 c0             	movzx  eax,ax
c000a458:	83 f8 3f             	cmp    eax,0x3f
c000a45b:	76 39                	jbe    c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a45d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a460:	0f b7 c0             	movzx  eax,ax
c000a463:	83 f8 7f             	cmp    eax,0x7f
c000a466:	77 2e                	ja     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46b:	88 c2                	mov    dl,al
c000a46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a470:	0f b7 c0             	movzx  eax,ax
c000a473:	83 f8 5f             	cmp    eax,0x5f
c000a476:	76 04                	jbe    c000a47c <sendKeyboardToken(KeyboardToken)+0x480>
c000a478:	b0 20                	mov    al,0x20
c000a47a:	eb 02                	jmp    c000a47e <sendKeyboardToken(KeyboardToken)+0x482>
c000a47c:	b0 00                	mov    al,0x0
c000a47e:	89 d1                	mov    ecx,edx
c000a480:	29 c1                	sub    ecx,eax
c000a482:	89 c8                	mov    eax,ecx
c000a484:	83 e8 40             	sub    eax,0x40
c000a487:	0f b6 c0             	movzx  eax,al
c000a48a:	83 ec 0c             	sub    esp,0xc
c000a48d:	50                   	push   eax
c000a48e:	e8 93 fa ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a493:	83 c4 10             	add    esp,0x10
c000a496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a499:	0f b7 c0             	movzx  eax,ax
c000a49c:	3d 00 03 00 00       	cmp    eax,0x300
c000a4a1:	75 12                	jne    c000a4b5 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4a3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4a6:	83 f0 01             	xor    eax,0x1
c000a4a9:	0f b6 c0             	movzx  eax,al
c000a4ac:	85 c0                	test   eax,eax
c000a4ae:	74 05                	je     c000a4b5 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4b0:	e8 d6 7b 00 00       	call   c001208b <doTerminalCycle()>
c000a4b5:	90                   	nop
c000a4b6:	c9                   	leave  
c000a4b7:	c3                   	ret    

c000a4b8 <clearInternalKeybuffer(VgaText*)>:
c000a4b8:	55                   	push   ebp
c000a4b9:	89 e5                	mov    ebp,esp
c000a4bb:	83 ec 08             	sub    esp,0x8
c000a4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c1:	05 02 01 00 00       	add    eax,0x102
c000a4c6:	83 ec 0c             	sub    esp,0xc
c000a4c9:	50                   	push   eax
c000a4ca:	e8 b1 60 ff ff       	call   c0000580 <strlen>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a4d5:	81 c2 02 01 00 00    	add    edx,0x102
c000a4db:	83 ec 04             	sub    esp,0x4
c000a4de:	50                   	push   eax
c000a4df:	6a 00                	push   0x0
c000a4e1:	52                   	push   edx
c000a4e2:	e8 09 60 ff ff       	call   c00004f0 <memset>
c000a4e7:	83 c4 10             	add    esp,0x10
c000a4ea:	90                   	nop
c000a4eb:	c9                   	leave  
c000a4ec:	c3                   	ret    

c000a4ed <readKeyboard(VgaText*, char*, unsigned long)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	89 e5                	mov    ebp,esp
c000a4f0:	83 ec 18             	sub    esp,0x18
c000a4f3:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a4f8:	85 c0                	test   eax,eax
c000a4fa:	74 2a                	je     c000a526 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a4fc:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a502:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a508:	83 ec 04             	sub    esp,0x4
c000a50b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a510:	83 ec 08             	sub    esp,0x8
c000a513:	89 e0                	mov    eax,esp
c000a515:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a518:	89 08                	mov    DWORD PTR [eax],ecx
c000a51a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a51d:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a521:	ff d2                	call   edx
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	fb                   	sti    
c000a527:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a52e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a532:	0f 84 08 01 00 00    	je     c000a640 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a53b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a541:	0f be c0             	movsx  eax,al
c000a544:	85 c0                	test   eax,eax
c000a546:	75 27                	jne    c000a56f <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a548:	fa                   	cli    
c000a549:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a54e:	83 c0 01             	add    eax,0x1
c000a551:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a556:	e8 c9 c7 00 00       	call   c0016d24 <schedule()>
c000a55b:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a563:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a568:	85 c0                	test   eax,eax
c000a56a:	75 cc                	jne    c000a538 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a56c:	fb                   	sti    
c000a56d:	eb c9                	jmp    c000a538 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a56f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a572:	8d 50 01             	lea    edx,[eax+0x1]
c000a575:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a578:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a57b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a581:	88 10                	mov    BYTE PTR [eax],dl
c000a583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a586:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a58c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a58f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a593:	83 f8 03             	cmp    eax,0x3
c000a596:	75 1e                	jne    c000a5b6 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a598:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5a2:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5a8:	83 ec 08             	sub    esp,0x8
c000a5ab:	6a 02                	push   0x2
c000a5ad:	50                   	push   eax
c000a5ae:	e8 b8 69 00 00       	call   c0010f6b <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5b3:	83 c4 10             	add    esp,0x10
c000a5b6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ba:	83 f8 1c             	cmp    eax,0x1c
c000a5bd:	75 1e                	jne    c000a5dd <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5c9:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5cf:	83 ec 08             	sub    esp,0x8
c000a5d2:	6a 09                	push   0x9
c000a5d4:	50                   	push   eax
c000a5d5:	e8 91 69 00 00       	call   c0010f6b <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5da:	83 c4 10             	add    esp,0x10
c000a5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e0:	05 02 01 00 00       	add    eax,0x102
c000a5e5:	83 ec 0c             	sub    esp,0xc
c000a5e8:	50                   	push   eax
c000a5e9:	e8 92 5f ff ff       	call   c0000580 <strlen>
c000a5ee:	83 c4 10             	add    esp,0x10
c000a5f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5f4:	81 c2 02 01 00 00    	add    edx,0x102
c000a5fa:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a5fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a600:	81 c2 02 01 00 00    	add    edx,0x102
c000a606:	83 ec 04             	sub    esp,0x4
c000a609:	50                   	push   eax
c000a60a:	51                   	push   ecx
c000a60b:	52                   	push   edx
c000a60c:	e8 bf 5d ff ff       	call   c00003d0 <memmove>
c000a611:	83 c4 10             	add    esp,0x10
c000a614:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a618:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a61c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a620:	83 f8 0a             	cmp    eax,0xa
c000a623:	74 16                	je     c000a63b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a625:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a629:	83 f8 03             	cmp    eax,0x3
c000a62c:	74 0d                	je     c000a63b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a62e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a632:	83 f8 1c             	cmp    eax,0x1c
c000a635:	0f 85 f3 fe ff ff    	jne    c000a52e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a63b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a63e:	eb 03                	jmp    c000a643 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a640:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a643:	c9                   	leave  
c000a644:	c3                   	ret    
c000a645:	90                   	nop

c000a646 <Keyboard::Keyboard(char const*)>:
c000a646:	83 ec 0c             	sub    esp,0xc
c000a649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a64d:	83 ec 08             	sub    esp,0x8
c000a650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a654:	50                   	push   eax
c000a655:	e8 a2 f4 ff ff       	call   c0009afc <Device::Device(char const*)>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	ba 20 34 02 c0       	mov    edx,0xc0023420
c000a662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a666:	89 10                	mov    DWORD PTR [eax],edx
c000a668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a66c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a676:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a67d:	90                   	nop
c000a67e:	83 c4 0c             	add    esp,0xc
c000a681:	c3                   	ret    

c000a682 <Keyboard::~Keyboard()>:
c000a682:	83 ec 0c             	sub    esp,0xc
c000a685:	ba 20 34 02 c0       	mov    edx,0xc0023420
c000a68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68e:	89 10                	mov    DWORD PTR [eax],edx
c000a690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a694:	83 ec 0c             	sub    esp,0xc
c000a697:	50                   	push   eax
c000a698:	e8 ff f1 ff ff       	call   c000989c <Device::~Device()>
c000a69d:	83 c4 10             	add    esp,0x10
c000a6a0:	90                   	nop
c000a6a1:	83 c4 0c             	add    esp,0xc
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::~Keyboard()>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	83 ec 0c             	sub    esp,0xc
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	e8 cd ff ff ff       	call   c000a682 <Keyboard::~Keyboard()>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	83 ec 08             	sub    esp,0x8
c000a6bb:	68 5c 01 00 00       	push   0x15c
c000a6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c4:	e8 5e 2b 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 c4 0c             	add    esp,0xc
c000a6cf:	c3                   	ret    

c000a6d0 <LogicalDisk::close(int, int, void*)>:
c000a6d0:	83 c8 ff             	or     eax,0xffffffff
c000a6d3:	c3                   	ret    

c000a6d4 <LogicalDisk::~LogicalDisk()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba 98 34 02 c0       	mov    edx,0xc0023498
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 ad f1 ff ff       	call   c000989c <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <LogicalDisk::~LogicalDisk()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <LogicalDisk::~LogicalDisk()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 78 01 00 00       	push   0x178
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 0c 2b 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <LogicalDisk::open(int, int, void*)>:
c000a722:	83 ec 18             	sub    esp,0x18
c000a725:	68 4c 34 02 c0       	push   0xc002344c
c000a72a:	e8 c7 56 00 00       	call   c000fdf6 <KePanic(char const*)>
c000a72f:	83 c8 ff             	or     eax,0xffffffff
c000a732:	83 c4 1c             	add    esp,0x1c
c000a735:	c3                   	ret    

c000a736 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a736:	53                   	push   ebx
c000a737:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a73b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a73f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a743:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a749:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a74f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a755:	77 10                	ja     c000a767 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a757:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a75d:	89 d3                	mov    ebx,edx
c000a75f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a765:	72 05                	jb     c000a76c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a767:	83 c8 ff             	or     eax,0xffffffff
c000a76a:	89 c2                	mov    edx,eax
c000a76c:	5b                   	pop    ebx
c000a76d:	c3                   	ret    

c000a76e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a76e:	56                   	push   esi
c000a76f:	83 c8 ff             	or     eax,0xffffffff
c000a772:	53                   	push   ebx
c000a773:	89 c2                	mov    edx,eax
c000a775:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a779:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a77d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a787:	77 27                	ja     c000a7b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a789:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a78f:	89 d8                	mov    eax,ebx
c000a791:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a797:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a79c:	89 c2                	mov    edx,eax
c000a79e:	73 10                	jae    c000a7b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7a0:	89 c8                	mov    eax,ecx
c000a7a2:	89 da                	mov    edx,ebx
c000a7a4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7aa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7b0:	5b                   	pop    ebx
c000a7b1:	5e                   	pop    esi
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7b4:	83 ec 1c             	sub    esp,0x1c
c000a7b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000a7ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a7d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7da:	83 ec 08             	sub    esp,0x8
c000a7dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7e1:	50                   	push   eax
c000a7e2:	e8 15 f3 ff ff       	call   c0009afc <Device::Device(char const*)>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	ba 98 34 02 c0       	mov    edx,0xc0023498
c000a7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7f3:	89 10                	mov    DWORD PTR [eax],edx
c000a7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7f9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a804:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a80f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a81a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a824:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a82c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a830:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a836:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a83c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a840:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a843:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a847:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a84d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a85b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a865:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a86f:	90                   	nop
c000a870:	83 c4 1c             	add    esp,0x1c
c000a873:	c3                   	ret    

c000a874 <LogicalDisk::assignDriveLetter()>:
c000a874:	55                   	push   ebp
c000a875:	57                   	push   edi
c000a876:	56                   	push   esi
c000a877:	53                   	push   ebx
c000a878:	83 ec 14             	sub    esp,0x14
c000a87b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a87f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a885:	b0 41                	mov    al,0x41
c000a887:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a88d:	84 d2                	test   dl,dl
c000a88f:	75 02                	jne    c000a893 <LogicalDisk::assignDriveLetter()+0x1f>
c000a891:	b0 43                	mov    al,0x43
c000a893:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a899:	0f b6 ca             	movzx  ecx,dl
c000a89c:	0f be e8             	movsx  ebp,al
c000a89f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8a3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8a7:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a8ad:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8b1:	3c 43                	cmp    al,0x43
c000a8b3:	75 10                	jne    c000a8c5 <LogicalDisk::assignDriveLetter()+0x51>
c000a8b5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8bc:	75 5a                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8c3:	75 53                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8c5:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a8c8:	ba 01 00 00 00       	mov    edx,0x1
c000a8cd:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8d0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a8d3:	d3 e2                	shl    edx,cl
c000a8d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8d9:	89 d7                	mov    edi,edx
c000a8db:	89 d6                	mov    esi,edx
c000a8dd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a8e1:	c1 ff 1f             	sar    edi,0x1f
c000a8e4:	21 f9                	and    ecx,edi
c000a8e6:	09 d1                	or     ecx,edx
c000a8e8:	75 2e                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a8f2:	09 f2                	or     edx,esi
c000a8f4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a8f7:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a8fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a901:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a907:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a90e:	09 fa                	or     edx,edi
c000a910:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a916:	eb 0d                	jmp    c000a925 <LogicalDisk::assignDriveLetter()+0xb1>
c000a918:	8d 50 01             	lea    edx,[eax+0x1]
c000a91b:	45                   	inc    ebp
c000a91c:	80 fa 5b             	cmp    dl,0x5b
c000a91f:	88 d0                	mov    al,dl
c000a921:	75 8e                	jne    c000a8b1 <LogicalDisk::assignDriveLetter()+0x3d>
c000a923:	31 c0                	xor    eax,eax
c000a925:	83 c4 14             	add    esp,0x14
c000a928:	5b                   	pop    ebx
c000a929:	5e                   	pop    esi
c000a92a:	5f                   	pop    edi
c000a92b:	5d                   	pop    ebp
c000a92c:	c3                   	ret    
c000a92d:	90                   	nop

c000a92e <LogicalDisk::mount()>:
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	53                   	push   ebx
c000a931:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a935:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a93b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a945:	85 db                	test   ebx,ebx
c000a947:	74 27                	je     c000a970 <LogicalDisk::mount()+0x42>
c000a949:	51                   	push   ecx
c000a94a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a951:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a953:	83 e8 41             	sub    eax,0x41
c000a956:	50                   	push   eax
c000a957:	56                   	push   esi
c000a958:	53                   	push   ebx
c000a959:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a95c:	83 c4 10             	add    esp,0x10
c000a95f:	84 c0                	test   al,al
c000a961:	74 08                	je     c000a96b <LogicalDisk::mount()+0x3d>
c000a963:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a969:	eb 07                	jmp    c000a972 <LogicalDisk::mount()+0x44>
c000a96b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a96e:	eb d5                	jmp    c000a945 <LogicalDisk::mount()+0x17>
c000a970:	31 c0                	xor    eax,eax
c000a972:	5a                   	pop    edx
c000a973:	5b                   	pop    ebx
c000a974:	5e                   	pop    esi
c000a975:	c3                   	ret    

c000a976 <LogicalDisk::unmount()>:
c000a976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a97a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a984:	c3                   	ret    
c000a985:	90                   	nop

c000a986 <LogicalDisk::eject()>:
c000a986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a990:	8b 10                	mov    edx,DWORD PTR [eax]
c000a992:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a996:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a999:	90                   	nop

c000a99a <LogicalDisk::unassignDriveLetter()>:
c000a99a:	57                   	push   edi
c000a99b:	56                   	push   esi
c000a99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9a0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9a7:	85 c9                	test   ecx,ecx
c000a9a9:	75 0f                	jne    c000a9ba <LogicalDisk::unassignDriveLetter()+0x20>
c000a9ab:	c7 44 24 0c 70 34 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023470
c000a9b3:	5e                   	pop    esi
c000a9b4:	5f                   	pop    edi
c000a9b5:	e9 3c 54 00 00       	jmp    c000fdf6 <KePanic(char const*)>
c000a9ba:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9c1:	83 e9 41             	sub    ecx,0x41
c000a9c4:	b8 01 00 00 00       	mov    eax,0x1
c000a9c9:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000a9d4:	d3 e0                	shl    eax,cl
c000a9d6:	89 c7                	mov    edi,eax
c000a9d8:	f7 d0                	not    eax
c000a9da:	c1 ff 1f             	sar    edi,0x1f
c000a9dd:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000a9e3:	89 fe                	mov    esi,edi
c000a9e5:	f7 d6                	not    esi
c000a9e7:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000a9ed:	5e                   	pop    esi
c000a9ee:	5f                   	pop    edi
c000a9ef:	c3                   	ret    

c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a9f0:	57                   	push   edi
c000a9f1:	56                   	push   esi
c000a9f2:	53                   	push   ebx
c000a9f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a9ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa03:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa09:	77 41                	ja     c000aa4c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa0b:	99                   	cdq    
c000aa0c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa12:	01 c8                	add    eax,ecx
c000aa14:	11 da                	adc    edx,ebx
c000aa16:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa1c:	19 d7                	sbb    edi,edx
c000aa1e:	72 33                	jb     c000aa53 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa20:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa26:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa30:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa34:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa44:	5b                   	pop    ebx
c000aa45:	5e                   	pop    esi
c000aa46:	5f                   	pop    edi
c000aa47:	e9 a2 0b 00 00       	jmp    c000b5ee <VCache::read(unsigned long long, int, void*)>
c000aa4c:	b8 05 00 00 00       	mov    eax,0x5
c000aa51:	eb 05                	jmp    c000aa58 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa53:	b8 07 00 00 00       	mov    eax,0x7
c000aa58:	5b                   	pop    ebx
c000aa59:	5e                   	pop    esi
c000aa5a:	5f                   	pop    edi
c000aa5b:	c3                   	ret    

c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa5c:	57                   	push   edi
c000aa5d:	56                   	push   esi
c000aa5e:	53                   	push   ebx
c000aa5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa6f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa75:	77 41                	ja     c000aab8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aa77:	99                   	cdq    
c000aa78:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa7e:	01 c8                	add    eax,ecx
c000aa80:	11 da                	adc    edx,ebx
c000aa82:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa88:	19 d7                	sbb    edi,edx
c000aa8a:	72 33                	jb     c000aabf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aa8c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa92:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa9c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaa0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaa6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab0:	5b                   	pop    ebx
c000aab1:	5e                   	pop    esi
c000aab2:	5f                   	pop    edi
c000aab3:	e9 68 09 00 00       	jmp    c000b420 <VCache::write(unsigned long long, int, void*)>
c000aab8:	b8 05 00 00 00       	mov    eax,0x5
c000aabd:	eb 05                	jmp    c000aac4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aabf:	b8 07 00 00 00       	mov    eax,0x7
c000aac4:	5b                   	pop    ebx
c000aac5:	5e                   	pop    esi
c000aac6:	5f                   	pop    edi
c000aac7:	c3                   	ret    

c000aac8 <Mouse::Mouse(char const*)>:
c000aac8:	83 ec 0c             	sub    esp,0xc
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	83 ec 08             	sub    esp,0x8
c000aad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad6:	50                   	push   eax
c000aad7:	e8 20 f0 ff ff       	call   c0009afc <Device::Device(char const*)>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	89 10                	mov    DWORD PTR [eax],edx
c000aaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaee:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000aaf8:	90                   	nop
c000aaf9:	83 c4 0c             	add    esp,0xc
c000aafc:	c3                   	ret    
c000aafd:	90                   	nop
c000aafe:	66 90                	xchg   ax,ax

c000ab00 <Mouse::~Mouse()>:
c000ab00:	83 ec 0c             	sub    esp,0xc
c000ab03:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c000ab08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0c:	89 10                	mov    DWORD PTR [eax],edx
c000ab0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab12:	83 ec 0c             	sub    esp,0xc
c000ab15:	50                   	push   eax
c000ab16:	e8 81 ed ff ff       	call   c000989c <Device::~Device()>
c000ab1b:	83 c4 10             	add    esp,0x10
c000ab1e:	90                   	nop
c000ab1f:	83 c4 0c             	add    esp,0xc
c000ab22:	c3                   	ret    
c000ab23:	90                   	nop

c000ab24 <Mouse::~Mouse()>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	83 ec 0c             	sub    esp,0xc
c000ab2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2e:	e8 cd ff ff ff       	call   c000ab00 <Mouse::~Mouse()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	83 ec 08             	sub    esp,0x8
c000ab39:	68 58 01 00 00       	push   0x158
c000ab3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab42:	e8 e0 26 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000ab47:	83 c4 10             	add    esp,0x10
c000ab4a:	83 c4 0c             	add    esp,0xc
c000ab4d:	c3                   	ret    

c000ab4e <NIC::getMAC()>:
c000ab4e:	31 c0                	xor    eax,eax
c000ab50:	31 d2                	xor    edx,edx
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <NIC::write(int, unsigned char*, int*)>:
c000ab54:	b8 01 00 00 00       	mov    eax,0x1
c000ab59:	c3                   	ret    

c000ab5a <NIC::NIC(char const*)>:
c000ab5a:	83 ec 0c             	sub    esp,0xc
c000ab5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab61:	83 ec 08             	sub    esp,0x8
c000ab64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab68:	50                   	push   eax
c000ab69:	e8 8e ef ff ff       	call   c0009afc <Device::Device(char const*)>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c000ab76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7a:	89 10                	mov    DWORD PTR [eax],edx
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ab8a:	90                   	nop
c000ab8b:	83 c4 0c             	add    esp,0xc
c000ab8e:	c3                   	ret    
c000ab8f:	90                   	nop

c000ab90 <NIC::~NIC()>:
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c000ab98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9c:	89 10                	mov    DWORD PTR [eax],edx
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	83 ec 0c             	sub    esp,0xc
c000aba5:	50                   	push   eax
c000aba6:	e8 f1 ec ff ff       	call   c000989c <Device::~Device()>
c000abab:	83 c4 10             	add    esp,0x10
c000abae:	90                   	nop
c000abaf:	83 c4 0c             	add    esp,0xc
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::~NIC()>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 0c             	sub    esp,0xc
c000abba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbe:	e8 cd ff ff ff       	call   c000ab90 <NIC::~NIC()>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 ec 08             	sub    esp,0x8
c000abc9:	68 58 01 00 00       	push   0x158
c000abce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abd2:	e8 50 26 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	83 c4 0c             	add    esp,0xc
c000abdd:	c3                   	ret    

c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000abde:	55                   	push   ebp
c000abdf:	57                   	push   edi
c000abe0:	56                   	push   esi
c000abe1:	53                   	push   ebx
c000abe2:	81 ec 28 01 00 00    	sub    esp,0x128
c000abe8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000abef:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000abf6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000abfd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac08:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac0c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac13:	e8 e0 ef ff ff       	call   c0009bf8 <Device::getName()>
c000ac18:	5a                   	pop    edx
c000ac19:	59                   	pop    ecx
c000ac1a:	50                   	push   eax
c000ac1b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac1f:	55                   	push   ebp
c000ac20:	e8 2b 5a ff ff       	call   c0000650 <strcpy>
c000ac25:	5b                   	pop    ebx
c000ac26:	58                   	pop    eax
c000ac27:	68 1c 35 02 c0       	push   0xc002351c
c000ac2c:	55                   	push   ebp
c000ac2d:	e8 3e 5c ff ff       	call   c0000870 <strcat>
c000ac32:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac39:	e8 72 4e 00 00       	call   c000fab0 <malloc>
c000ac3e:	83 c4 0c             	add    esp,0xc
c000ac41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac49:	89 c3                	mov    ebx,eax
c000ac4b:	57                   	push   edi
c000ac4c:	56                   	push   esi
c000ac4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac54:	55                   	push   ebp
c000ac55:	50                   	push   eax
c000ac56:	e8 59 fb ff ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac5b:	83 c4 14             	add    esp,0x14
c000ac5e:	53                   	push   ebx
c000ac5f:	e8 10 fc ff ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c000ac64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac67:	e8 c2 fc ff ff       	call   c000a92e <LogicalDisk::mount()>
c000ac6c:	58                   	pop    eax
c000ac6d:	5a                   	pop    edx
c000ac6e:	53                   	push   ebx
c000ac6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac76:	e8 1f ed ff ff       	call   c000999a <Device::addChild(Device*)>
c000ac7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ac81:	5b                   	pop    ebx
c000ac82:	5e                   	pop    esi
c000ac83:	5f                   	pop    edi
c000ac84:	5d                   	pop    ebp
c000ac85:	c3                   	ret    

c000ac86 <createPartitionsForDisk(PhysicalDisk*)>:
c000ac86:	55                   	push   ebp
c000ac87:	57                   	push   edi
c000ac88:	56                   	push   esi
c000ac89:	53                   	push   ebx
c000ac8a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ac90:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ac97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ac9d:	3d 00 02 00 00       	cmp    eax,0x200
c000aca2:	74 27                	je     c000accb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000aca4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000acaa:	83 ec 10             	sub    esp,0x10
c000acad:	99                   	cdq    
c000acae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acb4:	52                   	push   edx
c000acb5:	50                   	push   eax
c000acb6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000acba:	c1 e6 0a             	shl    esi,0xa
c000acbd:	89 fd                	mov    ebp,edi
c000acbf:	55                   	push   ebp
c000acc0:	56                   	push   esi
c000acc1:	e8 fe 69 01 00       	call   c00216c4 <__udivdi3>
c000acc6:	e9 b9 00 00 00       	jmp    c000ad84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000accb:	83 ec 0c             	sub    esp,0xc
c000acce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acd0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000acd4:	56                   	push   esi
c000acd5:	6a 01                	push   0x1
c000acd7:	6a 00                	push   0x0
c000acd9:	6a 00                	push   0x0
c000acdb:	53                   	push   ebx
c000acdc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acdf:	83 c4 20             	add    esp,0x20
c000ace2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000acea:	75 0a                	jne    c000acf6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000acec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000acf4:	74 2c                	je     c000ad22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000acf6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000acfc:	83 ec 10             	sub    esp,0x10
c000acff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad05:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad0b:	89 f7                	mov    edi,esi
c000ad0d:	c1 ff 1f             	sar    edi,0x1f
c000ad10:	57                   	push   edi
c000ad11:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad15:	56                   	push   esi
c000ad16:	c1 e0 0a             	shl    eax,0xa
c000ad19:	52                   	push   edx
c000ad1a:	50                   	push   eax
c000ad1b:	e8 a4 69 01 00       	call   c00216c4 <__udivdi3>
c000ad20:	eb 62                	jmp    c000ad84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad29:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad30:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad37:	89 cf                	mov    edi,ecx
c000ad39:	83 e2 7f             	and    edx,0x7f
c000ad3c:	83 e7 7f             	and    edi,0x7f
c000ad3f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad42:	83 e0 7f             	and    eax,0x7f
c000ad45:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad48:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad4f:	83 e0 7f             	and    eax,0x7f
c000ad52:	01 d0                	add    eax,edx
c000ad54:	84 c0                	test   al,al
c000ad56:	89 c5                	mov    ebp,eax
c000ad58:	74 41                	je     c000ad9b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad60:	83 ec 10             	sub    esp,0x10
c000ad63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 ff 1f             	sar    edi,0x1f
c000ad74:	57                   	push   edi
c000ad75:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad79:	56                   	push   esi
c000ad7a:	c1 e0 0a             	shl    eax,0xa
c000ad7d:	52                   	push   edx
c000ad7e:	50                   	push   eax
c000ad7f:	e8 40 69 01 00       	call   c00216c4 <__udivdi3>
c000ad84:	83 c4 14             	add    esp,0x14
c000ad87:	52                   	push   edx
c000ad88:	50                   	push   eax
c000ad89:	6a 00                	push   0x0
c000ad8b:	6a 00                	push   0x0
c000ad8d:	53                   	push   ebx
c000ad8e:	e8 4b fe ff ff       	call   c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad93:	83 c4 20             	add    esp,0x20
c000ad96:	e9 73 01 00 00       	jmp    c000af0e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ad9b:	89 f0                	mov    eax,esi
c000ad9d:	31 c9                	xor    ecx,ecx
c000ad9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ada6:	75 02                	jne    c000adaa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ada8:	89 cd                	mov    ebp,ecx
c000adaa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adb2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000adb9:	83 c0 10             	add    eax,0x10
c000adbc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adc4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000adcb:	c1 e2 08             	shl    edx,0x8
c000adce:	c1 e6 10             	shl    esi,0x10
c000add1:	09 f2                	or     edx,esi
c000add3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000adda:	09 f2                	or     edx,esi
c000addc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ade3:	c1 e6 18             	shl    esi,0x18
c000ade6:	09 f2                	or     edx,esi
c000ade8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000adef:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000adf3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000adfa:	c1 e6 10             	shl    esi,0x10
c000adfd:	c1 e2 08             	shl    edx,0x8
c000ae00:	09 f2                	or     edx,esi
c000ae02:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae09:	09 f2                	or     edx,esi
c000ae0b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae12:	c1 e6 18             	shl    esi,0x18
c000ae15:	09 f2                	or     edx,esi
c000ae17:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae1b:	41                   	inc    ecx
c000ae1c:	83 f9 04             	cmp    ecx,0x4
c000ae1f:	0f 85 7a ff ff ff    	jne    c000ad9f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae29:	83 f0 01             	xor    eax,0x1
c000ae2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae30:	75 4f                	jne    c000ae81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae36:	83 f0 01             	xor    eax,0x1
c000ae39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae3d:	75 42                	jne    c000ae81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae5b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae61:	89 f7                	mov    edi,esi
c000ae63:	c1 ff 1f             	sar    edi,0x1f
c000ae66:	57                   	push   edi
c000ae67:	56                   	push   esi
c000ae68:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae6c:	52                   	push   edx
c000ae6d:	c1 e0 0a             	shl    eax,0xa
c000ae70:	50                   	push   eax
c000ae71:	e8 4e 68 01 00       	call   c00216c4 <__udivdi3>
c000ae76:	83 c4 10             	add    esp,0x10
c000ae79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ae81:	89 e8                	mov    eax,ebp
c000ae83:	0f b6 e8             	movzx  ebp,al
c000ae86:	85 ed                	test   ebp,ebp
c000ae88:	74 50                	je     c000aeda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000ae8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ae9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aea2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aeaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aeae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aebe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aec2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aec6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aeca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000aece:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000aed2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000aed6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000aeda:	31 ed                	xor    ebp,ebp
c000aedc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aee0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aee4:	89 f8                	mov    eax,edi
c000aee6:	09 f0                	or     eax,esi
c000aee8:	74 1e                	je     c000af08 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aeea:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aeee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aef2:	89 d1                	mov    ecx,edx
c000aef4:	09 c1                	or     ecx,eax
c000aef6:	74 10                	je     c000af08 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	57                   	push   edi
c000aefc:	56                   	push   esi
c000aefd:	52                   	push   edx
c000aefe:	50                   	push   eax
c000aeff:	53                   	push   ebx
c000af00:	e8 d9 fc ff ff       	call   c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af05:	83 c4 20             	add    esp,0x20
c000af08:	45                   	inc    ebp
c000af09:	83 fd 04             	cmp    ebp,0x4
c000af0c:	75 ce                	jne    c000aedc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af0e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af14:	5b                   	pop    ebx
c000af15:	5e                   	pop    esi
c000af16:	5f                   	pop    edi
c000af17:	5d                   	pop    ebp
c000af18:	c3                   	ret    
c000af19:	66 90                	xchg   ax,ax
c000af1b:	90                   	nop

c000af1c <Serial::Serial(char const*)>:
c000af1c:	83 ec 0c             	sub    esp,0xc
c000af1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af23:	83 ec 08             	sub    esp,0x8
c000af26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2a:	50                   	push   eax
c000af2b:	e8 cc eb ff ff       	call   c0009afc <Device::Device(char const*)>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	ba 30 35 02 c0       	mov    edx,0xc0023530
c000af38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3c:	89 10                	mov    DWORD PTR [eax],edx
c000af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af42:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af4c:	90                   	nop
c000af4d:	83 c4 0c             	add    esp,0xc
c000af50:	c3                   	ret    
c000af51:	90                   	nop
c000af52:	66 90                	xchg   ax,ax

c000af54 <Serial::~Serial()>:
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	ba 30 35 02 c0       	mov    edx,0xc0023530
c000af5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af60:	89 10                	mov    DWORD PTR [eax],edx
c000af62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af66:	83 ec 0c             	sub    esp,0xc
c000af69:	50                   	push   eax
c000af6a:	e8 2d e9 ff ff       	call   c000989c <Device::~Device()>
c000af6f:	83 c4 10             	add    esp,0x10
c000af72:	90                   	nop
c000af73:	83 c4 0c             	add    esp,0xc
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Serial::~Serial()>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	83 ec 0c             	sub    esp,0xc
c000af7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af82:	e8 cd ff ff ff       	call   c000af54 <Serial::~Serial()>
c000af87:	83 c4 10             	add    esp,0x10
c000af8a:	83 ec 08             	sub    esp,0x8
c000af8d:	68 58 01 00 00       	push   0x158
c000af92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af96:	e8 8c 22 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000af9b:	83 c4 10             	add    esp,0x10
c000af9e:	83 c4 0c             	add    esp,0xc
c000afa1:	c3                   	ret    
c000afa2:	66 90                	xchg   ax,ax

c000afa4 <Timer::Timer(char const*)>:
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afab:	83 ec 08             	sub    esp,0x8
c000afae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb2:	50                   	push   eax
c000afb3:	e8 44 eb ff ff       	call   c0009afc <Device::Device(char const*)>
c000afb8:	83 c4 10             	add    esp,0x10
c000afbb:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c000afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc4:	89 10                	mov    DWORD PTR [eax],edx
c000afc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000afd4:	90                   	nop
c000afd5:	83 c4 0c             	add    esp,0xc
c000afd8:	c3                   	ret    
c000afd9:	90                   	nop
c000afda:	66 90                	xchg   ax,ax

c000afdc <Timer::~Timer()>:
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c000afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe8:	89 10                	mov    DWORD PTR [eax],edx
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	50                   	push   eax
c000aff2:	e8 a5 e8 ff ff       	call   c000989c <Device::~Device()>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	90                   	nop
c000affb:	83 c4 0c             	add    esp,0xc
c000affe:	c3                   	ret    
c000afff:	90                   	nop

c000b000 <Timer::~Timer()>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	83 ec 0c             	sub    esp,0xc
c000b006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00a:	e8 cd ff ff ff       	call   c000afdc <Timer::~Timer()>
c000b00f:	83 c4 10             	add    esp,0x10
c000b012:	83 ec 08             	sub    esp,0x8
c000b015:	68 5c 01 00 00       	push   0x15c
c000b01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01e:	e8 04 22 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000b023:	83 c4 10             	add    esp,0x10
c000b026:	83 c4 0c             	add    esp,0xc
c000b029:	c3                   	ret    

c000b02a <Timer::read()>:
c000b02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b02e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b034:	c3                   	ret    

c000b035 <setupTimer(int)>:
c000b035:	53                   	push   ebx
c000b036:	83 ec 14             	sub    esp,0x14
c000b039:	68 5c 01 00 00       	push   0x15c
c000b03e:	e8 6d 4a 00 00       	call   c000fab0 <malloc>
c000b043:	89 04 24             	mov    DWORD PTR [esp],eax
c000b046:	89 c3                	mov    ebx,eax
c000b048:	e8 27 5f 01 00       	call   c0020f74 <PIT::PIT()>
c000b04d:	58                   	pop    eax
c000b04e:	5a                   	pop    edx
c000b04f:	53                   	push   ebx
c000b050:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b056:	e8 3f e9 ff ff       	call   c000999a <Device::addChild(Device*)>
c000b05b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b05d:	6a 00                	push   0x0
c000b05f:	6a 00                	push   0x0
c000b061:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b065:	53                   	push   ebx
c000b066:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b069:	83 c4 28             	add    esp,0x28
c000b06c:	89 d8                	mov    eax,ebx
c000b06e:	5b                   	pop    ebx
c000b06f:	c3                   	ret    

c000b070 <timerHandler(unsigned int)>:
c000b070:	57                   	push   edi
c000b071:	31 d2                	xor    edx,edx
c000b073:	56                   	push   esi
c000b074:	53                   	push   ebx
c000b075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b079:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b07f:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b085:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b08c:	75 12                	jne    c000b0a0 <timerHandler(unsigned int)+0x30>
c000b08e:	c7 44 24 10 bf 35 02 c0 	mov    DWORD PTR [esp+0x10],0xc00235bf
c000b096:	5b                   	pop    ebx
c000b097:	5e                   	pop    esi
c000b098:	5f                   	pop    edi
c000b099:	e9 b0 be ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09e:	66 90                	xchg   ax,ax
c000b0a0:	fa                   	cli    
c000b0a1:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	68 40 ea 02 c0       	push   0xc002ea40
c000b0af:	e8 a8 69 01 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	84 c0                	test   al,al
c000b0b9:	0f 85 a9 00 00 00    	jne    c000b168 <timerHandler(unsigned int)+0xf8>
c000b0bf:	83 ec 0c             	sub    esp,0xc
c000b0c2:	68 40 ea 02 c0       	push   0xc002ea40
c000b0c7:	e8 ac 69 01 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 c6                	mov    esi,eax
c000b0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	68 40 ea 02 c0       	push   0xc002ea40
c000b0dc:	e8 97 69 01 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0e1:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b0e8:	89 c7                	mov    edi,eax
c000b0ea:	e8 91 69 01 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b0ef:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b0f2:	83 c4 10             	add    esp,0x10
c000b0f5:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b0f8:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b0fd:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b103:	19 c8                	sbb    eax,ecx
c000b105:	72 21                	jb     c000b128 <timerHandler(unsigned int)+0xb8>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	57                   	push   edi
c000b10b:	e8 6c bf 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	39 fe                	cmp    esi,edi
c000b115:	75 25                	jne    c000b13c <timerHandler(unsigned int)+0xcc>
c000b117:	83 ec 0c             	sub    esp,0xc
c000b11a:	68 40 ea 02 c0       	push   0xc002ea40
c000b11f:	e8 54 69 01 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b124:	89 c6                	mov    esi,eax
c000b126:	eb 10                	jmp    c000b138 <timerHandler(unsigned int)+0xc8>
c000b128:	50                   	push   eax
c000b129:	50                   	push   eax
c000b12a:	57                   	push   edi
c000b12b:	68 40 ea 02 c0       	push   0xc002ea40
c000b130:	e8 07 6a 01 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b135:	8d 76 00             	lea    esi,[esi+0x0]
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	90                   	nop
c000b13c:	83 ec 0c             	sub    esp,0xc
c000b13f:	68 40 ea 02 c0       	push   0xc002ea40
c000b144:	e8 13 69 01 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	84 c0                	test   al,al
c000b14e:	75 18                	jne    c000b168 <timerHandler(unsigned int)+0xf8>
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	68 40 ea 02 c0       	push   0xc002ea40
c000b158:	e8 1b 69 01 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	39 f0                	cmp    eax,esi
c000b162:	0f 85 6c ff ff ff    	jne    c000b0d4 <timerHandler(unsigned int)+0x64>
c000b168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b16d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b170:	85 c0                	test   eax,eax
c000b172:	74 48                	je     c000b1bc <timerHandler(unsigned int)+0x14c>
c000b174:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b17b:	74 3f                	je     c000b1bc <timerHandler(unsigned int)+0x14c>
c000b17d:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b182:	76 1c                	jbe    c000b1a0 <timerHandler(unsigned int)+0x130>
c000b184:	83 ec 0c             	sub    esp,0xc
c000b187:	68 d5 35 02 c0       	push   0xc00235d5
c000b18c:	e8 bd bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1a6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1a9:	89 c1                	mov    ecx,eax
c000b1ab:	29 d9                	sub    ecx,ebx
c000b1ad:	39 d8                	cmp    eax,ebx
c000b1af:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b1b2:	77 08                	ja     c000b1bc <timerHandler(unsigned int)+0x14c>
c000b1b4:	e8 6b bb 00 00       	call   c0016d24 <schedule()>
c000b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1bc:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b1c3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b1ca:	75 04                	jne    c000b1d0 <timerHandler(unsigned int)+0x160>
c000b1cc:	fb                   	sti    
c000b1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b1d0:	5b                   	pop    ebx
c000b1d1:	5e                   	pop    esi
c000b1d2:	5f                   	pop    edi
c000b1d3:	c3                   	ret    

c000b1d4 <VCache::VCache(PhysicalDisk*)>:
c000b1d4:	53                   	push   ebx
c000b1d5:	83 ec 18             	sub    esp,0x18
c000b1d8:	ba 7c 36 02 c0       	mov    edx,0xc002367c
c000b1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1e1:	89 10                	mov    DWORD PTR [eax],edx
c000b1e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1e7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1f2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1fd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b204:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b20f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b216:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b221:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b22c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b234:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b23b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b246:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b256:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b25e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b265:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b26d:	83 ec 0c             	sub    esp,0xc
c000b270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b274:	e8 37 48 00 00       	call   c000fab0 <malloc>
c000b279:	83 c4 10             	add    esp,0x10
c000b27c:	89 c3                	mov    ebx,eax
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	53                   	push   ebx
c000b282:	e8 55 4b 00 00       	call   c000fddc <Mutex::Mutex()>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b295:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b299:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b29c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2ab:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2bc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b2c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b2c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2cc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b2cf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b2e4:	05 00 01 00 00       	add    eax,0x100
c000b2e9:	c1 e0 04             	shl    eax,0x4
c000b2ec:	83 ec 0c             	sub    esp,0xc
c000b2ef:	50                   	push   eax
c000b2f0:	e8 bb 47 00 00       	call   c000fab0 <malloc>
c000b2f5:	83 c4 10             	add    esp,0x10
c000b2f8:	89 c2                	mov    edx,eax
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b305:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b30c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b310:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b318:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b31e:	89 d0                	mov    eax,edx
c000b320:	c1 e0 02             	shl    eax,0x2
c000b323:	01 d0                	add    eax,edx
c000b325:	c1 e0 04             	shl    eax,0x4
c000b328:	83 ec 0c             	sub    esp,0xc
c000b32b:	50                   	push   eax
c000b32c:	e8 7f 47 00 00       	call   c000fab0 <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c2                	mov    edx,eax
c000b336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b33d:	90                   	nop
c000b33e:	83 c4 18             	add    esp,0x18
c000b341:	5b                   	pop    ebx
c000b342:	c3                   	ret    
c000b343:	90                   	nop

c000b344 <VCache::invalidateReadBuffer()>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b34e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <VCache::writeWriteBuffer()>:
c000b354:	53                   	push   ebx
c000b355:	83 ec 08             	sub    esp,0x8
c000b358:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b35c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b360:	74 1e                	je     c000b380 <VCache::writeWriteBuffer()+0x2c>
c000b362:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b365:	83 ec 0c             	sub    esp,0xc
c000b368:	8b 10                	mov    edx,DWORD PTR [eax]
c000b36a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b36d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b370:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b373:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b376:	50                   	push   eax
c000b377:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b37a:	83 c4 20             	add    esp,0x20
c000b37d:	8d 76 00             	lea    esi,[esi+0x0]
c000b380:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b387:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b38e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b392:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b399:	83 c4 08             	add    esp,0x8
c000b39c:	5b                   	pop    ebx
c000b39d:	c3                   	ret    
c000b39e:	66 90                	xchg   ax,ax

c000b3a0 <VCache::~VCache()>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	ba 7c 36 02 c0       	mov    edx,0xc002367c
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	89 10                	mov    DWORD PTR [eax],edx
c000b3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3b5:	0f b6 c0             	movzx  eax,al
c000b3b8:	85 c0                	test   eax,eax
c000b3ba:	74 10                	je     c000b3cc <VCache::~VCache()+0x2c>
c000b3bc:	83 ec 0c             	sub    esp,0xc
c000b3bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c3:	e8 8c ff ff ff       	call   c000b354 <VCache::writeWriteBuffer()>
c000b3c8:	83 c4 10             	add    esp,0x10
c000b3cb:	90                   	nop
c000b3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b3d3:	83 ec 0c             	sub    esp,0xc
c000b3d6:	50                   	push   eax
c000b3d7:	e8 e4 46 00 00       	call   c000fac0 <free>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	50                   	push   eax
c000b3ea:	e8 d1 46 00 00       	call   c000fac0 <free>
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	90                   	nop
c000b3f3:	83 c4 0c             	add    esp,0xc
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <VCache::~VCache()>:
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 99 ff ff ff       	call   c000b3a0 <VCache::~VCache()>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 ec 08             	sub    esp,0x8
c000b40d:	6a 44                	push   0x44
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	e8 0f 1e 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	83 c4 0c             	add    esp,0xc
c000b41e:	c3                   	ret    
c000b41f:	90                   	nop

c000b420 <VCache::write(unsigned long long, int, void*)>:
c000b420:	55                   	push   ebp
c000b421:	57                   	push   edi
c000b422:	56                   	push   esi
c000b423:	53                   	push   ebx
c000b424:	83 ec 1c             	sub    esp,0x1c
c000b427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b42b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b42f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b433:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b437:	e8 20 b6 00 00       	call   c0016a5c <KeDisablePreemption()>
c000b43c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b441:	50                   	push   eax
c000b442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b445:	0f af c3             	imul   eax,ebx
c000b448:	05 ff 0f 00 00       	add    eax,0xfff
c000b44d:	99                   	cdq    
c000b44e:	f7 f9                	idiv   ecx
c000b450:	50                   	push   eax
c000b451:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b455:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b45b:	e8 4c 8b 00 00       	call   c0013fac <VAS::canLockPages(unsigned long, int)>
c000b460:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b46c:	74 2a                	je     c000b498 <VCache::write(unsigned long long, int, void*)+0x78>
c000b46e:	50                   	push   eax
c000b46f:	b9 00 10 00 00       	mov    ecx,0x1000
c000b474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b477:	0f af c3             	imul   eax,ebx
c000b47a:	05 ff 0f 00 00       	add    eax,0xfff
c000b47f:	99                   	cdq    
c000b480:	f7 f9                	idiv   ecx
c000b482:	50                   	push   eax
c000b483:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b487:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b48d:	e8 14 8f 00 00       	call   c00143a6 <VAS::lockPages(unsigned long, int)>
c000b492:	83 c4 10             	add    esp,0x10
c000b495:	8d 76 00             	lea    esi,[esi+0x0]
c000b498:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b49c:	74 0e                	je     c000b4ac <VCache::write(unsigned long long, int, void*)+0x8c>
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	55                   	push   ebp
c000b4a2:	e8 9d fe ff ff       	call   c000b344 <VCache::invalidateReadBuffer()>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	66 90                	xchg   ax,ax
c000b4ac:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4b0:	74 72                	je     c000b524 <VCache::write(unsigned long long, int, void*)+0x104>
c000b4b2:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4b5:	89 c8                	mov    eax,ecx
c000b4b7:	99                   	cdq    
c000b4b8:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4bb:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b4ce:	31 f0                	xor    eax,esi
c000b4d0:	31 fa                	xor    edx,edi
c000b4d2:	09 d0                	or     eax,edx
c000b4d4:	75 42                	jne    c000b518 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b4d6:	83 fb 01             	cmp    ebx,0x1
c000b4d9:	75 3d                	jne    c000b518 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4de:	89 cf                	mov    edi,ecx
c000b4e0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b4e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b4ea:	0f af f8             	imul   edi,eax
c000b4ed:	89 c1                	mov    ecx,eax
c000b4ef:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b4f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4f4:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b4f7:	40                   	inc    eax
c000b4f8:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b4fb:	83 f8 50             	cmp    eax,0x50
c000b4fe:	0f 85 a8 00 00 00    	jne    c000b5ac <VCache::write(unsigned long long, int, void*)+0x18c>
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	55                   	push   ebp
c000b508:	e8 47 fe ff ff       	call   c000b354 <VCache::writeWriteBuffer()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	e9 97 00 00 00       	jmp    c000b5ac <VCache::write(unsigned long long, int, void*)+0x18c>
c000b515:	8d 76 00             	lea    esi,[esi+0x0]
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	55                   	push   ebp
c000b51c:	e8 33 fe ff ff       	call   c000b354 <VCache::writeWriteBuffer()>
c000b521:	83 c4 10             	add    esp,0x10
c000b524:	83 fb 4f             	cmp    ebx,0x4f
c000b527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b52a:	7f 20                	jg     c000b54c <VCache::write(unsigned long long, int, void*)+0x12c>
c000b52c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b52f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b533:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b536:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b539:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b53c:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b540:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b546:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b548:	eb 62                	jmp    c000b5ac <VCache::write(unsigned long long, int, void*)+0x18c>
c000b54a:	66 90                	xchg   ax,ax
c000b54c:	83 ec 0c             	sub    esp,0xc
c000b54f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b551:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b555:	53                   	push   ebx
c000b556:	57                   	push   edi
c000b557:	56                   	push   esi
c000b558:	50                   	push   eax
c000b559:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b55c:	83 c4 20             	add    esp,0x20
c000b55f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b564:	89 c6                	mov    esi,eax
c000b566:	74 28                	je     c000b590 <VCache::write(unsigned long long, int, void*)+0x170>
c000b568:	52                   	push   edx
c000b569:	b9 00 10 00 00       	mov    ecx,0x1000
c000b56e:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b572:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b578:	99                   	cdq    
c000b579:	f7 f9                	idiv   ecx
c000b57b:	50                   	push   eax
c000b57c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b580:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b586:	e8 5d 8a 00 00       	call   c0013fe8 <VAS::unlockPages(unsigned long, int)>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	66 90                	xchg   ax,ax
c000b590:	e8 ef b4 00 00       	call   c0016a84 <KeRestorePreemption()>
c000b595:	85 f6                	test   esi,esi
c000b597:	74 4b                	je     c000b5e4 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b599:	83 ec 0c             	sub    esp,0xc
c000b59c:	68 34 36 02 c0       	push   0xc0023634
c000b5a1:	e8 a8 b9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b5a6:	83 c4 10             	add    esp,0x10
c000b5a9:	eb 39                	jmp    c000b5e4 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5ab:	90                   	nop
c000b5ac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5b1:	74 29                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5b3:	50                   	push   eax
c000b5b4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5b9:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5bd:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5c3:	99                   	cdq    
c000b5c4:	f7 f9                	idiv   ecx
c000b5c6:	50                   	push   eax
c000b5c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5cb:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5d1:	e8 12 8a 00 00       	call   c0013fe8 <VAS::unlockPages(unsigned long, int)>
c000b5d6:	83 c4 10             	add    esp,0x10
c000b5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5dc:	e8 a3 b4 00 00       	call   c0016a84 <KeRestorePreemption()>
c000b5e1:	31 f6                	xor    esi,esi
c000b5e3:	90                   	nop
c000b5e4:	83 c4 1c             	add    esp,0x1c
c000b5e7:	89 f0                	mov    eax,esi
c000b5e9:	5b                   	pop    ebx
c000b5ea:	5e                   	pop    esi
c000b5eb:	5f                   	pop    edi
c000b5ec:	5d                   	pop    ebp
c000b5ed:	c3                   	ret    

c000b5ee <VCache::read(unsigned long long, int, void*)>:
c000b5ee:	55                   	push   ebp
c000b5ef:	bd 00 10 00 00       	mov    ebp,0x1000
c000b5f4:	57                   	push   edi
c000b5f5:	56                   	push   esi
c000b5f6:	53                   	push   ebx
c000b5f7:	83 ec 2c             	sub    esp,0x2c
c000b5fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b5fe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b602:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b606:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b60a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b60e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b612:	e8 45 b4 00 00       	call   c0016a5c <KeDisablePreemption()>
c000b617:	50                   	push   eax
c000b618:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b61b:	0f af c6             	imul   eax,esi
c000b61e:	05 ff 0f 00 00       	add    eax,0xfff
c000b623:	99                   	cdq    
c000b624:	f7 fd                	idiv   ebp
c000b626:	50                   	push   eax
c000b627:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b62b:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b631:	e8 76 89 00 00       	call   c0013fac <VAS::canLockPages(unsigned long, int)>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	84 c0                	test   al,al
c000b63b:	89 c7                	mov    edi,eax
c000b63d:	74 25                	je     c000b664 <VCache::read(unsigned long long, int, void*)+0x76>
c000b63f:	50                   	push   eax
c000b640:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b643:	0f af c6             	imul   eax,esi
c000b646:	05 ff 0f 00 00       	add    eax,0xfff
c000b64b:	99                   	cdq    
c000b64c:	f7 fd                	idiv   ebp
c000b64e:	50                   	push   eax
c000b64f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b653:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b659:	e8 48 8d 00 00       	call   c00143a6 <VAS::lockPages(unsigned long, int)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	8d 76 00             	lea    esi,[esi+0x0]
c000b664:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b668:	74 0e                	je     c000b678 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b66a:	83 ec 0c             	sub    esp,0xc
c000b66d:	53                   	push   ebx
c000b66e:	e8 e1 fc ff ff       	call   c000b354 <VCache::writeWriteBuffer()>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	66 90                	xchg   ax,ax
c000b678:	83 fe 01             	cmp    esi,0x1
c000b67b:	0f 85 fb 00 00 00    	jne    c000b77c <VCache::read(unsigned long long, int, void*)+0x18e>
c000b681:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b684:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b68b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b68f:	0f 85 e7 00 00 00    	jne    c000b77c <VCache::read(unsigned long long, int, void*)+0x18e>
c000b695:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b698:	89 ee                	mov    esi,ebp
c000b69a:	f7 de                	neg    esi
c000b69c:	89 f0                	mov    eax,esi
c000b69e:	c1 f8 1f             	sar    eax,0x1f
c000b6a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b6a9:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b6ad:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6b1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6b5:	89 ca                	mov    edx,ecx
c000b6b7:	89 f9                	mov    ecx,edi
c000b6b9:	0f b6 f9             	movzx  edi,cl
c000b6bc:	89 f0                	mov    eax,esi
c000b6be:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b6c2:	74 0c                	je     c000b6d0 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6c4:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b6c7:	75 07                	jne    c000b6d0 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6c9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b6cc:	74 56                	je     c000b724 <VCache::read(unsigned long long, int, void*)+0x136>
c000b6ce:	66 90                	xchg   ax,ax
c000b6d0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b6d4:	83 ec 0c             	sub    esp,0xc
c000b6d7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b6da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b6de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b6e1:	8b 37                	mov    esi,DWORD PTR [edi]
c000b6e3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b6e6:	55                   	push   ebp
c000b6e7:	52                   	push   edx
c000b6e8:	50                   	push   eax
c000b6e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b6ed:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b6f0:	83 c4 20             	add    esp,0x20
c000b6f3:	85 c0                	test   eax,eax
c000b6f5:	89 c5                	mov    ebp,eax
c000b6f7:	74 2b                	je     c000b724 <VCache::read(unsigned long long, int, void*)+0x136>
c000b6f9:	83 ec 0c             	sub    esp,0xc
c000b6fc:	68 4c 36 02 c0       	push   0xc002364c
c000b701:	e8 48 b8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b706:	83 c4 10             	add    esp,0x10
c000b709:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b70e:	0f 84 bc 00 00 00    	je     c000b7d0 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b714:	56                   	push   esi
c000b715:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b718:	05 ff 0f 00 00       	add    eax,0xfff
c000b71d:	e9 92 00 00 00       	jmp    c000b7b4 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b722:	66 90                	xchg   ax,ax
c000b724:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b727:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b72b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b731:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b734:	8d 70 ff             	lea    esi,[eax-0x1]
c000b737:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b73b:	0f af f1             	imul   esi,ecx
c000b73e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b741:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b743:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b748:	74 26                	je     c000b770 <VCache::read(unsigned long long, int, void*)+0x182>
c000b74a:	51                   	push   ecx
c000b74b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b750:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b753:	05 ff 0f 00 00       	add    eax,0xfff
c000b758:	99                   	cdq    
c000b759:	f7 f9                	idiv   ecx
c000b75b:	50                   	push   eax
c000b75c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b760:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b766:	e8 7d 88 00 00       	call   c0013fe8 <VAS::unlockPages(unsigned long, int)>
c000b76b:	83 c4 10             	add    esp,0x10
c000b76e:	66 90                	xchg   ax,ax
c000b770:	e8 0f b3 00 00       	call   c0016a84 <KeRestorePreemption()>
c000b775:	31 ed                	xor    ebp,ebp
c000b777:	eb 5f                	jmp    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b779:	8d 76 00             	lea    esi,[esi+0x0]
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	53                   	push   ebx
c000b780:	e8 bf fb ff ff       	call   c000b344 <VCache::invalidateReadBuffer()>
c000b785:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b788:	5a                   	pop    edx
c000b789:	8b 10                	mov    edx,DWORD PTR [eax]
c000b78b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b78f:	56                   	push   esi
c000b790:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b794:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b798:	50                   	push   eax
c000b799:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b79c:	83 c4 20             	add    esp,0x20
c000b79f:	89 c5                	mov    ebp,eax
c000b7a1:	89 f8                	mov    eax,edi
c000b7a3:	84 c0                	test   al,al
c000b7a5:	74 29                	je     c000b7d0 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b7a7:	50                   	push   eax
c000b7a8:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7ac:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7b2:	66 90                	xchg   ax,ax
c000b7b4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7b9:	99                   	cdq    
c000b7ba:	f7 f9                	idiv   ecx
c000b7bc:	50                   	push   eax
c000b7bd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7c1:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7c7:	e8 1c 88 00 00       	call   c0013fe8 <VAS::unlockPages(unsigned long, int)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	90                   	nop
c000b7d0:	e8 af b2 00 00       	call   c0016a84 <KeRestorePreemption()>
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	83 c4 2c             	add    esp,0x2c
c000b7db:	89 e8                	mov    eax,ebp
c000b7dd:	5b                   	pop    ebx
c000b7de:	5e                   	pop    esi
c000b7df:	5f                   	pop    edi
c000b7e0:	5d                   	pop    ebp
c000b7e1:	c3                   	ret    

c000b7e2 <Video::putrect(int, int, int, int, unsigned int)>:
c000b7e2:	55                   	push   ebp
c000b7e3:	57                   	push   edi
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	83 ec 1c             	sub    esp,0x1c
c000b7e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b7ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b7f1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b7f5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b7f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b801:	01 df                	add    edi,ebx
c000b803:	39 fb                	cmp    ebx,edi
c000b805:	7d 1f                	jge    c000b826 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b807:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b80b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b80f:	7d 12                	jge    c000b823 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b811:	8b 16                	mov    edx,DWORD PTR [esi]
c000b813:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b817:	53                   	push   ebx
c000b818:	55                   	push   ebp
c000b819:	45                   	inc    ebp
c000b81a:	56                   	push   esi
c000b81b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	eb e8                	jmp    c000b80b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b823:	43                   	inc    ebx
c000b824:	eb dd                	jmp    c000b803 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b826:	83 c4 1c             	add    esp,0x1c
c000b829:	5b                   	pop    ebx
c000b82a:	5e                   	pop    esi
c000b82b:	5f                   	pop    edi
c000b82c:	5d                   	pop    ebp
c000b82d:	c3                   	ret    

c000b82e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b82e:	55                   	push   ebp
c000b82f:	57                   	push   edi
c000b830:	31 ff                	xor    edi,edi
c000b832:	56                   	push   esi
c000b833:	53                   	push   ebx
c000b834:	83 ec 1c             	sub    esp,0x1c
c000b837:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b83b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b83f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b846:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b84b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b853:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b857:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b85a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b85e:	01 f9                	add    ecx,edi
c000b860:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b864:	7d 2f                	jge    c000b895 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b866:	31 f6                	xor    esi,esi
c000b868:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b86c:	01 f2                	add    edx,esi
c000b86e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b872:	7d 1a                	jge    c000b88e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b874:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b877:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b87a:	46                   	inc    esi
c000b87b:	51                   	push   ecx
c000b87c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b880:	52                   	push   edx
c000b881:	55                   	push   ebp
c000b882:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b885:	83 c4 10             	add    esp,0x10
c000b888:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b88c:	eb da                	jmp    c000b868 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b88e:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b892:	47                   	inc    edi
c000b893:	eb c5                	jmp    c000b85a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b895:	83 c4 1c             	add    esp,0x1c
c000b898:	5b                   	pop    ebx
c000b899:	5e                   	pop    esi
c000b89a:	5f                   	pop    edi
c000b89b:	5d                   	pop    ebp
c000b89c:	c3                   	ret    
c000b89d:	90                   	nop

c000b89e <Video::blit(unsigned int*, int, int, int, int)>:
c000b89e:	55                   	push   ebp
c000b89f:	ba 00 00 00 00       	mov    edx,0x0
c000b8a4:	57                   	push   edi
c000b8a5:	56                   	push   esi
c000b8a6:	53                   	push   ebx
c000b8a7:	83 ec 1c             	sub    esp,0x1c
c000b8aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8ae:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b8b2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8b6:	85 c0                	test   eax,eax
c000b8b8:	0f 49 d0             	cmovns edx,eax
c000b8bb:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b8c2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b8c6:	89 eb                	mov    ebx,ebp
c000b8c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b8cc:	01 ea                	add    edx,ebp
c000b8ce:	39 da                	cmp    edx,ebx
c000b8d0:	7e 54                	jle    c000b926 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b8d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b8d8:	7c 4c                	jl     c000b926 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b8da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b8de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8e6:	01 c1                	add    ecx,eax
c000b8e8:	39 f9                	cmp    ecx,edi
c000b8ea:	7e 2f                	jle    c000b91b <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b8ec:	83 c2 04             	add    edx,0x4
c000b8ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b8f5:	7c 21                	jl     c000b918 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b8f7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b8fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b8fd:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b900:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b904:	55                   	push   ebp
c000b905:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b909:	56                   	push   esi
c000b90a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b90d:	83 c4 10             	add    esp,0x10
c000b910:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b914:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b918:	47                   	inc    edi
c000b919:	eb c7                	jmp    c000b8e2 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b91b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b91f:	43                   	inc    ebx
c000b920:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b924:	eb a2                	jmp    c000b8c8 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b926:	83 c4 1c             	add    esp,0x1c
c000b929:	5b                   	pop    ebx
c000b92a:	5e                   	pop    esi
c000b92b:	5f                   	pop    edi
c000b92c:	5d                   	pop    ebp
c000b92d:	c3                   	ret    

c000b92e <Video::clearScreen(unsigned int)>:
c000b92e:	57                   	push   edi
c000b92f:	56                   	push   esi
c000b930:	53                   	push   ebx
c000b931:	31 db                	xor    ebx,ebx
c000b933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b937:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b93d:	7e 1f                	jle    c000b95e <Video::clearScreen(unsigned int)+0x30>
c000b93f:	31 ff                	xor    edi,edi
c000b941:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b947:	7e 12                	jle    c000b95b <Video::clearScreen(unsigned int)+0x2d>
c000b949:	8b 06                	mov    eax,DWORD PTR [esi]
c000b94b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b94f:	53                   	push   ebx
c000b950:	57                   	push   edi
c000b951:	47                   	inc    edi
c000b952:	56                   	push   esi
c000b953:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b956:	83 c4 10             	add    esp,0x10
c000b959:	eb e6                	jmp    c000b941 <Video::clearScreen(unsigned int)+0x13>
c000b95b:	43                   	inc    ebx
c000b95c:	eb d9                	jmp    c000b937 <Video::clearScreen(unsigned int)+0x9>
c000b95e:	5b                   	pop    ebx
c000b95f:	5e                   	pop    esi
c000b960:	5f                   	pop    edi
c000b961:	c3                   	ret    

c000b962 <Video::putpixel(int, int, unsigned int)>:
c000b962:	c7 44 24 04 84 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023684
c000b96a:	e9 87 44 00 00       	jmp    c000fdf6 <KePanic(char const*)>
c000b96f:	90                   	nop

c000b970 <Video::readPixelApprox(int, int)>:
c000b970:	83 ec 18             	sub    esp,0x18
c000b973:	68 a5 36 02 c0       	push   0xc00236a5
c000b978:	e8 79 44 00 00       	call   c000fdf6 <KePanic(char const*)>
c000b97d:	31 c0                	xor    eax,eax
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	c3                   	ret    
c000b983:	90                   	nop

c000b984 <Video::Video(char const*)>:
c000b984:	83 ec 0c             	sub    esp,0xc
c000b987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98b:	83 ec 08             	sub    esp,0x8
c000b98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b992:	50                   	push   eax
c000b993:	e8 64 e1 ff ff       	call   c0009afc <Device::Device(char const*)>
c000b998:	83 c4 10             	add    esp,0x10
c000b99b:	ba 48 37 02 c0       	mov    edx,0xc0023748
c000b9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a4:	89 10                	mov    DWORD PTR [eax],edx
c000b9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9aa:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9b4:	90                   	nop
c000b9b5:	83 c4 0c             	add    esp,0xc
c000b9b8:	c3                   	ret    
c000b9b9:	90                   	nop

c000b9ba <Video::~Video()>:
c000b9ba:	83 ec 0c             	sub    esp,0xc
c000b9bd:	ba 48 37 02 c0       	mov    edx,0xc0023748
c000b9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c6:	89 10                	mov    DWORD PTR [eax],edx
c000b9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9cc:	83 ec 0c             	sub    esp,0xc
c000b9cf:	50                   	push   eax
c000b9d0:	e8 c7 de ff ff       	call   c000989c <Device::~Device()>
c000b9d5:	83 c4 10             	add    esp,0x10
c000b9d8:	90                   	nop
c000b9d9:	83 c4 0c             	add    esp,0xc
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <Video::~Video()>:
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	83 ec 0c             	sub    esp,0xc
c000b9e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e8:	e8 cd ff ff ff       	call   c000b9ba <Video::~Video()>
c000b9ed:	83 c4 10             	add    esp,0x10
c000b9f0:	83 ec 08             	sub    esp,0x8
c000b9f3:	68 64 01 00 00       	push   0x164
c000b9f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fc:	e8 26 18 00 00       	call   c000d227 <operator delete(void*, unsigned long)>
c000ba01:	83 c4 10             	add    esp,0x10
c000ba04:	83 c4 0c             	add    esp,0xc
c000ba07:	c3                   	ret    

c000ba08 <Video::isMonochrome()>:
c000ba08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba0c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba12:	c3                   	ret    
c000ba13:	90                   	nop

c000ba14 <Video::getWidth()>:
c000ba14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba1e:	c3                   	ret    
c000ba1f:	90                   	nop

c000ba20 <Video::getHeight()>:
c000ba20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba2a:	c3                   	ret    
c000ba2b:	90                   	nop

c000ba2c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba2c:	55                   	push   ebp
c000ba2d:	57                   	push   edi
c000ba2e:	56                   	push   esi
c000ba2f:	53                   	push   ebx
c000ba30:	83 ec 2c             	sub    esp,0x2c
c000ba33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba37:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba3b:	83 f8 01             	cmp    eax,0x1
c000ba3e:	19 c9                	sbb    ecx,ecx
c000ba40:	31 db                	xor    ebx,ebx
c000ba42:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba46:	89 ce                	mov    esi,ecx
c000ba48:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba50:	f7 d6                	not    esi
c000ba52:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ba58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba5c:	01 d8                	add    eax,ebx
c000ba5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba62:	57                   	push   edi
c000ba63:	e8 b8 ff ff ff       	call   c000ba20 <Video::getHeight()>
c000ba68:	59                   	pop    ecx
c000ba69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ba6d:	7e 70                	jle    c000badf <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ba6f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba73:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ba77:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ba7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba82:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ba89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba8d:	89 e8                	mov    eax,ebp
c000ba8f:	83 c0 20             	add    eax,0x20
c000ba92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ba96:	57                   	push   edi
c000ba97:	e8 78 ff ff ff       	call   c000ba14 <Video::getWidth()>
c000ba9c:	5a                   	pop    edx
c000ba9d:	39 c5                	cmp    ebp,eax
c000ba9f:	7d 34                	jge    c000bad5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000baa1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000baa6:	74 05                	je     c000baad <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000baa8:	8b 07                	mov    eax,DWORD PTR [edi]
c000baaa:	56                   	push   esi
c000baab:	eb 0d                	jmp    c000baba <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000baad:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bab2:	74 12                	je     c000bac6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bab4:	8b 07                	mov    eax,DWORD PTR [edi]
c000bab6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000babe:	55                   	push   ebp
c000babf:	57                   	push   edi
c000bac0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000baca:	45                   	inc    ebp
c000bacb:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bacf:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bad3:	75 c1                	jne    c000ba96 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bad5:	43                   	inc    ebx
c000bad6:	83 fb 20             	cmp    ebx,0x20
c000bad9:	0f 85 79 ff ff ff    	jne    c000ba58 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000badf:	83 c4 2c             	add    esp,0x2c
c000bae2:	5b                   	pop    ebx
c000bae3:	5e                   	pop    esi
c000bae4:	5f                   	pop    edi
c000bae5:	5d                   	pop    ebp
c000bae6:	c3                   	ret    
c000bae7:	90                   	nop

c000bae8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bae8:	55                   	push   ebp
c000bae9:	57                   	push   edi
c000baea:	56                   	push   esi
c000baeb:	53                   	push   ebx
c000baec:	83 ec 48             	sub    esp,0x48
c000baef:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000baf3:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000baf7:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bafb:	c1 e0 08             	shl    eax,0x8
c000bafe:	01 d0                	add    eax,edx
c000bb00:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb08:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb0c:	c1 e0 08             	shl    eax,0x8
c000bb0f:	01 d0                	add    eax,edx
c000bb11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb19:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb26:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb2d:	50                   	push   eax
c000bb2e:	e8 7d 3f 00 00       	call   c000fab0 <malloc>
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	85 c0                	test   eax,eax
c000bb38:	89 c5                	mov    ebp,eax
c000bb3a:	75 10                	jne    c000bb4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb3c:	83 ec 0c             	sub    esp,0xc
c000bb3f:	68 d0 36 02 c0       	push   0xc00236d0
c000bb44:	e8 ad 42 00 00       	call   c000fdf6 <KePanic(char const*)>
c000bb49:	83 c4 10             	add    esp,0x10
c000bb4c:	52                   	push   edx
c000bb4d:	bf 12 00 00 00       	mov    edi,0x12
c000bb52:	52                   	push   edx
c000bb53:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb57:	50                   	push   eax
c000bb58:	68 e0 36 02 c0       	push   0xc00236e0
c000bb5d:	e8 ec b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb62:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb65:	83 e0 20             	and    eax,0x20
c000bb68:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bb6c:	85 c0                	test   eax,eax
c000bb6e:	59                   	pop    ecx
c000bb6f:	0f 94 c0             	sete   al
c000bb72:	0f b6 c0             	movzx  eax,al
c000bb75:	5e                   	pop    esi
c000bb76:	50                   	push   eax
c000bb77:	68 ea 36 02 c0       	push   0xc00236ea
c000bb7c:	e8 cd b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb81:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	85 c0                	test   eax,eax
c000bb8a:	89 c2                	mov    edx,eax
c000bb8c:	74 11                	je     c000bb9f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bb8e:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bb92:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bb96:	c1 ff 03             	sar    edi,0x3
c000bb99:	0f af f9             	imul   edi,ecx
c000bb9c:	83 c7 12             	add    edi,0x12
c000bb9f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bba4:	74 07                	je     c000bbad <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bba6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbab:	75 12                	jne    c000bbbf <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bbad:	83 ec 0c             	sub    esp,0xc
c000bbb0:	68 f8 36 02 c0       	push   0xc00236f8
c000bbb5:	e8 94 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bbba:	e9 aa 02 00 00       	jmp    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bbbf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bbc3:	83 f9 02             	cmp    ecx,0x2
c000bbc6:	74 0e                	je     c000bbd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bbc8:	83 f9 0a             	cmp    ecx,0xa
c000bbcb:	0f 84 d1 00 00 00    	je     c000bca2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bbd1:	e9 7e 02 00 00       	jmp    c000be54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bbd6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bbdb:	75 0e                	jne    c000bbeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bbdd:	84 d2                	test   dl,dl
c000bbdf:	75 0a                	jne    c000bbeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bbe1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bbe4:	83 e8 18             	sub    eax,0x18
c000bbe7:	a8 f7                	test   al,0xf7
c000bbe9:	74 0d                	je     c000bbf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bbeb:	83 ec 0c             	sub    esp,0xc
c000bbee:	68 0d 37 02 c0       	push   0xc002370d
c000bbf3:	e9 64 02 00 00       	jmp    c000be5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bbf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc00:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc05:	31 c0                	xor    eax,eax
c000bc07:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc0b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc13:	89 c6                	mov    esi,eax
c000bc15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc1a:	75 15                	jne    c000bc31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc1c:	99                   	cdq    
c000bc1d:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc21:	85 d2                	test   edx,edx
c000bc23:	75 0c                	jne    c000bc31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc29:	29 c6                	sub    esi,eax
c000bc2b:	4e                   	dec    esi
c000bc2c:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc31:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc3d:	75 0c                	jne    c000bc4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc3f:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc44:	c1 e2 18             	shl    edx,0x18
c000bc47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc4b:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc50:	8d 46 01             	lea    eax,[esi+0x1]
c000bc53:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bc57:	c1 e1 10             	shl    ecx,0x10
c000bc5a:	89 ca                	mov    edx,ecx
c000bc5c:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bc61:	c1 e1 08             	shl    ecx,0x8
c000bc64:	09 d1                	or     ecx,edx
c000bc66:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bc6a:	09 d1                	or     ecx,edx
c000bc6c:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bc70:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bc74:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bc78:	c1 fa 03             	sar    edx,0x3
c000bc7b:	01 d7                	add    edi,edx
c000bc7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc81:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bc85:	7e 04                	jle    c000bc8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bc87:	89 c6                	mov    esi,eax
c000bc89:	eb 8a                	jmp    c000bc15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bc8b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bc8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc93:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bc97:	0f 8f 6e ff ff ff    	jg     c000bc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bc9d:	e9 ce 01 00 00       	jmp    c000be70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bca2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bca7:	75 0e                	jne    c000bcb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bca9:	85 c0                	test   eax,eax
c000bcab:	75 0a                	jne    c000bcb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bcb0:	83 e8 18             	sub    eax,0x18
c000bcb3:	a8 f7                	test   al,0xf7
c000bcb5:	74 0d                	je     c000bcc4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bcb7:	83 ec 0c             	sub    esp,0xc
c000bcba:	68 1b 37 02 c0       	push   0xc002371b
c000bcbf:	e9 98 01 00 00       	jmp    c000be5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bcc4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bccc:	31 c9                	xor    ecx,ecx
c000bcce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcd6:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bcda:	0f 8d 90 01 00 00    	jge    c000be70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bce0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bce4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bce8:	0f 8e 82 01 00 00    	jle    c000be70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcee:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcf2:	8d 77 01             	lea    esi,[edi+0x1]
c000bcf5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bcf9:	83 fa 7f             	cmp    edx,0x7f
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	0f 8e a3 00 00 00    	jle    c000bda7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd04:	83 e0 7f             	and    eax,0x7f
c000bd07:	31 d2                	xor    edx,edx
c000bd09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd0d:	40                   	inc    eax
c000bd0e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd16:	75 08                	jne    c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd18:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd1d:	c1 e2 18             	shl    edx,0x18
c000bd20:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd25:	c1 e0 10             	shl    eax,0x10
c000bd28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd2c:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd31:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd35:	c1 e0 08             	shl    eax,0x8
c000bd38:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd3c:	09 f8                	or     eax,edi
c000bd3e:	31 ff                	xor    edi,edi
c000bd40:	09 d0                	or     eax,edx
c000bd42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bd54:	75 1d                	jne    c000bd73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd56:	89 c8                	mov    eax,ecx
c000bd58:	99                   	cdq    
c000bd59:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd5d:	85 d2                	test   edx,edx
c000bd5f:	75 12                	jne    c000bd73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd65:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bd69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bd6d:	49                   	dec    ecx
c000bd6e:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bd73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd77:	8d 51 01             	lea    edx,[ecx+0x1]
c000bd7a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bd7e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bd82:	8d 47 01             	lea    eax,[edi+0x1]
c000bd85:	7e 06                	jle    c000bd8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bd87:	89 c7                	mov    edi,eax
c000bd89:	89 d1                	mov    ecx,edx
c000bd8b:	eb c2                	jmp    c000bd4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bd8d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bd91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bd95:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bd99:	c1 f8 03             	sar    eax,0x3
c000bd9c:	01 c6                	add    esi,eax
c000bd9e:	89 d1                	mov    ecx,edx
c000bda0:	89 f7                	mov    edi,esi
c000bda2:	e9 2f ff ff ff       	jmp    c000bcd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bda7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bdaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bdb3:	40                   	inc    eax
c000bdb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdb8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdc1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdc6:	75 1d                	jne    c000bde5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bdc8:	89 c8                	mov    eax,ecx
c000bdca:	99                   	cdq    
c000bdcb:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bdcf:	85 d2                	test   edx,edx
c000bdd1:	75 12                	jne    c000bde5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bdd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdd7:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bddb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bddf:	49                   	dec    ecx
c000bde0:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bde5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bde9:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000bdf1:	75 0c                	jne    c000bdff <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000bdf3:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000bdf8:	c1 e7 18             	shl    edi,0x18
c000bdfb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000bdff:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be04:	8d 51 01             	lea    edx,[ecx+0x1]
c000be07:	c1 e0 10             	shl    eax,0x10
c000be0a:	89 c7                	mov    edi,eax
c000be0c:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be11:	c1 e0 08             	shl    eax,0x8
c000be14:	09 f8                	or     eax,edi
c000be16:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be1a:	09 f8                	or     eax,edi
c000be1c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be28:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be2c:	c1 f8 03             	sar    eax,0x3
c000be2f:	01 c6                	add    esi,eax
c000be31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be35:	40                   	inc    eax
c000be36:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be3a:	7e 0b                	jle    c000be47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be40:	89 d1                	mov    ecx,edx
c000be42:	e9 7a ff ff ff       	jmp    c000bdc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be47:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be4b:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be4f:	e9 4a ff ff ff       	jmp    c000bd9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000be54:	50                   	push   eax
c000be55:	50                   	push   eax
c000be56:	51                   	push   ecx
c000be57:	68 2a 37 02 c0       	push   0xc002372a
c000be5c:	e8 ed b0 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000be61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be64:	e8 57 3c 00 00       	call   c000fac0 <free>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	31 ed                	xor    ebp,ebp
c000be6e:	eb 14                	jmp    c000be84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000be70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000be74:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000be78:	89 18                	mov    DWORD PTR [eax],ebx
c000be7a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000be7e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000be82:	89 18                	mov    DWORD PTR [eax],ebx
c000be84:	83 c4 3c             	add    esp,0x3c
c000be87:	89 e8                	mov    eax,ebp
c000be89:	5b                   	pop    ebx
c000be8a:	5e                   	pop    esi
c000be8b:	5f                   	pop    edi
c000be8c:	5d                   	pop    ebp
c000be8d:	c3                   	ret    

c000be8e <Video::putTGA(int, int, unsigned char*, int)>:
c000be8e:	55                   	push   ebp
c000be8f:	57                   	push   edi
c000be90:	56                   	push   esi
c000be91:	53                   	push   ebx
c000be92:	83 ec 28             	sub    esp,0x28
c000be95:	8d 44 24 18          	lea    eax,[esp+0x18]
c000be99:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000be9d:	50                   	push   eax
c000be9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bea2:	50                   	push   eax
c000bea3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bea7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000beab:	55                   	push   ebp
c000beac:	e8 37 fc ff ff       	call   c000bae8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000beb1:	83 c4 20             	add    esp,0x20
c000beb4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000beb8:	85 c0                	test   eax,eax
c000beba:	74 3b                	je     c000bef7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bebc:	89 c6                	mov    esi,eax
c000bebe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec6:	39 d8                	cmp    eax,ebx
c000bec8:	7e 2d                	jle    c000bef7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000beca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bece:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bed2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bed6:	39 f8                	cmp    eax,edi
c000bed8:	7e 1a                	jle    c000bef4 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000beda:	83 c6 04             	add    esi,0x4
c000bedd:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bee0:	85 c0                	test   eax,eax
c000bee2:	79 0d                	jns    c000bef1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bee4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bee7:	50                   	push   eax
c000bee8:	53                   	push   ebx
c000bee9:	57                   	push   edi
c000beea:	55                   	push   ebp
c000beeb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000beee:	83 c4 10             	add    esp,0x10
c000bef1:	47                   	inc    edi
c000bef2:	eb da                	jmp    c000bece <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bef4:	43                   	inc    ebx
c000bef5:	eb c7                	jmp    c000bebe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bef7:	83 c4 1c             	add    esp,0x1c
c000befa:	5b                   	pop    ebx
c000befb:	5e                   	pop    esi
c000befc:	5f                   	pop    edi
c000befd:	5d                   	pop    ebp
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <ACPI::close(int, int, void*)>:
c000bf00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf05:	c3                   	ret    
c000bf06:	66 90                	xchg   ax,ax

c000bf08 <loadACPITables(unsigned char*)>:
c000bf08:	57                   	push   edi
c000bf09:	56                   	push   esi
c000bf0a:	53                   	push   ebx
c000bf0b:	83 ec 60             	sub    esp,0x60
c000bf0e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf13:	0f 84 43 02 00 00    	je     c000c15c <loadACPITables(unsigned char*)+0x254>
c000bf19:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf1e:	0f b6 c0             	movzx  eax,al
c000bf21:	85 c0                	test   eax,eax
c000bf23:	74 7b                	je     c000bfa0 <loadACPITables(unsigned char*)+0x98>
c000bf25:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf29:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf34:	83 e8 24             	sub    eax,0x24
c000bf37:	c1 e8 03             	shr    eax,0x3
c000bf3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf3e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf46:	66 90                	xchg   ax,ax
c000bf48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf4c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf50:	0f 8d ba 00 00 00    	jge    c000c010 <loadACPITables(unsigned char*)+0x108>
c000bf56:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf5a:	83 c0 24             	add    eax,0x24
c000bf5d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bf69:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf6d:	c1 e0 03             	shl    eax,0x3
c000bf70:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bf74:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bf78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bf7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf7d:	89 c1                	mov    ecx,eax
c000bf7f:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bf84:	8d 50 01             	lea    edx,[eax+0x1]
c000bf87:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bf8d:	89 ca                	mov    edx,ecx
c000bf8f:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bf96:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bf9b:	eb ab                	jmp    c000bf48 <loadACPITables(unsigned char*)+0x40>
c000bf9d:	8d 76 00             	lea    esi,[esi+0x0]
c000bfa0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfa4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfa8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfaf:	83 e8 24             	sub    eax,0x24
c000bfb2:	c1 e8 02             	shr    eax,0x2
c000bfb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bfb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfc4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bfc8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000bfcc:	7d 42                	jge    c000c010 <loadACPITables(unsigned char*)+0x108>
c000bfce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfd2:	83 c0 24             	add    eax,0x24
c000bfd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bfd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bfdd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfe1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bfe5:	c1 e0 02             	shl    eax,0x2
c000bfe8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000bfec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bff0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bff2:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bff7:	8d 50 01             	lea    edx,[eax+0x1]
c000bffa:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c000:	89 ca                	mov    edx,ecx
c000c002:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c009:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c00e:	eb b4                	jmp    c000bfc4 <loadACPITables(unsigned char*)+0xbc>
c000c010:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c018:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c01d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c021:	0f 8d 39 01 00 00    	jge    c000c160 <loadACPITables(unsigned char*)+0x258>
c000c027:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c02b:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c032:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c042:	25 ff 0f 00 00       	and    eax,0xfff
c000c047:	89 c6                	mov    esi,eax
c000c049:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c04f:	83 ec 0c             	sub    esp,0xc
c000c052:	6a 01                	push   0x1
c000c054:	e8 fc 71 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c060:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c066:	83 ec 0c             	sub    esp,0xc
c000c069:	6a 01                	push   0x1
c000c06b:	6a 01                	push   0x1
c000c06d:	50                   	push   eax
c000c06e:	52                   	push   edx
c000c06f:	53                   	push   ebx
c000c070:	e8 b3 7a 00 00       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c075:	83 c4 20             	add    esp,0x20
c000c078:	09 f0                	or     eax,esi
c000c07a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c07e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c082:	c1 e0 03             	shl    eax,0x3
c000c085:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c08a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c096:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c09e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0b2:	89 c6                	mov    esi,eax
c000c0b4:	89 d7                	mov    edi,edx
c000c0b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0b8:	89 c8                	mov    eax,ecx
c000c0ba:	89 fa                	mov    edx,edi
c000c0bc:	89 f3                	mov    ebx,esi
c000c0be:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c0c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c0d9:	05 00 10 00 00       	add    eax,0x1000
c000c0de:	c1 e8 0c             	shr    eax,0xc
c000c0e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c0e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0f1:	25 ff 0f 00 00       	and    eax,0xfff
c000c0f6:	89 c6                	mov    esi,eax
c000c0f8:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c105:	e8 4b 71 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c000c10a:	83 c4 10             	add    esp,0x10
c000c10d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c111:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c117:	83 ec 0c             	sub    esp,0xc
c000c11a:	6a 01                	push   0x1
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	50                   	push   eax
c000c121:	52                   	push   edx
c000c122:	53                   	push   ebx
c000c123:	e8 00 7a 00 00       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c128:	83 c4 20             	add    esp,0x20
c000c12b:	09 f0                	or     eax,esi
c000c12d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	50                   	push   eax
c000c139:	e8 15 74 00 00       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c145:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c149:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c150:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c155:	e9 be fe ff ff       	jmp    c000c018 <loadACPITables(unsigned char*)+0x110>
c000c15a:	66 90                	xchg   ax,ax
c000c15c:	90                   	nop
c000c15d:	8d 76 00             	lea    esi,[esi+0x0]
c000c160:	83 c4 60             	add    esp,0x60
c000c163:	5b                   	pop    ebx
c000c164:	5e                   	pop    esi
c000c165:	5f                   	pop    edi
c000c166:	c3                   	ret    
c000c167:	90                   	nop

c000c168 <findRSDT(unsigned char*)>:
c000c168:	57                   	push   edi
c000c169:	56                   	push   esi
c000c16a:	53                   	push   ebx
c000c16b:	83 ec 50             	sub    esp,0x50
c000c16e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c173:	85 c0                	test   eax,eax
c000c175:	75 0d                	jne    c000c184 <findRSDT(unsigned char*)+0x1c>
c000c177:	b8 00 00 00 00       	mov    eax,0x0
c000c17c:	e9 2b 01 00 00       	jmp    c000c2ac <findRSDT(unsigned char*)+0x144>
c000c181:	8d 76 00             	lea    esi,[esi+0x0]
c000c184:	89 e0                	mov    eax,esp
c000c186:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c18a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c192:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c19a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c19e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1ae:	89 c6                	mov    esi,eax
c000c1b0:	89 d7                	mov    edi,edx
c000c1b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1b4:	89 c8                	mov    eax,ecx
c000c1b6:	89 fa                	mov    edx,edi
c000c1b8:	89 f3                	mov    ebx,esi
c000c1ba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1be:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1c6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c1ca:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c1ce:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c1d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c1de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c1ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c1ee:	25 ff 0f 00 00       	and    eax,0xfff
c000c1f3:	89 c6                	mov    esi,eax
c000c1f5:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	6a 02                	push   0x2
c000c200:	e8 50 70 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c000c205:	83 c4 10             	add    esp,0x10
c000c208:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c20c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c212:	83 ec 0c             	sub    esp,0xc
c000c215:	6a 01                	push   0x1
c000c217:	6a 02                	push   0x2
c000c219:	50                   	push   eax
c000c21a:	52                   	push   edx
c000c21b:	53                   	push   ebx
c000c21c:	e8 07 79 00 00       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c221:	83 c4 20             	add    esp,0x20
c000c224:	09 f0                	or     eax,esi
c000c226:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c22a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22e:	25 ff 0f 00 00       	and    eax,0xfff
c000c233:	89 c6                	mov    esi,eax
c000c235:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	6a 02                	push   0x2
c000c240:	e8 10 70 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c24c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	6a 01                	push   0x1
c000c257:	6a 02                	push   0x2
c000c259:	50                   	push   eax
c000c25a:	52                   	push   edx
c000c25b:	53                   	push   ebx
c000c25c:	e8 c7 78 00 00       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c261:	83 c4 20             	add    esp,0x20
c000c264:	09 f0                	or     eax,esi
c000c266:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c26a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c26f:	85 c0                	test   eax,eax
c000c271:	75 11                	jne    c000c284 <findRSDT(unsigned char*)+0x11c>
c000c273:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c27a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c27e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c282:	eb 24                	jmp    c000c2a8 <findRSDT(unsigned char*)+0x140>
c000c284:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c289:	83 f8 02             	cmp    eax,0x2
c000c28c:	75 12                	jne    c000c2a0 <findRSDT(unsigned char*)+0x138>
c000c28e:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c295:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c299:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c29d:	eb 09                	jmp    c000c2a8 <findRSDT(unsigned char*)+0x140>
c000c29f:	90                   	nop
c000c2a0:	b8 00 00 00 00       	mov    eax,0x0
c000c2a5:	eb 05                	jmp    c000c2ac <findRSDT(unsigned char*)+0x144>
c000c2a7:	90                   	nop
c000c2a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2ac:	83 c4 50             	add    esp,0x50
c000c2af:	5b                   	pop    ebx
c000c2b0:	5e                   	pop    esi
c000c2b1:	5f                   	pop    edi
c000c2b2:	c3                   	ret    
c000c2b3:	90                   	nop

c000c2b4 <findDataTable(unsigned char*, char*)>:
c000c2b4:	83 ec 1c             	sub    esp,0x1c
c000c2b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2bc:	75 0a                	jne    c000c2c8 <findDataTable(unsigned char*, char*)+0x14>
c000c2be:	b8 00 00 00 00       	mov    eax,0x0
c000c2c3:	eb 5f                	jmp    c000c324 <findDataTable(unsigned char*, char*)+0x70>
c000c2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c2c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c2d0:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c2d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c2d9:	7d 41                	jge    c000c31c <findDataTable(unsigned char*, char*)+0x68>
c000c2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2df:	c1 e0 03             	shl    eax,0x3
c000c2e2:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c2e7:	83 ec 04             	sub    esp,0x4
c000c2ea:	6a 04                	push   0x4
c000c2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f0:	50                   	push   eax
c000c2f1:	e8 8a 40 ff ff       	call   c0000380 <memcmp>
c000c2f6:	83 c4 10             	add    esp,0x10
c000c2f9:	85 c0                	test   eax,eax
c000c2fb:	0f 94 c0             	sete   al
c000c2fe:	0f b6 c0             	movzx  eax,al
c000c301:	85 c0                	test   eax,eax
c000c303:	74 0f                	je     c000c314 <findDataTable(unsigned char*, char*)+0x60>
c000c305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c309:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c310:	eb 12                	jmp    c000c324 <findDataTable(unsigned char*, char*)+0x70>
c000c312:	66 90                	xchg   ax,ax
c000c314:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c319:	eb b5                	jmp    c000c2d0 <findDataTable(unsigned char*, char*)+0x1c>
c000c31b:	90                   	nop
c000c31c:	b8 00 00 00 00       	mov    eax,0x0
c000c321:	8d 76 00             	lea    esi,[esi+0x0]
c000c324:	83 c4 1c             	add    esp,0x1c
c000c327:	c3                   	ret    

c000c328 <scanMADT()>:
c000c328:	53                   	push   ebx
c000c329:	83 ec 38             	sub    esp,0x38
c000c32c:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c336:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c340:	e8 65 d2 00 00       	call   c00195aa <HalFindRSDP()>
c000c345:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c34a:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c34f:	85 c0                	test   eax,eax
c000c351:	0f 84 11 04 00 00    	je     c000c768 <scanMADT()+0x440>
c000c357:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	50                   	push   eax
c000c360:	e8 03 fe ff ff       	call   c000c168 <findRSDT(unsigned char*)>
c000c365:	83 c4 10             	add    esp,0x10
c000c368:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c36d:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c372:	85 c0                	test   eax,eax
c000c374:	0f 84 f2 03 00 00    	je     c000c76c <scanMADT()+0x444>
c000c37a:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c37f:	83 ec 0c             	sub    esp,0xc
c000c382:	50                   	push   eax
c000c383:	e8 80 fb ff ff       	call   c000bf08 <loadACPITables(unsigned char*)>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c390:	83 ec 08             	sub    esp,0x8
c000c393:	68 8c 37 02 c0       	push   0xc002378c
c000c398:	50                   	push   eax
c000c399:	e8 16 ff ff ff       	call   c000c2b4 <findDataTable(unsigned char*, char*)>
c000c39e:	83 c4 10             	add    esp,0x10
c000c3a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c3aa:	0f 84 c0 03 00 00    	je     c000c770 <scanMADT()+0x448>
c000c3b0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c3b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3bf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c3c3:	0f 87 af 03 00 00    	ja     c000c778 <scanMADT()+0x450>
c000c3c9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c3d1:	0f 87 a1 03 00 00    	ja     c000c778 <scanMADT()+0x450>
c000c3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3e3:	8d 50 01             	lea    edx,[eax+0x1]
c000c3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c3ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c3f2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c3f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3fa:	8d 50 01             	lea    edx,[eax+0x1]
c000c3fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c401:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c405:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c409:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c40d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c412:	83 f8 02             	cmp    eax,0x2
c000c415:	0f 86 59 03 00 00    	jbe    c000c774 <scanMADT()+0x44c>
c000c41b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c420:	85 c0                	test   eax,eax
c000c422:	75 58                	jne    c000c47c <scanMADT()+0x154>
c000c424:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c428:	8d 50 01             	lea    edx,[eax+0x1]
c000c42b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c42f:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c435:	0f b6 d2             	movzx  edx,dl
c000c438:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c43c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c440:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44a:	8d 50 01             	lea    edx,[eax+0x1]
c000c44d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c451:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c457:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c45a:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c460:	0f b6 d2             	movzx  edx,dl
c000c463:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c467:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c46b:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c471:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c476:	e9 d9 02 00 00       	jmp    c000c754 <scanMADT()+0x42c>
c000c47b:	90                   	nop
c000c47c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c481:	83 f8 01             	cmp    eax,0x1
c000c484:	0f 85 1a 01 00 00    	jne    c000c5a4 <scanMADT()+0x27c>
c000c48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c48e:	8d 50 01             	lea    edx,[eax+0x1]
c000c491:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c495:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c49b:	0f b6 d2             	movzx  edx,dl
c000c49e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4a2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4a6:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c4ac:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c4b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b9:	01 d0                	add    eax,edx
c000c4bb:	83 c0 2c             	add    eax,0x2c
c000c4be:	8a 00                	mov    al,BYTE PTR [eax]
c000c4c0:	0f b6 d0             	movzx  edx,al
c000c4c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c7:	8d 48 01             	lea    ecx,[eax+0x1]
c000c4ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c4d2:	0f b6 c0             	movzx  eax,al
c000c4d5:	c1 e0 08             	shl    eax,0x8
c000c4d8:	89 d1                	mov    ecx,edx
c000c4da:	09 c1                	or     ecx,eax
c000c4dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e0:	8d 50 02             	lea    edx,[eax+0x2]
c000c4e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4e7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c4eb:	0f b6 c0             	movzx  eax,al
c000c4ee:	c1 e0 10             	shl    eax,0x10
c000c4f1:	09 c1                	or     ecx,eax
c000c4f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4f7:	8d 50 03             	lea    edx,[eax+0x3]
c000c4fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c502:	0f b6 c0             	movzx  eax,al
c000c505:	c1 e0 18             	shl    eax,0x18
c000c508:	09 c1                	or     ecx,eax
c000c50a:	89 ca                	mov    edx,ecx
c000c50c:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c511:	0f b6 c0             	movzx  eax,al
c000c514:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c51b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c520:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c524:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c528:	01 d0                	add    eax,edx
c000c52a:	83 c0 2c             	add    eax,0x2c
c000c52d:	8a 00                	mov    al,BYTE PTR [eax]
c000c52f:	0f b6 d0             	movzx  edx,al
c000c532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c536:	8d 48 01             	lea    ecx,[eax+0x1]
c000c539:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c53d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c541:	0f b6 c0             	movzx  eax,al
c000c544:	c1 e0 08             	shl    eax,0x8
c000c547:	89 d1                	mov    ecx,edx
c000c549:	09 c1                	or     ecx,eax
c000c54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c54f:	8d 50 02             	lea    edx,[eax+0x2]
c000c552:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c556:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c55a:	0f b6 c0             	movzx  eax,al
c000c55d:	c1 e0 10             	shl    eax,0x10
c000c560:	09 c1                	or     ecx,eax
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 03             	lea    edx,[eax+0x3]
c000c569:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c56d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c571:	0f b6 c0             	movzx  eax,al
c000c574:	c1 e0 18             	shl    eax,0x18
c000c577:	09 c1                	or     ecx,eax
c000c579:	89 ca                	mov    edx,ecx
c000c57b:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c580:	0f b6 c0             	movzx  eax,al
c000c583:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c58a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c58f:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c594:	83 c0 01             	add    eax,0x1
c000c597:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c59c:	e9 b3 01 00 00       	jmp    c000c754 <scanMADT()+0x42c>
c000c5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c5a9:	83 f8 02             	cmp    eax,0x2
c000c5ac:	0f 85 ea 00 00 00    	jne    c000c69c <scanMADT()+0x374>
c000c5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b6:	8d 50 01             	lea    edx,[eax+0x1]
c000c5b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c5c5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c5c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cd:	8d 50 01             	lea    edx,[eax+0x1]
c000c5d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c5dc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c5e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5e8:	01 d0                	add    eax,edx
c000c5ea:	83 c0 2c             	add    eax,0x2c
c000c5ed:	8a 00                	mov    al,BYTE PTR [eax]
c000c5ef:	0f b6 d0             	movzx  edx,al
c000c5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5fd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c601:	0f b6 c0             	movzx  eax,al
c000c604:	c1 e0 08             	shl    eax,0x8
c000c607:	89 d1                	mov    ecx,edx
c000c609:	09 c1                	or     ecx,eax
c000c60b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60f:	8d 50 02             	lea    edx,[eax+0x2]
c000c612:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c616:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c61a:	0f b6 c0             	movzx  eax,al
c000c61d:	c1 e0 10             	shl    eax,0x10
c000c620:	09 c1                	or     ecx,eax
c000c622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c626:	8d 50 03             	lea    edx,[eax+0x3]
c000c629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c631:	0f b6 c0             	movzx  eax,al
c000c634:	c1 e0 18             	shl    eax,0x18
c000c637:	09 c8                	or     eax,ecx
c000c639:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c63d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c64a:	01 d0                	add    eax,edx
c000c64c:	83 c0 2c             	add    eax,0x2c
c000c64f:	8a 00                	mov    al,BYTE PTR [eax]
c000c651:	0f b6 d0             	movzx  edx,al
c000c654:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c658:	8d 48 01             	lea    ecx,[eax+0x1]
c000c65b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c65f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c663:	0f b6 c0             	movzx  eax,al
c000c666:	c1 e0 08             	shl    eax,0x8
c000c669:	09 d0                	or     eax,edx
c000c66b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c670:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c675:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c67a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c67e:	88 90 28 5e 02 c0    	mov    BYTE PTR [eax-0x3ffda1d8],dl
c000c684:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c689:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c68e:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c696:	e9 b9 00 00 00       	jmp    c000c754 <scanMADT()+0x42c>
c000c69b:	90                   	nop
c000c69c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c6a1:	83 f8 04             	cmp    eax,0x4
c000c6a4:	0f 85 9a 00 00 00    	jne    c000c744 <scanMADT()+0x41c>
c000c6aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c6b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6bd:	0f b6 c0             	movzx  eax,al
c000c6c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6cc:	01 d0                	add    eax,edx
c000c6ce:	83 c0 2c             	add    eax,0x2c
c000c6d1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6d3:	0f b6 d0             	movzx  edx,al
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 08             	shl    eax,0x8
c000c6eb:	09 d0                	or     eax,edx
c000c6ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6f1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fa:	8d 50 01             	lea    edx,[eax+0x1]
c000c6fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c701:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c705:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c709:	0f b6 c0             	movzx  eax,al
c000c70c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c714:	c1 e0 08             	shl    eax,0x8
c000c717:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c71b:	89 c1                	mov    ecx,eax
c000c71d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c721:	c1 e0 18             	shl    eax,0x18
c000c724:	89 c3                	mov    ebx,eax
c000c726:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c72b:	8d 50 01             	lea    edx,[eax+0x1]
c000c72e:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c734:	09 d9                	or     ecx,ebx
c000c736:	89 ca                	mov    edx,ecx
c000c738:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c73f:	eb 13                	jmp    c000c754 <scanMADT()+0x42c>
c000c741:	8d 76 00             	lea    esi,[esi+0x0]
c000c744:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c749:	83 f8 05             	cmp    eax,0x5
c000c74c:	75 06                	jne    c000c754 <scanMADT()+0x42c>
c000c74e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c753:	90                   	nop
c000c754:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c759:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c75d:	01 d0                	add    eax,edx
c000c75f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c763:	e9 50 fc ff ff       	jmp    c000c3b8 <scanMADT()+0x90>
c000c768:	90                   	nop
c000c769:	eb 0d                	jmp    c000c778 <scanMADT()+0x450>
c000c76b:	90                   	nop
c000c76c:	90                   	nop
c000c76d:	eb 09                	jmp    c000c778 <scanMADT()+0x450>
c000c76f:	90                   	nop
c000c770:	90                   	nop
c000c771:	eb 05                	jmp    c000c778 <scanMADT()+0x450>
c000c773:	90                   	nop
c000c774:	90                   	nop
c000c775:	8d 76 00             	lea    esi,[esi+0x0]
c000c778:	83 c4 38             	add    esp,0x38
c000c77b:	5b                   	pop    ebx
c000c77c:	c3                   	ret    
c000c77d:	90                   	nop
c000c77e:	66 90                	xchg   ax,ax

c000c780 <ACPI::ACPI()>:
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c787:	83 ec 08             	sub    esp,0x8
c000c78a:	68 91 37 02 c0       	push   0xc0023791
c000c78f:	50                   	push   eax
c000c790:	e8 67 d3 ff ff       	call   c0009afc <Device::Device(char const*)>
c000c795:	83 c4 10             	add    esp,0x10
c000c798:	ba 8c 39 02 c0       	mov    edx,0xc002398c
c000c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a1:	89 10                	mov    DWORD PTR [eax],edx
c000c7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7b2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c7ca:	e8 59 fb ff ff       	call   c000c328 <scanMADT()>
c000c7cf:	90                   	nop
c000c7d0:	83 c4 0c             	add    esp,0xc
c000c7d3:	c3                   	ret    

c000c7d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c7d4:	83 ec 2c             	sub    esp,0x2c
c000c7d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c7db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c7df:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c7e3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c7e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c7ec:	88 c8                	mov    al,cl
c000c7ee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c7f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c7f7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c7ff:	90                   	nop
c000c800:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c804:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c80a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c80e:	0f 8d b0 00 00 00    	jge    c000c8c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c814:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c818:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c81c:	83 c2 2a             	add    edx,0x2a
c000c81f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c823:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c828:	0f b7 c0             	movzx  eax,ax
c000c82b:	39 c2                	cmp    edx,eax
c000c82d:	0f 85 85 00 00 00    	jne    c000c8b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c833:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c83b:	83 c2 2a             	add    edx,0x2a
c000c83e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c842:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c847:	0f b6 c0             	movzx  eax,al
c000c84a:	39 c2                	cmp    edx,eax
c000c84c:	75 6a                	jne    c000c8b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c84e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c853:	85 c0                	test   eax,eax
c000c855:	74 3d                	je     c000c894 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c857:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c85b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c85f:	83 c2 2a             	add    edx,0x2a
c000c862:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c86d:	39 c2                	cmp    edx,eax
c000c86f:	74 13                	je     c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c871:	83 ec 0c             	sub    esp,0xc
c000c874:	68 0c 39 02 c0       	push   0xc002390c
c000c879:	e8 78 35 00 00       	call   c000fdf6 <KePanic(char const*)>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	8d 76 00             	lea    esi,[esi+0x0]
c000c884:	83 ec 0c             	sub    esp,0xc
c000c887:	68 96 37 02 c0       	push   0xc0023796
c000c88c:	e8 65 35 00 00       	call   c000fdf6 <KePanic(char const*)>
c000c891:	83 c4 10             	add    esp,0x10
c000c894:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c898:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c89c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8a0:	83 c2 2a             	add    edx,0x2a
c000c8a3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c8a7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c8a9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c8ac:	89 01                	mov    DWORD PTR [ecx],eax
c000c8ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c8b1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c8b6:	66 90                	xchg   ax,ax
c000c8b8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c8bd:	e9 3e ff ff ff       	jmp    c000c800 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c8c2:	66 90                	xchg   ax,ax
c000c8c4:	90                   	nop
c000c8c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c9:	83 c4 2c             	add    esp,0x2c
c000c8cc:	c2 04 00             	ret    0x4
c000c8cf:	90                   	nop

c000c8d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c8d0:	83 ec 1c             	sub    esp,0x1c
c000c8d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c8db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c8e4:	88 c8                	mov    al,cl
c000c8e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c8ea:	88 d0                	mov    al,dl
c000c8ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c8fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8fe:	83 c2 2a             	add    edx,0x2a
c000c901:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c905:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c917:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c91a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c91e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c927:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c92d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c931:	83 c0 01             	add    eax,0x1
c000c934:	88 c1                	mov    cl,al
c000c936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93a:	83 c2 2a             	add    edx,0x2a
c000c93d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c945:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c952:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c956:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c964:	8d 50 01             	lea    edx,[eax+0x1]
c000c967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c975:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c97b:	3d 00 02 00 00       	cmp    eax,0x200
c000c980:	75 12                	jne    c000c994 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c982:	83 ec 0c             	sub    esp,0xc
c000c985:	68 a5 37 02 c0       	push   0xc00237a5
c000c98a:	e8 67 34 00 00       	call   c000fdf6 <KePanic(char const*)>
c000c98f:	83 c4 10             	add    esp,0x10
c000c992:	66 90                	xchg   ax,ax
c000c994:	90                   	nop
c000c995:	83 c4 1c             	add    esp,0x1c
c000c998:	c3                   	ret    
c000c999:	90                   	nop
c000c99a:	66 90                	xchg   ax,ax

c000c99c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c99c:	b8 00 00 00 00       	mov    eax,0x0
c000c9a1:	c3                   	ret    
c000c9a2:	66 90                	xchg   ax,ax

c000c9a4 <ACPI::detectPCI()>:
c000c9a4:	53                   	push   ebx
c000c9a5:	83 ec 28             	sub    esp,0x28
c000c9a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c9ad:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c9b2:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c9b7:	83 ec 08             	sub    esp,0x8
c000c9ba:	68 c2 37 02 c0       	push   0xc00237c2
c000c9bf:	50                   	push   eax
c000c9c0:	e8 ef f8 ff ff       	call   c000c2b4 <findDataTable(unsigned char*, char*)>
c000c9c5:	83 c4 10             	add    esp,0x10
c000c9c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c9d1:	74 0d                	je     c000c9e0 <ACPI::detectPCI()+0x3c>
c000c9d3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9d8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c9e0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c9e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9ec:	8a 00                	mov    al,BYTE PTR [eax]
c000c9ee:	0f b6 c0             	movzx  eax,al
c000c9f1:	83 f8 01             	cmp    eax,0x1
c000c9f4:	75 0e                	jne    c000ca04 <ACPI::detectPCI()+0x60>
c000c9f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9fb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca00:	eb 2e                	jmp    c000ca30 <ACPI::detectPCI()+0x8c>
c000ca02:	66 90                	xchg   ax,ax
c000ca04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca08:	8a 00                	mov    al,BYTE PTR [eax]
c000ca0a:	0f b6 c0             	movzx  eax,al
c000ca0d:	83 f8 02             	cmp    eax,0x2
c000ca10:	75 1e                	jne    c000ca30 <ACPI::detectPCI()+0x8c>
c000ca12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca17:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca1c:	85 c0                	test   eax,eax
c000ca1e:	74 10                	je     c000ca30 <ACPI::detectPCI()+0x8c>
c000ca20:	83 ec 0c             	sub    esp,0xc
c000ca23:	68 3c 39 02 c0       	push   0xc002393c
c000ca28:	e8 c9 33 00 00       	call   c000fdf6 <KePanic(char const*)>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ca34:	83 f0 01             	xor    eax,0x1
c000ca37:	0f b6 c0             	movzx  eax,al
c000ca3a:	85 c0                	test   eax,eax
c000ca3c:	74 46                	je     c000ca84 <ACPI::detectPCI()+0xe0>
c000ca3e:	e8 ed 36 ff ff       	call   c0000130 <manualPCIProbe>
c000ca43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca47:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca4c:	75 0e                	jne    c000ca5c <ACPI::detectPCI()+0xb8>
c000ca4e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca53:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca58:	eb 2a                	jmp    c000ca84 <ACPI::detectPCI()+0xe0>
c000ca5a:	66 90                	xchg   ax,ax
c000ca5c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ca61:	75 21                	jne    c000ca84 <ACPI::detectPCI()+0xe0>
c000ca63:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca68:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca6d:	85 c0                	test   eax,eax
c000ca6f:	74 13                	je     c000ca84 <ACPI::detectPCI()+0xe0>
c000ca71:	83 ec 0c             	sub    esp,0xc
c000ca74:	68 3c 39 02 c0       	push   0xc002393c
c000ca79:	e8 78 33 00 00       	call   c000fdf6 <KePanic(char const*)>
c000ca7e:	83 c4 10             	add    esp,0x10
c000ca81:	8d 76 00             	lea    esi,[esi+0x0]
c000ca84:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ca89:	85 c0                	test   eax,eax
c000ca8b:	0f 84 87 00 00 00    	je     c000cb18 <ACPI::detectPCI()+0x174>
c000ca91:	83 ec 0c             	sub    esp,0xc
c000ca94:	68 c7 37 02 c0       	push   0xc00237c7
c000ca99:	e8 c9 06 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000caa9:	83 ec 0c             	sub    esp,0xc
c000caac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cab0:	e8 fb 2f 00 00       	call   c000fab0 <malloc>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	89 c3                	mov    ebx,eax
c000caba:	83 ec 0c             	sub    esp,0xc
c000cabd:	53                   	push   ebx
c000cabe:	e8 bf 08 01 00       	call   c001d382 <PCI::PCI()>
c000cac3:	83 c4 10             	add    esp,0x10
c000cac6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000caca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cace:	83 ec 08             	sub    esp,0x8
c000cad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad5:	50                   	push   eax
c000cad6:	e8 bf ce ff ff       	call   c000999a <Device::addChild(Device*)>
c000cadb:	83 c4 10             	add    esp,0x10
c000cade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cae2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cae4:	83 c0 08             	add    eax,0x8
c000cae7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cae9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000caee:	85 d2                	test   edx,edx
c000caf0:	74 0a                	je     c000cafc <ACPI::detectPCI()+0x158>
c000caf2:	ba 01 00 00 00       	mov    edx,0x1
c000caf7:	eb 0b                	jmp    c000cb04 <ACPI::detectPCI()+0x160>
c000caf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cafc:	ba 02 00 00 00       	mov    edx,0x2
c000cb01:	8d 76 00             	lea    esi,[esi+0x0]
c000cb04:	6a 00                	push   0x0
c000cb06:	6a 00                	push   0x0
c000cb08:	52                   	push   edx
c000cb09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb0d:	ff d0                	call   eax
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	e9 91 00 00 00       	jmp    c000cba8 <ACPI::detectPCI()+0x204>
c000cb17:	90                   	nop
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	68 df 37 02 c0       	push   0xc00237df
c000cb20:	e8 42 06 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000cb25:	83 c4 10             	add    esp,0x10
c000cb28:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cb2f:	83 ec 0c             	sub    esp,0xc
c000cb32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb36:	e8 75 2f 00 00       	call   c000fab0 <malloc>
c000cb3b:	83 c4 10             	add    esp,0x10
c000cb3e:	89 c3                	mov    ebx,eax
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	53                   	push   ebx
c000cb44:	e8 41 14 01 00       	call   c001df8a <IDE::IDE()>
c000cb49:	83 c4 10             	add    esp,0x10
c000cb4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb54:	83 ec 08             	sub    esp,0x8
c000cb57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb5b:	50                   	push   eax
c000cb5c:	e8 39 ce ff ff       	call   c000999a <Device::addChild(Device*)>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb68:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cb72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb76:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cb7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb83:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cb8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb90:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb92:	83 c0 08             	add    eax,0x8
c000cb95:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb97:	6a 00                	push   0x0
c000cb99:	6a 00                	push   0x0
c000cb9b:	6a 00                	push   0x0
c000cb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cba1:	ff d0                	call   eax
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	66 90                	xchg   ax,ax
c000cba8:	90                   	nop
c000cba9:	83 c4 28             	add    esp,0x28
c000cbac:	5b                   	pop    ebx
c000cbad:	c3                   	ret    
c000cbae:	66 90                	xchg   ax,ax

c000cbb0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cbb0:	83 ec 0c             	sub    esp,0xc
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	68 f4 37 02 c0       	push   0xc00237f4
c000cbbb:	e8 36 32 00 00       	call   c000fdf6 <KePanic(char const*)>
c000cbc0:	83 c4 10             	add    esp,0x10
c000cbc3:	90                   	nop
c000cbc4:	83 c4 0c             	add    esp,0xc
c000cbc7:	c3                   	ret    

c000cbc8 <ACPI::open(int, int, void*)>:
c000cbc8:	55                   	push   ebp
c000cbc9:	89 e5                	mov    ebp,esp
c000cbcb:	53                   	push   ebx
c000cbcc:	81 ec 74 01 00 00    	sub    esp,0x174
c000cbd2:	83 ec 0c             	sub    esp,0xc
c000cbd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cbd8:	e8 c7 fd ff ff       	call   c000c9a4 <ACPI::detectPCI()>
c000cbdd:	83 c4 10             	add    esp,0x10
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	68 64 39 02 c0       	push   0xc0023964
c000cbe8:	e8 7a 05 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000cbed:	83 c4 10             	add    esp,0x10
c000cbf0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cbf5:	8a 00                	mov    al,BYTE PTR [eax]
c000cbf7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cbfa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cbfe:	83 f8 01             	cmp    eax,0x1
c000cc01:	75 15                	jne    c000cc18 <ACPI::open(int, int, void*)+0x50>
c000cc03:	83 ec 0c             	sub    esp,0xc
c000cc06:	68 05 38 02 c0       	push   0xc0023805
c000cc0b:	e8 2b 8b 00 00       	call   c001573b <Thr::loadKernelSymbolTable(char const*)>
c000cc10:	83 c4 10             	add    esp,0x10
c000cc13:	eb 33                	jmp    c000cc48 <ACPI::open(int, int, void*)+0x80>
c000cc15:	8d 76 00             	lea    esi,[esi+0x0]
c000cc18:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc1c:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc21:	75 15                	jne    c000cc38 <ACPI::open(int, int, void*)+0x70>
c000cc23:	83 ec 0c             	sub    esp,0xc
c000cc26:	68 23 38 02 c0       	push   0xc0023823
c000cc2b:	e8 0b 8b 00 00       	call   c001573b <Thr::loadKernelSymbolTable(char const*)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	eb 13                	jmp    c000cc48 <ACPI::open(int, int, void*)+0x80>
c000cc35:	8d 76 00             	lea    esi,[esi+0x0]
c000cc38:	83 ec 0c             	sub    esp,0xc
c000cc3b:	68 41 38 02 c0       	push   0xc0023841
c000cc40:	e8 b1 31 00 00       	call   c000fdf6 <KePanic(char const*)>
c000cc45:	83 c4 10             	add    esp,0x10
c000cc48:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cc4c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cc53:	83 ec 0c             	sub    esp,0xc
c000cc56:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cc59:	e8 52 2e 00 00       	call   c000fab0 <malloc>
c000cc5e:	83 c4 10             	add    esp,0x10
c000cc61:	89 c3                	mov    ebx,eax
c000cc63:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cc68:	83 ec 04             	sub    esp,0x4
c000cc6b:	50                   	push   eax
c000cc6c:	68 5b 38 02 c0       	push   0xc002385b
c000cc71:	53                   	push   ebx
c000cc72:	e8 b5 b4 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cc7d:	83 ec 08             	sub    esp,0x8
c000cc80:	6a 01                	push   0x1
c000cc82:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cc85:	e8 c0 b4 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cc90:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cc94:	75 12                	jne    c000cca8 <ACPI::open(int, int, void*)+0xe0>
c000cc96:	83 ec 0c             	sub    esp,0xc
c000cc99:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cc9c:	e8 07 b5 ff ff       	call   c00081a8 <File::close()>
c000cca1:	83 c4 10             	add    esp,0x10
c000cca4:	eb 06                	jmp    c000ccac <ACPI::open(int, int, void*)+0xe4>
c000cca6:	66 90                	xchg   ax,ax
c000cca8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ccac:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ccb0:	74 16                	je     c000ccc8 <ACPI::open(int, int, void*)+0x100>
c000ccb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ccb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccb7:	83 c0 08             	add    eax,0x8
c000ccba:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ccc2:	ff d0                	call   eax
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	90                   	nop
c000ccc8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cccb:	83 f0 01             	xor    eax,0x1
c000ccce:	0f b6 c0             	movzx  eax,al
c000ccd1:	85 c0                	test   eax,eax
c000ccd3:	74 27                	je     c000ccfc <ACPI::open(int, int, void*)+0x134>
c000ccd5:	83 ec 0c             	sub    esp,0xc
c000ccd8:	68 79 38 02 c0       	push   0xc0023879
c000ccdd:	e8 85 04 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000cce2:	83 c4 10             	add    esp,0x10
c000cce5:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000ccec:	83 ec 0c             	sub    esp,0xc
c000ccef:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ccf2:	e8 83 67 00 00       	call   c001347a <Virt::setupPageSwapping(int)>
c000ccf7:	83 c4 10             	add    esp,0x10
c000ccfa:	66 90                	xchg   ax,ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	68 94 38 02 c0       	push   0xc0023894
c000cd04:	e8 5e 04 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd0f:	83 ec 08             	sub    esp,0x8
c000cd12:	6a 13                	push   0x13
c000cd14:	50                   	push   eax
c000cd15:	e8 ae cf ff ff       	call   c0009cc8 <getDevicesOfType(DeviceType)>
c000cd1a:	83 c4 0c             	add    esp,0xc
c000cd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd20:	83 ec 0c             	sub    esp,0xc
c000cd23:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd26:	50                   	push   eax
c000cd27:	e8 40 4f 01 00       	call   c0021c6c <LinkedList<Device>::isEmpty()>
c000cd2c:	83 c4 10             	add    esp,0x10
c000cd2f:	83 f0 01             	xor    eax,0x1
c000cd32:	0f b6 c0             	movzx  eax,al
c000cd35:	85 c0                	test   eax,eax
c000cd37:	0f 84 1f 01 00 00    	je     c000ce5c <ACPI::open(int, int, void*)+0x294>
c000cd3d:	83 ec 0c             	sub    esp,0xc
c000cd40:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd43:	50                   	push   eax
c000cd44:	e8 3f 4f 01 00       	call   c0021c88 <LinkedList<Device>::getFirstElement()>
c000cd49:	83 c4 10             	add    esp,0x10
c000cd4c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cd4f:	83 ec 0c             	sub    esp,0xc
c000cd52:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd55:	50                   	push   eax
c000cd56:	e8 35 4f 01 00       	call   c0021c90 <LinkedList<Device>::removeFirst()>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000cd61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000cd64:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000cd67:	b8 24 00 00 00       	mov    eax,0x24
c000cd6c:	83 e0 fc             	and    eax,0xfffffffc
c000cd6f:	89 c3                	mov    ebx,eax
c000cd71:	b8 00 00 00 00       	mov    eax,0x0
c000cd76:	66 90                	xchg   ax,ax
c000cd78:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000cd7f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000cd86:	83 c0 04             	add    eax,0x4
c000cd89:	39 d8                	cmp    eax,ebx
c000cd8b:	72 eb                	jb     c000cd78 <ACPI::open(int, int, void*)+0x1b0>
c000cd8d:	83 ec 08             	sub    esp,0x8
c000cd90:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000cd96:	50                   	push   eax
c000cd97:	83 ec 24             	sub    esp,0x24
c000cd9a:	89 e1                	mov    ecx,esp
c000cd9c:	b8 24 00 00 00       	mov    eax,0x24
c000cda1:	83 e0 fc             	and    eax,0xfffffffc
c000cda4:	89 c3                	mov    ebx,eax
c000cda6:	b8 00 00 00 00       	mov    eax,0x0
c000cdab:	90                   	nop
c000cdac:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000cdb3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000cdb6:	83 c0 04             	add    eax,0x4
c000cdb9:	39 d8                	cmp    eax,ebx
c000cdbb:	72 ef                	jb     c000cdac <ACPI::open(int, int, void*)+0x1e4>
c000cdbd:	e8 a8 0a 01 00       	call   c001d86a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cdc2:	83 c4 30             	add    esp,0x30
c000cdc5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000cdc8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000cdcc:	0f 84 4e ff ff ff    	je     c000cd20 <ACPI::open(int, int, void*)+0x158>
c000cdd2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000cdd9:	83 ec 0c             	sub    esp,0xc
c000cddc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000cddf:	e8 cc 2c 00 00       	call   c000fab0 <malloc>
c000cde4:	83 c4 10             	add    esp,0x10
c000cde7:	89 c3                	mov    ebx,eax
c000cde9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cdee:	83 ec 04             	sub    esp,0x4
c000cdf1:	50                   	push   eax
c000cdf2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cdf5:	53                   	push   ebx
c000cdf6:	e8 31 b3 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce07:	e8 02 b6 ff ff       	call   c000840e <File::exists()>
c000ce0c:	83 c4 10             	add    esp,0x10
c000ce0f:	0f b6 c0             	movzx  eax,al
c000ce12:	85 c0                	test   eax,eax
c000ce14:	74 22                	je     c000ce38 <ACPI::open(int, int, void*)+0x270>
c000ce16:	83 ec 08             	sub    esp,0x8
c000ce19:	6a 01                	push   0x1
c000ce1b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce1e:	e8 9a 93 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	83 ec 08             	sub    esp,0x8
c000ce29:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000ce2c:	50                   	push   eax
c000ce2d:	e8 ec 95 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c000ce32:	83 c4 10             	add    esp,0x10
c000ce35:	8d 76 00             	lea    esi,[esi+0x0]
c000ce38:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ce3c:	0f 84 de fe ff ff    	je     c000cd20 <ACPI::open(int, int, void*)+0x158>
c000ce42:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ce45:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce47:	83 c0 08             	add    eax,0x8
c000ce4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce4c:	83 ec 0c             	sub    esp,0xc
c000ce4f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce52:	ff d0                	call   eax
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	e9 c4 fe ff ff       	jmp    c000cd20 <ACPI::open(int, int, void*)+0x158>
c000ce5c:	83 ec 0c             	sub    esp,0xc
c000ce5f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce62:	50                   	push   eax
c000ce63:	e8 00 4e 01 00       	call   c0021c68 <LinkedList<Device>::~LinkedList()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000ce71:	83 ec 08             	sub    esp,0x8
c000ce74:	6a 01                	push   0x1
c000ce76:	68 ae 38 02 c0       	push   0xc00238ae
c000ce7b:	e8 3d 93 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c000ce80:	83 c4 10             	add    esp,0x10
c000ce83:	83 ec 08             	sub    esp,0x8
c000ce86:	53                   	push   ebx
c000ce87:	50                   	push   eax
c000ce88:	e8 91 95 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c000ce8d:	83 c4 10             	add    esp,0x10
c000ce90:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ce95:	85 c0                	test   eax,eax
c000ce97:	0f 84 ef 00 00 00    	je     c000cf8c <ACPI::open(int, int, void*)+0x3c4>
c000ce9d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cea2:	85 c0                	test   eax,eax
c000cea4:	0f 84 e2 00 00 00    	je     c000cf8c <ACPI::open(int, int, void*)+0x3c4>
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	68 cb 38 02 c0       	push   0xc00238cb
c000ceb2:	e8 b0 02 00 00       	call   c000d167 <KeSetBootMessage(char const*)>
c000ceb7:	83 c4 10             	add    esp,0x10
c000ceba:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cec1:	83 ec 0c             	sub    esp,0xc
c000cec4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cec7:	e8 e4 2b 00 00       	call   c000fab0 <malloc>
c000cecc:	83 c4 10             	add    esp,0x10
c000cecf:	89 c3                	mov    ebx,eax
c000ced1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ced6:	83 ec 04             	sub    esp,0x4
c000ced9:	50                   	push   eax
c000ceda:	68 e8 38 02 c0       	push   0xc00238e8
c000cedf:	53                   	push   ebx
c000cee0:	e8 47 b2 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cee5:	83 c4 10             	add    esp,0x10
c000cee8:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000ceeb:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000ceef:	74 1b                	je     c000cf0c <ACPI::open(int, int, void*)+0x344>
c000cef1:	83 ec 0c             	sub    esp,0xc
c000cef4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cef7:	e8 12 b5 ff ff       	call   c000840e <File::exists()>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	0f b6 c0             	movzx  eax,al
c000cf02:	85 c0                	test   eax,eax
c000cf04:	74 06                	je     c000cf0c <ACPI::open(int, int, void*)+0x344>
c000cf06:	b0 01                	mov    al,0x1
c000cf08:	eb 06                	jmp    c000cf10 <ACPI::open(int, int, void*)+0x348>
c000cf0a:	66 90                	xchg   ax,ax
c000cf0c:	b0 00                	mov    al,0x0
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	0f b6 c0             	movzx  eax,al
c000cf13:	85 c0                	test   eax,eax
c000cf15:	74 21                	je     c000cf38 <ACPI::open(int, int, void*)+0x370>
c000cf17:	83 ec 08             	sub    esp,0x8
c000cf1a:	6a 01                	push   0x1
c000cf1c:	68 e8 38 02 c0       	push   0xc00238e8
c000cf21:	e8 97 92 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	83 ec 08             	sub    esp,0x8
c000cf2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cf2f:	50                   	push   eax
c000cf30:	e8 e9 94 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf3c:	74 1e                	je     c000cf5c <ACPI::open(int, int, void*)+0x394>
c000cf3e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf42:	74 18                	je     c000cf5c <ACPI::open(int, int, void*)+0x394>
c000cf44:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cf47:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf49:	83 c0 08             	add    eax,0x8
c000cf4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf4e:	83 ec 0c             	sub    esp,0xc
c000cf51:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf54:	ff d0                	call   eax
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	8d 76 00             	lea    esi,[esi+0x0]
c000cf5c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf61:	83 ec 08             	sub    esp,0x8
c000cf64:	68 05 39 02 c0       	push   0xc0023905
c000cf69:	50                   	push   eax
c000cf6a:	e8 45 f3 ff ff       	call   c000c2b4 <findDataTable(unsigned char*, char*)>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cf75:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cf79:	74 11                	je     c000cf8c <ACPI::open(int, int, void*)+0x3c4>
c000cf7b:	83 ec 08             	sub    esp,0x8
c000cf7e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cf81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cf84:	e8 27 fc ff ff       	call   c000cbb0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000cf89:	83 c4 10             	add    esp,0x10
c000cf8c:	b8 00 00 00 00       	mov    eax,0x0
c000cf91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf94:	c9                   	leave  
c000cf95:	c3                   	ret    
c000cf96:	66 90                	xchg   ax,ax

c000cf98 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000cf98:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000cf9e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000cfa5:	89 c2                	mov    edx,eax
c000cfa7:	c1 fa 1f             	sar    edx,0x1f
c000cfaa:	83 ec 04             	sub    esp,0x4
c000cfad:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000cfb1:	51                   	push   ecx
c000cfb2:	52                   	push   edx
c000cfb3:	50                   	push   eax
c000cfb4:	e8 ef 28 00 00       	call   c000f8a8 <KeItoa(long long, char*)>
c000cfb9:	83 c4 10             	add    esp,0x10
c000cfbc:	83 ec 08             	sub    esp,0x8
c000cfbf:	68 b0 39 02 c0       	push   0xc00239b0
c000cfc4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cfc8:	50                   	push   eax
c000cfc9:	e8 82 36 ff ff       	call   c0000650 <strcpy>
c000cfce:	83 c4 10             	add    esp,0x10
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000cfdb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cfdf:	50                   	push   eax
c000cfe0:	e8 8b 38 ff ff       	call   c0000870 <strcat>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	83 ec 08             	sub    esp,0x8
c000cfeb:	68 be 39 02 c0       	push   0xc00239be
c000cff0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cff4:	50                   	push   eax
c000cff5:	e8 76 38 ff ff       	call   c0000870 <strcat>
c000cffa:	83 c4 10             	add    esp,0x10
c000cffd:	83 ec 08             	sub    esp,0x8
c000d000:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d007:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d00b:	50                   	push   eax
c000d00c:	e8 5f 38 ff ff       	call   c0000870 <strcat>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	83 ec 08             	sub    esp,0x8
c000d017:	68 c1 39 02 c0       	push   0xc00239c1
c000d01c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d020:	50                   	push   eax
c000d021:	e8 4a 38 ff ff       	call   c0000870 <strcat>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	83 ec 08             	sub    esp,0x8
c000d02c:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d033:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d037:	50                   	push   eax
c000d038:	e8 33 38 ff ff       	call   c0000870 <strcat>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	83 ec 08             	sub    esp,0x8
c000d043:	68 c1 39 02 c0       	push   0xc00239c1
c000d048:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d04c:	50                   	push   eax
c000d04d:	e8 1e 38 ff ff       	call   c0000870 <strcat>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	83 ec 08             	sub    esp,0x8
c000d058:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d05c:	50                   	push   eax
c000d05d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d061:	50                   	push   eax
c000d062:	e8 09 38 ff ff       	call   c0000870 <strcat>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	83 ec 0c             	sub    esp,0xc
c000d06d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d071:	50                   	push   eax
c000d072:	e8 7f 2d 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d077:	83 c4 10             	add    esp,0x10
c000d07a:	90                   	nop
c000d07b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d081:	c3                   	ret    

c000d082 <KeInitialiseAtexit()>:
c000d082:	83 ec 10             	sub    esp,0x10
c000d085:	6a 60                	push   0x60
c000d087:	6a 00                	push   0x0
c000d089:	68 60 c0 02 c0       	push   0xc002c060
c000d08e:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d098:	e8 53 34 ff ff       	call   c00004f0 <memset>
c000d09d:	83 c4 1c             	add    esp,0x1c
c000d0a0:	c3                   	ret    

c000d0a1 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d0a1:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d0a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0aa:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d0b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0b5:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d0bc:	40                   	inc    eax
c000d0bd:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d0c2:	83 f8 17             	cmp    eax,0x17
c000d0c5:	7e 0d                	jle    c000d0d4 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d0c7:	c7 44 24 04 c3 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc00239c3
c000d0cf:	e9 22 2d 00 00       	jmp    c000fdf6 <KePanic(char const*)>
c000d0d4:	c3                   	ret    

c000d0d5 <KeExecuteAtexit()>:
c000d0d5:	53                   	push   ebx
c000d0d6:	31 db                	xor    ebx,ebx
c000d0d8:	83 ec 08             	sub    esp,0x8
c000d0db:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d0e1:	7e 50                	jle    c000d133 <KeExecuteAtexit()+0x5e>
c000d0e3:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d0ea:	85 c0                	test   eax,eax
c000d0ec:	74 42                	je     c000d130 <KeExecuteAtexit()+0x5b>
c000d0ee:	51                   	push   ecx
c000d0ef:	50                   	push   eax
c000d0f0:	53                   	push   ebx
c000d0f1:	68 dc 39 02 c0       	push   0xc00239dc
c000d0f6:	e8 53 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d0fb:	58                   	pop    eax
c000d0fc:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d103:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d10a:	c7 04 24 fe 39 02 c0 	mov    DWORD PTR [esp],0xc00239fe
c000d111:	e8 38 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d116:	c7 04 24 8f 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d8f
c000d11d:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d128:	e8 21 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d12d:	83 c4 10             	add    esp,0x10
c000d130:	43                   	inc    ebx
c000d131:	eb a8                	jmp    c000d0db <KeExecuteAtexit()+0x6>
c000d133:	83 c4 08             	add    esp,0x8
c000d136:	5b                   	pop    ebx
c000d137:	c3                   	ret    

c000d138 <KeDisplaySplashScreen()>:
c000d138:	53                   	push   ebx
c000d139:	bb 01 00 00 00       	mov    ebx,0x1
c000d13e:	83 ec 08             	sub    esp,0x8
c000d141:	43                   	inc    ebx
c000d142:	0f be 83 01 3a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc5ff]
c000d149:	85 c0                	test   eax,eax
c000d14b:	74 15                	je     c000d162 <KeDisplaySplashScreen()+0x2a>
c000d14d:	83 ec 0c             	sub    esp,0xc
c000d150:	6a 01                	push   0x1
c000d152:	53                   	push   ebx
c000d153:	6a 00                	push   0x0
c000d155:	6a 0f                	push   0xf
c000d157:	50                   	push   eax
c000d158:	e8 d7 dd 00 00       	call   c001af34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d15d:	83 c4 20             	add    esp,0x20
c000d160:	eb df                	jmp    c000d141 <KeDisplaySplashScreen()+0x9>
c000d162:	83 c4 08             	add    esp,0x8
c000d165:	5b                   	pop    ebx
c000d166:	c3                   	ret    

c000d167 <KeSetBootMessage(char const*)>:
c000d167:	57                   	push   edi
c000d168:	56                   	push   esi
c000d169:	53                   	push   ebx
c000d16a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d170:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d177:	68 9e 00 00 00       	push   0x9e
c000d17c:	6a 00                	push   0x0
c000d17e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d182:	56                   	push   esi
c000d183:	e8 68 33 ff ff       	call   c00004f0 <memset>
c000d188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d18b:	e8 f0 33 ff ff       	call   c0000580 <strlen>
c000d190:	ba 50 00 00 00       	mov    edx,0x50
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	31 c9                	xor    ecx,ecx
c000d19a:	29 c2                	sub    edx,eax
c000d19c:	83 e2 fe             	and    edx,0xfffffffe
c000d19f:	01 f2                	add    edx,esi
c000d1a1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d1a6:	84 c0                	test   al,al
c000d1a8:	74 0a                	je     c000d1b4 <KeSetBootMessage(char const*)+0x4d>
c000d1aa:	80 cc 07             	or     ah,0x7
c000d1ad:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d1b1:	41                   	inc    ecx
c000d1b2:	eb ed                	jmp    c000d1a1 <KeSetBootMessage(char const*)+0x3a>
c000d1b4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d1b9:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d1be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d1c0:	50                   	push   eax
c000d1c1:	50                   	push   eax
c000d1c2:	53                   	push   ebx
c000d1c3:	68 16 3a 02 c0       	push   0xc0023a16
c000d1c8:	e8 81 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d1cd:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d1d3:	5b                   	pop    ebx
c000d1d4:	5e                   	pop    esi
c000d1d5:	5f                   	pop    edi
c000d1d6:	c3                   	ret    

c000d1d7 <__cxa_atexit>:
c000d1d7:	31 c0                	xor    eax,eax
c000d1d9:	c3                   	ret    

c000d1da <__cxa_finalize>:
c000d1da:	c3                   	ret    

c000d1db <__stack_chk_fail>:
c000d1db:	55                   	push   ebp
c000d1dc:	89 e5                	mov    ebp,esp
c000d1de:	83 ec 10             	sub    esp,0x10
c000d1e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d1e4:	68 24 3a 02 c0       	push   0xc0023a24
c000d1e9:	e8 60 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d1ee:	58                   	pop    eax
c000d1ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d1f2:	5a                   	pop    edx
c000d1f3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d1f6:	68 24 3a 02 c0       	push   0xc0023a24
c000d1fb:	e8 4e 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d200:	c7 04 24 2c 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a2c
c000d207:	e8 ea 2b 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d20c:	83 c4 10             	add    esp,0x10
c000d20f:	c9                   	leave  
c000d210:	c3                   	ret    

c000d211 <__cxa_pure_virtual>:
c000d211:	83 ec 18             	sub    esp,0x18
c000d214:	68 44 3a 02 c0       	push   0xc0023a44
c000d219:	e8 d8 2b 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d21e:	83 c4 1c             	add    esp,0x1c
c000d221:	c3                   	ret    

c000d222 <operator new[](unsigned long)>:
c000d222:	e9 89 28 00 00       	jmp    c000fab0 <malloc>

c000d227 <operator delete(void*, unsigned long)>:
c000d227:	e9 a4 28 00 00       	jmp    c000fad0 <rfree>

c000d22c <operator delete[](void*)>:
c000d22c:	e9 9f 28 00 00       	jmp    c000fad0 <rfree>

c000d231 <operator delete[](void*, unsigned long)>:
c000d231:	e9 9a 28 00 00       	jmp    c000fad0 <rfree>
c000d236:	66 90                	xchg   ax,ax

c000d238 <CUnlockScheduler>:
c000d238:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d240:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d245:	85 c0                	test   eax,eax
c000d247:	75 03                	jne    c000d24c <CUnlockScheduler+0x14>
c000d249:	fb                   	sti    
c000d24a:	66 90                	xchg   ax,ax
c000d24c:	90                   	nop
c000d24d:	c3                   	ret    
c000d24e:	66 90                	xchg   ax,ax

c000d250 <CLockScheduler>:
c000d250:	fa                   	cli    
c000d251:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d256:	83 c0 01             	add    eax,0x1
c000d259:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d25e:	90                   	nop
c000d25f:	c3                   	ret    

c000d260 <CPrintf>:
c000d260:	83 ec 0c             	sub    esp,0xc
c000d263:	83 ec 08             	sub    esp,0x8
c000d266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d26a:	68 57 3a 02 c0       	push   0xc0023a57
c000d26f:	e8 da 9c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d274:	83 c4 10             	add    esp,0x10
c000d277:	90                   	nop
c000d278:	83 c4 0c             	add    esp,0xc
c000d27b:	c3                   	ret    

c000d27c <CmOpen(char const*)>:
c000d27c:	57                   	push   edi
c000d27d:	56                   	push   esi
c000d27e:	53                   	push   ebx
c000d27f:	83 ec 1c             	sub    esp,0x1c
c000d282:	6a 30                	push   0x30
c000d284:	e8 27 28 00 00       	call   c000fab0 <malloc>
c000d289:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d290:	89 c3                	mov    ebx,eax
c000d292:	e8 19 28 00 00       	call   c000fab0 <malloc>
c000d297:	83 c4 0c             	add    esp,0xc
c000d29a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d2a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2a4:	89 c6                	mov    esi,eax
c000d2a6:	50                   	push   eax
c000d2a7:	e8 80 ae ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d2ac:	83 c4 0c             	add    esp,0xc
c000d2af:	89 33                	mov    DWORD PTR [ebx],esi
c000d2b1:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d2b5:	50                   	push   eax
c000d2b6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d2ba:	50                   	push   eax
c000d2bb:	56                   	push   esi
c000d2bc:	e8 8b b1 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000d2c1:	5a                   	pop    edx
c000d2c2:	59                   	pop    ecx
c000d2c3:	6a 01                	push   0x1
c000d2c5:	ff 33                	push   DWORD PTR [ebx]
c000d2c7:	e8 7e ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d2cc:	5e                   	pop    esi
c000d2cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2d1:	e8 da 27 00 00       	call   c000fab0 <malloc>
c000d2d6:	5a                   	pop    edx
c000d2d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d2db:	89 c7                	mov    edi,eax
c000d2dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000d2e1:	56                   	push   esi
c000d2e2:	57                   	push   edi
c000d2e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2eb:	50                   	push   eax
c000d2ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d2ef:	83 c4 14             	add    esp,0x14
c000d2f2:	ff 33                	push   DWORD PTR [ebx]
c000d2f4:	e8 af ae ff ff       	call   c00081a8 <File::close()>
c000d2f9:	59                   	pop    ecx
c000d2fa:	58                   	pop    eax
c000d2fb:	6a 13                	push   0x13
c000d2fd:	ff 33                	push   DWORD PTR [ebx]
c000d2ff:	e8 46 ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d304:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d306:	8b 10                	mov    edx,DWORD PTR [eax]
c000d308:	89 34 24             	mov    DWORD PTR [esp],esi
c000d30b:	57                   	push   edi
c000d30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d310:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d314:	50                   	push   eax
c000d315:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d318:	83 c4 14             	add    esp,0x14
c000d31b:	57                   	push   edi
c000d31c:	e8 9f 27 00 00       	call   c000fac0 <free>
c000d321:	83 c4 10             	add    esp,0x10
c000d324:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d327:	75 10                	jne    c000d339 <CmOpen(char const*)+0xbd>
c000d329:	83 ec 0c             	sub    esp,0xc
c000d32c:	68 5a 3a 02 c0       	push   0xc0023a5a
c000d331:	e8 c0 2a 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d336:	83 c4 10             	add    esp,0x10
c000d339:	50                   	push   eax
c000d33a:	6a 00                	push   0x0
c000d33c:	6a 00                	push   0x0
c000d33e:	ff 33                	push   DWORD PTR [ebx]
c000d340:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d343:	e8 c0 ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d34a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d34c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d34f:	57                   	push   edi
c000d350:	6a 00                	push   0x0
c000d352:	6a 2b                	push   0x2b
c000d354:	50                   	push   eax
c000d355:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d358:	83 c4 1c             	add    esp,0x1c
c000d35b:	6a 00                	push   0x0
c000d35d:	6a 00                	push   0x0
c000d35f:	ff 33                	push   DWORD PTR [ebx]
c000d361:	e8 a2 ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d366:	83 c4 0c             	add    esp,0xc
c000d369:	6a 08                	push   0x8
c000d36b:	68 6b 3a 02 c0       	push   0xc0023a6b
c000d370:	57                   	push   edi
c000d371:	e8 0a 30 ff ff       	call   c0000380 <memcmp>
c000d376:	83 c4 10             	add    esp,0x10
c000d379:	85 c0                	test   eax,eax
c000d37b:	74 10                	je     c000d38d <CmOpen(char const*)+0x111>
c000d37d:	83 ec 0c             	sub    esp,0xc
c000d380:	68 74 3a 02 c0       	push   0xc0023a74
c000d385:	e8 6c 2a 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 d8                	mov    eax,ebx
c000d396:	5b                   	pop    ebx
c000d397:	5e                   	pop    esi
c000d398:	5f                   	pop    edi
c000d399:	c3                   	ret    

c000d39a <CmClose(Reghive_Tag*)>:
c000d39a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d39e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d3a2:	74 0b                	je     c000d3af <CmClose(Reghive_Tag*)+0x15>
c000d3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3aa:	e9 f9 ad ff ff       	jmp    c00081a8 <File::close()>
c000d3af:	c3                   	ret    

c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d3b0:	53                   	push   ebx
c000d3b1:	83 ec 18             	sub    esp,0x18
c000d3b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d3b8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d3bc:	74 29                	je     c000d3e7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d3be:	50                   	push   eax
c000d3bf:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d3c4:	99                   	cdq    
c000d3c5:	52                   	push   edx
c000d3c6:	50                   	push   eax
c000d3c7:	ff 33                	push   DWORD PTR [ebx]
c000d3c9:	e8 3a ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d3ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d0:	5a                   	pop    edx
c000d3d1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d7:	51                   	push   ecx
c000d3d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d3dc:	6a 00                	push   0x0
c000d3de:	6a 2b                	push   0x2b
c000d3e0:	50                   	push   eax
c000d3e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3e4:	83 c4 20             	add    esp,0x20
c000d3e7:	83 c4 18             	add    esp,0x18
c000d3ea:	5b                   	pop    ebx
c000d3eb:	c3                   	ret    

c000d3ec <CmGetString(Reghive_Tag*, int, char*)>:
c000d3ec:	55                   	push   ebp
c000d3ed:	57                   	push   edi
c000d3ee:	56                   	push   esi
c000d3ef:	53                   	push   ebx
c000d3f0:	31 db                	xor    ebx,ebx
c000d3f2:	83 ec 70             	sub    esp,0x70
c000d3f5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d3f9:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d400:	50                   	push   eax
c000d401:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d408:	55                   	push   ebp
c000d409:	e8 a2 ff ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d416:	c1 e0 08             	shl    eax,0x8
c000d419:	89 c2                	mov    edx,eax
c000d41b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d420:	09 d0                	or     eax,edx
c000d422:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d427:	c1 e0 08             	shl    eax,0x8
c000d42a:	09 d0                	or     eax,edx
c000d42c:	74 25                	je     c000d453 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d42e:	52                   	push   edx
c000d42f:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d433:	52                   	push   edx
c000d434:	6b fb 0d             	imul   edi,ebx,0xd
c000d437:	50                   	push   eax
c000d438:	55                   	push   ebp
c000d439:	e8 72 ff ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d43e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d442:	b9 27 00 00 00       	mov    ecx,0x27
c000d447:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d44e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	83 c3 03             	add    ebx,0x3
c000d456:	83 fb 15             	cmp    ebx,0x15
c000d459:	75 b6                	jne    c000d411 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d45b:	83 c4 6c             	add    esp,0x6c
c000d45e:	5b                   	pop    ebx
c000d45f:	5e                   	pop    esi
c000d460:	5f                   	pop    edi
c000d461:	5d                   	pop    ebp
c000d462:	c3                   	ret    

c000d463 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d463:	83 ec 40             	sub    esp,0x40
c000d466:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d46a:	50                   	push   eax
c000d46b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d46f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d473:	e8 38 ff ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	83 c8 ff             	or     eax,0xffffffff
c000d47e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d483:	75 19                	jne    c000d49e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d485:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d48a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d48f:	c1 e0 08             	shl    eax,0x8
c000d492:	09 c2                	or     edx,eax
c000d494:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d499:	c1 e0 10             	shl    eax,0x10
c000d49c:	09 d0                	or     eax,edx
c000d49e:	83 c4 3c             	add    esp,0x3c
c000d4a1:	c3                   	ret    

c000d4a2 <CmGetNext(Reghive_Tag*, int)>:
c000d4a2:	83 ec 40             	sub    esp,0x40
c000d4a5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4a9:	50                   	push   eax
c000d4aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4b2:	e8 f9 fe ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4b7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d4bc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d4c1:	c1 e0 08             	shl    eax,0x8
c000d4c4:	09 c2                	or     edx,eax
c000d4c6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d4cb:	83 c4 4c             	add    esp,0x4c
c000d4ce:	c1 e0 10             	shl    eax,0x10
c000d4d1:	09 d0                	or     eax,edx
c000d4d3:	c3                   	ret    

c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4d4:	53                   	push   ebx
c000d4d5:	83 ec 18             	sub    esp,0x18
c000d4d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4dc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4e0:	74 29                	je     c000d50b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4e2:	50                   	push   eax
c000d4e3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4e8:	99                   	cdq    
c000d4e9:	52                   	push   edx
c000d4ea:	50                   	push   eax
c000d4eb:	ff 33                	push   DWORD PTR [ebx]
c000d4ed:	e8 16 ad ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d4f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4f4:	5a                   	pop    edx
c000d4f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4f9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4fb:	51                   	push   ecx
c000d4fc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d500:	6a 00                	push   0x0
c000d502:	6a 2b                	push   0x2b
c000d504:	50                   	push   eax
c000d505:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d508:	83 c4 20             	add    esp,0x20
c000d50b:	83 c4 18             	add    esp,0x18
c000d50e:	5b                   	pop    ebx
c000d50f:	c3                   	ret    

c000d510 <CmFreeExtent(Reghive_Tag*, int)>:
c000d510:	53                   	push   ebx
c000d511:	83 ec 3c             	sub    esp,0x3c
c000d514:	6a 2b                	push   0x2b
c000d516:	6a 00                	push   0x0
c000d518:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d51c:	53                   	push   ebx
c000d51d:	e8 ce 2f ff ff       	call   c00004f0 <memset>
c000d522:	83 c4 0c             	add    esp,0xc
c000d525:	53                   	push   ebx
c000d526:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d52a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d52e:	e8 a1 ff ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d533:	83 c4 48             	add    esp,0x48
c000d536:	5b                   	pop    ebx
c000d537:	c3                   	ret    

c000d538 <CmUpdateHeader(Reghive_Tag*)>:
c000d538:	83 ec 0c             	sub    esp,0xc
c000d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d543:	74 10                	je     c000d555 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d545:	52                   	push   edx
c000d546:	8d 50 05             	lea    edx,[eax+0x5]
c000d549:	52                   	push   edx
c000d54a:	6a 00                	push   0x0
c000d54c:	50                   	push   eax
c000d54d:	e8 82 ff ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	83 c4 0c             	add    esp,0xc
c000d558:	c3                   	ret    

c000d559 <CmExpand(Reghive_Tag*, int)>:
c000d559:	55                   	push   ebp
c000d55a:	57                   	push   edi
c000d55b:	83 cf ff             	or     edi,0xffffffff
c000d55e:	56                   	push   esi
c000d55f:	53                   	push   ebx
c000d560:	83 ec 3c             	sub    esp,0x3c
c000d563:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d567:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d56b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d56f:	74 59                	je     c000d5ca <CmExpand(Reghive_Tag*, int)+0x71>
c000d571:	50                   	push   eax
c000d572:	31 d2                	xor    edx,edx
c000d574:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d578:	31 ff                	xor    edi,edi
c000d57a:	52                   	push   edx
c000d57b:	50                   	push   eax
c000d57c:	ff 33                	push   DWORD PTR [ebx]
c000d57e:	e8 85 ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d583:	83 c4 0c             	add    esp,0xc
c000d586:	6a 2b                	push   0x2b
c000d588:	6a 00                	push   0x0
c000d58a:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d58e:	55                   	push   ebp
c000d58f:	e8 5c 2f ff ff       	call   c00004f0 <memset>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	39 f7                	cmp    edi,esi
c000d599:	7d 1b                	jge    c000d5b6 <CmExpand(Reghive_Tag*, int)+0x5d>
c000d59b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d59d:	83 ec 0c             	sub    esp,0xc
c000d5a0:	47                   	inc    edi
c000d5a1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d5a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5a7:	51                   	push   ecx
c000d5a8:	55                   	push   ebp
c000d5a9:	6a 00                	push   0x0
c000d5ab:	6a 2b                	push   0x2b
c000d5ad:	50                   	push   eax
c000d5ae:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5b1:	83 c4 20             	add    esp,0x20
c000d5b4:	eb e1                	jmp    c000d597 <CmExpand(Reghive_Tag*, int)+0x3e>
c000d5b6:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d5b9:	83 ec 0c             	sub    esp,0xc
c000d5bc:	01 fe                	add    esi,edi
c000d5be:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d5c1:	53                   	push   ebx
c000d5c2:	e8 71 ff ff ff       	call   c000d538 <CmUpdateHeader(Reghive_Tag*)>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 3c             	add    esp,0x3c
c000d5cd:	89 f8                	mov    eax,edi
c000d5cf:	5b                   	pop    ebx
c000d5d0:	5e                   	pop    esi
c000d5d1:	5f                   	pop    edi
c000d5d2:	5d                   	pop    ebp
c000d5d3:	c3                   	ret    

c000d5d4 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d5d4:	55                   	push   ebp
c000d5d5:	57                   	push   edi
c000d5d6:	56                   	push   esi
c000d5d7:	53                   	push   ebx
c000d5d8:	83 cb ff             	or     ebx,0xffffffff
c000d5db:	83 ec 1c             	sub    esp,0x1c
c000d5de:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d5e2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d5e6:	74 68                	je     c000d650 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d5e8:	51                   	push   ecx
c000d5e9:	be 2b 00 00 00       	mov    esi,0x2b
c000d5ee:	6a 00                	push   0x0
c000d5f0:	31 ff                	xor    edi,edi
c000d5f2:	6a 00                	push   0x0
c000d5f4:	31 db                	xor    ebx,ebx
c000d5f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d5f9:	e8 0a ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d5fe:	83 c4 10             	add    esp,0x10
c000d601:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d604:	76 3b                	jbe    c000d641 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d606:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d609:	83 ec 0c             	sub    esp,0xc
c000d60c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d610:	8b 10                	mov    edx,DWORD PTR [eax]
c000d612:	51                   	push   ecx
c000d613:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d617:	51                   	push   ecx
c000d618:	6a 00                	push   0x0
c000d61a:	6a 01                	push   0x1
c000d61c:	50                   	push   eax
c000d61d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d620:	83 c4 20             	add    esp,0x20
c000d623:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d628:	74 26                	je     c000d650 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d62a:	52                   	push   edx
c000d62b:	43                   	inc    ebx
c000d62c:	57                   	push   edi
c000d62d:	56                   	push   esi
c000d62e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d631:	e8 d2 ab ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d636:	83 c6 2b             	add    esi,0x2b
c000d639:	83 d7 00             	adc    edi,0x0
c000d63c:	83 c4 10             	add    esp,0x10
c000d63f:	eb c0                	jmp    c000d601 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d641:	50                   	push   eax
c000d642:	50                   	push   eax
c000d643:	6a 40                	push   0x40
c000d645:	55                   	push   ebp
c000d646:	e8 0e ff ff ff       	call   c000d559 <CmExpand(Reghive_Tag*, int)>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	89 c3                	mov    ebx,eax
c000d650:	83 c4 1c             	add    esp,0x1c
c000d653:	89 d8                	mov    eax,ebx
c000d655:	5b                   	pop    ebx
c000d656:	5e                   	pop    esi
c000d657:	5f                   	pop    edi
c000d658:	5d                   	pop    ebp
c000d659:	c3                   	ret    

c000d65a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d65a:	55                   	push   ebp
c000d65b:	57                   	push   edi
c000d65c:	56                   	push   esi
c000d65d:	53                   	push   ebx
c000d65e:	81 ec 88 00 00 00    	sub    esp,0x88
c000d664:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d66b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d672:	e8 5d ff ff ff       	call   c000d5d4 <CmFindUnusedExtent(Reghive_Tag*)>
c000d677:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d67b:	83 c4 0c             	add    esp,0xc
c000d67e:	6a 2b                	push   0x2b
c000d680:	6a 00                	push   0x0
c000d682:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d686:	55                   	push   ebp
c000d687:	e8 64 2e ff ff       	call   c00004f0 <memset>
c000d68c:	83 c4 10             	add    esp,0x10
c000d68f:	85 db                	test   ebx,ebx
c000d691:	74 12                	je     c000d6a5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d693:	51                   	push   ecx
c000d694:	55                   	push   ebp
c000d695:	53                   	push   ebx
c000d696:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d69d:	e8 0e fd ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d6a2:	83 c4 10             	add    esp,0x10
c000d6a5:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d6a9:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d6b0:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d6b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6b7:	85 db                	test   ebx,ebx
c000d6b9:	74 49                	je     c000d704 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d6bb:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d6c0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d6c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6c9:	c1 e0 08             	shl    eax,0x8
c000d6cc:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d6d2:	09 c8                	or     eax,ecx
c000d6d4:	74 11                	je     c000d6e7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d6d6:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d6da:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d6de:	c1 e8 10             	shr    eax,0x10
c000d6e1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d6e5:	eb 0f                	jmp    c000d6f6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d6e7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d6ec:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d6f1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d6f6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d6fa:	c1 ea 08             	shr    edx,0x8
c000d6fd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d702:	eb 0f                	jmp    c000d713 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d704:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d709:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d70e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d713:	52                   	push   edx
c000d714:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d718:	50                   	push   eax
c000d719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d71d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d724:	e8 ab fd ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 db                	test   ebx,ebx
c000d72e:	74 12                	je     c000d742 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d730:	50                   	push   eax
c000d731:	55                   	push   ebp
c000d732:	53                   	push   ebx
c000d733:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d73a:	e8 95 fd ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d746:	83 c4 7c             	add    esp,0x7c
c000d749:	5b                   	pop    ebx
c000d74a:	5e                   	pop    esi
c000d74b:	5f                   	pop    edi
c000d74c:	5d                   	pop    ebp
c000d74d:	c3                   	ret    

c000d74e <CmSetString(Reghive_Tag*, int, char const*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	bb 27 00 00 00       	mov    ebx,0x27
c000d757:	81 ec 88 00 00 00    	sub    esp,0x88
c000d75d:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d764:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d76b:	e8 10 2e ff ff       	call   c0000580 <strlen>
c000d770:	8d 48 26             	lea    ecx,[eax+0x26]
c000d773:	89 c8                	mov    eax,ecx
c000d775:	99                   	cdq    
c000d776:	f7 fb                	idiv   ebx
c000d778:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d785:	7e 10                	jle    c000d797 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d787:	83 ec 0c             	sub    esp,0xc
c000d78a:	68 85 3a 02 c0       	push   0xc0023a85
c000d78f:	e8 62 26 00 00       	call   c000fdf6 <KePanic(char const*)>
c000d794:	83 c4 10             	add    esp,0x10
c000d797:	53                   	push   ebx
c000d798:	31 ed                	xor    ebp,ebp
c000d79a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d79e:	53                   	push   ebx
c000d79f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7a6:	57                   	push   edi
c000d7a7:	e8 04 fc ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7ac:	83 c4 10             	add    esp,0x10
c000d7af:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d7b3:	89 f0                	mov    eax,esi
c000d7b5:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d7b9:	c1 e0 08             	shl    eax,0x8
c000d7bc:	09 c6                	or     esi,eax
c000d7be:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d7c2:	c1 e6 08             	shl    esi,0x8
c000d7c5:	09 c6                	or     esi,eax
c000d7c7:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d7cb:	7e 72                	jle    c000d83f <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d7cd:	85 f6                	test   esi,esi
c000d7cf:	75 25                	jne    c000d7f6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d7d1:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d7d6:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d7da:	50                   	push   eax
c000d7db:	6a 00                	push   0x0
c000d7dd:	6a 00                	push   0x0
c000d7df:	57                   	push   edi
c000d7e0:	e8 75 fe ff ff       	call   c000d65a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d7e5:	83 c4 10             	add    esp,0x10
c000d7e8:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d7eb:	89 c6                	mov    esi,eax
c000d7ed:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d7f0:	c1 f8 10             	sar    eax,0x10
c000d7f3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d7f6:	51                   	push   ecx
c000d7f7:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d7fb:	52                   	push   edx
c000d7fc:	56                   	push   esi
c000d7fd:	57                   	push   edi
c000d7fe:	e8 ad fb ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	6a 27                	push   0x27
c000d808:	6a 00                	push   0x0
c000d80a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d80e:	51                   	push   ecx
c000d80f:	e8 dc 2c ff ff       	call   c00004f0 <memset>
c000d814:	6b c5 27             	imul   eax,ebp,0x27
c000d817:	83 c4 0c             	add    esp,0xc
c000d81a:	6a 27                	push   0x27
c000d81c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d823:	50                   	push   eax
c000d824:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d828:	51                   	push   ecx
c000d829:	e8 62 2e ff ff       	call   c0000690 <strncpy>
c000d82e:	83 c4 0c             	add    esp,0xc
c000d831:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d835:	52                   	push   edx
c000d836:	56                   	push   esi
c000d837:	57                   	push   edi
c000d838:	e8 97 fc ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d83d:	eb 19                	jmp    c000d858 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d83f:	85 f6                	test   esi,esi
c000d841:	74 18                	je     c000d85b <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d843:	52                   	push   edx
c000d844:	52                   	push   edx
c000d845:	56                   	push   esi
c000d846:	57                   	push   edi
c000d847:	e8 c4 fc ff ff       	call   c000d510 <CmFreeExtent(Reghive_Tag*, int)>
c000d84c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d850:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d854:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d858:	83 c4 10             	add    esp,0x10
c000d85b:	45                   	inc    ebp
c000d85c:	83 c3 03             	add    ebx,0x3
c000d85f:	83 fd 07             	cmp    ebp,0x7
c000d862:	0f 85 47 ff ff ff    	jne    c000d7af <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d868:	50                   	push   eax
c000d869:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d86d:	50                   	push   eax
c000d86e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d875:	57                   	push   edi
c000d876:	e8 59 fc ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d87b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d881:	5b                   	pop    ebx
c000d882:	5e                   	pop    esi
c000d883:	5f                   	pop    edi
c000d884:	5d                   	pop    ebp
c000d885:	c3                   	ret    

c000d886 <CmGetMatch(char*, char*, bool, bool*)>:
c000d886:	56                   	push   esi
c000d887:	53                   	push   ebx
c000d888:	50                   	push   eax
c000d889:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d88e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d892:	74 25                	je     c000d8b9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d894:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d897:	31 db                	xor    ebx,ebx
c000d899:	50                   	push   eax
c000d89a:	50                   	push   eax
c000d89b:	8d 04 9d 40 5e 02 c0 	lea    eax,[ebx*4-0x3ffda1c0]
c000d8a2:	50                   	push   eax
c000d8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a7:	e8 d4 2e ff ff       	call   c0000780 <strcmp>
c000d8ac:	83 c4 10             	add    esp,0x10
c000d8af:	85 c0                	test   eax,eax
c000d8b1:	74 2e                	je     c000d8e1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d8b3:	43                   	inc    ebx
c000d8b4:	83 fb 3f             	cmp    ebx,0x3f
c000d8b7:	75 e0                	jne    c000d899 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d8b9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d8bc:	31 db                	xor    ebx,ebx
c000d8be:	51                   	push   ecx
c000d8bf:	51                   	push   ecx
c000d8c0:	8d 04 9d 40 5e 02 c0 	lea    eax,[ebx*4-0x3ffda1c0]
c000d8c7:	50                   	push   eax
c000d8c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d8cc:	e8 af 2e ff ff       	call   c0000780 <strcmp>
c000d8d1:	83 c4 10             	add    esp,0x10
c000d8d4:	85 c0                	test   eax,eax
c000d8d6:	74 09                	je     c000d8e1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d8d8:	43                   	inc    ebx
c000d8d9:	83 fb 3f             	cmp    ebx,0x3f
c000d8dc:	75 e0                	jne    c000d8be <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d8de:	83 cb ff             	or     ebx,0xffffffff
c000d8e1:	5a                   	pop    edx
c000d8e2:	89 d8                	mov    eax,ebx
c000d8e4:	5b                   	pop    ebx
c000d8e5:	5e                   	pop    esi
c000d8e6:	c3                   	ret    

c000d8e7 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d8e7:	55                   	push   ebp
c000d8e8:	31 c0                	xor    eax,eax
c000d8ea:	57                   	push   edi
c000d8eb:	56                   	push   esi
c000d8ec:	53                   	push   ebx
c000d8ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d8f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d8f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8fd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d8ff:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d902:	83 fd 1f             	cmp    ebp,0x1f
c000d905:	7f 0b                	jg     c000d912 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d907:	0f b6 c2             	movzx  eax,dl
c000d90a:	d3 e0                	shl    eax,cl
c000d90c:	09 07                	or     DWORD PTR [edi],eax
c000d90e:	b0 01                	mov    al,0x1
c000d910:	01 33                	add    DWORD PTR [ebx],esi
c000d912:	5b                   	pop    ebx
c000d913:	5e                   	pop    esi
c000d914:	5f                   	pop    edi
c000d915:	5d                   	pop    ebp
c000d916:	c3                   	ret    

c000d917 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d917:	57                   	push   edi
c000d918:	56                   	push   esi
c000d919:	53                   	push   ebx
c000d91a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d91e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d922:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d926:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d92a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d92c:	7c 17                	jl     c000d945 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d92e:	8b 17                	mov    edx,DWORD PTR [edi]
c000d930:	b8 01 00 00 00       	mov    eax,0x1
c000d935:	d3 e0                	shl    eax,cl
c000d937:	48                   	dec    eax
c000d938:	21 d0                	and    eax,edx
c000d93a:	d3 ea                	shr    edx,cl
c000d93c:	89 17                	mov    DWORD PTR [edi],edx
c000d93e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d940:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d943:	eb 05                	jmp    c000d94a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d945:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d948:	31 c0                	xor    eax,eax
c000d94a:	5b                   	pop    ebx
c000d94b:	5e                   	pop    esi
c000d94c:	5f                   	pop    edi
c000d94d:	c3                   	ret    

c000d94e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d94e:	83 ec 40             	sub    esp,0x40
c000d951:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d955:	50                   	push   eax
c000d956:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d95e:	e8 4d fa ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d963:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d967:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d96b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d96f:	89 10                	mov    DWORD PTR [eax],edx
c000d971:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d974:	83 c4 4c             	add    esp,0x4c
c000d977:	c3                   	ret    

c000d978 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d978:	55                   	push   ebp
c000d979:	57                   	push   edi
c000d97a:	56                   	push   esi
c000d97b:	53                   	push   ebx
c000d97c:	83 ec 40             	sub    esp,0x40
c000d97f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d983:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d987:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d98b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d98f:	53                   	push   ebx
c000d990:	56                   	push   esi
c000d991:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d995:	e8 16 fa ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d99a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d99e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d9a2:	83 c4 0c             	add    esp,0xc
c000d9a5:	53                   	push   ebx
c000d9a6:	56                   	push   esi
c000d9a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9ab:	e8 24 fb ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9b0:	83 c4 4c             	add    esp,0x4c
c000d9b3:	5b                   	pop    ebx
c000d9b4:	5e                   	pop    esi
c000d9b5:	5f                   	pop    edi
c000d9b6:	5d                   	pop    ebp
c000d9b7:	c3                   	ret    

c000d9b8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d9b8:	55                   	push   ebp
c000d9b9:	57                   	push   edi
c000d9ba:	56                   	push   esi
c000d9bb:	31 f6                	xor    esi,esi
c000d9bd:	53                   	push   ebx
c000d9be:	31 db                	xor    ebx,ebx
c000d9c0:	83 ec 40             	sub    esp,0x40
c000d9c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d9cb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d9d3:	6a 12                	push   0x12
c000d9d5:	68 ee 00 00 00       	push   0xee
c000d9da:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d9de:	e8 0d 2b ff ff       	call   c00004f0 <memset>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d9ea:	6a 08                	push   0x8
c000d9ec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d9f0:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d9f4:	50                   	push   eax
c000d9f5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d9f9:	55                   	push   ebp
c000d9fa:	57                   	push   edi
c000d9fb:	e8 e7 fe ff ff       	call   c000d8e7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da07:	50                   	push   eax
c000da08:	6a 06                	push   0x6
c000da0a:	55                   	push   ebp
c000da0b:	57                   	push   edi
c000da0c:	e8 06 ff ff ff       	call   c000d917 <CmGetShift(unsigned int*, int*, int, bool*)>
c000da11:	83 c4 10             	add    esp,0x10
c000da14:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da19:	74 07                	je     c000da22 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da1b:	46                   	inc    esi
c000da1c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da20:	eb e1                	jmp    c000da03 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da22:	43                   	inc    ebx
c000da23:	83 fb 12             	cmp    ebx,0x12
c000da26:	75 c2                	jne    c000d9ea <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da28:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da2c:	31 f6                	xor    esi,esi
c000da2e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da31:	50                   	push   eax
c000da32:	50                   	push   eax
c000da33:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000da38:	46                   	inc    esi
c000da39:	8d 04 85 40 5e 02 c0 	lea    eax,[eax*4-0x3ffda1c0]
c000da40:	50                   	push   eax
c000da41:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da45:	e8 26 2e ff ff       	call   c0000870 <strcat>
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	83 fe 18             	cmp    esi,0x18
c000da50:	75 df                	jne    c000da31 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000da52:	83 c4 3c             	add    esp,0x3c
c000da55:	31 c0                	xor    eax,eax
c000da57:	5b                   	pop    ebx
c000da58:	5e                   	pop    esi
c000da59:	5f                   	pop    edi
c000da5a:	5d                   	pop    ebp
c000da5b:	c3                   	ret    

c000da5c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000da5c:	83 ec 40             	sub    esp,0x40
c000da5f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da63:	50                   	push   eax
c000da64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da6c:	e8 3f f9 ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da71:	58                   	pop    eax
c000da72:	5a                   	pop    edx
c000da73:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000da77:	8d 44 24 15          	lea    eax,[esp+0x15]
c000da7b:	50                   	push   eax
c000da7c:	e8 37 ff ff ff       	call   c000d9b8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000da81:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000da86:	83 c4 4c             	add    esp,0x4c
c000da89:	c3                   	ret    

c000da8a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000da8a:	55                   	push   ebp
c000da8b:	57                   	push   edi
c000da8c:	56                   	push   esi
c000da8d:	53                   	push   ebx
c000da8e:	31 db                	xor    ebx,ebx
c000da90:	83 ec 70             	sub    esp,0x70
c000da93:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000da9a:	6a 30                	push   0x30
c000da9c:	6a 00                	push   0x0
c000da9e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000daa2:	56                   	push   esi
c000daa3:	e8 48 2a ff ff       	call   c00004f0 <memset>
c000daa8:	83 c4 10             	add    esp,0x10
c000daab:	83 ec 0c             	sub    esp,0xc
c000daae:	57                   	push   edi
c000daaf:	e8 cc 2a ff ff       	call   c0000580 <strlen>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	39 d8                	cmp    eax,ebx
c000dab9:	76 16                	jbe    c000dad1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dabb:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dabf:	83 ec 0c             	sub    esp,0xc
c000dac2:	50                   	push   eax
c000dac3:	e8 98 2e ff ff       	call   c0000960 <toupper>
c000dac8:	83 c4 10             	add    esp,0x10
c000dacb:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dace:	43                   	inc    ebx
c000dacf:	eb da                	jmp    c000daab <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dad1:	52                   	push   edx
c000dad2:	31 db                	xor    ebx,ebx
c000dad4:	6a 18                	push   0x18
c000dad6:	31 ff                	xor    edi,edi
c000dad8:	6a 3f                	push   0x3f
c000dada:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dade:	50                   	push   eax
c000dadf:	e8 0c 2a ff ff       	call   c00004f0 <memset>
c000dae4:	83 c4 10             	add    esp,0x10
c000dae7:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000daeb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000daef:	84 c0                	test   al,al
c000daf1:	0f 84 af 00 00 00    	je     c000dba6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000daf7:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dafb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dafe:	83 ec 0c             	sub    esp,0xc
c000db01:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db06:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db0a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000db0e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000db13:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db17:	56                   	push   esi
c000db18:	e8 63 2a ff ff       	call   c0000580 <strlen>
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	85 c0                	test   eax,eax
c000db22:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db26:	74 0b                	je     c000db33 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db28:	50                   	push   eax
c000db29:	6a 01                	push   0x1
c000db2b:	56                   	push   esi
c000db2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db30:	50                   	push   eax
c000db31:	eb 0a                	jmp    c000db3d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db33:	50                   	push   eax
c000db34:	6a 00                	push   0x0
c000db36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db3a:	50                   	push   eax
c000db3b:	6a 00                	push   0x0
c000db3d:	e8 44 fd ff ff       	call   c000d886 <CmGetMatch(char*, char*, bool, bool*)>
c000db42:	83 c4 10             	add    esp,0x10
c000db45:	83 f8 ff             	cmp    eax,0xffffffff
c000db48:	75 1a                	jne    c000db64 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000db4a:	83 ec 0c             	sub    esp,0xc
c000db4d:	68 9a 3a 02 c0       	push   0xc0023a9a
c000db52:	e8 9f 22 00 00       	call   c000fdf6 <KePanic(char const*)>
c000db57:	83 c4 10             	add    esp,0x10
c000db5a:	b8 02 00 00 00       	mov    eax,0x2
c000db5f:	e9 bb 00 00 00       	jmp    c000dc1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000db64:	83 ff 18             	cmp    edi,0x18
c000db67:	75 1a                	jne    c000db83 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000db69:	83 ec 0c             	sub    esp,0xc
c000db6c:	68 af 3a 02 c0       	push   0xc0023aaf
c000db71:	e8 80 22 00 00       	call   c000fdf6 <KePanic(char const*)>
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	b8 01 00 00 00       	mov    eax,0x1
c000db7e:	e9 9c 00 00 00       	jmp    c000dc1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000db83:	47                   	inc    edi
c000db84:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db89:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000db8d:	0f 45 dd             	cmovne ebx,ebp
c000db90:	83 ec 0c             	sub    esp,0xc
c000db93:	56                   	push   esi
c000db94:	e8 e7 29 ff ff       	call   c0000580 <strlen>
c000db99:	83 c4 10             	add    esp,0x10
c000db9c:	85 c0                	test   eax,eax
c000db9e:	74 06                	je     c000dba6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dba0:	43                   	inc    ebx
c000dba1:	e9 41 ff ff ff       	jmp    c000dae7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dba6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dbae:	31 db                	xor    ebx,ebx
c000dbb0:	31 ff                	xor    edi,edi
c000dbb2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dbba:	50                   	push   eax
c000dbbb:	6a 12                	push   0x12
c000dbbd:	68 ee 00 00 00       	push   0xee
c000dbc2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dbc9:	e8 22 29 ff ff       	call   c00004f0 <memset>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dbd5:	83 fb 17             	cmp    ebx,0x17
c000dbd8:	7e 26                	jle    c000dc00 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dbda:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbde:	50                   	push   eax
c000dbdf:	6a 08                	push   0x8
c000dbe1:	55                   	push   ebp
c000dbe2:	56                   	push   esi
c000dbe3:	e8 2f fd ff ff       	call   c000d917 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbf0:	74 26                	je     c000dc18 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dbf2:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dbf9:	4b                   	dec    ebx
c000dbfa:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dbfd:	47                   	inc    edi
c000dbfe:	eb 1c                	jmp    c000dc1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc00:	6a 06                	push   0x6
c000dc02:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc07:	50                   	push   eax
c000dc08:	55                   	push   ebp
c000dc09:	56                   	push   esi
c000dc0a:	e8 d8 fc ff ff       	call   c000d8e7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc0f:	83 c4 10             	add    esp,0x10
c000dc12:	84 c0                	test   al,al
c000dc14:	75 06                	jne    c000dc1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc16:	eb c2                	jmp    c000dbda <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dc18:	31 c0                	xor    eax,eax
c000dc1a:	eb 03                	jmp    c000dc1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc1c:	43                   	inc    ebx
c000dc1d:	eb b2                	jmp    c000dbd1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dc1f:	83 c4 6c             	add    esp,0x6c
c000dc22:	5b                   	pop    ebx
c000dc23:	5e                   	pop    esi
c000dc24:	5f                   	pop    edi
c000dc25:	5d                   	pop    ebp
c000dc26:	c3                   	ret    

c000dc27 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc27:	53                   	push   ebx
c000dc28:	83 ec 3c             	sub    esp,0x3c
c000dc2b:	6a 2b                	push   0x2b
c000dc2d:	6a 00                	push   0x0
c000dc2f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc33:	53                   	push   ebx
c000dc34:	e8 b7 28 ff ff       	call   c00004f0 <memset>
c000dc39:	58                   	pop    eax
c000dc3a:	5a                   	pop    edx
c000dc3b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc3f:	50                   	push   eax
c000dc40:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc44:	e8 41 fe ff ff       	call   c000da8a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc49:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dc4e:	83 c4 0c             	add    esp,0xc
c000dc51:	6a 15                	push   0x15
c000dc53:	6a 00                	push   0x0
c000dc55:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dc59:	50                   	push   eax
c000dc5a:	e8 91 28 ff ff       	call   c00004f0 <memset>
c000dc5f:	53                   	push   ebx
c000dc60:	6a 00                	push   0x0
c000dc62:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc66:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc6a:	e8 eb f9 ff ff       	call   c000d65a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dc6f:	83 c4 58             	add    esp,0x58
c000dc72:	5b                   	pop    ebx
c000dc73:	c3                   	ret    

c000dc74 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dc74:	56                   	push   esi
c000dc75:	53                   	push   ebx
c000dc76:	83 ec 48             	sub    esp,0x48
c000dc79:	6a 12                	push   0x12
c000dc7b:	68 ff 00 00 00       	push   0xff
c000dc80:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dc84:	56                   	push   esi
c000dc85:	e8 66 28 ff ff       	call   c00004f0 <memset>
c000dc8a:	5a                   	pop    edx
c000dc8b:	59                   	pop    ecx
c000dc8c:	56                   	push   esi
c000dc8d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dc91:	e8 f4 fd ff ff       	call   c000da8a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dc9d:	85 db                	test   ebx,ebx
c000dc9f:	74 42                	je     c000dce3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dca1:	50                   	push   eax
c000dca2:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dca6:	50                   	push   eax
c000dca7:	53                   	push   ebx
c000dca8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcac:	e8 ff f6 ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcb1:	83 c4 0c             	add    esp,0xc
c000dcb4:	6a 12                	push   0x12
c000dcb6:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dcba:	50                   	push   eax
c000dcbb:	56                   	push   esi
c000dcbc:	e8 bf 26 ff ff       	call   c0000380 <memcmp>
c000dcc1:	83 c4 10             	add    esp,0x10
c000dcc4:	85 c0                	test   eax,eax
c000dcc6:	74 1e                	je     c000dce6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dcc8:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dccd:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dcd2:	c1 e3 08             	shl    ebx,0x8
c000dcd5:	09 d8                	or     eax,ebx
c000dcd7:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dcdc:	c1 e3 10             	shl    ebx,0x10
c000dcdf:	09 c3                	or     ebx,eax
c000dce1:	eb ba                	jmp    c000dc9d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dce3:	83 cb ff             	or     ebx,0xffffffff
c000dce6:	83 c4 44             	add    esp,0x44
c000dce9:	89 d8                	mov    eax,ebx
c000dceb:	5b                   	pop    ebx
c000dcec:	5e                   	pop    esi
c000dced:	c3                   	ret    

c000dcee <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dcee:	57                   	push   edi
c000dcef:	56                   	push   esi
c000dcf0:	53                   	push   ebx
c000dcf1:	83 ec 34             	sub    esp,0x34
c000dcf4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dcf8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dcfc:	6a 2b                	push   0x2b
c000dcfe:	6a 00                	push   0x0
c000dd00:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd04:	53                   	push   ebx
c000dd05:	e8 e6 27 ff ff       	call   c00004f0 <memset>
c000dd0a:	58                   	pop    eax
c000dd0b:	5a                   	pop    edx
c000dd0c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd10:	50                   	push   eax
c000dd11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd15:	e8 70 fd ff ff       	call   c000da8a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd1a:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dd1e:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd22:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd26:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd2a:	53                   	push   ebx
c000dd2b:	6a 00                	push   0x0
c000dd2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd35:	e8 20 f9 ff ff       	call   c000d65a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd3a:	83 c4 50             	add    esp,0x50
c000dd3d:	5b                   	pop    ebx
c000dd3e:	5e                   	pop    esi
c000dd3f:	5f                   	pop    edi
c000dd40:	c3                   	ret    

c000dd41 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd41:	55                   	push   ebp
c000dd42:	57                   	push   edi
c000dd43:	56                   	push   esi
c000dd44:	53                   	push   ebx
c000dd45:	83 ec 40             	sub    esp,0x40
c000dd48:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dd4c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd50:	6a 2b                	push   0x2b
c000dd52:	6a 00                	push   0x0
c000dd54:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dd58:	56                   	push   esi
c000dd59:	e8 92 27 ff ff       	call   c00004f0 <memset>
c000dd5e:	5f                   	pop    edi
c000dd5f:	89 ef                	mov    edi,ebp
c000dd61:	58                   	pop    eax
c000dd62:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd66:	50                   	push   eax
c000dd67:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd6b:	e8 1a fd ff ff       	call   c000da8a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd70:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000dd75:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000dd7a:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000dd7f:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dd84:	83 c4 10             	add    esp,0x10
c000dd87:	85 ed                	test   ebp,ebp
c000dd89:	74 14                	je     c000dd9f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dd8b:	51                   	push   ecx
c000dd8c:	51                   	push   ecx
c000dd8d:	57                   	push   edi
c000dd8e:	53                   	push   ebx
c000dd8f:	e8 0e f7 ff ff       	call   c000d4a2 <CmGetNext(Reghive_Tag*, int)>
c000dd94:	83 c4 10             	add    esp,0x10
c000dd97:	85 c0                	test   eax,eax
c000dd99:	74 04                	je     c000dd9f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dd9b:	89 c7                	mov    edi,eax
c000dd9d:	eb e8                	jmp    c000dd87 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000dd9f:	56                   	push   esi
c000dda0:	6a 00                	push   0x0
c000dda2:	57                   	push   edi
c000dda3:	53                   	push   ebx
c000dda4:	e8 b1 f8 ff ff       	call   c000d65a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dda9:	83 c4 0c             	add    esp,0xc
c000ddac:	56                   	push   esi
c000ddad:	50                   	push   eax
c000ddae:	89 c7                	mov    edi,eax
c000ddb0:	53                   	push   ebx
c000ddb1:	e8 fa f5 ff ff       	call   c000d3b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddb6:	58                   	pop    eax
c000ddb7:	5a                   	pop    edx
c000ddb8:	6a 6c                	push   0x6c
c000ddba:	6a 00                	push   0x0
c000ddbc:	6a 00                	push   0x0
c000ddbe:	68 c0 3a 02 c0       	push   0xc0023ac0
c000ddc3:	57                   	push   edi
c000ddc4:	53                   	push   ebx
c000ddc5:	e8 24 ff ff ff       	call   c000dcee <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000ddca:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000ddce:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000ddd2:	c1 e8 10             	shr    eax,0x10
c000ddd5:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000ddd9:	83 c4 1c             	add    esp,0x1c
c000dddc:	56                   	push   esi
c000dddd:	57                   	push   edi
c000ddde:	53                   	push   ebx
c000dddf:	e8 f0 f6 ff ff       	call   c000d4d4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dde4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000dde9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000ddee:	c1 e0 08             	shl    eax,0x8
c000ddf1:	09 c2                	or     edx,eax
c000ddf3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000ddf8:	83 c4 4c             	add    esp,0x4c
c000ddfb:	5b                   	pop    ebx
c000ddfc:	5e                   	pop    esi
c000ddfd:	c1 e0 10             	shl    eax,0x10
c000de00:	09 d0                	or     eax,edx
c000de02:	5f                   	pop    edi
c000de03:	5d                   	pop    ebp
c000de04:	c3                   	ret    

c000de05 <zStrtok(char*, char const*)>:
c000de05:	55                   	push   ebp
c000de06:	57                   	push   edi
c000de07:	56                   	push   esi
c000de08:	53                   	push   ebx
c000de09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de11:	85 db                	test   ebx,ebx
c000de13:	74 2f                	je     c000de44 <zStrtok(char*, char const*)+0x3f>
c000de15:	85 c0                	test   eax,eax
c000de17:	75 09                	jne    c000de22 <zStrtok(char*, char const*)+0x1d>
c000de19:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000de1e:	85 c0                	test   eax,eax
c000de20:	74 50                	je     c000de72 <zStrtok(char*, char const*)+0x6d>
c000de22:	31 c9                	xor    ecx,ecx
c000de24:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de28:	74 03                	je     c000de2d <zStrtok(char*, char const*)+0x28>
c000de2a:	41                   	inc    ecx
c000de2b:	eb f7                	jmp    c000de24 <zStrtok(char*, char const*)+0x1f>
c000de2d:	31 d2                	xor    edx,edx
c000de2f:	39 ca                	cmp    edx,ecx
c000de31:	74 15                	je     c000de48 <zStrtok(char*, char const*)+0x43>
c000de33:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de37:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de3a:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de3d:	39 ee                	cmp    esi,ebp
c000de3f:	74 13                	je     c000de54 <zStrtok(char*, char const*)+0x4f>
c000de41:	42                   	inc    edx
c000de42:	eb eb                	jmp    c000de2f <zStrtok(char*, char const*)+0x2a>
c000de44:	31 c0                	xor    eax,eax
c000de46:	eb 2a                	jmp    c000de72 <zStrtok(char*, char const*)+0x6d>
c000de48:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000de52:	eb 1e                	jmp    c000de72 <zStrtok(char*, char const*)+0x6d>
c000de54:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000de57:	39 ce                	cmp    esi,ecx
c000de59:	75 0a                	jne    c000de65 <zStrtok(char*, char const*)+0x60>
c000de5b:	40                   	inc    eax
c000de5c:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000de61:	89 d8                	mov    eax,ebx
c000de63:	eb 0d                	jmp    c000de72 <zStrtok(char*, char const*)+0x6d>
c000de65:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000de68:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000de6c:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000de72:	5b                   	pop    ebx
c000de73:	5e                   	pop    esi
c000de74:	5f                   	pop    edi
c000de75:	5d                   	pop    ebp
c000de76:	c3                   	ret    

c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000de77:	57                   	push   edi
c000de78:	56                   	push   esi
c000de79:	53                   	push   ebx
c000de7a:	81 ec 08 01 00 00    	sub    esp,0x108
c000de80:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000de87:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000de8e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000de92:	53                   	push   ebx
c000de93:	e8 b8 27 ff ff       	call   c0000650 <strcpy>
c000de98:	59                   	pop    ecx
c000de99:	5e                   	pop    esi
c000de9a:	68 b5 4c 02 c0       	push   0xc0024cb5
c000de9f:	53                   	push   ebx
c000dea0:	bb 01 00 00 00       	mov    ebx,0x1
c000dea5:	e8 5b ff ff ff       	call   c000de05 <zStrtok(char*, char const*)>
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	85 c0                	test   eax,eax
c000deaf:	74 3b                	je     c000deec <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000deb1:	52                   	push   edx
c000deb2:	50                   	push   eax
c000deb3:	6a 01                	push   0x1
c000deb5:	57                   	push   edi
c000deb6:	e8 b9 fd ff ff       	call   c000dc74 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000debb:	59                   	pop    ecx
c000debc:	5e                   	pop    esi
c000debd:	89 c3                	mov    ebx,eax
c000debf:	68 b5 4c 02 c0       	push   0xc0024cb5
c000dec4:	6a 00                	push   0x0
c000dec6:	e8 3a ff ff ff       	call   c000de05 <zStrtok(char*, char const*)>
c000decb:	83 c4 10             	add    esp,0x10
c000dece:	85 c0                	test   eax,eax
c000ded0:	89 c6                	mov    esi,eax
c000ded2:	74 18                	je     c000deec <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000ded4:	52                   	push   edx
c000ded5:	52                   	push   edx
c000ded6:	53                   	push   ebx
c000ded7:	57                   	push   edi
c000ded8:	e8 86 f5 ff ff       	call   c000d463 <CmEnterDirectory(Reghive_Tag*, int)>
c000dedd:	83 c4 10             	add    esp,0x10
c000dee0:	83 f8 ff             	cmp    eax,0xffffffff
c000dee3:	89 c3                	mov    ebx,eax
c000dee5:	74 05                	je     c000deec <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dee7:	50                   	push   eax
c000dee8:	56                   	push   esi
c000dee9:	53                   	push   ebx
c000deea:	eb c9                	jmp    c000deb5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000deec:	81 c4 00 01 00 00    	add    esp,0x100
c000def2:	89 d8                	mov    eax,ebx
c000def4:	5b                   	pop    ebx
c000def5:	5e                   	pop    esi
c000def6:	5f                   	pop    edi
c000def7:	c3                   	ret    

c000def8 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000def8:	55                   	push   ebp
c000def9:	57                   	push   edi
c000defa:	56                   	push   esi
c000defb:	53                   	push   ebx
c000defc:	83 ec 5c             	sub    esp,0x5c
c000deff:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000df03:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000df07:	85 db                	test   ebx,ebx
c000df09:	0f 8e 84 00 00 00    	jle    c000df93 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000df0f:	57                   	push   edi
c000df10:	31 ed                	xor    ebp,ebp
c000df12:	6a 32                	push   0x32
c000df14:	6a 00                	push   0x0
c000df16:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000df1a:	57                   	push   edi
c000df1b:	e8 d0 25 ff ff       	call   c00004f0 <memset>
c000df20:	83 c4 0c             	add    esp,0xc
c000df23:	57                   	push   edi
c000df24:	53                   	push   ebx
c000df25:	56                   	push   esi
c000df26:	e8 31 fb ff ff       	call   c000da5c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000df2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000df36:	7d 13                	jge    c000df4b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	45                   	inc    ebp
c000df3c:	68 a8 51 02 c0       	push   0xc00251a8
c000df41:	e8 08 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	eb e7                	jmp    c000df32 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000df4b:	51                   	push   ecx
c000df4c:	57                   	push   edi
c000df4d:	53                   	push   ebx
c000df4e:	68 c6 3a 02 c0       	push   0xc0023ac6
c000df53:	e8 f6 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df58:	83 c4 10             	add    esp,0x10
c000df5b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000df60:	75 1e                	jne    c000df80 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000df62:	52                   	push   edx
c000df63:	52                   	push   edx
c000df64:	53                   	push   ebx
c000df65:	56                   	push   esi
c000df66:	e8 f8 f4 ff ff       	call   c000d463 <CmEnterDirectory(Reghive_Tag*, int)>
c000df6b:	83 c4 0c             	add    esp,0xc
c000df6e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000df72:	8d 51 04             	lea    edx,[ecx+0x4]
c000df75:	52                   	push   edx
c000df76:	50                   	push   eax
c000df77:	56                   	push   esi
c000df78:	e8 7b ff ff ff       	call   c000def8 <CmDisplayTree(Reghive_Tag*, int, int)>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	50                   	push   eax
c000df81:	50                   	push   eax
c000df82:	53                   	push   ebx
c000df83:	56                   	push   esi
c000df84:	e8 19 f5 ff ff       	call   c000d4a2 <CmGetNext(Reghive_Tag*, int)>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 c3                	mov    ebx,eax
c000df8e:	e9 74 ff ff ff       	jmp    c000df07 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000df93:	83 c4 5c             	add    esp,0x5c
c000df96:	5b                   	pop    ebx
c000df97:	5e                   	pop    esi
c000df98:	5f                   	pop    edi
c000df99:	5d                   	pop    ebp
c000df9a:	c3                   	ret    

c000df9b <CmSplitFinalSlashInPlace(char*)>:
c000df9b:	53                   	push   ebx
c000df9c:	83 ec 14             	sub    esp,0x14
c000df9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfa3:	53                   	push   ebx
c000dfa4:	e8 d7 25 ff ff       	call   c0000580 <strlen>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	48                   	dec    eax
c000dfad:	85 c0                	test   eax,eax
c000dfaf:	74 15                	je     c000dfc6 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000dfb1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000dfb5:	8d 14 03             	lea    edx,[ebx+eax*1]
c000dfb8:	75 09                	jne    c000dfc3 <CmSplitFinalSlashInPlace(char*)+0x28>
c000dfba:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000dfbd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000dfc1:	eb 05                	jmp    c000dfc8 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000dfc3:	48                   	dec    eax
c000dfc4:	eb e7                	jmp    c000dfad <CmSplitFinalSlashInPlace(char*)+0x12>
c000dfc6:	31 c0                	xor    eax,eax
c000dfc8:	83 c4 08             	add    esp,0x8
c000dfcb:	5b                   	pop    ebx
c000dfcc:	c3                   	ret    
c000dfcd:	66 90                	xchg   ax,ax
c000dfcf:	90                   	nop

c000dfd0 <Krnl::handlePowerButton()>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	e8 54 27 00 00       	call   c001072c <KeHandlePowerButton()>
c000dfd8:	90                   	nop
c000dfd9:	83 c4 0c             	add    esp,0xc
c000dfdc:	c3                   	ret    
c000dfdd:	8d 76 00             	lea    esi,[esi+0x0]

c000dfe0 <Krnl::handleSleepButton()>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	e8 5c 27 00 00       	call   c0010744 <KeHandleSleepButton()>
c000dfe8:	90                   	nop
c000dfe9:	83 c4 0c             	add    esp,0xc
c000dfec:	c3                   	ret    
c000dfed:	90                   	nop

c000dfee <Computer::close(int, int, void*)>:
c000dfee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dff3:	c3                   	ret    

c000dff4 <Computer::open(int, int, void*)>:
c000dff4:	56                   	push   esi
c000dff5:	53                   	push   ebx
c000dff6:	83 ec 04             	sub    esp,0x4
c000dff9:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e004:	0f 94 05 40 65 02 c0 	sete   BYTE PTR ds:0xc0026540
c000e00b:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e011:	74 10                	je     c000e023 <Computer::open(int, int, void*)+0x2f>
c000e013:	83 ec 0c             	sub    esp,0xc
c000e016:	68 d0 3a 02 c0       	push   0xc0023ad0
c000e01b:	e8 d6 1d 00 00       	call   c000fdf6 <KePanic(char const*)>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	68 88 3b 02 c0       	push   0xc0023b88
c000e02b:	e8 37 f1 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e030:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e037:	e8 74 1a 00 00       	call   c000fab0 <malloc>
c000e03c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e03f:	89 c6                	mov    esi,eax
c000e041:	e8 3a e7 ff ff       	call   c000c780 <ACPI::ACPI()>
c000e046:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e04c:	58                   	pop    eax
c000e04d:	5a                   	pop    edx
c000e04e:	56                   	push   esi
c000e04f:	53                   	push   ebx
c000e050:	e8 45 b9 ff ff       	call   c000999a <Device::addChild(Device*)>
c000e055:	c7 04 24 a0 3b 02 c0 	mov    DWORD PTR [esp],0xc0023ba0
c000e05c:	e8 06 f1 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e061:	e8 7f b4 00 00       	call   c00194e5 <HalEnableNMI()>
c000e066:	e8 af a6 00 00       	call   c001871a <HalDetectFeatures()>
c000e06b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e072:	e8 39 1a 00 00       	call   c000fab0 <malloc>
c000e077:	89 04 24             	mov    DWORD PTR [esp],eax
c000e07a:	89 c6                	mov    esi,eax
c000e07c:	e8 9f bf 00 00       	call   c001a020 <CPU::CPU()>
c000e081:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e087:	59                   	pop    ecx
c000e088:	58                   	pop    eax
c000e089:	56                   	push   esi
c000e08a:	53                   	push   ebx
c000e08b:	e8 0a b9 ff ff       	call   c000999a <Device::addChild(Device*)>
c000e090:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e094:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e09a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e09c:	51                   	push   ecx
c000e09d:	6a 00                	push   0x0
c000e09f:	6a 00                	push   0x0
c000e0a1:	50                   	push   eax
c000e0a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e0a5:	83 c4 14             	add    esp,0x14
c000e0a8:	68 fc 3a 02 c0       	push   0xc0023afc
c000e0ad:	e8 b5 f0 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e0b2:	e8 c4 bb 00 00       	call   c0019c7b <HalInitialiseCoprocessor()>
c000e0b7:	c7 04 24 ba 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bba
c000e0be:	e8 a4 f0 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e0c3:	c7 04 24 da e0 00 c0 	mov    DWORD PTR [esp],0xc000e0da
c000e0ca:	e8 1d 8b 00 00       	call   c0016bec <setupMultitasking(void (*)())>
c000e0cf:	83 c4 14             	add    esp,0x14
c000e0d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0d7:	5b                   	pop    ebx
c000e0d8:	5e                   	pop    esi
c000e0d9:	c3                   	ret    

c000e0da <KeFirstTask()>:
c000e0da:	53                   	push   ebx
c000e0db:	83 ec 14             	sub    esp,0x14
c000e0de:	fb                   	sti    
c000e0df:	68 d5 3b 02 c0       	push   0xc0023bd5
c000e0e4:	e8 7e f0 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e0e9:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e0f0:	e8 bb 19 00 00       	call   c000fab0 <malloc>
c000e0f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0fc:	89 c3                	mov    ebx,eax
c000e0fe:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e103:	50                   	push   eax
c000e104:	68 ee 3b 02 c0       	push   0xc0023bee
c000e109:	6a 01                	push   0x1
c000e10b:	53                   	push   ebx
c000e10c:	e8 53 87 00 00       	call   c0016864 <Process::Process(bool, char const*, Process*, char**)>
c000e111:	83 c4 20             	add    esp,0x20
c000e114:	68 ff 00 00 00       	push   0xff
c000e119:	6a 00                	push   0x0
c000e11b:	68 d9 ed 00 c0       	push   0xc000edd9
c000e120:	53                   	push   ebx
c000e121:	e8 7e 89 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c000e126:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e12c:	6a 7a                	push   0x7a
c000e12e:	6a 00                	push   0x0
c000e130:	68 00 74 01 c0       	push   0xc0017400
c000e135:	52                   	push   edx
c000e136:	e8 69 89 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c000e13b:	83 c4 14             	add    esp,0x14
c000e13e:	68 20 3b 02 c0       	push   0xc0023b20
c000e143:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e148:	e8 1a f0 ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e14d:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e154:	e8 f5 26 00 00       	call   c001084e <KeInitRand()>
c000e159:	e8 70 96 00 00       	call   c00177ce <Vm::initialise8086()>
c000e15e:	e8 73 9c ff ff       	call   c0007dd6 <Fs::initVFS()>
c000e163:	c7 04 24 94 38 02 c0 	mov    DWORD PTR [esp],0xc0023894
c000e16a:	e8 f8 ef ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e16f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e174:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e17a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e17c:	6a 00                	push   0x0
c000e17e:	6a 00                	push   0x0
c000e180:	6a 00                	push   0x0
c000e182:	50                   	push   eax
c000e183:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e186:	83 c4 14             	add    esp,0x14
c000e189:	68 20 3b 02 c0       	push   0xc0023b20
c000e18e:	e8 d4 ef ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e193:	e8 23 94 ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000e198:	e8 f5 05 00 00       	call   c000e792 <KeLoadSystemEnv()>
c000e19d:	e8 ba 25 00 00       	call   c001075c <KeSetupPowerManager()>
c000e1a2:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c000e1a9:	e8 b9 ef ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e1ae:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e1b3:	59                   	pop    ecx
c000e1b4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e1ba:	53                   	push   ebx
c000e1bb:	e8 f6 b8 ff ff       	call   c0009ab6 <Device::loadDriversForAll()>
c000e1c0:	c7 04 24 fb 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bfb
c000e1c7:	e8 9b ef ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c000e1cc:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e1d2:	58                   	pop    eax
c000e1d3:	5a                   	pop    edx
c000e1d4:	6a 01                	push   0x1
c000e1d6:	68 0c 3c 02 c0       	push   0xc0023c0c
c000e1db:	e8 dd 7f 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c000e1e0:	59                   	pop    ecx
c000e1e1:	5a                   	pop    edx
c000e1e2:	53                   	push   ebx
c000e1e3:	50                   	push   eax
c000e1e4:	e8 35 82 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c000e1e9:	83 c4 10             	add    esp,0x10
c000e1ec:	83 ec 0c             	sub    esp,0xc
c000e1ef:	6a 02                	push   0x2
c000e1f1:	e8 ee 8b 00 00       	call   c0016de4 <blockTask(TaskState)>
c000e1f6:	83 c4 10             	add    esp,0x10
c000e1f9:	eb f1                	jmp    c000e1ec <KeFirstTask()+0x112>
c000e1fb:	90                   	nop

c000e1fc <Computer::Computer()>:
c000e1fc:	83 ec 0c             	sub    esp,0xc
c000e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e203:	83 ec 08             	sub    esp,0x8
c000e206:	68 28 3c 02 c0       	push   0xc0023c28
c000e20b:	50                   	push   eax
c000e20c:	e8 eb b8 ff ff       	call   c0009afc <Device::Device(char const*)>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	ba 3c 3c 02 c0       	mov    edx,0xc0023c3c
c000e219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e21d:	89 10                	mov    DWORD PTR [eax],edx
c000e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e223:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e231:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e23b:	90                   	nop
c000e23c:	83 c4 0c             	add    esp,0xc
c000e23f:	c3                   	ret    

c000e240 <KePrepareShutdown()>:
c000e240:	83 ec 0c             	sub    esp,0xc
c000e243:	e8 8d ee ff ff       	call   c000d0d5 <KeExecuteAtexit()>
c000e248:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e24d:	83 ec 0c             	sub    esp,0xc
c000e250:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e256:	50                   	push   eax
c000e257:	e8 a6 b9 ff ff       	call   c0009c02 <Device::closeAll()>
c000e25c:	83 c4 1c             	add    esp,0x1c
c000e25f:	c3                   	ret    

c000e260 <KeShutdown()>:
c000e260:	83 ec 0c             	sub    esp,0xc
c000e263:	e8 d8 ff ff ff       	call   c000e240 <KePrepareShutdown()>
c000e268:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e26d:	85 c0                	test   eax,eax
c000e26f:	74 02                	je     c000e273 <KeShutdown()+0x13>
c000e271:	ff d0                	call   eax
c000e273:	83 ec 0c             	sub    esp,0xc
c000e276:	68 64 3b 02 c0       	push   0xc0023b64
c000e27b:	e8 76 1b 00 00       	call   c000fdf6 <KePanic(char const*)>
c000e280:	83 c4 1c             	add    esp,0x1c
c000e283:	c3                   	ret    

c000e284 <KeSleep()>:
c000e284:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e289:	85 c0                	test   eax,eax
c000e28b:	74 02                	je     c000e28f <KeSleep()+0xb>
c000e28d:	ff e0                	jmp    eax
c000e28f:	c3                   	ret    

c000e290 <KeRestart()>:
c000e290:	83 ec 0c             	sub    esp,0xc
c000e293:	e8 a8 ff ff ff       	call   c000e240 <KePrepareShutdown()>
c000e298:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e29d:	85 c0                	test   eax,eax
c000e29f:	74 02                	je     c000e2a3 <KeRestart()+0x13>
c000e2a1:	ff d0                	call   eax
c000e2a3:	e4 64                	in     al,0x64
c000e2a5:	a8 02                	test   al,0x2
c000e2a7:	75 fa                	jne    c000e2a3 <KeRestart()+0x13>
c000e2a9:	b0 fe                	mov    al,0xfe
c000e2ab:	e6 64                	out    0x64,al
c000e2ad:	83 c4 0c             	add    esp,0xc
c000e2b0:	c3                   	ret    

c000e2b1 <KeCalculateCRC32(unsigned char*, int)>:
c000e2b1:	53                   	push   ebx
c000e2b2:	83 c8 ff             	or     eax,0xffffffff
c000e2b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e2b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2bd:	01 cb                	add    ebx,ecx
c000e2bf:	39 d9                	cmp    ecx,ebx
c000e2c1:	74 15                	je     c000e2d8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e2c3:	41                   	inc    ecx
c000e2c4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e2c7:	31 c2                	xor    edx,eax
c000e2c9:	c1 e8 08             	shr    eax,0x8
c000e2cc:	0f b6 d2             	movzx  edx,dl
c000e2cf:	33 04 95 40 5f 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffda0c0]
c000e2d6:	eb e7                	jmp    c000e2bf <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e2d8:	5b                   	pop    ebx
c000e2d9:	f7 d0                	not    eax
c000e2db:	c3                   	ret    

c000e2dc <EnvVarContainer::getEnv(char const*)>:
c000e2dc:	57                   	push   edi
c000e2dd:	56                   	push   esi
c000e2de:	53                   	push   ebx
c000e2df:	31 db                	xor    ebx,ebx
c000e2e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2e5:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e2e7:	7e 2b                	jle    c000e314 <EnvVarContainer::getEnv(char const*)+0x38>
c000e2e9:	50                   	push   eax
c000e2ea:	50                   	push   eax
c000e2eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2ee:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e2f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e2f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fc:	e8 7f 24 ff ff       	call   c0000780 <strcmp>
c000e301:	83 c4 10             	add    esp,0x10
c000e304:	85 c0                	test   eax,eax
c000e306:	75 09                	jne    c000e311 <EnvVarContainer::getEnv(char const*)+0x35>
c000e308:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e30b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e30f:	eb 05                	jmp    c000e316 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e311:	43                   	inc    ebx
c000e312:	eb d1                	jmp    c000e2e5 <EnvVarContainer::getEnv(char const*)+0x9>
c000e314:	31 c0                	xor    eax,eax
c000e316:	5b                   	pop    ebx
c000e317:	5e                   	pop    esi
c000e318:	5f                   	pop    edi
c000e319:	c3                   	ret    

c000e31a <EnvVarContainer::setEnv(char const*, char const*)>:
c000e31a:	55                   	push   ebp
c000e31b:	57                   	push   edi
c000e31c:	56                   	push   esi
c000e31d:	53                   	push   ebx
c000e31e:	83 ec 28             	sub    esp,0x28
c000e321:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e325:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e329:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e32d:	56                   	push   esi
c000e32e:	e8 4d 22 ff ff       	call   c0000580 <strlen>
c000e333:	40                   	inc    eax
c000e334:	89 04 24             	mov    DWORD PTR [esp],eax
c000e337:	e8 74 17 00 00       	call   c000fab0 <malloc>
c000e33c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e33f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e343:	e8 38 22 ff ff       	call   c0000580 <strlen>
c000e348:	40                   	inc    eax
c000e349:	89 04 24             	mov    DWORD PTR [esp],eax
c000e34c:	e8 5f 17 00 00       	call   c000fab0 <malloc>
c000e351:	89 34 24             	mov    DWORD PTR [esp],esi
c000e354:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e358:	e8 23 22 ff ff       	call   c0000580 <strlen>
c000e35d:	83 c4 0c             	add    esp,0xc
c000e360:	40                   	inc    eax
c000e361:	50                   	push   eax
c000e362:	6a 00                	push   0x0
c000e364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e368:	e8 83 21 ff ff       	call   c00004f0 <memset>
c000e36d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e370:	e8 0b 22 ff ff       	call   c0000580 <strlen>
c000e375:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e379:	8d 48 01             	lea    ecx,[eax+0x1]
c000e37c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e37e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e381:	89 de                	mov    esi,ebx
c000e383:	e8 f8 21 ff ff       	call   c0000580 <strlen>
c000e388:	83 c4 0c             	add    esp,0xc
c000e38b:	40                   	inc    eax
c000e38c:	50                   	push   eax
c000e38d:	6a 00                	push   0x0
c000e38f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e393:	e8 58 21 ff ff       	call   c00004f0 <memset>
c000e398:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e39b:	e8 e0 21 ff ff       	call   c0000580 <strlen>
c000e3a0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3a4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3ac:	40                   	inc    eax
c000e3ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3b0:	c1 e0 03             	shl    eax,0x3
c000e3b3:	5a                   	pop    edx
c000e3b4:	59                   	pop    ecx
c000e3b5:	50                   	push   eax
c000e3b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e3b9:	e8 de 16 00 00       	call   c000fa9c <realloc>
c000e3be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e3c1:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e3c5:	b9 08 00 00 00       	mov    ecx,0x8
c000e3ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e3cd:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e3d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d3:	83 c4 2c             	add    esp,0x2c
c000e3d6:	5b                   	pop    ebx
c000e3d7:	5e                   	pop    esi
c000e3d8:	5f                   	pop    edi
c000e3d9:	5d                   	pop    ebp
c000e3da:	c3                   	ret    
c000e3db:	90                   	nop

c000e3dc <EnvVarContainer::deleteEnv(char const*)>:
c000e3dc:	c3                   	ret    
c000e3dd:	90                   	nop

c000e3de <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e3de:	55                   	push   ebp
c000e3df:	57                   	push   edi
c000e3e0:	56                   	push   esi
c000e3e1:	53                   	push   ebx
c000e3e2:	81 ec 38 01 00 00    	sub    esp,0x138
c000e3e8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e3ef:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e3f6:	68 14 01 00 00       	push   0x114
c000e3fb:	e8 b0 16 00 00       	call   c000fab0 <malloc>
c000e400:	83 c4 0c             	add    esp,0xc
c000e403:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e406:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e40d:	89 c3                	mov    ebx,eax
c000e40f:	50                   	push   eax
c000e410:	e8 17 9d ff ff       	call   c000812c <File::File(char const*, Process*)>
c000e415:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e418:	e8 f1 9f ff ff       	call   c000840e <File::exists()>
c000e41d:	83 c4 10             	add    esp,0x10
c000e420:	84 c0                	test   al,al
c000e422:	75 31                	jne    c000e455 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e424:	50                   	push   eax
c000e425:	50                   	push   eax
c000e426:	6a 12                	push   0x12
c000e428:	53                   	push   ebx
c000e429:	e8 1c 9d ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e42e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e430:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e433:	89 34 24             	mov    DWORD PTR [esp],esi
c000e436:	e8 45 21 ff ff       	call   c0000580 <strlen>
c000e43b:	5a                   	pop    edx
c000e43c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e440:	52                   	push   edx
c000e441:	31 d2                	xor    edx,edx
c000e443:	56                   	push   esi
c000e444:	52                   	push   edx
c000e445:	50                   	push   eax
c000e446:	53                   	push   ebx
c000e447:	ff d7                	call   edi
c000e449:	83 c4 14             	add    esp,0x14
c000e44c:	53                   	push   ebx
c000e44d:	e8 56 9d ff ff       	call   c00081a8 <File::close()>
c000e452:	83 c4 10             	add    esp,0x10
c000e455:	56                   	push   esi
c000e456:	31 f6                	xor    esi,esi
c000e458:	68 00 01 00 00       	push   0x100
c000e45d:	6a 00                	push   0x0
c000e45f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e463:	50                   	push   eax
c000e464:	e8 87 20 ff ff       	call   c00004f0 <memset>
c000e469:	5f                   	pop    edi
c000e46a:	58                   	pop    eax
c000e46b:	6a 01                	push   0x1
c000e46d:	53                   	push   ebx
c000e46e:	e8 d7 9c ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e473:	83 c4 10             	add    esp,0x10
c000e476:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e47e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e486:	83 ec 0c             	sub    esp,0xc
c000e489:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e48d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e48f:	52                   	push   edx
c000e490:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e494:	51                   	push   ecx
c000e495:	6a 00                	push   0x0
c000e497:	6a 01                	push   0x1
c000e499:	53                   	push   ebx
c000e49a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e49d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e4a2:	83 c4 20             	add    esp,0x20
c000e4a5:	85 c0                	test   eax,eax
c000e4a7:	89 c1                	mov    ecx,eax
c000e4a9:	0f 84 36 01 00 00    	je     c000e5e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e4af:	83 f8 0d             	cmp    eax,0xd
c000e4b2:	0f 84 22 01 00 00    	je     c000e5da <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e4b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4bd:	0f 84 f0 00 00 00    	je     c000e5b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e4c3:	83 f8 0a             	cmp    eax,0xa
c000e4c6:	74 13                	je     c000e4db <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4c8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e4cd:	74 0c                	je     c000e4db <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4cf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e4d5:	0f 8e f6 00 00 00    	jle    c000e5d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e4db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	8d 78 01             	lea    edi,[eax+0x1]
c000e4e5:	57                   	push   edi
c000e4e6:	e8 c5 15 00 00       	call   c000fab0 <malloc>
c000e4eb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e4ef:	8d 56 04             	lea    edx,[esi+0x4]
c000e4f2:	89 14 24             	mov    DWORD PTR [esp],edx
c000e4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4fd:	e8 ae 15 00 00       	call   c000fab0 <malloc>
c000e502:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e506:	83 c4 0c             	add    esp,0xc
c000e509:	57                   	push   edi
c000e50a:	6a 00                	push   0x0
c000e50c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e510:	e8 db 1f ff ff       	call   c00004f0 <memset>
c000e515:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e519:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e51d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e521:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e523:	83 c4 0c             	add    esp,0xc
c000e526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e52a:	52                   	push   edx
c000e52b:	6a 00                	push   0x0
c000e52d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e531:	e8 ba 1f ff ff       	call   c00004f0 <memset>
c000e536:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e53a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e53e:	89 34 24             	mov    DWORD PTR [esp],esi
c000e541:	e8 3a 20 ff ff       	call   c0000580 <strlen>
c000e546:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e54a:	89 c1                	mov    ecx,eax
c000e54c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e54e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e557:	40                   	inc    eax
c000e558:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e55b:	85 d2                	test   edx,edx
c000e55d:	75 0c                	jne    c000e56b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e55f:	83 ec 0c             	sub    esp,0xc
c000e562:	6a 08                	push   0x8
c000e564:	e8 47 15 00 00       	call   c000fab0 <malloc>
c000e569:	eb 0c                	jmp    c000e577 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e56b:	51                   	push   ecx
c000e56c:	51                   	push   ecx
c000e56d:	c1 e0 03             	shl    eax,0x3
c000e570:	50                   	push   eax
c000e571:	52                   	push   edx
c000e572:	e8 25 15 00 00       	call   c000fa9c <realloc>
c000e577:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e57a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e583:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e587:	b9 08 00 00 00       	mov    ecx,0x8
c000e58c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e590:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e592:	50                   	push   eax
c000e593:	31 f6                	xor    esi,esi
c000e595:	68 00 01 00 00       	push   0x100
c000e59a:	6a 00                	push   0x0
c000e59c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e5a0:	50                   	push   eax
c000e5a1:	e8 4a 1f ff ff       	call   c00004f0 <memset>
c000e5a6:	83 c4 10             	add    esp,0x10
c000e5a9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5b1:	eb 27                	jmp    c000e5da <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5b3:	83 f8 3d             	cmp    eax,0x3d
c000e5b6:	74 1e                	je     c000e5d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e5b8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5be:	7f 07                	jg     c000e5c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e5c0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e5c4:	46                   	inc    esi
c000e5c5:	eb 13                	jmp    c000e5da <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5c7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e5cf:	eb 09                	jmp    c000e5da <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5d1:	83 f8 3d             	cmp    eax,0x3d
c000e5d4:	75 ea                	jne    c000e5c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e5d6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e5da:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5df:	0f 85 99 fe ff ff    	jne    c000e47e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e5e5:	83 ec 0c             	sub    esp,0xc
c000e5e8:	53                   	push   ebx
c000e5e9:	e8 ba 9b ff ff       	call   c00081a8 <File::close()>
c000e5ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e5f6:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e5fc:	5b                   	pop    ebx
c000e5fd:	5e                   	pop    esi
c000e5fe:	5f                   	pop    edi
c000e5ff:	5d                   	pop    ebp
c000e600:	c3                   	ret    
c000e601:	90                   	nop

c000e602 <EnvVarContainer::__loadSystem()>:
c000e602:	83 ec 10             	sub    esp,0x10
c000e605:	68 40 63 02 c0       	push   0xc0026340
c000e60a:	68 60 3c 02 c0       	push   0xc0023c60
c000e60f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e613:	e8 c6 fd ff ff       	call   c000e3de <EnvVarContainer::loadFrom(char const*, char const*)>
c000e618:	83 c4 1c             	add    esp,0x1c
c000e61b:	c3                   	ret    

c000e61c <EnvVarContainer::__loadUser()>:
c000e61c:	c3                   	ret    
c000e61d:	90                   	nop

c000e61e <EnvVarContainer::EnvVarContainer(Process*)>:
c000e61e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e62c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e630:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e637:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e63e:	90                   	nop
c000e63f:	c3                   	ret    

c000e640 <EnvVarContainer::~EnvVarContainer()>:
c000e640:	83 ec 0c             	sub    esp,0xc
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e64a:	85 c0                	test   eax,eax
c000e64c:	74 1d                	je     c000e66b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e652:	8b 00                	mov    eax,DWORD PTR [eax]
c000e654:	85 c0                	test   eax,eax
c000e656:	74 13                	je     c000e66b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	50                   	push   eax
c000e663:	e8 58 14 00 00       	call   c000fac0 <free>
c000e668:	83 c4 10             	add    esp,0x10
c000e66b:	90                   	nop
c000e66c:	83 c4 0c             	add    esp,0xc
c000e66f:	c3                   	ret    

c000e670 <KeGetEnv(Process*, char const*)>:
c000e670:	53                   	push   ebx
c000e671:	83 ec 08             	sub    esp,0x8
c000e674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e678:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e67e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e682:	74 04                	je     c000e688 <KeGetEnv(Process*, char const*)+0x18>
c000e684:	85 c0                	test   eax,eax
c000e686:	75 0b                	jne    c000e693 <KeGetEnv(Process*, char const*)+0x23>
c000e688:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e68d:	85 c0                	test   eax,eax
c000e68f:	75 19                	jne    c000e6aa <KeGetEnv(Process*, char const*)+0x3a>
c000e691:	eb 27                	jmp    c000e6ba <KeGetEnv(Process*, char const*)+0x4a>
c000e693:	52                   	push   edx
c000e694:	52                   	push   edx
c000e695:	53                   	push   ebx
c000e696:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e69c:	e8 3b fc ff ff       	call   c000e2dc <EnvVarContainer::getEnv(char const*)>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	85 c0                	test   eax,eax
c000e6a6:	75 28                	jne    c000e6d0 <KeGetEnv(Process*, char const*)+0x60>
c000e6a8:	eb de                	jmp    c000e688 <KeGetEnv(Process*, char const*)+0x18>
c000e6aa:	52                   	push   edx
c000e6ab:	52                   	push   edx
c000e6ac:	53                   	push   ebx
c000e6ad:	50                   	push   eax
c000e6ae:	e8 29 fc ff ff       	call   c000e2dc <EnvVarContainer::getEnv(char const*)>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	85 c0                	test   eax,eax
c000e6b8:	75 16                	jne    c000e6d0 <KeGetEnv(Process*, char const*)+0x60>
c000e6ba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e6be:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e6c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6c7:	83 c4 08             	add    esp,0x8
c000e6ca:	5b                   	pop    ebx
c000e6cb:	e9 0c fc ff ff       	jmp    c000e2dc <EnvVarContainer::getEnv(char const*)>
c000e6d0:	83 c4 08             	add    esp,0x8
c000e6d3:	5b                   	pop    ebx
c000e6d4:	c3                   	ret    

c000e6d5 <KeSetEnvSystem(char const*, char const*)>:
c000e6d5:	83 ec 10             	sub    esp,0x10
c000e6d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e0:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e6e6:	e8 2f fc ff ff       	call   c000e31a <EnvVarContainer::setEnv(char const*, char const*)>
c000e6eb:	83 c4 1c             	add    esp,0x1c
c000e6ee:	c3                   	ret    

c000e6ef <KeSetEnvUser(char const*, char const*)>:
c000e6ef:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e6f4:	85 c0                	test   eax,eax
c000e6f6:	74 15                	je     c000e70d <KeSetEnvUser(char const*, char const*)+0x1e>
c000e6f8:	83 ec 10             	sub    esp,0x10
c000e6fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e703:	50                   	push   eax
c000e704:	e8 11 fc ff ff       	call   c000e31a <EnvVarContainer::setEnv(char const*, char const*)>
c000e709:	83 c4 1c             	add    esp,0x1c
c000e70c:	c3                   	ret    
c000e70d:	c3                   	ret    

c000e70e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e70e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e712:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e718:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e71c:	e9 f9 fb ff ff       	jmp    c000e31a <EnvVarContainer::setEnv(char const*, char const*)>

c000e721 <KeDeleteEnvSystem(char const*)>:
c000e721:	c3                   	ret    

c000e722 <KeDeleteEnvUser(char const*)>:
c000e722:	c3                   	ret    

c000e723 <KeDeleteEnvProcess(Process*, char const*)>:
c000e723:	c3                   	ret    

c000e724 <KeNewProcessEnv(Process*)>:
c000e724:	83 ec 28             	sub    esp,0x28
c000e727:	6a 0c                	push   0xc
c000e729:	e8 82 13 00 00       	call   c000fab0 <malloc>
c000e72e:	5a                   	pop    edx
c000e72f:	59                   	pop    ecx
c000e730:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e734:	50                   	push   eax
c000e735:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e739:	e8 e0 fe ff ff       	call   c000e61e <EnvVarContainer::EnvVarContainer(Process*)>
c000e73e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e742:	83 c4 2c             	add    esp,0x2c
c000e745:	c3                   	ret    

c000e746 <KeCopyProcessEnv(Process*, Process*)>:
c000e746:	57                   	push   edi
c000e747:	56                   	push   esi
c000e748:	53                   	push   ebx
c000e749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74d:	83 ec 0c             	sub    esp,0xc
c000e750:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e756:	6a 0c                	push   0xc
c000e758:	e8 53 13 00 00       	call   c000fab0 <malloc>
c000e75d:	89 c3                	mov    ebx,eax
c000e75f:	58                   	pop    eax
c000e760:	5a                   	pop    edx
c000e761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e765:	53                   	push   ebx
c000e766:	e8 b3 fe ff ff       	call   c000e61e <EnvVarContainer::EnvVarContainer(Process*)>
c000e76b:	8b 07                	mov    eax,DWORD PTR [edi]
c000e76d:	89 03                	mov    DWORD PTR [ebx],eax
c000e76f:	c1 e0 03             	shl    eax,0x3
c000e772:	89 04 24             	mov    DWORD PTR [esp],eax
c000e775:	e8 36 13 00 00       	call   c000fab0 <malloc>
c000e77a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e77d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e77f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e782:	89 c7                	mov    edi,eax
c000e784:	c1 e1 03             	shl    ecx,0x3
c000e787:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	89 d8                	mov    eax,ebx
c000e78e:	5b                   	pop    ebx
c000e78f:	5e                   	pop    esi
c000e790:	5f                   	pop    edi
c000e791:	c3                   	ret    

c000e792 <KeLoadSystemEnv()>:
c000e792:	53                   	push   ebx
c000e793:	83 ec 14             	sub    esp,0x14
c000e796:	6a 0c                	push   0xc
c000e798:	e8 13 13 00 00       	call   c000fab0 <malloc>
c000e79d:	89 c3                	mov    ebx,eax
c000e79f:	58                   	pop    eax
c000e7a0:	5a                   	pop    edx
c000e7a1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e7a7:	53                   	push   ebx
c000e7a8:	e8 71 fe ff ff       	call   c000e61e <EnvVarContainer::EnvVarContainer(Process*)>
c000e7ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7b0:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e7b6:	e8 47 fe ff ff       	call   c000e602 <EnvVarContainer::__loadSystem()>
c000e7bb:	83 c4 18             	add    esp,0x18
c000e7be:	5b                   	pop    ebx
c000e7bf:	c3                   	ret    

c000e7c0 <KeLoadUserEnv()>:
c000e7c0:	53                   	push   ebx
c000e7c1:	83 ec 14             	sub    esp,0x14
c000e7c4:	6a 0c                	push   0xc
c000e7c6:	e8 e5 12 00 00       	call   c000fab0 <malloc>
c000e7cb:	89 c3                	mov    ebx,eax
c000e7cd:	58                   	pop    eax
c000e7ce:	5a                   	pop    edx
c000e7cf:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e7d5:	53                   	push   ebx
c000e7d6:	e8 43 fe ff ff       	call   c000e61e <EnvVarContainer::EnvVarContainer(Process*)>
c000e7db:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e7e1:	83 c4 18             	add    esp,0x18
c000e7e4:	5b                   	pop    ebx
c000e7e5:	c3                   	ret    

c000e7e6 <KeFlushEnv()>:
c000e7e6:	c3                   	ret    

c000e7e7 <KeGetProcessTotalEnvCount(Process*)>:
c000e7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7eb:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e7f1:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e7f7:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7fe:	03 01                	add    eax,DWORD PTR [ecx]
c000e800:	85 d2                	test   edx,edx
c000e802:	74 02                	je     c000e806 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e804:	03 02                	add    eax,DWORD PTR [edx]
c000e806:	c3                   	ret    

c000e807 <KeGetProcessEnvPair(Process*, int)>:
c000e807:	57                   	push   edi
c000e808:	56                   	push   esi
c000e809:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e80f:	53                   	push   ebx
c000e810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e814:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e818:	85 f6                	test   esi,esi
c000e81a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e81e:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e824:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e826:	75 16                	jne    c000e83e <KeGetProcessEnvPair(Process*, int)+0x37>
c000e828:	39 c2                	cmp    edx,eax
c000e82a:	7c 16                	jl     c000e842 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e82c:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e832:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e834:	01 c6                	add    esi,eax
c000e836:	39 d6                	cmp    esi,edx
c000e838:	7e 3c                	jle    c000e876 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e83a:	29 c2                	sub    edx,eax
c000e83c:	eb 04                	jmp    c000e842 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e83e:	39 c2                	cmp    edx,eax
c000e840:	7d 05                	jge    c000e847 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e842:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e845:	eb 20                	jmp    c000e867 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e847:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e849:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e84c:	39 d1                	cmp    ecx,edx
c000e84e:	7e 04                	jle    c000e854 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e850:	29 c2                	sub    edx,eax
c000e852:	eb 10                	jmp    c000e864 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e854:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e85a:	03 0e                	add    ecx,DWORD PTR [esi]
c000e85c:	39 d1                	cmp    ecx,edx
c000e85e:	7e 16                	jle    c000e876 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e860:	29 c2                	sub    edx,eax
c000e862:	29 fa                	sub    edx,edi
c000e864:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e867:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e86a:	8b 02                	mov    eax,DWORD PTR [edx]
c000e86c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e86f:	89 03                	mov    DWORD PTR [ebx],eax
c000e871:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e874:	eb 1d                	jmp    c000e893 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	68 82 3c 02 c0       	push   0xc0023c82
c000e87e:	e8 73 15 00 00       	call   c000fdf6 <KePanic(char const*)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e88c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e893:	89 d8                	mov    eax,ebx
c000e895:	5b                   	pop    ebx
c000e896:	5e                   	pop    esi
c000e897:	5f                   	pop    edi
c000e898:	c2 04 00             	ret    0x4
c000e89b:	90                   	nop

c000e89c <KeSetupInterrupts()>:
c000e89c:	83 ec 10             	sub    esp,0x10
c000e89f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8a7:	90                   	nop
c000e8a8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8b0:	7f 5a                	jg     c000e90c <KeSetupInterrupts()+0x70>
c000e8b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8ba:	66 90                	xchg   ax,ax
c000e8bc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8c1:	7f 41                	jg     c000e904 <KeSetupInterrupts()+0x68>
c000e8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d2:	01 d0                	add    eax,edx
c000e8d4:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e8df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8ee:	01 d0                	add    eax,edx
c000e8f0:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e8fb:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e900:	eb ba                	jmp    c000e8bc <KeSetupInterrupts()+0x20>
c000e902:	66 90                	xchg   ax,ax
c000e904:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e909:	eb 9d                	jmp    c000e8a8 <KeSetupInterrupts()+0xc>
c000e90b:	90                   	nop
c000e90c:	90                   	nop
c000e90d:	83 c4 10             	add    esp,0x10
c000e910:	c3                   	ret    
c000e911:	8d 76 00             	lea    esi,[esi+0x0]

c000e914 <int_handler>:
c000e914:	83 ec 2c             	sub    esp,0x2c
c000e917:	90                   	nop
c000e918:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000e91d:	0f b6 c0             	movzx  eax,al
c000e920:	85 c0                	test   eax,eax
c000e922:	74 04                	je     c000e928 <int_handler+0x14>
c000e924:	fa                   	cli    
c000e925:	f4                   	hlt    
c000e926:	eb f0                	jmp    c000e918 <int_handler+0x4>
c000e928:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e92c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e92f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e933:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e938:	7e 1a                	jle    c000e954 <int_handler+0x40>
c000e93a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e93f:	7f 13                	jg     c000e954 <int_handler+0x40>
c000e941:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e945:	83 e8 20             	sub    eax,0x20
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	50                   	push   eax
c000e94c:	e8 a1 b6 00 00       	call   c0019ff2 <HalEndOfInterrupt(int)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e958:	c1 e0 04             	shl    eax,0x4
c000e95b:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e968:	c1 e0 04             	shl    eax,0x4
c000e96b:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e970:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e974:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e97c:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e981:	0f 8f ad 00 00 00    	jg     c000ea34 <int_handler+0x120>
c000e987:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e98b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e992:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e996:	01 d0                	add    eax,edx
c000e998:	8b 00                	mov    eax,DWORD PTR [eax]
c000e99a:	85 c0                	test   eax,eax
c000e99c:	0f 84 86 00 00 00    	je     c000ea28 <int_handler+0x114>
c000e9a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e9a9:	83 f8 60             	cmp    eax,0x60
c000e9ac:	75 46                	jne    c000e9f4 <int_handler+0xe0>
c000e9ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9b2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9bd:	01 d0                	add    eax,edx
c000e9bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9c5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9d0:	01 ca                	add    edx,ecx
c000e9d2:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9d4:	83 ec 08             	sub    esp,0x8
c000e9d7:	52                   	push   edx
c000e9d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e9dc:	ff d0                	call   eax
c000e9de:	83 c4 10             	add    esp,0x10
c000e9e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e9e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9f1:	eb 4d                	jmp    c000ea40 <int_handler+0x12c>
c000e9f3:	90                   	nop
c000e9f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea03:	01 d0                	add    eax,edx
c000ea05:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea0b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea16:	01 ca                	add    edx,ecx
c000ea18:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea1a:	83 ec 08             	sub    esp,0x8
c000ea1d:	52                   	push   edx
c000ea1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea22:	ff d0                	call   eax
c000ea24:	83 c4 10             	add    esp,0x10
c000ea27:	90                   	nop
c000ea28:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ea2d:	e9 4a ff ff ff       	jmp    c000e97c <int_handler+0x68>
c000ea32:	66 90                	xchg   ax,ax
c000ea34:	b8 00 00 00 00       	mov    eax,0x0
c000ea39:	ba 00 00 00 00       	mov    edx,0x0
c000ea3e:	66 90                	xchg   ax,ax
c000ea40:	83 c4 2c             	add    esp,0x2c
c000ea43:	c3                   	ret    

c000ea44 <KeDisplayProgramFault(char const*)>:
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	83 ec 0c             	sub    esp,0xc
c000ea4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea4e:	e8 fb 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ea53:	83 c4 10             	add    esp,0x10
c000ea56:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea60:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea66:	85 c0                	test   eax,eax
c000ea68:	74 22                	je     c000ea8c <KeDisplayProgramFault(char const*)+0x48>
c000ea6a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea74:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea7a:	6a 04                	push   0x4
c000ea7c:	6a 0f                	push   0xf
c000ea7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea82:	50                   	push   eax
c000ea83:	e8 24 3c 00 00       	call   c00126ac <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ea88:	83 c4 10             	add    esp,0x10
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	83 c4 0c             	add    esp,0xc
c000ea90:	c3                   	ret    
c000ea91:	8d 76 00             	lea    esi,[esi+0x0]

c000ea94 <KeGeneralProtectionFault(void*, void*)>:
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaa2:	e8 ed aa 00 00       	call   c0019594 <HalHandleGeneralProtectionFault(void*, void*)>
c000eaa7:	83 c4 10             	add    esp,0x10
c000eaaa:	0f b6 c0             	movzx  eax,al
c000eaad:	85 c0                	test   eax,eax
c000eaaf:	75 2f                	jne    c000eae0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000eab1:	83 ec 0c             	sub    esp,0xc
c000eab4:	68 9c 3c 02 c0       	push   0xc0023c9c
c000eab9:	e8 86 ff ff ff       	call   c000ea44 <KeDisplayProgramFault(char const*)>
c000eabe:	83 c4 10             	add    esp,0x10
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac8:	e8 61 ac 00 00       	call   c001972e <HalDisplayDebugInfo(void*)>
c000eacd:	83 c4 10             	add    esp,0x10
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	6a 00                	push   0x0
c000ead5:	e8 4e 8b 00 00       	call   c0017628 <Thr::terminateFromIRQ(int)>
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	eb 05                	jmp    c000eae4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000eadf:	90                   	nop
c000eae0:	90                   	nop
c000eae1:	8d 76 00             	lea    esi,[esi+0x0]
c000eae4:	83 c4 0c             	add    esp,0xc
c000eae7:	c3                   	ret    

c000eae8 <KePageFault(void*, void*)>:
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	83 ec 0c             	sub    esp,0xc
c000eaee:	68 b5 3c 02 c0       	push   0xc0023cb5
c000eaf3:	e8 56 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eaf8:	83 c4 10             	add    esp,0x10
c000eafb:	83 ec 08             	sub    esp,0x8
c000eafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb06:	e8 34 ab 00 00       	call   c001963f <HalHandlePageFault(void*, void*)>
c000eb0b:	83 c4 10             	add    esp,0x10
c000eb0e:	0f b6 c0             	movzx  eax,al
c000eb11:	85 c0                	test   eax,eax
c000eb13:	75 2f                	jne    c000eb44 <KePageFault(void*, void*)+0x5c>
c000eb15:	83 ec 0c             	sub    esp,0xc
c000eb18:	68 c2 3c 02 c0       	push   0xc0023cc2
c000eb1d:	e8 22 ff ff ff       	call   c000ea44 <KeDisplayProgramFault(char const*)>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	83 ec 0c             	sub    esp,0xc
c000eb28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb2c:	e8 fd ab 00 00       	call   c001972e <HalDisplayDebugInfo(void*)>
c000eb31:	83 c4 10             	add    esp,0x10
c000eb34:	83 ec 0c             	sub    esp,0xc
c000eb37:	6a 00                	push   0x0
c000eb39:	e8 ea 8a 00 00       	call   c0017628 <Thr::terminateFromIRQ(int)>
c000eb3e:	83 c4 10             	add    esp,0x10
c000eb41:	eb 05                	jmp    c000eb48 <KePageFault(void*, void*)+0x60>
c000eb43:	90                   	nop
c000eb44:	90                   	nop
c000eb45:	8d 76 00             	lea    esi,[esi+0x0]
c000eb48:	83 c4 0c             	add    esp,0xc
c000eb4b:	c3                   	ret    

c000eb4c <KeNonMaskableInterrupt(void*, void*)>:
c000eb4c:	83 ec 0c             	sub    esp,0xc
c000eb4f:	e8 68 af 00 00       	call   c0019abc <HalReceivedNMI()>
c000eb54:	90                   	nop
c000eb55:	83 c4 0c             	add    esp,0xc
c000eb58:	c3                   	ret    
c000eb59:	8d 76 00             	lea    esi,[esi+0x0]

c000eb5c <KeOtherFault(void*, void*)>:
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	83 ec 0c             	sub    esp,0xc
c000eb62:	68 d0 3c 02 c0       	push   0xc0023cd0
c000eb67:	e8 d8 fe ff ff       	call   c000ea44 <KeDisplayProgramFault(char const*)>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	83 ec 0c             	sub    esp,0xc
c000eb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb76:	e8 b3 ab 00 00       	call   c001972e <HalDisplayDebugInfo(void*)>
c000eb7b:	83 c4 10             	add    esp,0x10
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	6a 00                	push   0x0
c000eb83:	e8 a0 8a 00 00       	call   c0017628 <Thr::terminateFromIRQ(int)>
c000eb88:	83 c4 10             	add    esp,0x10
c000eb8b:	90                   	nop
c000eb8c:	83 c4 0c             	add    esp,0xc
c000eb8f:	c3                   	ret    

c000eb90 <KeOpcodeFault(void*, void*)>:
c000eb90:	55                   	push   ebp
c000eb91:	89 e5                	mov    ebp,esp
c000eb93:	83 ec 08             	sub    esp,0x8
c000eb96:	83 ec 08             	sub    esp,0x8
c000eb99:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000eb9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eb9f:	e8 48 ab 00 00       	call   c00196ec <HalHandleOpcodeFault(void*, void*)>
c000eba4:	83 c4 10             	add    esp,0x10
c000eba7:	0f b6 c0             	movzx  eax,al
c000ebaa:	85 c0                	test   eax,eax
c000ebac:	75 2e                	jne    c000ebdc <KeOpcodeFault(void*, void*)+0x4c>
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	68 f8 3c 02 c0       	push   0xc0023cf8
c000ebb6:	e8 89 fe ff ff       	call   c000ea44 <KeDisplayProgramFault(char const*)>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	83 ec 0c             	sub    esp,0xc
c000ebc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebc4:	e8 65 ab 00 00       	call   c001972e <HalDisplayDebugInfo(void*)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	6a 00                	push   0x0
c000ebd1:	e8 52 8a 00 00       	call   c0017628 <Thr::terminateFromIRQ(int)>
c000ebd6:	83 c4 10             	add    esp,0x10
c000ebd9:	eb 05                	jmp    c000ebe0 <KeOpcodeFault(void*, void*)+0x50>
c000ebdb:	90                   	nop
c000ebdc:	90                   	nop
c000ebdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe0:	c9                   	leave  
c000ebe1:	c3                   	ret    
c000ebe2:	66 90                	xchg   ax,ax

c000ebe4 <KeDoubleFault(void*, void*)>:
c000ebe4:	55                   	push   ebp
c000ebe5:	89 e5                	mov    ebp,esp
c000ebe7:	83 ec 08             	sub    esp,0x8
c000ebea:	83 ec 0c             	sub    esp,0xc
c000ebed:	68 05 3d 02 c0       	push   0xc0023d05
c000ebf2:	e8 ff 11 00 00       	call   c000fdf6 <KePanic(char const*)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	90                   	nop
c000ebfb:	c9                   	leave  
c000ebfc:	c3                   	ret    
c000ebfd:	90                   	nop

c000ebfe <GDTEntry::setBase(unsigned int)>:
c000ebfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ec06:	89 c1                	mov    ecx,eax
c000ec08:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec0c:	c1 e9 10             	shr    ecx,0x10
c000ec0f:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ec12:	c1 e8 18             	shr    eax,0x18
c000ec15:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ec18:	c3                   	ret    
c000ec19:	90                   	nop

c000ec1a <GDTEntry::setLimit(unsigned int)>:
c000ec1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec22:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ec25:	66 89 01             	mov    WORD PTR [ecx],ax
c000ec28:	c1 e8 10             	shr    eax,0x10
c000ec2b:	83 e0 0f             	and    eax,0xf
c000ec2e:	83 e2 f0             	and    edx,0xfffffff0
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ec36:	c3                   	ret    
c000ec37:	90                   	nop

c000ec38 <GDT::GDT()>:
c000ec38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec4c:	90                   	nop
c000ec4d:	c3                   	ret    

c000ec4e <GDT::addEntry(GDTEntry)>:
c000ec4e:	53                   	push   ebx
c000ec4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ec5d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ec61:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec64:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ec68:	c1 e0 03             	shl    eax,0x3
c000ec6b:	89 0a                	mov    DWORD PTR [edx],ecx
c000ec6d:	5b                   	pop    ebx
c000ec6e:	c3                   	ret    
c000ec6f:	90                   	nop

c000ec70 <GDT::getNumberOfEntries()>:
c000ec70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec74:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec76:	c3                   	ret    
c000ec77:	90                   	nop

c000ec78 <GDT::flush()>:
c000ec78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec7c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec7e:	83 c0 04             	add    eax,0x4
c000ec81:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ec86:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ec8d:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ec94:	e9 c1 16 ff ff       	jmp    c000035a <loadGDT>
c000ec99:	90                   	nop

c000ec9a <GDT::setup()>:
c000ec9a:	57                   	push   edi
c000ec9b:	56                   	push   esi
c000ec9c:	53                   	push   ebx
c000ec9d:	83 ec 30             	sub    esp,0x30
c000eca0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eca4:	6a 00                	push   0x0
c000eca6:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ecaa:	56                   	push   esi
c000ecab:	e8 4e ff ff ff       	call   c000ebfe <GDTEntry::setBase(unsigned int)>
c000ecb0:	6a 00                	push   0x0
c000ecb2:	56                   	push   esi
c000ecb3:	e8 62 ff ff ff       	call   c000ec1a <GDTEntry::setLimit(unsigned int)>
c000ecb8:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ecc0:	6a 00                	push   0x0
c000ecc2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ecc6:	56                   	push   esi
c000ecc7:	e8 32 ff ff ff       	call   c000ebfe <GDTEntry::setBase(unsigned int)>
c000eccc:	68 ff ff ff 00       	push   0xffffff
c000ecd1:	56                   	push   esi
c000ecd2:	e8 43 ff ff ff       	call   c000ec1a <GDTEntry::setLimit(unsigned int)>
c000ecd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecdb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ecdf:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ece4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ece8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eced:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecf1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ecf5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ecf9:	89 f8                	mov    eax,edi
c000ecfb:	89 fa                	mov    edx,edi
c000ecfd:	80 e4 f7             	and    ah,0xf7
c000ed00:	80 ce 60             	or     dh,0x60
c000ed03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ed07:	89 c7                	mov    edi,eax
c000ed09:	80 cc 60             	or     ah,0x60
c000ed0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed18:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ed1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed20:	83 c4 20             	add    esp,0x20
c000ed23:	6a 00                	push   0x0
c000ed25:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed29:	50                   	push   eax
c000ed2a:	e8 cf fe ff ff       	call   c000ebfe <GDTEntry::setBase(unsigned int)>
c000ed2f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ed33:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ed37:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ed3b:	83 e0 3f             	and    eax,0x3f
c000ed3e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed42:	6a 00                	push   0x0
c000ed44:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ed48:	50                   	push   eax
c000ed49:	e8 b0 fe ff ff       	call   c000ebfe <GDTEntry::setBase(unsigned int)>
c000ed4e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ed52:	83 e0 3f             	and    eax,0x3f
c000ed55:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ed59:	83 c4 0c             	add    esp,0xc
c000ed5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed64:	53                   	push   ebx
c000ed65:	e8 e4 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000ed6a:	83 c4 0c             	add    esp,0xc
c000ed6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed75:	53                   	push   ebx
c000ed76:	e8 d3 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000ed7b:	83 c4 0c             	add    esp,0xc
c000ed7e:	57                   	push   edi
c000ed7f:	56                   	push   esi
c000ed80:	53                   	push   ebx
c000ed81:	e8 c8 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000ed86:	83 c4 0c             	add    esp,0xc
c000ed89:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed8d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed91:	53                   	push   ebx
c000ed92:	e8 b7 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000ed97:	83 c4 0c             	add    esp,0xc
c000ed9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eda2:	53                   	push   ebx
c000eda3:	e8 a6 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000eda8:	83 c4 0c             	add    esp,0xc
c000edab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000edaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000edb3:	53                   	push   ebx
c000edb4:	e8 95 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000edb9:	83 c4 0c             	add    esp,0xc
c000edbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edc4:	53                   	push   ebx
c000edc5:	e8 84 fe ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c000edca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edcd:	e8 a6 fe ff ff       	call   c000ec78 <GDT::flush()>
c000edd2:	83 c4 40             	add    esp,0x40
c000edd5:	5b                   	pop    ebx
c000edd6:	5e                   	pop    esi
c000edd7:	5f                   	pop    edi
c000edd8:	c3                   	ret    

c000edd9 <idleFunction(void*)>:
c000edd9:	83 ec 0c             	sub    esp,0xc
c000eddc:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000ede3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000edea:	75 01                	jne    c000eded <idleFunction(void*)+0x14>
c000edec:	fb                   	sti    
c000eded:	e8 65 ad 00 00       	call   c0019b57 <HalSystemIdle()>
c000edf2:	e8 9f 2f 01 00       	call   c0021d96 <idleCommon()>
c000edf7:	eb f4                	jmp    c000eded <idleFunction(void*)+0x14>
c000edf9:	66 90                	xchg   ax,ax
c000edfb:	90                   	nop

c000edfc <IDTEntry::IDTEntry(bool)>:
c000edfc:	53                   	push   ebx
c000edfd:	83 ec 04             	sub    esp,0x4
c000ee00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee04:	88 04 24             	mov    BYTE PTR [esp],al
c000ee07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee0b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ee11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee15:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ee19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee20:	83 e2 f0             	and    edx,0xfffffff0
c000ee23:	83 ca 0e             	or     edx,0xe
c000ee26:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee2d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee30:	83 e2 ef             	and    edx,0xffffffef
c000ee33:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee36:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ee3a:	85 c0                	test   eax,eax
c000ee3c:	74 06                	je     c000ee44 <IDTEntry::IDTEntry(bool)+0x48>
c000ee3e:	b2 03                	mov    dl,0x3
c000ee40:	eb 06                	jmp    c000ee48 <IDTEntry::IDTEntry(bool)+0x4c>
c000ee42:	66 90                	xchg   ax,ax
c000ee44:	b2 00                	mov    dl,0x0
c000ee46:	66 90                	xchg   ax,ax
c000ee48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee4c:	83 e2 03             	and    edx,0x3
c000ee4f:	89 d3                	mov    ebx,edx
c000ee51:	c1 e3 05             	shl    ebx,0x5
c000ee54:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee57:	83 e2 9f             	and    edx,0xffffff9f
c000ee5a:	88 d1                	mov    cl,dl
c000ee5c:	88 da                	mov    dl,bl
c000ee5e:	09 ca                	or     edx,ecx
c000ee60:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee67:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee6a:	83 ca 80             	or     edx,0xffffff80
c000ee6d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee70:	90                   	nop
c000ee71:	83 c4 04             	add    esp,0x4
c000ee74:	5b                   	pop    ebx
c000ee75:	c3                   	ret    

c000ee76 <IDTEntry::setOffset(unsigned int)>:
c000ee76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ee81:	c1 e8 10             	shr    eax,0x10
c000ee84:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ee88:	c3                   	ret    
c000ee89:	90                   	nop
c000ee8a:	66 90                	xchg   ax,ax

c000ee8c <IDT::IDT()>:
c000ee8c:	90                   	nop
c000ee8d:	c3                   	ret    

c000ee8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	83 c0 30             	add    eax,0x30
c000ee95:	c3                   	ret    

c000ee96 <IDT::addEntry(IDTEntry, int)>:
c000ee96:	53                   	push   ebx
c000ee97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eea3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eea7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eeaa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eeae:	5b                   	pop    ebx
c000eeaf:	c3                   	ret    

c000eeb0 <IDT::addEntry(int, void (*)(), bool)>:
c000eeb0:	53                   	push   ebx
c000eeb1:	83 ec 10             	sub    esp,0x10
c000eeb4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eeb9:	50                   	push   eax
c000eeba:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eebe:	53                   	push   ebx
c000eebf:	e8 38 ff ff ff       	call   c000edfc <IDTEntry::IDTEntry(bool)>
c000eec4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eec8:	53                   	push   ebx
c000eec9:	e8 a8 ff ff ff       	call   c000ee76 <IDTEntry::setOffset(unsigned int)>
c000eece:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eed2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eeda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eede:	e8 b3 ff ff ff       	call   c000ee96 <IDT::addEntry(IDTEntry, int)>
c000eee3:	83 c4 30             	add    esp,0x30
c000eee6:	5b                   	pop    ebx
c000eee7:	c3                   	ret    

c000eee8 <IDT::flush()>:
c000eee8:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000eef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef5:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000eefa:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000ef01:	c3                   	ret    

c000ef02 <IDT::setup()>:
c000ef02:	57                   	push   edi
c000ef03:	56                   	push   esi
c000ef04:	53                   	push   ebx
c000ef05:	83 ec 10             	sub    esp,0x10
c000ef08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ef0c:	6a 00                	push   0x0
c000ef0e:	68 70 10 02 c0       	push   0xc0021070
c000ef13:	6a 00                	push   0x0
c000ef15:	53                   	push   ebx
c000ef16:	e8 95 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef1b:	6a 00                	push   0x0
c000ef1d:	68 80 10 02 c0       	push   0xc0021080
c000ef22:	6a 01                	push   0x1
c000ef24:	53                   	push   ebx
c000ef25:	e8 86 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef2a:	83 c4 20             	add    esp,0x20
c000ef2d:	6a 00                	push   0x0
c000ef2f:	68 8a 10 02 c0       	push   0xc002108a
c000ef34:	6a 02                	push   0x2
c000ef36:	53                   	push   ebx
c000ef37:	e8 74 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef3c:	6a 00                	push   0x0
c000ef3e:	68 94 10 02 c0       	push   0xc0021094
c000ef43:	6a 03                	push   0x3
c000ef45:	53                   	push   ebx
c000ef46:	e8 65 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef4b:	83 c4 20             	add    esp,0x20
c000ef4e:	6a 00                	push   0x0
c000ef50:	68 9e 10 02 c0       	push   0xc002109e
c000ef55:	6a 04                	push   0x4
c000ef57:	53                   	push   ebx
c000ef58:	e8 53 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef5d:	6a 00                	push   0x0
c000ef5f:	68 a8 10 02 c0       	push   0xc00210a8
c000ef64:	6a 05                	push   0x5
c000ef66:	53                   	push   ebx
c000ef67:	e8 44 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef6c:	83 c4 20             	add    esp,0x20
c000ef6f:	6a 00                	push   0x0
c000ef71:	68 b2 10 02 c0       	push   0xc00210b2
c000ef76:	6a 06                	push   0x6
c000ef78:	53                   	push   ebx
c000ef79:	e8 32 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef7e:	6a 00                	push   0x0
c000ef80:	68 bc 10 02 c0       	push   0xc00210bc
c000ef85:	6a 07                	push   0x7
c000ef87:	53                   	push   ebx
c000ef88:	e8 23 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef8d:	83 c4 20             	add    esp,0x20
c000ef90:	6a 00                	push   0x0
c000ef92:	68 c6 10 02 c0       	push   0xc00210c6
c000ef97:	6a 08                	push   0x8
c000ef99:	53                   	push   ebx
c000ef9a:	e8 11 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000ef9f:	6a 00                	push   0x0
c000efa1:	68 ce 10 02 c0       	push   0xc00210ce
c000efa6:	6a 09                	push   0x9
c000efa8:	53                   	push   ebx
c000efa9:	e8 02 ff ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000efae:	83 c4 20             	add    esp,0x20
c000efb1:	6a 00                	push   0x0
c000efb3:	68 d8 10 02 c0       	push   0xc00210d8
c000efb8:	6a 0a                	push   0xa
c000efba:	53                   	push   ebx
c000efbb:	e8 f0 fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000efc0:	6a 00                	push   0x0
c000efc2:	68 e0 10 02 c0       	push   0xc00210e0
c000efc7:	6a 0b                	push   0xb
c000efc9:	53                   	push   ebx
c000efca:	e8 e1 fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000efcf:	83 c4 20             	add    esp,0x20
c000efd2:	6a 00                	push   0x0
c000efd4:	68 e8 10 02 c0       	push   0xc00210e8
c000efd9:	6a 0c                	push   0xc
c000efdb:	53                   	push   ebx
c000efdc:	e8 cf fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000efe1:	6a 00                	push   0x0
c000efe3:	68 f0 10 02 c0       	push   0xc00210f0
c000efe8:	6a 0d                	push   0xd
c000efea:	53                   	push   ebx
c000efeb:	e8 c0 fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000eff0:	83 c4 20             	add    esp,0x20
c000eff3:	6a 00                	push   0x0
c000eff5:	68 0a 11 02 c0       	push   0xc002110a
c000effa:	6a 0e                	push   0xe
c000effc:	53                   	push   ebx
c000effd:	e8 ae fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f002:	6a 00                	push   0x0
c000f004:	68 12 11 02 c0       	push   0xc0021112
c000f009:	6a 0f                	push   0xf
c000f00b:	53                   	push   ebx
c000f00c:	e8 9f fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f011:	83 c4 20             	add    esp,0x20
c000f014:	6a 00                	push   0x0
c000f016:	68 1c 11 02 c0       	push   0xc002111c
c000f01b:	6a 10                	push   0x10
c000f01d:	53                   	push   ebx
c000f01e:	e8 8d fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f023:	6a 00                	push   0x0
c000f025:	68 26 11 02 c0       	push   0xc0021126
c000f02a:	6a 11                	push   0x11
c000f02c:	53                   	push   ebx
c000f02d:	e8 7e fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f032:	83 c4 20             	add    esp,0x20
c000f035:	6a 00                	push   0x0
c000f037:	68 30 11 02 c0       	push   0xc0021130
c000f03c:	6a 12                	push   0x12
c000f03e:	53                   	push   ebx
c000f03f:	e8 6c fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f044:	6a 01                	push   0x1
c000f046:	68 ca 11 02 c0       	push   0xc00211ca
c000f04b:	6a 60                	push   0x60
c000f04d:	53                   	push   ebx
c000f04e:	e8 5d fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f053:	83 c4 20             	add    esp,0x20
c000f056:	6a 00                	push   0x0
c000f058:	68 d1 11 02 c0       	push   0xc00211d1
c000f05d:	6a 20                	push   0x20
c000f05f:	53                   	push   ebx
c000f060:	e8 4b fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f065:	6a 00                	push   0x0
c000f067:	68 bc 11 02 c0       	push   0xc00211bc
c000f06c:	6a 21                	push   0x21
c000f06e:	53                   	push   ebx
c000f06f:	e8 3c fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f074:	83 c4 20             	add    esp,0x20
c000f077:	6a 00                	push   0x0
c000f079:	68 c3 11 02 c0       	push   0xc00211c3
c000f07e:	6a 22                	push   0x22
c000f080:	53                   	push   ebx
c000f081:	e8 2a fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f086:	6a 00                	push   0x0
c000f088:	68 3a 11 02 c0       	push   0xc002113a
c000f08d:	6a 23                	push   0x23
c000f08f:	53                   	push   ebx
c000f090:	e8 1b fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f095:	83 c4 20             	add    esp,0x20
c000f098:	6a 00                	push   0x0
c000f09a:	68 44 11 02 c0       	push   0xc0021144
c000f09f:	6a 24                	push   0x24
c000f0a1:	53                   	push   ebx
c000f0a2:	e8 09 fe ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0a7:	6a 00                	push   0x0
c000f0a9:	68 4e 11 02 c0       	push   0xc002114e
c000f0ae:	6a 25                	push   0x25
c000f0b0:	53                   	push   ebx
c000f0b1:	e8 fa fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0b6:	83 c4 20             	add    esp,0x20
c000f0b9:	6a 00                	push   0x0
c000f0bb:	68 58 11 02 c0       	push   0xc0021158
c000f0c0:	6a 26                	push   0x26
c000f0c2:	53                   	push   ebx
c000f0c3:	e8 e8 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0c8:	6a 00                	push   0x0
c000f0ca:	68 62 11 02 c0       	push   0xc0021162
c000f0cf:	6a 27                	push   0x27
c000f0d1:	53                   	push   ebx
c000f0d2:	e8 d9 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0d7:	83 c4 20             	add    esp,0x20
c000f0da:	6a 00                	push   0x0
c000f0dc:	68 6c 11 02 c0       	push   0xc002116c
c000f0e1:	6a 28                	push   0x28
c000f0e3:	53                   	push   ebx
c000f0e4:	e8 c7 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0e9:	6a 00                	push   0x0
c000f0eb:	68 76 11 02 c0       	push   0xc0021176
c000f0f0:	6a 29                	push   0x29
c000f0f2:	53                   	push   ebx
c000f0f3:	e8 b8 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f0f8:	83 c4 20             	add    esp,0x20
c000f0fb:	6a 00                	push   0x0
c000f0fd:	68 80 11 02 c0       	push   0xc0021180
c000f102:	6a 2a                	push   0x2a
c000f104:	53                   	push   ebx
c000f105:	e8 a6 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f10a:	6a 00                	push   0x0
c000f10c:	68 8a 11 02 c0       	push   0xc002118a
c000f111:	6a 2b                	push   0x2b
c000f113:	53                   	push   ebx
c000f114:	e8 97 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f119:	83 c4 20             	add    esp,0x20
c000f11c:	6a 00                	push   0x0
c000f11e:	68 94 11 02 c0       	push   0xc0021194
c000f123:	6a 2c                	push   0x2c
c000f125:	53                   	push   ebx
c000f126:	e8 85 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f12b:	6a 00                	push   0x0
c000f12d:	68 9e 11 02 c0       	push   0xc002119e
c000f132:	6a 2d                	push   0x2d
c000f134:	53                   	push   ebx
c000f135:	e8 76 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f13a:	83 c4 20             	add    esp,0x20
c000f13d:	6a 00                	push   0x0
c000f13f:	68 a8 11 02 c0       	push   0xc00211a8
c000f144:	6a 2e                	push   0x2e
c000f146:	53                   	push   ebx
c000f147:	e8 64 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f14c:	6a 00                	push   0x0
c000f14e:	68 b2 11 02 c0       	push   0xc00211b2
c000f153:	6a 2f                	push   0x2f
c000f155:	53                   	push   ebx
c000f156:	e8 55 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f15b:	83 c4 20             	add    esp,0x20
c000f15e:	6a 00                	push   0x0
c000f160:	68 d4 12 02 c0       	push   0xc00212d4
c000f165:	6a 30                	push   0x30
c000f167:	53                   	push   ebx
c000f168:	e8 43 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f16d:	6a 00                	push   0x0
c000f16f:	68 de 12 02 c0       	push   0xc00212de
c000f174:	6a 31                	push   0x31
c000f176:	53                   	push   ebx
c000f177:	e8 34 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f17c:	83 c4 20             	add    esp,0x20
c000f17f:	6a 00                	push   0x0
c000f181:	68 e8 12 02 c0       	push   0xc00212e8
c000f186:	6a 32                	push   0x32
c000f188:	53                   	push   ebx
c000f189:	e8 22 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f18e:	6a 00                	push   0x0
c000f190:	68 f2 12 02 c0       	push   0xc00212f2
c000f195:	6a 33                	push   0x33
c000f197:	53                   	push   ebx
c000f198:	e8 13 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f19d:	83 c4 20             	add    esp,0x20
c000f1a0:	6a 00                	push   0x0
c000f1a2:	68 fc 12 02 c0       	push   0xc00212fc
c000f1a7:	6a 34                	push   0x34
c000f1a9:	53                   	push   ebx
c000f1aa:	e8 01 fd ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f1af:	6a 00                	push   0x0
c000f1b1:	68 06 13 02 c0       	push   0xc0021306
c000f1b6:	6a 35                	push   0x35
c000f1b8:	53                   	push   ebx
c000f1b9:	e8 f2 fc ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f1be:	83 c4 20             	add    esp,0x20
c000f1c1:	6a 00                	push   0x0
c000f1c3:	68 10 13 02 c0       	push   0xc0021310
c000f1c8:	6a 36                	push   0x36
c000f1ca:	53                   	push   ebx
c000f1cb:	e8 e0 fc ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f1d0:	6a 00                	push   0x0
c000f1d2:	68 1a 13 02 c0       	push   0xc002131a
c000f1d7:	6a 37                	push   0x37
c000f1d9:	53                   	push   ebx
c000f1da:	e8 d1 fc ff ff       	call   c000eeb0 <IDT::addEntry(int, void (*)(), bool)>
c000f1df:	83 c4 1c             	add    esp,0x1c
c000f1e2:	6a 03                	push   0x3
c000f1e4:	6a 02                	push   0x2
c000f1e6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f1ec:	e8 45 48 00 00       	call   c0013a36 <VAS::allocatePages(int, int)>
c000f1f1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1f8:	89 c6                	mov    esi,eax
c000f1fa:	e8 b1 08 00 00       	call   c000fab0 <malloc>
c000f1ff:	81 c6 00 20 00 00    	add    esi,0x2000
c000f205:	89 04 24             	mov    DWORD PTR [esp],eax
c000f208:	89 c7                	mov    edi,eax
c000f20a:	e8 e9 38 00 00       	call   c0012af8 <TSS::TSS()>
c000f20f:	83 c4 0c             	add    esp,0xc
c000f212:	68 c6 10 02 c0       	push   0xc00210c6
c000f217:	56                   	push   esi
c000f218:	57                   	push   edi
c000f219:	e8 1e 39 00 00       	call   c0012b3c <TSS::setup(unsigned long, unsigned long)>
c000f21e:	89 c6                	mov    esi,eax
c000f220:	58                   	pop    eax
c000f221:	5a                   	pop    edx
c000f222:	6a 00                	push   0x0
c000f224:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f228:	50                   	push   eax
c000f229:	e8 ce fb ff ff       	call   c000edfc <IDTEntry::IDTEntry(bool)>
c000f22e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f232:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f237:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f23e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f242:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f248:	80 ce 05             	or     dh,0x5
c000f24b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f24f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f256:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f259:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f25c:	e8 87 fc ff ff       	call   c000eee8 <IDT::flush()>
c000f261:	83 c4 20             	add    esp,0x20
c000f264:	5b                   	pop    ebx
c000f265:	5e                   	pop    esi
c000f266:	5f                   	pop    edi
c000f267:	c3                   	ret    

c000f268 <CPU::current()>:
c000f268:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f273:	c3                   	ret    

c000f274 <operator new(unsigned long)>:
c000f274:	e9 37 08 00 00       	jmp    c000fab0 <malloc>

c000f279 <operator delete(void*)>:
c000f279:	e9 52 08 00 00       	jmp    c000fad0 <rfree>

c000f27e <disableIRQs()>:
c000f27e:	fa                   	cli    
c000f27f:	c3                   	ret    

c000f280 <enableIRQs()>:
c000f280:	fb                   	sti    
c000f281:	c3                   	ret    

c000f282 <lockScheduler()>:
c000f282:	fa                   	cli    
c000f283:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f289:	c3                   	ret    

c000f28a <unlockScheduler()>:
c000f28a:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f291:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f298:	75 01                	jne    c000f29b <unlockScheduler()+0x11>
c000f29a:	fb                   	sti    
c000f29b:	c3                   	ret    

c000f29c <lockStuff()>:
c000f29c:	fa                   	cli    
c000f29d:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f2a3:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f2a9:	c3                   	ret    

c000f2aa <unlockStuff()>:
c000f2aa:	83 ec 0c             	sub    esp,0xc
c000f2ad:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f2b2:	48                   	dec    eax
c000f2b3:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f2b8:	75 18                	jne    c000f2d2 <unlockStuff()+0x28>
c000f2ba:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f2c1:	74 0f                	je     c000f2d2 <unlockStuff()+0x28>
c000f2c3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f2cd:	e8 52 7a 00 00       	call   c0016d24 <schedule()>
c000f2d2:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f2d9:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f2e0:	75 01                	jne    c000f2e3 <unlockStuff()+0x39>
c000f2e2:	fb                   	sti    
c000f2e3:	83 c4 0c             	add    esp,0xc
c000f2e6:	c3                   	ret    

c000f2e7 <Virt::getAKernelVAS()>:
c000f2e7:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f2ec:	c3                   	ret    

c000f2ed <__not_memcpy>:
c000f2ed:	57                   	push   edi
c000f2ee:	56                   	push   esi
c000f2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f2f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f2fb:	89 c7                	mov    edi,eax
c000f2fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2ff:	5e                   	pop    esi
c000f300:	5f                   	pop    edi
c000f301:	c3                   	ret    

c000f302 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f302:	55                   	push   ebp
c000f303:	57                   	push   edi
c000f304:	56                   	push   esi
c000f305:	be e8 03 00 00       	mov    esi,0x3e8
c000f30a:	53                   	push   ebx
c000f30b:	bb 0a 00 00 00       	mov    ebx,0xa
c000f310:	81 ec ac 00 00 00    	sub    esp,0xac
c000f316:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f31b:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f322:	89 c8                	mov    eax,ecx
c000f324:	99                   	cdq    
c000f325:	f7 fb                	idiv   ebx
c000f327:	89 d5                	mov    ebp,edx
c000f329:	99                   	cdq    
c000f32a:	f7 fb                	idiv   ebx
c000f32c:	8d 42 30             	lea    eax,[edx+0x30]
c000f32f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f333:	8d 45 30             	lea    eax,[ebp+0x30]
c000f336:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f33e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f342:	89 c8                	mov    eax,ecx
c000f344:	99                   	cdq    
c000f345:	f7 fe                	idiv   esi
c000f347:	be 64 00 00 00       	mov    esi,0x64
c000f34c:	99                   	cdq    
c000f34d:	f7 fb                	idiv   ebx
c000f34f:	8d 42 30             	lea    eax,[edx+0x30]
c000f352:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f356:	89 c8                	mov    eax,ecx
c000f358:	99                   	cdq    
c000f359:	f7 fe                	idiv   esi
c000f35b:	99                   	cdq    
c000f35c:	f7 fb                	idiv   ebx
c000f35e:	31 db                	xor    ebx,ebx
c000f360:	8d 42 30             	lea    eax,[edx+0x30]
c000f363:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f367:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f36e:	83 f9 59             	cmp    ecx,0x59
c000f371:	0f 84 1f 01 00 00    	je     c000f496 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f377:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f37b:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f382:	83 f9 4d             	cmp    ecx,0x4d
c000f385:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f38d:	57                   	push   edi
c000f38e:	57                   	push   edi
c000f38f:	89 d7                	mov    edi,edx
c000f391:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f395:	c1 ff 1f             	sar    edi,0x1f
c000f398:	57                   	push   edi
c000f399:	52                   	push   edx
c000f39a:	e8 6d 04 00 00       	call   c000f80c <KeGetDigitsInNumber(long long)>
c000f39f:	83 c4 10             	add    esp,0x10
c000f3a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3a6:	48                   	dec    eax
c000f3a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3ab:	75 1c                	jne    c000f3c9 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f3ad:	83 f9 44             	cmp    ecx,0x44
c000f3b0:	75 09                	jne    c000f3bb <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f3b2:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f3b9:	eb 0c                	jmp    c000f3c7 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f3bb:	83 f9 4d             	cmp    ecx,0x4d
c000f3be:	75 60                	jne    c000f420 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f3c0:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f3c7:	74 57                	je     c000f420 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f3c9:	89 d0                	mov    eax,edx
c000f3cb:	b9 0a 00 00 00       	mov    ecx,0xa
c000f3d0:	99                   	cdq    
c000f3d1:	f7 f9                	idiv   ecx
c000f3d3:	89 d6                	mov    esi,edx
c000f3d5:	99                   	cdq    
c000f3d6:	f7 f9                	idiv   ecx
c000f3d8:	83 c2 30             	add    edx,0x30
c000f3db:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f3df:	8d 56 30             	lea    edx,[esi+0x30]
c000f3e2:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f3e6:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f3eb:	56                   	push   esi
c000f3ec:	56                   	push   esi
c000f3ed:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f3f1:	57                   	push   edi
c000f3f2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f3f6:	56                   	push   esi
c000f3f7:	e8 74 14 ff ff       	call   c0000870 <strcat>
c000f3fc:	83 c4 10             	add    esp,0x10
c000f3ff:	83 fb 02             	cmp    ebx,0x2
c000f402:	74 34                	je     c000f438 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f404:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f409:	a0 08 e1 02 c0       	mov    al,ds:0xc002e108
c000f40e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f412:	51                   	push   ecx
c000f413:	51                   	push   ecx
c000f414:	57                   	push   edi
c000f415:	56                   	push   esi
c000f416:	e8 55 14 ff ff       	call   c0000870 <strcat>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	eb 18                	jmp    c000f438 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f420:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f425:	89 d0                	mov    eax,edx
c000f427:	b9 0a 00 00 00       	mov    ecx,0xa
c000f42c:	99                   	cdq    
c000f42d:	f7 f9                	idiv   ecx
c000f42f:	83 c2 30             	add    edx,0x30
c000f432:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f436:	eb b3                	jmp    c000f3eb <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f438:	43                   	inc    ebx
c000f439:	83 fb 03             	cmp    ebx,0x3
c000f43c:	0f 85 25 ff ff ff    	jne    c000f367 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f442:	52                   	push   edx
c000f443:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f44a:	6a 00                	push   0x0
c000f44c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f453:	e8 98 10 ff ff       	call   c00004f0 <memset>
c000f458:	89 34 24             	mov    DWORD PTR [esp],esi
c000f45b:	e8 20 11 ff ff       	call   c0000580 <strlen>
c000f460:	83 c4 10             	add    esp,0x10
c000f463:	40                   	inc    eax
c000f464:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f46b:	72 14                	jb     c000f481 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f46d:	50                   	push   eax
c000f46e:	50                   	push   eax
c000f46f:	56                   	push   esi
c000f470:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f477:	e8 d4 11 ff ff       	call   c0000650 <strcpy>
c000f47c:	83 c4 10             	add    esp,0x10
c000f47f:	eb 58                	jmp    c000f4d9 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f481:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f488:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f48f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f494:	eb 43                	jmp    c000f4d9 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f496:	85 ed                	test   ebp,ebp
c000f498:	74 2a                	je     c000f4c4 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f49a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f49f:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4a3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4a7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4ab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4af:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4b3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f4b7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4bb:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f4bf:	e9 27 ff ff ff       	jmp    c000f3eb <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f4c4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4c8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4cc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4d0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4d4:	e9 0d ff ff ff       	jmp    c000f3e6 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f4d9:	81 c4 ac 00 00 00    	add    esp,0xac
c000f4df:	5b                   	pop    ebx
c000f4e0:	5e                   	pop    esi
c000f4e1:	5f                   	pop    edi
c000f4e2:	5d                   	pop    ebp
c000f4e3:	c3                   	ret    

c000f4e4 <KeFormatShortDate(char*, int, int, int, int)>:
c000f4e4:	83 ec 14             	sub    esp,0x14
c000f4e7:	6a 00                	push   0x0
c000f4e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4fd:	e8 00 fe ff ff       	call   c000f302 <KeFormatDate(char*, int, int, int, int, bool)>
c000f502:	83 c4 2c             	add    esp,0x2c
c000f505:	c3                   	ret    

c000f506 <KeFormatLongDate(char*, int, int, int, int)>:
c000f506:	83 ec 14             	sub    esp,0x14
c000f509:	6a 01                	push   0x1
c000f50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f50f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f51f:	e8 de fd ff ff       	call   c000f302 <KeFormatDate(char*, int, int, int, int, bool)>
c000f524:	83 c4 2c             	add    esp,0x2c
c000f527:	c3                   	ret    

c000f528 <KeSetLocale(klocale_t)>:
c000f528:	57                   	push   edi
c000f529:	b9 09 00 00 00       	mov    ecx,0x9
c000f52e:	56                   	push   esi
c000f52f:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f534:	fc                   	cld    
c000f535:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f539:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f53b:	5e                   	pop    esi
c000f53c:	5f                   	pop    edi
c000f53d:	c3                   	ret    

c000f53e <KeInitialiseLocale()>:
c000f53e:	57                   	push   edi
c000f53f:	56                   	push   esi
c000f540:	83 ec 3c             	sub    esp,0x3c
c000f543:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f54b:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f553:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f55b:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f563:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f56a:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f572:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f57a:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f581:	68 12 3d 02 c0       	push   0xc0023d12
c000f586:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f58a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f58e:	50                   	push   eax
c000f58f:	e8 bc 10 ff ff       	call   c0000650 <strcpy>
c000f594:	83 ec 20             	sub    esp,0x20
c000f597:	b9 09 00 00 00       	mov    ecx,0x9
c000f59c:	fc                   	cld    
c000f59d:	89 e7                	mov    edi,esp
c000f59f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5a1:	e8 82 ff ff ff       	call   c000f528 <KeSetLocale(klocale_t)>
c000f5a6:	83 c4 64             	add    esp,0x64
c000f5a9:	5e                   	pop    esi
c000f5aa:	5f                   	pop    edi
c000f5ab:	c3                   	ret    

c000f5ac <KeFormatCurrency(char*, int, long long, long long)>:
c000f5ac:	c3                   	ret    

c000f5ad <KeFormatCurrency(char*, int, double)>:
c000f5ad:	c3                   	ret    

c000f5ae <KeFormatNumber(char*, long long, long long)>:
c000f5ae:	c3                   	ret    

c000f5af <KeFormatNumber(char*, double)>:
c000f5af:	c3                   	ret    

c000f5b0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f5b0:	55                   	push   ebp
c000f5b1:	57                   	push   edi
c000f5b2:	56                   	push   esi
c000f5b3:	53                   	push   ebx
c000f5b4:	83 ec 4c             	sub    esp,0x4c
c000f5b7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5c7:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f5cf:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f5d7:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f5df:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f5e7:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f5ec:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f5f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f600:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f604:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f609:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f60d:	89 c2                	mov    edx,eax
c000f60f:	c1 fa 1f             	sar    edx,0x1f
c000f612:	52                   	push   edx
c000f613:	50                   	push   eax
c000f614:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f618:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f61c:	e8 a3 20 01 00       	call   c00216c4 <__udivdi3>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f628:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f62c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f630:	80 f4 00             	xor    ah,0x0
c000f633:	89 c7                	mov    edi,eax
c000f635:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f639:	80 f4 00             	xor    ah,0x0
c000f63c:	89 c5                	mov    ebp,eax
c000f63e:	89 e8                	mov    eax,ebp
c000f640:	09 f8                	or     eax,edi
c000f642:	74 04                	je     c000f648 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f644:	eb be                	jmp    c000f604 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f646:	66 90                	xchg   ax,ax
c000f648:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f64c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f64f:	90                   	nop
c000f650:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f654:	89 c7                	mov    edi,eax
c000f656:	89 c5                	mov    ebp,eax
c000f658:	c1 fd 1f             	sar    ebp,0x1f
c000f65b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f65f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f663:	55                   	push   ebp
c000f664:	57                   	push   edi
c000f665:	52                   	push   edx
c000f666:	50                   	push   eax
c000f667:	e8 58 21 01 00       	call   c00217c4 <__umoddi3>
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f674:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f678:	01 c8                	add    eax,ecx
c000f67a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f67c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f680:	88 10                	mov    BYTE PTR [eax],dl
c000f682:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f686:	89 c2                	mov    edx,eax
c000f688:	c1 fa 1f             	sar    edx,0x1f
c000f68b:	52                   	push   edx
c000f68c:	50                   	push   eax
c000f68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f695:	e8 2a 20 01 00       	call   c00216c4 <__udivdi3>
c000f69a:	83 c4 10             	add    esp,0x10
c000f69d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6a9:	80 f4 00             	xor    ah,0x0
c000f6ac:	89 c3                	mov    ebx,eax
c000f6ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6b2:	80 f4 00             	xor    ah,0x0
c000f6b5:	89 c6                	mov    esi,eax
c000f6b7:	89 f0                	mov    eax,esi
c000f6b9:	09 d8                	or     eax,ebx
c000f6bb:	74 03                	je     c000f6c0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f6bd:	eb 91                	jmp    c000f650 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f6bf:	90                   	nop
c000f6c0:	90                   	nop
c000f6c1:	83 c4 4c             	add    esp,0x4c
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    
c000f6c9:	8d 76 00             	lea    esi,[esi+0x0]

c000f6cc <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f6cc:	55                   	push   ebp
c000f6cd:	57                   	push   edi
c000f6ce:	56                   	push   esi
c000f6cf:	53                   	push   ebx
c000f6d0:	83 ec 4c             	sub    esp,0x4c
c000f6d3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6db:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f6df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6e3:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f6eb:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f6f3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f6fb:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f703:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f708:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f70c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f710:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f715:	79 1d                	jns    c000f734 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f717:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f71b:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f720:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f724:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f728:	8d 50 01             	lea    edx,[eax+0x1]
c000f72b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f72f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f732:	66 90                	xchg   ax,ax
c000f734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f738:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f73c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f740:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f744:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f749:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f74d:	89 c2                	mov    edx,eax
c000f74f:	c1 fa 1f             	sar    edx,0x1f
c000f752:	52                   	push   edx
c000f753:	50                   	push   eax
c000f754:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f758:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f75c:	e8 63 1f 01 00       	call   c00216c4 <__udivdi3>
c000f761:	83 c4 10             	add    esp,0x10
c000f764:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f768:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f76c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f770:	80 f4 00             	xor    ah,0x0
c000f773:	89 c7                	mov    edi,eax
c000f775:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f779:	80 f4 00             	xor    ah,0x0
c000f77c:	89 c5                	mov    ebp,eax
c000f77e:	89 e8                	mov    eax,ebp
c000f780:	09 f8                	or     eax,edi
c000f782:	74 04                	je     c000f788 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f784:	eb be                	jmp    c000f744 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f786:	66 90                	xchg   ax,ax
c000f788:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f78c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f78f:	90                   	nop
c000f790:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f794:	89 c7                	mov    edi,eax
c000f796:	89 c5                	mov    ebp,eax
c000f798:	c1 fd 1f             	sar    ebp,0x1f
c000f79b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f79f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7a3:	55                   	push   ebp
c000f7a4:	57                   	push   edi
c000f7a5:	52                   	push   edx
c000f7a6:	50                   	push   eax
c000f7a7:	e8 98 1d 01 00       	call   c0021544 <__moddi3>
c000f7ac:	83 c4 10             	add    esp,0x10
c000f7af:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f7b4:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f7b8:	01 c8                	add    eax,ecx
c000f7ba:	8a 10                	mov    dl,BYTE PTR [eax]
c000f7bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7c0:	88 10                	mov    BYTE PTR [eax],dl
c000f7c2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7c6:	89 c2                	mov    edx,eax
c000f7c8:	c1 fa 1f             	sar    edx,0x1f
c000f7cb:	52                   	push   edx
c000f7cc:	50                   	push   eax
c000f7cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7d5:	e8 1e 1c 01 00       	call   c00213f8 <__divdi3>
c000f7da:	83 c4 10             	add    esp,0x10
c000f7dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7e9:	80 f4 00             	xor    ah,0x0
c000f7ec:	89 c3                	mov    ebx,eax
c000f7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f2:	80 f4 00             	xor    ah,0x0
c000f7f5:	89 c6                	mov    esi,eax
c000f7f7:	89 f0                	mov    eax,esi
c000f7f9:	09 d8                	or     eax,ebx
c000f7fb:	74 03                	je     c000f800 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f7fd:	eb 91                	jmp    c000f790 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f7ff:	90                   	nop
c000f800:	90                   	nop
c000f801:	83 c4 4c             	add    esp,0x4c
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	5f                   	pop    edi
c000f807:	5d                   	pop    ebp
c000f808:	c3                   	ret    
c000f809:	8d 76 00             	lea    esi,[esi+0x0]

c000f80c <KeGetDigitsInNumber(long long)>:
c000f80c:	56                   	push   esi
c000f80d:	53                   	push   ebx
c000f80e:	83 ec 24             	sub    esp,0x24
c000f811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f815:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f819:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f81d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f821:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f829:	8d 76 00             	lea    esi,[esi+0x0]
c000f82c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f830:	80 f4 00             	xor    ah,0x0
c000f833:	89 c3                	mov    ebx,eax
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	80 f4 00             	xor    ah,0x0
c000f83c:	89 c6                	mov    esi,eax
c000f83e:	89 f0                	mov    eax,esi
c000f840:	09 d8                	or     eax,ebx
c000f842:	74 28                	je     c000f86c <KeGetDigitsInNumber(long long)+0x60>
c000f844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f848:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f84c:	6a 00                	push   0x0
c000f84e:	6a 0a                	push   0xa
c000f850:	52                   	push   edx
c000f851:	50                   	push   eax
c000f852:	e8 a1 1b 01 00       	call   c00213f8 <__divdi3>
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f85e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f862:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f867:	eb c3                	jmp    c000f82c <KeGetDigitsInNumber(long long)+0x20>
c000f869:	8d 76 00             	lea    esi,[esi+0x0]
c000f86c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f870:	83 c4 24             	add    esp,0x24
c000f873:	5b                   	pop    ebx
c000f874:	5e                   	pop    esi
c000f875:	c3                   	ret    
c000f876:	66 90                	xchg   ax,ax

c000f878 <KeItoa(unsigned long long, char*)>:
c000f878:	83 ec 1c             	sub    esp,0x1c
c000f87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f883:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f88b:	6a 0a                	push   0xa
c000f88d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f899:	e8 12 fd ff ff       	call   c000f5b0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f89e:	83 c4 10             	add    esp,0x10
c000f8a1:	90                   	nop
c000f8a2:	83 c4 1c             	add    esp,0x1c
c000f8a5:	c3                   	ret    
c000f8a6:	66 90                	xchg   ax,ax

c000f8a8 <KeItoa(long long, char*)>:
c000f8a8:	83 ec 1c             	sub    esp,0x1c
c000f8ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8bb:	6a 0a                	push   0xa
c000f8bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8c9:	e8 fe fd ff ff       	call   c000f6cc <KeBasedSignedIntegerToString(long long, char*, int)>
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	90                   	nop
c000f8d2:	83 c4 1c             	add    esp,0x1c
c000f8d5:	c3                   	ret    
c000f8d6:	66 90                	xchg   ax,ax

c000f8d8 <KeXtoa(unsigned long long, char*)>:
c000f8d8:	83 ec 1c             	sub    esp,0x1c
c000f8db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8eb:	6a 10                	push   0x10
c000f8ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8f9:	e8 b2 fc ff ff       	call   c000f5b0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f8fe:	83 c4 10             	add    esp,0x10
c000f901:	90                   	nop
c000f902:	83 c4 1c             	add    esp,0x1c
c000f905:	c3                   	ret    

c000f906 <sbrk>:
c000f906:	55                   	push   ebp
c000f907:	57                   	push   edi
c000f908:	56                   	push   esi
c000f909:	53                   	push   ebx
c000f90a:	83 ec 1c             	sub    esp,0x1c
c000f90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f911:	85 c0                	test   eax,eax
c000f913:	74 66                	je     c000f97b <sbrk+0x75>
c000f915:	78 6b                	js     c000f982 <sbrk+0x7c>
c000f917:	8b 15 90 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026390
c000f91d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f921:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f927:	05 ff 0f 00 00       	add    eax,0xfff
c000f92c:	0f 49 e8             	cmovns ebp,eax
c000f92f:	c1 fd 0c             	sar    ebp,0xc
c000f932:	bb 00 00 00 00       	mov    ebx,0x0
c000f937:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f93d:	8b 3d 90 63 02 c0    	mov    edi,DWORD PTR ds:0xc0026390
c000f943:	e8 a8 06 00 00       	call   c000fff0 <Phys::allocatePage()>
c000f948:	68 01 04 00 00       	push   0x401
c000f94d:	57                   	push   edi
c000f94e:	50                   	push   eax
c000f94f:	56                   	push   esi
c000f950:	e8 d9 3f 00 00       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f955:	81 05 90 63 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026390,0x1000
c000f95f:	83 c3 01             	add    ebx,0x1
c000f962:	83 c4 10             	add    esp,0x10
c000f965:	39 dd                	cmp    ebp,ebx
c000f967:	75 ce                	jne    c000f937 <sbrk+0x31>
c000f969:	0f 20 d8             	mov    eax,cr3
c000f96c:	0f 22 d8             	mov    cr3,eax
c000f96f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f973:	83 c4 1c             	add    esp,0x1c
c000f976:	5b                   	pop    ebx
c000f977:	5e                   	pop    esi
c000f978:	5f                   	pop    edi
c000f979:	5d                   	pop    ebp
c000f97a:	c3                   	ret    
c000f97b:	a1 90 63 02 c0       	mov    eax,ds:0xc0026390
c000f980:	eb f1                	jmp    c000f973 <sbrk+0x6d>
c000f982:	83 ec 08             	sub    esp,0x8
c000f985:	50                   	push   eax
c000f986:	68 18 3d 02 c0       	push   0xc0023d18
c000f98b:	e8 be 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f990:	83 c4 10             	add    esp,0x10
c000f993:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f998:	eb d9                	jmp    c000f973 <sbrk+0x6d>

c000f99a <sbrk_thunk>:
c000f99a:	83 ec 0c             	sub    esp,0xc
c000f99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a1:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f9a6:	7f 10                	jg     c000f9b8 <sbrk_thunk+0x1e>
c000f9a8:	83 ec 0c             	sub    esp,0xc
c000f9ab:	50                   	push   eax
c000f9ac:	e8 55 ff ff ff       	call   c000f906 <sbrk>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	83 c4 0c             	add    esp,0xc
c000f9b7:	c3                   	ret    
c000f9b8:	83 ec 08             	sub    esp,0x8
c000f9bb:	50                   	push   eax
c000f9bc:	68 48 3d 02 c0       	push   0xc0023d48
c000f9c1:	e8 88 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f9c6:	83 c4 10             	add    esp,0x10
c000f9c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f9ce:	eb e4                	jmp    c000f9b4 <sbrk_thunk+0x1a>

c000f9d0 <mmap>:
c000f9d0:	55                   	push   ebp
c000f9d1:	57                   	push   edi
c000f9d2:	56                   	push   esi
c000f9d3:	53                   	push   ebx
c000f9d4:	83 ec 18             	sub    esp,0x18
c000f9d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9db:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f9e1:	89 fb                	mov    ebx,edi
c000f9e3:	c1 eb 0c             	shr    ebx,0xc
c000f9e6:	53                   	push   ebx
c000f9e7:	e8 69 38 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c000f9ec:	89 c5                	mov    ebp,eax
c000f9ee:	83 c4 10             	add    esp,0x10
c000f9f1:	85 db                	test   ebx,ebx
c000f9f3:	7e 2f                	jle    c000fa24 <mmap+0x54>
c000f9f5:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f9fb:	01 c7                	add    edi,eax
c000f9fd:	89 c3                	mov    ebx,eax
c000f9ff:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fa05:	e8 e6 05 00 00       	call   c000fff0 <Phys::allocatePage()>
c000fa0a:	68 01 04 00 00       	push   0x401
c000fa0f:	53                   	push   ebx
c000fa10:	50                   	push   eax
c000fa11:	56                   	push   esi
c000fa12:	e8 17 3f 00 00       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa17:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fa1d:	83 c4 10             	add    esp,0x10
c000fa20:	39 fb                	cmp    ebx,edi
c000fa22:	75 db                	jne    c000f9ff <mmap+0x2f>
c000fa24:	89 e8                	mov    eax,ebp
c000fa26:	83 c4 0c             	add    esp,0xc
c000fa29:	5b                   	pop    ebx
c000fa2a:	5e                   	pop    esi
c000fa2b:	5f                   	pop    edi
c000fa2c:	5d                   	pop    ebp
c000fa2d:	c3                   	ret    

c000fa2e <munmap>:
c000fa2e:	83 ec 18             	sub    esp,0x18
c000fa31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa35:	e8 19 3b 00 00       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c000fa3a:	b8 00 00 00 00       	mov    eax,0x0
c000fa3f:	83 c4 1c             	add    esp,0x1c
c000fa42:	c3                   	ret    

c000fa43 <liballoc_lock()>:
c000fa43:	fa                   	cli    
c000fa44:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fa4b:	b8 00 00 00 00       	mov    eax,0x0
c000fa50:	c3                   	ret    

c000fa51 <liballoc_unlock()>:
c000fa51:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fa59:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fa60:	75 01                	jne    c000fa63 <liballoc_unlock()+0x12>
c000fa62:	fb                   	sti    
c000fa63:	b8 00 00 00 00       	mov    eax,0x0
c000fa68:	c3                   	ret    

c000fa69 <liballoc_alloc(int)>:
c000fa69:	83 ec 10             	sub    esp,0x10
c000fa6c:	6a 01                	push   0x1
c000fa6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa72:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fa78:	e8 b9 3f 00 00       	call   c0013a36 <VAS::allocatePages(int, int)>
c000fa7d:	83 c4 1c             	add    esp,0x1c
c000fa80:	c3                   	ret    

c000fa81 <liballoc_free(void*, int)>:
c000fa81:	83 ec 14             	sub    esp,0x14
c000fa84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa88:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fa8e:	e8 fd 3b 00 00       	call   c0013690 <VAS::freeAllocatedPages(unsigned long)>
c000fa93:	b8 00 00 00 00       	mov    eax,0x0
c000fa98:	83 c4 1c             	add    esp,0x1c
c000fa9b:	c3                   	ret    

c000fa9c <realloc>:
c000fa9c:	83 ec 14             	sub    esp,0x14
c000fa9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faa7:	e8 d9 1c ff ff       	call   c0001785 <dlrealloc>
c000faac:	83 c4 1c             	add    esp,0x1c
c000faaf:	c3                   	ret    

c000fab0 <malloc>:
c000fab0:	83 ec 18             	sub    esp,0x18
c000fab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fab7:	e8 8c 17 ff ff       	call   c0001248 <dlmalloc>
c000fabc:	83 c4 1c             	add    esp,0x1c
c000fabf:	c3                   	ret    

c000fac0 <free>:
c000fac0:	83 ec 18             	sub    esp,0x18
c000fac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fac7:	e8 ba 12 ff ff       	call   c0000d86 <dlfree>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	c3                   	ret    

c000fad0 <rfree>:
c000fad0:	83 ec 18             	sub    esp,0x18
c000fad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fad7:	e8 aa 12 ff ff       	call   c0000d86 <dlfree>
c000fadc:	83 c4 1c             	add    esp,0x1c
c000fadf:	c3                   	ret    

c000fae0 <calloc>:
c000fae0:	56                   	push   esi
c000fae1:	53                   	push   ebx
c000fae2:	83 ec 10             	sub    esp,0x10
c000fae5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fae9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000faee:	53                   	push   ebx
c000faef:	e8 bc ff ff ff       	call   c000fab0 <malloc>
c000faf4:	89 c6                	mov    esi,eax
c000faf6:	83 c4 0c             	add    esp,0xc
c000faf9:	53                   	push   ebx
c000fafa:	6a 00                	push   0x0
c000fafc:	50                   	push   eax
c000fafd:	e8 ee 09 ff ff       	call   c00004f0 <memset>
c000fb02:	89 f0                	mov    eax,esi
c000fb04:	83 c4 14             	add    esp,0x14
c000fb07:	5b                   	pop    ebx
c000fb08:	5e                   	pop    esi
c000fb09:	c3                   	ret    
c000fb0a:	66 90                	xchg   ax,ax

c000fb0c <KeMailboxTryPost(Mailbox*, void*)>:
c000fb0c:	83 ec 10             	sub    esp,0x10
c000fb0f:	fa                   	cli    
c000fb10:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb15:	83 c0 01             	add    eax,0x1
c000fb18:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb1d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	75 23                	jne    c000fb50 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fb2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb35:	89 10                	mov    DWORD PTR [eax],edx
c000fb37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb3e:	8d 50 01             	lea    edx,[eax+0x1]
c000fb41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb48:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb50:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fb58:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb5d:	85 c0                	test   eax,eax
c000fb5f:	75 03                	jne    c000fb64 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fb61:	fb                   	sti    
c000fb62:	66 90                	xchg   ax,ax
c000fb64:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb68:	83 c4 10             	add    esp,0x10
c000fb6b:	c3                   	ret    

c000fb6c <KeMailboxTryGet(Mailbox*, void**)>:
c000fb6c:	83 ec 10             	sub    esp,0x10
c000fb6f:	fa                   	cli    
c000fb70:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb75:	83 c0 01             	add    eax,0x1
c000fb78:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb7d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb89:	83 f8 01             	cmp    eax,0x1
c000fb8c:	75 22                	jne    c000fbb0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fb8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb92:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb98:	89 10                	mov    DWORD PTR [eax],edx
c000fb9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fba1:	8d 50 ff             	lea    edx,[eax-0x1]
c000fba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fba8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fbb0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fbb8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fbbd:	85 c0                	test   eax,eax
c000fbbf:	75 03                	jne    c000fbc4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fbc1:	fb                   	sti    
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	c3                   	ret    

c000fbcc <KeMailboxCreate()>:
c000fbcc:	83 ec 1c             	sub    esp,0x1c
c000fbcf:	83 ec 0c             	sub    esp,0xc
c000fbd2:	6a 08                	push   0x8
c000fbd4:	e8 d7 fe ff ff       	call   c000fab0 <malloc>
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbe4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fbea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fbf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbf9:	83 c4 1c             	add    esp,0x1c
c000fbfc:	c3                   	ret    
c000fbfd:	8d 76 00             	lea    esi,[esi+0x0]

c000fc00 <KeMailboxPost(Mailbox*, void*)>:
c000fc00:	83 ec 1c             	sub    esp,0x1c
c000fc03:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc10:	e8 f7 fe ff ff       	call   c000fb0c <KeMailboxTryPost(Mailbox*, void*)>
c000fc15:	83 c4 08             	add    esp,0x8
c000fc18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc20:	83 f0 01             	xor    eax,0x1
c000fc23:	0f b6 c0             	movzx  eax,al
c000fc26:	85 c0                	test   eax,eax
c000fc28:	74 26                	je     c000fc50 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc2a:	fa                   	cli    
c000fc2b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc30:	83 c0 01             	add    eax,0x1
c000fc33:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fc38:	e8 e7 70 00 00       	call   c0016d24 <schedule()>
c000fc3d:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc45:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc4a:	85 c0                	test   eax,eax
c000fc4c:	75 02                	jne    c000fc50 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc4e:	fb                   	sti    
c000fc4f:	90                   	nop
c000fc50:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc55:	85 c0                	test   eax,eax
c000fc57:	75 03                	jne    c000fc5c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fc59:	eb ad                	jmp    c000fc08 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fc5b:	90                   	nop
c000fc5c:	90                   	nop
c000fc5d:	83 c4 1c             	add    esp,0x1c
c000fc60:	c3                   	ret    
c000fc61:	8d 76 00             	lea    esi,[esi+0x0]

c000fc64 <KeMailboxGet(Mailbox*, void**)>:
c000fc64:	83 ec 1c             	sub    esp,0x1c
c000fc67:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc74:	e8 f3 fe ff ff       	call   c000fb6c <KeMailboxTryGet(Mailbox*, void**)>
c000fc79:	83 c4 08             	add    esp,0x8
c000fc7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc84:	83 f0 01             	xor    eax,0x1
c000fc87:	0f b6 c0             	movzx  eax,al
c000fc8a:	85 c0                	test   eax,eax
c000fc8c:	74 26                	je     c000fcb4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fc8e:	fa                   	cli    
c000fc8f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc94:	83 c0 01             	add    eax,0x1
c000fc97:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fc9c:	e8 83 70 00 00       	call   c0016d24 <schedule()>
c000fca1:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fca9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fcae:	85 c0                	test   eax,eax
c000fcb0:	75 02                	jne    c000fcb4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fcb2:	fb                   	sti    
c000fcb3:	90                   	nop
c000fcb4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fcb9:	85 c0                	test   eax,eax
c000fcbb:	75 03                	jne    c000fcc0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fcbd:	eb ad                	jmp    c000fc6c <KeMailboxGet(Mailbox*, void**)+0x8>
c000fcbf:	90                   	nop
c000fcc0:	90                   	nop
c000fcc1:	83 c4 1c             	add    esp,0x1c
c000fcc4:	c3                   	ret    
c000fcc5:	8d 76 00             	lea    esi,[esi+0x0]

c000fcc8 <KeMailboxDestroy(Mailbox*)>:
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	83 ec 0c             	sub    esp,0xc
c000fcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd2:	e8 e9 fd ff ff       	call   c000fac0 <free>
c000fcd7:	83 c4 10             	add    esp,0x10
c000fcda:	90                   	nop
c000fcdb:	83 c4 0c             	add    esp,0xc
c000fcde:	c3                   	ret    

c000fcdf <KeEntryPoint>:
c000fcdf:	57                   	push   edi
c000fce0:	bf f9 03 00 00       	mov    edi,0x3f9
c000fce5:	56                   	push   esi
c000fce6:	31 f6                	xor    esi,esi
c000fce8:	53                   	push   ebx
c000fce9:	89 fa                	mov    edx,edi
c000fceb:	83 ec 2c             	sub    esp,0x2c
c000fcee:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fcf3:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fcf8:	89 f0                	mov    eax,esi
c000fcfa:	ee                   	out    dx,al
c000fcfb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fd00:	b0 80                	mov    al,0x80
c000fd02:	89 da                	mov    edx,ebx
c000fd04:	ee                   	out    dx,al
c000fd05:	b1 03                	mov    cl,0x3
c000fd07:	ba f8 03 00 00       	mov    edx,0x3f8
c000fd0c:	88 c8                	mov    al,cl
c000fd0e:	ee                   	out    dx,al
c000fd0f:	89 f0                	mov    eax,esi
c000fd11:	89 fa                	mov    edx,edi
c000fd13:	ee                   	out    dx,al
c000fd14:	88 c8                	mov    al,cl
c000fd16:	89 da                	mov    edx,ebx
c000fd18:	ee                   	out    dx,al
c000fd19:	b0 c7                	mov    al,0xc7
c000fd1b:	ba fa 03 00 00       	mov    edx,0x3fa
c000fd20:	ee                   	out    dx,al
c000fd21:	b0 0b                	mov    al,0xb
c000fd23:	ba fc 03 00 00       	mov    edx,0x3fc
c000fd28:	ee                   	out    dx,al
c000fd29:	68 57 3d 02 c0       	push   0xc0023d57
c000fd2e:	e8 1b 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd33:	e8 00 d4 ff ff       	call   c000d138 <KeDisplaySplashScreen()>
c000fd38:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd3d:	05 ff 0f 00 00       	add    eax,0xfff
c000fd42:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd47:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd4a:	e8 32 04 00 00       	call   c0010181 <Phys::physicalMemorySetup(unsigned int)>
c000fd4f:	e8 d5 36 00 00       	call   c0013429 <Virt::virtualMemorySetup()>
c000fd54:	e8 29 d3 ff ff       	call   c000d082 <KeInitialiseAtexit()>
c000fd59:	c7 04 24 6e 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d6e
c000fd60:	e8 e9 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd65:	58                   	pop    eax
c000fd66:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd6a:	53                   	push   ebx
c000fd6b:	e8 a0 39 00 00       	call   c0013710 <VAS::VAS()>
c000fd70:	c7 04 24 7e 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d7e
c000fd77:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000fd7d:	e8 cc 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd82:	e8 57 1b 01 00       	call   c00218de <_init>
c000fd87:	c7 04 24 92 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d92
c000fd8e:	e8 bb 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd93:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000fd9a:	e8 11 fd ff ff       	call   c000fab0 <malloc>
c000fd9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fda2:	89 c6                	mov    esi,eax
c000fda4:	e8 53 e4 ff ff       	call   c000e1fc <Computer::Computer()>
c000fda9:	5a                   	pop    edx
c000fdaa:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000fdb0:	59                   	pop    ecx
c000fdb1:	56                   	push   esi
c000fdb2:	68 a1 3d 02 c0       	push   0xc0023da1
c000fdb7:	e8 92 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdbc:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000fdc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdc3:	53                   	push   ebx
c000fdc4:	6a 00                	push   0x0
c000fdc6:	6a 00                	push   0x0
c000fdc8:	50                   	push   eax
c000fdc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fdcc:	83 c4 14             	add    esp,0x14
c000fdcf:	53                   	push   ebx
c000fdd0:	e8 f1 39 00 00       	call   c00137c6 <VAS::~VAS()>
c000fdd5:	83 c4 30             	add    esp,0x30
c000fdd8:	5b                   	pop    ebx
c000fdd9:	5e                   	pop    esi
c000fdda:	5f                   	pop    edi
c000fddb:	c3                   	ret    

c000fddc <Mutex::Mutex()>:
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde3:	83 ec 08             	sub    esp,0x8
c000fde6:	6a 01                	push   0x1
c000fde8:	50                   	push   eax
c000fde9:	e8 4e 0c 00 00       	call   c0010a3c <Semaphore::Semaphore(int)>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	90                   	nop
c000fdf2:	83 c4 0c             	add    esp,0xc
c000fdf5:	c3                   	ret    

c000fdf6 <KePanic(char const*)>:
c000fdf6:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000fdfd:	e9 fd 9e 00 00       	jmp    c0019cff <HalPanic(char const*)>

c000fe02 <Phys::allocateDMA(unsigned long)>:
c000fe02:	55                   	push   ebp
c000fe03:	31 ed                	xor    ebp,ebp
c000fe05:	57                   	push   edi
c000fe06:	56                   	push   esi
c000fe07:	31 f6                	xor    esi,esi
c000fe09:	53                   	push   ebx
c000fe0a:	31 db                	xor    ebx,ebx
c000fe0c:	83 ec 1c             	sub    esp,0x1c
c000fe0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe13:	05 ff 0f 00 00       	add    eax,0xfff
c000fe18:	c1 e8 0c             	shr    eax,0xc
c000fe1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe1f:	31 c0                	xor    eax,eax
c000fe21:	eb 1b                	jmp    c000fe3e <Phys::allocateDMA(unsigned long)+0x3c>
c000fe23:	8d 78 01             	lea    edi,[eax+0x1]
c000fe26:	85 c0                	test   eax,eax
c000fe28:	0f 44 eb             	cmove  ebp,ebx
c000fe2b:	0f 44 f3             	cmove  esi,ebx
c000fe2e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fe32:	74 37                	je     c000fe6b <Phys::allocateDMA(unsigned long)+0x69>
c000fe34:	89 f8                	mov    eax,edi
c000fe36:	83 c3 01             	add    ebx,0x1
c000fe39:	83 fb 0f             	cmp    ebx,0xf
c000fe3c:	7f 13                	jg     c000fe51 <Phys::allocateDMA(unsigned long)+0x4f>
c000fe3e:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c000fe45:	74 dc                	je     c000fe23 <Phys::allocateDMA(unsigned long)+0x21>
c000fe47:	31 c0                	xor    eax,eax
c000fe49:	83 c3 01             	add    ebx,0x1
c000fe4c:	83 fb 0f             	cmp    ebx,0xf
c000fe4f:	7e ed                	jle    c000fe3e <Phys::allocateDMA(unsigned long)+0x3c>
c000fe51:	83 ec 0c             	sub    esp,0xc
c000fe54:	68 b8 3d 02 c0       	push   0xc0023db8
c000fe59:	e8 98 ff ff ff       	call   c000fdf6 <KePanic(char const*)>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	31 c0                	xor    eax,eax
c000fe63:	83 c4 1c             	add    esp,0x1c
c000fe66:	5b                   	pop    ebx
c000fe67:	5e                   	pop    esi
c000fe68:	5f                   	pop    edi
c000fe69:	5d                   	pop    ebp
c000fe6a:	c3                   	ret    
c000fe6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe6f:	89 f2                	mov    edx,esi
c000fe71:	c1 fa 04             	sar    edx,0x4
c000fe74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe78:	01 f1                	add    ecx,esi
c000fe7a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fe7d:	83 e9 01             	sub    ecx,0x1
c000fe80:	0f 48 ca             	cmovs  ecx,edx
c000fe83:	c1 f9 04             	sar    ecx,0x4
c000fe86:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fe8a:	74 06                	je     c000fe92 <Phys::allocateDMA(unsigned long)+0x90>
c000fe8c:	89 eb                	mov    ebx,ebp
c000fe8e:	31 c0                	xor    eax,eax
c000fe90:	eb b7                	jmp    c000fe49 <Phys::allocateDMA(unsigned long)+0x47>
c000fe92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe96:	85 d2                	test   edx,edx
c000fe98:	74 17                	je     c000feb1 <Phys::allocateDMA(unsigned long)+0xaf>
c000fe9a:	8d 96 44 e1 02 c0    	lea    edx,[esi-0x3ffd1ebc]
c000fea0:	8d 84 06 45 e1 02 c0 	lea    eax,[esi+eax*1-0x3ffd1ebb]
c000fea7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000feaa:	83 c2 01             	add    edx,0x1
c000fead:	39 d0                	cmp    eax,edx
c000feaf:	75 f6                	jne    c000fea7 <Phys::allocateDMA(unsigned long)+0xa5>
c000feb1:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c000feb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000febb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febf:	01 c2                	add    edx,eax
c000fec1:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c000fec7:	85 c9                	test   ecx,ecx
c000fec9:	74 17                	je     c000fee2 <Phys::allocateDMA(unsigned long)+0xe0>
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	68 b8 3d 02 c0       	push   0xc0023db8
c000fed3:	e8 1e ff ff ff       	call   c000fdf6 <KePanic(char const*)>
c000fed8:	83 c4 10             	add    esp,0x10
c000fedb:	89 f8                	mov    eax,edi
c000fedd:	e9 54 ff ff ff       	jmp    c000fe36 <Phys::allocateDMA(unsigned long)+0x34>
c000fee2:	c1 e6 0c             	shl    esi,0xc
c000fee5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000feeb:	e9 73 ff ff ff       	jmp    c000fe63 <Phys::allocateDMA(unsigned long)+0x61>

c000fef0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fef4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fefa:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000feff:	c1 ea 0c             	shr    edx,0xc
c000ff02:	29 d0                	sub    eax,edx
c000ff04:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000ff09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff0d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ff12:	c1 e8 0c             	shr    eax,0xc
c000ff15:	85 d2                	test   edx,edx
c000ff17:	74 11                	je     c000ff2a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ff19:	05 44 e1 02 c0       	add    eax,0xc002e144
c000ff1e:	01 c2                	add    edx,eax
c000ff20:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ff23:	83 c0 01             	add    eax,0x1
c000ff26:	39 d0                	cmp    eax,edx
c000ff28:	75 f6                	jne    c000ff20 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ff2a:	c3                   	ret    

c000ff2b <Phys::setPageState(unsigned long, bool)>:
c000ff2b:	57                   	push   edi
c000ff2c:	56                   	push   esi
c000ff2d:	8b 35 94 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026394
c000ff33:	53                   	push   ebx
c000ff34:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ff39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff41:	89 ca                	mov    edx,ecx
c000ff43:	83 e1 07             	and    ecx,0x7
c000ff46:	c1 ea 03             	shr    edx,0x3
c000ff49:	0f b6 c0             	movzx  eax,al
c000ff4c:	d3 c3                	rol    ebx,cl
c000ff4e:	01 d6                	add    esi,edx
c000ff50:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ff53:	d3 e0                	shl    eax,cl
c000ff55:	21 fb                	and    ebx,edi
c000ff57:	88 1e                	mov    BYTE PTR [esi],bl
c000ff59:	8b 1d 94 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026394
c000ff5f:	01 da                	add    edx,ebx
c000ff61:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ff63:	09 c8                	or     eax,ecx
c000ff65:	88 02                	mov    BYTE PTR [edx],al
c000ff67:	5b                   	pop    ebx
c000ff68:	5e                   	pop    esi
c000ff69:	5f                   	pop    edi
c000ff6a:	c3                   	ret    

c000ff6b <Phys::getPageState(unsigned long)>:
c000ff6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff6f:	8b 15 94 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026394
c000ff75:	89 c8                	mov    eax,ecx
c000ff77:	83 e1 07             	and    ecx,0x7
c000ff7a:	c1 e8 03             	shr    eax,0x3
c000ff7d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff81:	d3 f8                	sar    eax,cl
c000ff83:	83 e0 01             	and    eax,0x1
c000ff86:	c3                   	ret    

c000ff87 <Phys::freePage(unsigned long)>:
c000ff87:	53                   	push   ebx
c000ff88:	83 ec 08             	sub    esp,0x8
c000ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ff95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ff9b:	76 41                	jbe    c000ffde <Phys::freePage(unsigned long)+0x57>
c000ff9d:	c1 e8 0c             	shr    eax,0xc
c000ffa0:	50                   	push   eax
c000ffa1:	89 c3                	mov    ebx,eax
c000ffa3:	e8 c3 ff ff ff       	call   c000ff6b <Phys::getPageState(unsigned long)>
c000ffa8:	5a                   	pop    edx
c000ffa9:	84 c0                	test   al,al
c000ffab:	74 20                	je     c000ffcd <Phys::freePage(unsigned long)+0x46>
c000ffad:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000ffb2:	83 ec 08             	sub    esp,0x8
c000ffb5:	6a 00                	push   0x0
c000ffb7:	53                   	push   ebx
c000ffb8:	83 e8 01             	sub    eax,0x1
c000ffbb:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000ffc0:	e8 66 ff ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	83 c4 08             	add    esp,0x8
c000ffcb:	5b                   	pop    ebx
c000ffcc:	c3                   	ret    
c000ffcd:	c7 44 24 10 bd 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ebd
c000ffd5:	83 c4 08             	add    esp,0x8
c000ffd8:	5b                   	pop    ebx
c000ffd9:	e9 18 fe ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c000ffde:	68 00 10 00 00       	push   0x1000
c000ffe3:	50                   	push   eax
c000ffe4:	e8 07 ff ff ff       	call   c000fef0 <Phys::freeDMA(unsigned long, unsigned long)>
c000ffe9:	59                   	pop    ecx
c000ffea:	5b                   	pop    ebx
c000ffeb:	83 c4 08             	add    esp,0x8
c000ffee:	5b                   	pop    ebx
c000ffef:	c3                   	ret    

c000fff0 <Phys::allocatePage()>:
c000fff0:	56                   	push   esi
c000fff1:	53                   	push   ebx
c000fff2:	83 ec 14             	sub    esp,0x14
c000fff5:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c000fffb:	89 f3                	mov    ebx,esi
c000fffd:	eb 0a                	jmp    c0010009 <Phys::allocatePage()+0x19>
c000ffff:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c0010005:	39 de                	cmp    esi,ebx
c0010007:	74 26                	je     c001002f <Phys::allocatePage()+0x3f>
c0010009:	53                   	push   ebx
c001000a:	e8 5c ff ff ff       	call   c000ff6b <Phys::getPageState(unsigned long)>
c001000f:	59                   	pop    ecx
c0010010:	84 c0                	test   al,al
c0010012:	74 67                	je     c001007b <Phys::allocatePage()+0x8b>
c0010014:	83 c3 01             	add    ebx,0x1
c0010017:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001001d:	75 e0                	jne    c000ffff <Phys::allocatePage()+0xf>
c001001f:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c0010029:	31 db                	xor    ebx,ebx
c001002b:	39 de                	cmp    esi,ebx
c001002d:	75 da                	jne    c0010009 <Phys::allocatePage()+0x19>
c001002f:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	83 f0 01             	xor    eax,0x1
c001003a:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c001003f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010044:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010047:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001004d:	51                   	push   ecx
c001004e:	e8 2f 44 00 00       	call   c0014482 <VAS::scanForEviction()>
c0010053:	83 c4 10             	add    esp,0x10
c0010056:	85 c0                	test   eax,eax
c0010058:	75 48                	jne    c00100a2 <Phys::allocatePage()+0xb2>
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	68 e0 3d 02 c0       	push   0xc0023de0
c0010062:	e8 8f fd ff ff       	call   c000fdf6 <KePanic(char const*)>
c0010067:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c001006d:	83 c4 10             	add    esp,0x10
c0010070:	53                   	push   ebx
c0010071:	e8 f5 fe ff ff       	call   c000ff6b <Phys::getPageState(unsigned long)>
c0010076:	59                   	pop    ecx
c0010077:	84 c0                	test   al,al
c0010079:	75 99                	jne    c0010014 <Phys::allocatePage()+0x24>
c001007b:	6a 01                	push   0x1
c001007d:	53                   	push   ebx
c001007e:	e8 a8 fe ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c0010083:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c0010089:	5e                   	pop    esi
c001008a:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c001008f:	5a                   	pop    edx
c0010090:	83 c3 01             	add    ebx,0x1
c0010093:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c0010099:	c1 e0 0c             	shl    eax,0xc
c001009c:	83 c4 14             	add    esp,0x14
c001009f:	5b                   	pop    ebx
c00100a0:	5e                   	pop    esi
c00100a1:	c3                   	ret    
c00100a2:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c00100a8:	83 ec 08             	sub    esp,0x8
c00100ab:	6a 01                	push   0x1
c00100ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100b1:	83 c2 01             	add    edx,0x1
c00100b4:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c00100ba:	89 c2                	mov    edx,eax
c00100bc:	c1 ea 0c             	shr    edx,0xc
c00100bf:	52                   	push   edx
c00100c0:	e8 66 fe ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c00100c5:	83 c4 10             	add    esp,0x10
c00100c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100cc:	eb ce                	jmp    c001009c <Phys::allocatePage()+0xac>

c00100ce <Phys::allocateContiguousPages(int)>:
c00100ce:	57                   	push   edi
c00100cf:	56                   	push   esi
c00100d0:	53                   	push   ebx
c00100d1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00100d5:	fa                   	cli    
c00100d6:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	31 db                	xor    ebx,ebx
c00100e1:	68 10 3e 02 c0       	push   0xc0023e10
c00100e6:	83 c2 01             	add    edx,0x1
c00100e9:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00100ef:	e8 5a 6e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	85 db                	test   ebx,ebx
c00100f9:	75 11                	jne    c001010c <Phys::allocateContiguousPages(int)+0x3e>
c00100fb:	e8 f0 fe ff ff       	call   c000fff0 <Phys::allocatePage()>
c0010100:	83 ff 01             	cmp    edi,0x1
c0010103:	89 c6                	mov    esi,eax
c0010105:	74 21                	je     c0010128 <Phys::allocateContiguousPages(int)+0x5a>
c0010107:	bb 01 00 00 00       	mov    ebx,0x1
c001010c:	e8 df fe ff ff       	call   c000fff0 <Phys::allocatePage()>
c0010111:	89 da                	mov    edx,ebx
c0010113:	c1 e2 0c             	shl    edx,0xc
c0010116:	01 f2                	add    edx,esi
c0010118:	39 c2                	cmp    edx,eax
c001011a:	74 24                	je     c0010140 <Phys::allocateContiguousPages(int)+0x72>
c001011c:	83 ff 01             	cmp    edi,0x1
c001011f:	bb 01 00 00 00       	mov    ebx,0x1
c0010124:	89 c6                	mov    esi,eax
c0010126:	75 e4                	jne    c001010c <Phys::allocateContiguousPages(int)+0x3e>
c0010128:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010130:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010135:	85 c0                	test   eax,eax
c0010137:	75 01                	jne    c001013a <Phys::allocateContiguousPages(int)+0x6c>
c0010139:	fb                   	sti    
c001013a:	5b                   	pop    ebx
c001013b:	89 f0                	mov    eax,esi
c001013d:	5e                   	pop    esi
c001013e:	5f                   	pop    edi
c001013f:	c3                   	ret    
c0010140:	83 c3 01             	add    ebx,0x1
c0010143:	39 fb                	cmp    ebx,edi
c0010145:	75 b0                	jne    c00100f7 <Phys::allocateContiguousPages(int)+0x29>
c0010147:	eb df                	jmp    c0010128 <Phys::allocateContiguousPages(int)+0x5a>

c0010149 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010149:	56                   	push   esi
c001014a:	53                   	push   ebx
c001014b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001014f:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c0010155:	73 06                	jae    c001015d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010157:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c001015d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010161:	c1 eb 0c             	shr    ebx,0xc
c0010164:	c1 e8 0c             	shr    eax,0xc
c0010167:	39 d8                	cmp    eax,ebx
c0010169:	73 13                	jae    c001017e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001016b:	6a 00                	push   0x0
c001016d:	50                   	push   eax
c001016e:	8d 70 01             	lea    esi,[eax+0x1]
c0010171:	e8 b5 fd ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c0010176:	39 f3                	cmp    ebx,esi
c0010178:	89 f0                	mov    eax,esi
c001017a:	5a                   	pop    edx
c001017b:	59                   	pop    ecx
c001017c:	75 ed                	jne    c001016b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001017e:	5b                   	pop    ebx
c001017f:	5e                   	pop    esi
c0010180:	c3                   	ret    

c0010181 <Phys::physicalMemorySetup(unsigned int)>:
c0010181:	55                   	push   ebp
c0010182:	57                   	push   edi
c0010183:	56                   	push   esi
c0010184:	53                   	push   ebx
c0010185:	31 db                	xor    ebx,ebx
c0010187:	83 ec 40             	sub    esp,0x40
c001018a:	6a 10                	push   0x10
c001018c:	6a 00                	push   0x0
c001018e:	68 44 e1 02 c0       	push   0xc002e144
c0010193:	e8 58 03 ff ff       	call   c00004f0 <memset>
c0010198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001019c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00101a1:	05 00 10 00 00       	add    eax,0x1000
c00101a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00101aa:	5a                   	pop    edx
c00101ab:	59                   	pop    ecx
c00101ac:	50                   	push   eax
c00101ad:	68 d3 3e 02 c0       	push   0xc0023ed3
c00101b2:	e8 97 6d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	83 ec 08             	sub    esp,0x8
c00101bd:	6a 01                	push   0x1
c00101bf:	53                   	push   ebx
c00101c0:	83 c3 01             	add    ebx,0x1
c00101c3:	e8 63 fd ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c00101c8:	83 c4 10             	add    esp,0x10
c00101cb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101d1:	75 e7                	jne    c00101ba <Phys::physicalMemorySetup(unsigned int)+0x39>
c00101d3:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00101da:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00101e1:	c1 e0 08             	shl    eax,0x8
c00101e4:	09 c2                	or     edx,eax
c00101e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00101ea:	0f 84 43 01 00 00    	je     c0010333 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c00101f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00101f8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00101fd:	e9 82 00 00 00       	jmp    c0010284 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0010202:	ba 00 00 08 00       	mov    edx,0x80000
c0010207:	89 c1                	mov    ecx,eax
c0010209:	39 f2                	cmp    edx,esi
c001020b:	19 f9                	sbb    ecx,edi
c001020d:	0f 82 c0 00 00 00    	jb     c00102d3 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0010213:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010217:	89 c5                	mov    ebp,eax
c0010219:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001021d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010221:	19 cd                	sbb    ebp,ecx
c0010223:	0f 83 af 00 00 00    	jae    c00102d8 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0010229:	89 d6                	mov    esi,edx
c001022b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010230:	39 f2                	cmp    edx,esi
c0010232:	89 cf                	mov    edi,ecx
c0010234:	19 c8                	sbb    eax,ecx
c0010236:	73 07                	jae    c001023f <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0010238:	be 00 00 0a 00       	mov    esi,0xa0000
c001023d:	31 ff                	xor    edi,edi
c001023f:	89 f2                	mov    edx,esi
c0010241:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010246:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c001024c:	89 f9                	mov    ecx,edi
c001024e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010252:	83 d1 ff             	adc    ecx,0xffffffff
c0010255:	39 d0                	cmp    eax,edx
c0010257:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001025b:	b8 00 00 00 00       	mov    eax,0x0
c0010260:	19 c8                	sbb    eax,ecx
c0010262:	0f 82 9d 01 00 00    	jb     c0010405 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0010268:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001026c:	83 c3 18             	add    ebx,0x18
c001026f:	83 c6 01             	add    esi,0x1
c0010272:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001027a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001027e:	0f 84 bf 00 00 00    	je     c0010343 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010284:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010286:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010289:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001028c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001028f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010293:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001029a:	01 f0                	add    eax,esi
c001029c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00102a4:	55                   	push   ebp
c00102a5:	11 fa                	adc    edx,edi
c00102a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00102af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102b3:	50                   	push   eax
c00102b4:	56                   	push   esi
c00102b5:	68 70 3e 02 c0       	push   0xc0023e70
c00102ba:	e8 8f 6c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00102bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	09 f8                	or     eax,edi
c00102c8:	75 79                	jne    c0010343 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00102ca:	83 fd 01             	cmp    ebp,0x1
c00102cd:	0f 84 2f ff ff ff    	je     c0010202 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00102d3:	83 fd 01             	cmp    ebp,0x1
c00102d6:	75 90                	jne    c0010268 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102d8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00102dc:	31 d2                	xor    edx,edx
c00102de:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00102e2:	89 c8                	mov    eax,ecx
c00102e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102e8:	19 d1                	sbb    ecx,edx
c00102ea:	0f 82 78 ff ff ff    	jb     c0010268 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102f0:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00102f5:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00102f9:	b9 00 00 00 00       	mov    ecx,0x0
c00102fe:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010302:	0f 83 60 ff ff ff    	jae    c0010268 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010308:	39 c6                	cmp    esi,eax
c001030a:	19 d7                	sbb    edi,edx
c001030c:	0f 83 ff 00 00 00    	jae    c0010411 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010312:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010316:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001031a:	29 c7                	sub    edi,eax
c001031c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010320:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010324:	19 d5                	sbb    ebp,edx
c0010326:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001032a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001032e:	e9 de 00 00 00       	jmp    c0010411 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010333:	83 ec 0c             	sub    esp,0xc
c0010336:	68 eb 3e 02 c0       	push   0xc0023eeb
c001033b:	e8 b6 fa ff ff       	call   c000fdf6 <KePanic(char const*)>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	83 ec 08             	sub    esp,0x8
c0010346:	bb 60 00 00 00       	mov    ebx,0x60
c001034b:	6a 00                	push   0x0
c001034d:	6a 06                	push   0x6
c001034f:	e8 d7 fb ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c0010354:	58                   	pop    eax
c0010355:	5a                   	pop    edx
c0010356:	6a 00                	push   0x0
c0010358:	6a 07                	push   0x7
c001035a:	e8 cc fb ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c001035f:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	83 c1 02             	add    ecx,0x2
c001036b:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c0010371:	83 ec 08             	sub    esp,0x8
c0010374:	6a 00                	push   0x0
c0010376:	53                   	push   ebx
c0010377:	83 c3 01             	add    ebx,0x1
c001037a:	e8 ac fb ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c001037f:	83 c4 10             	add    esp,0x10
c0010382:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010388:	75 e7                	jne    c0010371 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c001038a:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001038f:	bb 40 01 00 00       	mov    ebx,0x140
c0010394:	83 c0 20             	add    eax,0x20
c0010397:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001039c:	eb 26                	jmp    c00103c4 <Phys::physicalMemorySetup(unsigned int)+0x243>
c001039e:	83 ec 08             	sub    esp,0x8
c00103a1:	6a 00                	push   0x0
c00103a3:	53                   	push   ebx
c00103a4:	83 c3 01             	add    ebx,0x1
c00103a7:	e8 7f fb ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c00103ac:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	83 c0 01             	add    eax,0x1
c00103b7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00103bd:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00103c2:	74 07                	je     c00103cb <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00103c4:	3d ff 03 00 00       	cmp    eax,0x3ff
c00103c9:	7e d3                	jle    c001039e <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00103cb:	bb d0 01 00 00       	mov    ebx,0x1d0
c00103d0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00103d5:	7f 26                	jg     c00103fd <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00103d7:	83 ec 08             	sub    esp,0x8
c00103da:	6a 00                	push   0x0
c00103dc:	53                   	push   ebx
c00103dd:	83 c3 01             	add    ebx,0x1
c00103e0:	e8 46 fb ff ff       	call   c000ff2b <Phys::setPageState(unsigned long, bool)>
c00103e5:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	83 c0 01             	add    eax,0x1
c00103f0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00103f6:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00103fb:	75 d3                	jne    c00103d0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00103fd:	83 c4 3c             	add    esp,0x3c
c0010400:	5b                   	pop    ebx
c0010401:	5e                   	pop    esi
c0010402:	5f                   	pop    edi
c0010403:	5d                   	pop    ebp
c0010404:	c3                   	ret    
c0010405:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010409:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010411:	83 ec 04             	sub    esp,0x4
c0010414:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010418:	56                   	push   esi
c0010419:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001041d:	57                   	push   edi
c001041e:	68 94 3e 02 c0       	push   0xc0023e94
c0010423:	e8 26 6b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010428:	5d                   	pop    ebp
c0010429:	58                   	pop    eax
c001042a:	56                   	push   esi
c001042b:	57                   	push   edi
c001042c:	e8 18 fd ff ff       	call   c0010149 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010431:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010439:	83 c4 0c             	add    esp,0xc
c001043c:	8b 35 40 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e140
c0010442:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010446:	01 f0                	add    eax,esi
c0010448:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001044d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010454:	52                   	push   edx
c0010455:	50                   	push   eax
c0010456:	68 f9 3e 02 c0       	push   0xc0023ef9
c001045b:	e8 ee 6a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010460:	83 c4 10             	add    esp,0x10
c0010463:	e9 00 fe ff ff       	jmp    c0010268 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0010468 <Pipe::isAtty()>:
c0010468:	31 c0                	xor    eax,eax
c001046a:	c3                   	ret    
c001046b:	90                   	nop

c001046c <Pipe::~Pipe()>:
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	ba 58 3f 02 c0       	mov    edx,0xc0023f58
c0010474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010478:	89 10                	mov    DWORD PTR [eax],edx
c001047a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	50                   	push   eax
c0010482:	e8 53 2b 00 00       	call   c0012fda <UnixFile::~UnixFile()>
c0010487:	83 c4 10             	add    esp,0x10
c001048a:	90                   	nop
c001048b:	83 c4 0c             	add    esp,0xc
c001048e:	c3                   	ret    
c001048f:	90                   	nop

c0010490 <Pipe::~Pipe()>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	83 ec 0c             	sub    esp,0xc
c0010496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049a:	e8 cd ff ff ff       	call   c001046c <Pipe::~Pipe()>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	83 ec 08             	sub    esp,0x8
c00104a5:	6a 20                	push   0x20
c00104a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ab:	e8 77 cd ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00104b0:	83 c4 10             	add    esp,0x10
c00104b3:	83 c4 0c             	add    esp,0xc
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <Pipe::write(unsigned long long, void*, int*)>:
c00104b8:	55                   	push   ebp
c00104b9:	57                   	push   edi
c00104ba:	56                   	push   esi
c00104bb:	53                   	push   ebx
c00104bc:	83 ec 1c             	sub    esp,0x1c
c00104bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104cb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00104ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104d2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00104d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00104d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00104dc:	89 d8                	mov    eax,ebx
c00104de:	89 d6                	mov    esi,edx
c00104e0:	89 d7                	mov    edi,edx
c00104e2:	c1 ff 1f             	sar    edi,0x1f
c00104e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00104e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00104ec:	c1 f8 1f             	sar    eax,0x1f
c00104ef:	39 f3                	cmp    ebx,esi
c00104f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f9:	19 f8                	sbb    eax,edi
c00104fb:	b8 01 00 00 00       	mov    eax,0x1
c0010500:	72 72                	jb     c0010574 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010502:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010505:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010509:	01 d0                	add    eax,edx
c001050b:	99                   	cdq    
c001050c:	f7 fb                	idiv   ebx
c001050e:	89 d8                	mov    eax,ebx
c0010510:	29 d0                	sub    eax,edx
c0010512:	89 d6                	mov    esi,edx
c0010514:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010517:	89 c3                	mov    ebx,eax
c0010519:	c1 fb 1f             	sar    ebx,0x1f
c001051c:	39 c2                	cmp    edx,eax
c001051e:	19 df                	sbb    edi,ebx
c0010520:	bb 00 00 00 00       	mov    ebx,0x0
c0010525:	72 04                	jb     c001052b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010527:	89 d3                	mov    ebx,edx
c0010529:	29 c3                	sub    ebx,eax
c001052b:	89 d0                	mov    eax,edx
c001052d:	29 d8                	sub    eax,ebx
c001052f:	74 0d                	je     c001053e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010531:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010534:	89 c1                	mov    ecx,eax
c0010536:	01 f7                	add    edi,esi
c0010538:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001053c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001053e:	85 db                	test   ebx,ebx
c0010540:	74 0d                	je     c001054f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010542:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010546:	89 d9                	mov    ecx,ebx
c0010548:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001054b:	89 c6                	mov    esi,eax
c001054d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001054f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010552:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010557:	75 10                	jne    c0010569 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010559:	83 ec 0c             	sub    esp,0xc
c001055c:	68 15 3f 02 c0       	push   0xc0023f15
c0010561:	e8 90 f8 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0010566:	83 c4 10             	add    esp,0x10
c0010569:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001056d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010570:	89 08                	mov    DWORD PTR [eax],ecx
c0010572:	31 c0                	xor    eax,eax
c0010574:	83 c4 1c             	add    esp,0x1c
c0010577:	5b                   	pop    ebx
c0010578:	5e                   	pop    esi
c0010579:	5f                   	pop    edi
c001057a:	5d                   	pop    ebp
c001057b:	c3                   	ret    

c001057c <Pipe::read(unsigned long long, void*, int*)>:
c001057c:	55                   	push   ebp
c001057d:	57                   	push   edi
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	83 ec 1c             	sub    esp,0x1c
c0010583:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010587:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001058f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010592:	89 c8                	mov    eax,ecx
c0010594:	99                   	cdq    
c0010595:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010599:	74 27                	je     c00105c2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c001059b:	39 f9                	cmp    ecx,edi
c001059d:	89 d1                	mov    ecx,edx
c001059f:	19 f1                	sbb    ecx,esi
c00105a1:	73 1f                	jae    c00105c2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105a3:	fa                   	cli    
c00105a4:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00105aa:	e8 75 67 00 00       	call   c0016d24 <schedule()>
c00105af:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00105b6:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00105bd:	75 d0                	jne    c001058f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105bf:	fb                   	sti    
c00105c0:	eb cd                	jmp    c001058f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105c2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00105c6:	39 f8                	cmp    eax,edi
c00105c8:	89 d1                	mov    ecx,edx
c00105ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00105ce:	19 f1                	sbb    ecx,esi
c00105d0:	73 08                	jae    c00105da <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00105d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105da:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00105dd:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00105e0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00105e4:	29 f7                	sub    edi,esi
c00105e6:	89 f8                	mov    eax,edi
c00105e8:	99                   	cdq    
c00105e9:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00105ed:	89 d0                	mov    eax,edx
c00105ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105f3:	19 c2                	sbb    edx,eax
c00105f5:	89 f8                	mov    eax,edi
c00105f7:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00105fc:	89 ea                	mov    edx,ebp
c00105fe:	29 c2                	sub    edx,eax
c0010600:	85 c0                	test   eax,eax
c0010602:	74 0b                	je     c001060f <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010604:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010607:	89 c1                	mov    ecx,eax
c0010609:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001060d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001060f:	85 d2                	test   edx,edx
c0010611:	74 0d                	je     c0010620 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010613:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010617:	89 d1                	mov    ecx,edx
c0010619:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001061c:	89 c7                	mov    edi,eax
c001061e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010620:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010623:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010626:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010629:	99                   	cdq    
c001062a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001062e:	89 f7                	mov    edi,esi
c0010630:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010634:	c1 ff 1f             	sar    edi,0x1f
c0010637:	57                   	push   edi
c0010638:	56                   	push   esi
c0010639:	52                   	push   edx
c001063a:	50                   	push   eax
c001063b:	e8 84 11 01 00       	call   c00217c4 <__umoddi3>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010648:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001064b:	75 10                	jne    c001065d <Pipe::read(unsigned long long, void*, int*)+0xe1>
c001064d:	83 ec 0c             	sub    esp,0xc
c0010650:	68 32 3f 02 c0       	push   0xc0023f32
c0010655:	e8 9c f7 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010661:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010665:	89 10                	mov    DWORD PTR [eax],edx
c0010667:	83 c4 1c             	add    esp,0x1c
c001066a:	31 c0                	xor    eax,eax
c001066c:	5b                   	pop    ebx
c001066d:	5e                   	pop    esi
c001066e:	5f                   	pop    edi
c001066f:	5d                   	pop    ebp
c0010670:	c3                   	ret    
c0010671:	90                   	nop

c0010672 <Pipe::Pipe(int)>:
c0010672:	83 ec 0c             	sub    esp,0xc
c0010675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010679:	83 ec 08             	sub    esp,0x8
c001067c:	6a 00                	push   0x0
c001067e:	50                   	push   eax
c001067f:	e8 70 27 00 00       	call   c0012df4 <UnixFile::UnixFile(int)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	ba 58 3f 02 c0       	mov    edx,0xc0023f58
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	89 10                	mov    DWORD PTR [eax],edx
c0010692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001069a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001069d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00106a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ac:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00106b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106b7:	83 ec 0c             	sub    esp,0xc
c00106ba:	50                   	push   eax
c00106bb:	e8 f0 f3 ff ff       	call   c000fab0 <malloc>
c00106c0:	83 c4 10             	add    esp,0x10
c00106c3:	89 c2                	mov    edx,eax
c00106c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00106cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00106d4:	90                   	nop
c00106d5:	83 c4 0c             	add    esp,0xc
c00106d8:	c3                   	ret    

c00106d9 <KePowerThread(void*)>:
c00106d9:	83 ec 0c             	sub    esp,0xc
c00106dc:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00106e3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00106ea:	75 01                	jne    c00106ed <KePowerThread(void*)+0x14>
c00106ec:	fb                   	sti    
c00106ed:	50                   	push   eax
c00106ee:	50                   	push   eax
c00106ef:	6a 00                	push   0x0
c00106f1:	6a 0a                	push   0xa
c00106f3:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00106fa:	e8 31 68 00 00       	call   c0016f30 <sleep(unsigned long long)>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c0010709:	eb e2                	jmp    c00106ed <KePowerThread(void*)+0x14>

c001070b <KeChangePowerSettings(PowerSettings)>:
c001070b:	57                   	push   edi
c001070c:	b9 09 00 00 00       	mov    ecx,0x9
c0010711:	56                   	push   esi
c0010712:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c0010717:	fc                   	cld    
c0010718:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001071c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001071e:	5e                   	pop    esi
c001071f:	5f                   	pop    edi
c0010720:	c3                   	ret    

c0010721 <KeUserIOReceived()>:
c0010721:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001072b:	c3                   	ret    

c001072c <KeHandlePowerButton()>:
c001072c:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0010731:	83 f8 02             	cmp    eax,0x2
c0010734:	75 05                	jne    c001073b <KeHandlePowerButton()+0xf>
c0010736:	e9 25 db ff ff       	jmp    c000e260 <KeShutdown()>
c001073b:	48                   	dec    eax
c001073c:	75 05                	jne    c0010743 <KeHandlePowerButton()+0x17>
c001073e:	e9 41 db ff ff       	jmp    c000e284 <KeSleep()>
c0010743:	c3                   	ret    

c0010744 <KeHandleSleepButton()>:
c0010744:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010749:	83 f8 02             	cmp    eax,0x2
c001074c:	75 05                	jne    c0010753 <KeHandleSleepButton()+0xf>
c001074e:	e9 0d db ff ff       	jmp    c000e260 <KeShutdown()>
c0010753:	48                   	dec    eax
c0010754:	75 05                	jne    c001075b <KeHandleSleepButton()+0x17>
c0010756:	e9 29 db ff ff       	jmp    c000e284 <KeSleep()>
c001075b:	c3                   	ret    

c001075c <KeSetupPowerManager()>:
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	68 f0 00 00 00       	push   0xf0
c0010764:	6a 00                	push   0x0
c0010766:	68 d9 06 01 c0       	push   0xc00106d9
c001076b:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0010771:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001077b:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010782:	e8 1d 63 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c0010787:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c0010791:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c001079b:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c00107a5:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c00107af:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c00107b9:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c00107c3:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c00107cd:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c00107d7:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c00107e1:	83 c4 1c             	add    esp,0x1c
c00107e4:	c3                   	ret    

c00107e5 <KeRand()>:
c00107e5:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c00107ef:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c00107f9:	53                   	push   ebx
c00107fa:	01 c1                	add    ecx,eax
c00107fc:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010801:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c0010807:	01 ca                	add    edx,ecx
c0010809:	05 ef 04 b5 00       	add    eax,0xb504ef
c001080e:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010813:	83 d2 00             	adc    edx,0x0
c0010816:	0f b7 da             	movzx  ebx,dx
c0010819:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c001081f:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010823:	5b                   	pop    ebx
c0010824:	c3                   	ret    

c0010825 <KeSeedRand(unsigned int)>:
c0010825:	53                   	push   ebx
c0010826:	83 ec 08             	sub    esp,0x8
c0010829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001082d:	e8 bd 97 00 00       	call   c0019fef <HalGetRand()>
c0010832:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c001083c:	31 d8                	xor    eax,ebx
c001083e:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010843:	e8 9d ff ff ff       	call   c00107e5 <KeRand()>
c0010848:	83 c4 08             	add    esp,0x8
c001084b:	5b                   	pop    ebx
c001084c:	eb 97                	jmp    c00107e5 <KeRand()>

c001084e <KeInitRand()>:
c001084e:	83 ec 0c             	sub    esp,0xc
c0010851:	e8 bd 95 00 00       	call   c0019e13 <HalQueryPerformanceCounter()>
c0010856:	0f 20 da             	mov    edx,cr3
c0010859:	0f 22 da             	mov    cr3,edx
c001085c:	0f 20 da             	mov    edx,cr3
c001085f:	0f 22 da             	mov    cr3,edx
c0010862:	0f 20 da             	mov    edx,cr3
c0010865:	0f 22 da             	mov    cr3,edx
c0010868:	0f 20 da             	mov    edx,cr3
c001086b:	0f 22 da             	mov    cr3,edx
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010876:	50                   	push   eax
c0010877:	e8 a9 ff ff ff       	call   c0010825 <KeSeedRand(unsigned int)>
c001087c:	83 c4 1c             	add    esp,0x1c
c001087f:	c3                   	ret    

c0010880 <KeResolveCompatibilitySymbol(char*)>:
c0010880:	83 ec 0c             	sub    esp,0xc
c0010883:	83 ec 08             	sub    esp,0x8
c0010886:	68 6c 3f 02 c0       	push   0xc0023f6c
c001088b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001088f:	e8 ec fe fe ff       	call   c0000780 <strcmp>
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	85 c0                	test   eax,eax
c0010899:	0f 94 c0             	sete   al
c001089c:	0f b6 c0             	movzx  eax,al
c001089f:	85 c0                	test   eax,eax
c00108a1:	74 0d                	je     c00108b0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00108a3:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c00108a8:	e9 8b 01 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00108ad:	8d 76 00             	lea    esi,[esi+0x0]
c00108b0:	83 ec 08             	sub    esp,0x8
c00108b3:	68 75 3f 02 c0       	push   0xc0023f75
c00108b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108bc:	e8 bf fe fe ff       	call   c0000780 <strcmp>
c00108c1:	83 c4 10             	add    esp,0x10
c00108c4:	85 c0                	test   eax,eax
c00108c6:	0f 94 c0             	sete   al
c00108c9:	0f b6 c0             	movzx  eax,al
c00108cc:	85 c0                	test   eax,eax
c00108ce:	74 0c                	je     c00108dc <KeResolveCompatibilitySymbol(char*)+0x5c>
c00108d0:	b8 c4 16 02 c0       	mov    eax,0xc00216c4
c00108d5:	e9 5e 01 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00108da:	66 90                	xchg   ax,ax
c00108dc:	83 ec 08             	sub    esp,0x8
c00108df:	68 7f 3f 02 c0       	push   0xc0023f7f
c00108e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e8:	e8 93 fe fe ff       	call   c0000780 <strcmp>
c00108ed:	83 c4 10             	add    esp,0x10
c00108f0:	85 c0                	test   eax,eax
c00108f2:	0f 94 c0             	sete   al
c00108f5:	0f b6 c0             	movzx  eax,al
c00108f8:	85 c0                	test   eax,eax
c00108fa:	74 0c                	je     c0010908 <KeResolveCompatibilitySymbol(char*)+0x88>
c00108fc:	b8 f8 13 02 c0       	mov    eax,0xc00213f8
c0010901:	e9 32 01 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010906:	66 90                	xchg   ax,ax
c0010908:	83 ec 08             	sub    esp,0x8
c001090b:	68 88 3f 02 c0       	push   0xc0023f88
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	e8 67 fe fe ff       	call   c0000780 <strcmp>
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	85 c0                	test   eax,eax
c001091e:	0f 94 c0             	sete   al
c0010921:	0f b6 c0             	movzx  eax,al
c0010924:	85 c0                	test   eax,eax
c0010926:	74 0c                	je     c0010934 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010928:	b8 f6 fd 00 c0       	mov    eax,0xc000fdf6
c001092d:	e9 06 01 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010932:	66 90                	xchg   ax,ax
c0010934:	83 ec 08             	sub    esp,0x8
c0010937:	68 9b 3f 02 c0       	push   0xc0023f9b
c001093c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010940:	e8 3b fe fe ff       	call   c0000780 <strcmp>
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	85 c0                	test   eax,eax
c001094a:	0f 94 c0             	sete   al
c001094d:	0f b6 c0             	movzx  eax,al
c0010950:	85 c0                	test   eax,eax
c0010952:	74 0c                	je     c0010960 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010954:	b8 67 d1 00 c0       	mov    eax,0xc000d167
c0010959:	e9 da 00 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001095e:	66 90                	xchg   ax,ax
c0010960:	83 ec 08             	sub    esp,0x8
c0010963:	68 b8 3f 02 c0       	push   0xc0023fb8
c0010968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096c:	e8 0f fe fe ff       	call   c0000780 <strcmp>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	85 c0                	test   eax,eax
c0010976:	0f 94 c0             	sete   al
c0010979:	0f b6 c0             	movzx  eax,al
c001097c:	85 c0                	test   eax,eax
c001097e:	74 0c                	je     c001098c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010980:	b8 c4 17 02 c0       	mov    eax,0xc00217c4
c0010985:	e9 ae 00 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001098a:	66 90                	xchg   ax,ax
c001098c:	83 ec 08             	sub    esp,0x8
c001098f:	68 c2 3f 02 c0       	push   0xc0023fc2
c0010994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010998:	e8 e3 fd fe ff       	call   c0000780 <strcmp>
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	85 c0                	test   eax,eax
c00109a2:	0f 94 c0             	sete   al
c00109a5:	0f b6 c0             	movzx  eax,al
c00109a8:	85 c0                	test   eax,eax
c00109aa:	74 0c                	je     c00109b8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00109ac:	b8 44 15 02 c0       	mov    eax,0xc0021544
c00109b1:	e9 82 00 00 00       	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109b6:	66 90                	xchg   ax,ax
c00109b8:	83 ec 08             	sub    esp,0x8
c00109bb:	68 cb 3f 02 c0       	push   0xc0023fcb
c00109c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c4:	e8 b7 fd fe ff       	call   c0000780 <strcmp>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	85 c0                	test   eax,eax
c00109ce:	0f 94 c0             	sete   al
c00109d1:	0f b6 c0             	movzx  eax,al
c00109d4:	85 c0                	test   eax,eax
c00109d6:	74 08                	je     c00109e0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00109d8:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c00109dd:	eb 59                	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109df:	90                   	nop
c00109e0:	83 ec 08             	sub    esp,0x8
c00109e3:	68 e3 3f 02 c0       	push   0xc0023fe3
c00109e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ec:	e8 8f fd fe ff       	call   c0000780 <strcmp>
c00109f1:	83 c4 10             	add    esp,0x10
c00109f4:	85 c0                	test   eax,eax
c00109f6:	0f 94 c0             	sete   al
c00109f9:	0f b6 c0             	movzx  eax,al
c00109fc:	85 c0                	test   eax,eax
c00109fe:	74 08                	je     c0010a08 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010a00:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010a05:	eb 31                	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a07:	90                   	nop
c0010a08:	83 ec 08             	sub    esp,0x8
c0010a0b:	68 f0 3f 02 c0       	push   0xc0023ff0
c0010a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a14:	e8 67 fd fe ff       	call   c0000780 <strcmp>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	85 c0                	test   eax,eax
c0010a1e:	0f 94 c0             	sete   al
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	85 c0                	test   eax,eax
c0010a26:	74 08                	je     c0010a30 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010a28:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010a2d:	eb 09                	jmp    c0010a38 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a2f:	90                   	nop
c0010a30:	b8 00 00 00 00       	mov    eax,0x0
c0010a35:	8d 76 00             	lea    esi,[esi+0x0]
c0010a38:	83 c4 0c             	add    esp,0xc
c0010a3b:	c3                   	ret    

c0010a3c <Semaphore::Semaphore(int)>:
c0010a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a44:	89 10                	mov    DWORD PTR [eax],edx
c0010a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a4a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010a51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010a67:	90                   	nop
c0010a68:	c3                   	ret    
c0010a69:	90                   	nop
c0010a6a:	66 90                	xchg   ax,ax

c0010a6c <Semaphore::tryAcquire()>:
c0010a6c:	83 ec 0c             	sub    esp,0xc
c0010a6f:	fa                   	cli    
c0010a70:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010a75:	83 c0 01             	add    eax,0x1
c0010a78:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010a7d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010a82:	83 c0 01             	add    eax,0x1
c0010a85:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a8e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a97:	39 c2                	cmp    edx,eax
c0010a99:	7d 59                	jge    c0010af4 <Semaphore::tryAcquire()+0x88>
c0010a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010aa2:	8d 50 01             	lea    edx,[eax+0x1]
c0010aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010aac:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ab1:	83 e8 01             	sub    eax,0x1
c0010ab4:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ab9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010abe:	85 c0                	test   eax,eax
c0010ac0:	75 1a                	jne    c0010adc <Semaphore::tryAcquire()+0x70>
c0010ac2:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010ac7:	85 c0                	test   eax,eax
c0010ac9:	74 11                	je     c0010adc <Semaphore::tryAcquire()+0x70>
c0010acb:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010ad5:	e8 4a 62 00 00       	call   c0016d24 <schedule()>
c0010ada:	66 90                	xchg   ax,ax
c0010adc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010ae4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010ae9:	85 c0                	test   eax,eax
c0010aeb:	75 03                	jne    c0010af0 <Semaphore::tryAcquire()+0x84>
c0010aed:	fb                   	sti    
c0010aee:	66 90                	xchg   ax,ax
c0010af0:	b0 01                	mov    al,0x1
c0010af2:	eb 48                	jmp    c0010b3c <Semaphore::tryAcquire()+0xd0>
c0010af4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010af9:	83 e8 01             	sub    eax,0x1
c0010afc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b01:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b06:	85 c0                	test   eax,eax
c0010b08:	75 1a                	jne    c0010b24 <Semaphore::tryAcquire()+0xb8>
c0010b0a:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010b0f:	85 c0                	test   eax,eax
c0010b11:	74 11                	je     c0010b24 <Semaphore::tryAcquire()+0xb8>
c0010b13:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010b1d:	e8 02 62 00 00       	call   c0016d24 <schedule()>
c0010b22:	66 90                	xchg   ax,ax
c0010b24:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010b2c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b31:	85 c0                	test   eax,eax
c0010b33:	75 03                	jne    c0010b38 <Semaphore::tryAcquire()+0xcc>
c0010b35:	fb                   	sti    
c0010b36:	66 90                	xchg   ax,ax
c0010b38:	b0 00                	mov    al,0x0
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	83 c4 0c             	add    esp,0xc
c0010b3f:	c3                   	ret    

c0010b40 <Semaphore::assertLocked(char const*)>:
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	fa                   	cli    
c0010b44:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b49:	83 c0 01             	add    eax,0x1
c0010b4c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010b51:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b56:	83 c0 01             	add    eax,0x1
c0010b59:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b62:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b6b:	39 c2                	cmp    edx,eax
c0010b6d:	7d 11                	jge    c0010b80 <Semaphore::assertLocked(char const*)+0x40>
c0010b6f:	83 ec 0c             	sub    esp,0xc
c0010b72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b76:	e8 7b f2 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0010b7b:	83 c4 10             	add    esp,0x10
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b85:	83 e8 01             	sub    eax,0x1
c0010b88:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b8d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b92:	85 c0                	test   eax,eax
c0010b94:	75 1a                	jne    c0010bb0 <Semaphore::assertLocked(char const*)+0x70>
c0010b96:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010b9b:	85 c0                	test   eax,eax
c0010b9d:	74 11                	je     c0010bb0 <Semaphore::assertLocked(char const*)+0x70>
c0010b9f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010ba9:	e8 76 61 00 00       	call   c0016d24 <schedule()>
c0010bae:	66 90                	xchg   ax,ax
c0010bb0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010bb8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010bbd:	85 c0                	test   eax,eax
c0010bbf:	75 03                	jne    c0010bc4 <Semaphore::assertLocked(char const*)+0x84>
c0010bc1:	fb                   	sti    
c0010bc2:	66 90                	xchg   ax,ax
c0010bc4:	90                   	nop
c0010bc5:	83 c4 0c             	add    esp,0xc
c0010bc8:	c3                   	ret    
c0010bc9:	90                   	nop
c0010bca:	66 90                	xchg   ax,ax

c0010bcc <Semaphore::acquire(int)>:
c0010bcc:	83 ec 1c             	sub    esp,0x1c
c0010bcf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010bd4:	0f 84 ae 00 00 00    	je     c0010c88 <Semaphore::acquire(int)+0xbc>
c0010bda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010be2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010be7:	90                   	nop
c0010be8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010bed:	85 c0                	test   eax,eax
c0010bef:	0f 84 87 00 00 00    	je     c0010c7c <Semaphore::acquire(int)+0xb0>
c0010bf5:	83 ec 0c             	sub    esp,0xc
c0010bf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bfc:	e8 6b fe ff ff       	call   c0010a6c <Semaphore::tryAcquire()>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	83 f0 01             	xor    eax,0x1
c0010c07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c0b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010c0f:	83 f0 01             	xor    eax,0x1
c0010c12:	0f b6 c0             	movzx  eax,al
c0010c15:	85 c0                	test   eax,eax
c0010c17:	75 5f                	jne    c0010c78 <Semaphore::acquire(int)+0xac>
c0010c19:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010c1e:	7f 34                	jg     c0010c54 <Semaphore::acquire(int)+0x88>
c0010c20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c24:	89 d0                	mov    eax,edx
c0010c26:	c1 e0 02             	shl    eax,0x2
c0010c29:	01 d0                	add    eax,edx
c0010c2b:	d1 e0                	shl    eax,1
c0010c2d:	89 c2                	mov    edx,eax
c0010c2f:	c1 fa 1f             	sar    edx,0x1f
c0010c32:	83 ec 08             	sub    esp,0x8
c0010c35:	52                   	push   edx
c0010c36:	50                   	push   eax
c0010c37:	e8 dc 62 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c43:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010c47:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010c4f:	eb 97                	jmp    c0010be8 <Semaphore::acquire(int)+0x1c>
c0010c51:	8d 76 00             	lea    esi,[esi+0x0]
c0010c54:	83 ec 08             	sub    esp,0x8
c0010c57:	6a 00                	push   0x0
c0010c59:	68 90 01 00 00       	push   0x190
c0010c5e:	e8 b5 62 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010c6b:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010c70:	e9 73 ff ff ff       	jmp    c0010be8 <Semaphore::acquire(int)+0x1c>
c0010c75:	8d 76 00             	lea    esi,[esi+0x0]
c0010c78:	90                   	nop
c0010c79:	8d 76 00             	lea    esi,[esi+0x0]
c0010c7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c80:	e9 fb 00 00 00       	jmp    c0010d80 <Semaphore::acquire(int)+0x1b4>
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]
c0010c88:	fa                   	cli    
c0010c89:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c8e:	83 c0 01             	add    eax,0x1
c0010c91:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010c96:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c9b:	83 c0 01             	add    eax,0x1
c0010c9e:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb0:	39 c2                	cmp    edx,eax
c0010cb2:	7d 14                	jge    c0010cc8 <Semaphore::acquire(int)+0xfc>
c0010cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cbb:	8d 50 01             	lea    edx,[eax+0x1]
c0010cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cc2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cc5:	eb 6d                	jmp    c0010d34 <Semaphore::acquire(int)+0x168>
c0010cc7:	90                   	nop
c0010cc8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ccf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cdd:	85 c0                	test   eax,eax
c0010cdf:	75 13                	jne    c0010cf4 <Semaphore::acquire(int)+0x128>
c0010ce1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ce6:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cef:	eb 17                	jmp    c0010d08 <Semaphore::acquire(int)+0x13c>
c0010cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cfd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d00:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d02:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d05:	8d 76 00             	lea    esi,[esi+0x0]
c0010d08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d16:	83 ec 0c             	sub    esp,0xc
c0010d19:	68 00 40 02 c0       	push   0xc0024000
c0010d1e:	e8 2b 62 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	83 ec 0c             	sub    esp,0xc
c0010d29:	6a 05                	push   0x5
c0010d2b:	e8 b4 60 00 00       	call   c0016de4 <blockTask(TaskState)>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	90                   	nop
c0010d34:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d39:	83 e8 01             	sub    eax,0x1
c0010d3c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d41:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d46:	85 c0                	test   eax,eax
c0010d48:	75 1a                	jne    c0010d64 <Semaphore::acquire(int)+0x198>
c0010d4a:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d4f:	85 c0                	test   eax,eax
c0010d51:	74 11                	je     c0010d64 <Semaphore::acquire(int)+0x198>
c0010d53:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d5d:	e8 c2 5f 00 00       	call   c0016d24 <schedule()>
c0010d62:	66 90                	xchg   ax,ax
c0010d64:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d6c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 03                	jne    c0010d78 <Semaphore::acquire(int)+0x1ac>
c0010d75:	fb                   	sti    
c0010d76:	66 90                	xchg   ax,ax
c0010d78:	b8 00 00 00 00       	mov    eax,0x0
c0010d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d80:	83 c4 1c             	add    esp,0x1c
c0010d83:	c3                   	ret    

c0010d84 <Semaphore::acquire()>:
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	83 ec 08             	sub    esp,0x8
c0010d8a:	6a 00                	push   0x0
c0010d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d90:	e8 37 fe ff ff       	call   c0010bcc <Semaphore::acquire(int)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	90                   	nop
c0010d99:	83 c4 0c             	add    esp,0xc
c0010d9c:	c3                   	ret    
c0010d9d:	90                   	nop
c0010d9e:	66 90                	xchg   ax,ax

c0010da0 <Semaphore::release()>:
c0010da0:	83 ec 1c             	sub    esp,0x1c
c0010da3:	fa                   	cli    
c0010da4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010da9:	83 c0 01             	add    eax,0x1
c0010dac:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010db1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010db6:	83 c0 01             	add    eax,0x1
c0010db9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc5:	85 c0                	test   eax,eax
c0010dc7:	74 2b                	je     c0010df4 <Semaphore::release()+0x54>
c0010dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dd8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ddf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010de2:	83 ec 0c             	sub    esp,0xc
c0010de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010de9:	e8 8e 62 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0010dee:	83 c4 10             	add    esp,0x10
c0010df1:	eb 15                	jmp    c0010e08 <Semaphore::release()+0x68>
c0010df3:	90                   	nop
c0010df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dfb:	8d 50 ff             	lea    edx,[eax-0x1]
c0010dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e05:	8d 76 00             	lea    esi,[esi+0x0]
c0010e08:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e0d:	83 e8 01             	sub    eax,0x1
c0010e10:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e15:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e1a:	85 c0                	test   eax,eax
c0010e1c:	75 1a                	jne    c0010e38 <Semaphore::release()+0x98>
c0010e1e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010e23:	85 c0                	test   eax,eax
c0010e25:	74 11                	je     c0010e38 <Semaphore::release()+0x98>
c0010e27:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010e31:	e8 ee 5e 00 00       	call   c0016d24 <schedule()>
c0010e36:	66 90                	xchg   ax,ax
c0010e38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010e40:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010e45:	85 c0                	test   eax,eax
c0010e47:	75 03                	jne    c0010e4c <Semaphore::release()+0xac>
c0010e49:	fb                   	sti    
c0010e4a:	66 90                	xchg   ax,ax
c0010e4c:	90                   	nop
c0010e4d:	83 c4 1c             	add    esp,0x1c
c0010e50:	c3                   	ret    

c0010e51 <KiSigKill(int)>:
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	6a 00                	push   0x0
c0010e56:	6a 00                	push   0x0
c0010e58:	6a ff                	push   0xffffffff
c0010e5a:	6a 01                	push   0x1
c0010e5c:	e8 f1 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e61:	83 c4 1c             	add    esp,0x1c
c0010e64:	c3                   	ret    

c0010e65 <KiDefaultSignalHandlerIgnore(int)>:
c0010e65:	c3                   	ret    

c0010e66 <KiDefaultSignalHandlerPause(int)>:
c0010e66:	57                   	push   edi
c0010e67:	b9 07 00 00 00       	mov    ecx,0x7
c0010e6c:	56                   	push   esi
c0010e6d:	be 5b 40 02 c0       	mov    esi,0xc002405b
c0010e72:	83 ec 24             	sub    esp,0x24
c0010e75:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010e79:	fc                   	cld    
c0010e7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e7c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010e80:	50                   	push   eax
c0010e81:	6a 00                	push   0x0
c0010e83:	6a 00                	push   0x0
c0010e85:	6a 27                	push   0x27
c0010e87:	e8 c6 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e8c:	83 c4 34             	add    esp,0x34
c0010e8f:	5e                   	pop    esi
c0010e90:	5f                   	pop    edi
c0010e91:	c3                   	ret    

c0010e92 <KiDefaultSignalHandlerResume(int)>:
c0010e92:	57                   	push   edi
c0010e93:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010e98:	56                   	push   esi
c0010e99:	be 77 40 02 c0       	mov    esi,0xc0024077
c0010e9e:	83 ec 24             	sub    esp,0x24
c0010ea1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ea5:	fc                   	cld    
c0010ea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ea8:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010eac:	50                   	push   eax
c0010ead:	6a 00                	push   0x0
c0010eaf:	6a 00                	push   0x0
c0010eb1:	6a 27                	push   0x27
c0010eb3:	e8 9a 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010eb8:	83 c4 34             	add    esp,0x34
c0010ebb:	5e                   	pop    esi
c0010ebc:	5f                   	pop    edi
c0010ebd:	c3                   	ret    

c0010ebe <KeDeinitSignals(SigHandlerBlock*)>:
c0010ebe:	e9 fd eb ff ff       	jmp    c000fac0 <free>

c0010ec3 <KeInitSignals()>:
c0010ec3:	53                   	push   ebx
c0010ec4:	83 ec 14             	sub    esp,0x14
c0010ec7:	68 c8 00 00 00       	push   0xc8
c0010ecc:	e8 df eb ff ff       	call   c000fab0 <malloc>
c0010ed1:	83 c4 0c             	add    esp,0xc
c0010ed4:	6a 04                	push   0x4
c0010ed6:	6a 00                	push   0x0
c0010ed8:	50                   	push   eax
c0010ed9:	89 c3                	mov    ebx,eax
c0010edb:	e8 10 f6 fe ff       	call   c00004f0 <memset>
c0010ee0:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010ee6:	83 c4 0c             	add    esp,0xc
c0010ee9:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010ef3:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010efd:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f04:	6a 20                	push   0x20
c0010f06:	6a 00                	push   0x0
c0010f08:	50                   	push   eax
c0010f09:	e8 e2 f5 fe ff       	call   c00004f0 <memset>
c0010f0e:	83 c4 0c             	add    esp,0xc
c0010f11:	6a 44                	push   0x44
c0010f13:	6a 00                	push   0x0
c0010f15:	53                   	push   ebx
c0010f16:	e8 d5 f5 fe ff       	call   c00004f0 <memset>
c0010f1b:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010f21:	83 c4 0c             	add    esp,0xc
c0010f24:	6a 11                	push   0x11
c0010f26:	6a 00                	push   0x0
c0010f28:	50                   	push   eax
c0010f29:	e8 c2 f5 fe ff       	call   c00004f0 <memset>
c0010f2e:	83 c4 18             	add    esp,0x18
c0010f31:	89 d8                	mov    eax,ebx
c0010f33:	5b                   	pop    ebx
c0010f34:	c3                   	ret    

c0010f35 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f35:	53                   	push   ebx
c0010f36:	b8 01 00 00 00       	mov    eax,0x1
c0010f3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f43:	83 f9 10             	cmp    ecx,0x10
c0010f46:	7f 21                	jg     c0010f69 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010f4f:	89 03                	mov    DWORD PTR [ebx],eax
c0010f51:	b8 01 00 00 00       	mov    eax,0x1
c0010f56:	d3 e0                	shl    eax,cl
c0010f58:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010f5c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010f5f:	31 c0                	xor    eax,eax
c0010f61:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010f69:	5b                   	pop    ebx
c0010f6a:	c3                   	ret    

c0010f6b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010f6b:	55                   	push   ebp
c0010f6c:	57                   	push   edi
c0010f6d:	bf 08 00 00 00       	mov    edi,0x8
c0010f72:	56                   	push   esi
c0010f73:	53                   	push   ebx
c0010f74:	83 ec 14             	sub    esp,0x14
c0010f77:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010f7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f7f:	68 94 40 02 c0       	push   0xc0024094
c0010f84:	e8 c5 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010f89:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010f8f:	83 c4 10             	add    esp,0x10
c0010f92:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010f99:	31 c9                	xor    ecx,ecx
c0010f9b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010f9f:	99                   	cdq    
c0010fa0:	f7 ff                	idiv   edi
c0010fa2:	8d 42 24             	lea    eax,[edx+0x24]
c0010fa5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010fa9:	85 f6                	test   esi,esi
c0010fab:	75 1a                	jne    c0010fc7 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010fad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010fb1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010fb5:	50                   	push   eax
c0010fb6:	50                   	push   eax
c0010fb7:	52                   	push   edx
c0010fb8:	68 aa 40 02 c0       	push   0xc00240aa
c0010fbd:	e8 8c 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010fc2:	83 c4 10             	add    esp,0x10
c0010fc5:	eb 1b                	jmp    c0010fe2 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010fc7:	41                   	inc    ecx
c0010fc8:	83 f9 08             	cmp    ecx,0x8
c0010fcb:	75 ce                	jne    c0010f9b <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010fcd:	83 ec 0c             	sub    esp,0xc
c0010fd0:	be 01 00 00 00       	mov    esi,0x1
c0010fd5:	68 cb 40 02 c0       	push   0xc00240cb
c0010fda:	e8 6f 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	83 c4 0c             	add    esp,0xc
c0010fe5:	89 f0                	mov    eax,esi
c0010fe7:	5b                   	pop    ebx
c0010fe8:	5e                   	pop    esi
c0010fe9:	5f                   	pop    edi
c0010fea:	5d                   	pop    ebp
c0010feb:	c3                   	ret    

c0010fec <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010fec:	55                   	push   ebp
c0010fed:	57                   	push   edi
c0010fee:	56                   	push   esi
c0010fef:	53                   	push   ebx
c0010ff0:	83 ec 1c             	sub    esp,0x1c
c0010ff3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010ff7:	85 db                	test   ebx,ebx
c0010ff9:	0f 84 e0 00 00 00    	je     c00110df <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010fff:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011006:	0f 84 d3 00 00 00    	je     c00110df <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001100c:	31 c9                	xor    ecx,ecx
c001100e:	bf 08 00 00 00       	mov    edi,0x8
c0011013:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011019:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001101c:	99                   	cdq    
c001101d:	f7 ff                	idiv   edi
c001101f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011026:	85 ed                	test   ebp,ebp
c0011028:	0f 84 d2 00 00 00    	je     c0011100 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001102e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011034:	89 e9                	mov    ecx,ebp
c0011036:	bf 01 00 00 00       	mov    edi,0x1
c001103b:	d3 e7                	shl    edi,cl
c001103d:	31 c9                	xor    ecx,ecx
c001103f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011043:	b8 01 00 00 00       	mov    eax,0x1
c0011048:	d3 e0                	shl    eax,cl
c001104a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001104e:	74 0a                	je     c001105a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011050:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011054:	0f 85 85 00 00 00    	jne    c00110df <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001105a:	41                   	inc    ecx
c001105b:	83 f9 11             	cmp    ecx,0x11
c001105e:	75 e3                	jne    c0011043 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011064:	46                   	inc    esi
c0011065:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001106b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011076:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001107d:	09 f8                	or     eax,edi
c001107f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011085:	31 c0                	xor    eax,eax
c0011087:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001108f:	74 09                	je     c001109a <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011091:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011098:	eb 06                	jmp    c00110a0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c001109a:	40                   	inc    eax
c001109b:	83 f8 08             	cmp    eax,0x8
c001109e:	75 e7                	jne    c0011087 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00110a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00110a4:	83 fd 09             	cmp    ebp,0x9
c00110a7:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00110aa:	89 2a                	mov    DWORD PTR [edx],ebp
c00110ac:	75 14                	jne    c00110c2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00110ae:	83 ec 0c             	sub    esp,0xc
c00110b1:	68 dc 40 02 c0       	push   0xc00240dc
c00110b6:	e8 93 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00110bb:	b8 51 0e 01 c0       	mov    eax,0xc0010e51
c00110c0:	eb 39                	jmp    c00110fb <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c00110c2:	83 f8 01             	cmp    eax,0x1
c00110c5:	75 1c                	jne    c00110e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c00110c7:	83 ec 0c             	sub    esp,0xc
c00110ca:	f7 d7                	not    edi
c00110cc:	68 e6 40 02 c0       	push   0xc00240e6
c00110d1:	e8 78 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00110df:	31 c0                	xor    eax,eax
c00110e1:	eb 30                	jmp    c0011113 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00110e3:	85 c0                	test   eax,eax
c00110e5:	75 2c                	jne    c0011113 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00110e7:	83 ec 0c             	sub    esp,0xc
c00110ea:	68 f3 40 02 c0       	push   0xc00240f3
c00110ef:	e8 5a 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00110f4:	8b 04 ad a0 63 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9c60]
c00110fb:	83 c4 10             	add    esp,0x10
c00110fe:	eb 13                	jmp    c0011113 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011100:	41                   	inc    ecx
c0011101:	46                   	inc    esi
c0011102:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011108:	83 f9 08             	cmp    ecx,0x8
c001110b:	0f 85 02 ff ff ff    	jne    c0011013 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011111:	eb cc                	jmp    c00110df <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011113:	83 c4 1c             	add    esp,0x1c
c0011116:	5b                   	pop    ebx
c0011117:	5e                   	pop    esi
c0011118:	5f                   	pop    edi
c0011119:	5d                   	pop    ebp
c001111a:	c3                   	ret    

c001111b <KiCheckSignalZ>:
c001111b:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c0011122:	74 43                	je     c0011167 <KiCheckSignalZ+0x4c>
c0011124:	83 ec 24             	sub    esp,0x24
c0011127:	8d 44 24 14          	lea    eax,[esp+0x14]
c001112b:	50                   	push   eax
c001112c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011131:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011134:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001113a:	e8 ad fe ff ff       	call   c0010fec <KeCheckSignal(SigHandlerBlock*, int*)>
c001113f:	83 c4 10             	add    esp,0x10
c0011142:	31 d2                	xor    edx,edx
c0011144:	85 c0                	test   eax,eax
c0011146:	74 19                	je     c0011161 <KiCheckSignalZ+0x46>
c0011148:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001114e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011151:	89 02                	mov    DWORD PTR [edx],eax
c0011153:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001115a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001115e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011161:	89 d0                	mov    eax,edx
c0011163:	83 c4 1c             	add    esp,0x1c
c0011166:	c3                   	ret    
c0011167:	31 d2                	xor    edx,edx
c0011169:	89 d0                	mov    eax,edx
c001116b:	c3                   	ret    

c001116c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001116c:	56                   	push   esi
c001116d:	53                   	push   ebx
c001116e:	bb 01 00 00 00       	mov    ebx,0x1
c0011173:	52                   	push   edx
c0011174:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011178:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001117c:	d3 e3                	shl    ebx,cl
c001117e:	83 f9 10             	cmp    ecx,0x10
c0011181:	7f 08                	jg     c001118b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011183:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011189:	75 10                	jne    c001119b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001118b:	83 ec 0c             	sub    esp,0xc
c001118e:	68 16 41 02 c0       	push   0xc0024116
c0011193:	e8 5e ec ff ff       	call   c000fdf6 <KePanic(char const*)>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	f7 d3                	not    ebx
c001119d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111a3:	58                   	pop    eax
c00111a4:	5b                   	pop    ebx
c00111a5:	5e                   	pop    esi
c00111a6:	c3                   	ret    

c00111a7 <KiFinishSignalZ>:
c00111a7:	53                   	push   ebx
c00111a8:	83 ec 08             	sub    esp,0x8
c00111ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00111b7:	83 fa 08             	cmp    edx,0x8
c00111ba:	75 0c                	jne    c00111c8 <KiFinishSignalZ+0x21>
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	50                   	push   eax
c00111c0:	e8 b7 5e 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c00111c5:	83 c4 10             	add    esp,0x10
c00111c8:	50                   	push   eax
c00111c9:	50                   	push   eax
c00111ca:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00111cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111d5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00111db:	e8 8c ff ff ff       	call   c001116c <KeCompleteSignal(SigHandlerBlock*, int)>
c00111e0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111e6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111ed:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00111f4:	83 c4 18             	add    esp,0x18
c00111f7:	5b                   	pop    ebx
c00111f8:	c3                   	ret    

c00111f9 <SysSeekDir(regs*)>:
c00111f9:	31 c0                	xor    eax,eax
c00111fb:	31 d2                	xor    edx,edx
c00111fd:	c3                   	ret    

c00111fe <SysTellDir(regs*)>:
c00111fe:	31 c0                	xor    eax,eax
c0011200:	31 d2                	xor    edx,edx
c0011202:	c3                   	ret    

c0011203 <SysVerify(regs*)>:
c0011203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011207:	31 d2                	xor    edx,edx
c0011209:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001120c:	c3                   	ret    

c001120d <SysGetArgc(regs*)>:
c001120d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011212:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011215:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001121b:	89 c2                	mov    edx,eax
c001121d:	c1 fa 1f             	sar    edx,0x1f
c0011220:	c3                   	ret    

c0011221 <SysTTYName(regs*)>:
c0011221:	b8 01 00 00 00       	mov    eax,0x1
c0011226:	31 d2                	xor    edx,edx
c0011228:	c3                   	ret    

c0011229 <SysFormatDisk(regs*)>:
c0011229:	56                   	push   esi
c001122a:	53                   	push   ebx
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011232:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011238:	eb 2a                	jmp    c0011264 <SysFormatDisk(regs*)+0x3b>
c001123a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001123d:	83 ec 0c             	sub    esp,0xc
c0011240:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011243:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011245:	51                   	push   ecx
c0011246:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011249:	51                   	push   ecx
c001124a:	50                   	push   eax
c001124b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0011252:	50                   	push   eax
c0011253:	53                   	push   ebx
c0011254:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011257:	83 c4 20             	add    esp,0x20
c001125a:	83 f8 08             	cmp    eax,0x8
c001125d:	89 c1                	mov    ecx,eax
c001125f:	75 14                	jne    c0011275 <SysFormatDisk(regs*)+0x4c>
c0011261:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011264:	85 db                	test   ebx,ebx
c0011266:	75 d2                	jne    c001123a <SysFormatDisk(regs*)+0x11>
c0011268:	b8 03 00 00 00       	mov    eax,0x3
c001126d:	31 d2                	xor    edx,edx
c001126f:	83 c4 04             	add    esp,0x4
c0011272:	5b                   	pop    ebx
c0011273:	5e                   	pop    esi
c0011274:	c3                   	ret    
c0011275:	85 c0                	test   eax,eax
c0011277:	74 13                	je     c001128c <SysFormatDisk(regs*)+0x63>
c0011279:	31 d2                	xor    edx,edx
c001127b:	83 f9 09             	cmp    ecx,0x9
c001127e:	b8 01 00 00 00       	mov    eax,0x1
c0011283:	74 ea                	je     c001126f <SysFormatDisk(regs*)+0x46>
c0011285:	b8 02 00 00 00       	mov    eax,0x2
c001128a:	eb e1                	jmp    c001126d <SysFormatDisk(regs*)+0x44>
c001128c:	31 c0                	xor    eax,eax
c001128e:	eb dd                	jmp    c001126d <SysFormatDisk(regs*)+0x44>

c0011290 <SysSetDiskVolumeLabel(regs*)>:
c0011290:	56                   	push   esi
c0011291:	53                   	push   ebx
c0011292:	83 ec 04             	sub    esp,0x4
c0011295:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011299:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001129c:	83 f8 19             	cmp    eax,0x19
c001129f:	77 33                	ja     c00112d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112a1:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00112a8:	85 c9                	test   ecx,ecx
c00112aa:	74 28                	je     c00112d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112ac:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00112af:	85 db                	test   ebx,ebx
c00112b1:	74 21                	je     c00112d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112b3:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00112b9:	85 d2                	test   edx,edx
c00112bb:	74 17                	je     c00112d4 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112bd:	8b 32                	mov    esi,DWORD PTR [edx]
c00112bf:	53                   	push   ebx
c00112c0:	50                   	push   eax
c00112c1:	51                   	push   ecx
c00112c2:	52                   	push   edx
c00112c3:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	83 c4 04             	add    esp,0x4
c00112cc:	5b                   	pop    ebx
c00112cd:	5e                   	pop    esi
c00112ce:	89 c2                	mov    edx,eax
c00112d0:	c1 fa 1f             	sar    edx,0x1f
c00112d3:	c3                   	ret    
c00112d4:	83 c4 04             	add    esp,0x4
c00112d7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00112dc:	5b                   	pop    ebx
c00112dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112e2:	5e                   	pop    esi
c00112e3:	c3                   	ret    

c00112e4 <SysGetDiskVolumeLabel(regs*)>:
c00112e4:	57                   	push   edi
c00112e5:	56                   	push   esi
c00112e6:	53                   	push   ebx
c00112e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112eb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00112ee:	83 fa 19             	cmp    edx,0x19
c00112f1:	77 3c                	ja     c001132f <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112f3:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c00112fa:	85 c9                	test   ecx,ecx
c00112fc:	74 31                	je     c001132f <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112fe:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011301:	85 db                	test   ebx,ebx
c0011303:	74 2a                	je     c001132f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011305:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011308:	85 f6                	test   esi,esi
c001130a:	74 23                	je     c001132f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001130c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011312:	85 c0                	test   eax,eax
c0011314:	74 19                	je     c001132f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	8b 38                	mov    edi,DWORD PTR [eax]
c001131b:	56                   	push   esi
c001131c:	53                   	push   ebx
c001131d:	52                   	push   edx
c001131e:	51                   	push   ecx
c001131f:	50                   	push   eax
c0011320:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011323:	83 c4 20             	add    esp,0x20
c0011326:	5b                   	pop    ebx
c0011327:	5e                   	pop    esi
c0011328:	89 c2                	mov    edx,eax
c001132a:	c1 fa 1f             	sar    edx,0x1f
c001132d:	5f                   	pop    edi
c001132e:	c3                   	ret    
c001132f:	5b                   	pop    ebx
c0011330:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011335:	ba ff ff ff ff       	mov    edx,0xffffffff
c001133a:	5e                   	pop    esi
c001133b:	5f                   	pop    edi
c001133c:	c3                   	ret    

c001133d <SysRealpath(regs*)>:
c001133d:	53                   	push   ebx
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011345:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011348:	85 c9                	test   ecx,ecx
c001134a:	74 36                	je     c0011382 <SysRealpath(regs*)+0x45>
c001134c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001134f:	31 d2                	xor    edx,edx
c0011351:	b8 01 00 00 00       	mov    eax,0x1
c0011356:	85 db                	test   ebx,ebx
c0011358:	75 05                	jne    c001135f <SysRealpath(regs*)+0x22>
c001135a:	83 c4 08             	add    esp,0x8
c001135d:	5b                   	pop    ebx
c001135e:	c3                   	ret    
c001135f:	6a 00                	push   0x0
c0011361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011366:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011369:	05 0c 01 00 00       	add    eax,0x10c
c001136e:	50                   	push   eax
c001136f:	51                   	push   ecx
c0011370:	53                   	push   ebx
c0011371:	e8 8a 6a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	31 c0                	xor    eax,eax
c001137b:	31 d2                	xor    edx,edx
c001137d:	83 c4 08             	add    esp,0x8
c0011380:	5b                   	pop    ebx
c0011381:	c3                   	ret    
c0011382:	b8 01 00 00 00       	mov    eax,0x1
c0011387:	31 d2                	xor    edx,edx
c0011389:	eb f2                	jmp    c001137d <SysRealpath(regs*)+0x40>

c001138b <SysReadDir(regs*)>:
c001138b:	53                   	push   ebx
c001138c:	83 ec 18             	sub    esp,0x18
c001138f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011393:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011396:	83 f8 02             	cmp    eax,0x2
c0011399:	76 4f                	jbe    c00113ea <SysReadDir(regs*)+0x5f>
c001139b:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00113a2:	77 52                	ja     c00113f6 <SysReadDir(regs*)+0x6b>
c00113a4:	83 ec 0c             	sub    esp,0xc
c00113a7:	50                   	push   eax
c00113a8:	e8 3c 1d 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	74 42                	je     c00113f6 <SysReadDir(regs*)+0x6b>
c00113b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00113c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00113c5:	51                   	push   ecx
c00113c6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113c9:	51                   	push   ecx
c00113ca:	6a 00                	push   0x0
c00113cc:	68 10 01 00 00       	push   0x110
c00113d1:	50                   	push   eax
c00113d2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113d5:	83 c4 20             	add    esp,0x20
c00113d8:	85 c0                	test   eax,eax
c00113da:	89 c1                	mov    ecx,eax
c00113dc:	74 27                	je     c0011405 <SysReadDir(regs*)+0x7a>
c00113de:	31 d2                	xor    edx,edx
c00113e0:	83 f9 07             	cmp    ecx,0x7
c00113e3:	b8 02 00 00 00       	mov    eax,0x2
c00113e8:	75 16                	jne    c0011400 <SysReadDir(regs*)+0x75>
c00113ea:	b8 01 00 00 00       	mov    eax,0x1
c00113ef:	31 d2                	xor    edx,edx
c00113f1:	83 c4 18             	add    esp,0x18
c00113f4:	5b                   	pop    ebx
c00113f5:	c3                   	ret    
c00113f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011400:	83 c4 18             	add    esp,0x18
c0011403:	5b                   	pop    ebx
c0011404:	c3                   	ret    
c0011405:	31 c0                	xor    eax,eax
c0011407:	31 d2                	xor    edx,edx
c0011409:	eb e6                	jmp    c00113f1 <SysReadDir(regs*)+0x66>

c001140b <SysIsATTY(regs*)>:
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011412:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011415:	83 f8 02             	cmp    eax,0x2
c0011418:	76 07                	jbe    c0011421 <SysIsATTY(regs*)+0x16>
c001141a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001141f:	75 26                	jne    c0011447 <SysIsATTY(regs*)+0x3c>
c0011421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011426:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011429:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001142f:	85 c0                	test   eax,eax
c0011431:	74 24                	je     c0011457 <SysIsATTY(regs*)+0x4c>
c0011433:	8b 10                	mov    edx,DWORD PTR [eax]
c0011435:	83 ec 0c             	sub    esp,0xc
c0011438:	50                   	push   eax
c0011439:	ff 12                	call   DWORD PTR [edx]
c001143b:	83 c4 10             	add    esp,0x10
c001143e:	31 d2                	xor    edx,edx
c0011440:	83 c4 0c             	add    esp,0xc
c0011443:	0f b6 c0             	movzx  eax,al
c0011446:	c3                   	ret    
c0011447:	83 ec 0c             	sub    esp,0xc
c001144a:	50                   	push   eax
c001144b:	e8 99 1c 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	85 c0                	test   eax,eax
c0011455:	75 dc                	jne    c0011433 <SysIsATTY(regs*)+0x28>
c0011457:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001145c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011461:	83 c4 0c             	add    esp,0xc
c0011464:	c3                   	ret    

c0011465 <SysSeek(regs*)>:
c0011465:	53                   	push   ebx
c0011466:	83 ec 08             	sub    esp,0x8
c0011469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001146d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011470:	8d 50 fd             	lea    edx,[eax-0x3]
c0011473:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011479:	77 39                	ja     c00114b4 <SysSeek(regs*)+0x4f>
c001147b:	83 ec 0c             	sub    esp,0xc
c001147e:	50                   	push   eax
c001147f:	e8 65 1c 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	85 c0                	test   eax,eax
c0011489:	74 29                	je     c00114b4 <SysSeek(regs*)+0x4f>
c001148b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001148e:	83 ec 04             	sub    esp,0x4
c0011491:	31 db                	xor    ebx,ebx
c0011493:	53                   	push   ebx
c0011494:	51                   	push   ecx
c0011495:	50                   	push   eax
c0011496:	e8 6d 6d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 c0                	test   eax,eax
c00114a0:	0f 95 c0             	setne  al
c00114a3:	31 d2                	xor    edx,edx
c00114a5:	0f b6 c0             	movzx  eax,al
c00114a8:	f7 d8                	neg    eax
c00114aa:	83 d2 00             	adc    edx,0x0
c00114ad:	83 c4 08             	add    esp,0x8
c00114b0:	5b                   	pop    ebx
c00114b1:	f7 da                	neg    edx
c00114b3:	c3                   	ret    
c00114b4:	83 c4 08             	add    esp,0x8
c00114b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114bc:	5b                   	pop    ebx
c00114bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c2:	c3                   	ret    

c00114c3 <SysTell(regs*)>:
c00114c3:	53                   	push   ebx
c00114c4:	83 ec 08             	sub    esp,0x8
c00114c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114ce:	83 f8 02             	cmp    eax,0x2
c00114d1:	76 56                	jbe    c0011529 <SysTell(regs*)+0x66>
c00114d3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114d8:	76 19                	jbe    c00114f3 <SysTell(regs*)+0x30>
c00114da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114dd:	31 d2                	xor    edx,edx
c00114df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00114e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114ec:	83 c4 08             	add    esp,0x8
c00114ef:	31 c0                	xor    eax,eax
c00114f1:	5b                   	pop    ebx
c00114f2:	c3                   	ret    
c00114f3:	83 ec 0c             	sub    esp,0xc
c00114f6:	50                   	push   eax
c00114f7:	e8 ed 1b 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	85 c0                	test   eax,eax
c0011501:	74 26                	je     c0011529 <SysTell(regs*)+0x66>
c0011503:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011506:	83 ec 08             	sub    esp,0x8
c0011509:	52                   	push   edx
c001150a:	50                   	push   eax
c001150b:	e8 a4 6d ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	85 c0                	test   eax,eax
c0011515:	0f 95 c0             	setne  al
c0011518:	31 d2                	xor    edx,edx
c001151a:	0f b6 c0             	movzx  eax,al
c001151d:	f7 d8                	neg    eax
c001151f:	83 d2 00             	adc    edx,0x0
c0011522:	83 c4 08             	add    esp,0x8
c0011525:	5b                   	pop    ebx
c0011526:	f7 da                	neg    edx
c0011528:	c3                   	ret    
c0011529:	83 c4 08             	add    esp,0x8
c001152c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011531:	5b                   	pop    ebx
c0011532:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011537:	c3                   	ret    

c0011538 <SysSize(regs*)>:
c0011538:	53                   	push   ebx
c0011539:	83 ec 18             	sub    esp,0x18
c001153c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011540:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011543:	83 f8 02             	cmp    eax,0x2
c0011546:	76 5b                	jbe    c00115a3 <SysSize(regs*)+0x6b>
c0011548:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001154d:	76 19                	jbe    c0011568 <SysSize(regs*)+0x30>
c001154f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011552:	31 d2                	xor    edx,edx
c0011554:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001155a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011561:	83 c4 18             	add    esp,0x18
c0011564:	31 c0                	xor    eax,eax
c0011566:	5b                   	pop    ebx
c0011567:	c3                   	ret    
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	50                   	push   eax
c001156c:	e8 78 1b 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	74 2b                	je     c00115a3 <SysSize(regs*)+0x6b>
c0011578:	83 ec 04             	sub    esp,0x4
c001157b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001157f:	52                   	push   edx
c0011580:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011583:	52                   	push   edx
c0011584:	50                   	push   eax
c0011585:	e8 c2 6e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001158a:	83 c4 10             	add    esp,0x10
c001158d:	85 c0                	test   eax,eax
c001158f:	0f 95 c0             	setne  al
c0011592:	31 d2                	xor    edx,edx
c0011594:	0f b6 c0             	movzx  eax,al
c0011597:	f7 d8                	neg    eax
c0011599:	83 d2 00             	adc    edx,0x0
c001159c:	83 c4 18             	add    esp,0x18
c001159f:	5b                   	pop    ebx
c00115a0:	f7 da                	neg    edx
c00115a2:	c3                   	ret    
c00115a3:	83 c4 18             	add    esp,0x18
c00115a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ab:	5b                   	pop    ebx
c00115ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115b1:	c3                   	ret    

c00115b2 <SysSizeFromFilename(regs*)>:
c00115b2:	55                   	push   ebp
c00115b3:	57                   	push   edi
c00115b4:	56                   	push   esi
c00115b5:	53                   	push   ebx
c00115b6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00115bc:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00115c3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00115c6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00115c9:	85 f6                	test   esi,esi
c00115cb:	89 f8                	mov    eax,edi
c00115cd:	74 09                	je     c00115d8 <SysSizeFromFilename(regs*)+0x26>
c00115cf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00115d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115d8:	83 f8 02             	cmp    eax,0x2
c00115db:	0f 86 c9 00 00 00    	jbe    c00116aa <SysSizeFromFilename(regs*)+0xf8>
c00115e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115e6:	76 1f                	jbe    c0011607 <SysSizeFromFilename(regs*)+0x55>
c00115e8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115eb:	31 d2                	xor    edx,edx
c00115ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115fa:	31 c0                	xor    eax,eax
c00115fc:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011602:	5b                   	pop    ebx
c0011603:	5e                   	pop    esi
c0011604:	5f                   	pop    edi
c0011605:	5d                   	pop    ebp
c0011606:	c3                   	ret    
c0011607:	83 ec 0c             	sub    esp,0xc
c001160a:	68 14 01 00 00       	push   0x114
c001160f:	e8 9c e4 ff ff       	call   c000fab0 <malloc>
c0011614:	6a 01                	push   0x1
c0011616:	89 c5                	mov    ebp,eax
c0011618:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001161d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011620:	50                   	push   eax
c0011621:	57                   	push   edi
c0011622:	55                   	push   ebp
c0011623:	e8 06 6a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011628:	83 c4 20             	add    esp,0x20
c001162b:	85 ed                	test   ebp,ebp
c001162d:	74 7b                	je     c00116aa <SysSizeFromFilename(regs*)+0xf8>
c001162f:	83 ec 04             	sub    esp,0x4
c0011632:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011636:	50                   	push   eax
c0011637:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001163a:	51                   	push   ecx
c001163b:	55                   	push   ebp
c001163c:	e8 0b 6e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0011641:	89 c3                	mov    ebx,eax
c0011643:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011646:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011649:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	85 db                	test   ebx,ebx
c0011651:	75 57                	jne    c00116aa <SysSizeFromFilename(regs*)+0xf8>
c0011653:	6a 00                	push   0x0
c0011655:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001165a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001165d:	05 0c 01 00 00       	add    eax,0x10c
c0011662:	50                   	push   eax
c0011663:	57                   	push   edi
c0011664:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001166b:	53                   	push   ebx
c001166c:	e8 8f 67 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011671:	58                   	pop    eax
c0011672:	5a                   	pop    edx
c0011673:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011677:	50                   	push   eax
c0011678:	53                   	push   ebx
c0011679:	e8 09 62 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c001167e:	83 c4 10             	add    esp,0x10
c0011681:	ba 00 00 00 00       	mov    edx,0x0
c0011686:	83 f8 01             	cmp    eax,0x1
c0011689:	b8 00 00 00 00       	mov    eax,0x0
c001168e:	74 2f                	je     c00116bf <SysSizeFromFilename(regs*)+0x10d>
c0011690:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011695:	74 3b                	je     c00116d2 <SysSizeFromFilename(regs*)+0x120>
c0011697:	85 f6                	test   esi,esi
c0011699:	0f 84 5d ff ff ff    	je     c00115fc <SysSizeFromFilename(regs*)+0x4a>
c001169f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00116a5:	e9 52 ff ff ff       	jmp    c00115fc <SysSizeFromFilename(regs*)+0x4a>
c00116aa:	81 c4 4c 02 00 00    	add    esp,0x24c
c00116b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116b5:	5b                   	pop    ebx
c00116b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116bb:	5e                   	pop    esi
c00116bc:	5f                   	pop    edi
c00116bd:	5d                   	pop    ebp
c00116be:	c3                   	ret    
c00116bf:	85 f6                	test   esi,esi
c00116c1:	0f 84 35 ff ff ff    	je     c00115fc <SysSizeFromFilename(regs*)+0x4a>
c00116c7:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00116cd:	e9 2a ff ff ff       	jmp    c00115fc <SysSizeFromFilename(regs*)+0x4a>
c00116d2:	85 f6                	test   esi,esi
c00116d4:	0f 84 22 ff ff ff    	je     c00115fc <SysSizeFromFilename(regs*)+0x4a>
c00116da:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00116e0:	e9 17 ff ff ff       	jmp    c00115fc <SysSizeFromFilename(regs*)+0x4a>

c00116e5 <SysSizeFromFilenameNoSymlink(regs*)>:
c00116e5:	55                   	push   ebp
c00116e6:	57                   	push   edi
c00116e7:	56                   	push   esi
c00116e8:	53                   	push   ebx
c00116e9:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00116ef:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00116f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00116f9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00116fc:	85 f6                	test   esi,esi
c00116fe:	89 f8                	mov    eax,edi
c0011700:	74 09                	je     c001170b <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011702:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011708:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001170b:	83 f8 02             	cmp    eax,0x2
c001170e:	0f 86 c9 00 00 00    	jbe    c00117dd <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011714:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011719:	76 1f                	jbe    c001173a <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001171b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001171e:	31 d2                	xor    edx,edx
c0011720:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011726:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001172d:	31 c0                	xor    eax,eax
c001172f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	5f                   	pop    edi
c0011738:	5d                   	pop    ebp
c0011739:	c3                   	ret    
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	68 14 01 00 00       	push   0x114
c0011742:	e8 69 e3 ff ff       	call   c000fab0 <malloc>
c0011747:	6a 00                	push   0x0
c0011749:	89 c5                	mov    ebp,eax
c001174b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011753:	50                   	push   eax
c0011754:	57                   	push   edi
c0011755:	55                   	push   ebp
c0011756:	e8 d3 68 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001175b:	83 c4 20             	add    esp,0x20
c001175e:	85 ed                	test   ebp,ebp
c0011760:	74 7b                	je     c00117dd <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011762:	83 ec 04             	sub    esp,0x4
c0011765:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011769:	50                   	push   eax
c001176a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001176d:	51                   	push   ecx
c001176e:	55                   	push   ebp
c001176f:	e8 d8 6c ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0011774:	89 c3                	mov    ebx,eax
c0011776:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011779:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001177c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	85 db                	test   ebx,ebx
c0011784:	75 57                	jne    c00117dd <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011786:	6a 00                	push   0x0
c0011788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001178d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011790:	05 0c 01 00 00       	add    eax,0x10c
c0011795:	50                   	push   eax
c0011796:	57                   	push   edi
c0011797:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001179e:	53                   	push   ebx
c001179f:	e8 5c 66 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117a4:	58                   	pop    eax
c00117a5:	5a                   	pop    edx
c00117a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00117aa:	50                   	push   eax
c00117ab:	53                   	push   ebx
c00117ac:	e8 d6 60 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00117b1:	83 c4 10             	add    esp,0x10
c00117b4:	ba 00 00 00 00       	mov    edx,0x0
c00117b9:	83 f8 01             	cmp    eax,0x1
c00117bc:	b8 00 00 00 00       	mov    eax,0x0
c00117c1:	74 2f                	je     c00117f2 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c00117c3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c8:	74 3b                	je     c0011805 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c00117ca:	85 f6                	test   esi,esi
c00117cc:	0f 84 5d ff ff ff    	je     c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00117d2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00117d8:	e9 52 ff ff ff       	jmp    c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00117dd:	81 c4 4c 02 00 00    	add    esp,0x24c
c00117e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117e8:	5b                   	pop    ebx
c00117e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117ee:	5e                   	pop    esi
c00117ef:	5f                   	pop    edi
c00117f0:	5d                   	pop    ebp
c00117f1:	c3                   	ret    
c00117f2:	85 f6                	test   esi,esi
c00117f4:	0f 84 35 ff ff ff    	je     c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00117fa:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011800:	e9 2a ff ff ff       	jmp    c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011805:	85 f6                	test   esi,esi
c0011807:	0f 84 22 ff ff ff    	je     c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001180d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011813:	e9 17 ff ff ff       	jmp    c001172f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011818 <SysClose(regs*)>:
c0011818:	57                   	push   edi
c0011819:	56                   	push   esi
c001181a:	53                   	push   ebx
c001181b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011822:	83 f8 02             	cmp    eax,0x2
c0011825:	76 44                	jbe    c001186b <SysClose(regs*)+0x53>
c0011827:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001182d:	31 f6                	xor    esi,esi
c001182f:	31 ff                	xor    edi,edi
c0011831:	83 fa 01             	cmp    edx,0x1
c0011834:	76 2d                	jbe    c0011863 <SysClose(regs*)+0x4b>
c0011836:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001183b:	77 2e                	ja     c001186b <SysClose(regs*)+0x53>
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	50                   	push   eax
c0011841:	e8 a3 18 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	85 c0                	test   eax,eax
c001184b:	89 c3                	mov    ebx,eax
c001184d:	74 1c                	je     c001186b <SysClose(regs*)+0x53>
c001184f:	83 ec 0c             	sub    esp,0xc
c0011852:	50                   	push   eax
c0011853:	e8 50 69 ff ff       	call   c00081a8 <File::close()>
c0011858:	8b 03                	mov    eax,DWORD PTR [ebx]
c001185a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001185d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	5b                   	pop    ebx
c0011864:	89 f0                	mov    eax,esi
c0011866:	89 fa                	mov    edx,edi
c0011868:	5e                   	pop    esi
c0011869:	5f                   	pop    edi
c001186a:	c3                   	ret    
c001186b:	5b                   	pop    ebx
c001186c:	be ff ff ff ff       	mov    esi,0xffffffff
c0011871:	89 f0                	mov    eax,esi
c0011873:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011878:	89 fa                	mov    edx,edi
c001187a:	5e                   	pop    esi
c001187b:	5f                   	pop    edi
c001187c:	c3                   	ret    

c001187d <SysOpenDir(regs*)>:
c001187d:	56                   	push   esi
c001187e:	53                   	push   ebx
c001187f:	83 ec 04             	sub    esp,0x4
c0011882:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011886:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011889:	85 c9                	test   ecx,ecx
c001188b:	74 5d                	je     c00118ea <SysOpenDir(regs*)+0x6d>
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	68 14 01 00 00       	push   0x114
c0011895:	e8 16 e2 ff ff       	call   c000fab0 <malloc>
c001189a:	83 c4 0c             	add    esp,0xc
c001189d:	89 c6                	mov    esi,eax
c001189f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a7:	50                   	push   eax
c00118a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00118ab:	52                   	push   edx
c00118ac:	56                   	push   esi
c00118ad:	e8 5a 6d ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	85 f6                	test   esi,esi
c00118b7:	74 31                	je     c00118ea <SysOpenDir(regs*)+0x6d>
c00118b9:	83 ec 0c             	sub    esp,0xc
c00118bc:	56                   	push   esi
c00118bd:	e8 12 6e ff ff       	call   c00086d4 <Directory::open()>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	85 c0                	test   eax,eax
c00118c7:	75 21                	jne    c00118ea <SysOpenDir(regs*)+0x6d>
c00118c9:	83 ec 0c             	sub    esp,0xc
c00118cc:	56                   	push   esi
c00118cd:	e8 1a 15 00 00       	call   c0012dec <UnixFile::getFileDescriptor()>
c00118d2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00118d5:	83 c4 10             	add    esp,0x10
c00118d8:	89 02                	mov    DWORD PTR [edx],eax
c00118da:	c1 f8 1f             	sar    eax,0x1f
c00118dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118e0:	83 c4 04             	add    esp,0x4
c00118e3:	31 c0                	xor    eax,eax
c00118e5:	5b                   	pop    ebx
c00118e6:	31 d2                	xor    edx,edx
c00118e8:	5e                   	pop    esi
c00118e9:	c3                   	ret    
c00118ea:	83 c4 04             	add    esp,0x4
c00118ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f2:	5b                   	pop    ebx
c00118f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f8:	5e                   	pop    esi
c00118f9:	c3                   	ret    

c00118fa <SysMakeDir(regs*)>:
c00118fa:	56                   	push   esi
c00118fb:	53                   	push   ebx
c00118fc:	83 ec 10             	sub    esp,0x10
c00118ff:	68 14 01 00 00       	push   0x114
c0011904:	e8 a7 e1 ff ff       	call   c000fab0 <malloc>
c0011909:	83 c4 0c             	add    esp,0xc
c001190c:	89 c3                	mov    ebx,eax
c001190e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011913:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011916:	50                   	push   eax
c0011917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001191b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001191e:	52                   	push   edx
c001191f:	53                   	push   ebx
c0011920:	e8 e7 6c ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	85 db                	test   ebx,ebx
c001192a:	74 2c                	je     c0011958 <SysMakeDir(regs*)+0x5e>
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	53                   	push   ebx
c0011930:	e8 7f 6f ff ff       	call   c00088b4 <Directory::create()>
c0011935:	89 c6                	mov    esi,eax
c0011937:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011939:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001193c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	31 c0                	xor    eax,eax
c0011944:	85 f6                	test   esi,esi
c0011946:	0f 95 c0             	setne  al
c0011949:	31 d2                	xor    edx,edx
c001194b:	f7 d8                	neg    eax
c001194d:	83 d2 00             	adc    edx,0x0
c0011950:	83 c4 04             	add    esp,0x4
c0011953:	5b                   	pop    ebx
c0011954:	f7 da                	neg    edx
c0011956:	5e                   	pop    esi
c0011957:	c3                   	ret    
c0011958:	83 c4 04             	add    esp,0x4
c001195b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011960:	5b                   	pop    ebx
c0011961:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011966:	5e                   	pop    esi
c0011967:	c3                   	ret    

c0011968 <SysCloseDir(regs*)>:
c0011968:	53                   	push   ebx
c0011969:	83 ec 08             	sub    esp,0x8
c001196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011970:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011973:	8d 50 fd             	lea    edx,[eax-0x3]
c0011976:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001197c:	77 2f                	ja     c00119ad <SysCloseDir(regs*)+0x45>
c001197e:	83 ec 0c             	sub    esp,0xc
c0011981:	50                   	push   eax
c0011982:	e8 62 17 00 00       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0011987:	83 c4 10             	add    esp,0x10
c001198a:	85 c0                	test   eax,eax
c001198c:	89 c3                	mov    ebx,eax
c001198e:	74 1d                	je     c00119ad <SysCloseDir(regs*)+0x45>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	50                   	push   eax
c0011994:	e8 97 6d ff ff       	call   c0008730 <Directory::close()>
c0011999:	8b 03                	mov    eax,DWORD PTR [ebx]
c001199b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001199e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	31 c0                	xor    eax,eax
c00119a6:	83 c4 08             	add    esp,0x8
c00119a9:	31 d2                	xor    edx,edx
c00119ab:	5b                   	pop    ebx
c00119ac:	c3                   	ret    
c00119ad:	83 c4 08             	add    esp,0x8
c00119b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119b5:	5b                   	pop    ebx
c00119b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119bb:	c3                   	ret    

c00119bc <SysWait(regs*)>:
c00119bc:	83 ec 10             	sub    esp,0x10
c00119bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119c3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00119c6:	52                   	push   edx
c00119c7:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00119ca:	51                   	push   ecx
c00119cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119ce:	50                   	push   eax
c00119cf:	e8 4c 54 00 00       	call   c0016e20 <waitTask(int, int*, int)>
c00119d4:	83 c4 1c             	add    esp,0x1c
c00119d7:	89 c2                	mov    edx,eax
c00119d9:	c1 fa 1f             	sar    edx,0x1f
c00119dc:	c3                   	ret    

c00119dd <SysNotImpl(regs*)>:
c00119dd:	83 ec 18             	sub    esp,0x18
c00119e0:	68 27 41 02 c0       	push   0xc0024127
c00119e5:	e8 0c e4 ff ff       	call   c000fdf6 <KePanic(char const*)>
c00119ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119f4:	83 c4 1c             	add    esp,0x1c
c00119f7:	c3                   	ret    

c00119f8 <SysPanic(regs*)>:
c00119f8:	83 ec 18             	sub    esp,0x18
c00119fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ff:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a02:	50                   	push   eax
c0011a03:	e8 ee e3 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0011a08:	b8 01 00 00 00       	mov    eax,0x1
c0011a0d:	31 d2                	xor    edx,edx
c0011a0f:	83 c4 1c             	add    esp,0x1c
c0011a12:	c3                   	ret    

c0011a13 <SysRmdir(regs*)>:
c0011a13:	56                   	push   esi
c0011a14:	53                   	push   ebx
c0011a15:	83 ec 10             	sub    esp,0x10
c0011a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a1c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a1f:	68 14 01 00 00       	push   0x114
c0011a24:	e8 87 e0 ff ff       	call   c000fab0 <malloc>
c0011a29:	6a 00                	push   0x0
c0011a2b:	89 c3                	mov    ebx,eax
c0011a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a35:	50                   	push   eax
c0011a36:	56                   	push   esi
c0011a37:	53                   	push   ebx
c0011a38:	e8 f1 65 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011a3d:	83 c4 14             	add    esp,0x14
c0011a40:	53                   	push   ebx
c0011a41:	e8 d2 68 ff ff       	call   c0008318 <File::unlink()>
c0011a46:	83 c4 10             	add    esp,0x10
c0011a49:	85 db                	test   ebx,ebx
c0011a4b:	89 c6                	mov    esi,eax
c0011a4d:	74 0c                	je     c0011a5b <SysRmdir(regs*)+0x48>
c0011a4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a51:	83 ec 0c             	sub    esp,0xc
c0011a54:	53                   	push   ebx
c0011a55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	31 c0                	xor    eax,eax
c0011a5d:	85 f6                	test   esi,esi
c0011a5f:	0f 95 c0             	setne  al
c0011a62:	31 d2                	xor    edx,edx
c0011a64:	f7 d8                	neg    eax
c0011a66:	83 d2 00             	adc    edx,0x0
c0011a69:	83 c4 04             	add    esp,0x4
c0011a6c:	5b                   	pop    ebx
c0011a6d:	f7 da                	neg    edx
c0011a6f:	5e                   	pop    esi
c0011a70:	c3                   	ret    

c0011a71 <SysUnlink(regs*)>:
c0011a71:	56                   	push   esi
c0011a72:	53                   	push   ebx
c0011a73:	83 ec 10             	sub    esp,0x10
c0011a76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a7a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a7d:	68 14 01 00 00       	push   0x114
c0011a82:	e8 29 e0 ff ff       	call   c000fab0 <malloc>
c0011a87:	6a 00                	push   0x0
c0011a89:	89 c3                	mov    ebx,eax
c0011a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a93:	50                   	push   eax
c0011a94:	56                   	push   esi
c0011a95:	53                   	push   ebx
c0011a96:	e8 93 65 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011a9b:	83 c4 14             	add    esp,0x14
c0011a9e:	53                   	push   ebx
c0011a9f:	e8 74 68 ff ff       	call   c0008318 <File::unlink()>
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	85 db                	test   ebx,ebx
c0011aa9:	89 c6                	mov    esi,eax
c0011aab:	74 0c                	je     c0011ab9 <SysUnlink(regs*)+0x48>
c0011aad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	53                   	push   ebx
c0011ab3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	31 c0                	xor    eax,eax
c0011abb:	85 f6                	test   esi,esi
c0011abd:	0f 95 c0             	setne  al
c0011ac0:	31 d2                	xor    edx,edx
c0011ac2:	f7 d8                	neg    eax
c0011ac4:	83 d2 00             	adc    edx,0x0
c0011ac7:	83 c4 04             	add    esp,0x4
c0011aca:	5b                   	pop    ebx
c0011acb:	f7 da                	neg    edx
c0011acd:	5e                   	pop    esi
c0011ace:	c3                   	ret    

c0011acf <SysGetArgv(regs*)>:
c0011acf:	83 ec 0c             	sub    esp,0xc
c0011ad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ad6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011ad9:	85 c0                	test   eax,eax
c0011adb:	78 2c                	js     c0011b09 <SysGetArgv(regs*)+0x3a>
c0011add:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ae3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011ae6:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011aec:	7d 1b                	jge    c0011b09 <SysGetArgv(regs*)+0x3a>
c0011aee:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011af5:	85 c0                	test   eax,eax
c0011af7:	74 18                	je     c0011b11 <SysGetArgv(regs*)+0x42>
c0011af9:	83 ec 08             	sub    esp,0x8
c0011afc:	50                   	push   eax
c0011afd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b00:	50                   	push   eax
c0011b01:	e8 4a eb fe ff       	call   c0000650 <strcpy>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	31 c0                	xor    eax,eax
c0011b0b:	31 d2                	xor    edx,edx
c0011b0d:	83 c4 0c             	add    esp,0xc
c0011b10:	c3                   	ret    
c0011b11:	b8 01 00 00 00       	mov    eax,0x1
c0011b16:	31 d2                	xor    edx,edx
c0011b18:	83 c4 0c             	add    esp,0xc
c0011b1b:	c3                   	ret    

c0011b1c <SysUSleep(regs*)>:
c0011b1c:	83 ec 1c             	sub    esp,0x1c
c0011b1f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b23:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011b26:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011b29:	6a 00                	push   0x0
c0011b2b:	6a 64                	push   0x64
c0011b2d:	52                   	push   edx
c0011b2e:	50                   	push   eax
c0011b2f:	e8 90 fb 00 00       	call   c00216c4 <__udivdi3>
c0011b34:	83 c4 18             	add    esp,0x18
c0011b37:	52                   	push   edx
c0011b38:	50                   	push   eax
c0011b39:	e8 da 53 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0011b3e:	31 c0                	xor    eax,eax
c0011b40:	31 d2                	xor    edx,edx
c0011b42:	83 c4 1c             	add    esp,0x1c
c0011b45:	c3                   	ret    

c0011b46 <SysSpawn(regs*)>:
c0011b46:	56                   	push   esi
c0011b47:	53                   	push   ebx
c0011b48:	83 ec 04             	sub    esp,0x4
c0011b4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b4f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b52:	85 f6                	test   esi,esi
c0011b54:	75 0a                	jne    c0011b60 <SysSpawn(regs*)+0x1a>
c0011b56:	83 c4 04             	add    esp,0x4
c0011b59:	31 c0                	xor    eax,eax
c0011b5b:	5b                   	pop    ebx
c0011b5c:	31 d2                	xor    edx,edx
c0011b5e:	5e                   	pop    esi
c0011b5f:	c3                   	ret    
c0011b60:	83 ec 0c             	sub    esp,0xc
c0011b63:	68 c4 07 00 00       	push   0x7c4
c0011b68:	e8 43 df ff ff       	call   c000fab0 <malloc>
c0011b6d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b70:	83 c4 10             	add    esp,0x10
c0011b73:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b76:	89 c6                	mov    esi,eax
c0011b78:	31 c0                	xor    eax,eax
c0011b7a:	85 c9                	test   ecx,ecx
c0011b7c:	74 08                	je     c0011b86 <SysSpawn(regs*)+0x40>
c0011b7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b86:	52                   	push   edx
c0011b87:	50                   	push   eax
c0011b88:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b8b:	50                   	push   eax
c0011b8c:	56                   	push   esi
c0011b8d:	e8 aa 4a 00 00       	call   c001663c <Process::Process(char const*, Process*, char**)>
c0011b92:	83 c4 10             	add    esp,0x10
c0011b95:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011b9c:	75 b8                	jne    c0011b56 <SysSpawn(regs*)+0x10>
c0011b9e:	83 ec 0c             	sub    esp,0xc
c0011ba1:	56                   	push   esi
c0011ba2:	e8 25 50 00 00       	call   c0016bcc <Process::createUserThread()>
c0011ba7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ba9:	83 c4 10             	add    esp,0x10
c0011bac:	83 c4 04             	add    esp,0x4
c0011baf:	5b                   	pop    ebx
c0011bb0:	89 c2                	mov    edx,eax
c0011bb2:	c1 fa 1f             	sar    edx,0x1f
c0011bb5:	5e                   	pop    esi
c0011bb6:	c3                   	ret    

c0011bb7 <SysGetEnv(regs*)>:
c0011bb7:	57                   	push   edi
c0011bb8:	56                   	push   esi
c0011bb9:	53                   	push   ebx
c0011bba:	83 ec 1c             	sub    esp,0x1c
c0011bbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011bc6:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011bc9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011bcc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011bcf:	51                   	push   ecx
c0011bd0:	e8 12 cc ff ff       	call   c000e7e7 <KeGetProcessTotalEnvCount(Process*)>
c0011bd5:	83 c4 10             	add    esp,0x10
c0011bd8:	39 c7                	cmp    edi,eax
c0011bda:	7c 12                	jl     c0011bee <SysGetEnv(regs*)+0x37>
c0011bdc:	31 c0                	xor    eax,eax
c0011bde:	31 d2                	xor    edx,edx
c0011be0:	85 f6                	test   esi,esi
c0011be2:	74 03                	je     c0011be7 <SysGetEnv(regs*)+0x30>
c0011be4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	5b                   	pop    ebx
c0011beb:	5e                   	pop    esi
c0011bec:	5f                   	pop    edi
c0011bed:	c3                   	ret    
c0011bee:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011bf2:	83 ec 04             	sub    esp,0x4
c0011bf5:	57                   	push   edi
c0011bf6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bfc:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011bff:	57                   	push   edi
c0011c00:	50                   	push   eax
c0011c01:	e8 01 cc ff ff       	call   c000e807 <KeGetProcessEnvPair(Process*, int)>
c0011c06:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c0d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011c11:	83 c4 0c             	add    esp,0xc
c0011c14:	85 d2                	test   edx,edx
c0011c16:	75 23                	jne    c0011c3b <SysGetEnv(regs*)+0x84>
c0011c18:	83 ec 0c             	sub    esp,0xc
c0011c1b:	50                   	push   eax
c0011c1c:	e8 5f e9 fe ff       	call   c0000580 <strlen>
c0011c21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c24:	89 c3                	mov    ebx,eax
c0011c26:	e8 55 e9 fe ff       	call   c0000580 <strlen>
c0011c2b:	83 c4 10             	add    esp,0x10
c0011c2e:	31 d2                	xor    edx,edx
c0011c30:	83 c4 10             	add    esp,0x10
c0011c33:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011c37:	5b                   	pop    ebx
c0011c38:	5e                   	pop    esi
c0011c39:	5f                   	pop    edi
c0011c3a:	c3                   	ret    
c0011c3b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c3e:	83 ec 08             	sub    esp,0x8
c0011c41:	50                   	push   eax
c0011c42:	56                   	push   esi
c0011c43:	e8 08 ea fe ff       	call   c0000650 <strcpy>
c0011c48:	58                   	pop    eax
c0011c49:	5a                   	pop    edx
c0011c4a:	68 41 41 02 c0       	push   0xc0024141
c0011c4f:	56                   	push   esi
c0011c50:	e8 1b ec fe ff       	call   c0000870 <strcat>
c0011c55:	59                   	pop    ecx
c0011c56:	5b                   	pop    ebx
c0011c57:	57                   	push   edi
c0011c58:	56                   	push   esi
c0011c59:	e8 12 ec fe ff       	call   c0000870 <strcat>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	31 c0                	xor    eax,eax
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	31 d2                	xor    edx,edx
c0011c68:	5b                   	pop    ebx
c0011c69:	5e                   	pop    esi
c0011c6a:	5f                   	pop    edi
c0011c6b:	c3                   	ret    

c0011c6c <SysSetFatAttrib(regs*)>:
c0011c6c:	57                   	push   edi
c0011c6d:	56                   	push   esi
c0011c6e:	53                   	push   ebx
c0011c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011c79:	68 14 01 00 00       	push   0x114
c0011c7e:	e8 2d de ff ff       	call   c000fab0 <malloc>
c0011c83:	83 c4 0c             	add    esp,0xc
c0011c86:	89 c3                	mov    ebx,eax
c0011c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c90:	50                   	push   eax
c0011c91:	57                   	push   edi
c0011c92:	53                   	push   ebx
c0011c93:	e8 94 64 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011c98:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c9b:	83 c4 0c             	add    esp,0xc
c0011c9e:	0f b6 d4             	movzx  edx,ah
c0011ca1:	0f b6 c0             	movzx  eax,al
c0011ca4:	52                   	push   edx
c0011ca5:	50                   	push   eax
c0011ca6:	53                   	push   ebx
c0011ca7:	e8 06 67 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	85 db                	test   ebx,ebx
c0011cb1:	89 c6                	mov    esi,eax
c0011cb3:	74 0c                	je     c0011cc1 <SysSetFatAttrib(regs*)+0x55>
c0011cb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cb7:	83 ec 0c             	sub    esp,0xc
c0011cba:	53                   	push   ebx
c0011cbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cbe:	83 c4 10             	add    esp,0x10
c0011cc1:	5b                   	pop    ebx
c0011cc2:	31 c0                	xor    eax,eax
c0011cc4:	85 f6                	test   esi,esi
c0011cc6:	0f 95 c0             	setne  al
c0011cc9:	31 d2                	xor    edx,edx
c0011ccb:	5e                   	pop    esi
c0011ccc:	f7 d8                	neg    eax
c0011cce:	83 d2 00             	adc    edx,0x0
c0011cd1:	f7 da                	neg    edx
c0011cd3:	5f                   	pop    edi
c0011cd4:	c3                   	ret    

c0011cd5 <SysShutdown(regs*)>:
c0011cd5:	83 ec 1c             	sub    esp,0x1c
c0011cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cdc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011cdf:	85 c9                	test   ecx,ecx
c0011ce1:	74 18                	je     c0011cfb <SysShutdown(regs*)+0x26>
c0011ce3:	83 f9 01             	cmp    ecx,0x1
c0011ce6:	74 26                	je     c0011d0e <SysShutdown(regs*)+0x39>
c0011ce8:	83 f9 02             	cmp    ecx,0x2
c0011ceb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cf5:	74 24                	je     c0011d1b <SysShutdown(regs*)+0x46>
c0011cf7:	83 c4 1c             	add    esp,0x1c
c0011cfa:	c3                   	ret    
c0011cfb:	e8 60 c5 ff ff       	call   c000e260 <KeShutdown()>
c0011d00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d05:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d0a:	83 c4 1c             	add    esp,0x1c
c0011d0d:	c3                   	ret    
c0011d0e:	e8 71 c5 ff ff       	call   c000e284 <KeSleep()>
c0011d13:	31 c0                	xor    eax,eax
c0011d15:	31 d2                	xor    edx,edx
c0011d17:	83 c4 1c             	add    esp,0x1c
c0011d1a:	c3                   	ret    
c0011d1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d23:	e8 68 c5 ff ff       	call   c000e290 <KeRestart()>
c0011d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d30:	eb c5                	jmp    c0011cf7 <SysShutdown(regs*)+0x22>

c0011d32 <SysPipe(regs*)>:
c0011d32:	57                   	push   edi
c0011d33:	56                   	push   esi
c0011d34:	53                   	push   ebx
c0011d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d39:	83 ec 0c             	sub    esp,0xc
c0011d3c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011d3f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d42:	6a 20                	push   0x20
c0011d44:	e8 67 dd ff ff       	call   c000fab0 <malloc>
c0011d49:	89 c3                	mov    ebx,eax
c0011d4b:	58                   	pop    eax
c0011d4c:	5a                   	pop    edx
c0011d4d:	68 00 50 00 00       	push   0x5000
c0011d52:	53                   	push   ebx
c0011d53:	e8 1a e9 ff ff       	call   c0010672 <Pipe::Pipe(int)>
c0011d58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011d5b:	e8 8c 10 00 00       	call   c0012dec <UnixFile::getFileDescriptor()>
c0011d60:	89 07                	mov    DWORD PTR [edi],eax
c0011d62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011d65:	e8 82 10 00 00       	call   c0012dec <UnixFile::getFileDescriptor()>
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	31 d2                	xor    edx,edx
c0011d6f:	89 06                	mov    DWORD PTR [esi],eax
c0011d71:	31 c0                	xor    eax,eax
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	5f                   	pop    edi
c0011d76:	c3                   	ret    

c0011d77 <SysGetUnixTime(regs*)>:
c0011d77:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011d7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011d82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d86:	e9 53 73 ff ff       	jmp    c00090de <Clock::timeInSecondsLocal()>

c0011d8b <string_ends_with(char const*, char const*)>:
c0011d8b:	57                   	push   edi
c0011d8c:	56                   	push   esi
c0011d8d:	53                   	push   ebx
c0011d8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d99:	53                   	push   ebx
c0011d9a:	e8 e1 e7 fe ff       	call   c0000580 <strlen>
c0011d9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011da2:	89 c6                	mov    esi,eax
c0011da4:	e8 d7 e7 fe ff       	call   c0000580 <strlen>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	39 c6                	cmp    esi,eax
c0011db0:	7d 06                	jge    c0011db8 <string_ends_with(char const*, char const*)+0x2d>
c0011db2:	5b                   	pop    ebx
c0011db3:	89 d0                	mov    eax,edx
c0011db5:	5e                   	pop    esi
c0011db6:	5f                   	pop    edi
c0011db7:	c3                   	ret    
c0011db8:	83 ec 08             	sub    esp,0x8
c0011dbb:	29 c6                	sub    esi,eax
c0011dbd:	57                   	push   edi
c0011dbe:	01 f3                	add    ebx,esi
c0011dc0:	53                   	push   ebx
c0011dc1:	e8 ba e9 fe ff       	call   c0000780 <strcmp>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	5b                   	pop    ebx
c0011dcc:	5e                   	pop    esi
c0011dcd:	85 c0                	test   eax,eax
c0011dcf:	5f                   	pop    edi
c0011dd0:	0f 94 c2             	sete   dl
c0011dd3:	89 d0                	mov    eax,edx
c0011dd5:	c3                   	ret    

c0011dd6 <SysOpen(regs*)>:
c0011dd6:	56                   	push   esi
c0011dd7:	53                   	push   ebx
c0011dd8:	81 ec 04 01 00 00    	sub    esp,0x104
c0011dde:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011de5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de8:	85 c0                	test   eax,eax
c0011dea:	0f 84 c4 01 00 00    	je     c0011fb4 <SysOpen(regs*)+0x1de>
c0011df0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011df3:	85 c0                	test   eax,eax
c0011df5:	0f 84 b9 01 00 00    	je     c0011fb4 <SysOpen(regs*)+0x1de>
c0011dfb:	6a 00                	push   0x0
c0011dfd:	68 43 41 02 c0       	push   0xc0024143
c0011e02:	50                   	push   eax
c0011e03:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011e07:	56                   	push   esi
c0011e08:	e8 f3 5f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e0d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e10:	e8 6b e7 fe ff       	call   c0000580 <strlen>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	83 e8 01             	sub    eax,0x1
c0011e1b:	74 29                	je     c0011e46 <SysOpen(regs*)+0x70>
c0011e1d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011e21:	83 fa 2e             	cmp    edx,0x2e
c0011e24:	74 1c                	je     c0011e42 <SysOpen(regs*)+0x6c>
c0011e26:	83 fa 3a             	cmp    edx,0x3a
c0011e29:	74 17                	je     c0011e42 <SysOpen(regs*)+0x6c>
c0011e2b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011e2f:	83 e8 01             	sub    eax,0x1
c0011e32:	74 12                	je     c0011e46 <SysOpen(regs*)+0x70>
c0011e34:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011e38:	83 fa 3a             	cmp    edx,0x3a
c0011e3b:	74 05                	je     c0011e42 <SysOpen(regs*)+0x6c>
c0011e3d:	83 fa 2e             	cmp    edx,0x2e
c0011e40:	75 e9                	jne    c0011e2b <SysOpen(regs*)+0x55>
c0011e42:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011e46:	83 ec 08             	sub    esp,0x8
c0011e49:	68 47 41 02 c0       	push   0xc0024147
c0011e4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e51:	50                   	push   eax
c0011e52:	e8 34 ff ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	85 c0                	test   eax,eax
c0011e5c:	74 1d                	je     c0011e7b <SysOpen(regs*)+0xa5>
c0011e5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e61:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011e67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e6e:	81 c4 04 01 00 00    	add    esp,0x104
c0011e74:	31 c0                	xor    eax,eax
c0011e76:	5b                   	pop    ebx
c0011e77:	31 d2                	xor    edx,edx
c0011e79:	5e                   	pop    esi
c0011e7a:	c3                   	ret    
c0011e7b:	83 ec 08             	sub    esp,0x8
c0011e7e:	68 4c 41 02 c0       	push   0xc002414c
c0011e83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e86:	50                   	push   eax
c0011e87:	e8 ff fe ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011e8c:	83 c4 10             	add    esp,0x10
c0011e8f:	85 c0                	test   eax,eax
c0011e91:	75 cb                	jne    c0011e5e <SysOpen(regs*)+0x88>
c0011e93:	83 ec 08             	sub    esp,0x8
c0011e96:	68 48 41 02 c0       	push   0xc0024148
c0011e9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e9e:	50                   	push   eax
c0011e9f:	e8 dc e8 fe ff       	call   c0000780 <strcmp>
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	85 c0                	test   eax,eax
c0011ea9:	74 b3                	je     c0011e5e <SysOpen(regs*)+0x88>
c0011eab:	83 ec 08             	sub    esp,0x8
c0011eae:	68 47 41 02 c0       	push   0xc0024147
c0011eb3:	56                   	push   esi
c0011eb4:	e8 d2 fe ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	85 c0                	test   eax,eax
c0011ebe:	75 9e                	jne    c0011e5e <SysOpen(regs*)+0x88>
c0011ec0:	83 ec 08             	sub    esp,0x8
c0011ec3:	68 51 41 02 c0       	push   0xc0024151
c0011ec8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ecb:	50                   	push   eax
c0011ecc:	e8 ba fe ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	85 c0                	test   eax,eax
c0011ed6:	0f 85 eb 00 00 00    	jne    c0011fc7 <SysOpen(regs*)+0x1f1>
c0011edc:	83 ec 08             	sub    esp,0x8
c0011edf:	68 56 41 02 c0       	push   0xc0024156
c0011ee4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ee7:	50                   	push   eax
c0011ee8:	e8 9e fe ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011eed:	83 c4 10             	add    esp,0x10
c0011ef0:	85 c0                	test   eax,eax
c0011ef2:	0f 85 cf 00 00 00    	jne    c0011fc7 <SysOpen(regs*)+0x1f1>
c0011ef8:	83 ec 08             	sub    esp,0x8
c0011efb:	68 52 41 02 c0       	push   0xc0024152
c0011f00:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f03:	51                   	push   ecx
c0011f04:	e8 77 e8 fe ff       	call   c0000780 <strcmp>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	85 c0                	test   eax,eax
c0011f0e:	0f 84 b3 00 00 00    	je     c0011fc7 <SysOpen(regs*)+0x1f1>
c0011f14:	83 ec 08             	sub    esp,0x8
c0011f17:	68 51 41 02 c0       	push   0xc0024151
c0011f1c:	56                   	push   esi
c0011f1d:	e8 69 fe ff ff       	call   c0011d8b <string_ends_with(char const*, char const*)>
c0011f22:	83 c4 10             	add    esp,0x10
c0011f25:	85 c0                	test   eax,eax
c0011f27:	0f 85 9a 00 00 00    	jne    c0011fc7 <SysOpen(regs*)+0x1f1>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	68 14 01 00 00       	push   0x114
c0011f35:	e8 76 db ff ff       	call   c000fab0 <malloc>
c0011f3a:	83 c4 0c             	add    esp,0xc
c0011f3d:	89 c6                	mov    esi,eax
c0011f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f47:	50                   	push   eax
c0011f48:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f4b:	52                   	push   edx
c0011f4c:	56                   	push   esi
c0011f4d:	e8 da 61 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	85 f6                	test   esi,esi
c0011f57:	74 5b                	je     c0011fb4 <SysOpen(regs*)+0x1de>
c0011f59:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f5c:	0f b6 c2             	movzx  eax,dl
c0011f5f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011f62:	89 d0                	mov    eax,edx
c0011f64:	83 e0 01             	and    eax,0x1
c0011f67:	f6 c2 02             	test   dl,0x2
c0011f6a:	74 03                	je     c0011f6f <SysOpen(regs*)+0x199>
c0011f6c:	83 c8 02             	or     eax,0x2
c0011f6f:	f6 c2 04             	test   dl,0x4
c0011f72:	74 03                	je     c0011f77 <SysOpen(regs*)+0x1a1>
c0011f74:	83 c8 04             	or     eax,0x4
c0011f77:	f6 c2 08             	test   dl,0x8
c0011f7a:	74 03                	je     c0011f7f <SysOpen(regs*)+0x1a9>
c0011f7c:	83 c8 0a             	or     eax,0xa
c0011f7f:	80 e2 10             	and    dl,0x10
c0011f82:	74 03                	je     c0011f87 <SysOpen(regs*)+0x1b1>
c0011f84:	83 c8 12             	or     eax,0x12
c0011f87:	83 ec 08             	sub    esp,0x8
c0011f8a:	50                   	push   eax
c0011f8b:	56                   	push   esi
c0011f8c:	e8 b9 61 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	85 c0                	test   eax,eax
c0011f96:	75 1c                	jne    c0011fb4 <SysOpen(regs*)+0x1de>
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	56                   	push   esi
c0011f9c:	e8 4b 0e 00 00       	call   c0012dec <UnixFile::getFileDescriptor()>
c0011fa1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	89 02                	mov    DWORD PTR [edx],eax
c0011fa9:	c1 f8 1f             	sar    eax,0x1f
c0011fac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011faf:	e9 ba fe ff ff       	jmp    c0011e6e <SysOpen(regs*)+0x98>
c0011fb4:	81 c4 04 01 00 00    	add    esp,0x104
c0011fba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbf:	5b                   	pop    ebx
c0011fc0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc5:	5e                   	pop    esi
c0011fc6:	c3                   	ret    
c0011fc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fca:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011fd0:	e9 92 fe ff ff       	jmp    c0011e67 <SysOpen(regs*)+0x91>

c0011fd5 <KeSystemCall(regs*, void*)>:
c0011fd5:	53                   	push   ebx
c0011fd6:	83 ec 08             	sub    esp,0x8
c0011fd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fdd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011fe0:	83 f8 48             	cmp    eax,0x48
c0011fe3:	77 16                	ja     c0011ffb <KeSystemCall(regs*, void*)+0x26>
c0011fe5:	8b 14 85 00 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c00]
c0011fec:	85 d2                	test   edx,edx
c0011fee:	74 0b                	je     c0011ffb <KeSystemCall(regs*, void*)+0x26>
c0011ff0:	83 ec 0c             	sub    esp,0xc
c0011ff3:	53                   	push   ebx
c0011ff4:	ff d2                	call   edx
c0011ff6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ff9:	eb 0d                	jmp    c0012008 <KeSystemCall(regs*, void*)+0x33>
c0011ffb:	52                   	push   edx
c0011ffc:	52                   	push   edx
c0011ffd:	50                   	push   eax
c0011ffe:	68 5b 41 02 c0       	push   0xc002415b
c0012003:	e8 46 4f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012010:	83 c4 08             	add    esp,0x8
c0012013:	31 d2                	xor    edx,edx
c0012015:	5b                   	pop    ebx
c0012016:	c3                   	ret    
c0012017:	90                   	nop

c0012018 <VgaText::isAtty()>:
c0012018:	b0 01                	mov    al,0x1
c001201a:	c3                   	ret    
c001201b:	90                   	nop

c001201c <VgaText::~VgaText()>:
c001201c:	83 ec 0c             	sub    esp,0xc
c001201f:	ba d8 41 02 c0       	mov    edx,0xc00241d8
c0012024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012028:	89 10                	mov    DWORD PTR [eax],edx
c001202a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001202e:	83 ec 0c             	sub    esp,0xc
c0012031:	50                   	push   eax
c0012032:	e8 a3 0f 00 00       	call   c0012fda <UnixFile::~UnixFile()>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	90                   	nop
c001203b:	83 c4 0c             	add    esp,0xc
c001203e:	c3                   	ret    
c001203f:	90                   	nop

c0012040 <VgaText::~VgaText()>:
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204a:	e8 cd ff ff ff       	call   c001201c <VgaText::~VgaText()>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	83 ec 08             	sub    esp,0x8
c0012055:	68 84 01 00 00       	push   0x184
c001205a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001205e:	e8 c4 b1 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	83 c4 0c             	add    esp,0xc
c0012069:	c3                   	ret    

c001206a <VgaText::read(unsigned long long, void*, int*)>:
c001206a:	83 ec 10             	sub    esp,0x10
c001206d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012071:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012079:	e8 6f 84 ff ff       	call   c000a4ed <readKeyboard(VgaText*, char*, unsigned long)>
c001207e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012082:	89 02                	mov    DWORD PTR [edx],eax
c0012084:	31 c0                	xor    eax,eax
c0012086:	83 c4 1c             	add    esp,0x1c
c0012089:	c3                   	ret    

c001208a <setTerminalScrollLock(bool)>:
c001208a:	c3                   	ret    

c001208b <doTerminalCycle()>:
c001208b:	c3                   	ret    

c001208c <addToTerminalCycle(VgaText*)>:
c001208c:	c3                   	ret    

c001208d <scrollTerminalScrollLock(int)>:
c001208d:	c3                   	ret    

c001208e <VgaText::updateTitle()>:
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VgaText::load()>:
c0012090:	c3                   	ret    
c0012091:	90                   	nop

c0012092 <VgaText::updateCursor()>:
c0012092:	83 ec 14             	sub    esp,0x14
c0012095:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012099:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001209c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001209f:	e8 f4 8e 00 00       	call   c001af98 <HalConsoleCursorUpdate(int, int)>
c00120a4:	83 c4 1c             	add    esp,0x1c
c00120a7:	c3                   	ret    

c00120a8 <VgaText::doANSI_SGR(int)>:
c00120a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120b0:	85 d2                	test   edx,edx
c00120b2:	75 0b                	jne    c00120bf <VgaText::doANSI_SGR(int)+0x17>
c00120b4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00120b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120ba:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120bd:	eb 59                	jmp    c0012118 <VgaText::doANSI_SGR(int)+0x70>
c00120bf:	83 fa 07             	cmp    edx,0x7
c00120c2:	75 0b                	jne    c00120cf <VgaText::doANSI_SGR(int)+0x27>
c00120c4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00120c7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00120ca:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00120cd:	eb 49                	jmp    c0012118 <VgaText::doANSI_SGR(int)+0x70>
c00120cf:	83 fa 1b             	cmp    edx,0x1b
c00120d2:	74 e0                	je     c00120b4 <VgaText::doANSI_SGR(int)+0xc>
c00120d4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00120d7:	83 f9 07             	cmp    ecx,0x7
c00120da:	77 09                	ja     c00120e5 <VgaText::doANSI_SGR(int)+0x3d>
c00120dc:	8b 14 8d 60 65 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9aa0]
c00120e3:	eb 20                	jmp    c0012105 <VgaText::doANSI_SGR(int)+0x5d>
c00120e5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00120e8:	83 f9 07             	cmp    ecx,0x7
c00120eb:	77 09                	ja     c00120f6 <VgaText::doANSI_SGR(int)+0x4e>
c00120ed:	8b 14 8d 60 65 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9aa0]
c00120f4:	eb 22                	jmp    c0012118 <VgaText::doANSI_SGR(int)+0x70>
c00120f6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00120f9:	83 f9 07             	cmp    ecx,0x7
c00120fc:	77 0b                	ja     c0012109 <VgaText::doANSI_SGR(int)+0x61>
c00120fe:	8b 14 95 18 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be8]
c0012105:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012108:	c3                   	ret    
c0012109:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001210c:	83 f9 07             	cmp    ecx,0x7
c001210f:	77 0a                	ja     c001211b <VgaText::doANSI_SGR(int)+0x73>
c0012111:	8b 14 95 f0 63 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9c10]
c0012118:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001211b:	c3                   	ret    

c001211c <VgaText::setDefaultBgColour(VgaColour)>:
c001211c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012124:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012127:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001212a:	c3                   	ret    
c001212b:	90                   	nop

c001212c <VgaText::setDefaultFgColour(VgaColour)>:
c001212c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012130:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012134:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012137:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001213a:	c3                   	ret    
c001213b:	90                   	nop

c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001213c:	53                   	push   ebx
c001213d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012141:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012149:	51                   	push   ecx
c001214a:	e8 cd ff ff ff       	call   c001211c <VgaText::setDefaultBgColour(VgaColour)>
c001214f:	58                   	pop    eax
c0012150:	5a                   	pop    edx
c0012151:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012155:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012159:	5b                   	pop    ebx
c001215a:	eb d0                	jmp    c001212c <VgaText::setDefaultFgColour(VgaColour)>

c001215c <VgaText::setTitleTextColour(VgaColour)>:
c001215c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012164:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012167:	c3                   	ret    

c0012168 <VgaText::setTitleColour(VgaColour)>:
c0012168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001216c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012170:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012173:	c3                   	ret    

c0012174 <VgaText::setTitle(char*)>:
c0012174:	c3                   	ret    
c0012175:	90                   	nop

c0012176 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001217a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001217f:	83 e0 0f             	and    eax,0xf
c0012182:	c1 e2 04             	shl    edx,0x4
c0012185:	09 d0                	or     eax,edx
c0012187:	c3                   	ret    

c0012188 <VgaText::scrollScreen()>:
c0012188:	55                   	push   ebp
c0012189:	57                   	push   edi
c001218a:	56                   	push   esi
c001218b:	be 01 00 00 00       	mov    esi,0x1
c0012190:	53                   	push   ebx
c0012191:	83 ec 0c             	sub    esp,0xc
c0012194:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012198:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001219b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00121a1:	31 ff                	xor    edi,edi
c00121a3:	01 e9                	add    ecx,ebp
c00121a5:	8a 01                	mov    al,BYTE PTR [ecx]
c00121a7:	83 fe 18             	cmp    esi,0x18
c00121aa:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00121b0:	75 20                	jne    c00121d2 <VgaText::scrollScreen()+0x4a>
c00121b2:	f7 c7 01 00 00 00    	test   edi,0x1
c00121b8:	74 15                	je     c00121cf <VgaText::scrollScreen()+0x47>
c00121ba:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00121be:	50                   	push   eax
c00121bf:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00121c3:	50                   	push   eax
c00121c4:	e8 ad ff ff ff       	call   c0012176 <VgaText::combineColours(unsigned char, unsigned char)>
c00121c9:	5a                   	pop    edx
c00121ca:	5a                   	pop    edx
c00121cb:	88 01                	mov    BYTE PTR [ecx],al
c00121cd:	eb 03                	jmp    c00121d2 <VgaText::scrollScreen()+0x4a>
c00121cf:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00121d2:	47                   	inc    edi
c00121d3:	41                   	inc    ecx
c00121d4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00121da:	75 c9                	jne    c00121a5 <VgaText::scrollScreen()+0x1d>
c00121dc:	46                   	inc    esi
c00121dd:	83 fe 19             	cmp    esi,0x19
c00121e0:	75 b9                	jne    c001219b <VgaText::scrollScreen()+0x13>
c00121e2:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c00121e8:	75 1f                	jne    c0012209 <VgaText::scrollScreen()+0x81>
c00121ea:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00121ee:	74 05                	je     c00121f5 <VgaText::scrollScreen()+0x6d>
c00121f0:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00121f3:	eb 14                	jmp    c0012209 <VgaText::scrollScreen()+0x81>
c00121f5:	50                   	push   eax
c00121f6:	50                   	push   eax
c00121f7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00121fb:	50                   	push   eax
c00121fc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012200:	50                   	push   eax
c0012201:	e8 26 8c 00 00       	call   c001ae2c <HalConsoleScroll(int, int)>
c0012206:	83 c4 10             	add    esp,0x10
c0012209:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001220d:	83 c4 0c             	add    esp,0xc
c0012210:	5b                   	pop    ebx
c0012211:	5e                   	pop    esi
c0012212:	5f                   	pop    edi
c0012213:	5d                   	pop    ebp
c0012214:	e9 79 fe ff ff       	jmp    c0012092 <VgaText::updateCursor()>
c0012219:	90                   	nop

c001221a <VgaText::combineCharAndColour(char, unsigned char)>:
c001221a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001221f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012224:	c1 e0 08             	shl    eax,0x8
c0012227:	09 d0                	or     eax,edx
c0012229:	c3                   	ret    

c001222a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001222a:	55                   	push   ebp
c001222b:	57                   	push   edi
c001222c:	56                   	push   esi
c001222d:	53                   	push   ebx
c001222e:	83 ec 1c             	sub    esp,0x1c
c0012231:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012235:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012239:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001223d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012241:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012244:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012248:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001224c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012250:	85 ed                	test   ebp,ebp
c0012252:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012256:	75 14                	jne    c001226c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012258:	c7 44 24 30 6f 41 02 c0 	mov    DWORD PTR [esp+0x30],0xc002416f
c0012260:	83 c4 1c             	add    esp,0x1c
c0012263:	5b                   	pop    ebx
c0012264:	5e                   	pop    esi
c0012265:	5f                   	pop    edi
c0012266:	5d                   	pop    ebp
c0012267:	e9 8a db ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001226c:	50                   	push   eax
c001226d:	50                   	push   eax
c001226e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012273:	50                   	push   eax
c0012274:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012279:	50                   	push   eax
c001227a:	e8 f7 fe ff ff       	call   c0012176 <VgaText::combineColours(unsigned char, unsigned char)>
c001227f:	5a                   	pop    edx
c0012280:	5a                   	pop    edx
c0012281:	0f b6 c0             	movzx  eax,al
c0012284:	0f be c9             	movsx  ecx,cl
c0012287:	50                   	push   eax
c0012288:	51                   	push   ecx
c0012289:	e8 8c ff ff ff       	call   c001221a <VgaText::combineCharAndColour(char, unsigned char)>
c001228e:	6b d6 50             	imul   edx,esi,0x50
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	01 da                	add    edx,ebx
c0012296:	0f b7 d2             	movzx  edx,dx
c0012299:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001229e:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00122a4:	75 28                	jne    c00122ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00122a6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00122aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122ae:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00122b2:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00122b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00122ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00122c2:	83 c4 1c             	add    esp,0x1c
c00122c5:	5b                   	pop    ebx
c00122c6:	5e                   	pop    esi
c00122c7:	5f                   	pop    edi
c00122c8:	5d                   	pop    ebp
c00122c9:	e9 66 8c 00 00       	jmp    c001af34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00122ce:	83 c4 1c             	add    esp,0x1c
c00122d1:	5b                   	pop    ebx
c00122d2:	5e                   	pop    esi
c00122d3:	5f                   	pop    edi
c00122d4:	5d                   	pop    ebp
c00122d5:	c3                   	ret    

c00122d6 <VgaText::getCursorX()>:
c00122d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00122dd:	c3                   	ret    

c00122de <VgaText::getCursorY()>:
c00122de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122e5:	c3                   	ret    

c00122e6 <VgaText::setCursor(int, int)>:
c00122e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122ee:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00122f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00122f8:	e9 95 fd ff ff       	jmp    c0012092 <VgaText::updateCursor()>

c00122fd <setActiveTerminal(VgaText*)>:
c00122fd:	53                   	push   ebx
c00122fe:	83 ec 08             	sub    esp,0x8
c0012301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012305:	85 db                	test   ebx,ebx
c0012307:	75 11                	jne    c001231a <setActiveTerminal(VgaText*)+0x1d>
c0012309:	c7 44 24 10 7f 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc002417f
c0012311:	83 c4 08             	add    esp,0x8
c0012314:	5b                   	pop    ebx
c0012315:	e9 dc da ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001231a:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c001231f:	85 c0                	test   eax,eax
c0012321:	74 0c                	je     c001232f <setActiveTerminal(VgaText*)+0x32>
c0012323:	83 ec 0c             	sub    esp,0xc
c0012326:	50                   	push   eax
c0012327:	e8 66 fd ff ff       	call   c0012092 <VgaText::updateCursor()>
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	50                   	push   eax
c0012330:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012333:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c0012339:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001233c:	53                   	push   ebx
c001233d:	e8 a4 ff ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c0012342:	83 c4 18             	add    esp,0x18
c0012345:	5b                   	pop    ebx
c0012346:	c3                   	ret    
c0012347:	90                   	nop

c0012348 <VgaText::clearScreen()>:
c0012348:	57                   	push   edi
c0012349:	56                   	push   esi
c001234a:	31 f6                	xor    esi,esi
c001234c:	53                   	push   ebx
c001234d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012351:	52                   	push   edx
c0012352:	6a 00                	push   0x0
c0012354:	6a 00                	push   0x0
c0012356:	53                   	push   ebx
c0012357:	e8 8a ff ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c001235c:	83 c4 10             	add    esp,0x10
c001235f:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012366:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012369:	7e 20                	jle    c001238b <VgaText::clearScreen()+0x43>
c001236b:	31 ff                	xor    edi,edi
c001236d:	50                   	push   eax
c001236e:	50                   	push   eax
c001236f:	56                   	push   esi
c0012370:	57                   	push   edi
c0012371:	47                   	inc    edi
c0012372:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012375:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012378:	6a 20                	push   0x20
c001237a:	53                   	push   ebx
c001237b:	e8 aa fe ff ff       	call   c001222a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012380:	83 c4 20             	add    esp,0x20
c0012383:	83 ff 50             	cmp    edi,0x50
c0012386:	75 e5                	jne    c001236d <VgaText::clearScreen()+0x25>
c0012388:	46                   	inc    esi
c0012389:	eb db                	jmp    c0012366 <VgaText::clearScreen()+0x1e>
c001238b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012392:	5b                   	pop    ebx
c0012393:	5e                   	pop    esi
c0012394:	5f                   	pop    edi
c0012395:	c3                   	ret    

c0012396 <VgaText::setCursorX(int)>:
c0012396:	83 ec 10             	sub    esp,0x10
c0012399:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001239d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00123a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123a4:	50                   	push   eax
c00123a5:	e8 3c ff ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c00123aa:	83 c4 1c             	add    esp,0x1c
c00123ad:	c3                   	ret    

c00123ae <VgaText::setCursorY(int)>:
c00123ae:	83 ec 10             	sub    esp,0x10
c00123b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123b9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00123bc:	50                   	push   eax
c00123bd:	e8 24 ff ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c00123c2:	83 c4 1c             	add    esp,0x1c
c00123c5:	c3                   	ret    

c00123c6 <VgaText::incrementCursor(bool)>:
c00123c6:	56                   	push   esi
c00123c7:	53                   	push   ebx
c00123c8:	51                   	push   ecx
c00123c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00123d1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00123d4:	40                   	inc    eax
c00123d5:	83 f8 50             	cmp    eax,0x50
c00123d8:	74 05                	je     c00123df <VgaText::incrementCursor(bool)+0x19>
c00123da:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00123dd:	eb 24                	jmp    c0012403 <VgaText::incrementCursor(bool)+0x3d>
c00123df:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00123e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123e9:	8d 50 01             	lea    edx,[eax+0x1]
c00123ec:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00123ef:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00123f2:	75 0f                	jne    c0012403 <VgaText::incrementCursor(bool)+0x3d>
c00123f4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00123f7:	83 ec 0c             	sub    esp,0xc
c00123fa:	53                   	push   ebx
c00123fb:	e8 88 fd ff ff       	call   c0012188 <VgaText::scrollScreen()>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	89 f0                	mov    eax,esi
c0012405:	84 c0                	test   al,al
c0012407:	74 0c                	je     c0012415 <VgaText::incrementCursor(bool)+0x4f>
c0012409:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001240d:	5a                   	pop    edx
c001240e:	5b                   	pop    ebx
c001240f:	5e                   	pop    esi
c0012410:	e9 7d fc ff ff       	jmp    c0012092 <VgaText::updateCursor()>
c0012415:	58                   	pop    eax
c0012416:	5b                   	pop    ebx
c0012417:	5e                   	pop    esi
c0012418:	c3                   	ret    
c0012419:	90                   	nop

c001241a <VgaText::decrementCursor(bool)>:
c001241a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001241e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012422:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012425:	85 c0                	test   eax,eax
c0012427:	74 04                	je     c001242d <VgaText::decrementCursor(bool)+0x13>
c0012429:	48                   	dec    eax
c001242a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001242d:	84 c9                	test   cl,cl
c001242f:	74 09                	je     c001243a <VgaText::decrementCursor(bool)+0x20>
c0012431:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012435:	e9 58 fc ff ff       	jmp    c0012092 <VgaText::updateCursor()>
c001243a:	c3                   	ret    
c001243b:	90                   	nop

c001243c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001243c:	53                   	push   ebx
c001243d:	83 ec 08             	sub    esp,0x8
c0012440:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012449:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001244d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012451:	83 f8 07             	cmp    eax,0x7
c0012454:	75 21                	jne    c0012477 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012456:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001245e:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012466:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001246e:	83 c4 08             	add    esp,0x8
c0012471:	5b                   	pop    ebx
c0012472:	e9 58 65 ff ff       	jmp    c00089cf <KeBeep(int, int, bool)>
c0012477:	83 f8 0d             	cmp    eax,0xd
c001247a:	75 09                	jne    c0012485 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001247c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012483:	eb 2d                	jmp    c00124b2 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012485:	83 f8 0a             	cmp    eax,0xa
c0012488:	75 31                	jne    c00124bb <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001248a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012491:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012494:	8d 50 01             	lea    edx,[eax+0x1]
c0012497:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001249a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001249d:	75 0f                	jne    c00124ae <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001249f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00124a2:	83 ec 0c             	sub    esp,0xc
c00124a5:	53                   	push   ebx
c00124a6:	e8 dd fc ff ff       	call   c0012188 <VgaText::scrollScreen()>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124b2:	83 c4 08             	add    esp,0x8
c00124b5:	5b                   	pop    ebx
c00124b6:	e9 d7 fb ff ff       	jmp    c0012092 <VgaText::updateCursor()>
c00124bb:	83 f8 08             	cmp    eax,0x8
c00124be:	75 25                	jne    c00124e5 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00124c0:	50                   	push   eax
c00124c1:	50                   	push   eax
c00124c2:	6a 01                	push   0x1
c00124c4:	53                   	push   ebx
c00124c5:	e8 50 ff ff ff       	call   c001241a <VgaText::decrementCursor(bool)>
c00124ca:	5a                   	pop    edx
c00124cb:	59                   	pop    ecx
c00124cc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124cf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124d2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00124d5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00124d8:	6a 20                	push   0x20
c00124da:	53                   	push   ebx
c00124db:	e8 4a fd ff ff       	call   c001222a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124e0:	83 c4 28             	add    esp,0x28
c00124e3:	5b                   	pop    ebx
c00124e4:	c3                   	ret    
c00124e5:	83 ec 08             	sub    esp,0x8
c00124e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124ee:	51                   	push   ecx
c00124ef:	52                   	push   edx
c00124f0:	50                   	push   eax
c00124f1:	53                   	push   ebx
c00124f2:	e8 33 fd ff ff       	call   c001222a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124f7:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00124fb:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012503:	83 c4 28             	add    esp,0x28
c0012506:	5b                   	pop    ebx
c0012507:	e9 ba fe ff ff       	jmp    c00123c6 <VgaText::incrementCursor(bool)>

c001250c <VgaText::putchar(char)>:
c001250c:	57                   	push   edi
c001250d:	56                   	push   esi
c001250e:	53                   	push   ebx
c001250f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012517:	0f be c2             	movsx  eax,dl
c001251a:	83 f8 5b             	cmp    eax,0x5b
c001251d:	75 18                	jne    c0012537 <VgaText::putchar(char)+0x2b>
c001251f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012523:	74 20                	je     c0012545 <VgaText::putchar(char)+0x39>
c0012525:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001252b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012532:	e9 b8 00 00 00       	jmp    c00125ef <VgaText::putchar(char)+0xe3>
c0012537:	83 f8 1b             	cmp    eax,0x1b
c001253a:	75 09                	jne    c0012545 <VgaText::putchar(char)+0x39>
c001253c:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012540:	e9 aa 00 00 00       	jmp    c00125ef <VgaText::putchar(char)+0xe3>
c0012545:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0012549:	89 f9                	mov    ecx,edi
c001254b:	84 c9                	test   cl,cl
c001254d:	0f 84 8c 00 00 00    	je     c00125df <VgaText::putchar(char)+0xd3>
c0012553:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012556:	80 f9 3e             	cmp    cl,0x3e
c0012559:	77 70                	ja     c00125cb <VgaText::putchar(char)+0xbf>
c001255b:	83 f8 6d             	cmp    eax,0x6d
c001255e:	75 3f                	jne    c001259f <VgaText::putchar(char)+0x93>
c0012560:	31 f6                	xor    esi,esi
c0012562:	31 d2                	xor    edx,edx
c0012564:	31 c0                	xor    eax,eax
c0012566:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012569:	7e 25                	jle    c0012590 <VgaText::putchar(char)+0x84>
c001256b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012570:	83 fa 3b             	cmp    edx,0x3b
c0012573:	75 0f                	jne    c0012584 <VgaText::putchar(char)+0x78>
c0012575:	50                   	push   eax
c0012576:	53                   	push   ebx
c0012577:	e8 2c fb ff ff       	call   c00120a8 <VgaText::doANSI_SGR(int)>
c001257c:	31 d2                	xor    edx,edx
c001257e:	59                   	pop    ecx
c001257f:	58                   	pop    eax
c0012580:	31 c0                	xor    eax,eax
c0012582:	eb 09                	jmp    c001258d <VgaText::putchar(char)+0x81>
c0012584:	6b c0 0a             	imul   eax,eax,0xa
c0012587:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001258b:	89 fa                	mov    edx,edi
c001258d:	46                   	inc    esi
c001258e:	eb d6                	jmp    c0012566 <VgaText::putchar(char)+0x5a>
c0012590:	84 d2                	test   dl,dl
c0012592:	74 2f                	je     c00125c3 <VgaText::putchar(char)+0xb7>
c0012594:	50                   	push   eax
c0012595:	53                   	push   ebx
c0012596:	e8 0d fb ff ff       	call   c00120a8 <VgaText::doANSI_SGR(int)>
c001259b:	58                   	pop    eax
c001259c:	5a                   	pop    edx
c001259d:	eb 24                	jmp    c00125c3 <VgaText::putchar(char)+0xb7>
c001259f:	83 f8 4a             	cmp    eax,0x4a
c00125a2:	75 1f                	jne    c00125c3 <VgaText::putchar(char)+0xb7>
c00125a4:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00125a8:	75 19                	jne    c00125c3 <VgaText::putchar(char)+0xb7>
c00125aa:	83 ec 0c             	sub    esp,0xc
c00125ad:	53                   	push   ebx
c00125ae:	e8 95 fd ff ff       	call   c0012348 <VgaText::clearScreen()>
c00125b3:	83 c4 0c             	add    esp,0xc
c00125b6:	6a 00                	push   0x0
c00125b8:	6a 00                	push   0x0
c00125ba:	53                   	push   ebx
c00125bb:	e8 26 fd ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00125c9:	eb 24                	jmp    c00125ef <VgaText::putchar(char)+0xe3>
c00125cb:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00125ce:	83 f8 0e             	cmp    eax,0xe
c00125d1:	7f 1c                	jg     c00125ef <VgaText::putchar(char)+0xe3>
c00125d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00125d6:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00125d9:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c00125dd:	eb 10                	jmp    c00125ef <VgaText::putchar(char)+0xe3>
c00125df:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125e2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125e5:	50                   	push   eax
c00125e6:	53                   	push   ebx
c00125e7:	e8 50 fe ff ff       	call   c001243c <VgaText::putchar(char, VgaColour, VgaColour)>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	5b                   	pop    ebx
c00125f0:	5e                   	pop    esi
c00125f1:	5f                   	pop    edi
c00125f2:	c3                   	ret    
c00125f3:	90                   	nop

c00125f4 <VgaText::putx(unsigned int)>:
c00125f4:	57                   	push   edi
c00125f5:	b9 11 00 00 00       	mov    ecx,0x11
c00125fa:	56                   	push   esi
c00125fb:	be 8d 41 02 c0       	mov    esi,0xc002418d
c0012600:	53                   	push   ebx
c0012601:	83 ec 20             	sub    esp,0x20
c0012604:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012608:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001260c:	fc                   	cld    
c001260d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001260f:	be 08 00 00 00       	mov    esi,0x8
c0012614:	50                   	push   eax
c0012615:	50                   	push   eax
c0012616:	89 d8                	mov    eax,ebx
c0012618:	c1 e8 1c             	shr    eax,0x1c
c001261b:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012620:	c1 e3 04             	shl    ebx,0x4
c0012623:	50                   	push   eax
c0012624:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012628:	e8 df fe ff ff       	call   c001250c <VgaText::putchar(char)>
c001262d:	83 c4 10             	add    esp,0x10
c0012630:	4e                   	dec    esi
c0012631:	75 e1                	jne    c0012614 <VgaText::putx(unsigned int)+0x20>
c0012633:	83 c4 20             	add    esp,0x20
c0012636:	5b                   	pop    ebx
c0012637:	5e                   	pop    esi
c0012638:	5f                   	pop    edi
c0012639:	c3                   	ret    

c001263a <VgaText::puts(char const*)>:
c001263a:	53                   	push   ebx
c001263b:	83 ec 08             	sub    esp,0x8
c001263e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012642:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012645:	85 c0                	test   eax,eax
c0012647:	74 12                	je     c001265b <VgaText::puts(char const*)+0x21>
c0012649:	51                   	push   ecx
c001264a:	43                   	inc    ebx
c001264b:	51                   	push   ecx
c001264c:	50                   	push   eax
c001264d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012651:	e8 b6 fe ff ff       	call   c001250c <VgaText::putchar(char)>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	eb e7                	jmp    c0012642 <VgaText::puts(char const*)+0x8>
c001265b:	83 c4 08             	add    esp,0x8
c001265e:	5b                   	pop    ebx
c001265f:	c3                   	ret    

c0012660 <VgaText::write(unsigned long long, void*, int*)>:
c0012660:	55                   	push   ebp
c0012661:	57                   	push   edi
c0012662:	56                   	push   esi
c0012663:	53                   	push   ebx
c0012664:	83 ec 0c             	sub    esp,0xc
c0012667:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001266b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001266f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012673:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001267a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001267d:	39 eb                	cmp    ebx,ebp
c001267f:	74 13                	je     c0012694 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012681:	50                   	push   eax
c0012682:	43                   	inc    ebx
c0012683:	50                   	push   eax
c0012684:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012688:	50                   	push   eax
c0012689:	56                   	push   esi
c001268a:	e8 7d fe ff ff       	call   c001250c <VgaText::putchar(char)>
c001268f:	83 c4 10             	add    esp,0x10
c0012692:	eb e9                	jmp    c001267d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012694:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001269b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001269f:	89 38                	mov    DWORD PTR [eax],edi
c00126a1:	83 c4 0c             	add    esp,0xc
c00126a4:	31 c0                	xor    eax,eax
c00126a6:	5b                   	pop    ebx
c00126a7:	5e                   	pop    esi
c00126a8:	5f                   	pop    edi
c00126a9:	5d                   	pop    ebp
c00126aa:	c3                   	ret    
c00126ab:	90                   	nop

c00126ac <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00126ac:	55                   	push   ebp
c00126ad:	57                   	push   edi
c00126ae:	56                   	push   esi
c00126af:	53                   	push   ebx
c00126b0:	83 ec 1c             	sub    esp,0x1c
c00126b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00126bf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00126c3:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00126c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126ca:	85 db                	test   ebx,ebx
c00126cc:	75 14                	jne    c00126e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c00126ce:	c7 44 24 30 9e 41 02 c0 	mov    DWORD PTR [esp+0x30],0xc002419e
c00126d6:	83 c4 1c             	add    esp,0x1c
c00126d9:	5b                   	pop    ebx
c00126da:	5e                   	pop    esi
c00126db:	5f                   	pop    edi
c00126dc:	5d                   	pop    ebp
c00126dd:	e9 14 d7 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c00126e2:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00126e9:	50                   	push   eax
c00126ea:	50                   	push   eax
c00126eb:	89 e8                	mov    eax,ebp
c00126ed:	0f b6 c0             	movzx  eax,al
c00126f0:	50                   	push   eax
c00126f1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00126f6:	50                   	push   eax
c00126f7:	e8 7a fa ff ff       	call   c0012176 <VgaText::combineColours(unsigned char, unsigned char)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012703:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012706:	0f b6 c0             	movzx  eax,al
c0012709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001270d:	0f b7 c9             	movzx  ecx,cx
c0012710:	01 c9                	add    ecx,ecx
c0012712:	01 cb                	add    ebx,ecx
c0012714:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012717:	85 c0                	test   eax,eax
c0012719:	0f 84 ef 00 00 00    	je     c001280e <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c001271f:	83 f8 0d             	cmp    eax,0xd
c0012722:	75 0c                	jne    c0012730 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012724:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001272b:	e9 d8 00 00 00       	jmp    c0012808 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012730:	83 f8 0a             	cmp    eax,0xa
c0012733:	75 44                	jne    c0012779 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012735:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001273c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001273f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012742:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012745:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012748:	75 0f                	jne    c0012759 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001274a:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001274d:	83 ec 0c             	sub    esp,0xc
c0012750:	57                   	push   edi
c0012751:	e8 32 fa ff ff       	call   c0012188 <VgaText::scrollScreen()>
c0012756:	83 c4 10             	add    esp,0x10
c0012759:	83 ec 0c             	sub    esp,0xc
c001275c:	57                   	push   edi
c001275d:	e8 30 f9 ff ff       	call   c0012092 <VgaText::updateCursor()>
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012769:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001276c:	0f b7 db             	movzx  ebx,bx
c001276f:	01 db                	add    ebx,ebx
c0012771:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012774:	e9 8f 00 00 00       	jmp    c0012808 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012779:	83 f8 08             	cmp    eax,0x8
c001277c:	75 34                	jne    c00127b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c001277e:	51                   	push   ecx
c001277f:	51                   	push   ecx
c0012780:	6a 01                	push   0x1
c0012782:	57                   	push   edi
c0012783:	e8 92 fc ff ff       	call   c001241a <VgaText::decrementCursor(bool)>
c0012788:	5b                   	pop    ebx
c0012789:	58                   	pop    eax
c001278a:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001278d:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012790:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012793:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012796:	6a 20                	push   0x20
c0012798:	57                   	push   edi
c0012799:	e8 8c fa ff ff       	call   c001222a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001279e:	83 c4 20             	add    esp,0x20
c00127a1:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00127a5:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00127a8:	0f b7 db             	movzx  ebx,bx
c00127ab:	01 db                	add    ebx,ebx
c00127ad:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00127b0:	eb 56                	jmp    c0012808 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127b2:	52                   	push   edx
c00127b3:	52                   	push   edx
c00127b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127b8:	50                   	push   eax
c00127b9:	e8 5c fa ff ff       	call   c001221a <VgaText::combineCharAndColour(char, unsigned char)>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	66 89 03             	mov    WORD PTR [ebx],ax
c00127c4:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00127ca:	75 1a                	jne    c00127e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00127cc:	83 ec 0c             	sub    esp,0xc
c00127cf:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00127d2:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00127d5:	55                   	push   ebp
c00127d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127dd:	50                   	push   eax
c00127de:	e8 51 87 00 00       	call   c001af34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00127e3:	83 c4 20             	add    esp,0x20
c00127e6:	50                   	push   eax
c00127e7:	83 c3 02             	add    ebx,0x2
c00127ea:	50                   	push   eax
c00127eb:	6a 00                	push   0x0
c00127ed:	57                   	push   edi
c00127ee:	e8 d3 fb ff ff       	call   c00123c6 <VgaText::incrementCursor(bool)>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00127fa:	75 0c                	jne    c0012808 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127fc:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012800:	0f b7 db             	movzx  ebx,bx
c0012803:	01 db                	add    ebx,ebx
c0012805:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012808:	46                   	inc    esi
c0012809:	e9 06 ff ff ff       	jmp    c0012714 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001280e:	83 ec 0c             	sub    esp,0xc
c0012811:	57                   	push   edi
c0012812:	e8 7b f8 ff ff       	call   c0012092 <VgaText::updateCursor()>
c0012817:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c001281e:	83 c4 2c             	add    esp,0x2c
c0012821:	5b                   	pop    ebx
c0012822:	5e                   	pop    esi
c0012823:	5f                   	pop    edi
c0012824:	5d                   	pop    ebp
c0012825:	c3                   	ret    

c0012826 <VgaText::VgaText(char const*)>:
c0012826:	56                   	push   esi
c0012827:	53                   	push   ebx
c0012828:	83 ec 04             	sub    esp,0x4
c001282b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282f:	83 ec 08             	sub    esp,0x8
c0012832:	6a 00                	push   0x0
c0012834:	50                   	push   eax
c0012835:	e8 ba 05 00 00       	call   c0012df4 <UnixFile::UnixFile(int)>
c001283a:	83 c4 10             	add    esp,0x10
c001283d:	ba d8 41 02 c0       	mov    edx,0xc00241d8
c0012842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012846:	89 10                	mov    DWORD PTR [eax],edx
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012857:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001285e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012862:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001286e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012872:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012888:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012893:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001289a:	83 ec 0c             	sub    esp,0xc
c001289d:	68 ae 41 02 c0       	push   0xc00241ae
c00128a2:	e8 a7 46 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00128a7:	83 c4 10             	add    esp,0x10
c00128aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ae:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	6a 01                	push   0x1
c00128ba:	e8 96 09 00 00       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	89 c2                	mov    edx,eax
c00128c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128cb:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c00128d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d8:	89 c6                	mov    esi,eax
c00128da:	e8 11 d7 ff ff       	call   c000fff0 <Phys::allocatePage()>
c00128df:	68 05 0c 00 00       	push   0xc05
c00128e4:	56                   	push   esi
c00128e5:	50                   	push   eax
c00128e6:	53                   	push   ebx
c00128e7:	e8 42 10 00 00       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128f6:	83 ec 04             	sub    esp,0x4
c00128f9:	68 a0 0f 00 00       	push   0xfa0
c00128fe:	6a 00                	push   0x0
c0012900:	50                   	push   eax
c0012901:	e8 ea db fe ff       	call   c00004f0 <memset>
c0012906:	83 c4 10             	add    esp,0x10
c0012909:	83 ec 04             	sub    esp,0x4
c001290c:	6a 00                	push   0x0
c001290e:	6a 07                	push   0x7
c0012910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012914:	e8 23 f8 ff ff       	call   c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012919:	83 c4 10             	add    esp,0x10
c001291c:	83 ec 04             	sub    esp,0x4
c001291f:	6a 00                	push   0x0
c0012921:	6a 00                	push   0x0
c0012923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012927:	e8 ba f9 ff ff       	call   c00122e6 <VgaText::setCursor(int, int)>
c001292c:	83 c4 10             	add    esp,0x10
c001292f:	83 ec 0c             	sub    esp,0xc
c0012932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012936:	e8 0d fa ff ff       	call   c0012348 <VgaText::clearScreen()>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012942:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294a:	05 82 00 00 00       	add    eax,0x82
c001294f:	83 ec 04             	sub    esp,0x4
c0012952:	68 80 00 00 00       	push   0x80
c0012957:	6a 00                	push   0x0
c0012959:	50                   	push   eax
c001295a:	e8 91 db fe ff       	call   c00004f0 <memset>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012966:	05 02 01 00 00       	add    eax,0x102
c001296b:	83 ec 04             	sub    esp,0x4
c001296e:	68 80 00 00 00       	push   0x80
c0012973:	6a 00                	push   0x0
c0012975:	50                   	push   eax
c0012976:	e8 75 db fe ff       	call   c00004f0 <memset>
c001297b:	83 c4 10             	add    esp,0x10
c001297e:	90                   	nop
c001297f:	83 c4 04             	add    esp,0x4
c0012982:	5b                   	pop    ebx
c0012983:	5e                   	pop    esi
c0012984:	c3                   	ret    
c0012985:	90                   	nop

c0012986 <VgaText::receiveKey(unsigned char)>:
c0012986:	55                   	push   ebp
c0012987:	57                   	push   edi
c0012988:	56                   	push   esi
c0012989:	53                   	push   ebx
c001298a:	83 ec 2c             	sub    esp,0x2c
c001298d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012991:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012995:	89 fd                	mov    ebp,edi
c0012997:	81 e5 ff 00 00 00    	and    ebp,0xff
c001299d:	0f 84 48 01 00 00    	je     c0012aeb <VgaText::receiveKey(unsigned char)+0x165>
c00129a3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00129a9:	83 fd 08             	cmp    ebp,0x8
c00129ac:	75 6a                	jne    c0012a18 <VgaText::receiveKey(unsigned char)+0x92>
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	56                   	push   esi
c00129b2:	e8 c9 db fe ff       	call   c0000580 <strlen>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	85 c0                	test   eax,eax
c00129bc:	0f 84 ef 00 00 00    	je     c0012ab1 <VgaText::receiveKey(unsigned char)+0x12b>
c00129c2:	50                   	push   eax
c00129c3:	50                   	push   eax
c00129c4:	6a 08                	push   0x8
c00129c6:	53                   	push   ebx
c00129c7:	e8 40 fb ff ff       	call   c001250c <VgaText::putchar(char)>
c00129cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00129cf:	e8 ac db fe ff       	call   c0000580 <strlen>
c00129d4:	83 c4 10             	add    esp,0x10
c00129d7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00129df:	83 fa 1f             	cmp    edx,0x1f
c00129e2:	89 d0                	mov    eax,edx
c00129e4:	7f 1c                	jg     c0012a02 <VgaText::receiveKey(unsigned char)+0x7c>
c00129e6:	83 e8 08             	sub    eax,0x8
c00129e9:	3c 02                	cmp    al,0x2
c00129eb:	76 15                	jbe    c0012a02 <VgaText::receiveKey(unsigned char)+0x7c>
c00129ed:	83 fa 0d             	cmp    edx,0xd
c00129f0:	74 10                	je     c0012a02 <VgaText::receiveKey(unsigned char)+0x7c>
c00129f2:	57                   	push   edi
c00129f3:	57                   	push   edi
c00129f4:	68 c1 41 02 c0       	push   0xc00241c1
c00129f9:	53                   	push   ebx
c00129fa:	e8 3b fc ff ff       	call   c001263a <VgaText::puts(char const*)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	83 ec 0c             	sub    esp,0xc
c0012a05:	56                   	push   esi
c0012a06:	e8 75 db fe ff       	call   c0000580 <strlen>
c0012a0b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012a13:	e9 96 00 00 00       	jmp    c0012aae <VgaText::receiveKey(unsigned char)+0x128>
c0012a18:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 59 db fe ff       	call   c0000580 <strlen>
c0012a27:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a2e:	e8 4d db fe ff       	call   c0000580 <strlen>
c0012a33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012a3e:	3d 80 00 00 00       	cmp    eax,0x80
c0012a43:	0f 87 a2 00 00 00    	ja     c0012aeb <VgaText::receiveKey(unsigned char)+0x165>
c0012a49:	8d 47 ff             	lea    eax,[edi-0x1]
c0012a4c:	3c 1e                	cmp    al,0x1e
c0012a4e:	77 35                	ja     c0012a85 <VgaText::receiveKey(unsigned char)+0xff>
c0012a50:	8d 47 f7             	lea    eax,[edi-0x9]
c0012a53:	3c 01                	cmp    al,0x1
c0012a55:	76 2e                	jbe    c0012a85 <VgaText::receiveKey(unsigned char)+0xff>
c0012a57:	83 fd 0d             	cmp    ebp,0xd
c0012a5a:	74 29                	je     c0012a85 <VgaText::receiveKey(unsigned char)+0xff>
c0012a5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a5f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a62:	68 c7 41 02 c0       	push   0xc00241c7
c0012a67:	53                   	push   ebx
c0012a68:	e8 3f fc ff ff       	call   c00126ac <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012a6d:	8d 47 40             	lea    eax,[edi+0x40]
c0012a70:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a73:	0f b6 c0             	movzx  eax,al
c0012a76:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a79:	50                   	push   eax
c0012a7a:	53                   	push   ebx
c0012a7b:	e8 bc f9 ff ff       	call   c001243c <VgaText::putchar(char, VgaColour, VgaColour)>
c0012a80:	83 c4 20             	add    esp,0x20
c0012a83:	eb 11                	jmp    c0012a96 <VgaText::receiveKey(unsigned char)+0x110>
c0012a85:	51                   	push   ecx
c0012a86:	89 f8                	mov    eax,edi
c0012a88:	51                   	push   ecx
c0012a89:	0f be c0             	movsx  eax,al
c0012a8c:	50                   	push   eax
c0012a8d:	53                   	push   ebx
c0012a8e:	e8 79 fa ff ff       	call   c001250c <VgaText::putchar(char)>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012a9b:	89 f8                	mov    eax,edi
c0012a9d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012aa1:	52                   	push   edx
c0012aa2:	52                   	push   edx
c0012aa3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012aa7:	50                   	push   eax
c0012aa8:	56                   	push   esi
c0012aa9:	e8 c2 dd fe ff       	call   c0000870 <strcat>
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012ab8:	75 0f                	jne    c0012ac9 <VgaText::receiveKey(unsigned char)+0x143>
c0012aba:	83 fd 1c             	cmp    ebp,0x1c
c0012abd:	77 2c                	ja     c0012aeb <VgaText::receiveKey(unsigned char)+0x165>
c0012abf:	b8 08 04 00 10       	mov    eax,0x10000408
c0012ac4:	0f a3 e8             	bt     eax,ebp
c0012ac7:	73 22                	jae    c0012aeb <VgaText::receiveKey(unsigned char)+0x165>
c0012ac9:	50                   	push   eax
c0012aca:	81 c3 02 01 00 00    	add    ebx,0x102
c0012ad0:	50                   	push   eax
c0012ad1:	56                   	push   esi
c0012ad2:	53                   	push   ebx
c0012ad3:	e8 98 dd fe ff       	call   c0000870 <strcat>
c0012ad8:	83 c4 0c             	add    esp,0xc
c0012adb:	68 80 00 00 00       	push   0x80
c0012ae0:	6a 00                	push   0x0
c0012ae2:	56                   	push   esi
c0012ae3:	e8 08 da fe ff       	call   c00004f0 <memset>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	83 c4 2c             	add    esp,0x2c
c0012aee:	5b                   	pop    ebx
c0012aef:	5e                   	pop    esi
c0012af0:	5f                   	pop    edi
c0012af1:	5d                   	pop    ebp
c0012af2:	c3                   	ret    
c0012af3:	90                   	nop

c0012af4 <VgaText::doUpdate()>:
c0012af4:	c3                   	ret    
c0012af5:	66 90                	xchg   ax,ax
c0012af7:	90                   	nop

c0012af8 <TSS::TSS()>:
c0012af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012afc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b03:	90                   	nop
c0012b04:	c3                   	ret    
c0012b05:	90                   	nop
c0012b06:	66 90                	xchg   ax,ax

c0012b08 <TSS::setESP(unsigned long)>:
c0012b08:	55                   	push   ebp
c0012b09:	89 e5                	mov    ebp,esp
c0012b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b17:	90                   	nop
c0012b18:	5d                   	pop    ebp
c0012b19:	c3                   	ret    
c0012b1a:	66 90                	xchg   ax,ax

c0012b1c <TSS::flush()>:
c0012b1c:	55                   	push   ebp
c0012b1d:	89 e5                	mov    ebp,esp
c0012b1f:	83 ec 10             	sub    esp,0x10
c0012b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b27:	83 c8 03             	or     eax,0x3
c0012b2a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012b2e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012b32:	66 89 d0             	mov    ax,dx
c0012b35:	0f 00 d8             	ltr    ax
c0012b38:	90                   	nop
c0012b39:	c9                   	leave  
c0012b3a:	c3                   	ret    
c0012b3b:	90                   	nop

c0012b3c <TSS::setup(unsigned long, unsigned long)>:
c0012b3c:	55                   	push   ebp
c0012b3d:	89 e5                	mov    ebp,esp
c0012b3f:	83 ec 18             	sub    esp,0x18
c0012b42:	83 ec 0c             	sub    esp,0xc
c0012b45:	6a 68                	push   0x68
c0012b47:	e8 64 cf ff ff       	call   c000fab0 <malloc>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	89 c2                	mov    edx,eax
c0012b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b5d:	83 ec 08             	sub    esp,0x8
c0012b60:	50                   	push   eax
c0012b61:	68 ec 41 02 c0       	push   0xc00241ec
c0012b66:	e8 e3 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b74:	83 ec 04             	sub    esp,0x4
c0012b77:	6a 68                	push   0x68
c0012b79:	6a 00                	push   0x0
c0012b7b:	50                   	push   eax
c0012b7c:	e8 6f d9 fe ff       	call   c00004f0 <memset>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b8a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b96:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ba2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ba5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bae:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bba:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bc6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bd2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bde:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012be7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bea:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012bf9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c0e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012c15:	83 ec 0c             	sub    esp,0xc
c0012c18:	68 03 42 02 c0       	push   0xc0024203
c0012c1d:	e8 2c 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c2b:	0f 20 da             	mov    edx,cr3
c0012c2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012c31:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012c34:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012c37:	83 ec 0c             	sub    esp,0xc
c0012c3a:	68 06 42 02 c0       	push   0xc0024206
c0012c3f:	e8 0a 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c4d:	83 ec 08             	sub    esp,0x8
c0012c50:	50                   	push   eax
c0012c51:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c54:	50                   	push   eax
c0012c55:	e8 a4 bf ff ff       	call   c000ebfe <GDTEntry::setBase(unsigned int)>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	83 ec 08             	sub    esp,0x8
c0012c60:	6a 68                	push   0x68
c0012c62:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c65:	50                   	push   eax
c0012c66:	e8 af bf ff ff       	call   c000ec1a <GDTEntry::setLimit(unsigned int)>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012c72:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c75:	83 e0 0f             	and    eax,0xf
c0012c78:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c7b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c7e:	83 c8 40             	or     eax,0x40
c0012c81:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	68 09 42 02 c0       	push   0xc0024209
c0012c8c:	e8 bd 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012c99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c9f:	83 ec 08             	sub    esp,0x8
c0012ca2:	50                   	push   eax
c0012ca3:	68 0c 42 02 c0       	push   0xc002420c
c0012ca8:	e8 a1 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012cb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012cbb:	05 64 01 00 00       	add    eax,0x164
c0012cc0:	83 ec 04             	sub    esp,0x4
c0012cc3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012cc6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012cc9:	50                   	push   eax
c0012cca:	e8 7f bf ff ff       	call   c000ec4e <GDT::addEntry(GDTEntry)>
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	89 c2                	mov    edx,eax
c0012cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd7:	89 10                	mov    DWORD PTR [eax],edx
c0012cd9:	83 ec 0c             	sub    esp,0xc
c0012cdc:	68 21 42 02 c0       	push   0xc0024221
c0012ce1:	e8 68 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012cee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012cf4:	05 64 01 00 00       	add    eax,0x164
c0012cf9:	83 ec 0c             	sub    esp,0xc
c0012cfc:	50                   	push   eax
c0012cfd:	e8 76 bf ff ff       	call   c000ec78 <GDT::flush()>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	83 ec 0c             	sub    esp,0xc
c0012d08:	68 24 42 02 c0       	push   0xc0024224
c0012d0d:	e8 3c 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d12:	83 c4 10             	add    esp,0x10
c0012d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d1a:	c9                   	leave  
c0012d1b:	c3                   	ret    

c0012d1c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d27:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d2c:	75 08                	jne    c0012d36 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012d2e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d34:	eb 38                	jmp    c0012d6e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012d36:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012d3b:	75 17                	jne    c0012d54 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012d3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012d45:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012d4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d51:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012d54:	89 c1                	mov    ecx,eax
c0012d56:	83 e1 fd             	and    ecx,0xfffffffd
c0012d59:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012d5f:	74 cd                	je     c0012d2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d61:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d66:	83 e0 ef             	and    eax,0xffffffef
c0012d69:	83 f8 08             	cmp    eax,0x8
c0012d6c:	76 c0                	jbe    c0012d2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d6e:	31 c0                	xor    eax,eax
c0012d70:	c3                   	ret    
c0012d71:	90                   	nop

c0012d72 <ReservedFilename::isAtty()>:
c0012d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d76:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d79:	31 c0                	xor    eax,eax
c0012d7b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012d81:	74 09                	je     c0012d8c <ReservedFilename::isAtty()+0x1a>
c0012d83:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012d89:	0f 94 c0             	sete   al
c0012d8c:	c3                   	ret    
c0012d8d:	90                   	nop

c0012d8e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d9d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012da2:	75 08                	jne    c0012dac <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012da4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012daa:	eb 3d                	jmp    c0012de9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012dac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012db1:	75 17                	jne    c0012dca <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012db3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012db8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012dbb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012dc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dc7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012dca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012dcf:	75 04                	jne    c0012dd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012dd1:	89 0a                	mov    DWORD PTR [edx],ecx
c0012dd3:	eb 14                	jmp    c0012de9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012dd5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012dda:	74 c8                	je     c0012da4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ddc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012de1:	83 e0 ef             	and    eax,0xffffffef
c0012de4:	83 f8 08             	cmp    eax,0x8
c0012de7:	76 bb                	jbe    c0012da4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012de9:	31 c0                	xor    eax,eax
c0012deb:	c3                   	ret    

c0012dec <UnixFile::getFileDescriptor()>:
c0012dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012df0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012df3:	c3                   	ret    

c0012df4 <UnixFile::UnixFile(int)>:
c0012df4:	53                   	push   ebx
c0012df5:	83 ec 28             	sub    esp,0x28
c0012df8:	ba 74 42 02 c0       	mov    edx,0xc0024274
c0012dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e01:	89 10                	mov    DWORD PTR [eax],edx
c0012e03:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012e0b:	0f 8f 90 01 00 00    	jg     c0012fa1 <UnixFile::UnixFile(int)+0x1ad>
c0012e11:	a1 a0 65 02 c0       	mov    eax,ds:0xc00265a0
c0012e16:	8d 50 01             	lea    edx,[eax+0x1]
c0012e19:	89 15 a0 65 02 c0    	mov    DWORD PTR ds:0xc00265a0,edx
c0012e1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e23:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e26:	83 ec 08             	sub    esp,0x8
c0012e29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e2d:	68 38 e2 02 c0       	push   0xc002e238
c0012e32:	e8 c7 ef 00 00       	call   c0021dfe <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0012e3f:	83 f0 01             	xor    eax,0x1
c0012e42:	0f b6 c0             	movzx  eax,al
c0012e45:	85 c0                	test   eax,eax
c0012e47:	0f 84 55 01 00 00    	je     c0012fa2 <UnixFile::UnixFile(int)+0x1ae>
c0012e4d:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c0012e54:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e63:	e8 48 cc ff ff       	call   c000fab0 <malloc>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	89 c3                	mov    ebx,eax
c0012e6d:	83 ec 08             	sub    esp,0x8
c0012e70:	68 03 ff ff 0f       	push   0xfffff03
c0012e75:	53                   	push   ebx
c0012e76:	e8 2d 01 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012e7b:	83 c4 10             	add    esp,0x10
c0012e7e:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0012e84:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 18 cc ff ff       	call   c000fab0 <malloc>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	89 c3                	mov    ebx,eax
c0012e9d:	83 ec 08             	sub    esp,0x8
c0012ea0:	68 01 ff ff 0f       	push   0xfffff01
c0012ea5:	53                   	push   ebx
c0012ea6:	e8 fd 00 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0012eb4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ec3:	e8 e8 cb ff ff       	call   c000fab0 <malloc>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	89 c3                	mov    ebx,eax
c0012ecd:	83 ec 08             	sub    esp,0x8
c0012ed0:	68 00 ff ff 0f       	push   0xfffff00
c0012ed5:	53                   	push   ebx
c0012ed6:	e8 cd 00 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012edb:	83 c4 10             	add    esp,0x10
c0012ede:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0012ee4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ef3:	e8 b8 cb ff ff       	call   c000fab0 <malloc>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	89 c3                	mov    ebx,eax
c0012efd:	83 ec 08             	sub    esp,0x8
c0012f00:	68 02 ff ff 0f       	push   0xfffff02
c0012f05:	53                   	push   ebx
c0012f06:	e8 9d 00 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012f0b:	83 c4 10             	add    esp,0x10
c0012f0e:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0012f14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f1c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012f21:	7f 7f                	jg     c0012fa2 <UnixFile::UnixFile(int)+0x1ae>
c0012f23:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f32:	e8 79 cb ff ff       	call   c000fab0 <malloc>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	89 c3                	mov    ebx,eax
c0012f3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f40:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012f45:	83 ec 08             	sub    esp,0x8
c0012f48:	50                   	push   eax
c0012f49:	53                   	push   ebx
c0012f4a:	e8 59 00 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012f4f:	83 c4 10             	add    esp,0x10
c0012f52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f56:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0012f5d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012f65:	83 ec 0c             	sub    esp,0xc
c0012f68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f6c:	e8 3f cb ff ff       	call   c000fab0 <malloc>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	89 c3                	mov    ebx,eax
c0012f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f7a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012f7f:	83 ec 08             	sub    esp,0x8
c0012f82:	50                   	push   eax
c0012f83:	53                   	push   ebx
c0012f84:	e8 1f 00 00 00       	call   c0012fa8 <ReservedFilename::ReservedFilename(int)>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f90:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c0012f97:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f9c:	e9 7b ff ff ff       	jmp    c0012f1c <UnixFile::UnixFile(int)+0x128>
c0012fa1:	90                   	nop
c0012fa2:	83 c4 28             	add    esp,0x28
c0012fa5:	5b                   	pop    ebx
c0012fa6:	c3                   	ret    
c0012fa7:	90                   	nop

c0012fa8 <ReservedFilename::ReservedFilename(int)>:
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012faf:	83 ec 08             	sub    esp,0x8
c0012fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb6:	50                   	push   eax
c0012fb7:	e8 38 fe ff ff       	call   c0012df4 <UnixFile::UnixFile(int)>
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	ba 90 42 02 c0       	mov    edx,0xc0024290
c0012fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc8:	89 10                	mov    DWORD PTR [eax],edx
c0012fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012fd5:	90                   	nop
c0012fd6:	83 c4 0c             	add    esp,0xc
c0012fd9:	c3                   	ret    

c0012fda <UnixFile::~UnixFile()>:
c0012fda:	83 ec 1c             	sub    esp,0x1c
c0012fdd:	ba 74 42 02 c0       	mov    edx,0xc0024274
c0012fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fe6:	89 10                	mov    DWORD PTR [eax],edx
c0012fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012ff4:	7f 76                	jg     c001306c <UnixFile::~UnixFile()+0x92>
c0012ff6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ffe:	83 ec 0c             	sub    esp,0xc
c0013001:	68 38 e2 02 c0       	push   0xc002e238
c0013006:	e8 c7 ee 00 00       	call   c0021ed2 <LinkedList<UnixFile>::getFirstElement()>
c001300b:	83 c4 10             	add    esp,0x10
c001300e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013012:	83 ec 0c             	sub    esp,0xc
c0013015:	68 38 e2 02 c0       	push   0xc002e238
c001301a:	e8 bb ee 00 00       	call   c0021eda <LinkedList<UnixFile>::removeFirst()>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013026:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001302a:	74 43                	je     c001306f <UnixFile::~UnixFile()+0x95>
c001302c:	83 ec 08             	sub    esp,0x8
c001302f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013033:	68 38 e2 02 c0       	push   0xc002e238
c0013038:	e8 c1 ed 00 00       	call   c0021dfe <LinkedList<UnixFile>::addElement(UnixFile*)>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013044:	8d 50 01             	lea    edx,[eax+0x1]
c0013047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001304b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013050:	0f 94 c0             	sete   al
c0013053:	0f b6 c0             	movzx  eax,al
c0013056:	85 c0                	test   eax,eax
c0013058:	74 a4                	je     c0012ffe <UnixFile::~UnixFile()+0x24>
c001305a:	83 ec 0c             	sub    esp,0xc
c001305d:	68 28 42 02 c0       	push   0xc0024228
c0013062:	e8 8f cd ff ff       	call   c000fdf6 <KePanic(char const*)>
c0013067:	83 c4 10             	add    esp,0x10
c001306a:	eb 92                	jmp    c0012ffe <UnixFile::~UnixFile()+0x24>
c001306c:	90                   	nop
c001306d:	eb 01                	jmp    c0013070 <UnixFile::~UnixFile()+0x96>
c001306f:	90                   	nop
c0013070:	90                   	nop
c0013071:	83 c4 1c             	add    esp,0x1c
c0013074:	c3                   	ret    
c0013075:	90                   	nop

c0013076 <UnixFile::~UnixFile()>:
c0013076:	83 ec 0c             	sub    esp,0xc
c0013079:	83 ec 0c             	sub    esp,0xc
c001307c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013080:	e8 55 ff ff ff       	call   c0012fda <UnixFile::~UnixFile()>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	6a 0c                	push   0xc
c001308d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013091:	e8 91 a1 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	83 c4 0c             	add    esp,0xc
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <ReservedFilename::~ReservedFilename()>:
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	ba 90 42 02 c0       	mov    edx,0xc0024290
c00130a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130aa:	89 10                	mov    DWORD PTR [eax],edx
c00130ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b0:	83 ec 0c             	sub    esp,0xc
c00130b3:	50                   	push   eax
c00130b4:	e8 21 ff ff ff       	call   c0012fda <UnixFile::~UnixFile()>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	90                   	nop
c00130bd:	83 c4 0c             	add    esp,0xc
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop

c00130c2 <ReservedFilename::~ReservedFilename()>:
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	83 ec 0c             	sub    esp,0xc
c00130c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cc:	e8 cd ff ff ff       	call   c001309e <ReservedFilename::~ReservedFilename()>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	83 ec 08             	sub    esp,0x8
c00130d7:	6a 0c                	push   0xc
c00130d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130dd:	e8 45 a1 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	83 c4 0c             	add    esp,0xc
c00130e8:	c3                   	ret    

c00130e9 <KeGetFileFromDescriptor(int)>:
c00130e9:	53                   	push   ebx
c00130ea:	83 ec 10             	sub    esp,0x10
c00130ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130f1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00130f7:	53                   	push   ebx
c00130f8:	68 48 42 02 c0       	push   0xc0024248
c00130fd:	e8 4c 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001310b:	7f 30                	jg     c001313d <KeGetFileFromDescriptor(int)+0x54>
c001310d:	83 ec 0c             	sub    esp,0xc
c0013110:	68 38 e2 02 c0       	push   0xc002e238
c0013115:	e8 b8 ed 00 00       	call   c0021ed2 <LinkedList<UnixFile>::getFirstElement()>
c001311a:	8d 50 ff             	lea    edx,[eax-0x1]
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 fa fd             	cmp    edx,0xfffffffd
c0013123:	76 04                	jbe    c0013129 <KeGetFileFromDescriptor(int)+0x40>
c0013125:	31 c0                	xor    eax,eax
c0013127:	eb 6e                	jmp    c0013197 <KeGetFileFromDescriptor(int)+0xae>
c0013129:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001312c:	74 69                	je     c0013197 <KeGetFileFromDescriptor(int)+0xae>
c001312e:	52                   	push   edx
c001312f:	52                   	push   edx
c0013130:	50                   	push   eax
c0013131:	68 38 e2 02 c0       	push   0xc002e238
c0013136:	e8 41 ee 00 00       	call   c0021f7c <LinkedList<UnixFile>::getNext(UnixFile*)>
c001313b:	eb dd                	jmp    c001311a <KeGetFileFromDescriptor(int)+0x31>
c001313d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013143:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0013148:	74 4d                	je     c0013197 <KeGetFileFromDescriptor(int)+0xae>
c001314a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013150:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0013155:	74 40                	je     c0013197 <KeGetFileFromDescriptor(int)+0xae>
c0013157:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001315d:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013162:	74 33                	je     c0013197 <KeGetFileFromDescriptor(int)+0xae>
c0013164:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001316a:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c001316f:	74 26                	je     c0013197 <KeGetFileFromDescriptor(int)+0xae>
c0013171:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013177:	83 f8 08             	cmp    eax,0x8
c001317a:	77 09                	ja     c0013185 <KeGetFileFromDescriptor(int)+0x9c>
c001317c:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c0013183:	eb 12                	jmp    c0013197 <KeGetFileFromDescriptor(int)+0xae>
c0013185:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001318b:	83 fb 08             	cmp    ebx,0x8
c001318e:	77 95                	ja     c0013125 <KeGetFileFromDescriptor(int)+0x3c>
c0013190:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c0013197:	83 c4 08             	add    esp,0x8
c001319a:	5b                   	pop    ebx
c001319b:	c3                   	ret    

c001319c <__static_initialization_and_destruction_0(int, int)>:
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00131a4:	75 34                	jne    c00131da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00131a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00131ae:	75 2a                	jne    c00131da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	68 38 e2 02 c0       	push   0xc002e238
c00131b8:	e8 ff eb 00 00       	call   c0021dbc <LinkedList<UnixFile>::LinkedList()>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 ec 04             	sub    esp,0x4
c00131c3:	68 f8 5d 02 c0       	push   0xc0025df8
c00131c8:	68 38 e2 02 c0       	push   0xc002e238
c00131cd:	68 ba 1d 02 c0       	push   0xc0021dba
c00131d2:	e8 00 a0 ff ff       	call   c000d1d7 <__cxa_atexit>
c00131d7:	83 c4 10             	add    esp,0x10
c00131da:	90                   	nop
c00131db:	83 c4 0c             	add    esp,0xc
c00131de:	c3                   	ret    

c00131df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00131df:	83 ec 0c             	sub    esp,0xc
c00131e2:	83 ec 08             	sub    esp,0x8
c00131e5:	68 ff ff 00 00       	push   0xffff
c00131ea:	6a 01                	push   0x1
c00131ec:	e8 ab ff ff ff       	call   c001319c <__static_initialization_and_destruction_0(int, int)>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	83 c4 0c             	add    esp,0xc
c00131f7:	c3                   	ret    

c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00131f8:	53                   	push   ebx
c00131f9:	8b 15 a8 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265a8
c00131ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013207:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c001320d:	89 d8                	mov    eax,ebx
c001320f:	d1 e8                	shr    eax,1
c0013211:	01 d0                	add    eax,edx
c0013213:	80 e3 01             	and    bl,0x1
c0013216:	8a 10                	mov    dl,BYTE PTR [eax]
c0013218:	75 09                	jne    c0013223 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001321a:	83 e2 f0             	and    edx,0xfffffff0
c001321d:	09 ca                	or     edx,ecx
c001321f:	88 10                	mov    BYTE PTR [eax],dl
c0013221:	5b                   	pop    ebx
c0013222:	c3                   	ret    
c0013223:	0f b6 c9             	movzx  ecx,cl
c0013226:	83 e2 0f             	and    edx,0xf
c0013229:	c1 e1 04             	shl    ecx,0x4
c001322c:	09 ca                	or     edx,ecx
c001322e:	88 10                	mov    BYTE PTR [eax],dl
c0013230:	5b                   	pop    ebx
c0013231:	c3                   	ret    

c0013232 <Virt::getPageState(unsigned long)>:
c0013232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013236:	8b 0d a8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265a8
c001323c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013242:	89 d0                	mov    eax,edx
c0013244:	d1 e8                	shr    eax,1
c0013246:	80 e2 01             	and    dl,0x1
c0013249:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001324c:	74 03                	je     c0013251 <Virt::getPageState(unsigned long)+0x1f>
c001324e:	c1 e8 04             	shr    eax,0x4
c0013251:	83 e0 0f             	and    eax,0xf
c0013254:	c3                   	ret    

c0013255 <Virt::allocateKernelVirtualPages(int)>:
c0013255:	55                   	push   ebp
c0013256:	57                   	push   edi
c0013257:	56                   	push   esi
c0013258:	31 f6                	xor    esi,esi
c001325a:	53                   	push   ebx
c001325b:	31 db                	xor    ebx,ebx
c001325d:	83 ec 1c             	sub    esp,0x1c
c0013260:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013265:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013269:	8b 2d a4 65 02 c0    	mov    ebp,DWORD PTR ds:0xc00265a4
c001326f:	55                   	push   ebp
c0013270:	e8 bd ff ff ff       	call   c0013232 <Virt::getPageState(unsigned long)>
c0013275:	5a                   	pop    edx
c0013276:	84 c0                	test   al,al
c0013278:	75 3d                	jne    c00132b7 <Virt::allocateKernelVirtualPages(int)+0x62>
c001327a:	85 db                	test   ebx,ebx
c001327c:	0f 44 f5             	cmove  esi,ebp
c001327f:	83 c3 01             	add    ebx,0x1
c0013282:	39 fb                	cmp    ebx,edi
c0013284:	74 5e                	je     c00132e4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013286:	83 c5 01             	add    ebp,0x1
c0013289:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001328f:	76 33                	jbe    c00132c4 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013291:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013296:	c7 05 a4 65 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00265a4,0xc8000
c00132a0:	75 2a                	jne    c00132cc <Virt::allocateKernelVirtualPages(int)+0x77>
c00132a2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00132a7:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00132ac:	55                   	push   ebp
c00132ad:	e8 80 ff ff ff       	call   c0013232 <Virt::getPageState(unsigned long)>
c00132b2:	5a                   	pop    edx
c00132b3:	84 c0                	test   al,al
c00132b5:	74 c3                	je     c001327a <Virt::allocateKernelVirtualPages(int)+0x25>
c00132b7:	83 c5 01             	add    ebp,0x1
c00132ba:	31 db                	xor    ebx,ebx
c00132bc:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00132c2:	77 cd                	ja     c0013291 <Virt::allocateKernelVirtualPages(int)+0x3c>
c00132c4:	89 2d a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,ebp
c00132ca:	eb a3                	jmp    c001326f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00132cc:	83 ec 0c             	sub    esp,0xc
c00132cf:	68 a4 42 02 c0       	push   0xc00242a4
c00132d4:	e8 1d cb ff ff       	call   c000fdf6 <KePanic(char const*)>
c00132d9:	8b 2d a4 65 02 c0    	mov    ebp,DWORD PTR ds:0xc00265a4
c00132df:	83 c4 10             	add    esp,0x10
c00132e2:	eb 8b                	jmp    c001326f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00132e4:	89 35 a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,esi
c00132ea:	83 fb 01             	cmp    ebx,0x1
c00132ed:	74 63                	je     c0013352 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00132ef:	85 ff                	test   edi,edi
c00132f1:	74 41                	je     c0013334 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00132f3:	89 f0                	mov    eax,esi
c00132f5:	31 db                	xor    ebx,ebx
c00132f7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00132fa:	eb 16                	jmp    c0013312 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00132fc:	6a 01                	push   0x1
c00132fe:	83 c3 01             	add    ebx,0x1
c0013301:	50                   	push   eax
c0013302:	e8 f1 fe ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013307:	39 fb                	cmp    ebx,edi
c0013309:	58                   	pop    eax
c001330a:	5a                   	pop    edx
c001330b:	74 27                	je     c0013334 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001330d:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c0013312:	8d 50 01             	lea    edx,[eax+0x1]
c0013315:	85 db                	test   ebx,ebx
c0013317:	89 15 a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,edx
c001331d:	74 22                	je     c0013341 <Virt::allocateKernelVirtualPages(int)+0xec>
c001331f:	39 dd                	cmp    ebp,ebx
c0013321:	75 d9                	jne    c00132fc <Virt::allocateKernelVirtualPages(int)+0xa7>
c0013323:	6a 03                	push   0x3
c0013325:	83 c3 01             	add    ebx,0x1
c0013328:	50                   	push   eax
c0013329:	e8 ca fe ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001332e:	39 fb                	cmp    ebx,edi
c0013330:	59                   	pop    ecx
c0013331:	58                   	pop    eax
c0013332:	75 d9                	jne    c001330d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013334:	83 c4 1c             	add    esp,0x1c
c0013337:	89 f0                	mov    eax,esi
c0013339:	5b                   	pop    ebx
c001333a:	c1 e0 0c             	shl    eax,0xc
c001333d:	5e                   	pop    esi
c001333e:	5f                   	pop    edi
c001333f:	5d                   	pop    ebp
c0013340:	c3                   	ret    
c0013341:	6a 02                	push   0x2
c0013343:	bb 01 00 00 00       	mov    ebx,0x1
c0013348:	50                   	push   eax
c0013349:	e8 aa fe ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001334e:	58                   	pop    eax
c001334f:	5a                   	pop    edx
c0013350:	eb bb                	jmp    c001330d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013352:	6a 04                	push   0x4
c0013354:	56                   	push   esi
c0013355:	8d 46 01             	lea    eax,[esi+0x1]
c0013358:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001335d:	e8 96 fe ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013362:	89 f0                	mov    eax,esi
c0013364:	59                   	pop    ecx
c0013365:	c1 e0 0c             	shl    eax,0xc
c0013368:	5b                   	pop    ebx
c0013369:	83 c4 1c             	add    esp,0x1c
c001336c:	5b                   	pop    ebx
c001336d:	5e                   	pop    esi
c001336e:	5f                   	pop    edi
c001336f:	5d                   	pop    ebp
c0013370:	c3                   	ret    

c0013371 <Virt::freeSwapfilePage(unsigned long)>:
c0013371:	53                   	push   ebx
c0013372:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c0013378:	b8 01 00 00 00       	mov    eax,0x1
c001337d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013381:	d3 e0                	shl    eax,cl
c0013383:	89 cb                	mov    ebx,ecx
c0013385:	c1 eb 05             	shr    ebx,0x5
c0013388:	f7 d0                	not    eax
c001338a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001338d:	21 c1                	and    ecx,eax
c001338f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013392:	5b                   	pop    ebx
c0013393:	c3                   	ret    

c0013394 <Virt::swapIDToSector(unsigned long)>:
c0013394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013398:	8b 15 ac 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265ac
c001339e:	8b 0d b4 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265b4
c00133a4:	0f af c2             	imul   eax,edx
c00133a7:	01 c8                	add    eax,ecx
c00133a9:	c3                   	ret    

c00133aa <Virt::allocateSwapfilePage()>:
c00133aa:	55                   	push   ebp
c00133ab:	31 d2                	xor    edx,edx
c00133ad:	57                   	push   edi
c00133ae:	56                   	push   esi
c00133af:	53                   	push   ebx
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c00133b9:	8b 0d ac 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265ac
c00133bf:	89 d8                	mov    eax,ebx
c00133c1:	f7 f1                	div    ecx
c00133c3:	39 cb                	cmp    ebx,ecx
c00133c5:	72 2f                	jb     c00133f6 <Virt::allocateSwapfilePage()+0x4c>
c00133c7:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c00133cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00133cf:	f6 c2 01             	test   dl,0x1
c00133d2:	74 3e                	je     c0013412 <Virt::allocateSwapfilePage()+0x68>
c00133d4:	31 c9                	xor    ecx,ecx
c00133d6:	bf 01 00 00 00       	mov    edi,0x1
c00133db:	eb 12                	jmp    c00133ef <Virt::allocateSwapfilePage()+0x45>
c00133dd:	89 ca                	mov    edx,ecx
c00133df:	89 fd                	mov    ebp,edi
c00133e1:	c1 ea 05             	shr    edx,0x5
c00133e4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00133e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00133e9:	d3 e5                	shl    ebp,cl
c00133eb:	85 ea                	test   edx,ebp
c00133ed:	74 2c                	je     c001341b <Virt::allocateSwapfilePage()+0x71>
c00133ef:	83 c1 01             	add    ecx,0x1
c00133f2:	39 c8                	cmp    eax,ecx
c00133f4:	77 e7                	ja     c00133dd <Virt::allocateSwapfilePage()+0x33>
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	68 27 48 02 c0       	push   0xc0024827
c00133fe:	e8 f3 c9 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	31 c9                	xor    ecx,ecx
c0013408:	83 c4 0c             	add    esp,0xc
c001340b:	89 c8                	mov    eax,ecx
c001340d:	5b                   	pop    ebx
c001340e:	5e                   	pop    esi
c001340f:	5f                   	pop    edi
c0013410:	5d                   	pop    ebp
c0013411:	c3                   	ret    
c0013412:	89 f3                	mov    ebx,esi
c0013414:	bd 01 00 00 00       	mov    ebp,0x1
c0013419:	31 c9                	xor    ecx,ecx
c001341b:	09 ea                	or     edx,ebp
c001341d:	89 c8                	mov    eax,ecx
c001341f:	89 13                	mov    DWORD PTR [ebx],edx
c0013421:	83 c4 0c             	add    esp,0xc
c0013424:	5b                   	pop    ebx
c0013425:	5e                   	pop    esi
c0013426:	5f                   	pop    edi
c0013427:	5d                   	pop    ebp
c0013428:	c3                   	ret    

c0013429 <Virt::virtualMemorySetup()>:
c0013429:	53                   	push   ebx
c001342a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001342f:	6a 0f                	push   0xf
c0013431:	53                   	push   ebx
c0013432:	83 c3 01             	add    ebx,0x1
c0013435:	e8 be fd ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001343a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013440:	58                   	pop    eax
c0013441:	5a                   	pop    edx
c0013442:	75 eb                	jne    c001342f <Virt::virtualMemorySetup()+0x6>
c0013444:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013449:	6a 00                	push   0x0
c001344b:	53                   	push   ebx
c001344c:	83 c3 01             	add    ebx,0x1
c001344f:	e8 a4 fd ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001345a:	59                   	pop    ecx
c001345b:	58                   	pop    eax
c001345c:	75 eb                	jne    c0013449 <Virt::virtualMemorySetup()+0x20>
c001345e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013463:	6a 0f                	push   0xf
c0013465:	53                   	push   ebx
c0013466:	83 c3 01             	add    ebx,0x1
c0013469:	e8 8a fd ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001346e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013474:	58                   	pop    eax
c0013475:	5a                   	pop    edx
c0013476:	75 eb                	jne    c0013463 <Virt::virtualMemorySetup()+0x3a>
c0013478:	5b                   	pop    ebx
c0013479:	c3                   	ret    

c001347a <Virt::setupPageSwapping(int)>:
c001347a:	53                   	push   ebx
c001347b:	83 ec 0c             	sub    esp,0xc
c001347e:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013483:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013487:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001348d:	8b 10                	mov    edx,DWORD PTR [eax]
c001348f:	53                   	push   ebx
c0013490:	68 3e 48 02 c0       	push   0xc002483e
c0013495:	50                   	push   eax
c0013496:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013499:	c1 e3 0b             	shl    ebx,0xb
c001349c:	89 1d b0 65 02 c0    	mov    DWORD PTR ds:0xc00265b0,ebx
c00134a2:	c1 eb 08             	shr    ebx,0x8
c00134a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134a8:	c6 05 b8 65 02 c0 43 	mov    BYTE PTR ds:0xc00265b8,0x43
c00134af:	c7 05 ac 65 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00265ac,0x8
c00134b9:	a3 b4 65 02 c0       	mov    ds:0xc00265b4,eax
c00134be:	e8 ed c5 ff ff       	call   c000fab0 <malloc>
c00134c3:	31 d2                	xor    edx,edx
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c00134cd:	89 c1                	mov    ecx,eax
c00134cf:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c00134d4:	f7 35 ac 65 02 c0    	div    DWORD PTR ds:0xc00265ac
c00134da:	c1 e8 05             	shr    eax,0x5
c00134dd:	50                   	push   eax
c00134de:	6a 00                	push   0x0
c00134e0:	51                   	push   ecx
c00134e1:	e8 0a d0 fe ff       	call   c00004f0 <memset>
c00134e6:	83 c4 18             	add    esp,0x18
c00134e9:	5b                   	pop    ebx
c00134ea:	c3                   	ret    
c00134eb:	90                   	nop

c00134ec <VAS::setCPUSpecific(unsigned long)>:
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <VAS::VAS(VAS*)>:
c00134ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013504:	90                   	nop
c0013505:	c3                   	ret    

c0013506 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001350a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001350f:	89 c2                	mov    edx,eax
c0013511:	c1 ea 16             	shr    edx,0x16
c0013514:	c1 e8 0a             	shr    eax,0xa
c0013517:	83 f9 01             	cmp    ecx,0x1
c001351a:	19 c9                	sbb    ecx,ecx
c001351c:	25 fc 0f 00 00       	and    eax,0xffc
c0013521:	c1 e2 0c             	shl    edx,0xc
c0013524:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001352a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013531:	01 d0                	add    eax,edx
c0013533:	c3                   	ret    

c0013534 <VAS::getPageTableEntry(unsigned long)>:
c0013534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013538:	89 ca                	mov    edx,ecx
c001353a:	c1 ea 16             	shr    edx,0x16
c001353d:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013543:	c1 e9 0a             	shr    ecx,0xa
c0013546:	c1 e0 0c             	shl    eax,0xc
c0013549:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001354f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013552:	c3                   	ret    

c0013553 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013553:	55                   	push   ebp
c0013554:	57                   	push   edi
c0013555:	bf 01 00 00 00       	mov    edi,0x1
c001355a:	56                   	push   esi
c001355b:	53                   	push   ebx
c001355c:	83 ec 1c             	sub    esp,0x1c
c001355f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013563:	c1 ee 0c             	shr    esi,0xc
c0013566:	eb 48                	jmp    c00135b0 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013568:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001356d:	83 ec 08             	sub    esp,0x8
c0013570:	55                   	push   ebp
c0013571:	50                   	push   eax
c0013572:	e8 bd ff ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	8b 10                	mov    edx,DWORD PTR [eax]
c001357c:	f6 c6 04             	test   dh,0x4
c001357f:	75 70                	jne    c00135f1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013581:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013587:	83 fb 04             	cmp    ebx,0x4
c001358a:	0f 84 8a 00 00 00    	je     c001361a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013590:	83 fb 02             	cmp    ebx,0x2
c0013593:	0f 84 9a 00 00 00    	je     c0013633 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013599:	83 fb 03             	cmp    ebx,0x3
c001359c:	0f 84 be 00 00 00    	je     c0013660 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00135a2:	83 fb 01             	cmp    ebx,0x1
c00135a5:	0f 84 a2 00 00 00    	je     c001364d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00135ab:	83 c6 01             	add    esi,0x1
c00135ae:	31 ff                	xor    edi,edi
c00135b0:	56                   	push   esi
c00135b1:	89 f5                	mov    ebp,esi
c00135b3:	e8 7a fc ff ff       	call   c0013232 <Virt::getPageState(unsigned long)>
c00135b8:	c1 e5 0c             	shl    ebp,0xc
c00135bb:	5a                   	pop    edx
c00135bc:	0f b6 d8             	movzx  ebx,al
c00135bf:	85 db                	test   ebx,ebx
c00135c1:	75 a5                	jne    c0013568 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00135c3:	83 ec 0c             	sub    esp,0xc
c00135c6:	68 55 48 02 c0       	push   0xc0024855
c00135cb:	e8 26 c8 ff ff       	call   c000fdf6 <KePanic(char const*)>
c00135d0:	5a                   	pop    edx
c00135d1:	59                   	pop    ecx
c00135d2:	55                   	push   ebp
c00135d3:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c00135d9:	55                   	push   ebp
c00135da:	e8 55 ff ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e4:	f6 c6 04             	test   dh,0x4
c00135e7:	75 08                	jne    c00135f1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00135e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135ef:	eb ba                	jmp    c00135ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00135fb:	83 ec 0c             	sub    esp,0xc
c00135fe:	52                   	push   edx
c00135ff:	e8 83 c9 ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	83 fb 04             	cmp    ebx,0x4
c001360a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001360e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013614:	0f 85 76 ff ff ff    	jne    c0013590 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001361a:	83 e7 01             	and    edi,0x1
c001361d:	75 46                	jne    c0013665 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001361f:	c7 44 24 30 c4 42 02 c0 	mov    DWORD PTR [esp+0x30],0xc00242c4
c0013627:	83 c4 1c             	add    esp,0x1c
c001362a:	5b                   	pop    ebx
c001362b:	5e                   	pop    esi
c001362c:	5f                   	pop    edi
c001362d:	5d                   	pop    ebp
c001362e:	e9 c3 c7 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c0013633:	83 e7 01             	and    edi,0x1
c0013636:	75 15                	jne    c001364d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	68 71 48 02 c0       	push   0xc0024871
c0013640:	e8 b1 c7 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	e9 5e ff ff ff       	jmp    c00135ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001364d:	83 ec 08             	sub    esp,0x8
c0013650:	6a 00                	push   0x0
c0013652:	56                   	push   esi
c0013653:	e8 a0 fb ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013658:	83 c4 10             	add    esp,0x10
c001365b:	e9 4b ff ff ff       	jmp    c00135ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013660:	83 e7 01             	and    edi,0x1
c0013663:	75 16                	jne    c001367b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013665:	83 ec 08             	sub    esp,0x8
c0013668:	6a 00                	push   0x0
c001366a:	56                   	push   esi
c001366b:	e8 88 fb ff ff       	call   c00131f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	83 c4 1c             	add    esp,0x1c
c0013676:	5b                   	pop    ebx
c0013677:	5e                   	pop    esi
c0013678:	5f                   	pop    edi
c0013679:	5d                   	pop    ebp
c001367a:	c3                   	ret    
c001367b:	c7 44 24 30 8d 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc002488d
c0013683:	83 c4 1c             	add    esp,0x1c
c0013686:	5b                   	pop    ebx
c0013687:	5e                   	pop    esi
c0013688:	5f                   	pop    edi
c0013689:	5d                   	pop    ebp
c001368a:	e9 67 c7 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001368f:	90                   	nop

c0013690 <VAS::freeAllocatedPages(unsigned long)>:
c0013690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013694:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013698:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001369c:	74 09                	je     c00136a7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001369e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00136a2:	e9 ac fe ff ff       	jmp    c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c00136a7:	c7 44 24 04 e8 42 02 c0 	mov    DWORD PTR [esp+0x4],0xc00242e8
c00136af:	e9 9a 38 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00136b4 <VAS::virtualToPhysical(unsigned long)>:
c00136b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136b8:	50                   	push   eax
c00136b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136bd:	52                   	push   edx
c00136be:	e8 71 fe ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c00136c3:	59                   	pop    ecx
c00136c4:	5a                   	pop    edx
c00136c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00136c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136cc:	c3                   	ret    
c00136cd:	90                   	nop

c00136ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00136ce:	55                   	push   ebp
c00136cf:	57                   	push   edi
c00136d0:	56                   	push   esi
c00136d1:	53                   	push   ebx
c00136d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136d6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00136da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136de:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00136e2:	85 db                	test   ebx,ebx
c00136e4:	7e 24                	jle    c001370a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00136e6:	c1 e3 0c             	shl    ebx,0xc
c00136e9:	01 f3                	add    ebx,esi
c00136eb:	56                   	push   esi
c00136ec:	81 c6 00 10 00 00    	add    esi,0x1000
c00136f2:	55                   	push   ebp
c00136f3:	e8 3c fe ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c00136f8:	5a                   	pop    edx
c00136f9:	59                   	pop    ecx
c00136fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013700:	21 f9                	and    ecx,edi
c0013702:	09 d1                	or     ecx,edx
c0013704:	39 f3                	cmp    ebx,esi
c0013706:	89 08                	mov    DWORD PTR [eax],ecx
c0013708:	75 e1                	jne    c00136eb <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001370a:	5b                   	pop    ebx
c001370b:	5e                   	pop    esi
c001370c:	5f                   	pop    edi
c001370d:	5d                   	pop    ebp
c001370e:	c3                   	ret    
c001370f:	90                   	nop

c0013710 <VAS::VAS()>:
c0013710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001371b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001371f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001372a:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c001372f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013733:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001373b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001373e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013742:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013749:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c001374e:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013753:	29 c2                	sub    edx,eax
c0013755:	89 d0                	mov    eax,edx
c0013757:	05 ff 0f 00 00       	add    eax,0xfff
c001375c:	c1 e8 0c             	shr    eax,0xc
c001375f:	89 c2                	mov    edx,eax
c0013761:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013766:	6a 04                	push   0x4
c0013768:	6a ff                	push   0xffffffff
c001376a:	52                   	push   edx
c001376b:	50                   	push   eax
c001376c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013770:	e8 59 ff ff ff       	call   c00136ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013775:	83 c4 14             	add    esp,0x14
c0013778:	90                   	nop
c0013779:	c3                   	ret    

c001377a <VAS::setToWriteCombining(unsigned long, int)>:
c001377a:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c001377f:	50                   	push   eax
c0013780:	6a ff                	push   0xffffffff
c0013782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013786:	52                   	push   edx
c0013787:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001378b:	51                   	push   ecx
c001378c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013790:	50                   	push   eax
c0013791:	e8 38 ff ff ff       	call   c00136ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013796:	83 c4 14             	add    esp,0x14
c0013799:	c3                   	ret    

c001379a <VAS::mapOtherVASIn(bool, VAS*)>:
c001379a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001379e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00137a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00137a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00137ad:	83 f8 01             	cmp    eax,0x1
c00137b0:	19 c0                	sbb    eax,eax
c00137b2:	83 ca 03             	or     edx,0x3
c00137b5:	83 e0 fc             	and    eax,0xfffffffc
c00137b8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00137bf:	0f 20 d8             	mov    eax,cr3
c00137c2:	0f 22 d8             	mov    cr3,eax
c00137c5:	c3                   	ret    

c00137c6 <VAS::~VAS()>:
c00137c6:	83 ec 2c             	sub    esp,0x2c
c00137c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00137d1:	fa                   	cli    
c00137d2:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00137d7:	83 c0 01             	add    eax,0x1
c00137da:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00137df:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00137e9:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00137ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137f3:	6a 01                	push   0x1
c00137f5:	50                   	push   eax
c00137f6:	e8 9f ff ff ff       	call   c001379a <VAS::mapOtherVASIn(bool, VAS*)>
c00137fb:	83 c4 0c             	add    esp,0xc
c00137fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013806:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001380e:	0f 8f d8 00 00 00    	jg     c00138ec <VAS::~VAS()+0x126>
c0013814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013818:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001381b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001381f:	c1 e2 02             	shl    edx,0x2
c0013822:	01 d0                	add    eax,edx
c0013824:	8b 00                	mov    eax,DWORD PTR [eax]
c0013826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001382a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382e:	83 e0 01             	and    eax,0x1
c0013831:	0f 84 ab 00 00 00    	je     c00138e2 <VAS::~VAS()+0x11c>
c0013837:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001383f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013847:	7f 74                	jg     c00138bd <VAS::~VAS()+0xf7>
c0013849:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001384d:	c1 e0 0a             	shl    eax,0xa
c0013850:	89 c2                	mov    edx,eax
c0013852:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013856:	01 d0                	add    eax,edx
c0013858:	c1 e0 0c             	shl    eax,0xc
c001385b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001385f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013864:	8b 00                	mov    eax,DWORD PTR [eax]
c0013866:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013869:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001386f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013873:	6a 01                	push   0x1
c0013875:	50                   	push   eax
c0013876:	e8 8b fc ff ff       	call   c0013506 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001387b:	83 c4 0c             	add    esp,0xc
c001387e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013882:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013886:	8b 00                	mov    eax,DWORD PTR [eax]
c0013888:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001388c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013890:	25 01 04 00 00       	and    eax,0x401
c0013895:	3d 01 04 00 00       	cmp    eax,0x401
c001389a:	75 1a                	jne    c00138b6 <VAS::~VAS()+0xf0>
c001389c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	50                   	push   eax
c00138a9:	e8 d9 c6 ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138b6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00138bb:	eb 82                	jmp    c001383f <VAS::~VAS()+0x79>
c00138bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c1:	25 00 04 00 00       	and    eax,0x400
c00138c6:	74 1a                	je     c00138e2 <VAS::~VAS()+0x11c>
c00138c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138d1:	83 ec 0c             	sub    esp,0xc
c00138d4:	50                   	push   eax
c00138d5:	e8 ad c6 ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138e2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00138e7:	e9 1a ff ff ff       	jmp    c0013806 <VAS::~VAS()+0x40>
c00138ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138f3:	83 ec 0c             	sub    esp,0xc
c00138f6:	50                   	push   eax
c00138f7:	e8 57 fc ff ff       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013903:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013906:	83 ec 0c             	sub    esp,0xc
c0013909:	50                   	push   eax
c001390a:	e8 78 c6 ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c001390f:	83 c4 10             	add    esp,0x10
c0013912:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013917:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001391f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013924:	85 c0                	test   eax,eax
c0013926:	75 01                	jne    c0013929 <VAS::~VAS()+0x163>
c0013928:	fb                   	sti    
c0013929:	90                   	nop
c001392a:	83 c4 2c             	add    esp,0x2c
c001392d:	c3                   	ret    

c001392e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001392e:	55                   	push   ebp
c001392f:	57                   	push   edi
c0013930:	56                   	push   esi
c0013931:	53                   	push   ebx
c0013932:	83 ec 1c             	sub    esp,0x1c
c0013935:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013939:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001393d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013941:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013947:	77 08                	ja     c0013951 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013949:	0f 20 d8             	mov    eax,cr3
c001394c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001394f:	75 43                	jne    c0013994 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013951:	89 d8                	mov    eax,ebx
c0013953:	09 f8                	or     eax,edi
c0013955:	a9 ff 0f 00 00       	test   eax,0xfff
c001395a:	75 53                	jne    c00139af <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001395c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001395f:	89 de                	mov    esi,ebx
c0013961:	c1 ee 16             	shr    esi,0x16
c0013964:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001396b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001396f:	74 50                	je     c00139c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013971:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013975:	c1 eb 0a             	shr    ebx,0xa
c0013978:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001397e:	c1 e6 0c             	shl    esi,0xc
c0013981:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013987:	09 c7                	or     edi,eax
c0013989:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001398c:	83 c4 1c             	add    esp,0x1c
c001398f:	5b                   	pop    ebx
c0013990:	5e                   	pop    esi
c0013991:	5f                   	pop    edi
c0013992:	5d                   	pop    ebp
c0013993:	c3                   	ret    
c0013994:	83 ec 0c             	sub    esp,0xc
c0013997:	68 0c 43 02 c0       	push   0xc002430c
c001399c:	e8 ad 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00139a1:	89 d8                	mov    eax,ebx
c00139a3:	83 c4 10             	add    esp,0x10
c00139a6:	09 f8                	or     eax,edi
c00139a8:	a9 ff 0f 00 00       	test   eax,0xfff
c00139ad:	74 ad                	je     c001395c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00139af:	83 ec 0c             	sub    esp,0xc
c00139b2:	68 74 43 02 c0       	push   0xc0024374
c00139b7:	e8 3a c4 ff ff       	call   c000fdf6 <KePanic(char const*)>
c00139bc:	83 c4 10             	add    esp,0x10
c00139bf:	eb 9b                	jmp    c001395c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00139c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00139c5:	e8 26 c6 ff ff       	call   c000fff0 <Phys::allocatePage()>
c00139ca:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00139d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139db:	6a 01                	push   0x1
c00139dd:	e8 73 f8 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c00139e2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00139e9:	6a 01                	push   0x1
c00139eb:	50                   	push   eax
c00139ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139f0:	52                   	push   edx
c00139f1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139f5:	51                   	push   ecx
c00139f6:	e8 2d 01 00 00       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00139fb:	83 c4 1c             	add    esp,0x1c
c00139fe:	68 00 10 00 00       	push   0x1000
c0013a03:	6a 00                	push   0x0
c0013a05:	50                   	push   eax
c0013a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a0a:	e8 e1 ca fe ff       	call   c00004f0 <memset>
c0013a0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a16:	e8 38 fb ff ff       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013a29:	0d 07 04 00 00       	or     eax,0x407
c0013a2e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013a31:	e9 3b ff ff ff       	jmp    c0013971 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013a36 <VAS::allocatePages(int, int)>:
c0013a36:	55                   	push   ebp
c0013a37:	57                   	push   edi
c0013a38:	56                   	push   esi
c0013a39:	53                   	push   ebx
c0013a3a:	83 ec 1c             	sub    esp,0x1c
c0013a3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013a45:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013a49:	75 75                	jne    c0013ac0 <VAS::allocatePages(int, int)+0x8a>
c0013a4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a52:	85 c0                	test   eax,eax
c0013a54:	74 49                	je     c0013a9f <VAS::allocatePages(int, int)+0x69>
c0013a56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a5a:	89 d5                	mov    ebp,edx
c0013a5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a60:	c1 e5 0c             	shl    ebp,0xc
c0013a63:	01 dd                	add    ebp,ebx
c0013a65:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013a68:	81 cf 00 04 00 00    	or     edi,0x400
c0013a6e:	85 d2                	test   edx,edx
c0013a70:	7e 1b                	jle    c0013a8d <VAS::allocatePages(int, int)+0x57>
c0013a72:	e8 79 c5 ff ff       	call   c000fff0 <Phys::allocatePage()>
c0013a77:	57                   	push   edi
c0013a78:	53                   	push   ebx
c0013a79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a7f:	50                   	push   eax
c0013a80:	56                   	push   esi
c0013a81:	e8 a8 fe ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	39 dd                	cmp    ebp,ebx
c0013a8b:	75 e5                	jne    c0013a72 <VAS::allocatePages(int, int)+0x3c>
c0013a8d:	0f 20 d8             	mov    eax,cr3
c0013a90:	0f 22 d8             	mov    cr3,eax
c0013a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a97:	83 c4 1c             	add    esp,0x1c
c0013a9a:	5b                   	pop    ebx
c0013a9b:	5e                   	pop    esi
c0013a9c:	5f                   	pop    edi
c0013a9d:	5d                   	pop    ebp
c0013a9e:	c3                   	ret    
c0013a9f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013aa3:	83 ec 0c             	sub    esp,0xc
c0013aa6:	68 98 43 02 c0       	push   0xc0024398
c0013aab:	e8 46 c3 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0013ab0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ab3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ab7:	83 c4 10             	add    esp,0x10
c0013aba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013abe:	eb 96                	jmp    c0013a56 <VAS::allocatePages(int, int)+0x20>
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	52                   	push   edx
c0013ac4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013ac8:	e8 88 f7 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c0013acd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ad1:	83 c4 10             	add    esp,0x10
c0013ad4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013ad9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013add:	77 38                	ja     c0013b17 <VAS::allocatePages(int, int)+0xe1>
c0013adf:	85 d2                	test   edx,edx
c0013ae1:	7e aa                	jle    c0013a8d <VAS::allocatePages(int, int)+0x57>
c0013ae3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013ae7:	c1 e2 0c             	shl    edx,0xc
c0013aea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013aee:	81 cf 00 04 00 00    	or     edi,0x400
c0013af4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013af7:	e8 f4 c4 ff ff       	call   c000fff0 <Phys::allocatePage()>
c0013afc:	57                   	push   edi
c0013afd:	53                   	push   ebx
c0013afe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b04:	50                   	push   eax
c0013b05:	56                   	push   esi
c0013b06:	e8 23 fe ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	39 dd                	cmp    ebp,ebx
c0013b10:	75 e5                	jne    c0013af7 <VAS::allocatePages(int, int)+0xc1>
c0013b12:	e9 76 ff ff ff       	jmp    c0013a8d <VAS::allocatePages(int, int)+0x57>
c0013b17:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013b1b:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013b20:	09 c1                	or     ecx,eax
c0013b22:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013b26:	eb b7                	jmp    c0013adf <VAS::allocatePages(int, int)+0xa9>

c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013b28:	55                   	push   ebp
c0013b29:	57                   	push   edi
c0013b2a:	56                   	push   esi
c0013b2b:	53                   	push   ebx
c0013b2c:	83 ec 1c             	sub    esp,0x1c
c0013b2f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013b33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013b37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013b3b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013b3f:	85 db                	test   ebx,ebx
c0013b41:	7e 2c                	jle    c0013b6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013b43:	c1 e3 0c             	shl    ebx,0xc
c0013b46:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013b49:	89 f3                	mov    ebx,esi
c0013b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b4f:	55                   	push   ebp
c0013b50:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013b54:	29 f2                	sub    edx,esi
c0013b56:	01 da                	add    edx,ebx
c0013b58:	52                   	push   edx
c0013b59:	53                   	push   ebx
c0013b5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b60:	57                   	push   edi
c0013b61:	e8 c8 fd ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013b6d:	75 e0                	jne    c0013b4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013b6f:	0f 20 d8             	mov    eax,cr3
c0013b72:	0f 22 d8             	mov    cr3,eax
c0013b75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013b79:	83 c4 1c             	add    esp,0x1c
c0013b7c:	5b                   	pop    ebx
c0013b7d:	5e                   	pop    esi
c0013b7e:	5f                   	pop    edi
c0013b7f:	5d                   	pop    ebp
c0013b80:	c3                   	ret    
c0013b81:	90                   	nop

c0013b82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013b82:	55                   	push   ebp
c0013b83:	57                   	push   edi
c0013b84:	56                   	push   esi
c0013b85:	53                   	push   ebx
c0013b86:	83 ec 1c             	sub    esp,0x1c
c0013b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b8d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013b91:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013b9d:	09 d8                	or     eax,ebx
c0013b9f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013ba4:	75 4b                	jne    c0013bf1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013ba6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ba9:	89 de                	mov    esi,ebx
c0013bab:	c1 ee 16             	shr    esi,0x16
c0013bae:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013bb5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013bb9:	74 48                	je     c0013c03 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013bbb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013bc0:	c1 eb 0a             	shr    ebx,0xa
c0013bc3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013bc7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013bcb:	83 ff 01             	cmp    edi,0x1
c0013bce:	19 c0                	sbb    eax,eax
c0013bd0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013bd6:	c1 e6 0c             	shl    esi,0xc
c0013bd9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013bde:	01 f3                	add    ebx,esi
c0013be0:	09 ca                	or     edx,ecx
c0013be2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013be9:	83 c4 1c             	add    esp,0x1c
c0013bec:	5b                   	pop    ebx
c0013bed:	5e                   	pop    esi
c0013bee:	5f                   	pop    edi
c0013bef:	5d                   	pop    ebp
c0013bf0:	c3                   	ret    
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	68 c4 43 02 c0       	push   0xc00243c4
c0013bf9:	e8 f8 c1 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	eb a3                	jmp    c0013ba6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013c03:	e8 e8 c3 ff ff       	call   c000fff0 <Phys::allocatePage()>
c0013c08:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013c15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c19:	6a 01                	push   0x1
c0013c1b:	e8 35 f6 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c0013c20:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c27:	6a 01                	push   0x1
c0013c29:	50                   	push   eax
c0013c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c2e:	50                   	push   eax
c0013c2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013c33:	51                   	push   ecx
c0013c34:	e8 ef fe ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c39:	83 c4 1c             	add    esp,0x1c
c0013c3c:	68 00 10 00 00       	push   0x1000
c0013c41:	6a 00                	push   0x0
c0013c43:	50                   	push   eax
c0013c44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c48:	e8 a3 c8 fe ff       	call   c00004f0 <memset>
c0013c4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c51:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c54:	e8 fa f8 ff ff       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c63:	81 ca 07 04 00 00    	or     edx,0x407
c0013c69:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013c6c:	e9 4a ff ff ff       	jmp    c0013bbb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013c71:	90                   	nop

c0013c72 <VAS::VAS(bool)>:
c0013c72:	53                   	push   ebx
c0013c73:	83 ec 28             	sub    esp,0x28
c0013c76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c7a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013c7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c98:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c9c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013c9f:	e8 4c c3 ff ff       	call   c000fff0 <Phys::allocatePage()>
c0013ca4:	89 c2                	mov    edx,eax
c0013ca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013caa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013cad:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013cb3:	83 ec 0c             	sub    esp,0xc
c0013cb6:	6a 01                	push   0x1
c0013cb8:	e8 98 f5 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c0013cbd:	83 c4 10             	add    esp,0x10
c0013cc0:	89 c2                	mov    edx,eax
c0013cc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cc6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013cc9:	83 ec 0c             	sub    esp,0xc
c0013ccc:	6a 03                	push   0x3
c0013cce:	6a 01                	push   0x1
c0013cd0:	52                   	push   edx
c0013cd1:	50                   	push   eax
c0013cd2:	53                   	push   ebx
c0013cd3:	e8 50 fe ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013cd8:	83 c4 20             	add    esp,0x20
c0013cdb:	89 c2                	mov    edx,eax
c0013cdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ce1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013ce4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013cec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013cf4:	7f 1d                	jg     c0013d13 <VAS::VAS(bool)+0xa1>
c0013cf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cfa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cfd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d01:	c1 e2 02             	shl    edx,0x2
c0013d04:	01 d0                	add    eax,edx
c0013d06:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013d11:	eb d9                	jmp    c0013cec <VAS::VAS(bool)+0x7a>
c0013d13:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013d1b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013d23:	7f 59                	jg     c0013d7e <VAS::VAS(bool)+0x10c>
c0013d25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d29:	2d 00 02 00 00       	sub    eax,0x200
c0013d2e:	c1 e0 0c             	shl    eax,0xc
c0013d31:	89 c2                	mov    edx,eax
c0013d33:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013d38:	89 d1                	mov    ecx,edx
c0013d3a:	09 c1                	or     ecx,eax
c0013d3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d47:	c1 e2 02             	shl    edx,0x2
c0013d4a:	01 d0                	add    eax,edx
c0013d4c:	83 c9 05             	or     ecx,0x5
c0013d4f:	89 ca                	mov    edx,ecx
c0013d51:	89 10                	mov    DWORD PTR [eax],edx
c0013d53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d57:	2d 40 03 00 00       	sub    eax,0x340
c0013d5c:	83 f8 7f             	cmp    eax,0x7f
c0013d5f:	77 16                	ja     c0013d77 <VAS::VAS(bool)+0x105>
c0013d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d6c:	c1 e2 02             	shl    edx,0x2
c0013d6f:	01 d0                	add    eax,edx
c0013d71:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d77:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013d7c:	eb 9d                	jmp    c0013d1b <VAS::VAS(bool)+0xa9>
c0013d7e:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d8b:	05 20 0c 00 00       	add    eax,0xc20
c0013d90:	81 ca 03 40 00 00    	or     edx,0x4003
c0013d96:	89 10                	mov    DWORD PTR [eax],edx
c0013d98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d9c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013d9f:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013da4:	09 c2                	or     edx,eax
c0013da6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013daa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dad:	05 fc 0f 00 00       	add    eax,0xffc
c0013db2:	83 ca 03             	or     edx,0x3
c0013db5:	89 10                	mov    DWORD PTR [eax],edx
c0013db7:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013dbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013dc2:	83 ec 0c             	sub    esp,0xc
c0013dc5:	50                   	push   eax
c0013dc6:	e8 2d 5e ff ff       	call   c0009bf8 <Device::getName()>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	83 ec 08             	sub    esp,0x8
c0013dd1:	68 a7 48 02 c0       	push   0xc00248a7
c0013dd6:	50                   	push   eax
c0013dd7:	e8 a4 c9 fe ff       	call   c0000780 <strcmp>
c0013ddc:	83 c4 10             	add    esp,0x10
c0013ddf:	85 c0                	test   eax,eax
c0013de1:	0f 94 c0             	sete   al
c0013de4:	0f b6 c0             	movzx  eax,al
c0013de7:	85 c0                	test   eax,eax
c0013de9:	74 68                	je     c0013e53 <VAS::VAS(bool)+0x1e1>
c0013deb:	fa                   	cli    
c0013dec:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013df1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013df7:	05 68 09 00 00       	add    eax,0x968
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	50                   	push   eax
c0013e00:	e8 89 b0 ff ff       	call   c000ee8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e05:	83 c4 10             	add    esp,0x10
c0013e08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e0d:	89 c3                	mov    ebx,eax
c0013e0f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013e14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e1a:	05 68 09 00 00       	add    eax,0x968
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	50                   	push   eax
c0013e23:	e8 66 b0 ff ff       	call   c000ee8e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	83 ec 08             	sub    esp,0x8
c0013e2e:	50                   	push   eax
c0013e2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e33:	e8 fc f6 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0013e38:	83 c4 10             	add    esp,0x10
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e42:	6a 11                	push   0x11
c0013e44:	53                   	push   ebx
c0013e45:	50                   	push   eax
c0013e46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e4a:	e8 df fa ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	fb                   	sti    
c0013e53:	90                   	nop
c0013e54:	83 c4 28             	add    esp,0x28
c0013e57:	5b                   	pop    ebx
c0013e58:	c3                   	ret    
c0013e59:	90                   	nop

c0013e5a <VAS::evict(unsigned long)>:
c0013e5a:	55                   	push   ebp
c0013e5b:	57                   	push   edi
c0013e5c:	56                   	push   esi
c0013e5d:	53                   	push   ebx
c0013e5e:	83 ec 24             	sub    esp,0x24
c0013e61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e65:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e6d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013e72:	50                   	push   eax
c0013e73:	68 b5 48 02 c0       	push   0xc00248b5
c0013e78:	e8 d1 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e7d:	e8 28 f5 ff ff       	call   c00133aa <Virt::allocateSwapfilePage()>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	89 c7                	mov    edi,eax
c0013e87:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c0013e8c:	85 c0                	test   eax,eax
c0013e8e:	7e 40                	jle    c0013ed0 <VAS::evict(unsigned long)+0x76>
c0013e90:	89 ee                	mov    esi,ebp
c0013e92:	31 db                	xor    ebx,ebx
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	57                   	push   edi
c0013e98:	e8 f7 f4 ff ff       	call   c0013394 <Virt::swapIDToSector(unsigned long)>
c0013e9d:	31 d2                	xor    edx,edx
c0013e9f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ea2:	81 c6 00 02 00 00    	add    esi,0x200
c0013ea8:	6a 01                	push   0x1
c0013eaa:	52                   	push   edx
c0013eab:	01 d8                	add    eax,ebx
c0013ead:	83 c3 01             	add    ebx,0x1
c0013eb0:	50                   	push   eax
c0013eb1:	0f be 05 b8 65 02 c0 	movsx  eax,BYTE PTR ds:0xc00265b8
c0013eb8:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013ebf:	50                   	push   eax
c0013ec0:	e8 97 6b ff ff       	call   c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>
c0013ec5:	83 c4 20             	add    esp,0x20
c0013ec8:	39 1d ac 65 02 c0    	cmp    DWORD PTR ds:0xc00265ac,ebx
c0013ece:	7f c4                	jg     c0013e94 <VAS::evict(unsigned long)+0x3a>
c0013ed0:	c1 e7 0c             	shl    edi,0xc
c0013ed3:	83 ec 08             	sub    esp,0x8
c0013ed6:	55                   	push   ebp
c0013ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013edb:	50                   	push   eax
c0013edc:	e8 53 f6 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0013ee1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ee3:	89 d3                	mov    ebx,edx
c0013ee5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013eeb:	09 d7                	or     edi,edx
c0013eed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013ef3:	89 38                	mov    DWORD PTR [eax],edi
c0013ef5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef8:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0013efe:	83 c2 01             	add    edx,0x1
c0013f01:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0013f07:	e8 7b c0 ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c0013f0c:	0f 20 d8             	mov    eax,cr3
c0013f0f:	0f 22 d8             	mov    cr3,eax
c0013f12:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c0013f18:	51                   	push   ecx
c0013f19:	55                   	push   ebp
c0013f1a:	53                   	push   ebx
c0013f1b:	68 e8 43 02 c0       	push   0xc00243e8
c0013f20:	e8 29 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f25:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c0013f2a:	83 c4 18             	add    esp,0x18
c0013f2d:	50                   	push   eax
c0013f2e:	68 ca 48 02 c0       	push   0xc00248ca
c0013f33:	8d 50 01             	lea    edx,[eax+0x1]
c0013f36:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c0013f3c:	e8 0d 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f41:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013f46:	c7 44 24 40 dc 48 02 c0 	mov    DWORD PTR [esp+0x40],0xc00248dc
c0013f4e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013f52:	83 c4 2c             	add    esp,0x2c
c0013f55:	5b                   	pop    ebx
c0013f56:	5e                   	pop    esi
c0013f57:	5f                   	pop    edi
c0013f58:	5d                   	pop    ebp
c0013f59:	e9 f0 2f ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0013f5e <VAS::canLockPage(unsigned long)>:
c0013f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f62:	50                   	push   eax
c0013f63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f67:	52                   	push   edx
c0013f68:	e8 c7 f5 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0013f6d:	59                   	pop    ecx
c0013f6e:	5a                   	pop    edx
c0013f6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f71:	c1 e8 0b             	shr    eax,0xb
c0013f74:	83 e0 01             	and    eax,0x1
c0013f77:	c3                   	ret    

c0013f78 <VAS::unlockPage(unsigned long)>:
c0013f78:	83 ec 0c             	sub    esp,0xc
c0013f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f7f:	50                   	push   eax
c0013f80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013f84:	52                   	push   edx
c0013f85:	e8 aa f5 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0013f8a:	59                   	pop    ecx
c0013f8b:	5a                   	pop    edx
c0013f8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f8e:	f6 c6 08             	test   dh,0x8
c0013f91:	75 09                	jne    c0013f9c <VAS::unlockPage(unsigned long)+0x24>
c0013f93:	80 ce 08             	or     dh,0x8
c0013f96:	89 10                	mov    DWORD PTR [eax],edx
c0013f98:	83 c4 0c             	add    esp,0xc
c0013f9b:	c3                   	ret    
c0013f9c:	c7 44 24 10 1c 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc002441c
c0013fa4:	83 c4 0c             	add    esp,0xc
c0013fa7:	e9 4a be ff ff       	jmp    c000fdf6 <KePanic(char const*)>

c0013fac <VAS::canLockPages(unsigned long, int)>:
c0013fac:	55                   	push   ebp
c0013fad:	57                   	push   edi
c0013fae:	56                   	push   esi
c0013faf:	53                   	push   ebx
c0013fb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013fb4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013fb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fbc:	85 ff                	test   edi,edi
c0013fbe:	7e 23                	jle    c0013fe3 <VAS::canLockPages(unsigned long, int)+0x37>
c0013fc0:	31 f6                	xor    esi,esi
c0013fc2:	eb 0d                	jmp    c0013fd1 <VAS::canLockPages(unsigned long, int)+0x25>
c0013fc4:	83 c6 01             	add    esi,0x1
c0013fc7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013fcd:	39 f7                	cmp    edi,esi
c0013fcf:	74 0d                	je     c0013fde <VAS::canLockPages(unsigned long, int)+0x32>
c0013fd1:	53                   	push   ebx
c0013fd2:	55                   	push   ebp
c0013fd3:	e8 86 ff ff ff       	call   c0013f5e <VAS::canLockPage(unsigned long)>
c0013fd8:	5a                   	pop    edx
c0013fd9:	59                   	pop    ecx
c0013fda:	84 c0                	test   al,al
c0013fdc:	75 e6                	jne    c0013fc4 <VAS::canLockPages(unsigned long, int)+0x18>
c0013fde:	5b                   	pop    ebx
c0013fdf:	5e                   	pop    esi
c0013fe0:	5f                   	pop    edi
c0013fe1:	5d                   	pop    ebp
c0013fe2:	c3                   	ret    
c0013fe3:	b0 01                	mov    al,0x1
c0013fe5:	eb f7                	jmp    c0013fde <VAS::canLockPages(unsigned long, int)+0x32>
c0013fe7:	90                   	nop

c0013fe8 <VAS::unlockPages(unsigned long, int)>:
c0013fe8:	55                   	push   ebp
c0013fe9:	57                   	push   edi
c0013fea:	56                   	push   esi
c0013feb:	53                   	push   ebx
c0013fec:	83 ec 0c             	sub    esp,0xc
c0013fef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013ff3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013ff7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013ffb:	85 ff                	test   edi,edi
c0013ffd:	7e 1c                	jle    c001401b <VAS::unlockPages(unsigned long, int)+0x33>
c0013fff:	31 f6                	xor    esi,esi
c0014001:	83 ec 08             	sub    esp,0x8
c0014004:	83 c6 01             	add    esi,0x1
c0014007:	53                   	push   ebx
c0014008:	81 c3 00 10 00 00    	add    ebx,0x1000
c001400e:	55                   	push   ebp
c001400f:	e8 64 ff ff ff       	call   c0013f78 <VAS::unlockPage(unsigned long)>
c0014014:	83 c4 10             	add    esp,0x10
c0014017:	39 f7                	cmp    edi,esi
c0014019:	75 e6                	jne    c0014001 <VAS::unlockPages(unsigned long, int)+0x19>
c001401b:	83 c4 0c             	add    esp,0xc
c001401e:	5b                   	pop    ebx
c001401f:	5e                   	pop    esi
c0014020:	5f                   	pop    edi
c0014021:	5d                   	pop    ebp
c0014022:	c3                   	ret    
c0014023:	90                   	nop

c0014024 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014024:	55                   	push   ebp
c0014025:	57                   	push   edi
c0014026:	56                   	push   esi
c0014027:	53                   	push   ebx
c0014028:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001402e:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0014035:	89 f3                	mov    ebx,esi
c0014037:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001403d:	53                   	push   ebx
c001403e:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014045:	50                   	push   eax
c0014046:	e8 e9 f4 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c001404b:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0014051:	5a                   	pop    edx
c0014052:	59                   	pop    ecx
c0014053:	89 c5                	mov    ebp,eax
c0014055:	0f 87 cb 00 00 00    	ja     c0014126 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c001405b:	83 ec 08             	sub    esp,0x8
c001405e:	56                   	push   esi
c001405f:	68 4c 44 02 c0       	push   0xc002444c
c0014064:	e8 e5 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014069:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001406e:	5e                   	pop    esi
c001406f:	5f                   	pop    edi
c0014070:	50                   	push   eax
c0014071:	68 7c 44 02 c0       	push   0xc002447c
c0014076:	e8 d3 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001407b:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014081:	58                   	pop    eax
c0014082:	5a                   	pop    edx
c0014083:	51                   	push   ecx
c0014084:	68 a0 44 02 c0       	push   0xc00244a0
c0014089:	e8 c0 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001408e:	83 c4 10             	add    esp,0x10
c0014091:	85 db                	test   ebx,ebx
c0014093:	74 5b                	je     c00140f0 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0014095:	85 ed                	test   ebp,ebp
c0014097:	74 21                	je     c00140ba <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0014099:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c001409c:	f7 c6 00 02 00 00    	test   esi,0x200
c00140a2:	0f 85 c5 00 00 00    	jne    c001416d <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00140a8:	89 f0                	mov    eax,esi
c00140aa:	25 01 04 00 00       	and    eax,0x401
c00140af:	3d 00 04 00 00       	cmp    eax,0x400
c00140b4:	0f 84 39 01 00 00    	je     c00141f3 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00140ba:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00140bf:	83 ec 08             	sub    esp,0x8
c00140c2:	50                   	push   eax
c00140c3:	68 94 46 02 c0       	push   0xc0024694
c00140c8:	e8 81 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140cd:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c00140d3:	5a                   	pop    edx
c00140d4:	59                   	pop    ecx
c00140d5:	53                   	push   ebx
c00140d6:	68 b8 46 02 c0       	push   0xc00246b8
c00140db:	e8 6e 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	31 c0                	xor    eax,eax
c00140e5:	81 c4 0c 10 00 00    	add    esp,0x100c
c00140eb:	5b                   	pop    ebx
c00140ec:	5e                   	pop    esi
c00140ed:	5f                   	pop    edi
c00140ee:	5d                   	pop    ebp
c00140ef:	c3                   	ret    
c00140f0:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00140f5:	83 ec 08             	sub    esp,0x8
c00140f8:	50                   	push   eax
c00140f9:	68 c4 44 02 c0       	push   0xc00244c4
c00140fe:	e8 4b 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014103:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014109:	58                   	pop    eax
c001410a:	5a                   	pop    edx
c001410b:	51                   	push   ecx
c001410c:	68 e8 44 02 c0       	push   0xc00244e8
c0014111:	e8 38 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	31 c0                	xor    eax,eax
c001411b:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014121:	5b                   	pop    ebx
c0014122:	5e                   	pop    esi
c0014123:	5f                   	pop    edi
c0014124:	5d                   	pop    ebp
c0014125:	c3                   	ret    
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	68 f1 48 02 c0       	push   0xc00248f1
c001412e:	e8 c3 bc ff ff       	call   c000fdf6 <KePanic(char const*)>
c0014133:	5f                   	pop    edi
c0014134:	58                   	pop    eax
c0014135:	56                   	push   esi
c0014136:	68 4c 44 02 c0       	push   0xc002444c
c001413b:	e8 0e 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014140:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c0014146:	58                   	pop    eax
c0014147:	5a                   	pop    edx
c0014148:	51                   	push   ecx
c0014149:	68 7c 44 02 c0       	push   0xc002447c
c001414e:	e8 fb 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014153:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014158:	5e                   	pop    esi
c0014159:	5f                   	pop    edi
c001415a:	50                   	push   eax
c001415b:	68 a0 44 02 c0       	push   0xc00244a0
c0014160:	e8 e9 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	e9 28 ff ff ff       	jmp    c0014095 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c001416d:	83 ec 0c             	sub    esp,0xc
c0014170:	68 0c 45 02 c0       	push   0xc002450c
c0014175:	e8 d4 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001417a:	e8 71 be ff ff       	call   c000fff0 <Phys::allocatePage()>
c001417f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014182:	83 ca 01             	or     edx,0x1
c0014185:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014188:	0f 20 da             	mov    edx,cr3
c001418b:	0f 22 da             	mov    cr3,edx
c001418e:	ba 00 10 00 00       	mov    edx,0x1000
c0014193:	89 de                	mov    esi,ebx
c0014195:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014199:	89 d1                	mov    ecx,edx
c001419b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001419d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141a0:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00141a6:	09 c8                	or     eax,ecx
c00141a8:	83 c8 02             	or     eax,0x2
c00141ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00141ae:	0f 20 d8             	mov    eax,cr3
c00141b1:	0f 22 d8             	mov    cr3,eax
c00141b4:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141b8:	89 df                	mov    edi,ebx
c00141ba:	89 d1                	mov    ecx,edx
c00141bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141be:	59                   	pop    ecx
c00141bf:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c00141c5:	5b                   	pop    ebx
c00141c6:	56                   	push   esi
c00141c7:	68 2c 45 02 c0       	push   0xc002452c
c00141cc:	e8 7d 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141d1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141d6:	5f                   	pop    edi
c00141d7:	5d                   	pop    ebp
c00141d8:	50                   	push   eax
c00141d9:	68 50 45 02 c0       	push   0xc0024550
c00141de:	e8 6b 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	b0 01                	mov    al,0x1
c00141e8:	81 c4 0c 10 00 00    	add    esp,0x100c
c00141ee:	5b                   	pop    ebx
c00141ef:	5e                   	pop    esi
c00141f0:	5f                   	pop    edi
c00141f1:	5d                   	pop    ebp
c00141f2:	c3                   	ret    
c00141f3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141f8:	c1 ee 0c             	shr    esi,0xc
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	50                   	push   eax
c00141ff:	68 74 45 02 c0       	push   0xc0024574
c0014204:	e8 45 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014209:	e8 e2 bd ff ff       	call   c000fff0 <Phys::allocatePage()>
c001420e:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014214:	89 c7                	mov    edi,eax
c0014216:	58                   	pop    eax
c0014217:	5a                   	pop    edx
c0014218:	51                   	push   ecx
c0014219:	68 98 45 02 c0       	push   0xc0024598
c001421e:	e8 2b 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014223:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001422f:	09 fa                	or     edx,edi
c0014231:	31 ff                	xor    edi,edi
c0014233:	81 ca 01 08 00 00    	or     edx,0x801
c0014239:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001423c:	89 dd                	mov    ebp,ebx
c001423e:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c0014243:	85 c0                	test   eax,eax
c0014245:	7e 61                	jle    c00142a8 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0014247:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001424c:	83 ec 08             	sub    esp,0x8
c001424f:	50                   	push   eax
c0014250:	68 4c 46 02 c0       	push   0xc002464c
c0014255:	e8 f4 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001425a:	89 34 24             	mov    DWORD PTR [esp],esi
c001425d:	e8 32 f1 ff ff       	call   c0013394 <Virt::swapIDToSector(unsigned long)>
c0014262:	31 d2                	xor    edx,edx
c0014264:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014267:	81 c5 00 02 00 00    	add    ebp,0x200
c001426d:	6a 01                	push   0x1
c001426f:	52                   	push   edx
c0014270:	01 f8                	add    eax,edi
c0014272:	83 c7 01             	add    edi,0x1
c0014275:	50                   	push   eax
c0014276:	0f be 05 b8 65 02 c0 	movsx  eax,BYTE PTR ds:0xc00265b8
c001427d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0014284:	50                   	push   eax
c0014285:	e8 66 67 ff ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001428a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001428f:	83 c4 18             	add    esp,0x18
c0014292:	50                   	push   eax
c0014293:	68 70 46 02 c0       	push   0xc0024670
c0014298:	e8 b1 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001429d:	83 c4 10             	add    esp,0x10
c00142a0:	39 3d ac 65 02 c0    	cmp    DWORD PTR ds:0xc00265ac,edi
c00142a6:	7f 9f                	jg     c0014247 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c00142a8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00142ad:	83 ec 08             	sub    esp,0x8
c00142b0:	50                   	push   eax
c00142b1:	68 bc 45 02 c0       	push   0xc00245bc
c00142b6:	e8 93 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142bb:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00142c0:	83 c4 0c             	add    esp,0xc
c00142c3:	83 e8 01             	sub    eax,0x1
c00142c6:	50                   	push   eax
c00142c7:	53                   	push   ebx
c00142c8:	68 03 49 02 c0       	push   0xc0024903
c00142cd:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c00142d2:	e8 77 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00142da:	e8 92 f0 ff ff       	call   c0013371 <Virt::freeSwapfilePage(unsigned long)>
c00142df:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00142e5:	58                   	pop    eax
c00142e6:	5a                   	pop    edx
c00142e7:	51                   	push   ecx
c00142e8:	68 e0 45 02 c0       	push   0xc00245e0
c00142ed:	e8 5c 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142f2:	0f 20 d8             	mov    eax,cr3
c00142f5:	0f 22 d8             	mov    cr3,eax
c00142f8:	c7 04 24 18 49 02 c0 	mov    DWORD PTR [esp],0xc0024918
c00142ff:	e8 4a 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014304:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c001430a:	5b                   	pop    ebx
c001430b:	5e                   	pop    esi
c001430c:	57                   	push   edi
c001430d:	68 04 46 02 c0       	push   0xc0024604
c0014312:	e8 37 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014317:	5d                   	pop    ebp
c0014318:	58                   	pop    eax
c0014319:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001431e:	50                   	push   eax
c001431f:	68 28 46 02 c0       	push   0xc0024628
c0014324:	e8 25 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014329:	83 c4 10             	add    esp,0x10
c001432c:	b0 01                	mov    al,0x1
c001432e:	e9 b2 fd ff ff       	jmp    c00140e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c0014333:	90                   	nop

c0014334 <VAS::lockPage(unsigned long)>:
c0014334:	56                   	push   esi
c0014335:	53                   	push   ebx
c0014336:	83 ec 04             	sub    esp,0x4
c0014339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001433d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014341:	50                   	push   eax
c0014342:	56                   	push   esi
c0014343:	e8 ec f1 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c0014348:	5a                   	pop    edx
c0014349:	59                   	pop    ecx
c001434a:	89 c3                	mov    ebx,eax
c001434c:	8b 00                	mov    eax,DWORD PTR [eax]
c001434e:	a8 01                	test   al,0x1
c0014350:	74 10                	je     c0014362 <VAS::lockPage(unsigned long)+0x2e>
c0014352:	f6 c4 08             	test   ah,0x8
c0014355:	74 28                	je     c001437f <VAS::lockPage(unsigned long)+0x4b>
c0014357:	80 e4 f7             	and    ah,0xf7
c001435a:	89 03                	mov    DWORD PTR [ebx],eax
c001435c:	83 c4 04             	add    esp,0x4
c001435f:	5b                   	pop    ebx
c0014360:	5e                   	pop    esi
c0014361:	c3                   	ret    
c0014362:	83 ec 08             	sub    esp,0x8
c0014365:	25 00 f0 ff ff       	and    eax,0xfffff000
c001436a:	50                   	push   eax
c001436b:	56                   	push   esi
c001436c:	e8 b3 fc ff ff       	call   c0014024 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014371:	83 c4 10             	add    esp,0x10
c0014374:	84 c0                	test   al,al
c0014376:	74 19                	je     c0014391 <VAS::lockPage(unsigned long)+0x5d>
c0014378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437a:	f6 c4 08             	test   ah,0x8
c001437d:	75 d8                	jne    c0014357 <VAS::lockPage(unsigned long)+0x23>
c001437f:	c7 44 24 10 1c 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc002441c
c0014387:	83 c4 04             	add    esp,0x4
c001438a:	5b                   	pop    ebx
c001438b:	5e                   	pop    esi
c001438c:	e9 65 ba ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	68 dc 46 02 c0       	push   0xc00246dc
c0014399:	e8 58 ba ff ff       	call   c000fdf6 <KePanic(char const*)>
c001439e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143a0:	83 c4 10             	add    esp,0x10
c00143a3:	eb ad                	jmp    c0014352 <VAS::lockPage(unsigned long)+0x1e>
c00143a5:	90                   	nop

c00143a6 <VAS::lockPages(unsigned long, int)>:
c00143a6:	55                   	push   ebp
c00143a7:	57                   	push   edi
c00143a8:	56                   	push   esi
c00143a9:	53                   	push   ebx
c00143aa:	83 ec 0c             	sub    esp,0xc
c00143ad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143b1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00143b5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00143b9:	85 ff                	test   edi,edi
c00143bb:	7e 1c                	jle    c00143d9 <VAS::lockPages(unsigned long, int)+0x33>
c00143bd:	31 f6                	xor    esi,esi
c00143bf:	83 ec 08             	sub    esp,0x8
c00143c2:	83 c6 01             	add    esi,0x1
c00143c5:	53                   	push   ebx
c00143c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00143cc:	55                   	push   ebp
c00143cd:	e8 62 ff ff ff       	call   c0014334 <VAS::lockPage(unsigned long)>
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	39 f7                	cmp    edi,esi
c00143d7:	75 e6                	jne    c00143bf <VAS::lockPages(unsigned long, int)+0x19>
c00143d9:	83 c4 0c             	add    esp,0xc
c00143dc:	5b                   	pop    ebx
c00143dd:	5e                   	pop    esi
c00143de:	5f                   	pop    edi
c00143df:	5d                   	pop    ebp
c00143e0:	c3                   	ret    
c00143e1:	90                   	nop

c00143e2 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00143e2:	55                   	push   ebp
c00143e3:	57                   	push   edi
c00143e4:	56                   	push   esi
c00143e5:	53                   	push   ebx
c00143e6:	83 ec 28             	sub    esp,0x28
c00143e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00143ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00143f1:	50                   	push   eax
c00143f2:	e8 5e ee ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c00143f7:	83 c4 0c             	add    esp,0xc
c00143fa:	6a 07                	push   0x7
c00143fc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014400:	52                   	push   edx
c0014401:	89 c5                	mov    ebp,eax
c0014403:	53                   	push   ebx
c0014404:	e8 2d f6 ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014410:	89 c7                	mov    edi,eax
c0014412:	85 c9                	test   ecx,ecx
c0014414:	74 2f                	je     c0014445 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014416:	31 f6                	xor    esi,esi
c0014418:	e8 d3 bb ff ff       	call   c000fff0 <Phys::allocatePage()>
c001441d:	83 c6 01             	add    esi,0x1
c0014420:	6a 03                	push   0x3
c0014422:	55                   	push   ebp
c0014423:	50                   	push   eax
c0014424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014428:	53                   	push   ebx
c0014429:	e8 00 f5 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c001442e:	6a 07                	push   0x7
c0014430:	57                   	push   edi
c0014431:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014435:	50                   	push   eax
c0014436:	53                   	push   ebx
c0014437:	e8 f2 f4 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c001443c:	83 c4 20             	add    esp,0x20
c001443f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014443:	75 d3                	jne    c0014418 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014445:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014449:	89 28                	mov    DWORD PTR [eax],ebp
c001444b:	83 c4 1c             	add    esp,0x1c
c001444e:	89 f8                	mov    eax,edi
c0014450:	5b                   	pop    ebx
c0014451:	5e                   	pop    esi
c0014452:	5f                   	pop    edi
c0014453:	5d                   	pop    ebp
c0014454:	c3                   	ret    
c0014455:	90                   	nop

c0014456 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014456:	53                   	push   ebx
c0014457:	83 ec 14             	sub    esp,0x14
c001445a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001445e:	68 0c 47 02 c0       	push   0xc002470c
c0014463:	e8 e6 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014468:	c7 04 24 6c 47 02 c0 	mov    DWORD PTR [esp],0xc002476c
c001446f:	e8 da 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014474:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014478:	83 c4 18             	add    esp,0x18
c001447b:	5b                   	pop    ebx
c001447c:	e9 d2 f0 ff ff       	jmp    c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c0014481:	90                   	nop

c0014482 <VAS::scanForEviction()>:
c0014482:	57                   	push   edi
c0014483:	56                   	push   esi
c0014484:	31 f6                	xor    esi,esi
c0014486:	53                   	push   ebx
c0014487:	83 ec 18             	sub    esp,0x18
c001448a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001448f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014493:	50                   	push   eax
c0014494:	68 e8 47 02 c0       	push   0xc00247e8
c0014499:	e8 b0 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001449e:	c7 04 24 1f 49 02 c0 	mov    DWORD PTR [esp],0xc002491f
c00144a5:	e8 a4 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144aa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00144ad:	83 c4 10             	add    esp,0x10
c00144b0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00144b6:	75 0e                	jne    c00144c6 <VAS::scanForEviction()+0x44>
c00144b8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00144bb:	89 da                	mov    edx,ebx
c00144bd:	c1 ea 16             	shr    edx,0x16
c00144c0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00144c4:	74 5b                	je     c0014521 <VAS::scanForEviction()+0x9f>
c00144c6:	83 ec 08             	sub    esp,0x8
c00144c9:	53                   	push   ebx
c00144ca:	57                   	push   edi
c00144cb:	e8 64 f0 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00144d5:	89 d1                	mov    ecx,edx
c00144d7:	c1 e9 0c             	shr    ecx,0xc
c00144da:	74 10                	je     c00144ec <VAS::scanForEviction()+0x6a>
c00144dc:	89 d1                	mov    ecx,edx
c00144de:	81 e1 01 08 00 00    	and    ecx,0x801
c00144e4:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00144ea:	74 40                	je     c001452c <VAS::scanForEviction()+0xaa>
c00144ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c00144f2:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00144f8:	76 2d                	jbe    c0014527 <VAS::scanForEviction()+0xa5>
c00144fa:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014501:	83 c6 01             	add    esi,0x1
c0014504:	83 fe 03             	cmp    esi,0x3
c0014507:	74 32                	je     c001453b <VAS::scanForEviction()+0xb9>
c0014509:	31 db                	xor    ebx,ebx
c001450b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014511:	75 b3                	jne    c00144c6 <VAS::scanForEviction()+0x44>
c0014513:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014516:	89 da                	mov    edx,ebx
c0014518:	c1 ea 16             	shr    edx,0x16
c001451b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001451f:	75 a5                	jne    c00144c6 <VAS::scanForEviction()+0x44>
c0014521:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014527:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001452a:	eb 84                	jmp    c00144b0 <VAS::scanForEviction()+0x2e>
c001452c:	f6 c2 20             	test   dl,0x20
c001452f:	74 13                	je     c0014544 <VAS::scanForEviction()+0xc2>
c0014531:	83 e2 df             	and    edx,0xffffffdf
c0014534:	89 10                	mov    DWORD PTR [eax],edx
c0014536:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014539:	eb b1                	jmp    c00144ec <VAS::scanForEviction()+0x6a>
c001453b:	83 c4 10             	add    esp,0x10
c001453e:	31 c0                	xor    eax,eax
c0014540:	5b                   	pop    ebx
c0014541:	5e                   	pop    esi
c0014542:	5f                   	pop    edi
c0014543:	c3                   	ret    
c0014544:	89 d0                	mov    eax,edx
c0014546:	83 ec 08             	sub    esp,0x8
c0014549:	25 00 f0 ff ff       	and    eax,0xfffff000
c001454e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014552:	53                   	push   ebx
c0014553:	68 3b 49 02 c0       	push   0xc002493b
c0014558:	e8 f1 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001455d:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014560:	58                   	pop    eax
c0014561:	5a                   	pop    edx
c0014562:	51                   	push   ecx
c0014563:	57                   	push   edi
c0014564:	e8 f1 f8 ff ff       	call   c0013e5a <VAS::evict(unsigned long)>
c0014569:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001456c:	5b                   	pop    ebx
c001456d:	5e                   	pop    esi
c001456e:	50                   	push   eax
c001456f:	68 4f 49 02 c0       	push   0xc002494f
c0014574:	e8 d5 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014579:	58                   	pop    eax
c001457a:	5a                   	pop    edx
c001457b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001457f:	50                   	push   eax
c0014580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014584:	68 62 49 02 c0       	push   0xc0024962
c0014589:	e8 c0 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001458e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014591:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014597:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001459a:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c00145a0:	5b                   	pop    ebx
c00145a1:	5e                   	pop    esi
c00145a2:	57                   	push   edi
c00145a3:	68 08 48 02 c0       	push   0xc0024808
c00145a8:	e8 a1 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145b4:	83 c4 10             	add    esp,0x10
c00145b7:	5b                   	pop    ebx
c00145b8:	5e                   	pop    esi
c00145b9:	5f                   	pop    edi
c00145ba:	c3                   	ret    

c00145bb <mapVASFirstTime>:
c00145bb:	55                   	push   ebp
c00145bc:	57                   	push   edi
c00145bd:	56                   	push   esi
c00145be:	53                   	push   ebx
c00145bf:	83 ec 0c             	sub    esp,0xc
c00145c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145c7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00145ca:	83 fa 01             	cmp    edx,0x1
c00145cd:	0f 84 cb 00 00 00    	je     c001469e <mapVASFirstTime+0xe3>
c00145d3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00145d6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00145db:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00145e0:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00145e3:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c00145e9:	c1 e5 15             	shl    ebp,0x15
c00145ec:	29 eb                	sub    ebx,ebp
c00145ee:	29 ef                	sub    edi,ebp
c00145f0:	e8 fb b9 ff ff       	call   c000fff0 <Phys::allocatePage()>
c00145f5:	83 ec 0c             	sub    esp,0xc
c00145f8:	68 03 04 00 00       	push   0x403
c00145fd:	6a 01                	push   0x1
c00145ff:	53                   	push   ebx
c0014600:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014606:	50                   	push   eax
c0014607:	56                   	push   esi
c0014608:	e8 1b f5 ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001460d:	83 c4 20             	add    esp,0x20
c0014610:	39 fb                	cmp    ebx,edi
c0014612:	75 dc                	jne    c00145f0 <mapVASFirstTime+0x35>
c0014614:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014619:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001461e:	29 eb                	sub    ebx,ebp
c0014620:	29 ef                	sub    edi,ebp
c0014622:	e8 c9 b9 ff ff       	call   c000fff0 <Phys::allocatePage()>
c0014627:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001462b:	83 fa 01             	cmp    edx,0x1
c001462e:	19 d2                	sbb    edx,edx
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	83 e2 04             	and    edx,0x4
c0014636:	81 c2 03 04 00 00    	add    edx,0x403
c001463c:	52                   	push   edx
c001463d:	6a 01                	push   0x1
c001463f:	53                   	push   ebx
c0014640:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014646:	50                   	push   eax
c0014647:	56                   	push   esi
c0014648:	e8 db f4 ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001464d:	83 c4 20             	add    esp,0x20
c0014650:	39 df                	cmp    edi,ebx
c0014652:	75 ce                	jne    c0014622 <mapVASFirstTime+0x67>
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c001465c:	6a 04                	push   0x4
c001465e:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c0014664:	6a ff                	push   0xffffffff
c0014666:	c1 eb 0c             	shr    ebx,0xc
c0014669:	53                   	push   ebx
c001466a:	68 00 70 02 c0       	push   0xc0027000
c001466f:	56                   	push   esi
c0014670:	e8 59 f0 ff ff       	call   c00136ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014675:	83 c4 14             	add    esp,0x14
c0014678:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001467d:	6a 04                	push   0x4
c001467f:	6a ff                	push   0xffffffff
c0014681:	53                   	push   ebx
c0014682:	68 00 70 02 c0       	push   0xc0027000
c0014687:	50                   	push   eax
c0014688:	e8 41 f0 ff ff       	call   c00136ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001468d:	0f 20 d8             	mov    eax,cr3
c0014690:	0f 22 d8             	mov    cr3,eax
c0014693:	83 c4 20             	add    esp,0x20
c0014696:	83 c4 0c             	add    esp,0xc
c0014699:	5b                   	pop    ebx
c001469a:	5e                   	pop    esi
c001469b:	5f                   	pop    edi
c001469c:	5d                   	pop    ebp
c001469d:	c3                   	ret    
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	68 6f 49 02 c0       	push   0xc002496f
c00146a6:	e8 a3 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	83 c4 0c             	add    esp,0xc
c00146b1:	5b                   	pop    ebx
c00146b2:	5e                   	pop    esi
c00146b3:	5f                   	pop    edi
c00146b4:	5d                   	pop    ebp
c00146b5:	c3                   	ret    

c00146b6 <SysAlarm(regs*)>:
c00146b6:	53                   	push   ebx
c00146b7:	83 ec 10             	sub    esp,0x10
c00146ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00146be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00146c1:	68 88 49 02 c0       	push   0xc0024988
c00146c6:	e8 83 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00146cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146ce:	83 c4 0c             	add    esp,0xc
c00146d1:	31 d2                	xor    edx,edx
c00146d3:	52                   	push   edx
c00146d4:	50                   	push   eax
c00146d5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00146db:	e8 a8 09 00 00       	call   c0015088 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00146e0:	83 c4 18             	add    esp,0x18
c00146e3:	5b                   	pop    ebx
c00146e4:	c3                   	ret    

c00146e5 <SysEject(regs*)>:
c00146e5:	83 ec 0c             	sub    esp,0xc
c00146e8:	83 ca ff             	or     edx,0xffffffff
c00146eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ef:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00146f2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00146f7:	83 e9 41             	sub    ecx,0x41
c00146fa:	83 f9 19             	cmp    ecx,0x19
c00146fd:	77 18                	ja     c0014717 <SysEject(regs*)+0x32>
c00146ff:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014706:	85 c9                	test   ecx,ecx
c0014708:	74 0d                	je     c0014717 <SysEject(regs*)+0x32>
c001470a:	83 ec 0c             	sub    esp,0xc
c001470d:	51                   	push   ecx
c001470e:	e8 73 62 ff ff       	call   c000a986 <LogicalDisk::eject()>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	99                   	cdq    
c0014717:	83 c4 0c             	add    esp,0xc
c001471a:	c3                   	ret    

c001471b <SysExit(regs*)>:
c001471b:	83 ec 18             	sub    esp,0x18
c001471e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014722:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014725:	e8 ee 2d 00 00       	call   c0017518 <terminateTask(int)>
c001472a:	83 c8 ff             	or     eax,0xffffffff
c001472d:	83 c4 1c             	add    esp,0x1c
c0014730:	89 c2                	mov    edx,eax
c0014732:	c3                   	ret    

c0014733 <SysGetCwd(regs*)>:
c0014733:	83 ec 10             	sub    esp,0x10
c0014736:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001473a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001473d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014745:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014748:	e8 5f 36 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c001474d:	83 c4 1c             	add    esp,0x1c
c0014750:	99                   	cdq    
c0014751:	c3                   	ret    

c0014752 <SysGetPID(regs*)>:
c0014752:	83 ec 14             	sub    esp,0x14
c0014755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001475d:	ff 30                	push   DWORD PTR [eax]
c001475f:	68 9d 49 02 c0       	push   0xc002499d
c0014764:	e8 e5 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014769:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001476e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014771:	8b 00                	mov    eax,DWORD PTR [eax]
c0014773:	83 c4 1c             	add    esp,0x1c
c0014776:	99                   	cdq    
c0014777:	c3                   	ret    

c0014778 <SysGetRAMData(regs*)>:
c0014778:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001477d:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c0014783:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0014789:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001478f:	99                   	cdq    
c0014790:	f7 f9                	idiv   ecx
c0014792:	c1 e0 18             	shl    eax,0x18
c0014795:	09 c8                	or     eax,ecx
c0014797:	99                   	cdq    
c0014798:	c3                   	ret    

c0014799 <SysGetVGAPtr(regs*)>:
c0014799:	55                   	push   ebp
c001479a:	57                   	push   edi
c001479b:	56                   	push   esi
c001479c:	53                   	push   ebx
c001479d:	83 ec 0c             	sub    esp,0xc
c00147a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00147a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00147a7:	83 f8 ff             	cmp    eax,0xffffffff
c00147aa:	74 1b                	je     c00147c7 <SysGetVGAPtr(regs*)+0x2e>
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	50                   	push   eax
c00147b0:	e8 1b 28 00 00       	call   c0016fd0 <Thr::processFromPID(int)>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	31 d2                	xor    edx,edx
c00147ba:	89 c1                	mov    ecx,eax
c00147bc:	b8 01 00 00 00       	mov    eax,0x1
c00147c1:	85 c9                	test   ecx,ecx
c00147c3:	75 0a                	jne    c00147cf <SysGetVGAPtr(regs*)+0x36>
c00147c5:	eb 61                	jmp    c0014828 <SysGetVGAPtr(regs*)+0x8f>
c00147c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147cc:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00147cf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00147d3:	8b a9 a6 05 00 00    	mov    ebp,DWORD PTR [ecx+0x5a6]
c00147d9:	74 0c                	je     c00147e7 <SysGetVGAPtr(regs*)+0x4e>
c00147db:	83 ec 0c             	sub    esp,0xc
c00147de:	55                   	push   ebp
c00147df:	e8 19 db ff ff       	call   c00122fd <setActiveTerminal(VgaText*)>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00147ea:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00147ef:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00147f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147f4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00147f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00147fa:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014800:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014803:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014806:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001480c:	50                   	push   eax
c001480d:	50                   	push   eax
c001480e:	68 ac 49 02 c0       	push   0xc00249ac
c0014813:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014816:	05 a8 0f 00 00       	add    eax,0xfa8
c001481b:	50                   	push   eax
c001481c:	e8 2f be fe ff       	call   c0000650 <strcpy>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	31 c0                	xor    eax,eax
c0014826:	31 d2                	xor    edx,edx
c0014828:	83 c4 0c             	add    esp,0xc
c001482b:	5b                   	pop    ebx
c001482c:	5e                   	pop    esi
c001482d:	5f                   	pop    edi
c001482e:	5d                   	pop    ebp
c001482f:	c3                   	ret    

c0014830 <SysKill(regs*)>:
c0014830:	53                   	push   ebx
c0014831:	83 ec 08             	sub    esp,0x8
c0014834:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014838:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001483c:	75 16                	jne    c0014854 <SysKill(regs*)+0x24>
c001483e:	83 ec 0c             	sub    esp,0xc
c0014841:	68 b6 49 02 c0       	push   0xc00249b6
c0014846:	e8 ab b5 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	e9 89 00 00 00       	jmp    c00148dc <SysKill(regs*)+0xac>
c0014853:	90                   	nop
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	68 4c ea 02 c0       	push   0xc002ea4c
c001485c:	e8 17 d2 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014861:	8d 76 00             	lea    esi,[esi+0x0]
c0014864:	83 c4 10             	add    esp,0x10
c0014867:	85 c0                	test   eax,eax
c0014869:	74 19                	je     c0014884 <SysKill(regs*)+0x54>
c001486b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001486e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014871:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014873:	74 33                	je     c00148a8 <SysKill(regs*)+0x78>
c0014875:	52                   	push   edx
c0014876:	52                   	push   edx
c0014877:	50                   	push   eax
c0014878:	68 4c ea 02 c0       	push   0xc002ea4c
c001487d:	e8 02 d7 00 00       	call   c0021f84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014882:	eb e0                	jmp    c0014864 <SysKill(regs*)+0x34>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	68 40 ea 02 c0       	push   0xc002ea40
c001488c:	e8 e7 d1 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014891:	8d 76 00             	lea    esi,[esi+0x0]
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	85 c0                	test   eax,eax
c0014899:	74 41                	je     c00148dc <SysKill(regs*)+0xac>
c001489b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001489e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00148a1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00148a3:	75 27                	jne    c00148cc <SysKill(regs*)+0x9c>
c00148a5:	8d 76 00             	lea    esi,[esi+0x0]
c00148a8:	51                   	push   ecx
c00148a9:	51                   	push   ecx
c00148aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148b5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00148bb:	e8 ab c6 ff ff       	call   c0010f6b <KeRaiseSignal(SigHandlerBlock*, int)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	31 c0                	xor    eax,eax
c00148c5:	31 d2                	xor    edx,edx
c00148c7:	eb 1b                	jmp    c00148e4 <SysKill(regs*)+0xb4>
c00148c9:	8d 76 00             	lea    esi,[esi+0x0]
c00148cc:	52                   	push   edx
c00148cd:	52                   	push   edx
c00148ce:	50                   	push   eax
c00148cf:	68 40 ea 02 c0       	push   0xc002ea40
c00148d4:	e8 ab d6 00 00       	call   c0021f84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00148d9:	eb b9                	jmp    c0014894 <SysKill(regs*)+0x64>
c00148db:	90                   	nop
c00148dc:	83 c8 ff             	or     eax,0xffffffff
c00148df:	89 c2                	mov    edx,eax
c00148e1:	8d 76 00             	lea    esi,[esi+0x0]
c00148e4:	83 c4 08             	add    esp,0x8
c00148e7:	5b                   	pop    ebx
c00148e8:	c3                   	ret    

c00148e9 <SysLoadDLL(regs*)>:
c00148e9:	56                   	push   esi
c00148ea:	31 d2                	xor    edx,edx
c00148ec:	53                   	push   ebx
c00148ed:	b8 01 00 00 00       	mov    eax,0x1
c00148f2:	51                   	push   ecx
c00148f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148f7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00148fb:	0f 84 8c 00 00 00    	je     c001498d <SysLoadDLL(regs*)+0xa4>
c0014901:	83 ec 0c             	sub    esp,0xc
c0014904:	68 14 01 00 00       	push   0x114
c0014909:	e8 a2 b1 ff ff       	call   c000fab0 <malloc>
c001490e:	83 c4 0c             	add    esp,0xc
c0014911:	89 c3                	mov    ebx,eax
c0014913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014918:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001491b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001491e:	53                   	push   ebx
c001491f:	e8 08 38 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014924:	83 c4 10             	add    esp,0x10
c0014927:	31 d2                	xor    edx,edx
c0014929:	85 db                	test   ebx,ebx
c001492b:	b8 02 00 00 00       	mov    eax,0x2
c0014930:	74 5b                	je     c001498d <SysLoadDLL(regs*)+0xa4>
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	53                   	push   ebx
c0014936:	e8 d3 3a ff ff       	call   c000840e <File::exists()>
c001493b:	83 c4 10             	add    esp,0x10
c001493e:	84 c0                	test   al,al
c0014940:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014942:	75 11                	jne    c0014955 <SysLoadDLL(regs*)+0x6c>
c0014944:	83 ec 0c             	sub    esp,0xc
c0014947:	53                   	push   ebx
c0014948:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001494b:	83 c4 10             	add    esp,0x10
c001494e:	b8 03 00 00 00       	mov    eax,0x3
c0014953:	eb 36                	jmp    c001498b <SysLoadDLL(regs*)+0xa2>
c0014955:	83 ec 0c             	sub    esp,0xc
c0014958:	53                   	push   ebx
c0014959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001495c:	58                   	pop    eax
c001495d:	5a                   	pop    edx
c001495e:	6a 00                	push   0x0
c0014960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014963:	e8 55 18 00 00       	call   c00161bd <Thr::loadDLL(char const*, bool)>
c0014968:	83 c4 10             	add    esp,0x10
c001496b:	31 d2                	xor    edx,edx
c001496d:	89 c1                	mov    ecx,eax
c001496f:	b8 04 00 00 00       	mov    eax,0x4
c0014974:	85 c9                	test   ecx,ecx
c0014976:	74 15                	je     c001498d <SysLoadDLL(regs*)+0xa4>
c0014978:	53                   	push   ebx
c0014979:	53                   	push   ebx
c001497a:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014980:	51                   	push   ecx
c0014981:	e8 98 1a 00 00       	call   c001641e <Thr::executeDLL(unsigned long, void*)>
c0014986:	83 c4 10             	add    esp,0x10
c0014989:	31 c0                	xor    eax,eax
c001498b:	31 d2                	xor    edx,edx
c001498d:	59                   	pop    ecx
c001498e:	5b                   	pop    ebx
c001498f:	5e                   	pop    esi
c0014990:	c3                   	ret    

c0014991 <SysPause(regs*)>:
c0014991:	83 ec 18             	sub    esp,0x18
c0014994:	6a 08                	push   0x8
c0014996:	e8 49 24 00 00       	call   c0016de4 <blockTask(TaskState)>
c001499b:	31 c0                	xor    eax,eax
c001499d:	31 d2                	xor    edx,edx
c001499f:	83 c4 1c             	add    esp,0x1c
c00149a2:	c3                   	ret    

c00149a3 <SysPthreadCreate(regs*)>:
c00149a3:	83 ec 18             	sub    esp,0x18
c00149a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149ae:	e8 19 22 00 00       	call   c0016bcc <Process::createUserThread()>
c00149b3:	31 c0                	xor    eax,eax
c00149b5:	31 d2                	xor    edx,edx
c00149b7:	83 c4 1c             	add    esp,0x1c
c00149ba:	c3                   	ret    

c00149bb <SysPthreadGetTID(regs*)>:
c00149bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149c3:	99                   	cdq    
c00149c4:	c3                   	ret    

c00149c5 <SysInternalPthreadGetContext(regs*)>:
c00149c5:	31 c0                	xor    eax,eax
c00149c7:	31 d2                	xor    edx,edx
c00149c9:	c3                   	ret    

c00149ca <SysInternalPthreadGetStartLocation(regs*)>:
c00149ca:	31 c0                	xor    eax,eax
c00149cc:	31 d2                	xor    edx,edx
c00149ce:	c3                   	ret    

c00149cf <SysPthreadJoin(regs*)>:
c00149cf:	31 c0                	xor    eax,eax
c00149d1:	31 d2                	xor    edx,edx
c00149d3:	c3                   	ret    

c00149d4 <SysPthreadExit(regs*)>:
c00149d4:	83 ec 18             	sub    esp,0x18
c00149d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149db:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149de:	e8 35 2b 00 00       	call   c0017518 <terminateTask(int)>
c00149e3:	83 c8 ff             	or     eax,0xffffffff
c00149e6:	83 c4 1c             	add    esp,0x1c
c00149e9:	89 c2                	mov    edx,eax
c00149eb:	c3                   	ret    

c00149ec <SysRead(regs*)>:
c00149ec:	57                   	push   edi
c00149ed:	56                   	push   esi
c00149ee:	53                   	push   ebx
c00149ef:	83 ec 10             	sub    esp,0x10
c00149f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00149f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149f9:	83 f8 02             	cmp    eax,0x2
c00149fc:	77 10                	ja     c0014a0e <SysRead(regs*)+0x22>
c00149fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a06:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014a0c:	eb 0e                	jmp    c0014a1c <SysRead(regs*)+0x30>
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	50                   	push   eax
c0014a12:	e8 d2 e6 ff ff       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	89 c1                	mov    ecx,eax
c0014a1c:	83 c8 ff             	or     eax,0xffffffff
c0014a1f:	85 c9                	test   ecx,ecx
c0014a21:	89 c2                	mov    edx,eax
c0014a23:	74 28                	je     c0014a4d <SysRead(regs*)+0x61>
c0014a25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	31 ff                	xor    edi,edi
c0014a32:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014a36:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014a38:	52                   	push   edx
c0014a39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a3c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014a3f:	57                   	push   edi
c0014a40:	56                   	push   esi
c0014a41:	51                   	push   ecx
c0014a42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014a49:	83 c4 20             	add    esp,0x20
c0014a4c:	99                   	cdq    
c0014a4d:	83 c4 10             	add    esp,0x10
c0014a50:	5b                   	pop    ebx
c0014a51:	5e                   	pop    esi
c0014a52:	5f                   	pop    edi
c0014a53:	c3                   	ret    

c0014a54 <SysRegisterSignal(regs*)>:
c0014a54:	83 ec 18             	sub    esp,0x18
c0014a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a5b:	6a 00                	push   0x0
c0014a5d:	6a 00                	push   0x0
c0014a5f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a62:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a6d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014a73:	e8 bd c4 ff ff       	call   c0010f35 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014a78:	83 c4 2c             	add    esp,0x2c
c0014a7b:	99                   	cdq    
c0014a7c:	c3                   	ret    

c0014a7d <SysRegistryGetTypeFromPath(regs*)>:
c0014a7d:	53                   	push   ebx
c0014a7e:	81 ec 40 01 00 00    	sub    esp,0x140
c0014a84:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014a8b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a8e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a91:	e8 e1 93 ff ff       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	85 c0                	test   eax,eax
c0014a9b:	89 c1                	mov    ecx,eax
c0014a9d:	74 15                	je     c0014ab4 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014a9f:	50                   	push   eax
c0014aa0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014aa4:	50                   	push   eax
c0014aa5:	51                   	push   ecx
c0014aa6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014aa9:	e8 ae 8f ff ff       	call   c000da5c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	99                   	cdq    
c0014ab2:	eb 05                	jmp    c0014ab9 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014ab4:	83 c8 ff             	or     eax,0xffffffff
c0014ab7:	89 c2                	mov    edx,eax
c0014ab9:	81 c4 38 01 00 00    	add    esp,0x138
c0014abf:	5b                   	pop    ebx
c0014ac0:	c3                   	ret    

c0014ac1 <SysRegistryReadExtent(regs*)>:
c0014ac1:	83 ec 1c             	sub    esp,0x1c
c0014ac4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ac8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014acb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014ace:	85 c0                	test   eax,eax
c0014ad0:	79 1f                	jns    c0014af1 <SysRegistryReadExtent(regs*)+0x30>
c0014ad2:	52                   	push   edx
c0014ad3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014ad8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014adc:	52                   	push   edx
c0014add:	50                   	push   eax
c0014ade:	51                   	push   ecx
c0014adf:	e8 6a 8e ff ff       	call   c000d94e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014aec:	83 c4 10             	add    esp,0x10
c0014aef:	eb 14                	jmp    c0014b05 <SysRegistryReadExtent(regs*)+0x44>
c0014af1:	83 ec 04             	sub    esp,0x4
c0014af4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014af7:	50                   	push   eax
c0014af8:	51                   	push   ecx
c0014af9:	e8 ee 88 ff ff       	call   c000d3ec <CmGetString(Reghive_Tag*, int, char*)>
c0014afe:	83 c4 10             	add    esp,0x10
c0014b01:	31 c0                	xor    eax,eax
c0014b03:	31 d2                	xor    edx,edx
c0014b05:	83 c4 1c             	add    esp,0x1c
c0014b08:	c3                   	ret    

c0014b09 <SysRegistryPathToExtentLookup(regs*)>:
c0014b09:	83 ec 14             	sub    esp,0x14
c0014b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b10:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b13:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b16:	e8 5c 93 ff ff       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b1b:	83 c4 1c             	add    esp,0x1c
c0014b1e:	99                   	cdq    
c0014b1f:	c3                   	ret    

c0014b20 <SysRegistryEnterDirectory(regs*)>:
c0014b20:	83 ec 14             	sub    esp,0x14
c0014b23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b27:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b2a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b2d:	e8 31 89 ff ff       	call   c000d463 <CmEnterDirectory(Reghive_Tag*, int)>
c0014b32:	83 c4 1c             	add    esp,0x1c
c0014b35:	99                   	cdq    
c0014b36:	c3                   	ret    

c0014b37 <SysRegistryGetNext(regs*)>:
c0014b37:	83 ec 14             	sub    esp,0x14
c0014b3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b3e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b41:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b44:	e8 59 89 ff ff       	call   c000d4a2 <CmGetNext(Reghive_Tag*, int)>
c0014b49:	83 c4 1c             	add    esp,0x1c
c0014b4c:	99                   	cdq    
c0014b4d:	c3                   	ret    

c0014b4e <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014b4e:	57                   	push   edi
c0014b4f:	56                   	push   esi
c0014b50:	53                   	push   ebx
c0014b51:	81 ec 34 01 00 00    	sub    esp,0x134
c0014b57:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014b5e:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014b62:	57                   	push   edi
c0014b63:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014b66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b69:	e8 ee 8e ff ff       	call   c000da5c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014b6e:	89 c3                	mov    ebx,eax
c0014b70:	58                   	pop    eax
c0014b71:	5a                   	pop    edx
c0014b72:	57                   	push   edi
c0014b73:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014b76:	e8 d5 ba fe ff       	call   c0000650 <strcpy>
c0014b7b:	81 c4 40 01 00 00    	add    esp,0x140
c0014b81:	89 d8                	mov    eax,ebx
c0014b83:	5b                   	pop    ebx
c0014b84:	99                   	cdq    
c0014b85:	5e                   	pop    esi
c0014b86:	5f                   	pop    edi
c0014b87:	c3                   	ret    

c0014b88 <SysRegistryOpen(regs*)>:
c0014b88:	83 ec 18             	sub    esp,0x18
c0014b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b8f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b92:	e8 e5 86 ff ff       	call   c000d27c <CmOpen(char const*)>
c0014b97:	83 c4 1c             	add    esp,0x1c
c0014b9a:	99                   	cdq    
c0014b9b:	c3                   	ret    

c0014b9c <SysRegistryClose(regs*)>:
c0014b9c:	83 ec 18             	sub    esp,0x18
c0014b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ba6:	e8 ef 87 ff ff       	call   c000d39a <CmClose(Reghive_Tag*)>
c0014bab:	31 c0                	xor    eax,eax
c0014bad:	31 d2                	xor    edx,edx
c0014baf:	83 c4 1c             	add    esp,0x1c
c0014bb2:	c3                   	ret    

c0014bb3 <SysRegistryEasyReadString(regs*)>:
c0014bb3:	57                   	push   edi
c0014bb4:	56                   	push   esi
c0014bb5:	53                   	push   ebx
c0014bb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bba:	83 ec 0c             	sub    esp,0xc
c0014bbd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014bc0:	e8 b7 86 ff ff       	call   c000d27c <CmOpen(char const*)>
c0014bc5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014bc8:	5a                   	pop    edx
c0014bc9:	59                   	pop    ecx
c0014bca:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bcd:	89 c3                	mov    ebx,eax
c0014bcf:	50                   	push   eax
c0014bd0:	e8 a2 92 ff ff       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	89 c1                	mov    ecx,eax
c0014bda:	b8 01 00 00 00       	mov    eax,0x1
c0014bdf:	85 c9                	test   ecx,ecx
c0014be1:	7e 16                	jle    c0014bf9 <SysRegistryEasyReadString(regs*)+0x46>
c0014be3:	50                   	push   eax
c0014be4:	57                   	push   edi
c0014be5:	51                   	push   ecx
c0014be6:	53                   	push   ebx
c0014be7:	e8 00 88 ff ff       	call   c000d3ec <CmGetString(Reghive_Tag*, int, char*)>
c0014bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bef:	e8 a6 87 ff ff       	call   c000d39a <CmClose(Reghive_Tag*)>
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	31 c0                	xor    eax,eax
c0014bf9:	5b                   	pop    ebx
c0014bfa:	31 d2                	xor    edx,edx
c0014bfc:	5e                   	pop    esi
c0014bfd:	5f                   	pop    edi
c0014bfe:	c3                   	ret    

c0014bff <SysRegistryEasyReadInteger(regs*)>:
c0014bff:	56                   	push   esi
c0014c00:	53                   	push   ebx
c0014c01:	83 ec 10             	sub    esp,0x10
c0014c04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014c08:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c0b:	e8 6c 86 ff ff       	call   c000d27c <CmOpen(char const*)>
c0014c10:	5a                   	pop    edx
c0014c11:	59                   	pop    ecx
c0014c12:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c15:	89 c3                	mov    ebx,eax
c0014c17:	50                   	push   eax
c0014c18:	e8 5a 92 ff ff       	call   c000de77 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c1d:	83 c4 10             	add    esp,0x10
c0014c20:	89 c1                	mov    ecx,eax
c0014c22:	b8 01 00 00 00       	mov    eax,0x1
c0014c27:	85 c9                	test   ecx,ecx
c0014c29:	7e 18                	jle    c0014c43 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014c2b:	50                   	push   eax
c0014c2c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c2f:	51                   	push   ecx
c0014c30:	53                   	push   ebx
c0014c31:	e8 18 8d ff ff       	call   c000d94e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c39:	e8 5c 87 ff ff       	call   c000d39a <CmClose(Reghive_Tag*)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	31 c0                	xor    eax,eax
c0014c43:	59                   	pop    ecx
c0014c44:	31 d2                	xor    edx,edx
c0014c46:	5b                   	pop    ebx
c0014c47:	5e                   	pop    esi
c0014c48:	c3                   	ret    

c0014c49 <SysSbrk(regs*)>:
c0014c49:	56                   	push   esi
c0014c4a:	53                   	push   ebx
c0014c4b:	50                   	push   eax
c0014c4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c58:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014c5b:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014c61:	85 db                	test   ebx,ebx
c0014c63:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014c66:	74 02                	je     c0014c6a <SysSbrk(regs*)+0x21>
c0014c68:	79 06                	jns    c0014c70 <SysSbrk(regs*)+0x27>
c0014c6a:	89 f0                	mov    eax,esi
c0014c6c:	31 d2                	xor    edx,edx
c0014c6e:	eb 2a                	jmp    c0014c9a <SysSbrk(regs*)+0x51>
c0014c70:	83 c8 ff             	or     eax,0xffffffff
c0014c73:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014c79:	89 c2                	mov    edx,eax
c0014c7b:	77 1d                	ja     c0014c9a <SysSbrk(regs*)+0x51>
c0014c7d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014c83:	50                   	push   eax
c0014c84:	68 07 0c 00 00       	push   0xc07
c0014c89:	c1 ea 0c             	shr    edx,0xc
c0014c8c:	52                   	push   edx
c0014c8d:	51                   	push   ecx
c0014c8e:	e8 a3 ed ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c0014c93:	89 f0                	mov    eax,esi
c0014c95:	31 d2                	xor    edx,edx
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	59                   	pop    ecx
c0014c9b:	5b                   	pop    ebx
c0014c9c:	5e                   	pop    esi
c0014c9d:	c3                   	ret    

c0014c9e <SysSetCwd(regs*)>:
c0014c9e:	83 ec 14             	sub    esp,0x14
c0014ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ca5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014cb0:	e8 f8 37 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0014cb5:	83 c4 1c             	add    esp,0x1c
c0014cb8:	99                   	cdq    
c0014cb9:	c3                   	ret    

c0014cba <SysSetTime(regs*)>:
c0014cba:	55                   	push   ebp
c0014cbb:	31 d2                	xor    edx,edx
c0014cbd:	57                   	push   edi
c0014cbe:	56                   	push   esi
c0014cbf:	53                   	push   ebx
c0014cc0:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014cc5:	83 ec 30             	sub    esp,0x30
c0014cc8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014ccc:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014ccf:	89 f0                	mov    eax,esi
c0014cd1:	f7 f3                	div    ebx
c0014cd3:	89 d7                	mov    edi,edx
c0014cd5:	31 d2                	xor    edx,edx
c0014cd7:	f7 f3                	div    ebx
c0014cd9:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014cde:	89 f0                	mov    eax,esi
c0014ce0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014ce4:	31 d2                	xor    edx,edx
c0014ce6:	f7 f3                	div    ebx
c0014ce8:	bb 18 00 00 00       	mov    ebx,0x18
c0014ced:	31 d2                	xor    edx,edx
c0014cef:	f7 f3                	div    ebx
c0014cf1:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014cf4:	bb 0c 00 00 00       	mov    ebx,0xc
c0014cf9:	89 c6                	mov    esi,eax
c0014cfb:	c1 e8 05             	shr    eax,0x5
c0014cfe:	83 e6 1f             	and    esi,0x1f
c0014d01:	46                   	inc    esi
c0014d02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d06:	31 d2                	xor    edx,edx
c0014d08:	f7 f3                	div    ebx
c0014d0a:	31 db                	xor    ebx,ebx
c0014d0c:	57                   	push   edi
c0014d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d15:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014d19:	55                   	push   ebp
c0014d1a:	52                   	push   edx
c0014d1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014d1f:	56                   	push   esi
c0014d20:	68 d7 49 02 c0       	push   0xc00249d7
c0014d25:	e8 24 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d2a:	83 c4 1c             	add    esp,0x1c
c0014d2d:	57                   	push   edi
c0014d2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d36:	55                   	push   ebp
c0014d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014d3b:	52                   	push   edx
c0014d3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d40:	56                   	push   esi
c0014d41:	68 f9 49 02 c0       	push   0xc00249f9
c0014d46:	e8 03 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d4b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014d50:	31 c9                	xor    ecx,ecx
c0014d52:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d56:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014d5a:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014d5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014d64:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014d68:	89 f0                	mov    eax,esi
c0014d6a:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014d6e:	88 c1                	mov    cl,al
c0014d70:	89 e8                	mov    eax,ebp
c0014d72:	88 d5                	mov    ch,dl
c0014d74:	83 c4 1c             	add    esp,0x1c
c0014d77:	c1 e0 10             	shl    eax,0x10
c0014d7a:	0f b7 d1             	movzx  edx,cx
c0014d7d:	09 c2                	or     edx,eax
c0014d7f:	89 f8                	mov    eax,edi
c0014d81:	c1 e0 10             	shl    eax,0x10
c0014d84:	89 d1                	mov    ecx,edx
c0014d86:	89 da                	mov    edx,ebx
c0014d88:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014d8e:	09 c2                	or     edx,eax
c0014d90:	52                   	push   edx
c0014d91:	51                   	push   ecx
c0014d92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d96:	e8 5b 47 ff ff       	call   c00094f6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014d9b:	83 c4 3c             	add    esp,0x3c
c0014d9e:	31 d2                	xor    edx,edx
c0014da0:	5b                   	pop    ebx
c0014da1:	5e                   	pop    esi
c0014da2:	83 f0 01             	xor    eax,0x1
c0014da5:	5f                   	pop    edi
c0014da6:	0f b6 c0             	movzx  eax,al
c0014da9:	5d                   	pop    ebp
c0014daa:	c3                   	ret    

c0014dab <SysSymlink(regs*)>:
c0014dab:	56                   	push   esi
c0014dac:	83 c8 ff             	or     eax,0xffffffff
c0014daf:	53                   	push   ebx
c0014db0:	89 c2                	mov    edx,eax
c0014db2:	81 ec 34 02 00 00    	sub    esp,0x234
c0014db8:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014dbf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014dc3:	74 50                	je     c0014e15 <SysSymlink(regs*)+0x6a>
c0014dc5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014dc8:	85 c9                	test   ecx,ecx
c0014dca:	74 49                	je     c0014e15 <SysSymlink(regs*)+0x6a>
c0014dcc:	6a 01                	push   0x1
c0014dce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dd6:	05 0c 01 00 00       	add    eax,0x10c
c0014ddb:	50                   	push   eax
c0014ddc:	51                   	push   ecx
c0014ddd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014de1:	56                   	push   esi
c0014de2:	e8 19 30 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014de7:	6a 01                	push   0x1
c0014de9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df1:	05 0c 01 00 00       	add    eax,0x10c
c0014df6:	50                   	push   eax
c0014df7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dfa:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014e01:	53                   	push   ebx
c0014e02:	e8 f9 2f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e07:	83 c4 18             	add    esp,0x18
c0014e0a:	56                   	push   esi
c0014e0b:	53                   	push   ebx
c0014e0c:	e8 1d 2c ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0014e11:	83 c4 10             	add    esp,0x10
c0014e14:	99                   	cdq    
c0014e15:	81 c4 34 02 00 00    	add    esp,0x234
c0014e1b:	5b                   	pop    ebx
c0014e1c:	5e                   	pop    esi
c0014e1d:	c3                   	ret    

c0014e1e <SysTimezone(regs*)>:
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e25:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014e29:	75 17                	jne    c0014e42 <SysTimezone(regs*)+0x24>
c0014e2b:	83 ec 0c             	sub    esp,0xc
c0014e2e:	68 1b 4a 02 c0       	push   0xc0024a1b
c0014e33:	e8 16 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014e38:	83 c8 ff             	or     eax,0xffffffff
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	89 c2                	mov    edx,eax
c0014e40:	eb 16                	jmp    c0014e58 <SysTimezone(regs*)+0x3a>
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e48:	e8 60 41 ff ff       	call   c0008fad <KeSetTimezone(int)>
c0014e4d:	31 d2                	xor    edx,edx
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	83 f0 01             	xor    eax,0x1
c0014e55:	0f b6 c0             	movzx  eax,al
c0014e58:	83 c4 0c             	add    esp,0xc
c0014e5b:	c3                   	ret    

c0014e5c <SysTruncate(regs*)>:
c0014e5c:	55                   	push   ebp
c0014e5d:	57                   	push   edi
c0014e5e:	31 ff                	xor    edi,edi
c0014e60:	56                   	push   esi
c0014e61:	53                   	push   ebx
c0014e62:	83 ec 0c             	sub    esp,0xc
c0014e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e69:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014e6c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014e70:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014e73:	89 ce                	mov    esi,ecx
c0014e75:	0f 84 9a 00 00 00    	je     c0014f15 <SysTruncate(regs*)+0xb9>
c0014e7b:	83 ec 0c             	sub    esp,0xc
c0014e7e:	68 14 01 00 00       	push   0x114
c0014e83:	e8 28 ac ff ff       	call   c000fab0 <malloc>
c0014e88:	83 c4 0c             	add    esp,0xc
c0014e8b:	89 c3                	mov    ebx,eax
c0014e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e92:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e95:	55                   	push   ebp
c0014e96:	53                   	push   ebx
c0014e97:	e8 90 32 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014e9c:	83 c4 10             	add    esp,0x10
c0014e9f:	31 d2                	xor    edx,edx
c0014ea1:	85 db                	test   ebx,ebx
c0014ea3:	b8 03 00 00 00       	mov    eax,0x3
c0014ea8:	0f 84 a2 00 00 00    	je     c0014f50 <SysTruncate(regs*)+0xf4>
c0014eae:	51                   	push   ecx
c0014eaf:	51                   	push   ecx
c0014eb0:	6a 02                	push   0x2
c0014eb2:	53                   	push   ebx
c0014eb3:	e8 92 32 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	85 c0                	test   eax,eax
c0014ebd:	74 13                	je     c0014ed2 <SysTruncate(regs*)+0x76>
c0014ebf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec1:	83 ec 0c             	sub    esp,0xc
c0014ec4:	53                   	push   ebx
c0014ec5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	b8 04 00 00 00       	mov    eax,0x4
c0014ed0:	eb 7c                	jmp    c0014f4e <SysTruncate(regs*)+0xf2>
c0014ed2:	52                   	push   edx
c0014ed3:	57                   	push   edi
c0014ed4:	56                   	push   esi
c0014ed5:	53                   	push   ebx
c0014ed6:	e8 83 33 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	85 c0                	test   eax,eax
c0014ee0:	74 1b                	je     c0014efd <SysTruncate(regs*)+0xa1>
c0014ee2:	83 ec 0c             	sub    esp,0xc
c0014ee5:	53                   	push   ebx
c0014ee6:	e8 bd 32 ff ff       	call   c00081a8 <File::close()>
c0014eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ef0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	b8 05 00 00 00       	mov    eax,0x5
c0014efb:	eb 51                	jmp    c0014f4e <SysTruncate(regs*)+0xf2>
c0014efd:	83 ec 0c             	sub    esp,0xc
c0014f00:	53                   	push   ebx
c0014f01:	e8 a2 32 ff ff       	call   c00081a8 <File::close()>
c0014f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	31 c0                	xor    eax,eax
c0014f13:	eb 39                	jmp    c0014f4e <SysTruncate(regs*)+0xf2>
c0014f15:	31 d2                	xor    edx,edx
c0014f17:	83 fd 02             	cmp    ebp,0x2
c0014f1a:	b8 01 00 00 00       	mov    eax,0x1
c0014f1f:	7e 2f                	jle    c0014f50 <SysTruncate(regs*)+0xf4>
c0014f21:	83 ec 0c             	sub    esp,0xc
c0014f24:	51                   	push   ecx
c0014f25:	e8 bf e1 ff ff       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0014f2a:	83 c4 10             	add    esp,0x10
c0014f2d:	31 d2                	xor    edx,edx
c0014f2f:	89 c1                	mov    ecx,eax
c0014f31:	b8 02 00 00 00       	mov    eax,0x2
c0014f36:	85 c9                	test   ecx,ecx
c0014f38:	74 16                	je     c0014f50 <SysTruncate(regs*)+0xf4>
c0014f3a:	50                   	push   eax
c0014f3b:	57                   	push   edi
c0014f3c:	56                   	push   esi
c0014f3d:	51                   	push   ecx
c0014f3e:	e8 1b 33 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014f43:	83 c4 10             	add    esp,0x10
c0014f46:	85 c0                	test   eax,eax
c0014f48:	0f 95 c0             	setne  al
c0014f4b:	0f b6 c0             	movzx  eax,al
c0014f4e:	31 d2                	xor    edx,edx
c0014f50:	83 c4 0c             	add    esp,0xc
c0014f53:	5b                   	pop    ebx
c0014f54:	5e                   	pop    esi
c0014f55:	5f                   	pop    edi
c0014f56:	5d                   	pop    ebp
c0014f57:	c3                   	ret    

c0014f58 <SysWrite(regs*)>:
c0014f58:	57                   	push   edi
c0014f59:	56                   	push   esi
c0014f5a:	53                   	push   ebx
c0014f5b:	83 ec 10             	sub    esp,0x10
c0014f5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014f62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014f65:	83 f8 02             	cmp    eax,0x2
c0014f68:	77 10                	ja     c0014f7a <SysWrite(regs*)+0x22>
c0014f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f72:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014f78:	eb 0e                	jmp    c0014f88 <SysWrite(regs*)+0x30>
c0014f7a:	83 ec 0c             	sub    esp,0xc
c0014f7d:	50                   	push   eax
c0014f7e:	e8 66 e1 ff ff       	call   c00130e9 <KeGetFileFromDescriptor(int)>
c0014f83:	83 c4 10             	add    esp,0x10
c0014f86:	89 c1                	mov    ecx,eax
c0014f88:	83 c8 ff             	or     eax,0xffffffff
c0014f8b:	85 c9                	test   ecx,ecx
c0014f8d:	89 c2                	mov    edx,eax
c0014f8f:	74 28                	je     c0014fb9 <SysWrite(regs*)+0x61>
c0014f91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f99:	83 ec 0c             	sub    esp,0xc
c0014f9c:	31 ff                	xor    edi,edi
c0014f9e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014fa2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014fa4:	52                   	push   edx
c0014fa5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014fa8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014fab:	57                   	push   edi
c0014fac:	56                   	push   esi
c0014fad:	51                   	push   ecx
c0014fae:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014fb5:	83 c4 20             	add    esp,0x20
c0014fb8:	99                   	cdq    
c0014fb9:	83 c4 10             	add    esp,0x10
c0014fbc:	5b                   	pop    ebx
c0014fbd:	5e                   	pop    esi
c0014fbe:	5f                   	pop    edi
c0014fbf:	c3                   	ret    

c0014fc0 <SysWsbe(regs*)>:
c0014fc0:	55                   	push   ebp
c0014fc1:	57                   	push   edi
c0014fc2:	56                   	push   esi
c0014fc3:	53                   	push   ebx
c0014fc4:	83 ec 3c             	sub    esp,0x3c
c0014fc7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014fcb:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014fd2:	75 2d                	jne    c0015001 <SysWsbe(regs*)+0x41>
c0014fd4:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014fdb:	75 24                	jne    c0015001 <SysWsbe(regs*)+0x41>
c0014fdd:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014fe4:	75 1b                	jne    c0015001 <SysWsbe(regs*)+0x41>
c0014fe6:	6a 01                	push   0x1
c0014fe8:	6a 00                	push   0x0
c0014fea:	68 c1 9e 00 c0       	push   0xc0009ec1
c0014fef:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0014ff5:	e8 aa 1a 00 00       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	31 c0                	xor    eax,eax
c0014fff:	eb 52                	jmp    c0015053 <SysWsbe(regs*)+0x93>
c0015001:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015005:	be 30 4a 02 c0       	mov    esi,0xc0024a30
c001500a:	b9 0b 00 00 00       	mov    ecx,0xb
c001500f:	fc                   	cld    
c0015010:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015012:	83 ec 0c             	sub    esp,0xc
c0015015:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001501e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015021:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015027:	8b 06                	mov    eax,DWORD PTR [esi]
c0015029:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001502c:	57                   	push   edi
c001502d:	e8 4e b5 fe ff       	call   c0000580 <strlen>
c0015032:	5a                   	pop    edx
c0015033:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015037:	52                   	push   edx
c0015038:	31 d2                	xor    edx,edx
c001503a:	57                   	push   edi
c001503b:	52                   	push   edx
c001503c:	50                   	push   eax
c001503d:	56                   	push   esi
c001503e:	ff d5                	call   ebp
c0015040:	83 c4 14             	add    esp,0x14
c0015043:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015046:	e8 cd 24 00 00       	call   c0017518 <terminateTask(int)>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015053:	83 c4 3c             	add    esp,0x3c
c0015056:	31 d2                	xor    edx,edx
c0015058:	5b                   	pop    ebx
c0015059:	5e                   	pop    esi
c001505a:	5f                   	pop    edi
c001505b:	5d                   	pop    ebp
c001505c:	c3                   	ret    

c001505d <SysYield(regs*)>:
c001505d:	83 ec 0c             	sub    esp,0xc
c0015060:	fa                   	cli    
c0015061:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015067:	e8 b8 1c 00 00       	call   c0016d24 <schedule()>
c001506c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0015073:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001507a:	75 01                	jne    c001507d <SysYield(regs*)+0x20>
c001507c:	fb                   	sti    
c001507d:	31 c0                	xor    eax,eax
c001507f:	31 d2                	xor    edx,edx
c0015081:	83 c4 0c             	add    esp,0xc
c0015084:	c3                   	ret    
c0015085:	66 90                	xchg   ax,ax
c0015087:	90                   	nop

c0015088 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015088:	55                   	push   ebp
c0015089:	57                   	push   edi
c001508a:	56                   	push   esi
c001508b:	53                   	push   ebx
c001508c:	83 ec 2c             	sub    esp,0x2c
c001508f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015097:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001509b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001509f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150a3:	83 ec 08             	sub    esp,0x8
c00150a6:	50                   	push   eax
c00150a7:	68 5c 4a 02 c0       	push   0xc0024a5c
c00150ac:	e8 9d 1e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00150b1:	83 c4 10             	add    esp,0x10
c00150b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150b8:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00150bb:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00150be:	89 c1                	mov    ecx,eax
c00150c0:	80 f5 00             	xor    ch,0x0
c00150c3:	89 cf                	mov    edi,ecx
c00150c5:	89 d0                	mov    eax,edx
c00150c7:	80 f4 00             	xor    ah,0x0
c00150ca:	89 c5                	mov    ebp,eax
c00150cc:	89 e8                	mov    eax,ebp
c00150ce:	09 f8                	or     eax,edi
c00150d0:	74 22                	je     c00150f4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x6c>
c00150d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150d6:	8b 78 63             	mov    edi,DWORD PTR [eax+0x63]
c00150d9:	8b 68 67             	mov    ebp,DWORD PTR [eax+0x67]
c00150dc:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00150e1:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00150e7:	29 c7                	sub    edi,eax
c00150e9:	19 d5                	sbb    ebp,edx
c00150eb:	89 f8                	mov    eax,edi
c00150ed:	89 ea                	mov    edx,ebp
c00150ef:	eb 0f                	jmp    c0015100 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x78>
c00150f1:	8d 76 00             	lea    esi,[esi+0x0]
c00150f4:	b8 00 00 00 00       	mov    eax,0x0
c00150f9:	ba 00 00 00 00       	mov    edx,0x0
c00150fe:	66 90                	xchg   ax,ax
c0015100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0015108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001510c:	80 f4 00             	xor    ah,0x0
c001510f:	89 c3                	mov    ebx,eax
c0015111:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015115:	80 f4 00             	xor    ah,0x0
c0015118:	89 c6                	mov    esi,eax
c001511a:	89 f0                	mov    eax,esi
c001511c:	09 d8                	or     eax,ebx
c001511e:	74 1c                	je     c001513c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xb4>
c0015120:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c0015126:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c001512c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015134:	01 c8                	add    eax,ecx
c0015136:	11 da                	adc    edx,ebx
c0015138:	eb 0e                	jmp    c0015148 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xc0>
c001513a:	66 90                	xchg   ax,ax
c001513c:	b8 00 00 00 00       	mov    eax,0x0
c0015141:	ba 00 00 00 00       	mov    edx,0x0
c0015146:	66 90                	xchg   ax,ax
c0015148:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001514c:	89 41 63             	mov    DWORD PTR [ecx+0x63],eax
c001514f:	89 51 67             	mov    DWORD PTR [ecx+0x67],edx
c0015152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015156:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c0015159:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c001515c:	83 ec 08             	sub    esp,0x8
c001515f:	50                   	push   eax
c0015160:	68 70 4a 02 c0       	push   0xc0024a70
c0015165:	e8 e4 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015171:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015175:	83 c4 2c             	add    esp,0x2c
c0015178:	5b                   	pop    ebx
c0015179:	5e                   	pop    esi
c001517a:	5f                   	pop    edi
c001517b:	5d                   	pop    ebp
c001517c:	c3                   	ret    
c001517d:	8d 76 00             	lea    esi,[esi+0x0]

c0015180 <KeCheckAlarm(ThreadControlBlock*)>:
c0015180:	56                   	push   esi
c0015181:	53                   	push   ebx
c0015182:	83 ec 04             	sub    esp,0x4
c0015185:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001518a:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015190:	89 c1                	mov    ecx,eax
c0015192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015196:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c0015199:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c001519c:	83 ec 04             	sub    esp,0x4
c001519f:	51                   	push   ecx
c00151a0:	50                   	push   eax
c00151a1:	68 7c 4a 02 c0       	push   0xc0024a7c
c00151a6:	e8 a3 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151b2:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00151b5:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00151b8:	89 c1                	mov    ecx,eax
c00151ba:	80 f5 00             	xor    ch,0x0
c00151bd:	89 cb                	mov    ebx,ecx
c00151bf:	89 d0                	mov    eax,edx
c00151c1:	80 f4 00             	xor    ah,0x0
c00151c4:	89 c6                	mov    esi,eax
c00151c6:	89 f0                	mov    eax,esi
c00151c8:	09 d8                	or     eax,ebx
c00151ca:	74 5c                	je     c0015228 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00151cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151d0:	8b 48 63             	mov    ecx,DWORD PTR [eax+0x63]
c00151d3:	8b 58 67             	mov    ebx,DWORD PTR [eax+0x67]
c00151d6:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00151db:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00151e1:	39 c8                	cmp    eax,ecx
c00151e3:	89 d0                	mov    eax,edx
c00151e5:	19 d8                	sbb    eax,ebx
c00151e7:	72 3f                	jb     c0015228 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00151e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151ed:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00151f4:	c7 40 67 00 00 00 00 	mov    DWORD PTR [eax+0x67],0x0
c00151fb:	83 ec 0c             	sub    esp,0xc
c00151fe:	68 98 4a 02 c0       	push   0xc0024a98
c0015203:	e8 46 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015208:	83 c4 10             	add    esp,0x10
c001520b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001520f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015212:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015218:	83 ec 08             	sub    esp,0x8
c001521b:	6a 0e                	push   0xe
c001521d:	50                   	push   eax
c001521e:	e8 48 bd ff ff       	call   c0010f6b <KeRaiseSignal(SigHandlerBlock*, int)>
c0015223:	83 c4 10             	add    esp,0x10
c0015226:	66 90                	xchg   ax,ax
c0015228:	90                   	nop
c0015229:	83 c4 04             	add    esp,0x4
c001522c:	5b                   	pop    ebx
c001522d:	5e                   	pop    esi
c001522e:	c3                   	ret    

c001522f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001522f:	55                   	push   ebp
c0015230:	57                   	push   edi
c0015231:	56                   	push   esi
c0015232:	53                   	push   ebx
c0015233:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015239:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015244:	74 3b                	je     c0015281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015246:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001524e:	74 31                	je     c0015281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015250:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015258:	75 27                	jne    c0015281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001525a:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015261:	05 00 10 00 00       	add    eax,0x1000
c0015266:	89 c2                	mov    edx,eax
c0015268:	25 00 f0 ff ff       	and    eax,0xfffff000
c001526d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015274:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001527a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015281:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	6a 01                	push   0x1
c001528d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015293:	e8 bd df ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c0015298:	83 c4 10             	add    esp,0x10
c001529b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00152a1:	89 c3                	mov    ebx,eax
c00152a3:	0f 86 27 01 00 00    	jbe    c00153d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00152a9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00152b1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152b8:	c1 ee 0c             	shr    esi,0xc
c00152bb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00152bf:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00152c6:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00152cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152d1:	29 ef                	sub    edi,ebp
c00152d3:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00152d7:	0f 83 fa 00 00 00    	jae    c00153d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00152dd:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00152e3:	b8 00 10 00 00       	mov    eax,0x1000
c00152e8:	0f 47 f8             	cmova  edi,eax
c00152eb:	83 ec 0c             	sub    esp,0xc
c00152ee:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00152f5:	31 d2                	xor    edx,edx
c00152f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00152f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00152fd:	50                   	push   eax
c00152fe:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015302:	56                   	push   esi
c0015303:	52                   	push   edx
c0015304:	57                   	push   edi
c0015305:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001530c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001530f:	83 c4 20             	add    esp,0x20
c0015312:	85 c0                	test   eax,eax
c0015314:	75 06                	jne    c001531c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015316:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001531a:	74 13                	je     c001532f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001531c:	83 ec 0c             	sub    esp,0xc
c001531f:	53                   	push   ebx
c0015320:	e8 2e e2 ff ff       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c0015325:	83 c4 10             	add    esp,0x10
c0015328:	31 c0                	xor    eax,eax
c001532a:	e9 80 01 00 00       	jmp    c00154af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c001532f:	fa                   	cli    
c0015330:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015336:	e8 b5 ac ff ff       	call   c000fff0 <Phys::allocatePage()>
c001533b:	6a 07                	push   0x7
c001533d:	53                   	push   ebx
c001533e:	50                   	push   eax
c001533f:	89 c7                	mov    edi,eax
c0015341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015346:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015349:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001534f:	e8 da e5 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015354:	83 c4 0c             	add    esp,0xc
c0015357:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001535e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015364:	6a 00                	push   0x0
c0015366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001536e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015374:	e8 21 e4 ff ff       	call   c001379a <VAS::mapOtherVASIn(bool, VAS*)>
c0015379:	58                   	pop    eax
c001537a:	5a                   	pop    edx
c001537b:	68 07 0c 00 00       	push   0xc07
c0015380:	55                   	push   ebp
c0015381:	57                   	push   edi
c0015382:	89 df                	mov    edi,ebx
c0015384:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001538b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015391:	6a 00                	push   0x0
c0015393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015398:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001539b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153a1:	e8 dc e7 ff ff       	call   c0013b82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153a6:	b9 00 10 00 00       	mov    ecx,0x1000
c00153ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153ad:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00153b4:	83 c4 20             	add    esp,0x20
c00153b7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00153be:	75 01                	jne    c00153c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00153c0:	fb                   	sti    
c00153c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00153c5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00153cb:	e9 ef fe ff ff       	jmp    c00152bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00153d0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00153d7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00153de:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00153e4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00153ea:	0f 86 b1 00 00 00    	jbe    c00154a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00153f0:	fa                   	cli    
c00153f1:	51                   	push   ecx
c00153f2:	31 ff                	xor    edi,edi
c00153f4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00153fb:	c1 ee 0c             	shr    esi,0xc
c00153fe:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015404:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001540a:	6a 00                	push   0x0
c001540c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015411:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015414:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001541a:	e8 7b e3 ff ff       	call   c001379a <VAS::mapOtherVASIn(bool, VAS*)>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	e8 c9 ab ff ff       	call   c000fff0 <Phys::allocatePage()>
c0015427:	47                   	inc    edi
c0015428:	6a 07                	push   0x7
c001542a:	53                   	push   ebx
c001542b:	50                   	push   eax
c001542c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015430:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015436:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015439:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001543f:	e8 ea e4 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015444:	58                   	pop    eax
c0015445:	5a                   	pop    edx
c0015446:	68 07 0c 00 00       	push   0xc07
c001544b:	55                   	push   ebp
c001544c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015452:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015456:	50                   	push   eax
c0015457:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001545e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015464:	6a 00                	push   0x0
c0015466:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001546b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001546e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015474:	e8 09 e7 ff ff       	call   c0013b82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015479:	83 c4 1c             	add    esp,0x1c
c001547c:	68 00 10 00 00       	push   0x1000
c0015481:	6a 00                	push   0x0
c0015483:	53                   	push   ebx
c0015484:	e8 67 b0 fe ff       	call   c00004f0 <memset>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	39 fe                	cmp    esi,edi
c001548e:	77 92                	ja     c0015422 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0015490:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0015497:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001549e:	75 01                	jne    c00154a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00154a0:	fb                   	sti    
c00154a1:	83 ec 0c             	sub    esp,0xc
c00154a4:	53                   	push   ebx
c00154a5:	e8 a9 e0 ff ff       	call   c0013553 <Virt::freeKernelVirtualPages(unsigned long)>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	b0 01                	mov    al,0x1
c00154af:	81 c4 2c 10 00 00    	add    esp,0x102c
c00154b5:	5b                   	pop    ebx
c00154b6:	5e                   	pop    esi
c00154b7:	5f                   	pop    edi
c00154b8:	5d                   	pop    ebp
c00154b9:	c3                   	ret    

c00154ba <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00154ba:	55                   	push   ebp
c00154bb:	57                   	push   edi
c00154bc:	56                   	push   esi
c00154bd:	53                   	push   ebx
c00154be:	83 ec 48             	sub    esp,0x48
c00154c1:	68 14 01 00 00       	push   0x114
c00154c6:	e8 e5 a5 ff ff       	call   c000fab0 <malloc>
c00154cb:	83 c4 0c             	add    esp,0xc
c00154ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00154d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00154d6:	89 c7                	mov    edi,eax
c00154d8:	50                   	push   eax
c00154d9:	e8 4e 2c ff ff       	call   c000812c <File::File(char const*, Process*)>
c00154de:	58                   	pop    eax
c00154df:	5a                   	pop    edx
c00154e0:	6a 01                	push   0x1
c00154e2:	57                   	push   edi
c00154e3:	e8 62 2c ff ff       	call   c000814a <File::open(FileOpenMode)>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	85 c0                	test   eax,eax
c00154ed:	0f 85 4c 01 00 00    	jne    c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00154f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00154fb:	83 ec 0c             	sub    esp,0xc
c00154fe:	6a 34                	push   0x34
c0015500:	e8 ab a5 ff ff       	call   c000fab0 <malloc>
c0015505:	89 c3                	mov    ebx,eax
c0015507:	58                   	pop    eax
c0015508:	8b 07                	mov    eax,DWORD PTR [edi]
c001550a:	8d 74 24 38          	lea    esi,[esp+0x38]
c001550e:	56                   	push   esi
c001550f:	53                   	push   ebx
c0015510:	6a 00                	push   0x0
c0015512:	6a 34                	push   0x34
c0015514:	57                   	push   edi
c0015515:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015518:	83 c4 20             	add    esp,0x20
c001551b:	85 c0                	test   eax,eax
c001551d:	0f 85 1c 01 00 00    	jne    c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015523:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015529:	0f 85 10 01 00 00    	jne    c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001552f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015532:	85 c0                	test   eax,eax
c0015534:	0f 84 05 01 00 00    	je     c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001553a:	31 d2                	xor    edx,edx
c001553c:	55                   	push   ebp
c001553d:	52                   	push   edx
c001553e:	50                   	push   eax
c001553f:	57                   	push   edi
c0015540:	e8 c3 2c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015545:	83 c4 10             	add    esp,0x10
c0015548:	85 c0                	test   eax,eax
c001554a:	0f 85 ef 00 00 00    	jne    c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015550:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001555a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001555e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015562:	0f af c2             	imul   eax,edx
c0015565:	50                   	push   eax
c0015566:	e8 45 a5 ff ff       	call   c000fab0 <malloc>
c001556b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001556d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015570:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015574:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015578:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001557c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015580:	0f af c2             	imul   eax,edx
c0015583:	99                   	cdq    
c0015584:	52                   	push   edx
c0015585:	50                   	push   eax
c0015586:	57                   	push   edi
c0015587:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001558a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001558d:	83 c4 20             	add    esp,0x20
c0015590:	85 c0                	test   eax,eax
c0015592:	0f 84 a7 00 00 00    	je     c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015598:	31 d2                	xor    edx,edx
c001559a:	51                   	push   ecx
c001559b:	52                   	push   edx
c001559c:	50                   	push   eax
c001559d:	57                   	push   edi
c001559e:	e8 65 2c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	85 c0                	test   eax,eax
c00155a8:	0f 85 91 00 00 00    	jne    c001563f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00155ae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00155b2:	83 ec 0c             	sub    esp,0xc
c00155b5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00155b9:	0f af c2             	imul   eax,edx
c00155bc:	50                   	push   eax
c00155bd:	e8 ee a4 ff ff       	call   c000fab0 <malloc>
c00155c2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00155c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00155c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00155cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155cf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00155d3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00155d7:	0f af c2             	imul   eax,edx
c00155da:	99                   	cdq    
c00155db:	52                   	push   edx
c00155dc:	50                   	push   eax
c00155dd:	57                   	push   edi
c00155de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155e1:	83 c4 20             	add    esp,0x20
c00155e4:	31 c9                	xor    ecx,ecx
c00155e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00155ee:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00155f2:	0f b7 e9             	movzx  ebp,cx
c00155f5:	0f 83 86 00 00 00    	jae    c0015681 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00155fb:	c1 e5 05             	shl    ebp,0x5
c00155fe:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0015602:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0015606:	75 73                	jne    c001567b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0015608:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001560c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560f:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015612:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015616:	52                   	push   edx
c0015617:	31 d2                	xor    edx,edx
c0015619:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001561c:	52                   	push   edx
c001561d:	50                   	push   eax
c001561e:	57                   	push   edi
c001561f:	e8 e4 2b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001562b:	85 c0                	test   eax,eax
c001562d:	74 17                	je     c0015646 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001562f:	83 ec 0c             	sub    esp,0xc
c0015632:	68 a9 4a 02 c0       	push   0xc0024aa9
c0015637:	e8 12 19 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001563c:	83 c4 10             	add    esp,0x10
c001563f:	31 c0                	xor    eax,eax
c0015641:	e9 8b 00 00 00       	jmp    c00156d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0015646:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001564a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001564d:	83 ec 0c             	sub    esp,0xc
c0015650:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015653:	50                   	push   eax
c0015654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015658:	56                   	push   esi
c0015659:	57                   	push   edi
c001565a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001565e:	e8 cc fb ff ff       	call   c001522f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015663:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015667:	83 c4 20             	add    esp,0x20
c001566a:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001566e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015672:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015677:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001567b:	41                   	inc    ecx
c001567c:	e9 6d ff ff ff       	jmp    c00155ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0015681:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015685:	83 ec 0c             	sub    esp,0xc
c0015688:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001568c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015690:	89 8a ae 05 00 00    	mov    DWORD PTR [edx+0x5ae],ecx
c0015696:	8b 92 b2 05 00 00    	mov    edx,DWORD PTR [edx+0x5b2]
c001569c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00156a1:	05 00 10 00 00       	add    eax,0x1000
c00156a6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00156a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156ad:	e8 0e a4 ff ff       	call   c000fac0 <free>
c00156b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156b5:	e8 06 a4 ff ff       	call   c000fac0 <free>
c00156ba:	58                   	pop    eax
c00156bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156bf:	e8 fc a3 ff ff       	call   c000fac0 <free>
c00156c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156c7:	e8 dc 2a ff ff       	call   c00081a8 <File::close()>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	b0 01                	mov    al,0x1
c00156d1:	83 c4 3c             	add    esp,0x3c
c00156d4:	5b                   	pop    ebx
c00156d5:	5e                   	pop    esi
c00156d6:	5f                   	pop    edi
c00156d7:	5d                   	pop    ebp
c00156d8:	c3                   	ret    

c00156d9 <Thr::runtimeReferenceHelper()>:
c00156d9:	83 ec 18             	sub    esp,0x18
c00156dc:	68 b1 4a 02 c0       	push   0xc0024ab1
c00156e1:	e8 68 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00156e6:	fa                   	cli    
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	eb fe                	jmp    c00156ea <Thr::runtimeReferenceHelper()+0x11>

c00156ec <Thr::getAddressOfKernelSymbol(char const*)>:
c00156ec:	57                   	push   edi
c00156ed:	56                   	push   esi
c00156ee:	53                   	push   ebx
c00156ef:	31 db                	xor    ebx,ebx
c00156f1:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c00156f7:	7e 3c                	jle    c0015735 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00156f9:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c0015700:	31 ff                	xor    edi,edi
c0015702:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c0015709:	7e 27                	jle    c0015732 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001570b:	50                   	push   eax
c001570c:	50                   	push   eax
c001570d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015711:	8b 06                	mov    eax,DWORD PTR [esi]
c0015713:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c001571a:	50                   	push   eax
c001571b:	e8 60 b0 fe ff       	call   c0000780 <strcmp>
c0015720:	83 c4 10             	add    esp,0x10
c0015723:	85 c0                	test   eax,eax
c0015725:	75 05                	jne    c001572c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015727:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001572a:	eb 0b                	jmp    c0015737 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001572c:	83 c6 10             	add    esi,0x10
c001572f:	47                   	inc    edi
c0015730:	eb d0                	jmp    c0015702 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015732:	43                   	inc    ebx
c0015733:	eb bc                	jmp    c00156f1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015735:	31 c0                	xor    eax,eax
c0015737:	5b                   	pop    ebx
c0015738:	5e                   	pop    esi
c0015739:	5f                   	pop    edi
c001573a:	c3                   	ret    

c001573b <Thr::loadKernelSymbolTable(char const*)>:
c001573b:	55                   	push   ebp
c001573c:	57                   	push   edi
c001573d:	56                   	push   esi
c001573e:	53                   	push   ebx
c001573f:	83 ec 68             	sub    esp,0x68
c0015742:	68 14 01 00 00       	push   0x114
c0015747:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c001574d:	e8 5e a3 ff ff       	call   c000fab0 <malloc>
c0015752:	83 c4 0c             	add    esp,0xc
c0015755:	56                   	push   esi
c0015756:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001575a:	89 c3                	mov    ebx,eax
c001575c:	50                   	push   eax
c001575d:	e8 ca 29 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015762:	5e                   	pop    esi
c0015763:	5f                   	pop    edi
c0015764:	6a 01                	push   0x1
c0015766:	53                   	push   ebx
c0015767:	e8 de 29 ff ff       	call   c000814a <File::open(FileOpenMode)>
c001576c:	83 c4 10             	add    esp,0x10
c001576f:	85 c0                	test   eax,eax
c0015771:	74 0a                	je     c001577d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015773:	83 ec 0c             	sub    esp,0xc
c0015776:	68 d3 4a 02 c0       	push   0xc0024ad3
c001577b:	eb 34                	jmp    c00157b1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001577d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	6a 34                	push   0x34
c001578a:	e8 21 a3 ff ff       	call   c000fab0 <malloc>
c001578f:	59                   	pop    ecx
c0015790:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015794:	89 c7                	mov    edi,eax
c0015796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015798:	56                   	push   esi
c0015799:	57                   	push   edi
c001579a:	6a 00                	push   0x0
c001579c:	6a 34                	push   0x34
c001579e:	53                   	push   ebx
c001579f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157a2:	83 c4 20             	add    esp,0x20
c00157a5:	85 c0                	test   eax,eax
c00157a7:	74 17                	je     c00157c0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00157a9:	83 ec 0c             	sub    esp,0xc
c00157ac:	68 ea 4a 02 c0       	push   0xc0024aea
c00157b1:	e8 40 a6 ff ff       	call   c000fdf6 <KePanic(char const*)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	31 c0                	xor    eax,eax
c00157bb:	e9 31 02 00 00       	jmp    c00159f1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00157c0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00157c6:	75 e1                	jne    c00157a9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00157c8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00157cb:	85 c0                	test   eax,eax
c00157cd:	74 da                	je     c00157a9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00157cf:	52                   	push   edx
c00157d0:	31 d2                	xor    edx,edx
c00157d2:	52                   	push   edx
c00157d3:	50                   	push   eax
c00157d4:	53                   	push   ebx
c00157d5:	e8 2e 2a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	85 c0                	test   eax,eax
c00157df:	75 c8                	jne    c00157a9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00157e1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157e5:	83 ec 0c             	sub    esp,0xc
c00157e8:	31 ed                	xor    ebp,ebp
c00157ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157ee:	0f af c2             	imul   eax,edx
c00157f1:	50                   	push   eax
c00157f2:	e8 b9 a2 ff ff       	call   c000fab0 <malloc>
c00157f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00157fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015804:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015808:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001580c:	0f af c2             	imul   eax,edx
c001580f:	99                   	cdq    
c0015810:	52                   	push   edx
c0015811:	50                   	push   eax
c0015812:	53                   	push   ebx
c0015813:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015816:	83 c4 20             	add    esp,0x20
c0015819:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015821:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015829:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015831:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015839:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001583d:	0f b7 f5             	movzx  esi,bp
c0015840:	0f 83 a7 00 00 00    	jae    c00158ed <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015846:	6b f6 28             	imul   esi,esi,0x28
c0015849:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001584d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015850:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015854:	50                   	push   eax
c0015855:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015859:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001585d:	8b 16                	mov    edx,DWORD PTR [esi]
c001585f:	6b c0 28             	imul   eax,eax,0x28
c0015862:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015866:	89 d0                	mov    eax,edx
c0015868:	31 d2                	xor    edx,edx
c001586a:	52                   	push   edx
c001586b:	50                   	push   eax
c001586c:	53                   	push   ebx
c001586d:	e8 96 29 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015872:	83 c4 0c             	add    esp,0xc
c0015875:	6a 20                	push   0x20
c0015877:	6a 00                	push   0x0
c0015879:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001587d:	52                   	push   edx
c001587e:	e8 6d ac fe ff       	call   c00004f0 <memset>
c0015883:	58                   	pop    eax
c0015884:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015886:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001588a:	51                   	push   ecx
c001588b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001588f:	52                   	push   edx
c0015890:	6a 00                	push   0x0
c0015892:	6a 1f                	push   0x1f
c0015894:	53                   	push   ebx
c0015895:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015898:	83 c4 18             	add    esp,0x18
c001589b:	68 01 4b 02 c0       	push   0xc0024b01
c00158a0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00158a4:	52                   	push   edx
c00158a5:	e8 d6 ae fe ff       	call   c0000780 <strcmp>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	85 c0                	test   eax,eax
c00158af:	75 0f                	jne    c00158c0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00158b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00158b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158c0:	50                   	push   eax
c00158c1:	50                   	push   eax
c00158c2:	68 09 4b 02 c0       	push   0xc0024b09
c00158c7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00158cb:	50                   	push   eax
c00158cc:	e8 af ae fe ff       	call   c0000780 <strcmp>
c00158d1:	83 c4 10             	add    esp,0x10
c00158d4:	85 c0                	test   eax,eax
c00158d6:	75 0f                	jne    c00158e7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00158d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00158db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158e7:	45                   	inc    ebp
c00158e8:	e9 4c ff ff ff       	jmp    c0015839 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00158ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158f2:	75 10                	jne    c0015904 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	68 11 4b 02 c0       	push   0xc0024b11
c00158fc:	e8 f5 a4 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015909:	75 10                	jne    c001591b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001590b:	83 ec 0c             	sub    esp,0xc
c001590e:	68 11 4b 02 c0       	push   0xc0024b11
c0015913:	e8 de a4 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0015918:	83 c4 10             	add    esp,0x10
c001591b:	50                   	push   eax
c001591c:	31 d2                	xor    edx,edx
c001591e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015922:	52                   	push   edx
c0015923:	50                   	push   eax
c0015924:	53                   	push   ebx
c0015925:	e8 de 28 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001592a:	5a                   	pop    edx
c001592b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001592f:	e8 7c a1 ff ff       	call   c000fab0 <malloc>
c0015934:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015938:	31 c9                	xor    ecx,ecx
c001593a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001593e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015940:	5e                   	pop    esi
c0015941:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015945:	55                   	push   ebp
c0015946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001594a:	51                   	push   ecx
c001594b:	52                   	push   edx
c001594c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015950:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015954:	53                   	push   ebx
c0015955:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015958:	83 c4 14             	add    esp,0x14
c001595b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001595f:	e8 4c a1 ff ff       	call   c000fab0 <malloc>
c0015964:	89 c6                	mov    esi,eax
c0015966:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015968:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001596b:	56                   	push   esi
c001596c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015970:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015974:	51                   	push   ecx
c0015975:	52                   	push   edx
c0015976:	53                   	push   ebx
c0015977:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001597a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001597e:	83 c4 1c             	add    esp,0x1c
c0015981:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015987:	c1 e8 04             	shr    eax,0x4
c001598a:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015995:	31 d2                	xor    edx,edx
c0015997:	52                   	push   edx
c0015998:	50                   	push   eax
c0015999:	53                   	push   ebx
c001599a:	e8 69 28 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001599f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00159a1:	31 d2                	xor    edx,edx
c00159a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00159a6:	56                   	push   esi
c00159a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00159ab:	52                   	push   edx
c00159ac:	50                   	push   eax
c00159ad:	53                   	push   ebx
c00159ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159b1:	83 c4 14             	add    esp,0x14
c00159b4:	53                   	push   ebx
c00159b5:	e8 ee 27 ff ff       	call   c00081a8 <File::close()>
c00159ba:	5d                   	pop    ebp
c00159bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00159bf:	e8 fc a0 ff ff       	call   c000fac0 <free>
c00159c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00159c7:	e8 f4 a0 ff ff       	call   c000fac0 <free>
c00159cc:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c00159d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c00159df:	8d 50 01             	lea    edx,[eax+0x1]
c00159e2:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c00159e9:	b0 01                	mov    al,0x1
c00159eb:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c00159f1:	83 c4 5c             	add    esp,0x5c
c00159f4:	5b                   	pop    ebx
c00159f5:	5e                   	pop    esi
c00159f6:	5f                   	pop    edi
c00159f7:	5d                   	pop    ebp
c00159f8:	c3                   	ret    

c00159f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00159f9:	55                   	push   ebp
c00159fa:	57                   	push   edi
c00159fb:	56                   	push   esi
c00159fc:	53                   	push   ebx
c00159fd:	81 ec 68 03 00 00    	sub    esp,0x368
c0015a03:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015a0a:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015a10:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015a14:	68 14 01 00 00       	push   0x114
c0015a19:	e8 92 a0 ff ff       	call   c000fab0 <malloc>
c0015a1e:	83 c4 0c             	add    esp,0xc
c0015a21:	56                   	push   esi
c0015a22:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015a29:	50                   	push   eax
c0015a2a:	89 c3                	mov    ebx,eax
c0015a2c:	e8 fb 26 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015a31:	5f                   	pop    edi
c0015a32:	5d                   	pop    ebp
c0015a33:	6a 01                	push   0x1
c0015a35:	53                   	push   ebx
c0015a36:	e8 0f 27 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0015a3b:	83 c4 10             	add    esp,0x10
c0015a3e:	85 c0                	test   eax,eax
c0015a40:	0f 85 b3 06 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015a46:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015a4e:	83 ec 0c             	sub    esp,0xc
c0015a51:	6a 34                	push   0x34
c0015a53:	e8 58 a0 ff ff       	call   c000fab0 <malloc>
c0015a58:	5e                   	pop    esi
c0015a59:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015a5d:	89 c5                	mov    ebp,eax
c0015a5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a61:	56                   	push   esi
c0015a62:	55                   	push   ebp
c0015a63:	6a 00                	push   0x0
c0015a65:	6a 34                	push   0x34
c0015a67:	53                   	push   ebx
c0015a68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a6b:	83 c4 20             	add    esp,0x20
c0015a6e:	85 c0                	test   eax,eax
c0015a70:	0f 85 83 06 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015a76:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015a7d:	0f 85 76 06 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015a83:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a86:	85 c0                	test   eax,eax
c0015a88:	0f 84 6b 06 00 00    	je     c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015a8e:	31 d2                	xor    edx,edx
c0015a90:	51                   	push   ecx
c0015a91:	52                   	push   edx
c0015a92:	50                   	push   eax
c0015a93:	53                   	push   ebx
c0015a94:	e8 6f 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015a99:	83 c4 10             	add    esp,0x10
c0015a9c:	85 c0                	test   eax,eax
c0015a9e:	0f 85 55 06 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015aa4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015aa7:	83 ec 0c             	sub    esp,0xc
c0015aaa:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015aae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ab2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015ab6:	0f af c2             	imul   eax,edx
c0015ab9:	50                   	push   eax
c0015aba:	e8 f1 9f ff ff       	call   c000fab0 <malloc>
c0015abf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ac1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ac4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015acc:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015ad0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015ad4:	0f af c2             	imul   eax,edx
c0015ad7:	99                   	cdq    
c0015ad8:	52                   	push   edx
c0015ad9:	50                   	push   eax
c0015ada:	53                   	push   ebx
c0015adb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ade:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0015ae1:	83 c4 20             	add    esp,0x20
c0015ae4:	85 c0                	test   eax,eax
c0015ae6:	0f 84 0d 06 00 00    	je     c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015aec:	52                   	push   edx
c0015aed:	31 d2                	xor    edx,edx
c0015aef:	52                   	push   edx
c0015af0:	50                   	push   eax
c0015af1:	53                   	push   ebx
c0015af2:	e8 11 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	85 c0                	test   eax,eax
c0015afc:	0f 85 f7 05 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015b02:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015b0d:	0f af c2             	imul   eax,edx
c0015b10:	50                   	push   eax
c0015b11:	e8 9a 9f ff ff       	call   c000fab0 <malloc>
c0015b16:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b18:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015b23:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015b27:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015b2b:	0f af c2             	imul   eax,edx
c0015b2e:	99                   	cdq    
c0015b2f:	52                   	push   edx
c0015b30:	50                   	push   eax
c0015b31:	53                   	push   ebx
c0015b32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b35:	83 c4 20             	add    esp,0x20
c0015b38:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015b3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b41:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015b45:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015b49:	73 78                	jae    c0015bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015b4b:	c1 e7 05             	shl    edi,0x5
c0015b4e:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015b52:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015b55:	75 63                	jne    c0015bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015b57:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015b5a:	31 d2                	xor    edx,edx
c0015b5c:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b63:	50                   	push   eax
c0015b64:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015b67:	52                   	push   edx
c0015b68:	50                   	push   eax
c0015b69:	53                   	push   ebx
c0015b6a:	e8 99 26 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	85 c0                	test   eax,eax
c0015b74:	0f 85 7f 05 00 00    	jne    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015b7a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015b81:	83 ec 0c             	sub    esp,0xc
c0015b84:	31 d2                	xor    edx,edx
c0015b86:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015b8a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b8c:	01 c6                	add    esi,eax
c0015b8e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b95:	50                   	push   eax
c0015b96:	56                   	push   esi
c0015b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9b:	52                   	push   edx
c0015b9c:	50                   	push   eax
c0015b9d:	53                   	push   ebx
c0015b9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ba1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ba4:	83 c4 1c             	add    esp,0x1c
c0015ba7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015baa:	50                   	push   eax
c0015bab:	6a 00                	push   0x0
c0015bad:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0015bb1:	56                   	push   esi
c0015bb2:	e8 39 a9 fe ff       	call   c00004f0 <memset>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	66 ff 04 24          	inc    WORD PTR [esp]
c0015bbe:	e9 7b ff ff ff       	jmp    c0015b3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015bc3:	50                   	push   eax
c0015bc4:	68 00 01 00 00       	push   0x100
c0015bc9:	6a 00                	push   0x0
c0015bcb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015bcf:	50                   	push   eax
c0015bd0:	e8 1b a9 fe ff       	call   c00004f0 <memset>
c0015bd5:	83 c4 0c             	add    esp,0xc
c0015bd8:	68 00 01 00 00       	push   0x100
c0015bdd:	6a 00                	push   0x0
c0015bdf:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015be6:	50                   	push   eax
c0015be7:	e8 04 a9 fe ff       	call   c00004f0 <memset>
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015bf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015bfd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c05:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015c0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c15:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c21:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015c25:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015c2a:	0f 83 16 01 00 00    	jae    c0015d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015c30:	6b ff 28             	imul   edi,edi,0x28
c0015c33:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015c37:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015c3a:	51                   	push   ecx
c0015c3b:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015c3f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0015c45:	6b d2 28             	imul   edx,edx,0x28
c0015c48:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015c4c:	31 d2                	xor    edx,edx
c0015c4e:	52                   	push   edx
c0015c4f:	50                   	push   eax
c0015c50:	53                   	push   ebx
c0015c51:	e8 b2 25 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015c56:	83 c4 0c             	add    esp,0xc
c0015c59:	6a 20                	push   0x20
c0015c5b:	6a 00                	push   0x0
c0015c5d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c64:	51                   	push   ecx
c0015c65:	e8 86 a8 fe ff       	call   c00004f0 <memset>
c0015c6a:	58                   	pop    eax
c0015c6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c6d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015c71:	52                   	push   edx
c0015c72:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015c79:	51                   	push   ecx
c0015c7a:	6a 00                	push   0x0
c0015c7c:	6a 1f                	push   0x1f
c0015c7e:	53                   	push   ebx
c0015c7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c82:	83 c4 1c             	add    esp,0x1c
c0015c85:	6a 09                	push   0x9
c0015c87:	68 2b 4b 02 c0       	push   0xc0024b2b
c0015c8c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c93:	51                   	push   ecx
c0015c94:	e8 e7 a6 fe ff       	call   c0000380 <memcmp>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	85 c0                	test   eax,eax
c0015c9e:	75 1a                	jne    c0015cba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015ca0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ca3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015ca6:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015caa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015cad:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015cb4:	89 d0                	mov    eax,edx
c0015cb6:	40                   	inc    eax
c0015cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cba:	52                   	push   edx
c0015cbb:	6a 09                	push   0x9
c0015cbd:	68 35 4b 02 c0       	push   0xc0024b35
c0015cc2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015cc9:	50                   	push   eax
c0015cca:	e8 b1 a6 fe ff       	call   c0000380 <memcmp>
c0015ccf:	83 c4 10             	add    esp,0x10
c0015cd2:	85 c0                	test   eax,eax
c0015cd4:	75 1a                	jne    c0015cf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015cd6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015cd9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015cdc:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015ce0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ce3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015cea:	89 c8                	mov    eax,ecx
c0015cec:	40                   	inc    eax
c0015ced:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cf0:	50                   	push   eax
c0015cf1:	50                   	push   eax
c0015cf2:	68 01 4b 02 c0       	push   0xc0024b01
c0015cf7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015cfe:	50                   	push   eax
c0015cff:	e8 7c aa fe ff       	call   c0000780 <strcmp>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	85 c0                	test   eax,eax
c0015d09:	75 0b                	jne    c0015d16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015d0b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015d0f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d16:	50                   	push   eax
c0015d17:	50                   	push   eax
c0015d18:	68 09 4b 02 c0       	push   0xc0024b09
c0015d1d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d24:	50                   	push   eax
c0015d25:	e8 56 aa fe ff       	call   c0000780 <strcmp>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	85 c0                	test   eax,eax
c0015d2f:	75 0b                	jne    c0015d3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015d31:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015d35:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d3c:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015d41:	e9 d7 fe ff ff       	jmp    c0015c1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015d46:	50                   	push   eax
c0015d47:	31 d2                	xor    edx,edx
c0015d49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d4d:	52                   	push   edx
c0015d4e:	50                   	push   eax
c0015d4f:	53                   	push   ebx
c0015d50:	e8 b3 24 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015d55:	58                   	pop    eax
c0015d56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d5a:	e8 51 9d ff ff       	call   c000fab0 <malloc>
c0015d5f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d61:	31 d2                	xor    edx,edx
c0015d63:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d67:	58                   	pop    eax
c0015d68:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015d6c:	56                   	push   esi
c0015d6d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d75:	52                   	push   edx
c0015d76:	50                   	push   eax
c0015d77:	53                   	push   ebx
c0015d78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d7b:	83 c4 14             	add    esp,0x14
c0015d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d82:	e8 29 9d ff ff       	call   c000fab0 <malloc>
c0015d87:	31 d2                	xor    edx,edx
c0015d89:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d8d:	83 c4 0c             	add    esp,0xc
c0015d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d94:	52                   	push   edx
c0015d95:	50                   	push   eax
c0015d96:	53                   	push   ebx
c0015d97:	e8 6c 24 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015d9c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d9e:	31 d2                	xor    edx,edx
c0015da0:	89 34 24             	mov    DWORD PTR [esp],esi
c0015da3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015da7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dab:	52                   	push   edx
c0015dac:	50                   	push   eax
c0015dad:	53                   	push   ebx
c0015dae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015db1:	83 c4 20             	add    esp,0x20
c0015db4:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015db9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015dc1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015dc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015dc9:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015dcc:	0f 84 2b 03 00 00    	je     c00160fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015dd2:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015dd9:	31 d2                	xor    edx,edx
c0015ddb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ddf:	c1 e8 03             	shr    eax,0x3
c0015de2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015de6:	51                   	push   ecx
c0015de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015deb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015def:	52                   	push   edx
c0015df0:	50                   	push   eax
c0015df1:	53                   	push   ebx
c0015df2:	e8 11 24 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015df7:	5e                   	pop    esi
c0015df8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015dfc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015e03:	e8 a8 9c ff ff       	call   c000fab0 <malloc>
c0015e08:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e0a:	31 d2                	xor    edx,edx
c0015e0c:	89 c7                	mov    edi,eax
c0015e0e:	58                   	pop    eax
c0015e0f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015e13:	50                   	push   eax
c0015e14:	57                   	push   edi
c0015e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e19:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015e20:	52                   	push   edx
c0015e21:	50                   	push   eax
c0015e22:	53                   	push   ebx
c0015e23:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e26:	83 c4 20             	add    esp,0x20
c0015e29:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e35:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015e39:	0f 8d a5 02 00 00    	jge    c00160e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015e3f:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e48:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015e4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e53:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0015e57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e5b:	c1 e8 08             	shr    eax,0x8
c0015e5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e62:	89 c2                	mov    edx,eax
c0015e64:	c1 e2 04             	shl    edx,0x4
c0015e67:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015e6b:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015e6e:	85 f6                	test   esi,esi
c0015e70:	0f 85 cf 00 00 00    	jne    c0015f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015e76:	83 ec 0c             	sub    esp,0xc
c0015e79:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e81:	03 02                	add    eax,DWORD PTR [edx]
c0015e83:	50                   	push   eax
c0015e84:	e8 63 f8 ff ff       	call   c00156ec <Thr::getAddressOfKernelSymbol(char const*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e90:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0015e95:	85 c0                	test   eax,eax
c0015e97:	89 c6                	mov    esi,eax
c0015e99:	0f 85 a6 00 00 00    	jne    c0015f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015e9f:	83 ec 0c             	sub    esp,0xc
c0015ea2:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eaa:	03 02                	add    eax,DWORD PTR [edx]
c0015eac:	50                   	push   eax
c0015ead:	e8 ce a9 ff ff       	call   c0010880 <KeResolveCompatibilitySymbol(char*)>
c0015eb2:	83 c4 10             	add    esp,0x10
c0015eb5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015eb9:	85 c0                	test   eax,eax
c0015ebb:	89 c6                	mov    esi,eax
c0015ebd:	0f 85 82 00 00 00    	jne    c0015f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015ec3:	50                   	push   eax
c0015ec4:	50                   	push   eax
c0015ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ec9:	03 02                	add    eax,DWORD PTR [edx]
c0015ecb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015ecf:	50                   	push   eax
c0015ed0:	68 3f 4b 02 c0       	push   0xc0024b3f
c0015ed5:	e8 74 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015eda:	58                   	pop    eax
c0015edb:	5a                   	pop    edx
c0015edc:	68 59 4b 02 c0       	push   0xc0024b59
c0015ee1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ee8:	51                   	push   ecx
c0015ee9:	e8 62 a7 fe ff       	call   c0000650 <strcpy>
c0015eee:	59                   	pop    ecx
c0015eef:	58                   	pop    eax
c0015ef0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ef4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ef8:	03 02                	add    eax,DWORD PTR [edx]
c0015efa:	50                   	push   eax
c0015efb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f02:	51                   	push   ecx
c0015f03:	e8 68 a9 fe ff       	call   c0000870 <strcat>
c0015f08:	58                   	pop    eax
c0015f09:	5a                   	pop    edx
c0015f0a:	68 f3 4b 02 c0       	push   0xc0024bf3
c0015f0f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f16:	51                   	push   ecx
c0015f17:	e8 54 a9 fe ff       	call   c0000870 <strcat>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015f24:	0f 84 77 01 00 00    	je     c00160a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015f2a:	83 ec 0c             	sub    esp,0xc
c0015f2d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f34:	51                   	push   ecx
c0015f35:	e8 bc 9e ff ff       	call   c000fdf6 <KePanic(char const*)>
c0015f3a:	83 c4 10             	add    esp,0x10
c0015f3d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015f41:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f45:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015f4a:	83 f8 01             	cmp    eax,0x1
c0015f4d:	0f 85 9b 00 00 00    	jne    c0015fee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f57:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015f5e:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015f62:	01 d0                	add    eax,edx
c0015f64:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015f6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f70:	0f 94 c0             	sete   al
c0015f73:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015f7b:	0f 94 c1             	sete   cl
c0015f7e:	09 c1                	or     ecx,eax
c0015f80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f84:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015f89:	0f b6 c9             	movzx  ecx,cl
c0015f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f8e:	74 41                	je     c0015fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015f90:	8d 14 06             	lea    edx,[esi+eax*1]
c0015f93:	85 c9                	test   ecx,ecx
c0015f95:	75 15                	jne    c0015fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015f97:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015f9b:	66 83 f8 0c          	cmp    ax,0xc
c0015f9f:	76 05                	jbe    c0015fa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015fa1:	b8 0c 00 00 00       	mov    eax,0xc
c0015fa6:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015faa:	76 37                	jbe    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015fac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015fb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015fb5:	0f 84 e6 00 00 00    	je     c00160a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	68 70 4b 02 c0       	push   0xc0024b70
c0015fc3:	e8 2e 9e ff ff       	call   c000fdf6 <KePanic(char const*)>
c0015fc8:	83 c4 10             	add    esp,0x10
c0015fcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fcf:	eb 12                	jmp    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015fd1:	01 c2                	add    edx,eax
c0015fd3:	85 c9                	test   ecx,ecx
c0015fd5:	75 0c                	jne    c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015fd7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015fdb:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015fdf:	77 02                	ja     c0015fe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015fe1:	01 f2                	add    edx,esi
c0015fe3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fe7:	89 10                	mov    DWORD PTR [eax],edx
c0015fe9:	e9 ed 00 00 00       	jmp    c00160db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015fee:	83 f8 02             	cmp    eax,0x2
c0015ff1:	0f 85 81 00 00 00    	jne    c0016078 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015ff7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015ffe:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0016002:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0016006:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001600e:	74 21                	je     c0016031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0016010:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0016018:	74 17                	je     c0016031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001601a:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001601e:	ba 0a 00 00 00       	mov    edx,0xa
c0016023:	83 f9 0e             	cmp    ecx,0xe
c0016026:	77 03                	ja     c001602b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0016028:	8d 51 fc             	lea    edx,[ecx-0x4]
c001602b:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001602f:	76 1f                	jbe    c0016050 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0016031:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0016036:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001603a:	74 65                	je     c00160a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001603c:	83 ec 0c             	sub    esp,0xc
c001603f:	68 8c 4b 02 c0       	push   0xc0024b8c
c0016044:	e8 ad 9d ff ff       	call   c000fdf6 <KePanic(char const*)>
c0016049:	83 c4 10             	add    esp,0x10
c001604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016050:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0016055:	8b 10                	mov    edx,DWORD PTR [eax]
c0016057:	74 15                	je     c001606e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0016059:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001605d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016064:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0016068:	01 d1                	add    ecx,edx
c001606a:	01 ce                	add    esi,ecx
c001606c:	eb 06                	jmp    c0016074 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001606e:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0016072:	01 d6                	add    esi,edx
c0016074:	89 30                	mov    DWORD PTR [eax],esi
c0016076:	eb 63                	jmp    c00160db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0016078:	56                   	push   esi
c0016079:	56                   	push   esi
c001607a:	50                   	push   eax
c001607b:	68 a8 4b 02 c0       	push   0xc0024ba8
c0016080:	e8 c9 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016085:	83 c4 10             	add    esp,0x10
c0016088:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001608d:	74 12                	je     c00160a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001608f:	83 ec 0c             	sub    esp,0xc
c0016092:	68 b3 4b 02 c0       	push   0xc0024bb3
c0016097:	e8 5a 9d ff ff       	call   c000fdf6 <KePanic(char const*)>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	eb 3a                	jmp    c00160db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00160a1:	83 ec 0c             	sub    esp,0xc
c00160a4:	53                   	push   ebx
c00160a5:	e8 fe 20 ff ff       	call   c00081a8 <File::close()>
c00160aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160b5:	e8 06 9a ff ff       	call   c000fac0 <free>
c00160ba:	59                   	pop    ecx
c00160bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00160bf:	e8 fc 99 ff ff       	call   c000fac0 <free>
c00160c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00160c7:	e8 f4 99 ff ff       	call   c000fac0 <free>
c00160cc:	5b                   	pop    ebx
c00160cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00160d1:	e8 ea 99 ff ff       	call   c000fac0 <free>
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	eb 1e                	jmp    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00160db:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00160df:	e9 4d fd ff ff       	jmp    c0015e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00160e4:	83 ec 0c             	sub    esp,0xc
c00160e7:	57                   	push   edi
c00160e8:	e8 d3 99 ff ff       	call   c000fac0 <free>
c00160ed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	e9 cc fc ff ff       	jmp    c0015dc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00160f9:	31 c0                	xor    eax,eax
c00160fb:	eb 32                	jmp    c001612f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00160fd:	83 ec 0c             	sub    esp,0xc
c0016100:	53                   	push   ebx
c0016101:	e8 a2 20 ff ff       	call   c00081a8 <File::close()>
c0016106:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016108:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001610b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001610e:	58                   	pop    eax
c001610f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016113:	e8 a8 99 ff ff       	call   c000fac0 <free>
c0016118:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001611b:	e8 a0 99 ff ff       	call   c000fac0 <free>
c0016120:	5a                   	pop    edx
c0016121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016125:	e8 96 99 ff ff       	call   c000fac0 <free>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	b0 01                	mov    al,0x1
c001612f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016135:	5b                   	pop    ebx
c0016136:	5e                   	pop    esi
c0016137:	5f                   	pop    edi
c0016138:	5d                   	pop    ebp
c0016139:	c3                   	ret    

c001613a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001613a:	56                   	push   esi
c001613b:	31 d2                	xor    edx,edx
c001613d:	53                   	push   ebx
c001613e:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016144:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016148:	39 d3                	cmp    ebx,edx
c001614a:	7e 1b                	jle    c0016167 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001614c:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016153:	39 c8                	cmp    eax,ecx
c0016155:	77 0d                	ja     c0016164 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016157:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c001615e:	01 c6                	add    esi,eax
c0016160:	39 ce                	cmp    esi,ecx
c0016162:	77 05                	ja     c0016169 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016164:	42                   	inc    edx
c0016165:	eb e1                	jmp    c0016148 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016167:	31 c0                	xor    eax,eax
c0016169:	5b                   	pop    ebx
c001616a:	5e                   	pop    esi
c001616b:	c3                   	ret    

c001616c <Thr::getDriverNameFromAddress(unsigned long)>:
c001616c:	53                   	push   ebx
c001616d:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016173:	31 c0                	xor    eax,eax
c0016175:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016179:	39 c3                	cmp    ebx,eax
c001617b:	7e 22                	jle    c001619f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001617d:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c0016184:	39 ca                	cmp    edx,ecx
c0016186:	77 14                	ja     c001619c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016188:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c001618f:	39 ca                	cmp    edx,ecx
c0016191:	76 09                	jbe    c001619c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016193:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c001619a:	eb 05                	jmp    c00161a1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001619c:	40                   	inc    eax
c001619d:	eb da                	jmp    c0016179 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001619f:	31 c0                	xor    eax,eax
c00161a1:	5b                   	pop    ebx
c00161a2:	c3                   	ret    

c00161a3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00161a3:	53                   	push   ebx
c00161a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00161a8:	53                   	push   ebx
c00161a9:	e8 8c ff ff ff       	call   c001613a <Thr::getDriverBaseFromAddress(unsigned long)>
c00161ae:	5a                   	pop    edx
c00161af:	31 d2                	xor    edx,edx
c00161b1:	85 c0                	test   eax,eax
c00161b3:	74 04                	je     c00161b9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00161b5:	89 da                	mov    edx,ebx
c00161b7:	29 c2                	sub    edx,eax
c00161b9:	5b                   	pop    ebx
c00161ba:	89 d0                	mov    eax,edx
c00161bc:	c3                   	ret    

c00161bd <Thr::loadDLL(char const*, bool)>:
c00161bd:	55                   	push   ebp
c00161be:	57                   	push   edi
c00161bf:	56                   	push   esi
c00161c0:	53                   	push   ebx
c00161c1:	81 ec 34 01 00 00    	sub    esp,0x134
c00161c7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161ce:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00161d5:	56                   	push   esi
c00161d6:	68 cb 4b 02 c0       	push   0xc0024bcb
c00161db:	e8 6e 0d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00161e0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00161e7:	e8 c4 98 ff ff       	call   c000fab0 <malloc>
c00161ec:	83 c4 0c             	add    esp,0xc
c00161ef:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00161f5:	56                   	push   esi
c00161f6:	50                   	push   eax
c00161f7:	89 c3                	mov    ebx,eax
c00161f9:	e8 2e 1f ff ff       	call   c000812c <File::File(char const*, Process*)>
c00161fe:	83 c4 10             	add    esp,0x10
c0016201:	85 db                	test   ebx,ebx
c0016203:	75 3c                	jne    c0016241 <Thr::loadDLL(char const*, bool)+0x84>
c0016205:	89 e8                	mov    eax,ebp
c0016207:	84 c0                	test   al,al
c0016209:	0f 84 02 02 00 00    	je     c0016411 <Thr::loadDLL(char const*, bool)+0x254>
c001620f:	50                   	push   eax
c0016210:	50                   	push   eax
c0016211:	68 dc 4b 02 c0       	push   0xc0024bdc
c0016216:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001621a:	57                   	push   edi
c001621b:	e8 30 a4 fe ff       	call   c0000650 <strcpy>
c0016220:	58                   	pop    eax
c0016221:	5a                   	pop    edx
c0016222:	56                   	push   esi
c0016223:	57                   	push   edi
c0016224:	e8 47 a6 fe ff       	call   c0000870 <strcat>
c0016229:	59                   	pop    ecx
c001622a:	58                   	pop    eax
c001622b:	68 f3 4b 02 c0       	push   0xc0024bf3
c0016230:	57                   	push   edi
c0016231:	e8 3a a6 fe ff       	call   c0000870 <strcat>
c0016236:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016239:	e8 b8 9b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	50                   	push   eax
c0016242:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016246:	50                   	push   eax
c0016247:	8d 44 24 20          	lea    eax,[esp+0x20]
c001624b:	50                   	push   eax
c001624c:	53                   	push   ebx
c001624d:	e8 fa 21 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	85 db                	test   ebx,ebx
c0016257:	89 c7                	mov    edi,eax
c0016259:	74 0c                	je     c0016267 <Thr::loadDLL(char const*, bool)+0xaa>
c001625b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001625d:	83 ec 0c             	sub    esp,0xc
c0016260:	53                   	push   ebx
c0016261:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	83 ec 0c             	sub    esp,0xc
c001626a:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001626f:	50                   	push   eax
c0016270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016274:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016278:	57                   	push   edi
c0016279:	68 f5 4b 02 c0       	push   0xc0024bf5
c001627e:	e8 cb 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016283:	83 c4 20             	add    esp,0x20
c0016286:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001628b:	75 0a                	jne    c0016297 <Thr::loadDLL(char const*, bool)+0xda>
c001628d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016291:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016295:	75 3e                	jne    c00162d5 <Thr::loadDLL(char const*, bool)+0x118>
c0016297:	89 e8                	mov    eax,ebp
c0016299:	31 db                	xor    ebx,ebx
c001629b:	84 c0                	test   al,al
c001629d:	0f 84 6e 01 00 00    	je     c0016411 <Thr::loadDLL(char const*, bool)+0x254>
c00162a3:	50                   	push   eax
c00162a4:	50                   	push   eax
c00162a5:	68 16 4c 02 c0       	push   0xc0024c16
c00162aa:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00162ae:	53                   	push   ebx
c00162af:	e8 9c a3 fe ff       	call   c0000650 <strcpy>
c00162b4:	58                   	pop    eax
c00162b5:	5a                   	pop    edx
c00162b6:	56                   	push   esi
c00162b7:	53                   	push   ebx
c00162b8:	e8 b3 a5 fe ff       	call   c0000870 <strcat>
c00162bd:	59                   	pop    ecx
c00162be:	5f                   	pop    edi
c00162bf:	68 f3 4b 02 c0       	push   0xc0024bf3
c00162c4:	53                   	push   ebx
c00162c5:	e8 a6 a5 fe ff       	call   c0000870 <strcat>
c00162ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162cd:	e8 24 9b ff ff       	call   c000fdf6 <KePanic(char const*)>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	53                   	push   ebx
c00162d6:	6a 03                	push   0x3
c00162d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00162e0:	05 ff 0f 00 00       	add    eax,0xfff
c00162e5:	83 d2 00             	adc    edx,0x0
c00162e8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00162ec:	50                   	push   eax
c00162ed:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00162f3:	e8 3e d7 ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c00162f8:	89 c3                	mov    ebx,eax
c00162fa:	58                   	pop    eax
c00162fb:	5a                   	pop    edx
c00162fc:	53                   	push   ebx
c00162fd:	68 de 3e 02 c0       	push   0xc0023ede
c0016302:	e8 47 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016307:	89 34 24             	mov    DWORD PTR [esp],esi
c001630a:	e8 71 a2 fe ff       	call   c0000580 <strlen>
c001630f:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c0016315:	40                   	inc    eax
c0016316:	89 04 24             	mov    DWORD PTR [esp],eax
c0016319:	e8 92 97 ff ff       	call   c000fab0 <malloc>
c001631e:	59                   	pop    ecx
c001631f:	89 04 bd 80 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1980],eax
c0016326:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001632b:	5f                   	pop    edi
c001632c:	56                   	push   esi
c001632d:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016334:	e8 17 a3 fe ff       	call   c0000650 <strcpy>
c0016339:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001633e:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016345:	8d 50 01             	lea    edx,[eax+0x1]
c0016348:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c001634e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016352:	83 c4 0c             	add    esp,0xc
c0016355:	6a 01                	push   0x1
c0016357:	53                   	push   ebx
c0016358:	56                   	push   esi
c0016359:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c0016360:	e8 94 f6 ff ff       	call   c00159f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	89 c7                	mov    edi,eax
c001636a:	89 f8                	mov    eax,edi
c001636c:	83 f0 01             	xor    eax,0x1
c001636f:	84 c0                	test   al,al
c0016371:	74 18                	je     c001638b <Thr::loadDLL(char const*, bool)+0x1ce>
c0016373:	89 e8                	mov    eax,ebp
c0016375:	84 c0                	test   al,al
c0016377:	74 12                	je     c001638b <Thr::loadDLL(char const*, bool)+0x1ce>
c0016379:	83 ec 0c             	sub    esp,0xc
c001637c:	68 2f 4c 02 c0       	push   0xc0024c2f
c0016381:	e8 70 9a ff ff       	call   c000fdf6 <KePanic(char const*)>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	eb 06                	jmp    c0016391 <Thr::loadDLL(char const*, bool)+0x1d4>
c001638b:	89 f8                	mov    eax,edi
c001638d:	84 c0                	test   al,al
c001638f:	75 10                	jne    c00163a1 <Thr::loadDLL(char const*, bool)+0x1e4>
c0016391:	83 ec 0c             	sub    esp,0xc
c0016394:	68 4e 4c 02 c0       	push   0xc0024c4e
c0016399:	e8 58 9a ff ff       	call   c000fdf6 <KePanic(char const*)>
c001639e:	83 c4 10             	add    esp,0x10
c00163a1:	31 f6                	xor    esi,esi
c00163a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163ab:	05 ff 0f 00 00       	add    eax,0xfff
c00163b0:	83 d2 00             	adc    edx,0x0
c00163b3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00163b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163bb:	c1 ea 0c             	shr    edx,0xc
c00163be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00163c2:	ba 00 00 00 00       	mov    edx,0x0
c00163c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00163cb:	89 d0                	mov    eax,edx
c00163cd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00163d1:	73 32                	jae    c0016405 <Thr::loadDLL(char const*, bool)+0x248>
c00163d3:	50                   	push   eax
c00163d4:	50                   	push   eax
c00163d5:	89 f0                	mov    eax,esi
c00163d7:	c1 e0 0c             	shl    eax,0xc
c00163da:	01 d8                	add    eax,ebx
c00163dc:	50                   	push   eax
c00163dd:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00163e3:	e8 4c d1 ff ff       	call   c0013534 <VAS::getPageTableEntry(unsigned long)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00163ed:	a8 60                	test   al,0x60
c00163ef:	75 11                	jne    c0016402 <Thr::loadDLL(char const*, bool)+0x245>
c00163f1:	83 ec 0c             	sub    esp,0xc
c00163f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00163f9:	50                   	push   eax
c00163fa:	e8 88 9b ff ff       	call   c000ff87 <Phys::freePage(unsigned long)>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	46                   	inc    esi
c0016403:	eb 9e                	jmp    c00163a3 <Thr::loadDLL(char const*, bool)+0x1e6>
c0016405:	89 f8                	mov    eax,edi
c0016407:	84 c0                	test   al,al
c0016409:	b8 00 00 00 00       	mov    eax,0x0
c001640e:	0f 44 d8             	cmove  ebx,eax
c0016411:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016417:	89 d8                	mov    eax,ebx
c0016419:	5b                   	pop    ebx
c001641a:	5e                   	pop    esi
c001641b:	5f                   	pop    edi
c001641c:	5d                   	pop    ebp
c001641d:	c3                   	ret    

c001641e <Thr::executeDLL(unsigned long, void*)>:
c001641e:	56                   	push   esi
c001641f:	53                   	push   ebx
c0016420:	52                   	push   edx
c0016421:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016425:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016429:	85 db                	test   ebx,ebx
c001642b:	75 10                	jne    c001643d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001642d:	83 ec 0c             	sub    esp,0xc
c0016430:	68 6a 4c 02 c0       	push   0xc0024c6a
c0016435:	e8 bc 99 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001643a:	83 c4 10             	add    esp,0x10
c001643d:	50                   	push   eax
c001643e:	50                   	push   eax
c001643f:	53                   	push   ebx
c0016440:	68 94 4c 02 c0       	push   0xc0024c94
c0016445:	e8 04 0b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001644a:	89 d8                	mov    eax,ebx
c001644c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016450:	83 c4 14             	add    esp,0x14
c0016453:	5b                   	pop    ebx
c0016454:	5e                   	pop    esi
c0016455:	ff e0                	jmp    eax

c0016457 <KeProcessExec(Process*, char const*)>:
c0016457:	56                   	push   esi
c0016458:	53                   	push   ebx
c0016459:	83 ec 04             	sub    esp,0x4
c001645c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016460:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016466:	85 f6                	test   esi,esi
c0016468:	74 16                	je     c0016480 <KeProcessExec(Process*, char const*)+0x29>
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	56                   	push   esi
c001646e:	e8 53 d3 ff ff       	call   c00137c6 <VAS::~VAS()>
c0016473:	58                   	pop    eax
c0016474:	5a                   	pop    edx
c0016475:	6a 14                	push   0x14
c0016477:	56                   	push   esi
c0016478:	e8 aa 6d ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	6a 14                	push   0x14
c0016485:	e8 26 96 ff ff       	call   c000fab0 <malloc>
c001648a:	89 c6                	mov    esi,eax
c001648c:	58                   	pop    eax
c001648d:	5a                   	pop    edx
c001648e:	6a 00                	push   0x0
c0016490:	56                   	push   esi
c0016491:	e8 dc d7 ff ff       	call   c0013c72 <VAS::VAS(bool)>
c0016496:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001649c:	59                   	pop    ecx
c001649d:	5e                   	pop    esi
c001649e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164a2:	50                   	push   eax
c00164a3:	53                   	push   ebx
c00164a4:	e8 11 f0 ff ff       	call   c00154ba <Thr::loadProgramIntoMemory(Process*, char const*)>
c00164a9:	83 c4 14             	add    esp,0x14
c00164ac:	31 c0                	xor    eax,eax
c00164ae:	5b                   	pop    ebx
c00164af:	5e                   	pop    esi
c00164b0:	c3                   	ret    
c00164b1:	66 90                	xchg   ax,ax
c00164b3:	90                   	nop

c00164b4 <userModeEntryPoint(void*)>:
c00164b4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00164bc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00164c1:	85 c0                	test   eax,eax
c00164c3:	75 03                	jne    c00164c8 <userModeEntryPoint(void*)+0x14>
c00164c5:	fb                   	sti    
c00164c6:	66 90                	xchg   ax,ax
c00164c8:	fb                   	sti    
c00164c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164d1:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00164d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164db:	e9 5f 9d fe ff       	jmp    c000023f <goToUsermode>

c00164e0 <changeTSS>:
c00164e0:	83 ec 14             	sub    esp,0x14
c00164e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00164eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00164f0:	c1 e2 15             	shl    edx,0x15
c00164f3:	29 d0                	sub    eax,edx
c00164f5:	50                   	push   eax
c00164f6:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00164fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016501:	05 68 11 00 00       	add    eax,0x1168
c0016506:	50                   	push   eax
c0016507:	e8 fc c5 ff ff       	call   c0012b08 <TSS::setESP(unsigned long)>
c001650c:	83 c4 1c             	add    esp,0x1c
c001650f:	c3                   	ret    

c0016510 <switchToThread(ThreadControlBlock*)>:
c0016510:	57                   	push   edi
c0016511:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0016517:	56                   	push   esi
c0016518:	53                   	push   ebx
c0016519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001651d:	85 c9                	test   ecx,ecx
c001651f:	0f 85 9b 00 00 00    	jne    c00165c0 <switchToThread(ThreadControlBlock*)+0xb0>
c0016525:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016529:	81 fa ff 00 00 00    	cmp    edx,0xff
c001652f:	0f 84 87 00 00 00    	je     c00165bc <switchToThread(ThreadControlBlock*)+0xac>
c0016535:	b8 00 04 00 00       	mov    eax,0x400
c001653a:	29 d0                	sub    eax,edx
c001653c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001653f:	d1 f8                	sar    eax,1
c0016541:	01 d0                	add    eax,edx
c0016543:	90                   	nop
c0016544:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016547:	e8 c7 38 00 00       	call   c0019e13 <HalQueryPerformanceCounter()>
c001654c:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0016551:	89 c6                	mov    esi,eax
c0016553:	89 d7                	mov    edi,edx
c0016555:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c001655b:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016560:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c0016566:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c001656c:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016572:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016578:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c001657e:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016584:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016587:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001658a:	01 c6                	add    esi,eax
c001658c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001658f:	11 d7                	adc    edi,edx
c0016591:	83 ec 0c             	sub    esp,0xc
c0016594:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016597:	53                   	push   ebx
c0016598:	e8 da 9c fe ff       	call   c0000277 <switchToThreadASM>
c001659d:	0f 20 c0             	mov    eax,cr0
c00165a0:	83 c8 08             	or     eax,0x8
c00165a3:	0f 22 c0             	mov    cr0,eax
c00165a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165b2:	5b                   	pop    ebx
c00165b3:	5e                   	pop    esi
c00165b4:	5f                   	pop    edi
c00165b5:	e9 c6 eb ff ff       	jmp    c0015180 <KeCheckAlarm(ThreadControlBlock*)>
c00165ba:	66 90                	xchg   ax,ax
c00165bc:	31 c0                	xor    eax,eax
c00165be:	eb 84                	jmp    c0016544 <switchToThread(ThreadControlBlock*)+0x34>
c00165c0:	5b                   	pop    ebx
c00165c1:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00165cb:	5e                   	pop    esi
c00165cc:	5f                   	pop    edi
c00165cd:	c3                   	ret    
c00165ce:	66 90                	xchg   ax,ax

c00165d0 <Process::addArgs(char**)>:
c00165d0:	57                   	push   edi
c00165d1:	56                   	push   esi
c00165d2:	53                   	push   ebx
c00165d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00165d7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00165db:	85 f6                	test   esi,esi
c00165dd:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00165e7:	74 4f                	je     c0016638 <Process::addArgs(char**)+0x68>
c00165e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00165eb:	85 c0                	test   eax,eax
c00165ed:	74 49                	je     c0016638 <Process::addArgs(char**)+0x68>
c00165ef:	31 db                	xor    ebx,ebx
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	50                   	push   eax
c00165f8:	e8 83 9f fe ff       	call   c0000580 <strlen>
c00165fd:	83 c0 01             	add    eax,0x1
c0016600:	89 04 24             	mov    DWORD PTR [esp],eax
c0016603:	e8 a8 94 ff ff       	call   c000fab0 <malloc>
c0016608:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c001660f:	5a                   	pop    edx
c0016610:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0016613:	83 c3 01             	add    ebx,0x1
c0016616:	59                   	pop    ecx
c0016617:	52                   	push   edx
c0016618:	50                   	push   eax
c0016619:	e8 32 a0 fe ff       	call   c0000650 <strcpy>
c001661e:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0016624:	83 c4 10             	add    esp,0x10
c0016627:	83 c1 01             	add    ecx,0x1
c001662a:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0016630:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0016633:	85 c0                	test   eax,eax
c0016635:	75 bd                	jne    c00165f4 <Process::addArgs(char**)+0x24>
c0016637:	90                   	nop
c0016638:	5b                   	pop    ebx
c0016639:	5e                   	pop    esi
c001663a:	5f                   	pop    edi
c001663b:	c3                   	ret    

c001663c <Process::Process(char const*, Process*, char**)>:
c001663c:	56                   	push   esi
c001663d:	53                   	push   ebx
c001663e:	83 ec 14             	sub    esp,0x14
c0016641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016645:	05 0c 02 00 00       	add    eax,0x20c
c001664a:	bb 07 00 00 00       	mov    ebx,0x7
c001664f:	89 c6                	mov    esi,eax
c0016651:	8d 76 00             	lea    esi,[esi+0x0]
c0016654:	85 db                	test   ebx,ebx
c0016656:	78 14                	js     c001666c <Process::Process(char const*, Process*, char**)+0x30>
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	56                   	push   esi
c001665c:	e8 2f b9 00 00       	call   c0021f90 <ThreadControlBlock::ThreadControlBlock()>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 c6 73             	add    esi,0x73
c0016667:	83 eb 01             	sub    ebx,0x1
c001666a:	eb e8                	jmp    c0016654 <Process::Process(char const*, Process*, char**)+0x18>
c001666c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016670:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016682:	83 ec 0c             	sub    esp,0xc
c0016685:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016689:	e8 96 80 ff ff       	call   c000e724 <KeNewProcessEnv(Process*)>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	89 c2                	mov    edx,eax
c0016693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016697:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c001669d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a1:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00166aa:	a1 bc 65 02 c0       	mov    eax,ds:0xc00265bc
c00166af:	8d 50 01             	lea    edx,[eax+0x1]
c00166b2:	89 15 bc 65 02 c0    	mov    DWORD PTR ds:0xc00265bc,edx
c00166b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00166bc:	89 02                	mov    DWORD PTR [edx],eax
c00166be:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00166c6:	83 ec 0c             	sub    esp,0xc
c00166c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00166cd:	e8 de 93 ff ff       	call   c000fab0 <malloc>
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	89 c3                	mov    ebx,eax
c00166d7:	83 ec 08             	sub    esp,0x8
c00166da:	6a 00                	push   0x0
c00166dc:	53                   	push   ebx
c00166dd:	e8 90 d5 ff ff       	call   c0013c72 <VAS::VAS(bool)>
c00166e2:	83 c4 10             	add    esp,0x10
c00166e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00166ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00166fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016701:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016705:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c001670b:	e8 b3 a7 ff ff       	call   c0010ec3 <KeInitSignals()>
c0016710:	89 c2                	mov    edx,eax
c0016712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016716:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c001671c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016720:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016726:	85 c0                	test   eax,eax
c0016728:	74 42                	je     c001676c <Process::Process(char const*, Process*, char**)+0x130>
c001672a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001672e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016734:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001673a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016748:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001674e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016758:	05 0c 01 00 00       	add    eax,0x10c
c001675d:	83 ec 08             	sub    esp,0x8
c0016760:	52                   	push   edx
c0016761:	50                   	push   eax
c0016762:	e8 e9 9e fe ff       	call   c0000650 <strcpy>
c0016767:	83 c4 10             	add    esp,0x10
c001676a:	eb 7c                	jmp    c00167e8 <Process::Process(char const*, Process*, char**)+0x1ac>
c001676c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016774:	83 ec 0c             	sub    esp,0xc
c0016777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001677b:	e8 30 93 ff ff       	call   c000fab0 <malloc>
c0016780:	83 c4 10             	add    esp,0x10
c0016783:	89 c3                	mov    ebx,eax
c0016785:	83 ec 08             	sub    esp,0x8
c0016788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001678c:	53                   	push   ebx
c001678d:	e8 94 c0 ff ff       	call   c0012826 <VgaText::VgaText(char const*)>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016799:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001679f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00167a9:	83 ec 0c             	sub    esp,0xc
c00167ac:	50                   	push   eax
c00167ad:	e8 da b8 ff ff       	call   c001208c <addToTerminalCycle(VgaText*)>
c00167b2:	83 c4 10             	add    esp,0x10
c00167b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00167bf:	83 ec 0c             	sub    esp,0xc
c00167c2:	50                   	push   eax
c00167c3:	e8 35 bb ff ff       	call   c00122fd <setActiveTerminal(VgaText*)>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167cf:	05 0c 01 00 00       	add    eax,0x10c
c00167d4:	83 ec 08             	sub    esp,0x8
c00167d7:	68 b3 4c 02 c0       	push   0xc0024cb3
c00167dc:	50                   	push   eax
c00167dd:	e8 6e 9e fe ff       	call   c0000650 <strcpy>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	8d 76 00             	lea    esi,[esi+0x0]
c00167e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ec:	83 c0 0c             	add    eax,0xc
c00167ef:	83 ec 08             	sub    esp,0x8
c00167f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f6:	50                   	push   eax
c00167f7:	e8 54 9e fe ff       	call   c0000650 <strcpy>
c00167fc:	83 c4 10             	add    esp,0x10
c00167ff:	83 ec 08             	sub    esp,0x8
c0016802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001680a:	e8 c1 fd ff ff       	call   c00165d0 <Process::addArgs(char**)>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	83 ec 08             	sub    esp,0x8
c0016815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016819:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001681d:	e8 98 ec ff ff       	call   c00154ba <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016829:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001682d:	83 f0 01             	xor    eax,0x1
c0016830:	88 c2                	mov    dl,al
c0016832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016836:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c001683c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016840:	8b 10                	mov    edx,DWORD PTR [eax]
c0016842:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016847:	52                   	push   edx
c0016848:	50                   	push   eax
c0016849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001684d:	68 0c 4d 02 c0       	push   0xc0024d0c
c0016852:	e8 f7 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	90                   	nop
c001685b:	83 c4 14             	add    esp,0x14
c001685e:	5b                   	pop    ebx
c001685f:	5e                   	pop    esi
c0016860:	c3                   	ret    
c0016861:	90                   	nop
c0016862:	66 90                	xchg   ax,ax

c0016864 <Process::Process(bool, char const*, Process*, char**)>:
c0016864:	56                   	push   esi
c0016865:	53                   	push   ebx
c0016866:	83 ec 24             	sub    esp,0x24
c0016869:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001686d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016875:	05 0c 02 00 00       	add    eax,0x20c
c001687a:	bb 07 00 00 00       	mov    ebx,0x7
c001687f:	89 c6                	mov    esi,eax
c0016881:	8d 76 00             	lea    esi,[esi+0x0]
c0016884:	85 db                	test   ebx,ebx
c0016886:	78 14                	js     c001689c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	56                   	push   esi
c001688c:	e8 ff b6 00 00       	call   c0021f90 <ThreadControlBlock::ThreadControlBlock()>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	83 c6 73             	add    esi,0x73
c0016897:	83 eb 01             	sub    ebx,0x1
c001689a:	eb e8                	jmp    c0016884 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001689c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168a0:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c00168a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168ab:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00168b2:	83 ec 0c             	sub    esp,0xc
c00168b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00168b9:	e8 66 7e ff ff       	call   c000e724 <KeNewProcessEnv(Process*)>
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	89 c2                	mov    edx,eax
c00168c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168c7:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00168cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168d1:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00168da:	a1 bc 65 02 c0       	mov    eax,ds:0xc00265bc
c00168df:	8d 50 01             	lea    edx,[eax+0x1]
c00168e2:	89 15 bc 65 02 c0    	mov    DWORD PTR ds:0xc00265bc,edx
c00168e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168ec:	89 02                	mov    DWORD PTR [edx],eax
c00168ee:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00168fd:	e8 ae 91 ff ff       	call   c000fab0 <malloc>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	89 c3                	mov    ebx,eax
c0016907:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001690c:	83 ec 08             	sub    esp,0x8
c001690f:	50                   	push   eax
c0016910:	53                   	push   ebx
c0016911:	e8 5c d3 ff ff       	call   c0013c72 <VAS::VAS(bool)>
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001691d:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016923:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016927:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016935:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016939:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c001693f:	e8 7f a5 ff ff       	call   c0010ec3 <KeInitSignals()>
c0016944:	89 c2                	mov    edx,eax
c0016946:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001694a:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016954:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001695a:	85 c0                	test   eax,eax
c001695c:	74 42                	je     c00169a0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001695e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016962:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016968:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001696e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016972:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001697c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016982:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016988:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698c:	05 0c 01 00 00       	add    eax,0x10c
c0016991:	83 ec 08             	sub    esp,0x8
c0016994:	52                   	push   edx
c0016995:	50                   	push   eax
c0016996:	e8 b5 9c fe ff       	call   c0000650 <strcpy>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	eb 7c                	jmp    c0016a1c <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c00169a0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00169a8:	83 ec 0c             	sub    esp,0xc
c00169ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169af:	e8 fc 90 ff ff       	call   c000fab0 <malloc>
c00169b4:	83 c4 10             	add    esp,0x10
c00169b7:	89 c3                	mov    ebx,eax
c00169b9:	83 ec 08             	sub    esp,0x8
c00169bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169c0:	53                   	push   ebx
c00169c1:	e8 60 be ff ff       	call   c0012826 <VgaText::VgaText(char const*)>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169cd:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00169d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169d7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169dd:	83 ec 0c             	sub    esp,0xc
c00169e0:	50                   	push   eax
c00169e1:	e8 a6 b6 ff ff       	call   c001208c <addToTerminalCycle(VgaText*)>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169ed:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169f3:	83 ec 0c             	sub    esp,0xc
c00169f6:	50                   	push   eax
c00169f7:	e8 01 b9 ff ff       	call   c00122fd <setActiveTerminal(VgaText*)>
c00169fc:	83 c4 10             	add    esp,0x10
c00169ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a03:	05 0c 01 00 00       	add    eax,0x10c
c0016a08:	83 ec 08             	sub    esp,0x8
c0016a0b:	68 b3 4c 02 c0       	push   0xc0024cb3
c0016a10:	50                   	push   eax
c0016a11:	e8 3a 9c fe ff       	call   c0000650 <strcpy>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	8d 76 00             	lea    esi,[esi+0x0]
c0016a1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a20:	83 c0 0c             	add    eax,0xc
c0016a23:	83 ec 08             	sub    esp,0x8
c0016a26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a2a:	50                   	push   eax
c0016a2b:	e8 20 9c fe ff       	call   c0000650 <strcpy>
c0016a30:	83 c4 10             	add    esp,0x10
c0016a33:	83 ec 08             	sub    esp,0x8
c0016a36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a3e:	e8 8d fb ff ff       	call   c00165d0 <Process::addArgs(char**)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	90                   	nop
c0016a47:	83 c4 24             	add    esp,0x24
c0016a4a:	5b                   	pop    ebx
c0016a4b:	5e                   	pop    esi
c0016a4c:	c3                   	ret    
c0016a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016a50 <taskStartupFunction>:
c0016a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a55:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016a58:	c3                   	ret    
c0016a59:	8d 76 00             	lea    esi,[esi+0x0]

c0016a5c <KeDisablePreemption()>:
c0016a5c:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016a61:	85 c0                	test   eax,eax
c0016a63:	75 13                	jne    c0016a78 <KeDisablePreemption()+0x1c>
c0016a65:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016a6b:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016a72:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016a78:	83 c0 01             	add    eax,0x1
c0016a7b:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016a80:	c3                   	ret    
c0016a81:	8d 76 00             	lea    esi,[esi+0x0]

c0016a84 <KeRestorePreemption()>:
c0016a84:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016a89:	83 e8 01             	sub    eax,0x1
c0016a8c:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016a91:	75 0d                	jne    c0016aa0 <KeRestorePreemption()+0x1c>
c0016a93:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016a98:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa0:	c3                   	ret    
c0016aa1:	90                   	nop
c0016aa2:	66 90                	xchg   ax,ax

c0016aa4 <Process::createThread(void (*)(void*), void*, int)>:
c0016aa4:	55                   	push   ebp
c0016aa5:	31 c9                	xor    ecx,ecx
c0016aa7:	57                   	push   edi
c0016aa8:	56                   	push   esi
c0016aa9:	53                   	push   ebx
c0016aaa:	83 ec 0c             	sub    esp,0xc
c0016aad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ab1:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016ab8:	89 f2                	mov    edx,esi
c0016aba:	66 90                	xchg   ax,ax
c0016abc:	0f b7 c2             	movzx  eax,dx
c0016abf:	80 e2 01             	and    dl,0x1
c0016ac2:	74 18                	je     c0016adc <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016ac4:	d1 f8                	sar    eax,1
c0016ac6:	83 c1 01             	add    ecx,0x1
c0016ac9:	83 f9 10             	cmp    ecx,0x10
c0016acc:	89 c2                	mov    edx,eax
c0016ace:	75 ec                	jne    c0016abc <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016ad0:	83 c4 0c             	add    esp,0xc
c0016ad3:	31 db                	xor    ebx,ebx
c0016ad5:	89 d8                	mov    eax,ebx
c0016ad7:	5b                   	pop    ebx
c0016ad8:	5e                   	pop    esi
c0016ad9:	5f                   	pop    edi
c0016ada:	5d                   	pop    ebp
c0016adb:	c3                   	ret    
c0016adc:	b8 01 00 00 00       	mov    eax,0x1
c0016ae1:	d3 e0                	shl    eax,cl
c0016ae3:	09 c6                	or     esi,eax
c0016ae5:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016aec:	6b c1 73             	imul   eax,ecx,0x73
c0016aef:	01 d8                	add    eax,ebx
c0016af1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016af8:	75 0a                	jne    c0016b04 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016afa:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016b04:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016b0a:	6b f9 73             	imul   edi,ecx,0x73
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016b13:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016b16:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016b1c:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016b22:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016b28:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016b2f:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016b39:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016b3f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b43:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016b4d:	c7 80 73 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x273],0x0
c0016b57:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016b5d:	89 ca                	mov    edx,ecx
c0016b5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016b63:	f7 da                	neg    edx
c0016b65:	c1 e2 15             	shl    edx,0x15
c0016b68:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016b6e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016b74:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016b78:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016b82:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016b88:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016b92:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016b98:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016ba2:	68 00 01 00 00       	push   0x100
c0016ba7:	e8 04 8f ff ff       	call   c000fab0 <malloc>
c0016bac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016baf:	58                   	pop    eax
c0016bb0:	5a                   	pop    edx
c0016bb1:	53                   	push   ebx
c0016bb2:	68 4c ea 02 c0       	push   0xc002ea4c
c0016bb7:	e8 80 af 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	89 d8                	mov    eax,ebx
c0016bc1:	83 c4 0c             	add    esp,0xc
c0016bc4:	5b                   	pop    ebx
c0016bc5:	5e                   	pop    esi
c0016bc6:	5f                   	pop    edi
c0016bc7:	5d                   	pop    ebp
c0016bc8:	c3                   	ret    
c0016bc9:	90                   	nop
c0016bca:	66 90                	xchg   ax,ax

c0016bcc <Process::createUserThread()>:
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	68 80 00 00 00       	push   0x80
c0016bd4:	6a 00                	push   0x0
c0016bd6:	68 b4 64 01 c0       	push   0xc00164b4
c0016bdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bdf:	50                   	push   eax
c0016be0:	e8 bf fe ff ff       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c0016be5:	83 c4 1c             	add    esp,0x1c
c0016be8:	c3                   	ret    
c0016be9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bec <setupMultitasking(void (*)())>:
c0016bec:	56                   	push   esi
c0016bed:	53                   	push   ebx
c0016bee:	83 ec 04             	sub    esp,0x4
c0016bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bf5:	eb 11                	jmp    c0016c08 <setupMultitasking(void (*)())+0x1c>
c0016bf7:	90                   	nop
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c00:	e8 7b ae 00 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c05:	83 c4 10             	add    esp,0x10
c0016c08:	83 ec 0c             	sub    esp,0xc
c0016c0b:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c10:	e8 47 ae 00 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	84 c0                	test   al,al
c0016c1a:	74 dc                	je     c0016bf8 <setupMultitasking(void (*)())+0xc>
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	68 c4 07 00 00       	push   0x7c4
c0016c24:	e8 87 8e ff ff       	call   c000fab0 <malloc>
c0016c29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c30:	6a 00                	push   0x0
c0016c32:	68 b7 4c 02 c0       	push   0xc0024cb7
c0016c37:	6a 01                	push   0x1
c0016c39:	50                   	push   eax
c0016c3a:	89 c3                	mov    ebx,eax
c0016c3c:	e8 23 fc ff ff       	call   c0016864 <Process::Process(bool, char const*, Process*, char**)>
c0016c41:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016c47:	83 c4 14             	add    esp,0x14
c0016c4a:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016c50:	50                   	push   eax
c0016c51:	e8 a7 b6 ff ff       	call   c00122fd <setActiveTerminal(VgaText*)>
c0016c56:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016c5d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016c67:	83 c8 01             	or     eax,0x1
c0016c6a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016c71:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016c7a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016c84:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016c8a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016c94:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016c9a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016ca4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016cae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016cb4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016cba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016cc4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016cce:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016cd5:	e8 d6 8d ff ff       	call   c000fab0 <malloc>
c0016cda:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016ce4:	c7 83 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x273],0x0
c0016cee:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016cf4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016cfa:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016d00:	5a                   	pop    edx
c0016d01:	59                   	pop    ecx
c0016d02:	68 b3 4c 02 c0       	push   0xc0024cb3
c0016d07:	50                   	push   eax
c0016d08:	e8 43 99 fe ff       	call   c0000650 <strcpy>
c0016d0d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016d14:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016d18:	83 c4 14             	add    esp,0x14
c0016d1b:	5b                   	pop    ebx
c0016d1c:	5e                   	pop    esi
c0016d1d:	e9 47 95 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016d22:	66 90                	xchg   ax,ax

c0016d24 <schedule()>:
c0016d24:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016d2a:	85 d2                	test   edx,edx
c0016d2c:	74 0e                	je     c0016d3c <schedule()+0x18>
c0016d2e:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016d38:	c3                   	ret    
c0016d39:	8d 76 00             	lea    esi,[esi+0x0]
c0016d3c:	53                   	push   ebx
c0016d3d:	83 ec 14             	sub    esp,0x14
c0016d40:	68 4c ea 02 c0       	push   0xc002ea4c
c0016d45:	e8 12 ad 00 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d4a:	83 c4 10             	add    esp,0x10
c0016d4d:	84 c0                	test   al,al
c0016d4f:	75 3f                	jne    c0016d90 <schedule()+0x6c>
c0016d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016d59:	83 fa 01             	cmp    edx,0x1
c0016d5c:	74 3a                	je     c0016d98 <schedule()+0x74>
c0016d5e:	66 90                	xchg   ax,ax
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	68 4c ea 02 c0       	push   0xc002ea4c
c0016d68:	e8 0b ad 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d6d:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016d74:	89 c3                	mov    ebx,eax
c0016d76:	e8 05 ad 00 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d7b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d85:	e8 86 f7 ff ff       	call   c0016510 <switchToThread(ThreadControlBlock*)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d90:	83 c4 08             	add    esp,0x8
c0016d93:	5b                   	pop    ebx
c0016d94:	c3                   	ret    
c0016d95:	8d 76 00             	lea    esi,[esi+0x0]
c0016d98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016d9f:	83 ec 08             	sub    esp,0x8
c0016da2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da7:	50                   	push   eax
c0016da8:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dad:	e8 8a ad 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	eb a9                	jmp    c0016d60 <schedule()+0x3c>
c0016db7:	90                   	nop

c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016dc7:	e8 58 ff ff ff       	call   c0016d24 <schedule()>
c0016dcc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016dd4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016dd9:	85 c0                	test   eax,eax
c0016ddb:	75 03                	jne    c0016de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016ddd:	fb                   	sti    
c0016dde:	66 90                	xchg   ax,ax
c0016de0:	83 c4 0c             	add    esp,0xc
c0016de3:	c3                   	ret    

c0016de4 <blockTask(TaskState)>:
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	fa                   	cli    
c0016de8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ded:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016df1:	83 c0 01             	add    eax,0x1
c0016df4:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dfe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e01:	e8 1e ff ff ff       	call   c0016d24 <schedule()>
c0016e06:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016e0e:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016e14:	85 d2                	test   edx,edx
c0016e16:	75 04                	jne    c0016e1c <blockTask(TaskState)+0x38>
c0016e18:	fb                   	sti    
c0016e19:	8d 76 00             	lea    esi,[esi+0x0]
c0016e1c:	83 c4 0c             	add    esp,0xc
c0016e1f:	c3                   	ret    

c0016e20 <waitTask(int, int*, int)>:
c0016e20:	83 ec 18             	sub    esp,0x18
c0016e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e2c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016e2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e38:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016e3b:	6a 07                	push   0x7
c0016e3d:	e8 a2 ff ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016e4d:	85 d2                	test   edx,edx
c0016e4f:	74 0b                	je     c0016e5c <waitTask(int, int*, int)+0x3c>
c0016e51:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016e54:	89 02                	mov    DWORD PTR [edx],eax
c0016e56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5b:	90                   	nop
c0016e5c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016e5f:	83 c4 0c             	add    esp,0xc
c0016e62:	c3                   	ret    
c0016e63:	90                   	nop

c0016e64 <milliTenthSleepUntil(unsigned long long)>:
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e6f:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016e75:	89 d1                	mov    ecx,edx
c0016e77:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016e7d:	73 05                	jae    c0016e84 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016e7f:	90                   	nop
c0016e80:	83 c4 0c             	add    esp,0xc
c0016e83:	c3                   	ret    
c0016e84:	fa                   	cli    
c0016e85:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016e8b:	83 ec 08             	sub    esp,0x8
c0016e8e:	83 c1 01             	add    ecx,0x1
c0016e91:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016e97:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0016e9d:	83 c1 01             	add    ecx,0x1
c0016ea0:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c0016ea6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eac:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016eaf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb7:	50                   	push   eax
c0016eb8:	68 40 ea 02 c0       	push   0xc002ea40
c0016ebd:	e8 7a ac 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ec2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016ec9:	e8 16 ff ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016ece:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	83 e8 01             	sub    eax,0x1
c0016ed9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0016ede:	85 c0                	test   eax,eax
c0016ee0:	75 0a                	jne    c0016eec <milliTenthSleepUntil(unsigned long long)+0x88>
c0016ee2:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c0016ee8:	85 d2                	test   edx,edx
c0016eea:	75 18                	jne    c0016f04 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016eec:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016ef4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ef9:	85 c0                	test   eax,eax
c0016efb:	75 83                	jne    c0016e80 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016efd:	fb                   	sti    
c0016efe:	83 c4 0c             	add    esp,0xc
c0016f01:	c3                   	ret    
c0016f02:	66 90                	xchg   ax,ax
c0016f04:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0016f0e:	e8 11 fe ff ff       	call   c0016d24 <schedule()>
c0016f13:	eb d7                	jmp    c0016eec <milliTenthSleepUntil(unsigned long long)+0x88>
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]

c0016f18 <milliTenthSleep(unsigned long long)>:
c0016f18:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0016f1d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016f21:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0016f27:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016f2b:	e9 34 ff ff ff       	jmp    c0016e64 <milliTenthSleepUntil(unsigned long long)>

c0016f30 <sleep(unsigned long long)>:
c0016f30:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016f38:	b8 10 27 00 00       	mov    eax,0x2710
c0016f3d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016f41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f45:	01 ca                	add    edx,ecx
c0016f47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016f4b:	eb cb                	jmp    c0016f18 <milliTenthSleep(unsigned long long)>
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f50 <sleep(unsigned int)>:
c0016f50:	83 ec 14             	sub    esp,0x14
c0016f53:	b8 10 27 00 00       	mov    eax,0x2710
c0016f58:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016f5c:	52                   	push   edx
c0016f5d:	50                   	push   eax
c0016f5e:	e8 b5 ff ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0016f63:	83 c4 1c             	add    esp,0x1c
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <milliTenthSleep(unsigned int)>:
c0016f68:	83 ec 14             	sub    esp,0x14
c0016f6b:	31 d2                	xor    edx,edx
c0016f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f71:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0016f77:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0016f7d:	52                   	push   edx
c0016f7e:	50                   	push   eax
c0016f7f:	e8 e0 fe ff ff       	call   c0016e64 <milliTenthSleepUntil(unsigned long long)>
c0016f84:	83 c4 1c             	add    esp,0x1c
c0016f87:	c3                   	ret    

c0016f88 <taskReturned>:
c0016f88:	83 ec 18             	sub    esp,0x18
c0016f8b:	68 40 4d 02 c0       	push   0xc0024d40
c0016f90:	e8 61 8e ff ff       	call   c000fdf6 <KePanic(char const*)>
c0016f95:	83 c4 10             	add    esp,0x10
c0016f98:	83 ec 0c             	sub    esp,0xc
c0016f9b:	6a 02                	push   0x2
c0016f9d:	e8 42 fe ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016fa2:	fa                   	cli    
c0016fa3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016fa8:	83 c0 01             	add    eax,0x1
c0016fab:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016fb0:	e8 6f fd ff ff       	call   c0016d24 <schedule()>
c0016fb5:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016fbd:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	85 d2                	test   edx,edx
c0016fc8:	75 ce                	jne    c0016f98 <taskReturned+0x10>
c0016fca:	fb                   	sti    
c0016fcb:	eb cb                	jmp    c0016f98 <taskReturned+0x10>
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]

c0016fd0 <Thr::processFromPID(int)>:
c0016fd0:	57                   	push   edi
c0016fd1:	56                   	push   esi
c0016fd2:	53                   	push   ebx
c0016fd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fd7:	fa                   	cli    
c0016fd8:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016fde:	83 ec 0c             	sub    esp,0xc
c0016fe1:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fe6:	83 c1 01             	add    ecx,0x1
c0016fe9:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016fef:	e8 84 aa 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ff4:	83 c4 10             	add    esp,0x10
c0016ff7:	89 c7                	mov    edi,eax
c0016ff9:	eb 15                	jmp    c0017010 <Thr::processFromPID(int)+0x40>
c0016ffb:	90                   	nop
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	68 4c ea 02 c0       	push   0xc002ea4c
c0017004:	e8 6f aa 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	39 f8                	cmp    eax,edi
c001700e:	74 50                	je     c0017060 <Thr::processFromPID(int)+0x90>
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	68 4c ea 02 c0       	push   0xc002ea4c
c0017018:	e8 5b aa 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001701d:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017024:	89 c3                	mov    ebx,eax
c0017026:	e8 55 aa 00 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001702b:	58                   	pop    eax
c001702c:	5a                   	pop    edx
c001702d:	53                   	push   ebx
c001702e:	68 4c ea 02 c0       	push   0xc002ea4c
c0017033:	e8 04 ab 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017038:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	39 30                	cmp    DWORD PTR [eax],esi
c0017040:	75 ba                	jne    c0016ffc <Thr::processFromPID(int)+0x2c>
c0017042:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001704a:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017050:	85 c9                	test   ecx,ecx
c0017052:	74 08                	je     c001705c <Thr::processFromPID(int)+0x8c>
c0017054:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017057:	90                   	nop
c0017058:	5b                   	pop    ebx
c0017059:	5e                   	pop    esi
c001705a:	5f                   	pop    edi
c001705b:	c3                   	ret    
c001705c:	fb                   	sti    
c001705d:	eb f5                	jmp    c0017054 <Thr::processFromPID(int)+0x84>
c001705f:	90                   	nop
c0017060:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017068:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001706e:	31 c0                	xor    eax,eax
c0017070:	85 d2                	test   edx,edx
c0017072:	75 e4                	jne    c0017058 <Thr::processFromPID(int)+0x88>
c0017074:	fb                   	sti    
c0017075:	5b                   	pop    ebx
c0017076:	5e                   	pop    esi
c0017077:	5f                   	pop    edi
c0017078:	c3                   	ret    
c0017079:	8d 76 00             	lea    esi,[esi+0x0]

c001707c <unblockTask(ThreadControlBlock*)>:
c001707c:	53                   	push   ebx
c001707d:	83 ec 08             	sub    esp,0x8
c0017080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017084:	fa                   	cli    
c0017085:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001708b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001708e:	83 c2 01             	add    edx,0x1
c0017091:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0017097:	85 c0                	test   eax,eax
c0017099:	74 6d                	je     c0017108 <unblockTask(ThreadControlBlock*)+0x8c>
c001709b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001709e:	83 f8 01             	cmp    eax,0x1
c00170a1:	74 39                	je     c00170dc <unblockTask(ThreadControlBlock*)+0x60>
c00170a3:	83 ec 0c             	sub    esp,0xc
c00170a6:	68 4c ea 02 c0       	push   0xc002ea4c
c00170ab:	e8 c8 a9 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170b0:	83 c4 10             	add    esp,0x10
c00170b3:	85 c0                	test   eax,eax
c00170b5:	75 1d                	jne    c00170d4 <unblockTask(ThreadControlBlock*)+0x58>
c00170b7:	eb 63                	jmp    c001711c <unblockTask(ThreadControlBlock*)+0xa0>
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]
c00170bc:	83 ec 08             	sub    esp,0x8
c00170bf:	50                   	push   eax
c00170c0:	68 4c ea 02 c0       	push   0xc002ea4c
c00170c5:	e8 ba ae 00 00       	call   c0021f84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00170ca:	83 c4 10             	add    esp,0x10
c00170cd:	85 c0                	test   eax,eax
c00170cf:	74 4b                	je     c001711c <unblockTask(ThreadControlBlock*)+0xa0>
c00170d1:	8d 76 00             	lea    esi,[esi+0x0]
c00170d4:	39 c3                	cmp    ebx,eax
c00170d6:	75 e4                	jne    c00170bc <unblockTask(ThreadControlBlock*)+0x40>
c00170d8:	eb 12                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c00170da:	66 90                	xchg   ax,ax
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	68 d5 4c 02 c0       	push   0xc0024cd5
c00170e4:	e8 65 fe fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00170f4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00170f9:	85 c0                	test   eax,eax
c00170fb:	75 03                	jne    c0017100 <unblockTask(ThreadControlBlock*)+0x84>
c00170fd:	fb                   	sti    
c00170fe:	66 90                	xchg   ax,ax
c0017100:	83 c4 08             	add    esp,0x8
c0017103:	5b                   	pop    ebx
c0017104:	c3                   	ret    
c0017105:	8d 76 00             	lea    esi,[esi+0x0]
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	68 be 4c 02 c0       	push   0xc0024cbe
c0017110:	e8 39 fe fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	eb d2                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c001711a:	66 90                	xchg   ax,ax
c001711c:	83 ec 08             	sub    esp,0x8
c001711f:	53                   	push   ebx
c0017120:	68 4c ea 02 c0       	push   0xc002ea4c
c0017125:	e8 12 aa 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	eb bd                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c001712f:	90                   	nop

c0017130 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017130:	55                   	push   ebp
c0017131:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017136:	57                   	push   edi
c0017137:	56                   	push   esi
c0017138:	53                   	push   ebx
c0017139:	83 ec 1c             	sub    esp,0x1c
c001713c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017140:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017143:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017146:	d3 c0                	rol    eax,cl
c0017148:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001714f:	21 c8                	and    eax,ecx
c0017151:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017158:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001715b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017163:	0f 85 af 01 00 00    	jne    c0017318 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017169:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001716f:	85 ed                	test   ebp,ebp
c0017171:	7e 29                	jle    c001719c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017173:	31 f6                	xor    esi,esi
c0017175:	8d 76 00             	lea    esi,[esi+0x0]
c0017178:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001717f:	83 ec 0c             	sub    esp,0xc
c0017182:	83 c6 01             	add    esi,0x1
c0017185:	57                   	push   edi
c0017186:	e8 35 89 ff ff       	call   c000fac0 <free>
c001718b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017197:	7f df                	jg     c0017178 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017199:	8d 76 00             	lea    esi,[esi+0x0]
c001719c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00171a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171a9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00171af:	89 f7                	mov    edi,esi
c00171b1:	85 ed                	test   ebp,ebp
c00171b3:	74 1b                	je     c00171d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	55                   	push   ebp
c00171b9:	e8 82 74 ff ff       	call   c000e640 <EnvVarContainer::~EnvVarContainer()>
c00171be:	59                   	pop    ecx
c00171bf:	5e                   	pop    esi
c00171c0:	6a 0c                	push   0xc
c00171c2:	55                   	push   ebp
c00171c3:	e8 5f 60 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00171c8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	89 f7                	mov    edi,esi
c00171d0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00171d6:	85 c0                	test   eax,eax
c00171d8:	0f 84 ae 00 00 00    	je     c001728c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00171de:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00171e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171e5:	31 c9                	xor    ecx,ecx
c00171e7:	eb 17                	jmp    c0017200 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00171e9:	8d 76 00             	lea    esi,[esi+0x0]
c00171ec:	83 c1 01             	add    ecx,0x1
c00171ef:	83 f9 10             	cmp    ecx,0x10
c00171f2:	0f 84 94 00 00 00    	je     c001728c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00171f8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00171fe:	66 90                	xchg   ax,ax
c0017200:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017207:	d3 fa                	sar    edx,cl
c0017209:	80 e2 01             	and    dl,0x1
c001720c:	74 de                	je     c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001720e:	6b d1 73             	imul   edx,ecx,0x73
c0017211:	01 d0                	add    eax,edx
c0017213:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017219:	83 fd 07             	cmp    ebp,0x7
c001721c:	75 ce                	jne    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001721e:	05 40 02 00 00       	add    eax,0x240
c0017223:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017226:	83 fd ff             	cmp    ebp,0xffffffff
c0017229:	0f 8c f1 00 00 00    	jl     c0017320 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001722f:	0f 84 af 01 00 00    	je     c00173e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017235:	85 ed                	test   ebp,ebp
c0017237:	0f 84 93 01 00 00    	je     c00173d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c001723d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001723f:	75 ab                	jne    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017241:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017245:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001724b:	01 d0                	add    eax,edx
c001724d:	8d 76 00             	lea    esi,[esi+0x0]
c0017250:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017254:	83 ec 0c             	sub    esp,0xc
c0017257:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001725d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017260:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017266:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001726d:	50                   	push   eax
c001726e:	e8 09 fe ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017279:	89 f7                	mov    edi,esi
c001727b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001727f:	83 c1 01             	add    ecx,0x1
c0017282:	83 f9 10             	cmp    ecx,0x10
c0017285:	0f 85 6d ff ff ff    	jne    c00171f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001728b:	90                   	nop
c001728c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017292:	85 c0                	test   eax,eax
c0017294:	74 62                	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017296:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c001729c:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00172a2:	74 54                	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	68 4c ea 02 c0       	push   0xc002ea4c
c00172ac:	e8 c7 a7 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172b1:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00172b8:	89 c7                	mov    edi,eax
c00172ba:	e8 9d a7 00 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	84 c0                	test   al,al
c00172c4:	0f 84 ce 00 00 00    	je     c0017398 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00172ca:	66 90                	xchg   ax,ax
c00172cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172cf:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00172d5:	85 d2                	test   edx,edx
c00172d7:	74 0f                	je     c00172e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00172d9:	8b 02                	mov    eax,DWORD PTR [edx]
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	52                   	push   edx
c00172df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172e5:	83 c4 10             	add    esp,0x10
c00172e8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00172f2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]
c00172f8:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00172fe:	85 db                	test   ebx,ebx
c0017300:	74 16                	je     c0017318 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017302:	83 ec 0c             	sub    esp,0xc
c0017305:	53                   	push   ebx
c0017306:	e8 bb c4 ff ff       	call   c00137c6 <VAS::~VAS()>
c001730b:	58                   	pop    eax
c001730c:	5a                   	pop    edx
c001730d:	6a 14                	push   0x14
c001730f:	53                   	push   ebx
c0017310:	e8 12 5f ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	83 c4 1c             	add    esp,0x1c
c001731b:	5b                   	pop    ebx
c001731c:	5e                   	pop    esi
c001731d:	5f                   	pop    edi
c001731e:	5d                   	pop    ebp
c001731f:	c3                   	ret    
c0017320:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017324:	83 ec 0c             	sub    esp,0xc
c0017327:	68 74 4d 02 c0       	push   0xc0024d74
c001732c:	e8 c5 8a ff ff       	call   c000fdf6 <KePanic(char const*)>
c0017331:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	89 f7                	mov    edi,esi
c0017339:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001733d:	e9 aa fe ff ff       	jmp    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017342:	66 90                	xchg   ax,ax
c0017344:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001734a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017350:	75 1e                	jne    c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017352:	83 ec 0c             	sub    esp,0xc
c0017355:	68 dc 4d 02 c0       	push   0xc0024ddc
c001735a:	e8 ef fb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001735f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017366:	e8 79 fa ff ff       	call   c0016de4 <blockTask(TaskState)>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	66 90                	xchg   ax,ax
c0017370:	83 ec 08             	sub    esp,0x8
c0017373:	56                   	push   esi
c0017374:	68 4c ea 02 c0       	push   0xc002ea4c
c0017379:	e8 be a7 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001737e:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017385:	e8 ee a6 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001738a:	83 c4 10             	add    esp,0x10
c001738d:	39 f8                	cmp    eax,edi
c001738f:	0f 84 37 ff ff ff    	je     c00172cc <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017395:	8d 76 00             	lea    esi,[esi+0x0]
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	68 4c ea 02 c0       	push   0xc002ea4c
c00173a0:	e8 d3 a6 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173a5:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00173ac:	89 c6                	mov    esi,eax
c00173ae:	e8 cd a6 00 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	39 f3                	cmp    ebx,esi
c00173b8:	74 b6                	je     c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00173ba:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00173bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00173c6:	75 a8                	jne    c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00173c8:	e9 77 ff ff ff       	jmp    c0017344 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00173cd:	8d 76 00             	lea    esi,[esi+0x0]
c00173d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	68 a8 4d 02 c0       	push   0xc0024da8
c00173dc:	e9 4b ff ff ff       	jmp    c001732c <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00173e1:	8d 76 00             	lea    esi,[esi+0x0]
c00173e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00173ea:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00173ed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173f0:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00173f6:	01 d7                	add    edi,edx
c00173f8:	89 f8                	mov    eax,edi
c00173fa:	e9 51 fe ff ff       	jmp    c0017250 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c00173ff:	90                   	nop

c0017400 <cleanerTaskFunction(void*)>:
c0017400:	53                   	push   ebx
c0017401:	83 ec 08             	sub    esp,0x8
c0017404:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001740c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017411:	85 c0                	test   eax,eax
c0017413:	75 03                	jne    c0017418 <cleanerTaskFunction(void*)+0x18>
c0017415:	fb                   	sti    
c0017416:	66 90                	xchg   ax,ax
c0017418:	fa                   	cli    
c0017419:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001741e:	83 c0 01             	add    eax,0x1
c0017421:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017428:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001742d:	0f 85 c9 00 00 00    	jne    c00174fc <cleanerTaskFunction(void*)+0xfc>
c0017433:	83 ec 0c             	sub    esp,0xc
c0017436:	6a 02                	push   0x2
c0017438:	e8 7b f9 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c0017447:	fa                   	cli    
c0017448:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001744e:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c0017454:	83 c1 01             	add    ecx,0x1
c0017457:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c001745d:	83 c3 01             	add    ebx,0x1
c0017460:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c0017466:	fa                   	cli    
c0017467:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001746c:	83 c0 01             	add    eax,0x1
c001746f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017474:	eb 2a                	jmp    c00174a0 <cleanerTaskFunction(void*)+0xa0>
c0017476:	66 90                	xchg   ax,ax
c0017478:	83 ec 0c             	sub    esp,0xc
c001747b:	68 34 ea 02 c0       	push   0xc002ea34
c0017480:	e8 f3 a5 00 00       	call   c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017485:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c001748c:	89 c3                	mov    ebx,eax
c001748e:	e8 ed a5 00 00       	call   c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017493:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017496:	e8 95 fc ff ff       	call   c0017130 <cleanupTerminatedTask(ThreadControlBlock*)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	66 90                	xchg   ax,ax
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	68 34 ea 02 c0       	push   0xc002ea34
c00174a8:	e8 af a5 00 00       	call   c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	84 c0                	test   al,al
c00174b2:	74 c4                	je     c0017478 <cleanerTaskFunction(void*)+0x78>
c00174b4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00174bc:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00174c2:	85 d2                	test   edx,edx
c00174c4:	75 02                	jne    c00174c8 <cleanerTaskFunction(void*)+0xc8>
c00174c6:	fb                   	sti    
c00174c7:	90                   	nop
c00174c8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00174cd:	83 e8 01             	sub    eax,0x1
c00174d0:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00174d5:	0f 85 29 ff ff ff    	jne    c0017404 <cleanerTaskFunction(void*)+0x4>
c00174db:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c00174e0:	85 c0                	test   eax,eax
c00174e2:	0f 84 1c ff ff ff    	je     c0017404 <cleanerTaskFunction(void*)+0x4>
c00174e8:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c00174f2:	e8 2d f8 ff ff       	call   c0016d24 <schedule()>
c00174f7:	e9 08 ff ff ff       	jmp    c0017404 <cleanerTaskFunction(void*)+0x4>
c00174fc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017504:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017509:	85 c0                	test   eax,eax
c001750b:	0f 85 2f ff ff ff    	jne    c0017440 <cleanerTaskFunction(void*)+0x40>
c0017511:	fb                   	sti    
c0017512:	e9 29 ff ff ff       	jmp    c0017440 <cleanerTaskFunction(void*)+0x40>
c0017517:	90                   	nop

c0017518 <terminateTask(int)>:
c0017518:	83 ec 14             	sub    esp,0x14
c001751b:	fa                   	cli    
c001751c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017521:	83 c0 01             	add    eax,0x1
c0017524:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017529:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001752e:	83 c0 01             	add    eax,0x1
c0017531:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017536:	fa                   	cli    
c0017537:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001753c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017540:	83 c0 01             	add    eax,0x1
c0017543:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001754d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017550:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017555:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017558:	50                   	push   eax
c0017559:	68 34 ea 02 c0       	push   0xc002ea34
c001755e:	e8 d9 a5 00 00       	call   c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017572:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c0017577:	85 c0                	test   eax,eax
c0017579:	0f 84 81 00 00 00    	je     c0017600 <terminateTask(int)+0xe8>
c001757f:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c0017586:	83 ec 0c             	sub    esp,0xc
c0017589:	50                   	push   eax
c001758a:	e8 ed fa ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	66 90                	xchg   ax,ax
c0017594:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001759c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00175a1:	85 c0                	test   eax,eax
c00175a3:	75 03                	jne    c00175a8 <terminateTask(int)+0x90>
c00175a5:	fb                   	sti    
c00175a6:	66 90                	xchg   ax,ax
c00175a8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00175ad:	83 e8 01             	sub    eax,0x1
c00175b0:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00175b5:	75 09                	jne    c00175c0 <terminateTask(int)+0xa8>
c00175b7:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c00175be:	75 54                	jne    c0017614 <terminateTask(int)+0xfc>
c00175c0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00175c8:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00175ce:	85 c9                	test   ecx,ecx
c00175d0:	75 06                	jne    c00175d8 <terminateTask(int)+0xc0>
c00175d2:	66 90                	xchg   ax,ax
c00175d4:	fb                   	sti    
c00175d5:	8d 76 00             	lea    esi,[esi+0x0]
c00175d8:	fa                   	cli    
c00175d9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00175de:	83 c0 01             	add    eax,0x1
c00175e1:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00175e6:	e8 39 f7 ff ff       	call   c0016d24 <schedule()>
c00175eb:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00175f3:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00175f9:	85 d2                	test   edx,edx
c00175fb:	75 db                	jne    c00175d8 <terminateTask(int)+0xc0>
c00175fd:	eb d5                	jmp    c00175d4 <terminateTask(int)+0xbc>
c00175ff:	90                   	nop
c0017600:	83 ec 0c             	sub    esp,0xc
c0017603:	68 ec 4c 02 c0       	push   0xc0024cec
c0017608:	e8 41 f9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001760d:	83 c4 10             	add    esp,0x10
c0017610:	eb 82                	jmp    c0017594 <terminateTask(int)+0x7c>
c0017612:	66 90                	xchg   ax,ax
c0017614:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001761e:	e8 01 f7 ff ff       	call   c0016d24 <schedule()>
c0017623:	eb 9b                	jmp    c00175c0 <terminateTask(int)+0xa8>
c0017625:	8d 76 00             	lea    esi,[esi+0x0]

c0017628 <Thr::terminateFromIRQ(int)>:
c0017628:	83 ec 18             	sub    esp,0x18
c001762b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001762f:	50                   	push   eax
c0017630:	e8 e3 fe ff ff       	call   c0017518 <terminateTask(int)>
c0017635:	8d 76 00             	lea    esi,[esi+0x0]

c0017638 <__static_initialization_and_destruction_0(int, int)>:
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017640:	0f 85 8e 00 00 00    	jne    c00176d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017646:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001764e:	0f 85 80 00 00 00    	jne    c00176d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	68 4c ea 02 c0       	push   0xc002ea4c
c001765c:	e8 7b a9 00 00       	call   c0021fdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	83 ec 04             	sub    esp,0x4
c0017667:	68 f8 5d 02 c0       	push   0xc0025df8
c001766c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017671:	68 8c 1f 02 c0       	push   0xc0021f8c
c0017676:	e8 5c 5b ff ff       	call   c000d1d7 <__cxa_atexit>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	83 ec 0c             	sub    esp,0xc
c0017681:	68 40 ea 02 c0       	push   0xc002ea40
c0017686:	e8 51 a9 00 00       	call   c0021fdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	83 ec 04             	sub    esp,0x4
c0017691:	68 f8 5d 02 c0       	push   0xc0025df8
c0017696:	68 40 ea 02 c0       	push   0xc002ea40
c001769b:	68 8c 1f 02 c0       	push   0xc0021f8c
c00176a0:	e8 32 5b ff ff       	call   c000d1d7 <__cxa_atexit>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	68 34 ea 02 c0       	push   0xc002ea34
c00176b0:	e8 27 a9 00 00       	call   c0021fdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	83 ec 04             	sub    esp,0x4
c00176bb:	68 f8 5d 02 c0       	push   0xc0025df8
c00176c0:	68 34 ea 02 c0       	push   0xc002ea34
c00176c5:	68 8c 1f 02 c0       	push   0xc0021f8c
c00176ca:	e8 08 5b ff ff       	call   c000d1d7 <__cxa_atexit>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	90                   	nop
c00176d5:	83 c4 0c             	add    esp,0xc
c00176d8:	c3                   	ret    
c00176d9:	8d 76 00             	lea    esi,[esi+0x0]

c00176dc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00176dc:	83 ec 0c             	sub    esp,0xc
c00176df:	83 ec 08             	sub    esp,0x8
c00176e2:	68 ff ff 00 00       	push   0xffff
c00176e7:	6a 01                	push   0x1
c00176e9:	e8 4a ff ff ff       	call   c0017638 <__static_initialization_and_destruction_0(int, int)>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	83 c4 0c             	add    esp,0xc
c00176f4:	c3                   	ret    

c00176f5 <Vm::inbv(unsigned short)>:
c00176f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00176f9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00176fe:	75 06                	jne    c0017706 <Vm::inbv(unsigned short)+0x11>
c0017700:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c0017705:	c3                   	ret    
c0017706:	ec                   	in     al,dx
c0017707:	c3                   	ret    

c0017708 <Vm::outbv(unsigned short, unsigned char)>:
c0017708:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001770c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017710:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017715:	75 25                	jne    c001773c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0017717:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c001771d:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c0017723:	8d 51 01             	lea    edx,[ecx+0x1]
c0017726:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c001772c:	83 fa 20             	cmp    edx,0x20
c001772f:	75 0c                	jne    c001773d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017731:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c001773b:	c3                   	ret    
c001773c:	ee                   	out    dx,al
c001773d:	c3                   	ret    

c001773e <Vm::realToLinear(unsigned short, unsigned short)>:
c001773e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017743:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017748:	c1 e0 04             	shl    eax,0x4
c001774b:	01 d0                	add    eax,edx
c001774d:	c3                   	ret    

c001774e <Vm::getSegment(unsigned int)>:
c001774e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017752:	c1 e8 10             	shr    eax,0x10
c0017755:	c3                   	ret    

c0017756 <Vm::getOffset(unsigned int)>:
c0017756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001775a:	c3                   	ret    

c001775b <Vm::mainloop2()>:
c001775b:	83 ec 18             	sub    esp,0x18
c001775e:	fa                   	cli    
c001775f:	6a 02                	push   0x2
c0017761:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017767:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c001776e:	e8 45 f6 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017778:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001777c:	52                   	push   edx
c001777d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017781:	52                   	push   edx
c0017782:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017786:	52                   	push   edx
c0017787:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001778b:	50                   	push   eax
c001778c:	e8 7e 8a fe ff       	call   c000020f <goToVM86>
c0017791:	83 c4 2c             	add    esp,0x2c
c0017794:	c3                   	ret    

c0017795 <Vm::mainVm8086Loop(void*)>:
c0017795:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001779c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00177a3:	75 01                	jne    c00177a6 <Vm::mainVm8086Loop(void*)+0x11>
c00177a5:	fb                   	sti    
c00177a6:	eb b3                	jmp    c001775b <Vm::mainloop2()>

c00177a8 <Vm::mainloop3(unsigned long)>:
c00177a8:	83 ec 18             	sub    esp,0x18
c00177ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177af:	fa                   	cli    
c00177b0:	6a 02                	push   0x2
c00177b2:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00177b8:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c00177bf:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c00177c4:	e8 ef f5 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177c9:	83 c4 1c             	add    esp,0x1c
c00177cc:	eb 8d                	jmp    c001775b <Vm::mainloop2()>

c00177ce <Vm::initialise8086()>:
c00177ce:	83 ec 0c             	sub    esp,0xc
c00177d1:	68 80 00 00 00       	push   0x80
c00177d6:	6a 00                	push   0x0
c00177d8:	68 95 77 01 c0       	push   0xc0017795
c00177dd:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00177e3:	e8 bc f2 ff ff       	call   c0016aa4 <Process::createThread(void (*)(void*), void*, int)>
c00177e8:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00177ef:	68 10 01 00 00       	push   0x110
c00177f4:	6a 00                	push   0x0
c00177f6:	6a 00                	push   0x0
c00177f8:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c00177fd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017802:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0017808:	e8 1b c3 ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001780d:	83 c4 2c             	add    esp,0x2c
c0017810:	c3                   	ret    

c0017811 <Vm::resetConventionalMemory8086()>:
c0017811:	c3                   	ret    

c0017812 <Vm::finish8086()>:
c0017812:	53                   	push   ebx
c0017813:	83 ec 08             	sub    esp,0x8
c0017816:	fa                   	cli    
c0017817:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001781d:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017824:	75 18                	jne    c001783e <Vm::finish8086()+0x2c>
c0017826:	e8 f9 f4 ff ff       	call   c0016d24 <schedule()>
c001782b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017832:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017839:	75 db                	jne    c0017816 <Vm::finish8086()+0x4>
c001783b:	fb                   	sti    
c001783c:	eb d8                	jmp    c0017816 <Vm::finish8086()+0x4>
c001783e:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c0017845:	83 ec 0c             	sub    esp,0xc
c0017848:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c001784e:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017854:	e8 23 f8 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017859:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017860:	83 c4 10             	add    esp,0x10
c0017863:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001786a:	75 01                	jne    c001786d <Vm::finish8086()+0x5b>
c001786c:	fb                   	sti    
c001786d:	83 c4 08             	add    esp,0x8
c0017870:	89 d8                	mov    eax,ebx
c0017872:	5b                   	pop    ebx
c0017873:	c3                   	ret    

c0017874 <Vm::getOutput8086(unsigned char*)>:
c0017874:	57                   	push   edi
c0017875:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c001787b:	56                   	push   esi
c001787c:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c0017881:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017885:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017887:	5e                   	pop    esi
c0017888:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c001788d:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017897:	5f                   	pop    edi
c0017898:	c3                   	ret    

c0017899 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017899:	55                   	push   ebp
c001789a:	57                   	push   edi
c001789b:	56                   	push   esi
c001789c:	53                   	push   ebx
c001789d:	83 ec 2c             	sub    esp,0x2c
c00178a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00178a4:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c00178ab:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00178af:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00178b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178b7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00178bb:	75 5d                	jne    c001791a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00178bd:	83 ec 0c             	sub    esp,0xc
c00178c0:	68 14 01 00 00       	push   0x114
c00178c5:	e8 e6 81 ff ff       	call   c000fab0 <malloc>
c00178ca:	83 c4 0c             	add    esp,0xc
c00178cd:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00178d3:	68 04 4e 02 c0       	push   0xc0024e04
c00178d8:	50                   	push   eax
c00178d9:	89 c7                	mov    edi,eax
c00178db:	e8 4c 08 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00178e0:	58                   	pop    eax
c00178e1:	5a                   	pop    edx
c00178e2:	6a 12                	push   0x12
c00178e4:	57                   	push   edi
c00178e5:	e8 60 08 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00178ea:	8b 07                	mov    eax,DWORD PTR [edi]
c00178ec:	59                   	pop    ecx
c00178ed:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00178f1:	51                   	push   ecx
c00178f2:	6a 00                	push   0x0
c00178f4:	6a 00                	push   0x0
c00178f6:	68 00 00 11 00       	push   0x110000
c00178fb:	57                   	push   edi
c00178fc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00178ff:	83 c4 14             	add    esp,0x14
c0017902:	57                   	push   edi
c0017903:	e8 a0 08 ff ff       	call   c00081a8 <File::close()>
c0017908:	8b 07                	mov    eax,DWORD PTR [edi]
c001790a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001790d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c001791a:	fa                   	cli    
c001791b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017921:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017928:	75 18                	jne    c0017942 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c001792a:	e8 f5 f3 ff ff       	call   c0016d24 <schedule()>
c001792f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017936:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001793d:	75 db                	jne    c001791a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001793f:	fb                   	sti    
c0017940:	eb d8                	jmp    c001791a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017942:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c001794c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017950:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017955:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017959:	0f b7 f6             	movzx  esi,si
c001795c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017960:	0f b7 db             	movzx  ebx,bx
c0017963:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017967:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c001796b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001796f:	50                   	push   eax
c0017970:	6a 20                	push   0x20
c0017972:	6a 00                	push   0x0
c0017974:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017979:	e8 72 8b fe ff       	call   c00004f0 <memset>
c001797e:	5a                   	pop    edx
c001797f:	59                   	pop    ecx
c0017980:	56                   	push   esi
c0017981:	53                   	push   ebx
c0017982:	e8 b7 fd ff ff       	call   c001773e <Vm::realToLinear(unsigned short, unsigned short)>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001798e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017992:	89 c7                	mov    edi,eax
c0017994:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017996:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c001799d:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00179a4:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00179ab:	75 01                	jne    c00179ae <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c00179ad:	fb                   	sti    
c00179ae:	83 ec 0c             	sub    esp,0xc
c00179b1:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c00179b7:	e8 c0 f6 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c00179bc:	83 c4 3c             	add    esp,0x3c
c00179bf:	b0 01                	mov    al,0x1
c00179c1:	5b                   	pop    ebx
c00179c2:	5e                   	pop    esi
c00179c3:	5f                   	pop    edi
c00179c4:	5d                   	pop    ebp
c00179c5:	c3                   	ret    

c00179c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00179c6:	55                   	push   ebp
c00179c7:	57                   	push   edi
c00179c8:	56                   	push   esi
c00179c9:	53                   	push   ebx
c00179ca:	83 ec 2c             	sub    esp,0x2c
c00179cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d1:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c00179d8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00179dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00179e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179e4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00179e8:	75 5d                	jne    c0017a47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	68 14 01 00 00       	push   0x114
c00179f2:	e8 b9 80 ff ff       	call   c000fab0 <malloc>
c00179f7:	83 c4 0c             	add    esp,0xc
c00179fa:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017a00:	68 04 4e 02 c0       	push   0xc0024e04
c0017a05:	50                   	push   eax
c0017a06:	89 c3                	mov    ebx,eax
c0017a08:	e8 1f 07 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017a0d:	58                   	pop    eax
c0017a0e:	5a                   	pop    edx
c0017a0f:	6a 12                	push   0x12
c0017a11:	53                   	push   ebx
c0017a12:	e8 33 07 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a19:	59                   	pop    ecx
c0017a1a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017a1e:	52                   	push   edx
c0017a1f:	6a 00                	push   0x0
c0017a21:	6a 00                	push   0x0
c0017a23:	68 00 00 11 00       	push   0x110000
c0017a28:	53                   	push   ebx
c0017a29:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017a2c:	83 c4 14             	add    esp,0x14
c0017a2f:	53                   	push   ebx
c0017a30:	e8 73 07 ff ff       	call   c00081a8 <File::close()>
c0017a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017a47:	50                   	push   eax
c0017a48:	50                   	push   eax
c0017a49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a4d:	68 1f 4e 02 c0       	push   0xc0024e1f
c0017a52:	e8 f7 f4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017a57:	83 c4 10             	add    esp,0x10
c0017a5a:	fa                   	cli    
c0017a5b:	8a 1d 89 ea 02 c0    	mov    bl,BYTE PTR ds:0xc002ea89
c0017a61:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017a67:	84 db                	test   bl,bl
c0017a69:	75 18                	jne    c0017a83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0017a6b:	e8 b4 f2 ff ff       	call   c0016d24 <schedule()>
c0017a70:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a77:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a7e:	75 da                	jne    c0017a5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017a80:	fb                   	sti    
c0017a81:	eb d7                	jmp    c0017a5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017a83:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017a8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a91:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017a96:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017a9a:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017a9e:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0017aa2:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0017aa6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017aaa:	50                   	push   eax
c0017aab:	6a 20                	push   0x20
c0017aad:	6a 00                	push   0x0
c0017aaf:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017ab4:	e8 37 8a fe ff       	call   c00004f0 <memset>
c0017ab9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017ac0:	e8 eb 7f ff ff       	call   c000fab0 <malloc>
c0017ac5:	83 c4 0c             	add    esp,0xc
c0017ac8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017ace:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ad2:	89 c5                	mov    ebp,eax
c0017ad4:	50                   	push   eax
c0017ad5:	e8 52 06 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	85 ed                	test   ebp,ebp
c0017adf:	75 0a                	jne    c0017aeb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0017ae1:	83 ec 0c             	sub    esp,0xc
c0017ae4:	68 41 4e 02 c0       	push   0xc0024e41
c0017ae9:	eb 2b                	jmp    c0017b16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c0017aeb:	50                   	push   eax
c0017aec:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017af0:	50                   	push   eax
c0017af1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017af5:	50                   	push   eax
c0017af6:	55                   	push   ebp
c0017af7:	e8 50 09 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0017afc:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017b00:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017b0c:	74 28                	je     c0017b36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0017b0e:	83 ec 0c             	sub    esp,0xc
c0017b11:	68 55 4e 02 c0       	push   0xc0024e55
c0017b16:	e8 db 82 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0017b1b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017b2c:	75 01                	jne    c0017b2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0017b2e:	fb                   	sti    
c0017b2f:	31 db                	xor    ebx,ebx
c0017b31:	e9 92 00 00 00       	jmp    c0017bc8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0017b36:	51                   	push   ecx
c0017b37:	51                   	push   ecx
c0017b38:	6a 01                	push   0x1
c0017b3a:	55                   	push   ebp
c0017b3b:	e8 0a 06 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	85 c0                	test   eax,eax
c0017b45:	74 27                	je     c0017b6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	68 6e 4e 02 c0       	push   0xc0024e6e
c0017b4f:	e8 a2 82 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0017b54:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017b65:	75 c8                	jne    c0017b2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0017b67:	fb                   	sti    
c0017b68:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017b6c:	eb 5a                	jmp    c0017bc8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0017b6e:	50                   	push   eax
c0017b6f:	0f b7 ff             	movzx  edi,di
c0017b72:	50                   	push   eax
c0017b73:	0f b7 f6             	movzx  esi,si
c0017b76:	57                   	push   edi
c0017b77:	56                   	push   esi
c0017b78:	e8 c1 fb ff ff       	call   c001773e <Vm::realToLinear(unsigned short, unsigned short)>
c0017b7d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b80:	5a                   	pop    edx
c0017b81:	8d 74 24 20          	lea    esi,[esp+0x20]
c0017b85:	56                   	push   esi
c0017b86:	50                   	push   eax
c0017b87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b8f:	55                   	push   ebp
c0017b90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b93:	83 c4 14             	add    esp,0x14
c0017b96:	55                   	push   ebp
c0017b97:	e8 0c 06 ff ff       	call   c00081a8 <File::close()>
c0017b9c:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017ba3:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017baa:	83 c4 10             	add    esp,0x10
c0017bad:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017bb4:	75 01                	jne    c0017bb7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c0017bb6:	fb                   	sti    
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017bc0:	e8 b7 f4 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017bc5:	83 c4 10             	add    esp,0x10
c0017bc8:	83 c4 2c             	add    esp,0x2c
c0017bcb:	88 d8                	mov    al,bl
c0017bcd:	5b                   	pop    ebx
c0017bce:	5e                   	pop    esi
c0017bcf:	5f                   	pop    edi
c0017bd0:	5d                   	pop    ebp
c0017bd1:	c3                   	ret    

c0017bd2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017bd2:	57                   	push   edi
c0017bd3:	56                   	push   esi
c0017bd4:	53                   	push   ebx
c0017bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017be1:	83 e8 06             	sub    eax,0x6
c0017be4:	0f b7 c0             	movzx  eax,ax
c0017be7:	50                   	push   eax
c0017be8:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017bed:	50                   	push   eax
c0017bee:	e8 4b fb ff ff       	call   c001773e <Vm::realToLinear(unsigned short, unsigned short)>
c0017bf3:	5a                   	pop    edx
c0017bf4:	59                   	pop    ecx
c0017bf5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017bf8:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017bfb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017bfe:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017c04:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017c07:	8d 51 02             	lea    edx,[ecx+0x2]
c0017c0a:	66 89 10             	mov    WORD PTR [eax],dx
c0017c0d:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017c11:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017c15:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017c19:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017c1c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017c20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017c26:	89 f1                	mov    ecx,esi
c0017c28:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017c2c:	89 f2                	mov    edx,esi
c0017c2e:	0f b6 d6             	movzx  edx,dh
c0017c31:	0f b6 f1             	movzx  esi,cl
c0017c34:	74 0a                	je     c0017c40 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017c36:	c1 e2 08             	shl    edx,0x8
c0017c39:	09 f2                	or     edx,esi
c0017c3b:	80 ce 02             	or     dh,0x2
c0017c3e:	eb 08                	jmp    c0017c48 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017c40:	c1 e2 08             	shl    edx,0x8
c0017c43:	09 f2                	or     edx,esi
c0017c45:	80 e6 fd             	and    dh,0xfd
c0017c48:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017c4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c51:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017c55:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017c5d:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017c60:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017c68:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017c6b:	5b                   	pop    ebx
c0017c6c:	5e                   	pop    esi
c0017c6d:	5f                   	pop    edi
c0017c6e:	c3                   	ret    

c0017c6f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017c6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c74:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c79:	c1 e0 04             	shl    eax,0x4
c0017c7c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017c7f:	c3                   	ret    

c0017c80 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017c80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c8a:	c1 e0 04             	shl    eax,0x4
c0017c8d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017c91:	c3                   	ret    

c0017c92 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017c92:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c97:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c9c:	c1 e0 04             	shl    eax,0x4
c0017c9f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017ca2:	c3                   	ret    

c0017ca3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017ca3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ca8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017cad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017cb1:	c1 e0 04             	shl    eax,0x4
c0017cb4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017cb7:	c3                   	ret    

c0017cb8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017cb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017cbd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017cc2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cc6:	c1 e0 04             	shl    eax,0x4
c0017cc9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017ccd:	c3                   	ret    

c0017cce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017cce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017cd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017cd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cdc:	c1 e0 04             	shl    eax,0x4
c0017cdf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017ce2:	c3                   	ret    

c0017ce3 <Vm::faultHandler(regs*)>:
c0017ce3:	55                   	push   ebp
c0017ce4:	57                   	push   edi
c0017ce5:	56                   	push   esi
c0017ce6:	53                   	push   ebx
c0017ce7:	83 ec 2c             	sub    esp,0x2c
c0017cea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017cee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017cf1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017cf5:	0f b7 f8             	movzx  edi,ax
c0017cf8:	0f b7 c0             	movzx  eax,ax
c0017cfb:	52                   	push   edx
c0017cfc:	50                   	push   eax
c0017cfd:	e8 3c fa ff ff       	call   c001773e <Vm::realToLinear(unsigned short, unsigned short)>
c0017d02:	5a                   	pop    edx
c0017d03:	59                   	pop    ecx
c0017d04:	89 c1                	mov    ecx,eax
c0017d06:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017d09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d0d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017d12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017d19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d1d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017d22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d2e:	e8 0b fa ff ff       	call   c001773e <Vm::realToLinear(unsigned short, unsigned short)>
c0017d33:	5e                   	pop    esi
c0017d34:	be 06 00 00 00       	mov    esi,0x6
c0017d39:	5d                   	pop    ebp
c0017d3a:	31 ed                	xor    ebp,ebp
c0017d3c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017d41:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017d44:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017d4a:	0f 84 74 02 00 00    	je     c0017fc4 <Vm::faultHandler(regs*)+0x2e1>
c0017d50:	0f 87 94 00 00 00    	ja     c0017dea <Vm::faultHandler(regs*)+0x107>
c0017d56:	83 fa 66             	cmp    edx,0x66
c0017d59:	0f 84 e2 01 00 00    	je     c0017f41 <Vm::faultHandler(regs*)+0x25e>
c0017d5f:	77 47                	ja     c0017da8 <Vm::faultHandler(regs*)+0xc5>
c0017d61:	83 fa 36             	cmp    edx,0x36
c0017d64:	0f 84 ca 01 00 00    	je     c0017f34 <Vm::faultHandler(regs*)+0x251>
c0017d6a:	77 1a                	ja     c0017d86 <Vm::faultHandler(regs*)+0xa3>
c0017d6c:	83 fa 26             	cmp    edx,0x26
c0017d6f:	0f 84 98 01 00 00    	je     c0017f0d <Vm::faultHandler(regs*)+0x22a>
c0017d75:	83 fa 2e             	cmp    edx,0x2e
c0017d78:	0f 85 27 06 00 00    	jne    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017d7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d81:	31 f6                	xor    esi,esi
c0017d83:	41                   	inc    ecx
c0017d84:	eb bb                	jmp    c0017d41 <Vm::faultHandler(regs*)+0x5e>
c0017d86:	83 fa 64             	cmp    edx,0x64
c0017d89:	0f 84 8b 01 00 00    	je     c0017f1a <Vm::faultHandler(regs*)+0x237>
c0017d8f:	0f 87 92 01 00 00    	ja     c0017f27 <Vm::faultHandler(regs*)+0x244>
c0017d95:	83 fa 3e             	cmp    edx,0x3e
c0017d98:	0f 85 07 06 00 00    	jne    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017d9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017da1:	be 01 00 00 00       	mov    esi,0x1
c0017da6:	eb db                	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017da8:	83 fa 6d             	cmp    edx,0x6d
c0017dab:	0f 84 34 03 00 00    	je     c00180e5 <Vm::faultHandler(regs*)+0x402>
c0017db1:	77 17                	ja     c0017dca <Vm::faultHandler(regs*)+0xe7>
c0017db3:	83 fa 67             	cmp    edx,0x67
c0017db6:	0f 84 92 01 00 00    	je     c0017f4e <Vm::faultHandler(regs*)+0x26b>
c0017dbc:	83 fa 6c             	cmp    edx,0x6c
c0017dbf:	0f 84 b1 02 00 00    	je     c0018076 <Vm::faultHandler(regs*)+0x393>
c0017dc5:	e9 db 05 00 00       	jmp    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017dca:	83 fa 6f             	cmp    edx,0x6f
c0017dcd:	0f 84 40 04 00 00    	je     c0018213 <Vm::faultHandler(regs*)+0x530>
c0017dd3:	0f 82 a2 03 00 00    	jb     c001817b <Vm::faultHandler(regs*)+0x498>
c0017dd9:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017ddf:	0f 84 76 01 00 00    	je     c0017f5b <Vm::faultHandler(regs*)+0x278>
c0017de5:	e9 bb 05 00 00       	jmp    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017dea:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017df0:	0f 84 57 05 00 00    	je     c001834d <Vm::faultHandler(regs*)+0x66a>
c0017df6:	0f 87 a9 00 00 00    	ja     c0017ea5 <Vm::faultHandler(regs*)+0x1c2>
c0017dfc:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017e02:	0f 84 d6 04 00 00    	je     c00182de <Vm::faultHandler(regs*)+0x5fb>
c0017e08:	77 78                	ja     c0017e82 <Vm::faultHandler(regs*)+0x19f>
c0017e0a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017e10:	0f 84 0e 02 00 00    	je     c0018024 <Vm::faultHandler(regs*)+0x341>
c0017e16:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017e1c:	0f 85 83 05 00 00    	jne    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017e26:	89 d1                	mov    ecx,edx
c0017e28:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017e2b:	c1 e1 08             	shl    ecx,0x8
c0017e2e:	09 ca                	or     edx,ecx
c0017e30:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017e33:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017e37:	89 d1                	mov    ecx,edx
c0017e39:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017e3d:	c1 e1 08             	shl    ecx,0x8
c0017e40:	09 ca                	or     edx,ecx
c0017e42:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017e45:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017e49:	89 d1                	mov    ecx,edx
c0017e4b:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017e4f:	c1 e1 08             	shl    ecx,0x8
c0017e52:	09 ca                	or     edx,ecx
c0017e54:	81 ca 00 02 02 00    	or     edx,0x20200
c0017e5a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017e5d:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017e61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e67:	d1 e8                	shr    eax,1
c0017e69:	83 e0 01             	and    eax,0x1
c0017e6c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017e6f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017e72:	83 c0 06             	add    eax,0x6
c0017e75:	25 ff ff 00 00       	and    eax,0xffff
c0017e7a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017e7d:	e9 1f 05 00 00       	jmp    c00183a1 <Vm::faultHandler(regs*)+0x6be>
c0017e82:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017e88:	0f 84 95 04 00 00    	je     c0018323 <Vm::faultHandler(regs*)+0x640>
c0017e8e:	0f 82 66 04 00 00    	jb     c00182fa <Vm::faultHandler(regs*)+0x617>
c0017e94:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017e9a:	0f 84 9a 04 00 00    	je     c001833a <Vm::faultHandler(regs*)+0x657>
c0017ea0:	e9 00 05 00 00       	jmp    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017ea5:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017eab:	0f 84 dd 04 00 00    	je     c001838e <Vm::faultHandler(regs*)+0x6ab>
c0017eb1:	77 2e                	ja     c0017ee1 <Vm::faultHandler(regs*)+0x1fe>
c0017eb3:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017eb9:	0f 84 aa 04 00 00    	je     c0018369 <Vm::faultHandler(regs*)+0x686>
c0017ebf:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017ec5:	0f 85 da 04 00 00    	jne    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017ecb:	50                   	push   eax
c0017ecc:	50                   	push   eax
c0017ecd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017ed1:	50                   	push   eax
c0017ed2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017ed6:	50                   	push   eax
c0017ed7:	e8 2c f8 ff ff       	call   c0017708 <Vm::outbv(unsigned short, unsigned char)>
c0017edc:	e9 a5 04 00 00       	jmp    c0018386 <Vm::faultHandler(regs*)+0x6a3>
c0017ee1:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017ee7:	0f 84 6d 01 00 00    	je     c001805a <Vm::faultHandler(regs*)+0x377>
c0017eed:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017ef3:	0f 84 6f 01 00 00    	je     c0018068 <Vm::faultHandler(regs*)+0x385>
c0017ef9:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017eff:	0f 85 a0 04 00 00    	jne    c00183a5 <Vm::faultHandler(regs*)+0x6c2>
c0017f05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f08:	e9 76 fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f0d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f10:	be 02 00 00 00       	mov    esi,0x2
c0017f15:	e9 69 fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f1a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f1d:	be 03 00 00 00       	mov    esi,0x3
c0017f22:	e9 5c fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f27:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f2a:	be 04 00 00 00       	mov    esi,0x4
c0017f2f:	e9 4f fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f34:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f37:	be 05 00 00 00       	mov    esi,0x5
c0017f3c:	e9 42 fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f44:	bd 01 00 00 00       	mov    ebp,0x1
c0017f49:	e9 35 fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f51:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017f56:	e9 28 fe ff ff       	jmp    c0017d83 <Vm::faultHandler(regs*)+0xa0>
c0017f5b:	83 e5 01             	and    ebp,0x1
c0017f5e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017f61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f65:	74 30                	je     c0017f97 <Vm::faultHandler(regs*)+0x2b4>
c0017f67:	83 e9 04             	sub    ecx,0x4
c0017f6a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017f70:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017f76:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017f79:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017f7c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017f82:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0017f86:	0f 84 12 04 00 00    	je     c001839e <Vm::faultHandler(regs*)+0x6bb>
c0017f8c:	80 ce 02             	or     dh,0x2
c0017f8f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017f92:	e9 07 04 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0017f97:	83 e9 02             	sub    ecx,0x2
c0017f9a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017fa0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017fa3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017fa7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017fad:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0017fb1:	74 05                	je     c0017fb8 <Vm::faultHandler(regs*)+0x2d5>
c0017fb3:	80 ce 02             	or     dh,0x2
c0017fb6:	eb 03                	jmp    c0017fbb <Vm::faultHandler(regs*)+0x2d8>
c0017fb8:	80 e6 fd             	and    dh,0xfd
c0017fbb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017fbf:	e9 da 03 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0017fc4:	83 e5 01             	and    ebp,0x1
c0017fc7:	74 2a                	je     c0017ff3 <Vm::faultHandler(regs*)+0x310>
c0017fc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0017fcb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017fd1:	81 ca 00 02 02 00    	or     edx,0x20200
c0017fd7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fdc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fe2:	c1 e8 09             	shr    eax,0x9
c0017fe5:	83 e0 01             	and    eax,0x1
c0017fe8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017feb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017fee:	83 c0 04             	add    eax,0x4
c0017ff1:	eb 24                	jmp    c0018017 <Vm::faultHandler(regs*)+0x334>
c0017ff3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017ff6:	81 ca 00 02 02 00    	or     edx,0x20200
c0017ffc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017fff:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018002:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018008:	c1 e8 09             	shr    eax,0x9
c001800b:	83 e0 01             	and    eax,0x1
c001800e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018011:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018014:	83 c0 02             	add    eax,0x2
c0018017:	25 ff ff 00 00       	and    eax,0xffff
c001801c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001801f:	e9 7a 03 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0018024:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018028:	3d ee 00 00 00       	cmp    eax,0xee
c001802d:	75 10                	jne    c001803f <Vm::faultHandler(regs*)+0x35c>
c001802f:	83 ec 0c             	sub    esp,0xc
c0018032:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018035:	e8 6e f7 ff ff       	call   c00177a8 <Vm::mainloop3(unsigned long)>
c001803a:	e9 4a 03 00 00       	jmp    c0018389 <Vm::faultHandler(regs*)+0x6a6>
c001803f:	83 ec 0c             	sub    esp,0xc
c0018042:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001804a:	51                   	push   ecx
c001804b:	50                   	push   eax
c001804c:	53                   	push   ebx
c001804d:	e8 80 fb ff ff       	call   c0017bd2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018052:	83 c4 20             	add    esp,0x20
c0018055:	e9 47 03 00 00       	jmp    c00183a1 <Vm::faultHandler(regs*)+0x6be>
c001805a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001805f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018063:	e9 36 03 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0018068:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018071:	e9 28 03 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0018076:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001807b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001807e:	74 2b                	je     c00180ab <Vm::faultHandler(regs*)+0x3c8>
c0018080:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018087:	76 22                	jbe    c00180ab <Vm::faultHandler(regs*)+0x3c8>
c0018089:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001808d:	50                   	push   eax
c001808e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018092:	50                   	push   eax
c0018093:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018097:	50                   	push   eax
c0018098:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001809c:	50                   	push   eax
c001809d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00180a1:	50                   	push   eax
c00180a2:	6a 6c                	push   0x6c
c00180a4:	6a 6c                	push   0x6c
c00180a6:	e9 c0 01 00 00       	jmp    c001826b <Vm::faultHandler(regs*)+0x588>
c00180ab:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00180af:	83 ec 0c             	sub    esp,0xc
c00180b2:	0f b7 f6             	movzx  esi,si
c00180b5:	50                   	push   eax
c00180b6:	e8 3a f6 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c00180bb:	83 c4 0c             	add    esp,0xc
c00180be:	0f b6 c0             	movzx  eax,al
c00180c1:	50                   	push   eax
c00180c2:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00180c6:	50                   	push   eax
c00180c7:	56                   	push   esi
c00180c8:	e8 d6 fb ff ff       	call   c0017ca3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00180cd:	83 c4 10             	add    esp,0x10
c00180d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00180d3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00180d7:	74 03                	je     c00180dc <Vm::faultHandler(regs*)+0x3f9>
c00180d9:	48                   	dec    eax
c00180da:	eb 01                	jmp    c00180dd <Vm::faultHandler(regs*)+0x3fa>
c00180dc:	40                   	inc    eax
c00180dd:	0f b7 c0             	movzx  eax,ax
c00180e0:	e9 8e 00 00 00       	jmp    c0018173 <Vm::faultHandler(regs*)+0x490>
c00180e5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00180ea:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00180ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00180f0:	74 29                	je     c001811b <Vm::faultHandler(regs*)+0x438>
c00180f2:	3d ff ff 00 00       	cmp    eax,0xffff
c00180f7:	76 22                	jbe    c001811b <Vm::faultHandler(regs*)+0x438>
c00180f9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00180fd:	50                   	push   eax
c00180fe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018102:	50                   	push   eax
c0018103:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018107:	50                   	push   eax
c0018108:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001810c:	50                   	push   eax
c001810d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018111:	50                   	push   eax
c0018112:	6a 6d                	push   0x6d
c0018114:	6a 6d                	push   0x6d
c0018116:	e9 50 01 00 00       	jmp    c001826b <Vm::faultHandler(regs*)+0x588>
c001811b:	83 e5 01             	and    ebp,0x1
c001811e:	0f b7 c8             	movzx  ecx,ax
c0018121:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018124:	0f b7 f6             	movzx  esi,si
c0018127:	74 1e                	je     c0018147 <Vm::faultHandler(regs*)+0x464>
c0018129:	ed                   	in     eax,dx
c001812a:	55                   	push   ebp
c001812b:	50                   	push   eax
c001812c:	51                   	push   ecx
c001812d:	56                   	push   esi
c001812e:	e8 9b fb ff ff       	call   c0017cce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018133:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	8d 50 04             	lea    edx,[eax+0x4]
c001813c:	83 e8 04             	sub    eax,0x4
c001813f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018145:	eb 20                	jmp    c0018167 <Vm::faultHandler(regs*)+0x484>
c0018147:	66 ed                	in     ax,dx
c0018149:	57                   	push   edi
c001814a:	0f b7 c0             	movzx  eax,ax
c001814d:	50                   	push   eax
c001814e:	51                   	push   ecx
c001814f:	56                   	push   esi
c0018150:	e8 63 fb ff ff       	call   c0017cb8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018155:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	8d 50 02             	lea    edx,[eax+0x2]
c001815e:	83 e8 02             	sub    eax,0x2
c0018161:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018167:	25 ff ff 00 00       	and    eax,0xffff
c001816c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018170:	0f 44 c2             	cmove  eax,edx
c0018173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018176:	e9 23 02 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c001817b:	8d 46 ff             	lea    eax,[esi-0x1]
c001817e:	0f b6 f0             	movzx  esi,al
c0018181:	83 fe 05             	cmp    esi,0x5
c0018184:	77 23                	ja     c00181a9 <Vm::faultHandler(regs*)+0x4c6>
c0018186:	ff 24 b5 e4 4e 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb11c]
c001818d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0018192:	eb 15                	jmp    c00181a9 <Vm::faultHandler(regs*)+0x4c6>
c0018194:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0018198:	eb 0f                	jmp    c00181a9 <Vm::faultHandler(regs*)+0x4c6>
c001819a:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001819e:	eb 09                	jmp    c00181a9 <Vm::faultHandler(regs*)+0x4c6>
c00181a0:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00181a4:	eb 03                	jmp    c00181a9 <Vm::faultHandler(regs*)+0x4c6>
c00181a6:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00181a9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00181ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00181b1:	74 29                	je     c00181dc <Vm::faultHandler(regs*)+0x4f9>
c00181b3:	3d ff ff 00 00       	cmp    eax,0xffff
c00181b8:	76 22                	jbe    c00181dc <Vm::faultHandler(regs*)+0x4f9>
c00181ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00181be:	50                   	push   eax
c00181bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00181c3:	50                   	push   eax
c00181c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00181c8:	50                   	push   eax
c00181c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00181cd:	50                   	push   eax
c00181ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00181d2:	50                   	push   eax
c00181d3:	6a 6e                	push   0x6e
c00181d5:	6a 6e                	push   0x6e
c00181d7:	e9 8f 00 00 00       	jmp    c001826b <Vm::faultHandler(regs*)+0x588>
c00181dc:	52                   	push   edx
c00181dd:	0f b7 c0             	movzx  eax,ax
c00181e0:	52                   	push   edx
c00181e1:	50                   	push   eax
c00181e2:	57                   	push   edi
c00181e3:	e8 87 fa ff ff       	call   c0017c6f <Vm::readByteFromReal(unsigned short, unsigned short)>
c00181e8:	59                   	pop    ecx
c00181e9:	5e                   	pop    esi
c00181ea:	0f b6 c0             	movzx  eax,al
c00181ed:	50                   	push   eax
c00181ee:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00181f2:	50                   	push   eax
c00181f3:	e8 10 f5 ff ff       	call   c0017708 <Vm::outbv(unsigned short, unsigned char)>
c00181f8:	83 c4 10             	add    esp,0x10
c00181fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00181fe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018202:	74 03                	je     c0018207 <Vm::faultHandler(regs*)+0x524>
c0018204:	48                   	dec    eax
c0018205:	eb 01                	jmp    c0018208 <Vm::faultHandler(regs*)+0x525>
c0018207:	40                   	inc    eax
c0018208:	0f b7 c0             	movzx  eax,ax
c001820b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001820e:	e9 8b 01 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0018213:	8d 46 ff             	lea    eax,[esi-0x1]
c0018216:	0f b6 f0             	movzx  esi,al
c0018219:	83 fe 05             	cmp    esi,0x5
c001821c:	77 1e                	ja     c001823c <Vm::faultHandler(regs*)+0x559>
c001821e:	ff 24 b5 fc 4e 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb104]
c0018225:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018229:	eb 11                	jmp    c001823c <Vm::faultHandler(regs*)+0x559>
c001822b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001822e:	eb 0c                	jmp    c001823c <Vm::faultHandler(regs*)+0x559>
c0018230:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018233:	eb 07                	jmp    c001823c <Vm::faultHandler(regs*)+0x559>
c0018235:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0018238:	eb 02                	jmp    c001823c <Vm::faultHandler(regs*)+0x559>
c001823a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001823c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018241:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018244:	74 37                	je     c001827d <Vm::faultHandler(regs*)+0x59a>
c0018246:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001824c:	76 2f                	jbe    c001827d <Vm::faultHandler(regs*)+0x59a>
c001824e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018252:	50                   	push   eax
c0018253:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018257:	50                   	push   eax
c0018258:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001825c:	50                   	push   eax
c001825d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018261:	50                   	push   eax
c0018262:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018266:	50                   	push   eax
c0018267:	6a 6f                	push   0x6f
c0018269:	6a 6f                	push   0x6f
c001826b:	68 87 4e 02 c0       	push   0xc0024e87
c0018270:	e8 d9 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018275:	83 c4 20             	add    esp,0x20
c0018278:	e9 86 01 00 00       	jmp    c0018403 <Vm::faultHandler(regs*)+0x720>
c001827d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018280:	0f b7 d7             	movzx  edx,di
c0018283:	0f b7 c6             	movzx  eax,si
c0018286:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018289:	81 e1 00 04 00 00    	and    ecx,0x400
c001828f:	83 e5 01             	and    ebp,0x1
c0018292:	74 1c                	je     c00182b0 <Vm::faultHandler(regs*)+0x5cd>
c0018294:	55                   	push   ebp
c0018295:	55                   	push   ebp
c0018296:	50                   	push   eax
c0018297:	52                   	push   edx
c0018298:	e8 f5 f9 ff ff       	call   c0017c92 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	89 fa                	mov    edx,edi
c00182a2:	ef                   	out    dx,eax
c00182a3:	8d 46 04             	lea    eax,[esi+0x4]
c00182a6:	83 ee 04             	sub    esi,0x4
c00182a9:	25 ff ff 00 00       	and    eax,0xffff
c00182ae:	eb 1b                	jmp    c00182cb <Vm::faultHandler(regs*)+0x5e8>
c00182b0:	55                   	push   ebp
c00182b1:	55                   	push   ebp
c00182b2:	50                   	push   eax
c00182b3:	52                   	push   edx
c00182b4:	e8 c7 f9 ff ff       	call   c0017c80 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	89 fa                	mov    edx,edi
c00182be:	66 ef                	out    dx,ax
c00182c0:	8d 46 02             	lea    eax,[esi+0x2]
c00182c3:	83 ee 02             	sub    esi,0x2
c00182c6:	25 ff ff 00 00       	and    eax,0xffff
c00182cb:	81 e6 ff ff 00 00    	and    esi,0xffff
c00182d1:	85 c9                	test   ecx,ecx
c00182d3:	0f 44 f0             	cmove  esi,eax
c00182d6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00182d9:	e9 c0 00 00 00       	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c00182de:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00182e5:	83 ec 0c             	sub    esp,0xc
c00182e8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182ec:	50                   	push   eax
c00182ed:	e8 03 f4 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c00182f2:	0f b6 c0             	movzx  eax,al
c00182f5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00182f8:	eb 3a                	jmp    c0018334 <Vm::faultHandler(regs*)+0x651>
c00182fa:	83 e5 01             	and    ebp,0x1
c00182fd:	74 07                	je     c0018306 <Vm::faultHandler(regs*)+0x623>
c00182ff:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018303:	ed                   	in     eax,dx
c0018304:	eb 14                	jmp    c001831a <Vm::faultHandler(regs*)+0x637>
c0018306:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018309:	66 31 f6             	xor    si,si
c001830c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001830f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018313:	66 ed                	in     ax,dx
c0018315:	0f b7 c0             	movzx  eax,ax
c0018318:	09 f0                	or     eax,esi
c001831a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001831d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018321:	eb 7e                	jmp    c00183a1 <Vm::faultHandler(regs*)+0x6be>
c0018323:	52                   	push   edx
c0018324:	52                   	push   edx
c0018325:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018329:	50                   	push   eax
c001832a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001832e:	50                   	push   eax
c001832f:	e8 d4 f3 ff ff       	call   c0017708 <Vm::outbv(unsigned short, unsigned char)>
c0018334:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018338:	eb 4f                	jmp    c0018389 <Vm::faultHandler(regs*)+0x6a6>
c001833a:	83 e5 01             	and    ebp,0x1
c001833d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018340:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018344:	74 03                	je     c0018349 <Vm::faultHandler(regs*)+0x666>
c0018346:	ef                   	out    dx,eax
c0018347:	eb d4                	jmp    c001831d <Vm::faultHandler(regs*)+0x63a>
c0018349:	66 ef                	out    dx,ax
c001834b:	eb d0                	jmp    c001831d <Vm::faultHandler(regs*)+0x63a>
c001834d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018351:	83 ec 0c             	sub    esp,0xc
c0018354:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001835b:	50                   	push   eax
c001835c:	e8 94 f3 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018361:	0f b6 c0             	movzx  eax,al
c0018364:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018367:	eb 1d                	jmp    c0018386 <Vm::faultHandler(regs*)+0x6a3>
c0018369:	83 e5 01             	and    ebp,0x1
c001836c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001836f:	74 03                	je     c0018374 <Vm::faultHandler(regs*)+0x691>
c0018371:	ed                   	in     eax,dx
c0018372:	eb 0d                	jmp    c0018381 <Vm::faultHandler(regs*)+0x69e>
c0018374:	66 ed                	in     ax,dx
c0018376:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018379:	0f b7 c0             	movzx  eax,ax
c001837c:	66 31 d2             	xor    dx,dx
c001837f:	09 d0                	or     eax,edx
c0018381:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018384:	eb 18                	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c0018386:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	eb 13                	jmp    c00183a1 <Vm::faultHandler(regs*)+0x6be>
c001838e:	83 e5 01             	and    ebp,0x1
c0018391:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018394:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018397:	74 03                	je     c001839c <Vm::faultHandler(regs*)+0x6b9>
c0018399:	ef                   	out    dx,eax
c001839a:	eb 02                	jmp    c001839e <Vm::faultHandler(regs*)+0x6bb>
c001839c:	66 ef                	out    dx,ax
c001839e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00183a1:	b0 01                	mov    al,0x1
c00183a3:	eb 60                	jmp    c0018405 <Vm::faultHandler(regs*)+0x722>
c00183a5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183a9:	50                   	push   eax
c00183aa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00183ae:	50                   	push   eax
c00183af:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00183b3:	50                   	push   eax
c00183b4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00183b8:	50                   	push   eax
c00183b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00183bd:	50                   	push   eax
c00183be:	52                   	push   edx
c00183bf:	52                   	push   edx
c00183c0:	68 b4 4e 02 c0       	push   0xc0024eb4
c00183c5:	e8 84 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00183ca:	83 c4 20             	add    esp,0x20
c00183cd:	83 ec 0c             	sub    esp,0xc
c00183d0:	6a 60                	push   0x60
c00183d2:	e8 1e f3 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	0f b6 d0             	movzx  edx,al
c00183dd:	83 fa 1c             	cmp    edx,0x1c
c00183e0:	74 05                	je     c00183e7 <Vm::faultHandler(regs*)+0x704>
c00183e2:	83 fa 5a             	cmp    edx,0x5a
c00183e5:	75 e6                	jne    c00183cd <Vm::faultHandler(regs*)+0x6ea>
c00183e7:	0f b6 c0             	movzx  eax,al
c00183ea:	83 f8 1c             	cmp    eax,0x1c
c00183ed:	74 05                	je     c00183f4 <Vm::faultHandler(regs*)+0x711>
c00183ef:	83 f8 5a             	cmp    eax,0x5a
c00183f2:	75 0f                	jne    c0018403 <Vm::faultHandler(regs*)+0x720>
c00183f4:	83 ec 0c             	sub    esp,0xc
c00183f7:	6a 60                	push   0x60
c00183f9:	e8 f7 f2 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	eb e4                	jmp    c00183e7 <Vm::faultHandler(regs*)+0x704>
c0018403:	31 c0                	xor    eax,eax
c0018405:	83 c4 2c             	add    esp,0x2c
c0018408:	5b                   	pop    ebx
c0018409:	5e                   	pop    esi
c001840a:	5f                   	pop    edi
c001840b:	5d                   	pop    ebp
c001840c:	c3                   	ret    
c001840d:	90                   	nop

c001840e <noCopro(unsigned long)>:
c001840e:	c3                   	ret    
c001840f:	90                   	nop

c0018410 <CPU::close(int, int, void*)>:
c0018410:	31 c0                	xor    eax,eax
c0018412:	c3                   	ret    

c0018413 <x86ReadCMOS(unsigned char)>:
c0018413:	83 ec 14             	sub    esp,0x14
c0018416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001841a:	88 04 24             	mov    BYTE PTR [esp],al
c001841d:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018422:	0f b6 c0             	movzx  eax,al
c0018425:	85 c0                	test   eax,eax
c0018427:	74 04                	je     c001842d <x86ReadCMOS(unsigned char)+0x1a>
c0018429:	b2 00                	mov    dl,0x0
c001842b:	eb 02                	jmp    c001842f <x86ReadCMOS(unsigned char)+0x1c>
c001842d:	b2 80                	mov    dl,0x80
c001842f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018432:	09 d0                	or     eax,edx
c0018434:	0f b6 c0             	movzx  eax,al
c0018437:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001843e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018442:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018446:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001844b:	ee                   	out    dx,al
c001844c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018453:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018458:	89 c2                	mov    edx,eax
c001845a:	ec                   	in     al,dx
c001845b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001845f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018463:	83 c4 14             	add    esp,0x14
c0018466:	c3                   	ret    

c0018467 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018467:	83 ec 18             	sub    esp,0x18
c001846a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001846e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018472:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018476:	88 d0                	mov    al,dl
c0018478:	88 04 24             	mov    BYTE PTR [esp],al
c001847b:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018480:	0f b6 c0             	movzx  eax,al
c0018483:	85 c0                	test   eax,eax
c0018485:	74 04                	je     c001848b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018487:	b2 00                	mov    dl,0x0
c0018489:	eb 02                	jmp    c001848d <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c001848b:	b2 80                	mov    dl,0x80
c001848d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018491:	09 d0                	or     eax,edx
c0018493:	0f b6 c0             	movzx  eax,al
c0018496:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c001849d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00184a1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00184a5:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00184aa:	ee                   	out    dx,al
c00184ab:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00184af:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00184b6:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00184ba:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00184be:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00184c3:	ee                   	out    dx,al
c00184c4:	90                   	nop
c00184c5:	83 c4 18             	add    esp,0x18
c00184c8:	c3                   	ret    

c00184c9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00184c9:	60                   	pusha  
c00184ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00184d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184d6:	9c                   	pushf  
c00184d7:	fa                   	cli    
c00184d8:	0f 09                	wbinvd 
c00184da:	0f 30                	wrmsr  
c00184dc:	9d                   	popf   
c00184dd:	89 c2                	mov    edx,eax
c00184df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e3:	89 10                	mov    DWORD PTR [eax],edx
c00184e5:	61                   	popa   
c00184e6:	90                   	nop
c00184e7:	c3                   	ret    

c00184e8 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00184e8:	60                   	pusha  
c00184e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ed:	89 c1                	mov    ecx,eax
c00184ef:	9c                   	pushf  
c00184f0:	fa                   	cli    
c00184f1:	0f 09                	wbinvd 
c00184f3:	31 c0                	xor    eax,eax
c00184f5:	31 d2                	xor    edx,edx
c00184f7:	0f 32                	rdmsr  
c00184f9:	9d                   	popf   
c00184fa:	89 c2                	mov    edx,eax
c00184fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018500:	89 10                	mov    DWORD PTR [eax],edx
c0018502:	61                   	popa   
c0018503:	90                   	nop
c0018504:	c3                   	ret    

c0018505 <AMD_K6_writeback(int, int, int)>:
c0018505:	83 ec 20             	sub    esp,0x20
c0018508:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001850d:	c1 e8 14             	shr    eax,0x14
c0018510:	c1 e8 02             	shr    eax,0x2
c0018513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018517:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001851c:	0f 85 9e 00 00 00    	jne    c00185c0 <AMD_K6_writeback(int, int, int)+0xbb>
c0018522:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018526:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001852a:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001852f:	75 19                	jne    c001854a <AMD_K6_writeback(int, int, int)+0x45>
c0018531:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018536:	7f 0a                	jg     c0018542 <AMD_K6_writeback(int, int, int)+0x3d>
c0018538:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018540:	eb 08                	jmp    c001854a <AMD_K6_writeback(int, int, int)+0x45>
c0018542:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c001854a:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c001854f:	7c 6e                	jl     c00185bf <AMD_K6_writeback(int, int, int)+0xba>
c0018551:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018556:	7e 09                	jle    c0018561 <AMD_K6_writeback(int, int, int)+0x5c>
c0018558:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c001855d:	74 36                	je     c0018595 <AMD_K6_writeback(int, int, int)+0x90>
c001855f:	eb 5e                	jmp    c00185bf <AMD_K6_writeback(int, int, int)+0xba>
c0018561:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018565:	50                   	push   eax
c0018566:	68 82 00 00 c0       	push   0xc0000082
c001856b:	e8 78 ff ff ff       	call   c00184e8 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018570:	83 c4 08             	add    esp,0x8
c0018573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018577:	d1 e0                	shl    eax,1
c0018579:	83 e0 7f             	and    eax,0x7f
c001857c:	89 c2                	mov    edx,eax
c001857e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018582:	50                   	push   eax
c0018583:	6a 00                	push   0x0
c0018585:	52                   	push   edx
c0018586:	68 82 00 00 c0       	push   0xc0000082
c001858b:	e8 39 ff ff ff       	call   c00184c9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018590:	83 c4 10             	add    esp,0x10
c0018593:	eb 2b                	jmp    c00185c0 <AMD_K6_writeback(int, int, int)+0xbb>
c0018595:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018599:	50                   	push   eax
c001859a:	68 82 00 00 c0       	push   0xc0000082
c001859f:	e8 44 ff ff ff       	call   c00184e8 <AMD_K6_read_msr(unsigned int, REGS*)>
c00185a4:	83 c4 08             	add    esp,0x8
c00185a7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00185ab:	50                   	push   eax
c00185ac:	6a 00                	push   0x0
c00185ae:	6a 00                	push   0x0
c00185b0:	68 82 00 00 c0       	push   0xc0000082
c00185b5:	e8 0f ff ff ff       	call   c00184c9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	eb 01                	jmp    c00185c0 <AMD_K6_writeback(int, int, int)+0xbb>
c00185bf:	90                   	nop
c00185c0:	90                   	nop
c00185c1:	83 c4 20             	add    esp,0x20
c00185c4:	c3                   	ret    

c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00185c5:	56                   	push   esi
c00185c6:	53                   	push   ebx
c00185c7:	a1 60 68 02 c0       	mov    eax,ds:0xc0026860
c00185cc:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00185d0:	75 32                	jne    c0018604 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00185d2:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c00185d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185dc:	89 10                	mov    DWORD PTR [eax],edx
c00185de:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c00185e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185e8:	89 10                	mov    DWORD PTR [eax],edx
c00185ea:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c00185f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185f4:	89 10                	mov    DWORD PTR [eax],edx
c00185f6:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c00185fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018600:	89 10                	mov    DWORD PTR [eax],edx
c0018602:	eb 5c                	jmp    c0018660 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018608:	ba 00 00 00 00       	mov    edx,0x0
c001860d:	89 d1                	mov    ecx,edx
c001860f:	0f a2                	cpuid  
c0018611:	89 c6                	mov    esi,eax
c0018613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018617:	89 30                	mov    DWORD PTR [eax],esi
c0018619:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001861d:	89 18                	mov    DWORD PTR [eax],ebx
c001861f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018623:	89 08                	mov    DWORD PTR [eax],ecx
c0018625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018629:	89 10                	mov    DWORD PTR [eax],edx
c001862b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862f:	a3 60 68 02 c0       	mov    ds:0xc0026860,eax
c0018634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018638:	8b 00                	mov    eax,DWORD PTR [eax]
c001863a:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c001863f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018643:	8b 00                	mov    eax,DWORD PTR [eax]
c0018645:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c001864a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001864e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018650:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c0018655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018659:	8b 00                	mov    eax,DWORD PTR [eax]
c001865b:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c0018660:	5b                   	pop    ebx
c0018661:	5e                   	pop    esi
c0018662:	c3                   	ret    

c0018663 <cpuidCheckEDX(unsigned int)>:
c0018663:	83 ec 10             	sub    esp,0x10
c0018666:	89 e0                	mov    eax,esp
c0018668:	50                   	push   eax
c0018669:	8d 44 24 08          	lea    eax,[esp+0x8]
c001866d:	50                   	push   eax
c001866e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018672:	50                   	push   eax
c0018673:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018677:	50                   	push   eax
c0018678:	6a 01                	push   0x1
c001867a:	e8 46 ff ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001867f:	83 c4 14             	add    esp,0x14
c0018682:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018685:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018689:	0f 95 c0             	setne  al
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	c3                   	ret    

c0018690 <cpuidCheckECX(unsigned int)>:
c0018690:	83 ec 10             	sub    esp,0x10
c0018693:	89 e0                	mov    eax,esp
c0018695:	50                   	push   eax
c0018696:	8d 44 24 08          	lea    eax,[esp+0x8]
c001869a:	50                   	push   eax
c001869b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001869f:	50                   	push   eax
c00186a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186a4:	50                   	push   eax
c00186a5:	6a 01                	push   0x1
c00186a7:	e8 19 ff ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186ac:	83 c4 14             	add    esp,0x14
c00186af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186b3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00186b7:	0f 95 c0             	setne  al
c00186ba:	83 c4 10             	add    esp,0x10
c00186bd:	c3                   	ret    

c00186be <cpuidCheckExtendedEBX(unsigned int)>:
c00186be:	83 ec 10             	sub    esp,0x10
c00186c1:	89 e0                	mov    eax,esp
c00186c3:	50                   	push   eax
c00186c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186c8:	50                   	push   eax
c00186c9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00186cd:	50                   	push   eax
c00186ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186d2:	50                   	push   eax
c00186d3:	6a 07                	push   0x7
c00186d5:	e8 eb fe ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186da:	83 c4 14             	add    esp,0x14
c00186dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186e1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00186e5:	0f 95 c0             	setne  al
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	c3                   	ret    

c00186ec <cpuidCheckExtendedECX(unsigned int)>:
c00186ec:	83 ec 10             	sub    esp,0x10
c00186ef:	89 e0                	mov    eax,esp
c00186f1:	50                   	push   eax
c00186f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186f6:	50                   	push   eax
c00186f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00186fb:	50                   	push   eax
c00186fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018700:	50                   	push   eax
c0018701:	6a 07                	push   0x7
c0018703:	e8 bd fe ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018708:	83 c4 14             	add    esp,0x14
c001870b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001870f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018713:	0f 95 c0             	setne  al
c0018716:	83 c4 10             	add    esp,0x10
c0018719:	c3                   	ret    

c001871a <HalDetectFeatures()>:
c001871a:	57                   	push   edi
c001871b:	56                   	push   esi
c001871c:	53                   	push   ebx
c001871d:	81 ec 90 00 00 00    	sub    esp,0x90
c0018723:	83 ec 04             	sub    esp,0x4
c0018726:	6a 08                	push   0x8
c0018728:	6a 00                	push   0x0
c001872a:	68 0c eb 02 c0       	push   0xc002eb0c
c001872f:	e8 bc 7d fe ff       	call   c00004f0 <memset>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001873c:	83 c8 04             	or     eax,0x4
c001873f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018744:	e8 b0 7a fe ff       	call   c00001f9 <detectCPUID>
c0018749:	85 c0                	test   eax,eax
c001874b:	0f 95 c0             	setne  al
c001874e:	83 e0 01             	and    eax,0x1
c0018751:	83 e0 01             	and    eax,0x1
c0018754:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018757:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001875c:	83 e0 fd             	and    eax,0xfffffffd
c001875f:	88 c2                	mov    dl,al
c0018761:	88 c8                	mov    al,cl
c0018763:	09 d0                	or     eax,edx
c0018765:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001876a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001876f:	83 e0 02             	and    eax,0x2
c0018772:	0f b6 c0             	movzx  eax,al
c0018775:	85 c0                	test   eax,eax
c0018777:	0f 84 7f 02 00 00    	je     c00189fc <HalDetectFeatures()+0x2e2>
c001877d:	83 ec 0c             	sub    esp,0xc
c0018780:	6a 20                	push   0x20
c0018782:	e8 dc fe ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018787:	83 c4 10             	add    esp,0x10
c001878a:	83 e0 01             	and    eax,0x1
c001878d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018794:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018799:	83 e0 f7             	and    eax,0xfffffff7
c001879c:	88 c2                	mov    dl,al
c001879e:	88 c8                	mov    al,cl
c00187a0:	09 d0                	or     eax,edx
c00187a2:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	68 00 00 00 04       	push   0x4000000
c00187af:	e8 af fe ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	89 c1                	mov    ecx,eax
c00187b9:	83 e1 01             	and    ecx,0x1
c00187bc:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00187c1:	83 e0 fe             	and    eax,0xfffffffe
c00187c4:	88 c2                	mov    dl,al
c00187c6:	88 c8                	mov    al,cl
c00187c8:	09 d0                	or     eax,edx
c00187ca:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	68 80 00 00 00       	push   0x80
c00187d7:	e8 87 fe ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c00187dc:	83 c4 10             	add    esp,0x10
c00187df:	89 c1                	mov    ecx,eax
c00187e1:	c1 e1 07             	shl    ecx,0x7
c00187e4:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00187e9:	83 e0 7f             	and    eax,0x7f
c00187ec:	88 c2                	mov    dl,al
c00187ee:	88 c8                	mov    al,cl
c00187f0:	09 d0                	or     eax,edx
c00187f2:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00187f7:	83 ec 0c             	sub    esp,0xc
c00187fa:	68 00 00 80 00       	push   0x800000
c00187ff:	e8 5f fe ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	83 e0 01             	and    eax,0x1
c001880a:	89 c1                	mov    ecx,eax
c001880c:	c1 e1 05             	shl    ecx,0x5
c001880f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018814:	83 e0 df             	and    eax,0xffffffdf
c0018817:	88 c2                	mov    dl,al
c0018819:	88 c8                	mov    al,cl
c001881b:	09 d0                	or     eax,edx
c001881d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018822:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018827:	83 e0 01             	and    eax,0x1
c001882a:	75 0c                	jne    c0018838 <HalDetectFeatures()+0x11e>
c001882c:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018831:	25 00 04 00 00       	and    eax,0x400
c0018836:	74 0f                	je     c0018847 <HalDetectFeatures()+0x12d>
c0018838:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001883d:	83 e0 fe             	and    eax,0xfffffffe
c0018840:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018845:	eb 28                	jmp    c001886f <HalDetectFeatures()+0x155>
c0018847:	83 ec 0c             	sub    esp,0xc
c001884a:	68 00 02 00 00       	push   0x200
c001884f:	e8 0f fe ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	89 c1                	mov    ecx,eax
c0018859:	83 e1 01             	and    ecx,0x1
c001885c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018861:	83 e0 fe             	and    eax,0xfffffffe
c0018864:	88 c2                	mov    dl,al
c0018866:	88 c8                	mov    al,cl
c0018868:	09 d0                	or     eax,edx
c001886a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001886f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018874:	83 e0 01             	and    eax,0x1
c0018877:	0f b6 c0             	movzx  eax,al
c001887a:	85 c0                	test   eax,eax
c001887c:	74 1c                	je     c001889a <HalDetectFeatures()+0x180>
c001887e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018883:	83 e0 08             	and    eax,0x8
c0018886:	0f b6 c0             	movzx  eax,al
c0018889:	85 c0                	test   eax,eax
c001888b:	75 0d                	jne    c001889a <HalDetectFeatures()+0x180>
c001888d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018892:	83 e0 fe             	and    eax,0xfffffffe
c0018895:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001889a:	83 ec 0c             	sub    esp,0xc
c001889d:	68 14 4f 02 c0       	push   0xc0024f14
c00188a2:	e8 a7 e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188af:	83 e0 fe             	and    eax,0xfffffffe
c00188b2:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00188b7:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00188bf:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00188c7:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00188cf:	85 c0                	test   eax,eax
c00188d1:	0f 84 ab 00 00 00    	je     c0018982 <HalDetectFeatures()+0x268>
c00188d7:	83 ec 0c             	sub    esp,0xc
c00188da:	6a 01                	push   0x1
c00188dc:	e8 af fd ff ff       	call   c0018690 <cpuidCheckECX(unsigned int)>
c00188e1:	83 c4 10             	add    esp,0x10
c00188e4:	83 e0 01             	and    eax,0x1
c00188e7:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00188ea:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00188ef:	83 e0 fd             	and    eax,0xfffffffd
c00188f2:	88 c2                	mov    dl,al
c00188f4:	88 c8                	mov    al,cl
c00188f6:	09 d0                	or     eax,edx
c00188f8:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	68 00 02 00 00       	push   0x200
c0018905:	e8 86 fd ff ff       	call   c0018690 <cpuidCheckECX(unsigned int)>
c001890a:	83 c4 10             	add    esp,0x10
c001890d:	83 e0 01             	and    eax,0x1
c0018910:	89 c1                	mov    ecx,eax
c0018912:	c1 e1 04             	shl    ecx,0x4
c0018915:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001891a:	83 e0 ef             	and    eax,0xffffffef
c001891d:	88 c2                	mov    dl,al
c001891f:	88 c8                	mov    al,cl
c0018921:	09 d0                	or     eax,edx
c0018923:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	68 00 00 08 00       	push   0x80000
c0018930:	e8 5b fd ff ff       	call   c0018690 <cpuidCheckECX(unsigned int)>
c0018935:	83 c4 10             	add    esp,0x10
c0018938:	83 e0 01             	and    eax,0x1
c001893b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018942:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018947:	83 e0 fb             	and    eax,0xfffffffb
c001894a:	88 c2                	mov    dl,al
c001894c:	88 c8                	mov    al,cl
c001894e:	09 d0                	or     eax,edx
c0018950:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018955:	83 ec 0c             	sub    esp,0xc
c0018958:	68 00 00 10 00       	push   0x100000
c001895d:	e8 2e fd ff ff       	call   c0018690 <cpuidCheckECX(unsigned int)>
c0018962:	83 c4 10             	add    esp,0x10
c0018965:	83 e0 01             	and    eax,0x1
c0018968:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001896f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018974:	83 e0 f7             	and    eax,0xfffffff7
c0018977:	88 c2                	mov    dl,al
c0018979:	88 c8                	mov    al,cl
c001897b:	09 d0                	or     eax,edx
c001897d:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018982:	83 ec 0c             	sub    esp,0xc
c0018985:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018989:	50                   	push   eax
c001898a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001898e:	50                   	push   eax
c001898f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018993:	50                   	push   eax
c0018994:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018998:	50                   	push   eax
c0018999:	68 00 00 00 80       	push   0x80000000
c001899e:	e8 22 fc ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189a3:	83 c4 20             	add    esp,0x20
c00189a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189aa:	3d 00 00 00 80       	cmp    eax,0x80000000
c00189af:	76 4b                	jbe    c00189fc <HalDetectFeatures()+0x2e2>
c00189b1:	83 ec 0c             	sub    esp,0xc
c00189b4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00189b8:	50                   	push   eax
c00189b9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00189bd:	50                   	push   eax
c00189be:	8d 44 24 34          	lea    eax,[esp+0x34]
c00189c2:	50                   	push   eax
c00189c3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00189c7:	50                   	push   eax
c00189c8:	68 01 00 00 80       	push   0x80000001
c00189cd:	e8 f3 fb ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189d2:	83 c4 20             	add    esp,0x20
c00189d5:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00189da:	83 e0 bf             	and    eax,0xffffffbf
c00189dd:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00189e2:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00189e7:	83 e0 fd             	and    eax,0xfffffffd
c00189ea:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00189ef:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00189f4:	83 e0 fe             	and    eax,0xfffffffe
c00189f7:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00189fc:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a01:	25 00 04 00 00       	and    eax,0x400
c0018a06:	74 0d                	je     c0018a15 <HalDetectFeatures()+0x2fb>
c0018a08:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a0d:	83 e0 fb             	and    eax,0xfffffffb
c0018a10:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a15:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c0018a1c:	83 ec 04             	sub    esp,0x4
c0018a1f:	6a 0d                	push   0xd
c0018a21:	6a 00                	push   0x0
c0018a23:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018a28:	e8 c3 7a fe ff       	call   c00004f0 <memset>
c0018a2d:	83 c4 10             	add    esp,0x10
c0018a30:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a35:	83 e0 02             	and    eax,0x2
c0018a38:	0f b6 c0             	movzx  eax,al
c0018a3b:	85 c0                	test   eax,eax
c0018a3d:	0f 84 16 08 00 00    	je     c0019259 <HalDetectFeatures()+0xb3f>
c0018a43:	83 ec 0c             	sub    esp,0xc
c0018a46:	6a 10                	push   0x10
c0018a48:	e8 16 fc ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018a4d:	83 c4 10             	add    esp,0x10
c0018a50:	83 e0 01             	and    eax,0x1
c0018a53:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018a5a:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018a5f:	83 e0 f7             	and    eax,0xfffffff7
c0018a62:	88 c2                	mov    dl,al
c0018a64:	88 c8                	mov    al,cl
c0018a66:	09 d0                	or     eax,edx
c0018a68:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018a6d:	83 ec 0c             	sub    esp,0xc
c0018a70:	6a 40                	push   0x40
c0018a72:	e8 ec fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	83 e0 01             	and    eax,0x1
c0018a7d:	89 c1                	mov    ecx,eax
c0018a7f:	c1 e1 04             	shl    ecx,0x4
c0018a82:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018a87:	83 e0 ef             	and    eax,0xffffffef
c0018a8a:	88 c2                	mov    dl,al
c0018a8c:	88 c8                	mov    al,cl
c0018a8e:	09 d0                	or     eax,edx
c0018a90:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018a95:	83 ec 0c             	sub    esp,0xc
c0018a98:	6a 08                	push   0x8
c0018a9a:	e8 c4 fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	83 e0 01             	and    eax,0x1
c0018aa5:	89 c1                	mov    ecx,eax
c0018aa7:	c1 e1 05             	shl    ecx,0x5
c0018aaa:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018aaf:	83 e0 df             	and    eax,0xffffffdf
c0018ab2:	88 c2                	mov    dl,al
c0018ab4:	88 c8                	mov    al,cl
c0018ab6:	09 d0                	or     eax,edx
c0018ab8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018abd:	83 ec 0c             	sub    esp,0xc
c0018ac0:	68 00 20 00 00       	push   0x2000
c0018ac5:	e8 99 fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018aca:	83 c4 10             	add    esp,0x10
c0018acd:	83 e0 01             	and    eax,0x1
c0018ad0:	89 c1                	mov    ecx,eax
c0018ad2:	c1 e1 06             	shl    ecx,0x6
c0018ad5:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018ada:	83 e0 bf             	and    eax,0xffffffbf
c0018add:	88 c2                	mov    dl,al
c0018adf:	88 c8                	mov    al,cl
c0018ae1:	09 d0                	or     eax,edx
c0018ae3:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	68 00 00 01 00       	push   0x10000
c0018af0:	e8 6e fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018af5:	83 c4 10             	add    esp,0x10
c0018af8:	89 c1                	mov    ecx,eax
c0018afa:	c1 e1 07             	shl    ecx,0x7
c0018afd:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b02:	83 e0 7f             	and    eax,0x7f
c0018b05:	88 c2                	mov    dl,al
c0018b07:	88 c8                	mov    al,cl
c0018b09:	09 d0                	or     eax,edx
c0018b0b:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018b10:	83 ec 0c             	sub    esp,0xc
c0018b13:	6a 01                	push   0x1
c0018b15:	e8 49 fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018b1a:	83 c4 10             	add    esp,0x10
c0018b1d:	83 e0 01             	and    eax,0x1
c0018b20:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018b27:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018b2c:	83 e0 f7             	and    eax,0xfffffff7
c0018b2f:	88 c2                	mov    dl,al
c0018b31:	88 c8                	mov    al,cl
c0018b33:	09 d0                	or     eax,edx
c0018b35:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018b3a:	83 ec 0c             	sub    esp,0xc
c0018b3d:	68 00 08 00 00       	push   0x800
c0018b42:	e8 1c fb ff ff       	call   c0018663 <cpuidCheckEDX(unsigned int)>
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	89 c1                	mov    ecx,eax
c0018b4c:	83 e1 01             	and    ecx,0x1
c0018b4f:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018b54:	83 e0 fe             	and    eax,0xfffffffe
c0018b57:	88 c2                	mov    dl,al
c0018b59:	88 c8                	mov    al,cl
c0018b5b:	09 d0                	or     eax,edx
c0018b5d:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018b62:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b67:	83 e0 40             	and    eax,0x40
c0018b6a:	0f b6 c0             	movzx  eax,al
c0018b6d:	85 c0                	test   eax,eax
c0018b6f:	74 0a                	je     c0018b7b <HalDetectFeatures()+0x461>
c0018b71:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c0018b7b:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b80:	83 e0 80             	and    eax,0xffffff80
c0018b83:	0f b6 c0             	movzx  eax,al
c0018b86:	85 c0                	test   eax,eax
c0018b88:	74 0a                	je     c0018b94 <HalDetectFeatures()+0x47a>
c0018b8a:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c0018b94:	83 ec 0c             	sub    esp,0xc
c0018b97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b9b:	50                   	push   eax
c0018b9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018ba0:	50                   	push   eax
c0018ba1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ba5:	50                   	push   eax
c0018ba6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018baa:	50                   	push   eax
c0018bab:	6a 00                	push   0x0
c0018bad:	e8 13 fa ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bb2:	83 c4 20             	add    esp,0x20
c0018bb5:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018bbd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018bc5:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018bcd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018bd1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018bd5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018bd9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018bdd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018be1:	89 c6                	mov    esi,eax
c0018be3:	89 d7                	mov    edi,edx
c0018be5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018be7:	89 c8                	mov    eax,ecx
c0018be9:	89 fa                	mov    edx,edi
c0018beb:	89 f3                	mov    ebx,esi
c0018bed:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018bf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018bf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018bf9:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018bfe:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018c02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c06:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018c0a:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018c12:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018c16:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018c1a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018c1e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018c22:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018c26:	89 c6                	mov    esi,eax
c0018c28:	89 d7                	mov    edi,edx
c0018c2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c2c:	89 c8                	mov    eax,ecx
c0018c2e:	89 fa                	mov    edx,edi
c0018c30:	89 f3                	mov    ebx,esi
c0018c32:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018c36:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018c3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c3e:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018c43:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018c4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c4e:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018c52:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018c5a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018c61:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018c65:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018c69:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018c70:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018c74:	89 c6                	mov    esi,eax
c0018c76:	89 d7                	mov    edi,edx
c0018c78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c7a:	89 c8                	mov    eax,ecx
c0018c7c:	89 fa                	mov    edx,edi
c0018c7e:	89 f3                	mov    ebx,esi
c0018c80:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018c84:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018c88:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018c8c:	83 ec 08             	sub    esp,0x8
c0018c8f:	68 26 4f 02 c0       	push   0xc0024f26
c0018c94:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c99:	e8 e2 7a fe ff       	call   c0000780 <strcmp>
c0018c9e:	83 c4 10             	add    esp,0x10
c0018ca1:	85 c0                	test   eax,eax
c0018ca3:	74 19                	je     c0018cbe <HalDetectFeatures()+0x5a4>
c0018ca5:	83 ec 08             	sub    esp,0x8
c0018ca8:	68 33 4f 02 c0       	push   0xc0024f33
c0018cad:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018cb2:	e8 c9 7a fe ff       	call   c0000780 <strcmp>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	85 c0                	test   eax,eax
c0018cbc:	75 04                	jne    c0018cc2 <HalDetectFeatures()+0x5a8>
c0018cbe:	b0 01                	mov    al,0x1
c0018cc0:	eb 02                	jmp    c0018cc4 <HalDetectFeatures()+0x5aa>
c0018cc2:	b0 00                	mov    al,0x0
c0018cc4:	0f b6 c0             	movzx  eax,al
c0018cc7:	85 c0                	test   eax,eax
c0018cc9:	74 0f                	je     c0018cda <HalDetectFeatures()+0x5c0>
c0018ccb:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018cd5:	e9 0d 03 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018cda:	83 ec 08             	sub    esp,0x8
c0018cdd:	68 40 4f 02 c0       	push   0xc0024f40
c0018ce2:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ce7:	e8 94 7a fe ff       	call   c0000780 <strcmp>
c0018cec:	83 c4 10             	add    esp,0x10
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	74 19                	je     c0018d0c <HalDetectFeatures()+0x5f2>
c0018cf3:	83 ec 08             	sub    esp,0x8
c0018cf6:	68 4d 4f 02 c0       	push   0xc0024f4d
c0018cfb:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d00:	e8 7b 7a fe ff       	call   c0000780 <strcmp>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	85 c0                	test   eax,eax
c0018d0a:	75 04                	jne    c0018d10 <HalDetectFeatures()+0x5f6>
c0018d0c:	b0 01                	mov    al,0x1
c0018d0e:	eb 02                	jmp    c0018d12 <HalDetectFeatures()+0x5f8>
c0018d10:	b0 00                	mov    al,0x0
c0018d12:	0f b6 c0             	movzx  eax,al
c0018d15:	85 c0                	test   eax,eax
c0018d17:	74 0f                	je     c0018d28 <HalDetectFeatures()+0x60e>
c0018d19:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018d23:	e9 bf 02 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018d28:	83 ec 08             	sub    esp,0x8
c0018d2b:	68 5a 4f 02 c0       	push   0xc0024f5a
c0018d30:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d35:	e8 46 7a fe ff       	call   c0000780 <strcmp>
c0018d3a:	83 c4 10             	add    esp,0x10
c0018d3d:	85 c0                	test   eax,eax
c0018d3f:	74 19                	je     c0018d5a <HalDetectFeatures()+0x640>
c0018d41:	83 ec 08             	sub    esp,0x8
c0018d44:	68 67 4f 02 c0       	push   0xc0024f67
c0018d49:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d4e:	e8 2d 7a fe ff       	call   c0000780 <strcmp>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	85 c0                	test   eax,eax
c0018d58:	75 04                	jne    c0018d5e <HalDetectFeatures()+0x644>
c0018d5a:	b0 01                	mov    al,0x1
c0018d5c:	eb 02                	jmp    c0018d60 <HalDetectFeatures()+0x646>
c0018d5e:	b0 00                	mov    al,0x0
c0018d60:	0f b6 c0             	movzx  eax,al
c0018d63:	85 c0                	test   eax,eax
c0018d65:	74 0f                	je     c0018d76 <HalDetectFeatures()+0x65c>
c0018d67:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018d71:	e9 71 02 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018d76:	83 ec 08             	sub    esp,0x8
c0018d79:	68 74 4f 02 c0       	push   0xc0024f74
c0018d7e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d83:	e8 f8 79 fe ff       	call   c0000780 <strcmp>
c0018d88:	83 c4 10             	add    esp,0x10
c0018d8b:	85 c0                	test   eax,eax
c0018d8d:	0f 94 c0             	sete   al
c0018d90:	0f b6 c0             	movzx  eax,al
c0018d93:	85 c0                	test   eax,eax
c0018d95:	74 0f                	je     c0018da6 <HalDetectFeatures()+0x68c>
c0018d97:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018da1:	e9 41 02 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018da6:	83 ec 08             	sub    esp,0x8
c0018da9:	68 81 4f 02 c0       	push   0xc0024f81
c0018dae:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018db3:	e8 c8 79 fe ff       	call   c0000780 <strcmp>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	85 c0                	test   eax,eax
c0018dbd:	0f 94 c0             	sete   al
c0018dc0:	0f b6 c0             	movzx  eax,al
c0018dc3:	85 c0                	test   eax,eax
c0018dc5:	74 0f                	je     c0018dd6 <HalDetectFeatures()+0x6bc>
c0018dc7:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018dd1:	e9 11 02 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018dd6:	83 ec 08             	sub    esp,0x8
c0018dd9:	68 40 4f 02 c0       	push   0xc0024f40
c0018dde:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018de3:	e8 98 79 fe ff       	call   c0000780 <strcmp>
c0018de8:	83 c4 10             	add    esp,0x10
c0018deb:	85 c0                	test   eax,eax
c0018ded:	0f 94 c0             	sete   al
c0018df0:	0f b6 c0             	movzx  eax,al
c0018df3:	85 c0                	test   eax,eax
c0018df5:	74 0f                	je     c0018e06 <HalDetectFeatures()+0x6ec>
c0018df7:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c0018e01:	e9 e1 01 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018e06:	83 ec 08             	sub    esp,0x8
c0018e09:	68 8e 4f 02 c0       	push   0xc0024f8e
c0018e0e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e13:	e8 68 79 fe ff       	call   c0000780 <strcmp>
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	85 c0                	test   eax,eax
c0018e1d:	0f 94 c0             	sete   al
c0018e20:	0f b6 c0             	movzx  eax,al
c0018e23:	85 c0                	test   eax,eax
c0018e25:	74 0f                	je     c0018e36 <HalDetectFeatures()+0x71c>
c0018e27:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c0018e31:	e9 b1 01 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018e36:	83 ec 08             	sub    esp,0x8
c0018e39:	68 9b 4f 02 c0       	push   0xc0024f9b
c0018e3e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e43:	e8 38 79 fe ff       	call   c0000780 <strcmp>
c0018e48:	83 c4 10             	add    esp,0x10
c0018e4b:	85 c0                	test   eax,eax
c0018e4d:	0f 94 c0             	sete   al
c0018e50:	0f b6 c0             	movzx  eax,al
c0018e53:	85 c0                	test   eax,eax
c0018e55:	74 0f                	je     c0018e66 <HalDetectFeatures()+0x74c>
c0018e57:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c0018e61:	e9 81 01 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018e66:	83 ec 08             	sub    esp,0x8
c0018e69:	68 a8 4f 02 c0       	push   0xc0024fa8
c0018e6e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e73:	e8 08 79 fe ff       	call   c0000780 <strcmp>
c0018e78:	83 c4 10             	add    esp,0x10
c0018e7b:	85 c0                	test   eax,eax
c0018e7d:	0f 94 c0             	sete   al
c0018e80:	0f b6 c0             	movzx  eax,al
c0018e83:	85 c0                	test   eax,eax
c0018e85:	74 0f                	je     c0018e96 <HalDetectFeatures()+0x77c>
c0018e87:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c0018e91:	e9 51 01 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018e96:	83 ec 08             	sub    esp,0x8
c0018e99:	68 b5 4f 02 c0       	push   0xc0024fb5
c0018e9e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ea3:	e8 d8 78 fe ff       	call   c0000780 <strcmp>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	85 c0                	test   eax,eax
c0018ead:	0f 94 c0             	sete   al
c0018eb0:	0f b6 c0             	movzx  eax,al
c0018eb3:	85 c0                	test   eax,eax
c0018eb5:	74 0f                	je     c0018ec6 <HalDetectFeatures()+0x7ac>
c0018eb7:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c0018ec1:	e9 21 01 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018ec6:	83 ec 08             	sub    esp,0x8
c0018ec9:	68 c2 4f 02 c0       	push   0xc0024fc2
c0018ece:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ed3:	e8 a8 78 fe ff       	call   c0000780 <strcmp>
c0018ed8:	83 c4 10             	add    esp,0x10
c0018edb:	85 c0                	test   eax,eax
c0018edd:	0f 94 c0             	sete   al
c0018ee0:	0f b6 c0             	movzx  eax,al
c0018ee3:	85 c0                	test   eax,eax
c0018ee5:	74 0f                	je     c0018ef6 <HalDetectFeatures()+0x7dc>
c0018ee7:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c0018ef1:	e9 f1 00 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018ef6:	83 ec 08             	sub    esp,0x8
c0018ef9:	68 cf 4f 02 c0       	push   0xc0024fcf
c0018efe:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f03:	e8 78 78 fe ff       	call   c0000780 <strcmp>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	85 c0                	test   eax,eax
c0018f0d:	0f 94 c0             	sete   al
c0018f10:	0f b6 c0             	movzx  eax,al
c0018f13:	85 c0                	test   eax,eax
c0018f15:	74 0f                	je     c0018f26 <HalDetectFeatures()+0x80c>
c0018f17:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c0018f21:	e9 c1 00 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018f26:	83 ec 08             	sub    esp,0x8
c0018f29:	68 dc 4f 02 c0       	push   0xc0024fdc
c0018f2e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f33:	e8 48 78 fe ff       	call   c0000780 <strcmp>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	85 c0                	test   eax,eax
c0018f3d:	0f 94 c0             	sete   al
c0018f40:	0f b6 c0             	movzx  eax,al
c0018f43:	85 c0                	test   eax,eax
c0018f45:	74 0f                	je     c0018f56 <HalDetectFeatures()+0x83c>
c0018f47:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018f51:	e9 91 00 00 00       	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018f56:	83 ec 08             	sub    esp,0x8
c0018f59:	68 e9 4f 02 c0       	push   0xc0024fe9
c0018f5e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f63:	e8 18 78 fe ff       	call   c0000780 <strcmp>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	85 c0                	test   eax,eax
c0018f6d:	0f 94 c0             	sete   al
c0018f70:	0f b6 c0             	movzx  eax,al
c0018f73:	85 c0                	test   eax,eax
c0018f75:	74 0c                	je     c0018f83 <HalDetectFeatures()+0x869>
c0018f77:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018f81:	eb 64                	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018f83:	83 ec 08             	sub    esp,0x8
c0018f86:	68 f6 4f 02 c0       	push   0xc0024ff6
c0018f8b:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f90:	e8 eb 77 fe ff       	call   c0000780 <strcmp>
c0018f95:	83 c4 10             	add    esp,0x10
c0018f98:	85 c0                	test   eax,eax
c0018f9a:	0f 94 c0             	sete   al
c0018f9d:	0f b6 c0             	movzx  eax,al
c0018fa0:	85 c0                	test   eax,eax
c0018fa2:	74 0c                	je     c0018fb0 <HalDetectFeatures()+0x896>
c0018fa4:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018fae:	eb 37                	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018fb0:	83 ec 08             	sub    esp,0x8
c0018fb3:	68 03 50 02 c0       	push   0xc0025003
c0018fb8:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fbd:	e8 be 77 fe ff       	call   c0000780 <strcmp>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	85 c0                	test   eax,eax
c0018fc7:	0f 94 c0             	sete   al
c0018fca:	0f b6 c0             	movzx  eax,al
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	74 0c                	je     c0018fdd <HalDetectFeatures()+0x8c3>
c0018fd1:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018fdb:	eb 0a                	jmp    c0018fe7 <HalDetectFeatures()+0x8cd>
c0018fdd:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0018fe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018feb:	83 f8 06             	cmp    eax,0x6
c0018fee:	0f 86 cc 00 00 00    	jbe    c00190c0 <HalDetectFeatures()+0x9a6>
c0018ff4:	83 ec 0c             	sub    esp,0xc
c0018ff7:	68 80 00 00 00       	push   0x80
c0018ffc:	e8 bd f6 ff ff       	call   c00186be <cpuidCheckExtendedEBX(unsigned int)>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	89 c1                	mov    ecx,eax
c0019006:	83 e1 01             	and    ecx,0x1
c0019009:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001900e:	83 e0 fe             	and    eax,0xfffffffe
c0019011:	88 c2                	mov    dl,al
c0019013:	88 c8                	mov    al,cl
c0019015:	09 d0                	or     eax,edx
c0019017:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001901c:	83 ec 0c             	sub    esp,0xc
c001901f:	68 00 00 10 00       	push   0x100000
c0019024:	e8 95 f6 ff ff       	call   c00186be <cpuidCheckExtendedEBX(unsigned int)>
c0019029:	83 c4 10             	add    esp,0x10
c001902c:	83 e0 01             	and    eax,0x1
c001902f:	89 c1                	mov    ecx,eax
c0019031:	c1 e1 06             	shl    ecx,0x6
c0019034:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019039:	83 e0 bf             	and    eax,0xffffffbf
c001903c:	88 c2                	mov    dl,al
c001903e:	88 c8                	mov    al,cl
c0019040:	09 d0                	or     eax,edx
c0019042:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019047:	83 ec 0c             	sub    esp,0xc
c001904a:	68 00 00 04 00       	push   0x40000
c001904f:	e8 6a f6 ff ff       	call   c00186be <cpuidCheckExtendedEBX(unsigned int)>
c0019054:	83 c4 10             	add    esp,0x10
c0019057:	83 e0 01             	and    eax,0x1
c001905a:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001905d:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019062:	83 e0 fd             	and    eax,0xfffffffd
c0019065:	88 c2                	mov    dl,al
c0019067:	88 c8                	mov    al,cl
c0019069:	09 d0                	or     eax,edx
c001906b:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019070:	83 ec 0c             	sub    esp,0xc
c0019073:	6a 04                	push   0x4
c0019075:	e8 72 f6 ff ff       	call   c00186ec <cpuidCheckExtendedECX(unsigned int)>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	83 e0 01             	and    eax,0x1
c0019080:	89 c1                	mov    ecx,eax
c0019082:	c1 e1 05             	shl    ecx,0x5
c0019085:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001908a:	83 e0 df             	and    eax,0xffffffdf
c001908d:	88 c2                	mov    dl,al
c001908f:	88 c8                	mov    al,cl
c0019091:	09 d0                	or     eax,edx
c0019093:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019098:	83 ec 0c             	sub    esp,0xc
c001909b:	6a 20                	push   0x20
c001909d:	e8 4a f6 ff ff       	call   c00186ec <cpuidCheckExtendedECX(unsigned int)>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	83 e0 01             	and    eax,0x1
c00190a8:	89 c1                	mov    ecx,eax
c00190aa:	c1 e1 04             	shl    ecx,0x4
c00190ad:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00190b2:	83 e0 ef             	and    eax,0xffffffef
c00190b5:	88 c2                	mov    dl,al
c00190b7:	88 c8                	mov    al,cl
c00190b9:	09 d0                	or     eax,edx
c00190bb:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190c7:	50                   	push   eax
c00190c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190cc:	50                   	push   eax
c00190cd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00190d1:	50                   	push   eax
c00190d2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00190d6:	50                   	push   eax
c00190d7:	6a 01                	push   0x1
c00190d9:	e8 e7 f4 ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190de:	83 c4 20             	add    esp,0x20
c00190e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190e5:	83 e0 0f             	and    eax,0xf
c00190e8:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c00190ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190f1:	c1 e8 04             	shr    eax,0x4
c00190f4:	83 e0 0f             	and    eax,0xf
c00190f7:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c00190fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019100:	c1 e8 08             	shr    eax,0x8
c0019103:	83 e0 0f             	and    eax,0xf
c0019106:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c001910b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001910f:	c1 e8 0c             	shr    eax,0xc
c0019112:	83 e0 03             	and    eax,0x3
c0019115:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c001911a:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001911f:	0f b6 c0             	movzx  eax,al
c0019122:	83 f8 06             	cmp    eax,0x6
c0019125:	74 0d                	je     c0019134 <HalDetectFeatures()+0xa1a>
c0019127:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001912c:	0f b6 c0             	movzx  eax,al
c001912f:	83 f8 0f             	cmp    eax,0xf
c0019132:	75 18                	jne    c001914c <HalDetectFeatures()+0xa32>
c0019134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019138:	c1 e8 10             	shr    eax,0x10
c001913b:	c1 e0 04             	shl    eax,0x4
c001913e:	88 c2                	mov    dl,al
c0019140:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c0019145:	09 d0                	or     eax,edx
c0019147:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c001914c:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019151:	0f b6 c0             	movzx  eax,al
c0019154:	83 f8 0f             	cmp    eax,0xf
c0019157:	75 15                	jne    c001916e <HalDetectFeatures()+0xa54>
c0019159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001915d:	c1 e8 14             	shr    eax,0x14
c0019160:	88 c2                	mov    dl,al
c0019162:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019167:	01 d0                	add    eax,edx
c0019169:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c001916e:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019176:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001917e:	85 c0                	test   eax,eax
c0019180:	74 2d                	je     c00191af <HalDetectFeatures()+0xa95>
c0019182:	83 ec 0c             	sub    esp,0xc
c0019185:	68 00 00 00 40       	push   0x40000000
c001918a:	e8 01 f5 ff ff       	call   c0018690 <cpuidCheckECX(unsigned int)>
c001918f:	83 c4 10             	add    esp,0x10
c0019192:	83 e0 01             	and    eax,0x1
c0019195:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001919c:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00191a1:	83 e0 fb             	and    eax,0xfffffffb
c00191a4:	88 c2                	mov    dl,al
c00191a6:	88 c8                	mov    al,cl
c00191a8:	09 d0                	or     eax,edx
c00191aa:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00191af:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00191b4:	83 c8 04             	or     eax,0x4
c00191b7:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00191bc:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00191c1:	83 c8 08             	or     eax,0x8
c00191c4:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00191c9:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00191ce:	83 c8 10             	or     eax,0x10
c00191d1:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00191d6:	83 ec 0c             	sub    esp,0xc
c00191d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191dd:	50                   	push   eax
c00191de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191e2:	50                   	push   eax
c00191e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00191e7:	50                   	push   eax
c00191e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00191ec:	50                   	push   eax
c00191ed:	68 00 00 00 80       	push   0x80000000
c00191f2:	e8 ce f3 ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191f7:	83 c4 20             	add    esp,0x20
c00191fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191fe:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019203:	0f 86 96 01 00 00    	jbe    c001939f <HalDetectFeatures()+0xc85>
c0019209:	83 ec 0c             	sub    esp,0xc
c001920c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019210:	50                   	push   eax
c0019211:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019215:	50                   	push   eax
c0019216:	8d 44 24 24          	lea    eax,[esp+0x24]
c001921a:	50                   	push   eax
c001921b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001921f:	50                   	push   eax
c0019220:	68 01 00 00 80       	push   0x80000001
c0019225:	e8 9b f3 ff ff       	call   c00185c5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001922a:	83 c4 20             	add    esp,0x20
c001922d:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019232:	83 e0 7f             	and    eax,0x7f
c0019235:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001923a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001923f:	83 e0 fb             	and    eax,0xfffffffb
c0019242:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019247:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001924c:	83 e0 fd             	and    eax,0xfffffffd
c001924f:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019254:	e9 46 01 00 00       	jmp    c001939f <HalDetectFeatures()+0xc85>
c0019259:	83 ec 08             	sub    esp,0x8
c001925c:	68 74 4f 02 c0       	push   0xc0024f74
c0019261:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019266:	e8 e5 73 fe ff       	call   c0000650 <strcpy>
c001926b:	83 c4 10             	add    esp,0x10
c001926e:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0019278:	e8 46 6f fe ff       	call   c00001c3 <is486>
c001927d:	85 c0                	test   eax,eax
c001927f:	0f 95 c0             	setne  al
c0019282:	0f b6 c0             	movzx  eax,al
c0019285:	85 c0                	test   eax,eax
c0019287:	0f 84 8d 00 00 00    	je     c001931a <HalDetectFeatures()+0xc00>
c001928d:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019292:	83 c8 04             	or     eax,0x4
c0019295:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001929a:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001929f:	83 c8 08             	or     eax,0x8
c00192a2:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192a7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00192ac:	83 c8 10             	or     eax,0x10
c00192af:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192b4:	0f 20 c0             	mov    eax,cr0
c00192b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00192bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00192bf:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00192c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00192cd:	83 e0 04             	and    eax,0x4
c00192d0:	74 1e                	je     c00192f0 <HalDetectFeatures()+0xbd6>
c00192d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00192d9:	83 e0 10             	and    eax,0x10
c00192dc:	75 12                	jne    c00192f0 <HalDetectFeatures()+0xbd6>
c00192de:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00192e3:	83 e0 f7             	and    eax,0xfffffff7
c00192e6:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00192eb:	e9 af 00 00 00       	jmp    c001939f <HalDetectFeatures()+0xc85>
c00192f0:	e8 a9 6e fe ff       	call   c000019e <hasLegacyFPU>
c00192f5:	83 e0 01             	and    eax,0x1
c00192f8:	83 e0 01             	and    eax,0x1
c00192fb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019302:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019307:	83 e0 f7             	and    eax,0xfffffff7
c001930a:	88 c2                	mov    dl,al
c001930c:	88 c8                	mov    al,cl
c001930e:	09 d0                	or     eax,edx
c0019310:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019315:	e9 85 00 00 00       	jmp    c001939f <HalDetectFeatures()+0xc85>
c001931a:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001931f:	83 e0 fb             	and    eax,0xfffffffb
c0019322:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019327:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001932c:	83 e0 f7             	and    eax,0xfffffff7
c001932f:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019334:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019339:	83 e0 ef             	and    eax,0xffffffef
c001933c:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019341:	0f 20 c0             	mov    eax,cr0
c0019344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019348:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001934c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019353:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001935a:	83 e0 04             	and    eax,0x4
c001935d:	74 1b                	je     c001937a <HalDetectFeatures()+0xc60>
c001935f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019366:	83 e0 10             	and    eax,0x10
c0019369:	75 0f                	jne    c001937a <HalDetectFeatures()+0xc60>
c001936b:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019370:	83 e0 f7             	and    eax,0xfffffff7
c0019373:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019378:	eb 25                	jmp    c001939f <HalDetectFeatures()+0xc85>
c001937a:	e8 1f 6e fe ff       	call   c000019e <hasLegacyFPU>
c001937f:	83 e0 01             	and    eax,0x1
c0019382:	83 e0 01             	and    eax,0x1
c0019385:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001938c:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019391:	83 e0 f7             	and    eax,0xfffffff7
c0019394:	88 c2                	mov    dl,al
c0019396:	88 c8                	mov    al,cl
c0019398:	09 d0                	or     eax,edx
c001939a:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001939f:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00193a4:	83 e0 08             	and    eax,0x8
c00193a7:	0f b6 c0             	movzx  eax,al
c00193aa:	85 c0                	test   eax,eax
c00193ac:	75 25                	jne    c00193d3 <HalDetectFeatures()+0xcb9>
c00193ae:	e8 eb 6d fe ff       	call   c000019e <hasLegacyFPU>
c00193b3:	83 e0 01             	and    eax,0x1
c00193b6:	83 e0 01             	and    eax,0x1
c00193b9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00193c0:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00193c5:	83 e0 f7             	and    eax,0xfffffff7
c00193c8:	88 c2                	mov    dl,al
c00193ca:	88 c8                	mov    al,cl
c00193cc:	09 d0                	or     eax,edx
c00193ce:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00193d3:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00193d8:	83 e0 08             	and    eax,0x8
c00193db:	0f b6 c0             	movzx  eax,al
c00193de:	85 c0                	test   eax,eax
c00193e0:	74 0d                	je     c00193ef <HalDetectFeatures()+0xcd5>
c00193e2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00193e7:	83 c8 10             	or     eax,0x10
c00193ea:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00193ef:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00193f4:	83 e0 10             	and    eax,0x10
c00193f7:	0f b6 c0             	movzx  eax,al
c00193fa:	85 c0                	test   eax,eax
c00193fc:	75 23                	jne    c0019421 <HalDetectFeatures()+0xd07>
c00193fe:	e8 83 7f 00 00       	call   c0021386 <x87Detect>
c0019403:	83 e0 01             	and    eax,0x1
c0019406:	83 e0 01             	and    eax,0x1
c0019409:	89 c1                	mov    ecx,eax
c001940b:	c1 e1 04             	shl    ecx,0x4
c001940e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019413:	83 e0 ef             	and    eax,0xffffffef
c0019416:	88 c2                	mov    dl,al
c0019418:	88 c8                	mov    al,cl
c001941a:	09 d0                	or     eax,edx
c001941c:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019421:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019426:	83 e0 01             	and    eax,0x1
c0019429:	0f b6 c0             	movzx  eax,al
c001942c:	85 c0                	test   eax,eax
c001942e:	75 2d                	jne    c001945d <HalDetectFeatures()+0xd43>
c0019430:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019435:	83 e0 02             	and    eax,0x2
c0019438:	0f b6 c0             	movzx  eax,al
c001943b:	85 c0                	test   eax,eax
c001943d:	75 1e                	jne    c001945d <HalDetectFeatures()+0xd43>
c001943f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019444:	83 e0 04             	and    eax,0x4
c0019447:	0f b6 c0             	movzx  eax,al
c001944a:	85 c0                	test   eax,eax
c001944c:	75 0f                	jne    c001945d <HalDetectFeatures()+0xd43>
c001944e:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019453:	83 e0 08             	and    eax,0x8
c0019456:	0f b6 c0             	movzx  eax,al
c0019459:	85 c0                	test   eax,eax
c001945b:	74 0d                	je     c001946a <HalDetectFeatures()+0xd50>
c001945d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019462:	83 c8 80             	or     eax,0xffffff80
c0019465:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001946a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001946f:	83 e0 10             	and    eax,0x10
c0019472:	0f b6 c0             	movzx  eax,al
c0019475:	85 c0                	test   eax,eax
c0019477:	74 2f                	je     c00194a8 <HalDetectFeatures()+0xd8e>
c0019479:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001947e:	83 e0 80             	and    eax,0xffffff80
c0019481:	0f b6 c0             	movzx  eax,al
c0019484:	85 c0                	test   eax,eax
c0019486:	75 20                	jne    c00194a8 <HalDetectFeatures()+0xd8e>
c0019488:	e8 b3 7e 00 00       	call   c0021340 <sseDetect>
c001948d:	83 e0 01             	and    eax,0x1
c0019490:	89 c1                	mov    ecx,eax
c0019492:	c1 e1 07             	shl    ecx,0x7
c0019495:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001949a:	83 e0 7f             	and    eax,0x7f
c001949d:	88 c2                	mov    dl,al
c001949f:	88 c8                	mov    al,cl
c00194a1:	09 d0                	or     eax,edx
c00194a3:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00194a8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00194ad:	83 e0 80             	and    eax,0xffffff80
c00194b0:	0f b6 c0             	movzx  eax,al
c00194b3:	85 c0                	test   eax,eax
c00194b5:	74 1c                	je     c00194d3 <HalDetectFeatures()+0xdb9>
c00194b7:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00194bc:	83 e0 20             	and    eax,0x20
c00194bf:	0f b6 c0             	movzx  eax,al
c00194c2:	85 c0                	test   eax,eax
c00194c4:	75 0d                	jne    c00194d3 <HalDetectFeatures()+0xdb9>
c00194c6:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00194cb:	83 e0 df             	and    eax,0xffffffdf
c00194ce:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00194d3:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c00194da:	90                   	nop
c00194db:	81 c4 90 00 00 00    	add    esp,0x90
c00194e1:	5b                   	pop    ebx
c00194e2:	5e                   	pop    esi
c00194e3:	5f                   	pop    edi
c00194e4:	c3                   	ret    

c00194e5 <HalEnableNMI()>:
c00194e5:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c00194ec:	6a 10                	push   0x10
c00194ee:	e8 20 ef ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c00194f3:	83 c4 04             	add    esp,0x4
c00194f6:	90                   	nop
c00194f7:	c3                   	ret    

c00194f8 <HalDisableNMI()>:
c00194f8:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c00194ff:	6a 10                	push   0x10
c0019501:	e8 0d ef ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c0019506:	83 c4 04             	add    esp,0x4
c0019509:	90                   	nop
c001950a:	c3                   	ret    

c001950b <HalGetNMIState()>:
c001950b:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0019510:	c3                   	ret    

c0019511 <x86rdmsr(unsigned int)>:
c0019511:	83 ec 1c             	sub    esp,0x1c
c0019514:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019519:	83 e0 08             	and    eax,0x8
c001951c:	0f b6 c0             	movzx  eax,al
c001951f:	85 c0                	test   eax,eax
c0019521:	75 10                	jne    c0019533 <x86rdmsr(unsigned int)+0x22>
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	68 0f 50 02 c0       	push   0xc002500f
c001952b:	e8 c6 68 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019537:	89 c1                	mov    ecx,eax
c0019539:	0f 32                	rdmsr  
c001953b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001953f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019543:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019547:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001954b:	83 c4 1c             	add    esp,0x1c
c001954e:	c3                   	ret    

c001954f <x86wrmsr(unsigned int, unsigned long long)>:
c001954f:	83 ec 1c             	sub    esp,0x1c
c0019552:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001955a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001955e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019562:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019567:	83 e0 08             	and    eax,0x8
c001956a:	0f b6 c0             	movzx  eax,al
c001956d:	85 c0                	test   eax,eax
c001956f:	75 10                	jne    c0019581 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019571:	83 ec 0c             	sub    esp,0xc
c0019574:	68 15 50 02 c0       	push   0xc0025015
c0019579:	e8 78 68 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001957e:	83 c4 10             	add    esp,0x10
c0019581:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019585:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019589:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001958d:	0f 30                	wrmsr  
c001958f:	90                   	nop
c0019590:	83 c4 1c             	add    esp,0x1c
c0019593:	c3                   	ret    

c0019594 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019594:	83 ec 0c             	sub    esp,0xc
c0019597:	83 ec 0c             	sub    esp,0xc
c001959a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001959e:	e8 40 e7 ff ff       	call   c0017ce3 <Vm::faultHandler(regs*)>
c00195a3:	83 c4 10             	add    esp,0x10
c00195a6:	83 c4 0c             	add    esp,0xc
c00195a9:	c3                   	ret    

c00195aa <HalFindRSDP()>:
c00195aa:	83 ec 1c             	sub    esp,0x1c
c00195ad:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00195b2:	3d ff 07 00 00       	cmp    eax,0x7ff
c00195b7:	7e 0c                	jle    c00195c5 <HalFindRSDP()+0x1b>
c00195b9:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c00195be:	25 00 04 00 00       	and    eax,0x400
c00195c3:	74 0d                	je     c00195d2 <HalFindRSDP()+0x28>
c00195c5:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195ca:	83 e0 fb             	and    eax,0xfffffffb
c00195cd:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00195d2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195d7:	83 e0 04             	and    eax,0x4
c00195da:	0f b6 c0             	movzx  eax,al
c00195dd:	85 c0                	test   eax,eax
c00195df:	75 07                	jne    c00195e8 <HalFindRSDP()+0x3e>
c00195e1:	b8 00 00 00 00       	mov    eax,0x0
c00195e6:	eb 53                	jmp    c001963b <HalFindRSDP()+0x91>
c00195e8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00195f0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00195f8:	77 2f                	ja     c0019629 <HalFindRSDP()+0x7f>
c00195fa:	83 ec 04             	sub    esp,0x4
c00195fd:	6a 08                	push   0x8
c00195ff:	68 1b 50 02 c0       	push   0xc002501b
c0019604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019608:	e8 73 6d fe ff       	call   c0000380 <memcmp>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	85 c0                	test   eax,eax
c0019612:	0f 94 c0             	sete   al
c0019615:	0f b6 c0             	movzx  eax,al
c0019618:	85 c0                	test   eax,eax
c001961a:	74 06                	je     c0019622 <HalFindRSDP()+0x78>
c001961c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019620:	eb 19                	jmp    c001963b <HalFindRSDP()+0x91>
c0019622:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019627:	eb c7                	jmp    c00195f0 <HalFindRSDP()+0x46>
c0019629:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001962e:	83 e0 fb             	and    eax,0xfffffffb
c0019631:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019636:	b8 00 00 00 00       	mov    eax,0x0
c001963b:	83 c4 1c             	add    esp,0x1c
c001963e:	c3                   	ret    

c001963f <HalHandlePageFault(void*, void*)>:
c001963f:	83 ec 1c             	sub    esp,0x1c
c0019642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019646:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019649:	83 ec 08             	sub    esp,0x8
c001964c:	50                   	push   eax
c001964d:	68 60 52 02 c0       	push   0xc0025260
c0019652:	e8 f7 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001965e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019661:	83 ec 08             	sub    esp,0x8
c0019664:	50                   	push   eax
c0019665:	68 24 50 02 c0       	push   0xc0025024
c001966a:	e8 df d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019677:	8b 00                	mov    eax,DWORD PTR [eax]
c0019679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001967c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019682:	0f 20 d2             	mov    edx,cr2
c0019685:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019689:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001968d:	83 ec 08             	sub    esp,0x8
c0019690:	52                   	push   edx
c0019691:	50                   	push   eax
c0019692:	e8 8d a9 ff ff       	call   c0014024 <VAS::tryLoadBackOffDisk(unsigned long)>
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001969e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196a5:	83 ec 08             	sub    esp,0x8
c00196a8:	50                   	push   eax
c00196a9:	68 39 50 02 c0       	push   0xc0025039
c00196ae:	e8 9b d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196bd:	83 ec 08             	sub    esp,0x8
c00196c0:	50                   	push   eax
c00196c1:	68 53 50 02 c0       	push   0xc0025053
c00196c6:	e8 83 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00196d3:	83 ec 08             	sub    esp,0x8
c00196d6:	50                   	push   eax
c00196d7:	68 68 50 02 c0       	push   0xc0025068
c00196dc:	e8 6d d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196e1:	83 c4 10             	add    esp,0x10
c00196e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00196e8:	83 c4 1c             	add    esp,0x1c
c00196eb:	c3                   	ret    

c00196ec <HalHandleOpcodeFault(void*, void*)>:
c00196ec:	83 ec 1c             	sub    esp,0x1c
c00196ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196f7:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c00196fc:	0f b6 c0             	movzx  eax,al
c00196ff:	85 c0                	test   eax,eax
c0019701:	74 25                	je     c0019728 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019703:	83 ec 0c             	sub    esp,0xc
c0019706:	68 94 52 02 c0       	push   0xc0025294
c001970b:	e8 3e d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019717:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001971a:	8d 50 19             	lea    edx,[eax+0x19]
c001971d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019721:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019724:	b0 01                	mov    al,0x1
c0019726:	eb 02                	jmp    c001972a <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019728:	b0 00                	mov    al,0x0
c001972a:	83 c4 1c             	add    esp,0x1c
c001972d:	c3                   	ret    

c001972e <HalDisplayDebugInfo(void*)>:
c001972e:	83 ec 2c             	sub    esp,0x2c
c0019731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019735:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019739:	0f 20 c0             	mov    eax,cr0
c001973c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019740:	0f 20 d0             	mov    eax,cr2
c0019743:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019747:	0f 20 d8             	mov    eax,cr3
c001974a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001974e:	0f 20 e0             	mov    eax,cr4
c0019751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019755:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019759:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001975c:	83 ec 08             	sub    esp,0x8
c001975f:	50                   	push   eax
c0019760:	68 83 50 02 c0       	push   0xc0025083
c0019765:	e8 e4 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019771:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019774:	83 ec 08             	sub    esp,0x8
c0019777:	50                   	push   eax
c0019778:	68 74 50 02 c0       	push   0xc0025074
c001977d:	e8 cc d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019782:	83 c4 10             	add    esp,0x10
c0019785:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019789:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001978c:	83 ec 08             	sub    esp,0x8
c001978f:	50                   	push   eax
c0019790:	68 7f 50 02 c0       	push   0xc002507f
c0019795:	e8 b4 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001979a:	83 c4 10             	add    esp,0x10
c001979d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00197a4:	83 ec 08             	sub    esp,0x8
c00197a7:	50                   	push   eax
c00197a8:	68 8e 50 02 c0       	push   0xc002508e
c00197ad:	e8 9c d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197b2:	83 c4 10             	add    esp,0x10
c00197b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197b9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00197bc:	83 ec 08             	sub    esp,0x8
c00197bf:	50                   	push   eax
c00197c0:	68 99 50 02 c0       	push   0xc0025099
c00197c5:	e8 84 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197ca:	83 c4 10             	add    esp,0x10
c00197cd:	83 ec 08             	sub    esp,0x8
c00197d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197d4:	68 a4 50 02 c0       	push   0xc00250a4
c00197d9:	e8 70 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197de:	83 c4 10             	add    esp,0x10
c00197e1:	83 ec 08             	sub    esp,0x8
c00197e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197e8:	68 af 50 02 c0       	push   0xc00250af
c00197ed:	e8 5c d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197f2:	83 c4 10             	add    esp,0x10
c00197f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197f9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00197fc:	c1 e0 05             	shl    eax,0x5
c00197ff:	8d 90 c0 65 02 c0    	lea    edx,[eax-0x3ffd9a40]
c0019805:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019809:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001980c:	83 ec 04             	sub    esp,0x4
c001980f:	52                   	push   edx
c0019810:	50                   	push   eax
c0019811:	68 ba 50 02 c0       	push   0xc00250ba
c0019816:	e8 33 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001981b:	83 c4 10             	add    esp,0x10
c001981e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019823:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019829:	83 ec 0c             	sub    esp,0xc
c001982c:	50                   	push   eax
c001982d:	e8 cb 8a ff ff       	call   c00122fd <setActiveTerminal(VgaText*)>
c0019832:	83 c4 10             	add    esp,0x10
c0019835:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001983a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019840:	83 ec 08             	sub    esp,0x8
c0019843:	68 c9 50 02 c0       	push   0xc00250c9
c0019848:	50                   	push   eax
c0019849:	e8 ec 8d ff ff       	call   c001263a <VgaText::puts(char const*)>
c001984e:	83 c4 10             	add    esp,0x10
c0019851:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019856:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001985c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019860:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019863:	83 ec 08             	sub    esp,0x8
c0019866:	52                   	push   edx
c0019867:	50                   	push   eax
c0019868:	e8 87 8d ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c001986d:	83 c4 10             	add    esp,0x10
c0019870:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019875:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001987b:	83 ec 08             	sub    esp,0x8
c001987e:	68 d7 50 02 c0       	push   0xc00250d7
c0019883:	50                   	push   eax
c0019884:	e8 b1 8d ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019889:	83 c4 10             	add    esp,0x10
c001988c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019891:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019897:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001989c:	8b 12                	mov    edx,DWORD PTR [edx]
c001989e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00198a1:	83 c2 0c             	add    edx,0xc
c00198a4:	83 ec 08             	sub    esp,0x8
c00198a7:	52                   	push   edx
c00198a8:	50                   	push   eax
c00198a9:	e8 8c 8d ff ff       	call   c001263a <VgaText::puts(char const*)>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198b6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00198bc:	83 ec 08             	sub    esp,0x8
c00198bf:	68 e0 50 02 c0       	push   0xc00250e0
c00198c4:	50                   	push   eax
c00198c5:	e8 70 8d ff ff       	call   c001263a <VgaText::puts(char const*)>
c00198ca:	83 c4 10             	add    esp,0x10
c00198cd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198d2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00198d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00198dc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00198df:	83 ec 08             	sub    esp,0x8
c00198e2:	52                   	push   edx
c00198e3:	50                   	push   eax
c00198e4:	e8 0b 8d ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198f1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00198f7:	83 ec 08             	sub    esp,0x8
c00198fa:	68 e8 50 02 c0       	push   0xc00250e8
c00198ff:	50                   	push   eax
c0019900:	e8 35 8d ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001990d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019913:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019917:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001991a:	83 ec 08             	sub    esp,0x8
c001991d:	52                   	push   edx
c001991e:	50                   	push   eax
c001991f:	e8 d0 8c ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001992c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019932:	83 ec 08             	sub    esp,0x8
c0019935:	68 f0 50 02 c0       	push   0xc00250f0
c001993a:	50                   	push   eax
c001993b:	e8 fa 8c ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019940:	83 c4 10             	add    esp,0x10
c0019943:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019948:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001994e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019952:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019955:	83 ec 08             	sub    esp,0x8
c0019958:	52                   	push   edx
c0019959:	50                   	push   eax
c001995a:	e8 95 8c ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019967:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001996d:	83 ec 08             	sub    esp,0x8
c0019970:	68 f8 50 02 c0       	push   0xc00250f8
c0019975:	50                   	push   eax
c0019976:	e8 bf 8c ff ff       	call   c001263a <VgaText::puts(char const*)>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019983:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019989:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001998d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019990:	83 ec 08             	sub    esp,0x8
c0019993:	52                   	push   edx
c0019994:	50                   	push   eax
c0019995:	e8 5a 8c ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c001999a:	83 c4 10             	add    esp,0x10
c001999d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199a2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00199a8:	83 ec 08             	sub    esp,0x8
c00199ab:	68 00 51 02 c0       	push   0xc0025100
c00199b0:	50                   	push   eax
c00199b1:	e8 84 8c ff ff       	call   c001263a <VgaText::puts(char const*)>
c00199b6:	83 c4 10             	add    esp,0x10
c00199b9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199be:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00199c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199c8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00199cb:	83 ec 08             	sub    esp,0x8
c00199ce:	52                   	push   edx
c00199cf:	50                   	push   eax
c00199d0:	e8 1f 8c ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c00199d5:	83 c4 10             	add    esp,0x10
c00199d8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199dd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00199e3:	83 ec 08             	sub    esp,0x8
c00199e6:	68 08 51 02 c0       	push   0xc0025108
c00199eb:	50                   	push   eax
c00199ec:	e8 49 8c ff ff       	call   c001263a <VgaText::puts(char const*)>
c00199f1:	83 c4 10             	add    esp,0x10
c00199f4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199f9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00199ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a03:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019a06:	83 ec 08             	sub    esp,0x8
c0019a09:	52                   	push   edx
c0019a0a:	50                   	push   eax
c0019a0b:	e8 e4 8b ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a18:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a1e:	83 ec 08             	sub    esp,0x8
c0019a21:	68 10 51 02 c0       	push   0xc0025110
c0019a26:	50                   	push   eax
c0019a27:	e8 0e 8c ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019a2c:	83 c4 10             	add    esp,0x10
c0019a2f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a34:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a3a:	83 ec 08             	sub    esp,0x8
c0019a3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a41:	50                   	push   eax
c0019a42:	e8 ad 8b ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c0019a47:	83 c4 10             	add    esp,0x10
c0019a4a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a4f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a55:	83 ec 08             	sub    esp,0x8
c0019a58:	68 19 51 02 c0       	push   0xc0025119
c0019a5d:	50                   	push   eax
c0019a5e:	e8 d7 8b ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019a63:	83 c4 10             	add    esp,0x10
c0019a66:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a6b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a71:	83 ec 08             	sub    esp,0x8
c0019a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a78:	50                   	push   eax
c0019a79:	e8 76 8b ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c0019a7e:	83 c4 10             	add    esp,0x10
c0019a81:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a86:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019a8c:	83 ec 08             	sub    esp,0x8
c0019a8f:	68 21 51 02 c0       	push   0xc0025121
c0019a94:	50                   	push   eax
c0019a95:	e8 a0 8b ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019a9a:	83 c4 10             	add    esp,0x10
c0019a9d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019aa2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019aa8:	83 ec 08             	sub    esp,0x8
c0019aab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aaf:	50                   	push   eax
c0019ab0:	e8 3f 8b ff ff       	call   c00125f4 <VgaText::putx(unsigned int)>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	fa                   	cli    
c0019ab9:	f4                   	hlt    
c0019aba:	eb fe                	jmp    c0019aba <HalDisplayDebugInfo(void*)+0x38c>

c0019abc <HalReceivedNMI()>:
c0019abc:	83 ec 1c             	sub    esp,0x1c
c0019abf:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019ac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aca:	89 c2                	mov    edx,eax
c0019acc:	ec                   	in     al,dx
c0019acd:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019ad1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019ad5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ad9:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019ae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ae4:	89 c2                	mov    edx,eax
c0019ae6:	ec                   	in     al,dx
c0019ae7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019aeb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019aef:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019af3:	83 ec 0c             	sub    esp,0xc
c0019af6:	68 29 51 02 c0       	push   0xc0025129
c0019afb:	e8 4e d4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019b00:	83 c4 10             	add    esp,0x10
c0019b03:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019b08:	83 e0 10             	and    eax,0x10
c0019b0b:	74 10                	je     c0019b1d <HalReceivedNMI()+0x61>
c0019b0d:	83 ec 0c             	sub    esp,0xc
c0019b10:	68 3a 51 02 c0       	push   0xc002513a
c0019b15:	e8 dc 62 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019b22:	83 e0 40             	and    eax,0x40
c0019b25:	74 10                	je     c0019b37 <HalReceivedNMI()+0x7b>
c0019b27:	83 ec 0c             	sub    esp,0xc
c0019b2a:	68 47 51 02 c0       	push   0xc0025147
c0019b2f:	e8 c2 62 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019b3b:	0f be c0             	movsx  eax,al
c0019b3e:	85 c0                	test   eax,eax
c0019b40:	79 10                	jns    c0019b52 <HalReceivedNMI()+0x96>
c0019b42:	83 ec 0c             	sub    esp,0xc
c0019b45:	68 51 51 02 c0       	push   0xc0025151
c0019b4a:	e8 a7 62 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0019b4f:	83 c4 10             	add    esp,0x10
c0019b52:	90                   	nop
c0019b53:	83 c4 1c             	add    esp,0x1c
c0019b56:	c3                   	ret    

c0019b57 <HalSystemIdle()>:
c0019b57:	56                   	push   esi
c0019b58:	53                   	push   ebx
c0019b59:	83 ec 14             	sub    esp,0x14
c0019b5c:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019b61:	83 e0 10             	and    eax,0x10
c0019b64:	0f b6 c0             	movzx  eax,al
c0019b67:	85 c0                	test   eax,eax
c0019b69:	74 43                	je     c0019bae <HalSystemIdle()+0x57>
c0019b6b:	83 ec 0c             	sub    esp,0xc
c0019b6e:	68 e1 00 00 00       	push   0xe1
c0019b73:	e8 99 f9 ff ff       	call   c0019511 <x86rdmsr(unsigned int)>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019b83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b87:	83 e0 02             	and    eax,0x2
c0019b8a:	89 c3                	mov    ebx,eax
c0019b8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b90:	83 e0 00             	and    eax,0x0
c0019b93:	89 c6                	mov    esi,eax
c0019b95:	83 ec 04             	sub    esp,0x4
c0019b98:	56                   	push   esi
c0019b99:	53                   	push   ebx
c0019b9a:	68 e1 00 00 00       	push   0xe1
c0019b9f:	e8 ab f9 ff ff       	call   c001954f <x86wrmsr(unsigned int, unsigned long long)>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	e8 e8 65 fe ff       	call   c0000194 <doTPAUSE>
c0019bac:	eb 01                	jmp    c0019baf <HalSystemIdle()+0x58>
c0019bae:	f4                   	hlt    
c0019baf:	90                   	nop
c0019bb0:	83 c4 14             	add    esp,0x14
c0019bb3:	5b                   	pop    ebx
c0019bb4:	5e                   	pop    esi
c0019bb5:	c3                   	ret    

c0019bb6 <i386SaveCoprocessor(void*)>:
c0019bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bba:	83 c0 3f             	add    eax,0x3f
c0019bbd:	83 e0 c0             	and    eax,0xffffffc0
c0019bc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bc4:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019bca <i386LoadCoprocessor(void*)>:
c0019bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bce:	83 c0 3f             	add    eax,0x3f
c0019bd1:	83 e0 c0             	and    eax,0xffffffc0
c0019bd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bd8:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019bde <x87EmulHandler(regs*, void*)>:
c0019bde:	53                   	push   ebx
c0019bdf:	83 ec 08             	sub    esp,0x8
c0019be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019be7:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0019beb:	74 10                	je     c0019bfd <x87EmulHandler(regs*, void*)+0x1f>
c0019bed:	83 ec 0c             	sub    esp,0xc
c0019bf0:	68 5e 51 02 c0       	push   0xc002515e
c0019bf5:	e8 fc 61 ff ff       	call   c000fdf6 <KePanic(char const*)>
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	0f 20 c0             	mov    eax,cr0
c0019c00:	a8 08                	test   al,0x8
c0019c02:	74 59                	je     c0019c5d <x87EmulHandler(regs*, void*)+0x7f>
c0019c04:	0f 06                	clts   
c0019c06:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019c0b:	85 c0                	test   eax,eax
c0019c0d:	74 0e                	je     c0019c1d <x87EmulHandler(regs*, void*)+0x3f>
c0019c0f:	83 ec 0c             	sub    esp,0xc
c0019c12:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019c15:	e8 9c ff ff ff       	call   c0019bb6 <i386SaveCoprocessor(void*)>
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019c23:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c0019c27:	75 12                	jne    c0019c3b <x87EmulHandler(regs*, void*)+0x5d>
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	68 40 02 00 00       	push   0x240
c0019c31:	e8 7a 5e ff ff       	call   c000fab0 <malloc>
c0019c36:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c0019c39:	eb 10                	jmp    c0019c4b <x87EmulHandler(regs*, void*)+0x6d>
c0019c3b:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019c40:	83 ec 0c             	sub    esp,0xc
c0019c43:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019c46:	e8 7f ff ff ff       	call   c0019bca <i386LoadCoprocessor(void*)>
c0019c4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019c58:	83 c4 08             	add    esp,0x8
c0019c5b:	5b                   	pop    ebx
c0019c5c:	c3                   	ret    
c0019c5d:	83 ec 0c             	sub    esp,0xc
c0019c60:	68 72 51 02 c0       	push   0xc0025172
c0019c65:	e8 e4 d2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019c72:	83 c4 18             	add    esp,0x18
c0019c75:	5b                   	pop    ebx
c0019c76:	e9 ad d9 ff ff       	jmp    c0017628 <Thr::terminateFromIRQ(int)>

c0019c7b <HalInitialiseCoprocessor()>:
c0019c7b:	83 ec 10             	sub    esp,0x10
c0019c7e:	6a 00                	push   0x0
c0019c80:	68 de 9b 01 c0       	push   0xc0019bde
c0019c85:	6a 07                	push   0x7
c0019c87:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019c91:	e8 9d 06 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019c96:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	a8 80                	test   al,0x80
c0019ca0:	74 1c                	je     c0019cbe <HalInitialiseCoprocessor()+0x43>
c0019ca2:	c7 05 d0 ea 02 c0 58 13 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021358
c0019cac:	c7 05 cc ea 02 c0 60 13 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0021360
c0019cb6:	83 c4 0c             	add    esp,0xc
c0019cb9:	e9 aa 76 00 00       	jmp    c0021368 <sseInit>
c0019cbe:	a8 10                	test   al,0x10
c0019cc0:	74 1c                	je     c0019cde <HalInitialiseCoprocessor()+0x63>
c0019cc2:	c7 05 d0 ea 02 c0 a7 13 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00213a7
c0019ccc:	c7 05 cc ea 02 c0 ae 13 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc00213ae
c0019cd6:	83 c4 0c             	add    esp,0xc
c0019cd9:	e9 d7 76 00 00       	jmp    c00213b5 <x87Init>
c0019cde:	c7 05 d0 ea 02 c0 0e 84 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001840e
c0019ce8:	c7 05 cc ea 02 c0 0e 84 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001840e
c0019cf2:	0f 20 c0             	mov    eax,cr0
c0019cf5:	83 c8 04             	or     eax,0x4
c0019cf8:	0f 22 c0             	mov    cr0,eax
c0019cfb:	83 c4 0c             	add    esp,0xc
c0019cfe:	c3                   	ret    

c0019cff <HalPanic(char const*)>:
c0019cff:	53                   	push   ebx
c0019d00:	83 ec 10             	sub    esp,0x10
c0019d03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d07:	fa                   	cli    
c0019d08:	53                   	push   ebx
c0019d09:	68 88 51 02 c0       	push   0xc0025188
c0019d0e:	e8 3b d2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019d13:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019d18:	83 c4 10             	add    esp,0x10
c0019d1b:	85 c0                	test   eax,eax
c0019d1d:	74 09                	je     c0019d28 <HalPanic(char const*)+0x29>
c0019d1f:	83 ec 0c             	sub    esp,0xc
c0019d22:	53                   	push   ebx
c0019d23:	ff d0                	call   eax
c0019d25:	83 c4 10             	add    esp,0x10
c0019d28:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019d2d:	85 c0                	test   eax,eax
c0019d2f:	0f 84 dc 00 00 00    	je     c0019e11 <HalPanic(char const*)+0x112>
c0019d35:	52                   	push   edx
c0019d36:	6a 01                	push   0x1
c0019d38:	6a 0f                	push   0xf
c0019d3a:	50                   	push   eax
c0019d3b:	e8 fc 83 ff ff       	call   c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d40:	59                   	pop    ecx
c0019d41:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019d47:	e8 fc 85 ff ff       	call   c0012348 <VgaText::clearScreen()>
c0019d4c:	58                   	pop    eax
c0019d4d:	5a                   	pop    edx
c0019d4e:	68 c6 41 02 c0       	push   0xc00241c6
c0019d53:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019d59:	e8 16 84 ff ff       	call   c0012174 <VgaText::setTitle(char*)>
c0019d5e:	83 c4 0c             	add    esp,0xc
c0019d61:	6a 01                	push   0x1
c0019d63:	6a 0f                	push   0xf
c0019d65:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019d6b:	e8 cc 83 ff ff       	call   c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d70:	59                   	pop    ecx
c0019d71:	58                   	pop    eax
c0019d72:	68 a1 51 02 c0       	push   0xc00251a1
c0019d77:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019d7d:	e8 b8 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019d82:	83 c4 0c             	add    esp,0xc
c0019d85:	6a 0f                	push   0xf
c0019d87:	6a 01                	push   0x1
c0019d89:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019d8f:	e8 a8 83 ff ff       	call   c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d94:	58                   	pop    eax
c0019d95:	5a                   	pop    edx
c0019d96:	68 aa 51 02 c0       	push   0xc00251aa
c0019d9b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019da1:	e8 94 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019da6:	83 c4 0c             	add    esp,0xc
c0019da9:	6a 01                	push   0x1
c0019dab:	6a 0f                	push   0xf
c0019dad:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019db3:	e8 84 83 ff ff       	call   c001213c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019db8:	59                   	pop    ecx
c0019db9:	58                   	pop    eax
c0019dba:	68 ee 51 02 c0       	push   0xc00251ee
c0019dbf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019dc5:	e8 70 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019dca:	58                   	pop    eax
c0019dcb:	5a                   	pop    edx
c0019dcc:	68 b7 51 02 c0       	push   0xc00251b7
c0019dd1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019dd7:	e8 5e 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019ddc:	59                   	pop    ecx
c0019ddd:	58                   	pop    eax
c0019dde:	68 f1 51 02 c0       	push   0xc00251f1
c0019de3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019de9:	e8 4c 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019dee:	58                   	pop    eax
c0019def:	5a                   	pop    edx
c0019df0:	53                   	push   ebx
c0019df1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019df7:	e8 3e 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019dfc:	59                   	pop    ecx
c0019dfd:	5b                   	pop    ebx
c0019dfe:	68 ee 51 02 c0       	push   0xc00251ee
c0019e03:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e09:	e8 2c 88 ff ff       	call   c001263a <VgaText::puts(char const*)>
c0019e0e:	83 c4 10             	add    esp,0x10
c0019e11:	eb fe                	jmp    c0019e11 <HalPanic(char const*)+0x112>

c0019e13 <HalQueryPerformanceCounter()>:
c0019e13:	31 c0                	xor    eax,eax
c0019e15:	31 d2                	xor    edx,edx
c0019e17:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019e1e:	75 02                	jne    c0019e22 <HalQueryPerformanceCounter()+0xf>
c0019e20:	0f 31                	rdtsc  
c0019e22:	c3                   	ret    

c0019e23 <HalInitialise()>:
c0019e23:	53                   	push   ebx
c0019e24:	83 ec 08             	sub    esp,0x8
c0019e27:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c0019e2e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019e33:	83 e0 fe             	and    eax,0xfffffffe
c0019e36:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019e3b:	e8 d8 07 00 00       	call   c001a618 <picOpen()>
c0019e40:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019e47:	74 0a                	je     c0019e53 <HalInitialise()+0x30>
c0019e49:	e8 1a 07 00 00       	call   c001a568 <picDisable()>
c0019e4e:	e8 0b 6b 00 00       	call   c002095e <apicOpen()>
c0019e53:	50                   	push   eax
c0019e54:	bb 0f 00 00 00       	mov    ebx,0xf
c0019e59:	6a 00                	push   0x0
c0019e5b:	68 5c eb 00 c0       	push   0xc000eb5c
c0019e60:	6a 00                	push   0x0
c0019e62:	e8 cc 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019e67:	83 c4 0c             	add    esp,0xc
c0019e6a:	6a 00                	push   0x0
c0019e6c:	68 5c eb 00 c0       	push   0xc000eb5c
c0019e71:	6a 01                	push   0x1
c0019e73:	e8 bb 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	6a 00                	push   0x0
c0019e7d:	68 4c eb 00 c0       	push   0xc000eb4c
c0019e82:	6a 02                	push   0x2
c0019e84:	e8 aa 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019e89:	83 c4 0c             	add    esp,0xc
c0019e8c:	6a 00                	push   0x0
c0019e8e:	68 5c eb 00 c0       	push   0xc000eb5c
c0019e93:	6a 03                	push   0x3
c0019e95:	e8 99 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019e9a:	83 c4 0c             	add    esp,0xc
c0019e9d:	6a 00                	push   0x0
c0019e9f:	68 5c eb 00 c0       	push   0xc000eb5c
c0019ea4:	6a 04                	push   0x4
c0019ea6:	e8 88 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019eab:	83 c4 0c             	add    esp,0xc
c0019eae:	6a 00                	push   0x0
c0019eb0:	68 5c eb 00 c0       	push   0xc000eb5c
c0019eb5:	6a 05                	push   0x5
c0019eb7:	e8 77 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ebc:	83 c4 0c             	add    esp,0xc
c0019ebf:	6a 00                	push   0x0
c0019ec1:	68 90 eb 00 c0       	push   0xc000eb90
c0019ec6:	6a 06                	push   0x6
c0019ec8:	e8 66 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ecd:	83 c4 0c             	add    esp,0xc
c0019ed0:	6a 00                	push   0x0
c0019ed2:	68 e4 eb 00 c0       	push   0xc000ebe4
c0019ed7:	6a 08                	push   0x8
c0019ed9:	e8 55 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ede:	83 c4 0c             	add    esp,0xc
c0019ee1:	6a 00                	push   0x0
c0019ee3:	68 5c eb 00 c0       	push   0xc000eb5c
c0019ee8:	6a 09                	push   0x9
c0019eea:	e8 44 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019eef:	83 c4 0c             	add    esp,0xc
c0019ef2:	6a 00                	push   0x0
c0019ef4:	68 5c eb 00 c0       	push   0xc000eb5c
c0019ef9:	6a 0a                	push   0xa
c0019efb:	e8 33 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f00:	83 c4 0c             	add    esp,0xc
c0019f03:	6a 00                	push   0x0
c0019f05:	68 5c eb 00 c0       	push   0xc000eb5c
c0019f0a:	6a 0b                	push   0xb
c0019f0c:	e8 22 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f11:	83 c4 0c             	add    esp,0xc
c0019f14:	6a 00                	push   0x0
c0019f16:	68 94 ea 00 c0       	push   0xc000ea94
c0019f1b:	6a 0d                	push   0xd
c0019f1d:	e8 11 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f22:	83 c4 0c             	add    esp,0xc
c0019f25:	6a 00                	push   0x0
c0019f27:	68 e8 ea 00 c0       	push   0xc000eae8
c0019f2c:	6a 0e                	push   0xe
c0019f2e:	e8 00 04 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	50                   	push   eax
c0019f37:	6a 00                	push   0x0
c0019f39:	68 5c eb 00 c0       	push   0xc000eb5c
c0019f3e:	53                   	push   ebx
c0019f3f:	43                   	inc    ebx
c0019f40:	e8 ee 03 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f45:	83 c4 10             	add    esp,0x10
c0019f48:	83 fb 1e             	cmp    ebx,0x1e
c0019f4b:	75 e9                	jne    c0019f36 <HalInitialise()+0x113>
c0019f4d:	50                   	push   eax
c0019f4e:	6a 00                	push   0x0
c0019f50:	68 d5 1f 01 c0       	push   0xc0011fd5
c0019f55:	6a 60                	push   0x60
c0019f57:	e8 d7 03 00 00       	call   c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f5c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019f61:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0019f6b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019f72:	e8 39 5b ff ff       	call   c000fab0 <malloc>
c0019f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f7a:	89 c3                	mov    ebx,eax
c0019f7c:	e8 ff 0d 00 00       	call   c001ad80 <RTC::RTC()>
c0019f81:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019f8b:	5a                   	pop    edx
c0019f8c:	59                   	pop    ecx
c0019f8d:	53                   	push   ebx
c0019f8e:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0019f94:	e8 01 fa fe ff       	call   c000999a <Device::addChild(Device*)>
c0019f99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f9b:	6a 00                	push   0x0
c0019f9d:	6a 00                	push   0x0
c0019f9f:	6a 00                	push   0x0
c0019fa1:	53                   	push   ebx
c0019fa2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fa5:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019faa:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019fb0:	83 c4 28             	add    esp,0x28
c0019fb3:	5b                   	pop    ebx
c0019fb4:	c3                   	ret    

c0019fb5 <HalMakeBeep(int)>:
c0019fb5:	53                   	push   ebx
c0019fb6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019fba:	85 db                	test   ebx,ebx
c0019fbc:	75 07                	jne    c0019fc5 <HalMakeBeep(int)+0x10>
c0019fbe:	e4 61                	in     al,0x61
c0019fc0:	83 e0 fc             	and    eax,0xfffffffc
c0019fc3:	eb 26                	jmp    c0019feb <HalMakeBeep(int)+0x36>
c0019fc5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019fca:	99                   	cdq    
c0019fcb:	f7 fb                	idiv   ebx
c0019fcd:	89 c1                	mov    ecx,eax
c0019fcf:	b0 b6                	mov    al,0xb6
c0019fd1:	e6 43                	out    0x43,al
c0019fd3:	88 c8                	mov    al,cl
c0019fd5:	e6 42                	out    0x42,al
c0019fd7:	89 c8                	mov    eax,ecx
c0019fd9:	c1 e8 08             	shr    eax,0x8
c0019fdc:	e6 42                	out    0x42,al
c0019fde:	e4 61                	in     al,0x61
c0019fe0:	89 c2                	mov    edx,eax
c0019fe2:	83 ca 03             	or     edx,0x3
c0019fe5:	38 d0                	cmp    al,dl
c0019fe7:	74 04                	je     c0019fed <HalMakeBeep(int)+0x38>
c0019fe9:	88 d0                	mov    al,dl
c0019feb:	e6 61                	out    0x61,al
c0019fed:	5b                   	pop    ebx
c0019fee:	c3                   	ret    

c0019fef <HalGetRand()>:
c0019fef:	31 c0                	xor    eax,eax
c0019ff1:	c3                   	ret    

c0019ff2 <HalEndOfInterrupt(int)>:
c0019ff2:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019ff9:	74 1d                	je     c001a018 <HalEndOfInterrupt(int)+0x26>
c0019ffb:	83 ec 18             	sub    esp,0x18
c0019ffe:	6a 1b                	push   0x1b
c001a000:	e8 0c f5 ff ff       	call   c0019511 <x86rdmsr(unsigned int)>
c001a005:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a00a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a014:	83 c4 1c             	add    esp,0x1c
c001a017:	c3                   	ret    
c001a018:	e9 7f 07 00 00       	jmp    c001a79c <picEOI(int)>

c001a01d <HalRestart()>:
c001a01d:	c3                   	ret    

c001a01e <HalShutdown()>:
c001a01e:	c3                   	ret    

c001a01f <HalSleep()>:
c001a01f:	c3                   	ret    

c001a020 <CPU::CPU()>:
c001a020:	83 ec 0c             	sub    esp,0xc
c001a023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a027:	83 ec 08             	sub    esp,0x8
c001a02a:	68 63 4f 02 c0       	push   0xc0024f63
c001a02f:	50                   	push   eax
c001a030:	e8 c7 fa fe ff       	call   c0009afc <Device::Device(char const*)>
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	ba c0 52 02 c0       	mov    edx,0xc00252c0
c001a03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a041:	89 10                	mov    DWORD PTR [eax],edx
c001a043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a047:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a055:	05 64 01 00 00       	add    eax,0x164
c001a05a:	83 ec 0c             	sub    esp,0xc
c001a05d:	50                   	push   eax
c001a05e:	e8 d5 4b ff ff       	call   c000ec38 <GDT::GDT()>
c001a063:	83 c4 10             	add    esp,0x10
c001a066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06a:	05 68 09 00 00       	add    eax,0x968
c001a06f:	83 ec 0c             	sub    esp,0xc
c001a072:	50                   	push   eax
c001a073:	e8 14 4e ff ff       	call   c000ee8c <IDT::IDT()>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07f:	05 68 11 00 00       	add    eax,0x1168
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	50                   	push   eax
c001a088:	e8 6b 8a ff ff       	call   c0012af8 <TSS::TSS()>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a094:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a09e:	90                   	nop
c001a09f:	83 c4 0c             	add    esp,0xc
c001a0a2:	c3                   	ret    
c001a0a3:	90                   	nop

c001a0a4 <CPU::setupSMEP()>:
c001a0a4:	0f 20 e0             	mov    eax,cr4
c001a0a7:	0d 00 00 10 00       	or     eax,0x100000
c001a0ac:	0f 22 e0             	mov    cr4,eax
c001a0af:	c3                   	ret    

c001a0b0 <CPU::setupUMIP()>:
c001a0b0:	0f 20 e0             	mov    eax,cr4
c001a0b3:	80 cc 08             	or     ah,0x8
c001a0b6:	0f 22 e0             	mov    cr4,eax
c001a0b9:	c3                   	ret    

c001a0ba <CPU::setupTSC()>:
c001a0ba:	0f 20 e0             	mov    eax,cr4
c001a0bd:	83 c8 04             	or     eax,0x4
c001a0c0:	0f 22 e0             	mov    cr4,eax
c001a0c3:	c3                   	ret    

c001a0c4 <CPU::setupLargePages()>:
c001a0c4:	0f 20 e0             	mov    eax,cr4
c001a0c7:	83 c8 10             	or     eax,0x10
c001a0ca:	0f 22 e0             	mov    cr4,eax
c001a0cd:	c3                   	ret    

c001a0ce <CPU::setupPAT()>:
c001a0ce:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c001a0d5:	74 28                	je     c001a0ff <CPU::setupPAT()+0x31>
c001a0d7:	53                   	push   ebx
c001a0d8:	83 ec 14             	sub    esp,0x14
c001a0db:	68 77 02 00 00       	push   0x277
c001a0e0:	e8 2c f4 ff ff       	call   c0019511 <x86rdmsr(unsigned int)>
c001a0e5:	83 c4 0c             	add    esp,0xc
c001a0e8:	83 e2 f8             	and    edx,0xfffffff8
c001a0eb:	83 ca 01             	or     edx,0x1
c001a0ee:	52                   	push   edx
c001a0ef:	50                   	push   eax
c001a0f0:	68 77 02 00 00       	push   0x277
c001a0f5:	e8 55 f4 ff ff       	call   c001954f <x86wrmsr(unsigned int, unsigned long long)>
c001a0fa:	83 c4 18             	add    esp,0x18
c001a0fd:	5b                   	pop    ebx
c001a0fe:	c3                   	ret    
c001a0ff:	c3                   	ret    

c001a100 <CPU::setupMTRR()>:
c001a100:	c3                   	ret    
c001a101:	90                   	nop

c001a102 <CPU::setupGlobalPages()>:
c001a102:	0f 20 e0             	mov    eax,cr4
c001a105:	0c 80                	or     al,0x80
c001a107:	0f 22 e0             	mov    cr4,eax
c001a10a:	c3                   	ret    
c001a10b:	90                   	nop

c001a10c <CPU::allowUsermodeDataAccess()>:
c001a10c:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a113:	74 03                	je     c001a118 <CPU::allowUsermodeDataAccess()+0xc>
c001a115:	0f 01 cb             	stac   
c001a118:	c3                   	ret    
c001a119:	90                   	nop

c001a11a <CPU::prohibitUsermodeDataAccess()>:
c001a11a:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a121:	74 03                	je     c001a126 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a123:	0f 01 ca             	clac   
c001a126:	c3                   	ret    
c001a127:	90                   	nop

c001a128 <CPU::setupSMAP()>:
c001a128:	0f 20 e0             	mov    eax,cr4
c001a12b:	0d 00 00 20 00       	or     eax,0x200000
c001a130:	0f 22 e0             	mov    cr4,eax
c001a133:	eb e5                	jmp    c001a11a <CPU::prohibitUsermodeDataAccess()>
c001a135:	90                   	nop

c001a136 <CPU::setupFeatures()>:
c001a136:	53                   	push   ebx
c001a137:	83 ec 08             	sub    esp,0x8
c001a13a:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c001a141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a145:	74 18                	je     c001a15f <CPU::setupFeatures()+0x29>
c001a147:	83 ec 0c             	sub    esp,0xc
c001a14a:	68 fc 51 02 c0       	push   0xc00251fc
c001a14f:	e8 fa cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a154:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a157:	e8 54 ff ff ff       	call   c001a0b0 <CPU::setupUMIP()>
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a166:	74 18                	je     c001a180 <CPU::setupFeatures()+0x4a>
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	68 06 52 02 c0       	push   0xc0025206
c001a170:	e8 d9 cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a178:	e8 3d ff ff ff       	call   c001a0ba <CPU::setupTSC()>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c001a187:	74 18                	je     c001a1a1 <CPU::setupFeatures()+0x6b>
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	68 0f 52 02 c0       	push   0xc002520f
c001a191:	e8 b8 cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a199:	e8 26 ff ff ff       	call   c001a0c4 <CPU::setupLargePages()>
c001a19e:	83 c4 10             	add    esp,0x10
c001a1a1:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c001a1a8:	74 18                	je     c001a1c2 <CPU::setupFeatures()+0x8c>
c001a1aa:	83 ec 0c             	sub    esp,0xc
c001a1ad:	68 18 52 02 c0       	push   0xc0025218
c001a1b2:	e8 97 cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a1b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ba:	e8 43 ff ff ff       	call   c001a102 <CPU::setupGlobalPages()>
c001a1bf:	83 c4 10             	add    esp,0x10
c001a1c2:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a1c9:	74 18                	je     c001a1e3 <CPU::setupFeatures()+0xad>
c001a1cb:	83 ec 0c             	sub    esp,0xc
c001a1ce:	68 2a 52 02 c0       	push   0xc002522a
c001a1d3:	e8 76 cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1db:	e8 ee fe ff ff       	call   c001a0ce <CPU::setupPAT()>
c001a1e0:	83 c4 10             	add    esp,0x10
c001a1e3:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a1ea:	74 11                	je     c001a1fd <CPU::setupFeatures()+0xc7>
c001a1ec:	c7 44 24 10 33 52 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025233
c001a1f4:	83 c4 08             	add    esp,0x8
c001a1f7:	5b                   	pop    ebx
c001a1f8:	e9 51 cd fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c001a1fd:	83 c4 08             	add    esp,0x8
c001a200:	5b                   	pop    ebx
c001a201:	c3                   	ret    

c001a202 <CPU::open(int, int, void*)>:
c001a202:	55                   	push   ebp
c001a203:	57                   	push   edi
c001a204:	56                   	push   esi
c001a205:	53                   	push   ebx
c001a206:	83 ec 18             	sub    esp,0x18
c001a209:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a20d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a211:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a215:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a21b:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a221:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a227:	50                   	push   eax
c001a228:	e8 6d 4a ff ff       	call   c000ec9a <GDT::setup()>
c001a22d:	83 c4 0c             	add    esp,0xc
c001a230:	6a 00                	push   0x0
c001a232:	68 ef be ad de       	push   0xdeadbeef
c001a237:	55                   	push   ebp
c001a238:	e8 ff 88 ff ff       	call   c0012b3c <TSS::setup(unsigned long, unsigned long)>
c001a23d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a240:	e8 d7 88 ff ff       	call   c0012b1c <TSS::flush()>
c001a245:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a24b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a24e:	e8 af 4c ff ff       	call   c000ef02 <IDT::setup()>
c001a253:	b8 00 04 00 00       	mov    eax,0x400
c001a258:	0f 23 f8             	mov    dr7,eax
c001a25b:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a265:	e8 86 5d ff ff       	call   c000fff0 <Phys::allocatePage()>
c001a26a:	83 c4 10             	add    esp,0x10
c001a26d:	85 f6                	test   esi,esi
c001a26f:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a275:	89 38                	mov    DWORD PTR [eax],edi
c001a277:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a27d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a280:	74 10                	je     c001a292 <CPU::open(int, int, void*)+0x90>
c001a282:	50                   	push   eax
c001a283:	50                   	push   eax
c001a284:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a28a:	56                   	push   esi
c001a28b:	e8 5c 92 ff ff       	call   c00134ec <VAS::setCPUSpecific(unsigned long)>
c001a290:	eb 0d                	jmp    c001a29f <CPU::open(int, int, void*)+0x9d>
c001a292:	83 ec 0c             	sub    esp,0xc
c001a295:	68 3d 52 02 c0       	push   0xc002523d
c001a29a:	e8 57 5b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	83 ec 0c             	sub    esp,0xc
c001a2a5:	68 4b 52 02 c0       	push   0xc002524b
c001a2aa:	e8 b8 2e ff ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001a2af:	e8 6f fb ff ff       	call   c0019e23 <HalInitialise()>
c001a2b4:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a2b9:	83 e0 10             	and    eax,0x10
c001a2bc:	83 f8 01             	cmp    eax,0x1
c001a2bf:	19 c0                	sbb    eax,eax
c001a2c1:	83 e0 46             	and    eax,0x46
c001a2c4:	83 c0 1e             	add    eax,0x1e
c001a2c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2ca:	e8 66 0d ff ff       	call   c000b035 <setupTimer(int)>
c001a2cf:	83 c4 10             	add    esp,0x10
c001a2d2:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a2d9:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a2df:	74 0c                	je     c001a2ed <CPU::open(int, int, void*)+0xeb>
c001a2e1:	83 ec 0c             	sub    esp,0xc
c001a2e4:	53                   	push   ebx
c001a2e5:	e8 4c fe ff ff       	call   c001a136 <CPU::setupFeatures()>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	83 c4 0c             	add    esp,0xc
c001a2f0:	31 c0                	xor    eax,eax
c001a2f2:	5b                   	pop    ebx
c001a2f3:	5e                   	pop    esi
c001a2f4:	5f                   	pop    edi
c001a2f5:	5d                   	pop    ebp
c001a2f6:	c3                   	ret    

c001a2f7 <convertLegacyIRQNumber(int)>:
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a305:	74 0c                	je     c001a313 <convertLegacyIRQNumber(int)+0x1c>
c001a307:	83 f8 0f             	cmp    eax,0xf
c001a30a:	7f 0b                	jg     c001a317 <convertLegacyIRQNumber(int)+0x20>
c001a30c:	0f b6 80 28 5e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda1d8]
c001a313:	83 c4 0c             	add    esp,0xc
c001a316:	c3                   	ret    
c001a317:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a31b:	83 ec 0c             	sub    esp,0xc
c001a31e:	68 e4 52 02 c0       	push   0xc00252e4
c001a323:	e8 ce 5a ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a328:	83 c4 10             	add    esp,0x10
c001a32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a32f:	83 c4 0c             	add    esp,0xc
c001a332:	c3                   	ret    

c001a333 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a333:	56                   	push   esi
c001a334:	31 c0                	xor    eax,eax
c001a336:	53                   	push   ebx
c001a337:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a33b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a33f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a343:	89 ca                	mov    edx,ecx
c001a345:	c1 e2 04             	shl    edx,0x4
c001a348:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a350:	74 17                	je     c001a369 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a352:	83 c0 01             	add    eax,0x1
c001a355:	83 f8 04             	cmp    eax,0x4
c001a358:	75 ee                	jne    c001a348 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a35a:	c7 44 24 0c 45 53 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025345
c001a362:	5b                   	pop    ebx
c001a363:	5e                   	pop    esi
c001a364:	e9 8d 5a ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001a369:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a36c:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a373:	5b                   	pop    ebx
c001a374:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a37b:	5e                   	pop    esi
c001a37c:	c3                   	ret    

c001a37d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a37d:	55                   	push   ebp
c001a37e:	57                   	push   edi
c001a37f:	56                   	push   esi
c001a380:	53                   	push   ebx
c001a381:	83 ec 0c             	sub    esp,0xc
c001a384:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a388:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a38f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a393:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a396:	74 57                	je     c001a3ef <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a398:	84 c0                	test   al,al
c001a39a:	89 c7                	mov    edi,eax
c001a39c:	74 1d                	je     c001a3bb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a39e:	83 fe 0f             	cmp    esi,0xf
c001a3a1:	0f 8f d9 00 00 00    	jg     c001a480 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001a3a7:	0f b6 b6 28 5e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda1d8]
c001a3ae:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a3b6:	d1 ef                	shr    edi,1
c001a3b8:	83 e7 01             	and    edi,0x1
c001a3bb:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a3c0:	83 ec 08             	sub    esp,0x8
c001a3c3:	31 db                	xor    ebx,ebx
c001a3c5:	50                   	push   eax
c001a3c6:	68 52 53 02 c0       	push   0xc0025352
c001a3cb:	e8 7e cb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a3d0:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	85 c0                	test   eax,eax
c001a3da:	7f 59                	jg     c001a435 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001a3dc:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a3df:	83 ec 0c             	sub    esp,0xc
c001a3e2:	68 69 53 02 c0       	push   0xc0025369
c001a3e7:	e8 0a 5a ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a3ec:	83 c4 10             	add    esp,0x10
c001a3ef:	89 e8                	mov    eax,ebp
c001a3f1:	31 d2                	xor    edx,edx
c001a3f3:	c1 e0 04             	shl    eax,0x4
c001a3f6:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a3fd:	85 c9                	test   ecx,ecx
c001a3ff:	0f 84 92 00 00 00    	je     c001a497 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001a405:	83 c2 01             	add    edx,0x1
c001a408:	83 fa 04             	cmp    edx,0x4
c001a40b:	75 e9                	jne    c001a3f6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001a40d:	83 ec 0c             	sub    esp,0xc
c001a410:	68 20 53 02 c0       	push   0xc0025320
c001a415:	e8 dc 59 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a41a:	83 c4 10             	add    esp,0x10
c001a41d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a422:	83 c4 0c             	add    esp,0xc
c001a425:	5b                   	pop    ebx
c001a426:	5e                   	pop    esi
c001a427:	5f                   	pop    edi
c001a428:	5d                   	pop    ebp
c001a429:	c3                   	ret    
c001a42a:	83 c3 01             	add    ebx,0x1
c001a42d:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a433:	7e a7                	jle    c001a3dc <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001a435:	8b 2c 9d 80 f4 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd0b80]
c001a43c:	83 ec 08             	sub    esp,0x8
c001a43f:	56                   	push   esi
c001a440:	55                   	push   ebp
c001a441:	e8 a4 66 00 00       	call   c0020aea <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	84 c0                	test   al,al
c001a44b:	74 dd                	je     c001a42a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a44d:	89 f8                	mov    eax,edi
c001a44f:	83 ec 04             	sub    esp,0x4
c001a452:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a459:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a45c:	0f b6 f8             	movzx  edi,al
c001a45f:	57                   	push   edi
c001a460:	89 e8                	mov    eax,ebp
c001a462:	6a 00                	push   0x0
c001a464:	0f b6 c0             	movzx  eax,al
c001a467:	50                   	push   eax
c001a468:	89 f0                	mov    eax,esi
c001a46a:	6a 00                	push   0x0
c001a46c:	0f b6 c0             	movzx  eax,al
c001a46f:	6a 00                	push   0x0
c001a471:	50                   	push   eax
c001a472:	53                   	push   ebx
c001a473:	e8 de 67 00 00       	call   c0020c56 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a478:	83 c4 20             	add    esp,0x20
c001a47b:	e9 6f ff ff ff       	jmp    c001a3ef <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	31 ff                	xor    edi,edi
c001a485:	68 e4 52 02 c0       	push   0xc00252e4
c001a48a:	e8 67 59 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a48f:	83 c4 10             	add    esp,0x10
c001a492:	e9 24 ff ff ff       	jmp    c001a3bb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a497:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001a49a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a49e:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a4a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a4a9:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a4b0:	83 c4 0c             	add    esp,0xc
c001a4b3:	89 f0                	mov    eax,esi
c001a4b5:	5b                   	pop    ebx
c001a4b6:	5e                   	pop    esi
c001a4b7:	5f                   	pop    edi
c001a4b8:	5d                   	pop    ebp
c001a4b9:	c3                   	ret    

c001a4ba <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a4c2:	c1 e0 04             	shl    eax,0x4
c001a4c5:	8d 50 10             	lea    edx,[eax+0x10]
c001a4c8:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a4ce:	74 08                	je     c001a4d8 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a4d0:	83 c0 04             	add    eax,0x4
c001a4d3:	39 d0                	cmp    eax,edx
c001a4d5:	75 f1                	jne    c001a4c8 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a4d7:	c3                   	ret    
c001a4d8:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a4e2:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a4ec:	eb e2                	jmp    c001a4d0 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a4ee <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a4ee:	56                   	push   esi
c001a4ef:	53                   	push   ebx
c001a4f0:	83 ec 04             	sub    esp,0x4
c001a4f3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a4f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a4fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a500:	74 09                	je     c001a50b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a502:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a509:	75 34                	jne    c001a53f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001a50b:	8d 43 20             	lea    eax,[ebx+0x20]
c001a50e:	c1 e0 04             	shl    eax,0x4
c001a511:	8d 50 10             	lea    edx,[eax+0x10]
c001a514:	39 b0 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],esi
c001a51a:	74 0d                	je     c001a529 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001a51c:	83 c0 04             	add    eax,0x4
c001a51f:	39 d0                	cmp    eax,edx
c001a521:	75 f1                	jne    c001a514 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001a523:	83 c4 04             	add    esp,0x4
c001a526:	5b                   	pop    ebx
c001a527:	5e                   	pop    esi
c001a528:	c3                   	ret    
c001a529:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a533:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a53d:	eb dd                	jmp    c001a51c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001a53f:	83 fb 0f             	cmp    ebx,0xf
c001a542:	7f 09                	jg     c001a54d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001a544:	0f b6 9b 28 5e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda1d8]
c001a54b:	eb be                	jmp    c001a50b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a54d:	83 ec 0c             	sub    esp,0xc
c001a550:	68 76 53 02 c0       	push   0xc0025376
c001a555:	e8 9c 58 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	eb ac                	jmp    c001a50b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a55f:	90                   	nop

c001a560 <picIoWait()>:
c001a560:	eb 00                	jmp    c001a562 <picIoWait()+0x2>
c001a562:	eb 00                	jmp    c001a564 <picIoWait()+0x4>
c001a564:	90                   	nop
c001a565:	c3                   	ret    
c001a566:	66 90                	xchg   ax,ax

c001a568 <picDisable()>:
c001a568:	83 ec 10             	sub    esp,0x10
c001a56b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a572:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a577:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a57b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a580:	ee                   	out    dx,al
c001a581:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a588:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a58d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a591:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a596:	ee                   	out    dx,al
c001a597:	90                   	nop
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	c3                   	ret    

c001a59c <picGetIRQReg(int)>:
c001a59c:	83 ec 10             	sub    esp,0x10
c001a59f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5a3:	0f b6 c0             	movzx  eax,al
c001a5a6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a5ad:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a5b1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a5b5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a5ba:	ee                   	out    dx,al
c001a5bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5bf:	0f b6 c0             	movzx  eax,al
c001a5c2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a5c9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a5cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a5d1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a5d6:	ee                   	out    dx,al
c001a5d7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a5de:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a5e3:	89 c2                	mov    edx,eax
c001a5e5:	ec                   	in     al,dx
c001a5e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5ea:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5ee:	0f b6 c0             	movzx  eax,al
c001a5f1:	c1 e0 08             	shl    eax,0x8
c001a5f4:	89 c1                	mov    ecx,eax
c001a5f6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a5fd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a602:	89 c2                	mov    edx,eax
c001a604:	ec                   	in     al,dx
c001a605:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a609:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a60d:	0f b6 c0             	movzx  eax,al
c001a610:	09 c8                	or     eax,ecx
c001a612:	83 c4 10             	add    esp,0x10
c001a615:	c3                   	ret    
c001a616:	66 90                	xchg   ax,ax

c001a618 <picOpen()>:
c001a618:	83 ec 50             	sub    esp,0x50
c001a61b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a622:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a627:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a62b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a62f:	ee                   	out    dx,al
c001a630:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a637:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a63c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a640:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a644:	ee                   	out    dx,al
c001a645:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a64d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a655:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a65c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a660:	89 c2                	mov    edx,eax
c001a662:	ec                   	in     al,dx
c001a663:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a667:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a66b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a66f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a67a:	89 c2                	mov    edx,eax
c001a67c:	ec                   	in     al,dx
c001a67d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a681:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a685:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a689:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a690:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a695:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a699:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a69d:	ee                   	out    dx,al
c001a69e:	e8 bd fe ff ff       	call   c001a560 <picIoWait()>
c001a6a3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a6aa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a6af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a6b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a6b7:	ee                   	out    dx,al
c001a6b8:	e8 a3 fe ff ff       	call   c001a560 <picIoWait()>
c001a6bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6c1:	0f b6 c0             	movzx  eax,al
c001a6c4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a6cb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a6cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a6d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6d7:	ee                   	out    dx,al
c001a6d8:	e8 83 fe ff ff       	call   c001a560 <picIoWait()>
c001a6dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a6e1:	0f b6 c0             	movzx  eax,al
c001a6e4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a6eb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a6ef:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a6f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a6f7:	ee                   	out    dx,al
c001a6f8:	e8 63 fe ff ff       	call   c001a560 <picIoWait()>
c001a6fd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a704:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a709:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a70d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a711:	ee                   	out    dx,al
c001a712:	e8 49 fe ff ff       	call   c001a560 <picIoWait()>
c001a717:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a71e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a723:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a72b:	ee                   	out    dx,al
c001a72c:	e8 2f fe ff ff       	call   c001a560 <picIoWait()>
c001a731:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a738:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a73d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a741:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a745:	ee                   	out    dx,al
c001a746:	e8 15 fe ff ff       	call   c001a560 <picIoWait()>
c001a74b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a752:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a757:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a75b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a75f:	ee                   	out    dx,al
c001a760:	e8 fb fd ff ff       	call   c001a560 <picIoWait()>
c001a765:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a76a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a771:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a775:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a779:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a77d:	ee                   	out    dx,al
c001a77e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a783:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a78a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a78e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a792:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a796:	ee                   	out    dx,al
c001a797:	90                   	nop
c001a798:	83 c4 50             	add    esp,0x50
c001a79b:	c3                   	ret    

c001a79c <picEOI(int)>:
c001a79c:	83 ec 10             	sub    esp,0x10
c001a79f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a7a4:	75 1e                	jne    c001a7c4 <picEOI(int)+0x28>
c001a7a6:	6a 0b                	push   0xb
c001a7a8:	e8 ef fd ff ff       	call   c001a59c <picGetIRQReg(int)>
c001a7ad:	83 c4 04             	add    esp,0x4
c001a7b0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a7b5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a7ba:	25 80 00 00 00       	and    eax,0x80
c001a7bf:	74 73                	je     c001a834 <picEOI(int)+0x98>
c001a7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a7c9:	75 31                	jne    c001a7fc <picEOI(int)+0x60>
c001a7cb:	6a 0b                	push   0xb
c001a7cd:	e8 ca fd ff ff       	call   c001a59c <picGetIRQReg(int)>
c001a7d2:	83 c4 04             	add    esp,0x4
c001a7d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7de:	98                   	cwde   
c001a7df:	85 c0                	test   eax,eax
c001a7e1:	78 19                	js     c001a7fc <picEOI(int)+0x60>
c001a7e3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a7ea:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a7ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a7f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a7f8:	ee                   	out    dx,al
c001a7f9:	eb 3d                	jmp    c001a838 <picEOI(int)+0x9c>
c001a7fb:	90                   	nop
c001a7fc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a801:	7e 19                	jle    c001a81c <picEOI(int)+0x80>
c001a803:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a80a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a80f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a813:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a818:	ee                   	out    dx,al
c001a819:	8d 76 00             	lea    esi,[esi+0x0]
c001a81c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a823:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a828:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a82c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a831:	ee                   	out    dx,al
c001a832:	eb 04                	jmp    c001a838 <picEOI(int)+0x9c>
c001a834:	90                   	nop
c001a835:	8d 76 00             	lea    esi,[esi+0x0]
c001a838:	83 c4 10             	add    esp,0x10
c001a83b:	c3                   	ret    

c001a83c <RTC::open(int, int, void*)>:
c001a83c:	31 c0                	xor    eax,eax
c001a83e:	c3                   	ret    
c001a83f:	90                   	nop

c001a840 <RTC::close(int, int, void*)>:
c001a840:	31 c0                	xor    eax,eax
c001a842:	c3                   	ret    
c001a843:	90                   	nop

c001a844 <RTC::timeInSecondsUTC()>:
c001a844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a848:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001a84e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a854:	c3                   	ret    
c001a855:	90                   	nop

c001a856 <RTC::timeInDatetimeUTC()>:
c001a856:	53                   	push   ebx
c001a857:	83 ec 14             	sub    esp,0x14
c001a85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a85e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a862:	8b 10                	mov    edx,DWORD PTR [eax]
c001a864:	50                   	push   eax
c001a865:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a868:	83 c4 0c             	add    esp,0xc
c001a86b:	52                   	push   edx
c001a86c:	50                   	push   eax
c001a86d:	53                   	push   ebx
c001a86e:	e8 45 ed fe ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c001a873:	89 d8                	mov    eax,ebx
c001a875:	83 c4 14             	add    esp,0x14
c001a878:	5b                   	pop    ebx
c001a879:	c2 04 00             	ret    0x4

c001a87c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	83 ec 14             	sub    esp,0x14
c001a881:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a885:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a887:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001a88a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a88e:	52                   	push   edx
c001a88f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a897:	50                   	push   eax
c001a898:	e8 1b ed fe ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c001a89d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001a8a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8ad:	89 f0                	mov    eax,esi
c001a8af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8b3:	83 c4 20             	add    esp,0x20
c001a8b6:	5b                   	pop    ebx
c001a8b7:	5e                   	pop    esi
c001a8b8:	ff e0                	jmp    eax

c001a8ba <RTC::~RTC()>:
c001a8ba:	83 ec 0c             	sub    esp,0xc
c001a8bd:	ba a0 53 02 c0       	mov    edx,0xc00253a0
c001a8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c6:	89 10                	mov    DWORD PTR [eax],edx
c001a8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	50                   	push   eax
c001a8d0:	e8 bb e7 fe ff       	call   c0009090 <Clock::~Clock()>
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	90                   	nop
c001a8d9:	83 c4 0c             	add    esp,0xc
c001a8dc:	c3                   	ret    
c001a8dd:	90                   	nop

c001a8de <RTC::~RTC()>:
c001a8de:	83 ec 0c             	sub    esp,0xc
c001a8e1:	83 ec 0c             	sub    esp,0xc
c001a8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8e8:	e8 cd ff ff ff       	call   c001a8ba <RTC::~RTC()>
c001a8ed:	83 c4 10             	add    esp,0x10
c001a8f0:	83 ec 08             	sub    esp,0x8
c001a8f3:	68 60 01 00 00       	push   0x160
c001a8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8fc:	e8 26 29 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	83 c4 0c             	add    esp,0xc
c001a907:	c3                   	ret    

c001a908 <RTC::get_update_in_progress_flag()>:
c001a908:	83 ec 18             	sub    esp,0x18
c001a90b:	6a 0a                	push   0xa
c001a90d:	e8 01 db ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a912:	83 c4 1c             	add    esp,0x1c
c001a915:	0f b6 c0             	movzx  eax,al
c001a918:	c1 e8 07             	shr    eax,0x7
c001a91b:	c3                   	ret    

c001a91c <RTC::completeRTCRefresh()>:
c001a91c:	55                   	push   ebp
c001a91d:	57                   	push   edi
c001a91e:	56                   	push   esi
c001a91f:	53                   	push   ebx
c001a920:	83 ec 3c             	sub    esp,0x3c
c001a923:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001a929:	83 ec 0c             	sub    esp,0xc
c001a92c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a930:	e8 d3 ff ff ff       	call   c001a908 <RTC::get_update_in_progress_flag()>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	84 c0                	test   al,al
c001a93a:	74 0e                	je     c001a94a <RTC::completeRTCRefresh()+0x2e>
c001a93c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a942:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001a948:	73 df                	jae    c001a929 <RTC::completeRTCRefresh()+0xd>
c001a94a:	83 ec 0c             	sub    esp,0xc
c001a94d:	6a 00                	push   0x0
c001a94f:	e8 bf da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a954:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a95b:	89 c7                	mov    edi,eax
c001a95d:	e8 b1 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a962:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a969:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a96d:	e8 a1 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a972:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a979:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a97d:	e8 91 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a982:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a989:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001a98d:	e8 81 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a992:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a999:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a99d:	e8 71 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a9a2:	0f b6 c0             	movzx  eax,al
c001a9a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001a9b2:	83 ec 0c             	sub    esp,0xc
c001a9b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9b9:	e8 4a ff ff ff       	call   c001a908 <RTC::get_update_in_progress_flag()>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	84 c0                	test   al,al
c001a9c3:	74 0e                	je     c001a9d3 <RTC::completeRTCRefresh()+0xb7>
c001a9c5:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a9cb:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001a9d1:	73 df                	jae    c001a9b2 <RTC::completeRTCRefresh()+0x96>
c001a9d3:	83 ec 0c             	sub    esp,0xc
c001a9d6:	6a 00                	push   0x0
c001a9d8:	e8 36 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a9dd:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a9e4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a9e8:	e8 26 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a9ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a9f4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a9f8:	e8 16 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001a9fd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001aa04:	88 c3                	mov    bl,al
c001aa06:	e8 08 da ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001aa0b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001aa12:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa16:	e8 f8 d9 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001aa1b:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001aa22:	89 c6                	mov    esi,eax
c001aa24:	e8 ea d9 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001aa29:	89 f9                	mov    ecx,edi
c001aa2b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa2f:	83 c4 10             	add    esp,0x10
c001aa32:	0f b6 e8             	movzx  ebp,al
c001aa35:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa3a:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001aa3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa42:	74 27                	je     c001aa6b <RTC::completeRTCRefresh()+0x14f>
c001aa44:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001aa48:	89 f0                	mov    eax,esi
c001aa4a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001aa4e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001aa52:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aa56:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001aa5a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001aa5e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa62:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa66:	e9 41 ff ff ff       	jmp    c001a9ac <RTC::completeRTCRefresh()+0x90>
c001aa6b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aa70:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aa74:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa78:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001aa7c:	75 c6                	jne    c001aa44 <RTC::completeRTCRefresh()+0x128>
c001aa7e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001aa83:	89 f1                	mov    ecx,esi
c001aa85:	0f b6 fb             	movzx  edi,bl
c001aa88:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001aa8c:	0f b6 c9             	movzx  ecx,cl
c001aa8f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001aa93:	89 f1                	mov    ecx,esi
c001aa95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa99:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aa9d:	0f 94 c2             	sete   dl
c001aaa0:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001aaa4:	0f 94 c0             	sete   al
c001aaa7:	21 d0                	and    eax,edx
c001aaa9:	31 d2                	xor    edx,edx
c001aaab:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001aaaf:	0f 94 c2             	sete   dl
c001aab2:	85 c2                	test   edx,eax
c001aab4:	74 8e                	je     c001aa44 <RTC::completeRTCRefresh()+0x128>
c001aab6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001aaba:	75 88                	jne    c001aa44 <RTC::completeRTCRefresh()+0x128>
c001aabc:	83 ec 0c             	sub    esp,0xc
c001aabf:	6a 0b                	push   0xb
c001aac1:	e8 4d d9 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001aac6:	83 c4 10             	add    esp,0x10
c001aac9:	a8 04                	test   al,0x4
c001aacb:	75 7a                	jne    c001ab47 <RTC::completeRTCRefresh()+0x22b>
c001aacd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aad1:	c1 ef 04             	shr    edi,0x4
c001aad4:	83 e6 0f             	and    esi,0xf
c001aad7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aadb:	c1 ed 04             	shr    ebp,0x4
c001aade:	6b ed 0a             	imul   ebp,ebp,0xa
c001aae1:	c1 ea 04             	shr    edx,0x4
c001aae4:	6b d2 0a             	imul   edx,edx,0xa
c001aae7:	83 e1 0f             	and    ecx,0xf
c001aaea:	01 d1                	add    ecx,edx
c001aaec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aaf0:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001aaf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aaf8:	c1 ea 04             	shr    edx,0x4
c001aafb:	6b d2 0a             	imul   edx,edx,0xa
c001aafe:	83 e1 0f             	and    ecx,0xf
c001ab01:	01 d1                	add    ecx,edx
c001ab03:	89 fa                	mov    edx,edi
c001ab05:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001ab09:	83 e2 07             	and    edx,0x7
c001ab0c:	89 d9                	mov    ecx,ebx
c001ab0e:	6b d2 0a             	imul   edx,edx,0xa
c001ab11:	83 e1 0f             	and    ecx,0xf
c001ab14:	83 e3 80             	and    ebx,0xffffff80
c001ab17:	01 d1                	add    ecx,edx
c001ab19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab1d:	09 cb                	or     ebx,ecx
c001ab1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab23:	c1 ea 04             	shr    edx,0x4
c001ab26:	6b d2 0a             	imul   edx,edx,0xa
c001ab29:	83 e1 0f             	and    ecx,0xf
c001ab2c:	01 d1                	add    ecx,edx
c001ab2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab32:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001ab36:	c1 ea 04             	shr    edx,0x4
c001ab39:	6b d2 0a             	imul   edx,edx,0xa
c001ab3c:	01 d6                	add    esi,edx
c001ab3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab42:	83 e2 0f             	and    edx,0xf
c001ab45:	01 d5                	add    ebp,edx
c001ab47:	a8 02                	test   al,0x2
c001ab49:	75 15                	jne    c001ab60 <RTC::completeRTCRefresh()+0x244>
c001ab4b:	f6 c3 80             	test   bl,0x80
c001ab4e:	74 10                	je     c001ab60 <RTC::completeRTCRefresh()+0x244>
c001ab50:	83 e3 7f             	and    ebx,0x7f
c001ab53:	b9 18 00 00 00       	mov    ecx,0x18
c001ab58:	8d 43 0c             	lea    eax,[ebx+0xc]
c001ab5b:	99                   	cdq    
c001ab5c:	f7 f9                	idiv   ecx
c001ab5e:	88 d3                	mov    bl,dl
c001ab60:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001ab66:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001ab6c:	77 06                	ja     c001ab74 <RTC::completeRTCRefresh()+0x258>
c001ab6e:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001ab74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab79:	31 c9                	xor    ecx,ecx
c001ab7b:	31 d2                	xor    edx,edx
c001ab7d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ab81:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001ab85:	89 cd                	mov    ebp,ecx
c001ab87:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001ab8b:	c1 e7 10             	shl    edi,0x10
c001ab8e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ab94:	c1 e0 10             	shl    eax,0x10
c001ab97:	09 c5                	or     ebp,eax
c001ab99:	89 e9                	mov    ecx,ebp
c001ab9b:	0f b7 c2             	movzx  eax,dx
c001ab9e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001aba2:	09 f8                	or     eax,edi
c001aba4:	89 c2                	mov    edx,eax
c001aba6:	50                   	push   eax
c001aba7:	50                   	push   eax
c001aba8:	88 d9                	mov    cl,bl
c001abaa:	51                   	push   ecx
c001abab:	52                   	push   edx
c001abac:	e8 17 e6 fe ff       	call   c00091c8 <KeDatetimeToSeconds(datetime_t)>
c001abb1:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001abb5:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001abbb:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001abc1:	83 c4 4c             	add    esp,0x4c
c001abc4:	5b                   	pop    ebx
c001abc5:	5e                   	pop    esi
c001abc6:	5f                   	pop    edi
c001abc7:	5d                   	pop    ebp
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop

c001abca <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001abca:	55                   	push   ebp
c001abcb:	57                   	push   edi
c001abcc:	56                   	push   esi
c001abcd:	53                   	push   ebx
c001abce:	83 ec 34             	sub    esp,0x34
c001abd1:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001abd5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001abd9:	6a 00                	push   0x0
c001abdb:	6a 00                	push   0x0
c001abdd:	e8 85 d8 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001abe2:	5d                   	pop    ebp
c001abe3:	89 fb                	mov    ebx,edi
c001abe5:	58                   	pop    eax
c001abe6:	6a 00                	push   0x0
c001abe8:	6a 02                	push   0x2
c001abea:	e8 78 d8 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001abef:	89 f8                	mov    eax,edi
c001abf1:	89 f9                	mov    ecx,edi
c001abf3:	0f b6 c4             	movzx  eax,ah
c001abf6:	31 d2                	xor    edx,edx
c001abf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abfc:	c1 e9 10             	shr    ecx,0x10
c001abff:	89 f0                	mov    eax,esi
c001ac01:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ac05:	89 f0                	mov    eax,esi
c001ac07:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001ac0b:	0f b6 c4             	movzx  eax,ah
c001ac0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac12:	89 f0                	mov    eax,esi
c001ac14:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ac18:	c1 e8 10             	shr    eax,0x10
c001ac1b:	b9 64 00 00 00       	mov    ecx,0x64
c001ac20:	f7 f1                	div    ecx
c001ac22:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001ac29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ac2d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ac31:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ac35:	e8 d9 d7 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	a8 04                	test   al,0x4
c001ac3f:	89 c5                	mov    ebp,eax
c001ac41:	75 6e                	jne    c001acb1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001ac43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ac47:	31 d2                	xor    edx,edx
c001ac49:	0f b6 c1             	movzx  eax,cl
c001ac4c:	b9 0a 00 00 00       	mov    ecx,0xa
c001ac51:	f7 f1                	div    ecx
c001ac53:	c1 e0 04             	shl    eax,0x4
c001ac56:	09 d0                	or     eax,edx
c001ac58:	31 d2                	xor    edx,edx
c001ac5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac5e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ac63:	f7 f1                	div    ecx
c001ac65:	c1 e0 04             	shl    eax,0x4
c001ac68:	09 d0                	or     eax,edx
c001ac6a:	31 d2                	xor    edx,edx
c001ac6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac70:	0f b6 c3             	movzx  eax,bl
c001ac73:	f7 f1                	div    ecx
c001ac75:	c1 e0 04             	shl    eax,0x4
c001ac78:	09 d0                	or     eax,edx
c001ac7a:	31 d2                	xor    edx,edx
c001ac7c:	89 c3                	mov    ebx,eax
c001ac7e:	89 f0                	mov    eax,esi
c001ac80:	0f b6 c0             	movzx  eax,al
c001ac83:	f7 f1                	div    ecx
c001ac85:	c1 e0 04             	shl    eax,0x4
c001ac88:	09 d0                	or     eax,edx
c001ac8a:	31 d2                	xor    edx,edx
c001ac8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac95:	f7 f1                	div    ecx
c001ac97:	c1 e0 04             	shl    eax,0x4
c001ac9a:	09 d0                	or     eax,edx
c001ac9c:	31 d2                	xor    edx,edx
c001ac9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aca6:	f7 f1                	div    ecx
c001aca8:	c1 e0 04             	shl    eax,0x4
c001acab:	09 d0                	or     eax,edx
c001acad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acb1:	83 e5 02             	and    ebp,0x2
c001acb4:	75 1e                	jne    c001acd4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001acb6:	0f b6 c3             	movzx  eax,bl
c001acb9:	83 f8 0b             	cmp    eax,0xb
c001acbc:	76 10                	jbe    c001acce <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001acbe:	8d 53 f4             	lea    edx,[ebx-0xc]
c001acc1:	84 d2                	test   dl,dl
c001acc3:	88 d3                	mov    bl,dl
c001acc5:	75 02                	jne    c001acc9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001acc7:	b3 0c                	mov    bl,0xc
c001acc9:	83 cb 80             	or     ebx,0xffffff80
c001accc:	eb 06                	jmp    c001acd4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001acce:	85 c0                	test   eax,eax
c001acd0:	75 02                	jne    c001acd4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001acd2:	b3 0c                	mov    bl,0xc
c001acd4:	50                   	push   eax
c001acd5:	0f b6 db             	movzx  ebx,bl
c001acd8:	50                   	push   eax
c001acd9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001acde:	52                   	push   edx
c001acdf:	6a 00                	push   0x0
c001ace1:	e8 81 d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001ace6:	5a                   	pop    edx
c001ace7:	59                   	pop    ecx
c001ace8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aced:	50                   	push   eax
c001acee:	6a 02                	push   0x2
c001acf0:	e8 72 d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001acf5:	5e                   	pop    esi
c001acf6:	5f                   	pop    edi
c001acf7:	53                   	push   ebx
c001acf8:	6a 04                	push   0x4
c001acfa:	e8 68 d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001acff:	5d                   	pop    ebp
c001ad00:	58                   	pop    eax
c001ad01:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001ad06:	52                   	push   edx
c001ad07:	6a 07                	push   0x7
c001ad09:	e8 59 d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad0e:	58                   	pop    eax
c001ad0f:	5a                   	pop    edx
c001ad10:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ad15:	50                   	push   eax
c001ad16:	6a 08                	push   0x8
c001ad18:	e8 4a d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad1d:	59                   	pop    ecx
c001ad1e:	5b                   	pop    ebx
c001ad1f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001ad24:	55                   	push   ebp
c001ad25:	6a 09                	push   0x9
c001ad27:	e8 3b d7 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad2c:	5e                   	pop    esi
c001ad2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad31:	e8 e6 fb ff ff       	call   c001a91c <RTC::completeRTCRefresh()>
c001ad36:	83 c4 3c             	add    esp,0x3c
c001ad39:	b0 01                	mov    al,0x1
c001ad3b:	5b                   	pop    ebx
c001ad3c:	5e                   	pop    esi
c001ad3d:	5f                   	pop    edi
c001ad3e:	5d                   	pop    ebp
c001ad3f:	c3                   	ret    

c001ad40 <rtcIRQHandler(regs*, void*)>:
c001ad40:	53                   	push   ebx
c001ad41:	83 ec 14             	sub    esp,0x14
c001ad44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad48:	6a 0c                	push   0xc
c001ad4a:	e8 c4 d6 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	a8 80                	test   al,0x80
c001ad54:	74 24                	je     c001ad7a <rtcIRQHandler(regs*, void*)+0x3a>
c001ad56:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ad5d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ad64:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001ad6b:	75 0d                	jne    c001ad7a <rtcIRQHandler(regs*, void*)+0x3a>
c001ad6d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad71:	83 c4 08             	add    esp,0x8
c001ad74:	5b                   	pop    ebx
c001ad75:	e9 a2 fb ff ff       	jmp    c001a91c <RTC::completeRTCRefresh()>
c001ad7a:	83 c4 08             	add    esp,0x8
c001ad7d:	5b                   	pop    ebx
c001ad7e:	c3                   	ret    
c001ad7f:	90                   	nop

c001ad80 <RTC::RTC()>:
c001ad80:	83 ec 1c             	sub    esp,0x1c
c001ad83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad87:	83 ec 08             	sub    esp,0x8
c001ad8a:	68 83 53 02 c0       	push   0xc0025383
c001ad8f:	50                   	push   eax
c001ad90:	e8 c5 e2 fe ff       	call   c000905a <Clock::Clock(char const*)>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	ba a0 53 02 c0       	mov    edx,0xc00253a0
c001ad9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ada1:	89 10                	mov    DWORD PTR [eax],edx
c001ada3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ada7:	83 ec 0c             	sub    esp,0xc
c001adaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adae:	6a 01                	push   0x1
c001adb0:	68 40 ad 01 c0       	push   0xc001ad40
c001adb5:	6a 08                	push   0x8
c001adb7:	50                   	push   eax
c001adb8:	e8 89 eb fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001adbd:	83 c4 20             	add    esp,0x20
c001adc0:	89 c2                	mov    edx,eax
c001adc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adc6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001adcc:	fa                   	cli    
c001adcd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001add2:	83 c0 01             	add    eax,0x1
c001add5:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001adda:	83 ec 0c             	sub    esp,0xc
c001addd:	6a 0b                	push   0xb
c001addf:	e8 2f d6 ff ff       	call   c0018413 <x86ReadCMOS(unsigned char)>
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001adeb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001adef:	83 c8 10             	or     eax,0x10
c001adf2:	0f b6 c0             	movzx  eax,al
c001adf5:	83 ec 08             	sub    esp,0x8
c001adf8:	50                   	push   eax
c001adf9:	6a 0b                	push   0xb
c001adfb:	e8 67 d6 ff ff       	call   c0018467 <x86WriteCMOS(unsigned char, unsigned char)>
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	83 ec 0c             	sub    esp,0xc
c001ae06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae0a:	e8 0d fb ff ff       	call   c001a91c <RTC::completeRTCRefresh()>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001ae1a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001ae1f:	85 c0                	test   eax,eax
c001ae21:	75 01                	jne    c001ae24 <RTC::RTC()+0xa4>
c001ae23:	fb                   	sti    
c001ae24:	90                   	nop
c001ae25:	83 c4 1c             	add    esp,0x1c
c001ae28:	c3                   	ret    
c001ae29:	66 90                	xchg   ax,ax
c001ae2b:	90                   	nop

c001ae2c <HalConsoleScroll(int, int)>:
c001ae2c:	83 ec 10             	sub    esp,0x10
c001ae2f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001ae37:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001ae3f:	90                   	nop
c001ae40:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ae45:	0f 8f e1 00 00 00    	jg     c001af2c <HalConsoleScroll(int, int)+0x100>
c001ae4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ae53:	90                   	nop
c001ae54:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001ae5c:	0f 8f be 00 00 00    	jg     c001af20 <HalConsoleScroll(int, int)+0xf4>
c001ae62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae66:	89 d0                	mov    eax,edx
c001ae68:	c1 e0 02             	shl    eax,0x2
c001ae6b:	01 d0                	add    eax,edx
c001ae6d:	c1 e0 05             	shl    eax,0x5
c001ae70:	89 c2                	mov    edx,eax
c001ae72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae76:	01 d0                	add    eax,edx
c001ae78:	89 c2                	mov    edx,eax
c001ae7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae7e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ae81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae85:	89 d0                	mov    eax,edx
c001ae87:	c1 e0 02             	shl    eax,0x2
c001ae8a:	01 d0                	add    eax,edx
c001ae8c:	c1 e0 05             	shl    eax,0x5
c001ae8f:	89 c2                	mov    edx,eax
c001ae91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae95:	01 d0                	add    eax,edx
c001ae97:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001ae9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aea1:	01 d0                	add    eax,edx
c001aea3:	8a 11                	mov    dl,BYTE PTR [ecx]
c001aea5:	88 10                	mov    BYTE PTR [eax],dl
c001aea7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001aeac:	75 66                	jne    c001af14 <HalConsoleScroll(int, int)+0xe8>
c001aeae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeb2:	83 e0 01             	and    eax,0x1
c001aeb5:	74 39                	je     c001aef0 <HalConsoleScroll(int, int)+0xc4>
c001aeb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aebb:	83 e0 0f             	and    eax,0xf
c001aebe:	88 c2                	mov    dl,al
c001aec0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec4:	c1 e0 04             	shl    eax,0x4
c001aec7:	09 d0                	or     eax,edx
c001aec9:	88 c1                	mov    cl,al
c001aecb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aecf:	89 d0                	mov    eax,edx
c001aed1:	c1 e0 02             	shl    eax,0x2
c001aed4:	01 d0                	add    eax,edx
c001aed6:	c1 e0 05             	shl    eax,0x5
c001aed9:	89 c2                	mov    edx,eax
c001aedb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aedf:	01 d0                	add    eax,edx
c001aee1:	89 c2                	mov    edx,eax
c001aee3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee7:	01 d0                	add    eax,edx
c001aee9:	88 ca                	mov    dl,cl
c001aeeb:	88 10                	mov    BYTE PTR [eax],dl
c001aeed:	eb 25                	jmp    c001af14 <HalConsoleScroll(int, int)+0xe8>
c001aeef:	90                   	nop
c001aef0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aef4:	89 d0                	mov    eax,edx
c001aef6:	c1 e0 02             	shl    eax,0x2
c001aef9:	01 d0                	add    eax,edx
c001aefb:	c1 e0 05             	shl    eax,0x5
c001aefe:	89 c2                	mov    edx,eax
c001af00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af04:	01 d0                	add    eax,edx
c001af06:	89 c2                	mov    edx,eax
c001af08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0c:	01 d0                	add    eax,edx
c001af0e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001af11:	8d 76 00             	lea    esi,[esi+0x0]
c001af14:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001af19:	e9 36 ff ff ff       	jmp    c001ae54 <HalConsoleScroll(int, int)+0x28>
c001af1e:	66 90                	xchg   ax,ax
c001af20:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001af25:	e9 16 ff ff ff       	jmp    c001ae40 <HalConsoleScroll(int, int)+0x14>
c001af2a:	66 90                	xchg   ax,ax
c001af2c:	90                   	nop
c001af2d:	83 c4 10             	add    esp,0x10
c001af30:	c3                   	ret    
c001af31:	8d 76 00             	lea    esi,[esi+0x0]

c001af34 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001af34:	83 ec 14             	sub    esp,0x14
c001af37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af3b:	88 04 24             	mov    BYTE PTR [esp],al
c001af3e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001af41:	0f b6 c0             	movzx  eax,al
c001af44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af48:	89 d1                	mov    ecx,edx
c001af4a:	83 e1 0f             	and    ecx,0xf
c001af4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af51:	c1 e2 04             	shl    edx,0x4
c001af54:	0f b6 d2             	movzx  edx,dl
c001af57:	09 ca                	or     edx,ecx
c001af59:	c1 e2 08             	shl    edx,0x8
c001af5c:	09 d0                	or     eax,edx
c001af5e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001af63:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001af6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af6f:	89 d0                	mov    eax,edx
c001af71:	c1 e0 02             	shl    eax,0x2
c001af74:	01 d0                	add    eax,edx
c001af76:	c1 e0 04             	shl    eax,0x4
c001af79:	89 c2                	mov    edx,eax
c001af7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af7f:	01 d0                	add    eax,edx
c001af81:	d1 e0                	shl    eax,1
c001af83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001af87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af8b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001af90:	66 89 10             	mov    WORD PTR [eax],dx
c001af93:	90                   	nop
c001af94:	83 c4 14             	add    esp,0x14
c001af97:	c3                   	ret    

c001af98 <HalConsoleCursorUpdate(int, int)>:
c001af98:	83 ec 20             	sub    esp,0x20
c001af9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af9f:	89 c2                	mov    edx,eax
c001afa1:	c1 e2 02             	shl    edx,0x2
c001afa4:	01 d0                	add    eax,edx
c001afa6:	c1 e0 04             	shl    eax,0x4
c001afa9:	89 c2                	mov    edx,eax
c001afab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afaf:	01 d0                	add    eax,edx
c001afb1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001afb6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001afbd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001afc2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afca:	ee                   	out    dx,al
c001afcb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001afd0:	0f b6 c0             	movzx  eax,al
c001afd3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001afda:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001afde:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001afe2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afe6:	ee                   	out    dx,al
c001afe7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001afee:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001aff3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001aff7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001affb:	ee                   	out    dx,al
c001affc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b001:	c1 e8 08             	shr    eax,0x8
c001b004:	0f b6 c0             	movzx  eax,al
c001b007:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b00e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b012:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b016:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b01a:	ee                   	out    dx,al
c001b01b:	90                   	nop
c001b01c:	83 c4 20             	add    esp,0x20
c001b01f:	c3                   	ret    

c001b020 <FAT::getName()>:
c001b020:	b8 d4 53 02 c0       	mov    eax,0xc00253d4
c001b025:	c3                   	ret    
c001b026:	66 90                	xchg   ax,ax

c001b028 <FAT::tell(void*, unsigned long long*)>:
c001b028:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b02d:	75 09                	jne    c001b038 <FAT::tell(void*, unsigned long long*)+0x10>
c001b02f:	b8 04 00 00 00       	mov    eax,0x4
c001b034:	c3                   	ret    
c001b035:	8d 76 00             	lea    esi,[esi+0x0]
c001b038:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b03d:	75 09                	jne    c001b048 <FAT::tell(void*, unsigned long long*)+0x20>
c001b03f:	b8 04 00 00 00       	mov    eax,0x4
c001b044:	c3                   	ret    
c001b045:	8d 76 00             	lea    esi,[esi+0x0]
c001b048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b04c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b04f:	ba 00 00 00 00       	mov    edx,0x0
c001b054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b058:	89 01                	mov    DWORD PTR [ecx],eax
c001b05a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b05d:	b8 00 00 00 00       	mov    eax,0x0
c001b062:	c3                   	ret    
c001b063:	90                   	nop

c001b064 <FAT::stat(void*, unsigned long long*)>:
c001b064:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b069:	75 09                	jne    c001b074 <FAT::stat(void*, unsigned long long*)+0x10>
c001b06b:	b8 04 00 00 00       	mov    eax,0x4
c001b070:	c3                   	ret    
c001b071:	8d 76 00             	lea    esi,[esi+0x0]
c001b074:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b079:	75 09                	jne    c001b084 <FAT::stat(void*, unsigned long long*)+0x20>
c001b07b:	b8 04 00 00 00       	mov    eax,0x4
c001b080:	c3                   	ret    
c001b081:	8d 76 00             	lea    esi,[esi+0x0]
c001b084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b08b:	ba 00 00 00 00       	mov    edx,0x0
c001b090:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b094:	89 01                	mov    DWORD PTR [ecx],eax
c001b096:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b099:	b8 00 00 00 00       	mov    eax,0x0
c001b09e:	c3                   	ret    
c001b09f:	90                   	nop

c001b0a0 <FAT::~FAT()>:
c001b0a0:	83 ec 0c             	sub    esp,0xc
c001b0a3:	ba 20 54 02 c0       	mov    edx,0xc0025420
c001b0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ac:	89 10                	mov    DWORD PTR [eax],edx
c001b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b2:	83 ec 0c             	sub    esp,0xc
c001b0b5:	50                   	push   eax
c001b0b6:	e8 bf cc fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001b0bb:	83 c4 10             	add    esp,0x10
c001b0be:	90                   	nop
c001b0bf:	83 c4 0c             	add    esp,0xc
c001b0c2:	c3                   	ret    
c001b0c3:	90                   	nop

c001b0c4 <FAT::~FAT()>:
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	83 ec 0c             	sub    esp,0xc
c001b0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0ce:	e8 cd ff ff ff       	call   c001b0a0 <FAT::~FAT()>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	83 ec 08             	sub    esp,0x8
c001b0d9:	6a 08                	push   0x8
c001b0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0df:	e8 43 21 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c001b0e4:	83 c4 10             	add    esp,0x10
c001b0e7:	83 c4 0c             	add    esp,0xc
c001b0ea:	c3                   	ret    
c001b0eb:	90                   	nop

c001b0ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b0ec:	83 ec 1c             	sub    esp,0x1c
c001b0ef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b0f6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b0fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0ff:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b106:	83 f8 ff             	cmp    eax,0xffffffff
c001b109:	75 35                	jne    c001b140 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b10b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b10f:	88 c2                	mov    dl,al
c001b111:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b116:	01 d0                	add    eax,edx
c001b118:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b11c:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b122:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b126:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b12d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b132:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b136:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b13d:	eb 19                	jmp    c001b158 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b13f:	90                   	nop
c001b140:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b144:	88 c2                	mov    dl,al
c001b146:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b14a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b151:	01 d0                	add    eax,edx
c001b153:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b157:	90                   	nop
c001b158:	83 ec 04             	sub    esp,0x4
c001b15b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b15f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b163:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b167:	50                   	push   eax
c001b168:	e8 67 a0 fe ff       	call   c00051d4 <f_getlabel>
c001b16d:	83 c4 10             	add    esp,0x10
c001b170:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b174:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b179:	75 09                	jne    c001b184 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b17b:	b8 00 00 00 00       	mov    eax,0x0
c001b180:	eb 0a                	jmp    c001b18c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b182:	66 90                	xchg   ax,ax
c001b184:	b8 01 00 00 00       	mov    eax,0x1
c001b189:	8d 76 00             	lea    esi,[esi+0x0]
c001b18c:	83 c4 1c             	add    esp,0x1c
c001b18f:	c3                   	ret    

c001b190 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b190:	53                   	push   ebx
c001b191:	83 ec 58             	sub    esp,0x58
c001b194:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b19c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b1a0:	b9 00 00 00 00       	mov    ecx,0x0
c001b1a5:	b8 3c 00 00 00       	mov    eax,0x3c
c001b1aa:	83 e0 f8             	and    eax,0xfffffff8
c001b1ad:	89 c3                	mov    ebx,eax
c001b1af:	b8 00 00 00 00       	mov    eax,0x0
c001b1b4:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b1b8:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b1bc:	83 c0 08             	add    eax,0x8
c001b1bf:	39 d8                	cmp    eax,ebx
c001b1c1:	72 f1                	jb     c001b1b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b1c3:	01 c2                	add    edx,eax
c001b1c5:	89 0a                	mov    DWORD PTR [edx],ecx
c001b1c7:	83 c2 04             	add    edx,0x4
c001b1ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b1ce:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b1d5:	83 f8 ff             	cmp    eax,0xffffffff
c001b1d8:	75 36                	jne    c001b210 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001b1da:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b1de:	88 c2                	mov    dl,al
c001b1e0:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b1e5:	01 d0                	add    eax,edx
c001b1e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b1eb:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b1f1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b1f5:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b1fc:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b201:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b205:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b20c:	eb 1a                	jmp    c001b228 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001b20e:	66 90                	xchg   ax,ax
c001b210:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b214:	88 c2                	mov    dl,al
c001b216:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b21a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b221:	01 d0                	add    eax,edx
c001b223:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b227:	90                   	nop
c001b228:	83 ec 08             	sub    esp,0x8
c001b22b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b22f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b233:	50                   	push   eax
c001b234:	e8 37 56 fe ff       	call   c0000870 <strcat>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	83 ec 0c             	sub    esp,0xc
c001b23f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b243:	50                   	push   eax
c001b244:	e8 df a0 fe ff       	call   c0005328 <f_setlabel>
c001b249:	83 c4 10             	add    esp,0x10
c001b24c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b250:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b255:	75 09                	jne    c001b260 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001b257:	b8 00 00 00 00       	mov    eax,0x0
c001b25c:	eb 0a                	jmp    c001b268 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001b25e:	66 90                	xchg   ax,ax
c001b260:	b8 01 00 00 00       	mov    eax,0x1
c001b265:	8d 76 00             	lea    esi,[esi+0x0]
c001b268:	83 c4 58             	add    esp,0x58
c001b26b:	5b                   	pop    ebx
c001b26c:	c3                   	ret    
c001b26d:	90                   	nop
c001b26e:	66 90                	xchg   ax,ax

c001b270 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b270:	83 ec 2c             	sub    esp,0x2c
c001b273:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b27b:	83 ec 08             	sub    esp,0x8
c001b27e:	68 f8 53 02 c0       	push   0xc00253f8
c001b283:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b287:	e8 f4 54 fe ff       	call   c0000780 <strcmp>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	85 c0                	test   eax,eax
c001b291:	0f 94 c0             	sete   al
c001b294:	0f b6 c0             	movzx  eax,al
c001b297:	85 c0                	test   eax,eax
c001b299:	74 0d                	je     c001b2a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b29b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b2a3:	e9 c0 00 00 00       	jmp    c001b368 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b2a8:	83 ec 08             	sub    esp,0x8
c001b2ab:	68 ea 53 02 c0       	push   0xc00253ea
c001b2b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2b4:	e8 c7 54 fe ff       	call   c0000780 <strcmp>
c001b2b9:	83 c4 10             	add    esp,0x10
c001b2bc:	85 c0                	test   eax,eax
c001b2be:	0f 94 c0             	sete   al
c001b2c1:	0f b6 c0             	movzx  eax,al
c001b2c4:	85 c0                	test   eax,eax
c001b2c6:	74 10                	je     c001b2d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b2c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b2d0:	e9 93 00 00 00       	jmp    c001b368 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d8:	83 ec 08             	sub    esp,0x8
c001b2db:	68 f0 53 02 c0       	push   0xc00253f0
c001b2e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2e4:	e8 97 54 fe ff       	call   c0000780 <strcmp>
c001b2e9:	83 c4 10             	add    esp,0x10
c001b2ec:	85 c0                	test   eax,eax
c001b2ee:	0f 94 c0             	sete   al
c001b2f1:	0f b6 c0             	movzx  eax,al
c001b2f4:	85 c0                	test   eax,eax
c001b2f6:	74 0c                	je     c001b304 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b2f8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b300:	eb 66                	jmp    c001b368 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b302:	66 90                	xchg   ax,ax
c001b304:	83 ec 08             	sub    esp,0x8
c001b307:	68 bc 24 02 c0       	push   0xc00224bc
c001b30c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b310:	e8 6b 54 fe ff       	call   c0000780 <strcmp>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	85 c0                	test   eax,eax
c001b31a:	0f 94 c0             	sete   al
c001b31d:	0f b6 c0             	movzx  eax,al
c001b320:	85 c0                	test   eax,eax
c001b322:	74 0c                	je     c001b330 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b324:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b32c:	eb 3a                	jmp    c001b368 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b32e:	66 90                	xchg   ax,ax
c001b330:	83 ec 08             	sub    esp,0x8
c001b333:	68 f6 53 02 c0       	push   0xc00253f6
c001b338:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b33c:	e8 3f 54 fe ff       	call   c0000780 <strcmp>
c001b341:	83 c4 10             	add    esp,0x10
c001b344:	85 c0                	test   eax,eax
c001b346:	0f 94 c0             	sete   al
c001b349:	0f b6 c0             	movzx  eax,al
c001b34c:	85 c0                	test   eax,eax
c001b34e:	74 0c                	je     c001b35c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b350:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b358:	eb 0e                	jmp    c001b368 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b35a:	66 90                	xchg   ax,ax
c001b35c:	b8 08 00 00 00       	mov    eax,0x8
c001b361:	e9 ea 00 00 00       	jmp    c001b450 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b366:	66 90                	xchg   ax,ax
c001b368:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b36f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b374:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b378:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b37f:	83 f8 ff             	cmp    eax,0xffffffff
c001b382:	75 34                	jne    c001b3b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b384:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b388:	88 c2                	mov    dl,al
c001b38a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b38f:	01 d0                	add    eax,edx
c001b391:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b395:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b39b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b39f:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b3a6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b3af:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b3b6:	eb 18                	jmp    c001b3d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b3b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b3bc:	88 c2                	mov    dl,al
c001b3be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3c2:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3c9:	01 d0                	add    eax,edx
c001b3cb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b3cf:	90                   	nop
c001b3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3d4:	88 04 24             	mov    BYTE PTR [esp],al
c001b3d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b3db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3e7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b3ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b3f4:	83 ec 0c             	sub    esp,0xc
c001b3f7:	68 00 20 00 00       	push   0x2000
c001b3fc:	e8 af 46 ff ff       	call   c000fab0 <malloc>
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b408:	68 00 20 00 00       	push   0x2000
c001b40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b411:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b415:	50                   	push   eax
c001b416:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b41a:	50                   	push   eax
c001b41b:	e8 05 a2 fe ff       	call   c0005625 <f_mkfs>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b427:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b42c:	75 0a                	jne    c001b438 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b42e:	b8 00 00 00 00       	mov    eax,0x0
c001b433:	eb 1b                	jmp    c001b450 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b435:	8d 76 00             	lea    esi,[esi+0x0]
c001b438:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b43d:	75 09                	jne    c001b448 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b43f:	b8 09 00 00 00       	mov    eax,0x9
c001b444:	eb 0a                	jmp    c001b450 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b446:	66 90                	xchg   ax,ax
c001b448:	b8 01 00 00 00       	mov    eax,0x1
c001b44d:	8d 76 00             	lea    esi,[esi+0x0]
c001b450:	83 c4 2c             	add    esp,0x2c
c001b453:	c3                   	ret    

c001b454 <FAT::tryMount(LogicalDisk*, int)>:
c001b454:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b45a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b45f:	83 f8 14             	cmp    eax,0x14
c001b462:	75 18                	jne    c001b47c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	68 fc 53 02 c0       	push   0xc00253fc
c001b46c:	e8 85 49 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	b0 00                	mov    al,0x0
c001b476:	e9 ed 01 00 00       	jmp    c001b668 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b47b:	90                   	nop
c001b47c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b483:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b489:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b48f:	3d 00 02 00 00       	cmp    eax,0x200
c001b494:	74 0a                	je     c001b4a0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b496:	b0 00                	mov    al,0x0
c001b498:	e9 cb 01 00 00       	jmp    c001b668 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b49d:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b4a8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b4af:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b4b6:	83 f8 ff             	cmp    eax,0xffffffff
c001b4b9:	74 09                	je     c001b4c4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b4bb:	b0 01                	mov    al,0x1
c001b4bd:	e9 a6 01 00 00       	jmp    c001b668 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b4c2:	66 90                	xchg   ax,ax
c001b4c4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b4ce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b4d6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b4dd:	88 c2                	mov    dl,al
c001b4df:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b4e4:	01 d0                	add    eax,edx
c001b4e6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b4ed:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b4f3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b4fa:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b501:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b506:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b50d:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	68 34 02 00 00       	push   0x234
c001b51c:	e8 8f 45 ff ff       	call   c000fab0 <malloc>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b52b:	83 ec 04             	sub    esp,0x4
c001b52e:	6a 00                	push   0x0
c001b530:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b537:	50                   	push   eax
c001b538:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b53f:	e8 db 88 fe ff       	call   c0003e1f <f_mount>
c001b544:	83 c4 10             	add    esp,0x10
c001b547:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b54e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b556:	74 1c                	je     c001b574 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b562:	e8 69 45 ff ff       	call   c000fad0 <rfree>
c001b567:	83 c4 10             	add    esp,0x10
c001b56a:	b0 00                	mov    al,0x0
c001b56c:	e9 f7 00 00 00       	jmp    c001b668 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b571:	8d 76 00             	lea    esi,[esi+0x0]
c001b574:	83 ec 04             	sub    esp,0x4
c001b577:	68 00 01 00 00       	push   0x100
c001b57c:	6a 00                	push   0x0
c001b57e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b585:	50                   	push   eax
c001b586:	e8 65 4f fe ff       	call   c00004f0 <memset>
c001b58b:	83 c4 10             	add    esp,0x10
c001b58e:	83 ec 08             	sub    esp,0x8
c001b591:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b598:	50                   	push   eax
c001b599:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b5a0:	50                   	push   eax
c001b5a1:	e8 ca 52 fe ff       	call   c0000870 <strcat>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	83 ec 08             	sub    esp,0x8
c001b5ac:	68 0a 54 02 c0       	push   0xc002540a
c001b5b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b5b8:	50                   	push   eax
c001b5b9:	e8 b2 52 fe ff       	call   c0000870 <strcat>
c001b5be:	83 c4 10             	add    esp,0x10
c001b5c1:	83 ec 04             	sub    esp,0x4
c001b5c4:	6a 01                	push   0x1
c001b5c6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b5cd:	50                   	push   eax
c001b5ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b5d2:	50                   	push   eax
c001b5d3:	e8 a9 88 fe ff       	call   c0003e81 <f_open>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b5e2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b5e9:	85 c0                	test   eax,eax
c001b5eb:	74 0b                	je     c001b5f8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b5ed:	78 31                	js     c001b620 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b5ef:	83 e8 04             	sub    eax,0x4
c001b5f2:	83 f8 01             	cmp    eax,0x1
c001b5f5:	77 29                	ja     c001b620 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b5f7:	90                   	nop
c001b5f8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b607:	50                   	push   eax
c001b608:	e8 24 90 fe ff       	call   c0004631 <f_close>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	90                   	nop
c001b611:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b619:	85 c0                	test   eax,eax
c001b61b:	74 43                	je     c001b660 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b61d:	eb 31                	jmp    c001b650 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b61f:	90                   	nop
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b62a:	e8 a1 44 ff ff       	call   c000fad0 <rfree>
c001b62f:	83 c4 10             	add    esp,0x10
c001b632:	83 ec 04             	sub    esp,0x4
c001b635:	6a 00                	push   0x0
c001b637:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b63e:	50                   	push   eax
c001b63f:	6a 00                	push   0x0
c001b641:	e8 d9 87 fe ff       	call   c0003e1f <f_mount>
c001b646:	83 c4 10             	add    esp,0x10
c001b649:	b0 00                	mov    al,0x0
c001b64b:	eb 1b                	jmp    c001b668 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b64d:	8d 76 00             	lea    esi,[esi+0x0]
c001b650:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b655:	83 c0 01             	add    eax,0x1
c001b658:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b65d:	8d 76 00             	lea    esi,[esi+0x0]
c001b660:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b667:	90                   	nop
c001b668:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b66e:	c3                   	ret    
c001b66f:	90                   	nop

c001b670 <FAT::allocateSwapfile(char const*, int)>:
c001b670:	55                   	push   ebp
c001b671:	57                   	push   edi
c001b672:	56                   	push   esi
c001b673:	53                   	push   ebx
c001b674:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b67a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b685:	83 ec 0c             	sub    esp,0xc
c001b688:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b68f:	e8 1c 44 ff ff       	call   c000fab0 <malloc>
c001b694:	83 c4 10             	add    esp,0x10
c001b697:	89 c7                	mov    edi,eax
c001b699:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b69e:	83 ec 04             	sub    esp,0x4
c001b6a1:	50                   	push   eax
c001b6a2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b6a9:	57                   	push   edi
c001b6aa:	e8 7d ca fe ff       	call   c000812c <File::File(char const*, Process*)>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b6b9:	83 ec 04             	sub    esp,0x4
c001b6bc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b6c0:	50                   	push   eax
c001b6c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6c5:	50                   	push   eax
c001b6c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b6cd:	e8 7a cd fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b6dc:	c1 e0 14             	shl    eax,0x14
c001b6df:	89 c7                	mov    edi,eax
c001b6e1:	89 c5                	mov    ebp,eax
c001b6e3:	c1 fd 1f             	sar    ebp,0x1f
c001b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6ee:	89 f9                	mov    ecx,edi
c001b6f0:	31 c1                	xor    ecx,eax
c001b6f2:	89 cb                	mov    ebx,ecx
c001b6f4:	89 e9                	mov    ecx,ebp
c001b6f6:	31 d1                	xor    ecx,edx
c001b6f8:	89 ce                	mov    esi,ecx
c001b6fa:	89 f0                	mov    eax,esi
c001b6fc:	09 d8                	or     eax,ebx
c001b6fe:	0f 84 9c 00 00 00    	je     c001b7a0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b70e:	e8 05 cc fe ff       	call   c0008318 <File::unlink()>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	83 ec 08             	sub    esp,0x8
c001b719:	6a 12                	push   0x12
c001b71b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b722:	e8 23 ca fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b731:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b737:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b73e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b745:	c1 e0 14             	shl    eax,0x14
c001b748:	83 ec 04             	sub    esp,0x4
c001b74b:	6a 01                	push   0x1
c001b74d:	50                   	push   eax
c001b74e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b755:	e8 5e 9d fe ff       	call   c00054b8 <f_expand>
c001b75a:	83 c4 10             	add    esp,0x10
c001b75d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b764:	8b 00                	mov    eax,DWORD PTR [eax]
c001b766:	83 c0 10             	add    eax,0x10
c001b769:	8b 00                	mov    eax,DWORD PTR [eax]
c001b76b:	83 ec 0c             	sub    esp,0xc
c001b76e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b772:	52                   	push   edx
c001b773:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b777:	52                   	push   edx
c001b778:	6a 00                	push   0x0
c001b77a:	68 00 04 00 00       	push   0x400
c001b77f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b786:	ff d0                	call   eax
c001b788:	83 c4 20             	add    esp,0x20
c001b78b:	83 ec 0c             	sub    esp,0xc
c001b78e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b795:	e8 0e ca fe ff       	call   c00081a8 <File::close()>
c001b79a:	83 c4 10             	add    esp,0x10
c001b79d:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a0:	83 ec 08             	sub    esp,0x8
c001b7a3:	6a 01                	push   0x1
c001b7a5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b7ac:	e8 99 c9 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b7b1:	83 c4 10             	add    esp,0x10
c001b7b4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b7bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7bd:	83 c0 0c             	add    eax,0xc
c001b7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7c2:	83 ec 0c             	sub    esp,0xc
c001b7c5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b7c9:	52                   	push   edx
c001b7ca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b7ce:	52                   	push   edx
c001b7cf:	6a 00                	push   0x0
c001b7d1:	6a 04                	push   0x4
c001b7d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b7da:	ff d0                	call   eax
c001b7dc:	83 c4 20             	add    esp,0x20
c001b7df:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b7e6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b7ec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b7f3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b7fa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b7fd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b80e:	e8 95 c9 fe ff       	call   c00081a8 <File::close()>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b81d:	ba 00 00 00 00       	mov    edx,0x0
c001b822:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b828:	5b                   	pop    ebx
c001b829:	5e                   	pop    esi
c001b82a:	5f                   	pop    edi
c001b82b:	5d                   	pop    ebp
c001b82c:	c3                   	ret    
c001b82d:	90                   	nop
c001b82e:	66 90                	xchg   ax,ax

c001b830 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b830:	57                   	push   edi
c001b831:	56                   	push   esi
c001b832:	53                   	push   ebx
c001b833:	81 ec 50 02 00 00    	sub    esp,0x250
c001b839:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b841:	74 0d                	je     c001b850 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b843:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b84b:	75 0f                	jne    c001b85c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b84d:	8d 76 00             	lea    esi,[esi+0x0]
c001b850:	b8 04 00 00 00       	mov    eax,0x4
c001b855:	e9 3a 01 00 00       	jmp    c001b994 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b85a:	66 90                	xchg   ax,ax
c001b85c:	83 ec 08             	sub    esp,0x8
c001b85f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b866:	50                   	push   eax
c001b867:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b86e:	e8 8a 90 fe ff       	call   c00048fd <f_readdir>
c001b873:	83 c4 10             	add    esp,0x10
c001b876:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b87d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b88e:	83 c0 16             	add    eax,0x16
c001b891:	50                   	push   eax
c001b892:	e8 e9 4c fe ff       	call   c0000580 <strlen>
c001b897:	83 c4 10             	add    esp,0x10
c001b89a:	ba 00 00 00 00       	mov    edx,0x0
c001b89f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b8a7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b8ae:	0f b6 c0             	movzx  eax,al
c001b8b1:	83 e0 10             	and    eax,0x10
c001b8b4:	74 0a                	je     c001b8c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b8b6:	b8 02 00 00 00       	mov    eax,0x2
c001b8bb:	eb 0b                	jmp    c001b8c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8c0:	b8 01 00 00 00       	mov    eax,0x1
c001b8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8cc:	83 ec 08             	sub    esp,0x8
c001b8cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b8d6:	83 c0 16             	add    eax,0x16
c001b8d9:	50                   	push   eax
c001b8da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8de:	83 c0 10             	add    eax,0x10
c001b8e1:	50                   	push   eax
c001b8e2:	e8 69 4d fe ff       	call   c0000650 <strcpy>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b8f1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b8f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8fc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b903:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b90a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b911:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b918:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b91f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b926:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b92d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b934:	89 c6                	mov    esi,eax
c001b936:	89 d7                	mov    edi,edx
c001b938:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b93a:	89 c8                	mov    eax,ecx
c001b93c:	89 fa                	mov    edx,edi
c001b93e:	89 f3                	mov    ebx,esi
c001b940:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b947:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b94e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b955:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b95c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b962:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b969:	0f be c0             	movsx  eax,al
c001b96c:	85 c0                	test   eax,eax
c001b96e:	75 08                	jne    c001b978 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001b970:	b8 07 00 00 00       	mov    eax,0x7
c001b975:	eb 1d                	jmp    c001b994 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b977:	90                   	nop
c001b978:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b97f:	85 c0                	test   eax,eax
c001b981:	75 09                	jne    c001b98c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001b983:	b8 00 00 00 00       	mov    eax,0x0
c001b988:	eb 0a                	jmp    c001b994 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b98a:	66 90                	xchg   ax,ax
c001b98c:	b8 01 00 00 00       	mov    eax,0x1
c001b991:	8d 76 00             	lea    esi,[esi+0x0]
c001b994:	81 c4 50 02 00 00    	add    esp,0x250
c001b99a:	5b                   	pop    ebx
c001b99b:	5e                   	pop    esi
c001b99c:	5f                   	pop    edi
c001b99d:	c3                   	ret    
c001b99e:	66 90                	xchg   ax,ax

c001b9a0 <FAT::read(void*, unsigned long, void*, int*)>:
c001b9a0:	83 ec 1c             	sub    esp,0x1c
c001b9a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b9a8:	74 0a                	je     c001b9b4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b9aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b9af:	75 0b                	jne    c001b9bc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b4:	b8 04 00 00 00       	mov    eax,0x4
c001b9b9:	eb 41                	jmp    c001b9fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b9bb:	90                   	nop
c001b9bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9c0:	50                   	push   eax
c001b9c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b9c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9cd:	e8 72 87 fe ff       	call   c0004144 <f_read>
c001b9d2:	83 c4 10             	add    esp,0x10
c001b9d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9dd:	89 c2                	mov    edx,eax
c001b9df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b9e3:	89 10                	mov    DWORD PTR [eax],edx
c001b9e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9e9:	85 c0                	test   eax,eax
c001b9eb:	75 07                	jne    c001b9f4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b9ed:	b8 00 00 00 00       	mov    eax,0x0
c001b9f2:	eb 08                	jmp    c001b9fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b9f4:	b8 01 00 00 00       	mov    eax,0x1
c001b9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9fc:	83 c4 1c             	add    esp,0x1c
c001b9ff:	c3                   	ret    

c001ba00 <FAT::write(void*, unsigned long, void*, int*)>:
c001ba00:	83 ec 1c             	sub    esp,0x1c
c001ba03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba08:	74 0a                	je     c001ba14 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ba0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ba0f:	75 0b                	jne    c001ba1c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ba11:	8d 76 00             	lea    esi,[esi+0x0]
c001ba14:	b8 04 00 00 00       	mov    eax,0x4
c001ba19:	eb 41                	jmp    c001ba5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ba1b:	90                   	nop
c001ba1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba20:	50                   	push   eax
c001ba21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ba29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba2d:	e8 f3 88 fe ff       	call   c0004325 <f_write>
c001ba32:	83 c4 10             	add    esp,0x10
c001ba35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba3d:	89 c2                	mov    edx,eax
c001ba3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba43:	89 10                	mov    DWORD PTR [eax],edx
c001ba45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba49:	85 c0                	test   eax,eax
c001ba4b:	75 07                	jne    c001ba54 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ba4d:	b8 00 00 00 00       	mov    eax,0x0
c001ba52:	eb 08                	jmp    c001ba5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ba54:	b8 01 00 00 00       	mov    eax,0x1
c001ba59:	8d 76 00             	lea    esi,[esi+0x0]
c001ba5c:	83 c4 1c             	add    esp,0x1c
c001ba5f:	c3                   	ret    

c001ba60 <FAT::close(void*)>:
c001ba60:	83 ec 1c             	sub    esp,0x1c
c001ba63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba68:	75 0a                	jne    c001ba74 <FAT::close(void*)+0x14>
c001ba6a:	b8 04 00 00 00       	mov    eax,0x4
c001ba6f:	eb 3f                	jmp    c001bab0 <FAT::close(void*)+0x50>
c001ba71:	8d 76 00             	lea    esi,[esi+0x0]
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba7b:	e8 b1 8b fe ff       	call   c0004631 <f_close>
c001ba80:	83 c4 10             	add    esp,0x10
c001ba83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba87:	83 ec 0c             	sub    esp,0xc
c001ba8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba8e:	e8 2d 40 ff ff       	call   c000fac0 <free>
c001ba93:	83 c4 10             	add    esp,0x10
c001ba96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba9a:	85 c0                	test   eax,eax
c001ba9c:	75 0a                	jne    c001baa8 <FAT::close(void*)+0x48>
c001ba9e:	b8 00 00 00 00       	mov    eax,0x0
c001baa3:	eb 0b                	jmp    c001bab0 <FAT::close(void*)+0x50>
c001baa5:	8d 76 00             	lea    esi,[esi+0x0]
c001baa8:	b8 01 00 00 00       	mov    eax,0x1
c001baad:	8d 76 00             	lea    esi,[esi+0x0]
c001bab0:	83 c4 1c             	add    esp,0x1c
c001bab3:	c3                   	ret    

c001bab4 <FAT::closeDir(void*)>:
c001bab4:	83 ec 1c             	sub    esp,0x1c
c001bab7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001babc:	75 0a                	jne    c001bac8 <FAT::closeDir(void*)+0x14>
c001babe:	b8 04 00 00 00       	mov    eax,0x4
c001bac3:	eb 3f                	jmp    c001bb04 <FAT::closeDir(void*)+0x50>
c001bac5:	8d 76 00             	lea    esi,[esi+0x0]
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bacf:	e8 07 8e fe ff       	call   c00048db <f_closedir>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001badb:	83 ec 0c             	sub    esp,0xc
c001bade:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bae2:	e8 d9 3f ff ff       	call   c000fac0 <free>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baee:	85 c0                	test   eax,eax
c001baf0:	75 0a                	jne    c001bafc <FAT::closeDir(void*)+0x48>
c001baf2:	b8 00 00 00 00       	mov    eax,0x0
c001baf7:	eb 0b                	jmp    c001bb04 <FAT::closeDir(void*)+0x50>
c001baf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bafc:	b8 01 00 00 00       	mov    eax,0x1
c001bb01:	8d 76 00             	lea    esi,[esi+0x0]
c001bb04:	83 c4 1c             	add    esp,0x1c
c001bb07:	c3                   	ret    

c001bb08 <FAT::truncate(void*, unsigned long long)>:
c001bb08:	83 ec 2c             	sub    esp,0x2c
c001bb0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bb20:	75 0a                	jne    c001bb2c <FAT::truncate(void*, unsigned long long)+0x24>
c001bb22:	b8 04 00 00 00       	mov    eax,0x4
c001bb27:	eb 47                	jmp    c001bb70 <FAT::truncate(void*, unsigned long long)+0x68>
c001bb29:	8d 76 00             	lea    esi,[esi+0x0]
c001bb2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb37:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bb3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb43:	83 ec 08             	sub    esp,0x8
c001bb46:	50                   	push   eax
c001bb47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bb4b:	e8 10 8b fe ff       	call   c0004660 <f_lseek>
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb5b:	85 c0                	test   eax,eax
c001bb5d:	75 09                	jne    c001bb68 <FAT::truncate(void*, unsigned long long)+0x60>
c001bb5f:	b8 00 00 00 00       	mov    eax,0x0
c001bb64:	eb 0a                	jmp    c001bb70 <FAT::truncate(void*, unsigned long long)+0x68>
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	b8 01 00 00 00       	mov    eax,0x1
c001bb6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb70:	83 c4 2c             	add    esp,0x2c
c001bb73:	c3                   	ret    

c001bb74 <FAT::seek(void*, unsigned long long)>:
c001bb74:	83 ec 2c             	sub    esp,0x2c
c001bb77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb87:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bb8c:	75 0a                	jne    c001bb98 <FAT::seek(void*, unsigned long long)+0x24>
c001bb8e:	b8 04 00 00 00       	mov    eax,0x4
c001bb93:	eb 33                	jmp    c001bbc8 <FAT::seek(void*, unsigned long long)+0x54>
c001bb95:	8d 76 00             	lea    esi,[esi+0x0]
c001bb98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	50                   	push   eax
c001bba0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bba4:	e8 b7 8a fe ff       	call   c0004660 <f_lseek>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bbb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbb4:	85 c0                	test   eax,eax
c001bbb6:	75 08                	jne    c001bbc0 <FAT::seek(void*, unsigned long long)+0x4c>
c001bbb8:	b8 00 00 00 00       	mov    eax,0x0
c001bbbd:	eb 09                	jmp    c001bbc8 <FAT::seek(void*, unsigned long long)+0x54>
c001bbbf:	90                   	nop
c001bbc0:	b8 01 00 00 00       	mov    eax,0x1
c001bbc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbc8:	83 c4 2c             	add    esp,0x2c
c001bbcb:	c3                   	ret    

c001bbcc <fatWrapperReadDisk>:
c001bbcc:	53                   	push   ebx
c001bbcd:	83 ec 18             	sub    esp,0x18
c001bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bbd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbdd:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bbe4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bbe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbec:	ba 00 00 00 00       	mov    edx,0x0
c001bbf1:	83 ec 0c             	sub    esp,0xc
c001bbf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bbf8:	53                   	push   ebx
c001bbf9:	52                   	push   edx
c001bbfa:	50                   	push   eax
c001bbfb:	51                   	push   ecx
c001bbfc:	e8 ef ed fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001bc01:	83 c4 20             	add    esp,0x20
c001bc04:	83 c4 18             	add    esp,0x18
c001bc07:	5b                   	pop    ebx
c001bc08:	c3                   	ret    
c001bc09:	8d 76 00             	lea    esi,[esi+0x0]

c001bc0c <fatWrapperWriteDisk>:
c001bc0c:	53                   	push   ebx
c001bc0d:	83 ec 18             	sub    esp,0x18
c001bc10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc1d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bc24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bc28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc2c:	ba 00 00 00 00       	mov    edx,0x0
c001bc31:	83 ec 0c             	sub    esp,0xc
c001bc34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc38:	53                   	push   ebx
c001bc39:	52                   	push   edx
c001bc3a:	50                   	push   eax
c001bc3b:	51                   	push   ecx
c001bc3c:	e8 1b ee fe ff       	call   c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>
c001bc41:	83 c4 20             	add    esp,0x20
c001bc44:	83 c4 18             	add    esp,0x18
c001bc47:	5b                   	pop    ebx
c001bc48:	c3                   	ret    
c001bc49:	8d 76 00             	lea    esi,[esi+0x0]

c001bc4c <fatWrapperIoctl>:
c001bc4c:	53                   	push   ebx
c001bc4d:	83 ec 28             	sub    esp,0x28
c001bc50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc54:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc5c:	88 d0                	mov    al,dl
c001bc5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bc62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bc67:	83 f8 02             	cmp    eax,0x2
c001bc6a:	75 34                	jne    c001bca0 <fatWrapperIoctl+0x54>
c001bc6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bc70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc79:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001bc80:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bc86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc8c:	89 c2                	mov    edx,eax
c001bc8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc92:	66 89 10             	mov    WORD PTR [eax],dx
c001bc95:	b8 00 00 00 00       	mov    eax,0x0
c001bc9a:	e9 c5 00 00 00       	jmp    c001bd64 <fatWrapperIoctl+0x118>
c001bc9f:	90                   	nop
c001bca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bca5:	83 f8 01             	cmp    eax,0x1
c001bca8:	75 6a                	jne    c001bd14 <fatWrapperIoctl+0xc8>
c001bcaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bcae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcb2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bcb7:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001bcbe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bcc4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bcca:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bcd0:	89 c8                	mov    eax,ecx
c001bcd2:	89 da                	mov    edx,ebx
c001bcd4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bcd8:	c1 e0 0a             	shl    eax,0xa
c001bcdb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bce0:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001bce7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bced:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bcf3:	89 cb                	mov    ebx,ecx
c001bcf5:	c1 fb 1f             	sar    ebx,0x1f
c001bcf8:	53                   	push   ebx
c001bcf9:	51                   	push   ecx
c001bcfa:	52                   	push   edx
c001bcfb:	50                   	push   eax
c001bcfc:	e8 c3 59 00 00       	call   c00216c4 <__udivdi3>
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	89 c2                	mov    edx,eax
c001bd06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd0a:	89 10                	mov    DWORD PTR [eax],edx
c001bd0c:	b8 00 00 00 00       	mov    eax,0x0
c001bd11:	eb 51                	jmp    c001bd64 <fatWrapperIoctl+0x118>
c001bd13:	90                   	nop
c001bd14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd19:	85 c0                	test   eax,eax
c001bd1b:	75 07                	jne    c001bd24 <fatWrapperIoctl+0xd8>
c001bd1d:	b8 00 00 00 00       	mov    eax,0x0
c001bd22:	eb 40                	jmp    c001bd64 <fatWrapperIoctl+0x118>
c001bd24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd29:	83 f8 03             	cmp    eax,0x3
c001bd2c:	75 1a                	jne    c001bd48 <fatWrapperIoctl+0xfc>
c001bd2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd3a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bd40:	b8 00 00 00 00       	mov    eax,0x0
c001bd45:	eb 1d                	jmp    c001bd64 <fatWrapperIoctl+0x118>
c001bd47:	90                   	nop
c001bd48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd4d:	83 f8 04             	cmp    eax,0x4
c001bd50:	75 0a                	jne    c001bd5c <fatWrapperIoctl+0x110>
c001bd52:	b8 00 00 00 00       	mov    eax,0x0
c001bd57:	eb 0b                	jmp    c001bd64 <fatWrapperIoctl+0x118>
c001bd59:	8d 76 00             	lea    esi,[esi+0x0]
c001bd5c:	b8 04 00 00 00       	mov    eax,0x4
c001bd61:	8d 76 00             	lea    esi,[esi+0x0]
c001bd64:	83 c4 28             	add    esp,0x28
c001bd67:	5b                   	pop    ebx
c001bd68:	c3                   	ret    
c001bd69:	90                   	nop
c001bd6a:	66 90                	xchg   ax,ax

c001bd6c <FAT::FAT()>:
c001bd6c:	83 ec 1c             	sub    esp,0x1c
c001bd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd73:	83 ec 0c             	sub    esp,0xc
c001bd76:	50                   	push   eax
c001bd77:	e8 da bf fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	ba 20 54 02 c0       	mov    edx,0xc0025420
c001bd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd88:	89 10                	mov    DWORD PTR [eax],edx
c001bd8a:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001bd94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd9c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bda1:	7f 19                	jg     c001bdbc <FAT::FAT()+0x50>
c001bda3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda7:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001bdb2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bdb7:	eb e3                	jmp    c001bd9c <FAT::FAT()+0x30>
c001bdb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdbc:	90                   	nop
c001bdbd:	83 c4 1c             	add    esp,0x1c
c001bdc0:	c3                   	ret    
c001bdc1:	90                   	nop
c001bdc2:	66 90                	xchg   ax,ax

c001bdc4 <FAT::fixFilepath(char*)>:
c001bdc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdc8:	8a 00                	mov    al,BYTE PTR [eax]
c001bdca:	0f be c0             	movsx  eax,al
c001bdcd:	83 f8 40             	cmp    eax,0x40
c001bdd0:	7e 2e                	jle    c001be00 <FAT::fixFilepath(char*)+0x3c>
c001bdd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdd6:	8a 00                	mov    al,BYTE PTR [eax]
c001bdd8:	83 e8 41             	sub    eax,0x41
c001bddb:	88 c2                	mov    dl,al
c001bddd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bde1:	88 10                	mov    BYTE PTR [eax],dl
c001bde3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bde7:	8a 00                	mov    al,BYTE PTR [eax]
c001bde9:	0f be c0             	movsx  eax,al
c001bdec:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001bdf3:	83 c0 30             	add    eax,0x30
c001bdf6:	88 c2                	mov    dl,al
c001bdf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdfc:	88 10                	mov    BYTE PTR [eax],dl
c001bdfe:	66 90                	xchg   ax,ax
c001be00:	90                   	nop
c001be01:	c3                   	ret    
c001be02:	66 90                	xchg   ax,ax

c001be04 <FAT::open(char const*, void**, FileOpenMode)>:
c001be04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001be12:	74 0c                	je     c001be20 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001be14:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001be1c:	75 0e                	jne    c001be2c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001be1e:	66 90                	xchg   ax,ax
c001be20:	b8 04 00 00 00       	mov    eax,0x4
c001be25:	e9 46 01 00 00       	jmp    c001bf70 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001be2a:	66 90                	xchg   ax,ax
c001be2c:	83 ec 08             	sub    esp,0x8
c001be2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be36:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be3a:	50                   	push   eax
c001be3b:	e8 10 48 fe ff       	call   c0000650 <strcpy>
c001be40:	83 c4 10             	add    esp,0x10
c001be43:	83 ec 08             	sub    esp,0x8
c001be46:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be4a:	50                   	push   eax
c001be4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be52:	e8 6d ff ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001be57:	83 c4 10             	add    esp,0x10
c001be5a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001be62:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001be69:	83 e0 01             	and    eax,0x1
c001be6c:	74 12                	je     c001be80 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001be6e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001be75:	83 c8 01             	or     eax,0x1
c001be78:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001be7f:	90                   	nop
c001be80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001be87:	83 e0 04             	and    eax,0x4
c001be8a:	74 24                	je     c001beb0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001be8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001be93:	83 c8 30             	or     eax,0x30
c001be96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001be9d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bea4:	83 c8 02             	or     eax,0x2
c001bea7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001beae:	66 90                	xchg   ax,ax
c001beb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001beb7:	83 e0 02             	and    eax,0x2
c001beba:	74 14                	je     c001bed0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bebc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bec3:	83 c8 02             	or     eax,0x2
c001bec6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001becd:	8d 76 00             	lea    esi,[esi+0x0]
c001bed0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bed7:	83 e0 08             	and    eax,0x8
c001beda:	74 14                	je     c001bef0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001bedc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bee3:	83 c8 04             	or     eax,0x4
c001bee6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001beed:	8d 76 00             	lea    esi,[esi+0x0]
c001bef0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bef7:	83 e0 10             	and    eax,0x10
c001befa:	74 14                	je     c001bf10 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001befc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bf03:	83 c8 08             	or     eax,0x8
c001bf06:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf10:	83 ec 0c             	sub    esp,0xc
c001bf13:	68 28 02 00 00       	push   0x228
c001bf18:	e8 93 3b ff ff       	call   c000fab0 <malloc>
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	89 c2                	mov    edx,eax
c001bf22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bf29:	89 10                	mov    DWORD PTR [eax],edx
c001bf2b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bf33:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bf3a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf3c:	83 ec 04             	sub    esp,0x4
c001bf3f:	52                   	push   edx
c001bf40:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bf44:	52                   	push   edx
c001bf45:	50                   	push   eax
c001bf46:	e8 36 7f fe ff       	call   c0003e81 <f_open>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bf55:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bf5d:	74 09                	je     c001bf68 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001bf5f:	b8 01 00 00 00       	mov    eax,0x1
c001bf64:	eb 0a                	jmp    c001bf70 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bf66:	66 90                	xchg   ax,ax
c001bf68:	b8 00 00 00 00       	mov    eax,0x0
c001bf6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf70:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf76:	c3                   	ret    
c001bf77:	90                   	nop

c001bf78 <FAT::openDir(char const*, void**)>:
c001bf78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf86:	74 0c                	je     c001bf94 <FAT::openDir(char const*, void**)+0x1c>
c001bf88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bf90:	75 0e                	jne    c001bfa0 <FAT::openDir(char const*, void**)+0x28>
c001bf92:	66 90                	xchg   ax,ax
c001bf94:	b8 04 00 00 00       	mov    eax,0x4
c001bf99:	e9 82 00 00 00       	jmp    c001c020 <FAT::openDir(char const*, void**)+0xa8>
c001bf9e:	66 90                	xchg   ax,ax
c001bfa0:	83 ec 08             	sub    esp,0x8
c001bfa3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfae:	50                   	push   eax
c001bfaf:	e8 9c 46 fe ff       	call   c0000650 <strcpy>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	83 ec 08             	sub    esp,0x8
c001bfba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfbe:	50                   	push   eax
c001bfbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfc6:	e8 f9 fd ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	83 ec 0c             	sub    esp,0xc
c001bfd1:	6a 30                	push   0x30
c001bfd3:	e8 d8 3a ff ff       	call   c000fab0 <malloc>
c001bfd8:	83 c4 10             	add    esp,0x10
c001bfdb:	89 c2                	mov    edx,eax
c001bfdd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bfe4:	89 10                	mov    DWORD PTR [eax],edx
c001bfe6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bfed:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfef:	83 ec 08             	sub    esp,0x8
c001bff2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bff6:	52                   	push   edx
c001bff7:	50                   	push   eax
c001bff8:	e8 13 88 fe ff       	call   c0004810 <f_opendir>
c001bffd:	83 c4 10             	add    esp,0x10
c001c000:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c007:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c00f:	74 07                	je     c001c018 <FAT::openDir(char const*, void**)+0xa0>
c001c011:	b8 01 00 00 00       	mov    eax,0x1
c001c016:	eb 08                	jmp    c001c020 <FAT::openDir(char const*, void**)+0xa8>
c001c018:	b8 00 00 00 00       	mov    eax,0x0
c001c01d:	8d 76 00             	lea    esi,[esi+0x0]
c001c020:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c026:	c3                   	ret    
c001c027:	90                   	nop

c001c028 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c028:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c02e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c036:	75 0c                	jne    c001c044 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c038:	b8 04 00 00 00       	mov    eax,0x4
c001c03d:	e9 d6 00 00 00       	jmp    c001c118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c042:	66 90                	xchg   ax,ax
c001c044:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c04c:	75 0a                	jne    c001c058 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c04e:	b8 04 00 00 00       	mov    eax,0x4
c001c053:	e9 c0 00 00 00       	jmp    c001c118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c058:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c060:	75 0a                	jne    c001c06c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c062:	b8 04 00 00 00       	mov    eax,0x4
c001c067:	e9 ac 00 00 00       	jmp    c001c118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c06c:	83 ec 08             	sub    esp,0x8
c001c06f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c076:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c07d:	50                   	push   eax
c001c07e:	e8 cd 45 fe ff       	call   c0000650 <strcpy>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	83 ec 08             	sub    esp,0x8
c001c089:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c090:	50                   	push   eax
c001c091:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c098:	e8 27 fd ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c09d:	83 c4 10             	add    esp,0x10
c001c0a0:	83 ec 08             	sub    esp,0x8
c001c0a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c0a7:	50                   	push   eax
c001c0a8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c0af:	50                   	push   eax
c001c0b0:	e8 da 88 fe ff       	call   c000498f <f_stat>
c001c0b5:	83 c4 10             	add    esp,0x10
c001c0b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c0bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c0c6:	85 c0                	test   eax,eax
c001c0c8:	74 0a                	je     c001c0d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c0ca:	83 f8 04             	cmp    eax,0x4
c001c0cd:	74 39                	je     c001c108 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c0cf:	eb 3f                	jmp    c001c110 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c0d8:	0f b6 c0             	movzx  eax,al
c001c0db:	83 e0 10             	and    eax,0x10
c001c0de:	0f 95 c2             	setne  dl
c001c0e1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c0e8:	88 10                	mov    BYTE PTR [eax],dl
c001c0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0ee:	ba 00 00 00 00       	mov    edx,0x0
c001c0f3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c0fa:	89 01                	mov    DWORD PTR [ecx],eax
c001c0fc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c0ff:	b8 00 00 00 00       	mov    eax,0x0
c001c104:	eb 12                	jmp    c001c118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c106:	66 90                	xchg   ax,ax
c001c108:	b8 02 00 00 00       	mov    eax,0x2
c001c10d:	eb 09                	jmp    c001c118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c10f:	90                   	nop
c001c110:	b8 01 00 00 00       	mov    eax,0x1
c001c115:	8d 76 00             	lea    esi,[esi+0x0]
c001c118:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c11e:	c3                   	ret    
c001c11f:	90                   	nop

c001c120 <FAT::unlink(char const*)>:
c001c120:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c126:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c12e:	75 08                	jne    c001c138 <FAT::unlink(char const*)+0x18>
c001c130:	b8 04 00 00 00       	mov    eax,0x4
c001c135:	eb 61                	jmp    c001c198 <FAT::unlink(char const*)+0x78>
c001c137:	90                   	nop
c001c138:	83 ec 08             	sub    esp,0x8
c001c13b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c142:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c146:	50                   	push   eax
c001c147:	e8 04 45 fe ff       	call   c0000650 <strcpy>
c001c14c:	83 c4 10             	add    esp,0x10
c001c14f:	83 ec 08             	sub    esp,0x8
c001c152:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c156:	50                   	push   eax
c001c157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c15e:	e8 61 fc ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	83 ec 0c             	sub    esp,0xc
c001c169:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c16d:	50                   	push   eax
c001c16e:	e8 8e 8a fe ff       	call   c0004c01 <f_unlink>
c001c173:	83 c4 10             	add    esp,0x10
c001c176:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c17d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c184:	85 c0                	test   eax,eax
c001c186:	75 08                	jne    c001c190 <FAT::unlink(char const*)+0x70>
c001c188:	b8 00 00 00 00       	mov    eax,0x0
c001c18d:	eb 09                	jmp    c001c198 <FAT::unlink(char const*)+0x78>
c001c18f:	90                   	nop
c001c190:	b8 01 00 00 00       	mov    eax,0x1
c001c195:	8d 76 00             	lea    esi,[esi+0x0]
c001c198:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c19e:	c3                   	ret    
c001c19f:	90                   	nop

c001c1a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c1a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c1a6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c1ad:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c1b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c1b8:	88 d0                	mov    al,dl
c001c1ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c1be:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c1c6:	75 0c                	jne    c001c1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c1c8:	b8 04 00 00 00       	mov    eax,0x4
c001c1cd:	e9 7e 01 00 00       	jmp    c001c350 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c1d2:	66 90                	xchg   ax,ax
c001c1d4:	83 ec 08             	sub    esp,0x8
c001c1d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c1de:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c1e2:	50                   	push   eax
c001c1e3:	e8 68 44 fe ff       	call   c0000650 <strcpy>
c001c1e8:	83 c4 10             	add    esp,0x10
c001c1eb:	83 ec 08             	sub    esp,0x8
c001c1ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c1f2:	50                   	push   eax
c001c1f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c1fa:	e8 c5 fb ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c1ff:	83 c4 10             	add    esp,0x10
c001c202:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c20a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c212:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c217:	83 e0 01             	and    eax,0x1
c001c21a:	74 14                	je     c001c230 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001c21c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c223:	83 c8 01             	or     eax,0x1
c001c226:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c22d:	8d 76 00             	lea    esi,[esi+0x0]
c001c230:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c235:	83 e0 02             	and    eax,0x2
c001c238:	74 12                	je     c001c24c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001c23a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c241:	83 c8 20             	or     eax,0x20
c001c244:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c24b:	90                   	nop
c001c24c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c251:	83 e0 04             	and    eax,0x4
c001c254:	74 12                	je     c001c268 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001c256:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c25d:	83 c8 04             	or     eax,0x4
c001c260:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c267:	90                   	nop
c001c268:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c26d:	83 e0 08             	and    eax,0x8
c001c270:	74 12                	je     c001c284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c272:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c279:	83 c8 02             	or     eax,0x2
c001c27c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c283:	90                   	nop
c001c284:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c289:	83 e0 01             	and    eax,0x1
c001c28c:	74 12                	je     c001c2a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001c28e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c295:	83 c8 01             	or     eax,0x1
c001c298:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c29f:	90                   	nop
c001c2a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2a5:	83 e0 02             	and    eax,0x2
c001c2a8:	74 12                	je     c001c2bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001c2aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c2b1:	83 c8 20             	or     eax,0x20
c001c2b4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c2bb:	90                   	nop
c001c2bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2c1:	83 e0 04             	and    eax,0x4
c001c2c4:	74 12                	je     c001c2d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001c2c6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c2cd:	83 c8 04             	or     eax,0x4
c001c2d0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c2d7:	90                   	nop
c001c2d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2dd:	83 e0 08             	and    eax,0x8
c001c2e0:	74 12                	je     c001c2f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001c2e2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c2e9:	83 c8 02             	or     eax,0x2
c001c2ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c2f3:	90                   	nop
c001c2f4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c2fb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c302:	09 d0                	or     eax,edx
c001c304:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c30b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c313:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c31b:	83 ec 04             	sub    esp,0x4
c001c31e:	52                   	push   edx
c001c31f:	50                   	push   eax
c001c320:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c324:	50                   	push   eax
c001c325:	e8 4a 8d fe ff       	call   c0005074 <f_chmod>
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c334:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c33b:	85 c0                	test   eax,eax
c001c33d:	75 09                	jne    c001c348 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001c33f:	b8 00 00 00 00       	mov    eax,0x0
c001c344:	eb 0a                	jmp    c001c350 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c346:	66 90                	xchg   ax,ax
c001c348:	b8 01 00 00 00       	mov    eax,0x1
c001c34d:	8d 76 00             	lea    esi,[esi+0x0]
c001c350:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c356:	c3                   	ret    
c001c357:	90                   	nop

c001c358 <FAT::rename(char const*, char const*)>:
c001c358:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c35e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c366:	74 0c                	je     c001c374 <FAT::rename(char const*, char const*)+0x1c>
c001c368:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c370:	75 0e                	jne    c001c380 <FAT::rename(char const*, char const*)+0x28>
c001c372:	66 90                	xchg   ax,ax
c001c374:	b8 04 00 00 00       	mov    eax,0x4
c001c379:	e9 9e 00 00 00       	jmp    c001c41c <FAT::rename(char const*, char const*)+0xc4>
c001c37e:	66 90                	xchg   ax,ax
c001c380:	83 ec 08             	sub    esp,0x8
c001c383:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c38a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c391:	50                   	push   eax
c001c392:	e8 b9 42 fe ff       	call   c0000650 <strcpy>
c001c397:	83 c4 10             	add    esp,0x10
c001c39a:	83 ec 08             	sub    esp,0x8
c001c39d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c3a4:	50                   	push   eax
c001c3a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c3ac:	e8 13 fa ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	83 ec 08             	sub    esp,0x8
c001c3b7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c3be:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3c2:	50                   	push   eax
c001c3c3:	e8 88 42 fe ff       	call   c0000650 <strcpy>
c001c3c8:	83 c4 10             	add    esp,0x10
c001c3cb:	83 ec 08             	sub    esp,0x8
c001c3ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3d2:	50                   	push   eax
c001c3d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c3da:	e8 e5 f9 ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	83 ec 08             	sub    esp,0x8
c001c3e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3e9:	50                   	push   eax
c001c3ea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c3f1:	50                   	push   eax
c001c3f2:	e8 c5 8a fe ff       	call   c0004ebc <f_rename>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c401:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c408:	85 c0                	test   eax,eax
c001c40a:	75 08                	jne    c001c414 <FAT::rename(char const*, char const*)+0xbc>
c001c40c:	b8 00 00 00 00       	mov    eax,0x0
c001c411:	eb 09                	jmp    c001c41c <FAT::rename(char const*, char const*)+0xc4>
c001c413:	90                   	nop
c001c414:	b8 01 00 00 00       	mov    eax,0x1
c001c419:	8d 76 00             	lea    esi,[esi+0x0]
c001c41c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c422:	c3                   	ret    
c001c423:	90                   	nop

c001c424 <FAT::mkdir(char const*)>:
c001c424:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c42a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c432:	75 08                	jne    c001c43c <FAT::mkdir(char const*)+0x18>
c001c434:	b8 04 00 00 00       	mov    eax,0x4
c001c439:	eb 61                	jmp    c001c49c <FAT::mkdir(char const*)+0x78>
c001c43b:	90                   	nop
c001c43c:	83 ec 08             	sub    esp,0x8
c001c43f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c446:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c44a:	50                   	push   eax
c001c44b:	e8 00 42 fe ff       	call   c0000650 <strcpy>
c001c450:	83 c4 10             	add    esp,0x10
c001c453:	83 ec 08             	sub    esp,0x8
c001c456:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c45a:	50                   	push   eax
c001c45b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c462:	e8 5d f9 ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c471:	50                   	push   eax
c001c472:	e8 aa 88 fe ff       	call   c0004d21 <f_mkdir>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c481:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c488:	85 c0                	test   eax,eax
c001c48a:	75 08                	jne    c001c494 <FAT::mkdir(char const*)+0x70>
c001c48c:	b8 00 00 00 00       	mov    eax,0x0
c001c491:	eb 09                	jmp    c001c49c <FAT::mkdir(char const*)+0x78>
c001c493:	90                   	nop
c001c494:	b8 01 00 00 00       	mov    eax,0x1
c001c499:	8d 76 00             	lea    esi,[esi+0x0]
c001c49c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c4a2:	c3                   	ret    
c001c4a3:	90                   	nop

c001c4a4 <FAT::exists(char const*)>:
c001c4a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c4aa:	83 ec 08             	sub    esp,0x8
c001c4ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c4b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c4b8:	50                   	push   eax
c001c4b9:	e8 92 41 fe ff       	call   c0000650 <strcpy>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	83 ec 08             	sub    esp,0x8
c001c4c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c4c8:	50                   	push   eax
c001c4c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c4d0:	e8 ef f8 ff ff       	call   c001bdc4 <FAT::fixFilepath(char*)>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	83 ec 08             	sub    esp,0x8
c001c4db:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c4e2:	50                   	push   eax
c001c4e3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c4e7:	50                   	push   eax
c001c4e8:	e8 a2 84 fe ff       	call   c000498f <f_stat>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c4f7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c4fe:	85 c0                	test   eax,eax
c001c500:	75 06                	jne    c001c508 <FAT::exists(char const*)+0x64>
c001c502:	b0 01                	mov    al,0x1
c001c504:	eb 06                	jmp    c001c50c <FAT::exists(char const*)+0x68>
c001c506:	66 90                	xchg   ax,ax
c001c508:	b0 00                	mov    al,0x0
c001c50a:	66 90                	xchg   ax,ax
c001c50c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c512:	c3                   	ret    
c001c513:	90                   	nop

c001c514 <isoReadDiscSectorHelper>:
c001c514:	83 ec 2c             	sub    esp,0x2c
c001c517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c51b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c51f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c524:	83 e8 41             	sub    eax,0x41
c001c527:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c52e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c532:	ba 00 00 00 00       	mov    edx,0x0
c001c537:	83 ec 0c             	sub    esp,0xc
c001c53a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c53e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c542:	52                   	push   edx
c001c543:	50                   	push   eax
c001c544:	51                   	push   ecx
c001c545:	e8 a6 e4 fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001c54a:	83 c4 20             	add    esp,0x20
c001c54d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c551:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c556:	74 0c                	je     c001c564 <isoReadDiscSectorHelper+0x50>
c001c558:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c55c:	c1 e0 0b             	shl    eax,0xb
c001c55f:	eb 0b                	jmp    c001c56c <isoReadDiscSectorHelper+0x58>
c001c561:	8d 76 00             	lea    esi,[esi+0x0]
c001c564:	b8 00 00 00 00       	mov    eax,0x0
c001c569:	8d 76 00             	lea    esi,[esi+0x0]
c001c56c:	83 c4 2c             	add    esp,0x2c
c001c56f:	c3                   	ret    

c001c570 <iso_kprintf>:
c001c570:	83 ec 0c             	sub    esp,0xc
c001c573:	83 ec 08             	sub    esp,0x8
c001c576:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c57a:	68 c5 50 02 c0       	push   0xc00250c5
c001c57f:	e8 ca a9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	90                   	nop
c001c588:	83 c4 0c             	add    esp,0xc
c001c58b:	c3                   	ret    

c001c58c <iso_kprintfd>:
c001c58c:	83 ec 0c             	sub    esp,0xc
c001c58f:	83 ec 08             	sub    esp,0x8
c001c592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c596:	68 b2 3d 02 c0       	push   0xc0023db2
c001c59b:	e8 ae a9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	90                   	nop
c001c5a4:	83 c4 0c             	add    esp,0xc
c001c5a7:	c3                   	ret    

c001c5a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c5a8:	b8 08 00 00 00       	mov    eax,0x8
c001c5ad:	c3                   	ret    

c001c5ae <ISO9660::truncate(void*, unsigned long long)>:
c001c5ae:	b8 01 00 00 00       	mov    eax,0x1
c001c5b3:	c3                   	ret    

c001c5b4 <ISO9660::getName()>:
c001c5b4:	b8 84 54 02 c0       	mov    eax,0xc0025484
c001c5b9:	c3                   	ret    

c001c5ba <ISO9660::closeDir(void*)>:
c001c5ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5be:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5c0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c5c3:	90                   	nop

c001c5c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c5c4:	b8 01 00 00 00       	mov    eax,0x1
c001c5c9:	c3                   	ret    

c001c5ca <ISO9660::unlink(char const*)>:
c001c5ca:	b8 01 00 00 00       	mov    eax,0x1
c001c5cf:	c3                   	ret    

c001c5d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c5d0:	b8 03 00 00 00       	mov    eax,0x3
c001c5d5:	c3                   	ret    

c001c5d6 <ISO9660::rename(char const*, char const*)>:
c001c5d6:	b8 01 00 00 00       	mov    eax,0x1
c001c5db:	c3                   	ret    

c001c5dc <ISO9660::mkdir(char const*)>:
c001c5dc:	b8 01 00 00 00       	mov    eax,0x1
c001c5e1:	c3                   	ret    

c001c5e2 <ISO9660::~ISO9660()>:
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	ba c4 55 02 c0       	mov    edx,0xc00255c4
c001c5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ee:	89 10                	mov    DWORD PTR [eax],edx
c001c5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	50                   	push   eax
c001c5f8:	e8 7d b7 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	90                   	nop
c001c601:	83 c4 0c             	add    esp,0xc
c001c604:	c3                   	ret    
c001c605:	90                   	nop

c001c606 <ISO9660::~ISO9660()>:
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	83 ec 0c             	sub    esp,0xc
c001c60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c610:	e8 cd ff ff ff       	call   c001c5e2 <ISO9660::~ISO9660()>
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	83 ec 08             	sub    esp,0x8
c001c61b:	6a 08                	push   0x8
c001c61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c621:	e8 01 0c ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	83 c4 0c             	add    esp,0xc
c001c62c:	c3                   	ret    
c001c62d:	90                   	nop

c001c62e <ISO9660::exists(char const*)>:
c001c62e:	83 ec 18             	sub    esp,0x18
c001c631:	68 9f 54 02 c0       	push   0xc002549f
c001c636:	e8 bb 37 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001c63b:	31 c0                	xor    eax,eax
c001c63d:	83 c4 1c             	add    esp,0x1c
c001c640:	c3                   	ret    
c001c641:	90                   	nop

c001c642 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c642:	56                   	push   esi
c001c643:	53                   	push   ebx
c001c644:	53                   	push   ebx
c001c645:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c649:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c64d:	85 db                	test   ebx,ebx
c001c64f:	0f 84 ca 00 00 00    	je     c001c71f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c655:	85 f6                	test   esi,esi
c001c657:	0f 84 c2 00 00 00    	je     c001c71f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c65d:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c662:	b8 03 00 00 00       	mov    eax,0x3
c001c667:	0f 85 b7 00 00 00    	jne    c001c724 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c66d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c66f:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c675:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c67c:	74 1b                	je     c001c699 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c67e:	85 c0                	test   eax,eax
c001c680:	74 10                	je     c001c692 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	68 bd 54 02 c0       	push   0xc00254bd
c001c68a:	e8 67 37 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001c68f:	83 c4 10             	add    esp,0x10
c001c692:	8a 03                	mov    al,BYTE PTR [ebx]
c001c694:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c699:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c69c:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c6a3:	85 c0                	test   eax,eax
c001c6a5:	74 09                	je     c001c6b0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c6a7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c6ae:	74 48                	je     c001c6f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c6b0:	83 ec 0c             	sub    esp,0xc
c001c6b3:	68 cd 54 02 c0       	push   0xc00254cd
c001c6b8:	e8 91 a8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c6bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c6c0:	83 c4 10             	add    esp,0x10
c001c6c3:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c6ca:	85 c0                	test   eax,eax
c001c6cc:	74 17                	je     c001c6e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c6ce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c6d5:	83 ec 0c             	sub    esp,0xc
c001c6d8:	68 ed 54 02 c0       	push   0xc00254ed
c001c6dd:	e8 6c a8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c6e2:	83 c4 10             	add    esp,0x10
c001c6e5:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	50                   	push   eax
c001c6f0:	e8 52 a5 fe ff       	call   c0006c47 <init_percd>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	51                   	push   ecx
c001c6f9:	83 c3 03             	add    ebx,0x3
c001c6fc:	51                   	push   ecx
c001c6fd:	6a 00                	push   0x0
c001c6ff:	53                   	push   ebx
c001c700:	e8 05 a0 fe ff       	call   c000670a <iso_open>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	89 c2                	mov    edx,eax
c001c70a:	b8 01 00 00 00       	mov    eax,0x1
c001c70f:	83 fa ff             	cmp    edx,0xffffffff
c001c712:	74 10                	je     c001c724 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c714:	83 c2 32             	add    edx,0x32
c001c717:	31 c0                	xor    eax,eax
c001c719:	01 d2                	add    edx,edx
c001c71b:	89 16                	mov    DWORD PTR [esi],edx
c001c71d:	eb 05                	jmp    c001c724 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c71f:	b8 04 00 00 00       	mov    eax,0x4
c001c724:	5a                   	pop    edx
c001c725:	5b                   	pop    ebx
c001c726:	5e                   	pop    esi
c001c727:	c3                   	ret    

c001c728 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c728:	53                   	push   ebx
c001c729:	83 ec 08             	sub    esp,0x8
c001c72c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c730:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c734:	85 c0                	test   eax,eax
c001c736:	74 2d                	je     c001c765 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c738:	85 db                	test   ebx,ebx
c001c73a:	74 29                	je     c001c765 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c73c:	52                   	push   edx
c001c73d:	b9 02 00 00 00       	mov    ecx,0x2
c001c742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c746:	99                   	cdq    
c001c747:	f7 f9                	idiv   ecx
c001c749:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c74d:	83 e8 32             	sub    eax,0x32
c001c750:	50                   	push   eax
c001c751:	e8 5c a0 fe ff       	call   c00067b2 <iso_read>
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	89 03                	mov    DWORD PTR [ebx],eax
c001c75b:	09 d0                	or     eax,edx
c001c75d:	0f 94 c0             	sete   al
c001c760:	0f b6 c0             	movzx  eax,al
c001c763:	eb 05                	jmp    c001c76a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c765:	b8 04 00 00 00       	mov    eax,0x4
c001c76a:	83 c4 08             	add    esp,0x8
c001c76d:	5b                   	pop    ebx
c001c76e:	c3                   	ret    
c001c76f:	90                   	nop

c001c770 <ISO9660::seek(void*, unsigned long long)>:
c001c770:	57                   	push   edi
c001c771:	b8 04 00 00 00       	mov    eax,0x4
c001c776:	56                   	push   esi
c001c777:	51                   	push   ecx
c001c778:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c77c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c780:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c784:	85 d2                	test   edx,edx
c001c786:	74 26                	je     c001c7ae <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c788:	89 d0                	mov    eax,edx
c001c78a:	b9 02 00 00 00       	mov    ecx,0x2
c001c78f:	6a 00                	push   0x0
c001c791:	99                   	cdq    
c001c792:	f7 f9                	idiv   ecx
c001c794:	57                   	push   edi
c001c795:	56                   	push   esi
c001c796:	83 e8 32             	sub    eax,0x32
c001c799:	50                   	push   eax
c001c79a:	e8 29 a1 fe ff       	call   c00068c8 <iso_seek>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	31 f0                	xor    eax,esi
c001c7a4:	31 fa                	xor    edx,edi
c001c7a6:	09 d0                	or     eax,edx
c001c7a8:	0f 95 c0             	setne  al
c001c7ab:	0f b6 c0             	movzx  eax,al
c001c7ae:	5a                   	pop    edx
c001c7af:	5e                   	pop    esi
c001c7b0:	5f                   	pop    edi
c001c7b1:	c3                   	ret    

c001c7b2 <ISO9660::tell(void*, unsigned long long*)>:
c001c7b2:	53                   	push   ebx
c001c7b3:	83 ec 08             	sub    esp,0x8
c001c7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c7be:	85 c0                	test   eax,eax
c001c7c0:	74 24                	je     c001c7e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c7c2:	85 db                	test   ebx,ebx
c001c7c4:	74 20                	je     c001c7e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c7c6:	b9 02 00 00 00       	mov    ecx,0x2
c001c7cb:	99                   	cdq    
c001c7cc:	f7 f9                	idiv   ecx
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	83 e8 32             	sub    eax,0x32
c001c7d4:	50                   	push   eax
c001c7d5:	e8 72 a1 fe ff       	call   c000694c <iso_tell>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	89 03                	mov    DWORD PTR [ebx],eax
c001c7df:	31 c0                	xor    eax,eax
c001c7e1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c7e4:	eb 05                	jmp    c001c7eb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c7e6:	b8 04 00 00 00       	mov    eax,0x4
c001c7eb:	83 c4 08             	add    esp,0x8
c001c7ee:	5b                   	pop    ebx
c001c7ef:	c3                   	ret    

c001c7f0 <ISO9660::stat(void*, unsigned long long*)>:
c001c7f0:	56                   	push   esi
c001c7f1:	53                   	push   ebx
c001c7f2:	83 ec 10             	sub    esp,0x10
c001c7f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7f9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c7fd:	68 11 55 02 c0       	push   0xc0025511
c001c802:	e8 47 a7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	85 db                	test   ebx,ebx
c001c80c:	74 2a                	je     c001c838 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c80e:	85 f6                	test   esi,esi
c001c810:	74 26                	je     c001c838 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c812:	89 d8                	mov    eax,ebx
c001c814:	b9 02 00 00 00       	mov    ecx,0x2
c001c819:	99                   	cdq    
c001c81a:	83 ec 0c             	sub    esp,0xc
c001c81d:	f7 f9                	idiv   ecx
c001c81f:	83 e8 32             	sub    eax,0x32
c001c822:	50                   	push   eax
c001c823:	e8 55 a1 fe ff       	call   c000697d <iso_total>
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001c832:	89 06                	mov    DWORD PTR [esi],eax
c001c834:	31 c0                	xor    eax,eax
c001c836:	eb 05                	jmp    c001c83d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001c838:	b8 04 00 00 00       	mov    eax,0x4
c001c83d:	5a                   	pop    edx
c001c83e:	5b                   	pop    ebx
c001c83f:	5e                   	pop    esi
c001c840:	c3                   	ret    
c001c841:	90                   	nop

c001c842 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c842:	55                   	push   ebp
c001c843:	57                   	push   edi
c001c844:	56                   	push   esi
c001c845:	53                   	push   ebx
c001c846:	83 ec 18             	sub    esp,0x18
c001c849:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c84d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c851:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c855:	68 19 55 02 c0       	push   0xc0025519
c001c85a:	e8 ef a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	85 ff                	test   edi,edi
c001c864:	0f 94 c0             	sete   al
c001c867:	85 f6                	test   esi,esi
c001c869:	0f 94 c2             	sete   dl
c001c86c:	09 d0                	or     eax,edx
c001c86e:	a8 01                	test   al,0x1
c001c870:	0f 85 dd 00 00 00    	jne    c001c953 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c876:	85 db                	test   ebx,ebx
c001c878:	0f 84 d5 00 00 00    	je     c001c953 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c87e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c881:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001c887:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c88e:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c895:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c897:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c89d:	74 1b                	je     c001c8ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001c89f:	85 c0                	test   eax,eax
c001c8a1:	74 10                	je     c001c8b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001c8a3:	83 ec 0c             	sub    esp,0xc
c001c8a6:	68 bd 54 02 c0       	push   0xc00254bd
c001c8ab:	e8 46 35 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001c8b0:	83 c4 10             	add    esp,0x10
c001c8b3:	8a 03                	mov    al,BYTE PTR [ebx]
c001c8b5:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c8ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c8bd:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c8c4:	85 c0                	test   eax,eax
c001c8c6:	74 09                	je     c001c8d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001c8c8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c8cf:	74 51                	je     c001c922 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c8d1:	83 ec 0c             	sub    esp,0xc
c001c8d4:	68 21 55 02 c0       	push   0xc0025521
c001c8d9:	e8 70 a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c8de:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c8e1:	83 c4 10             	add    esp,0x10
c001c8e4:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001c8ec:	74 21                	je     c001c90f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001c8ee:	83 ec 0c             	sub    esp,0xc
c001c8f1:	68 41 55 02 c0       	push   0xc0025541
c001c8f6:	e8 53 a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c8fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c8fe:	83 c4 10             	add    esp,0x10
c001c901:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c908:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c90f:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c916:	83 ec 0c             	sub    esp,0xc
c001c919:	50                   	push   eax
c001c91a:	e8 28 a3 fe ff       	call   c0006c47 <init_percd>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	52                   	push   edx
c001c923:	83 c3 03             	add    ebx,0x3
c001c926:	52                   	push   edx
c001c927:	6a 00                	push   0x0
c001c929:	53                   	push   ebx
c001c92a:	e8 db 9d fe ff       	call   c000670a <iso_open>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	83 f8 ff             	cmp    eax,0xffffffff
c001c935:	89 c5                	mov    ebp,eax
c001c937:	75 21                	jne    c001c95a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001c939:	50                   	push   eax
c001c93a:	50                   	push   eax
c001c93b:	6a 01                	push   0x1
c001c93d:	53                   	push   ebx
c001c93e:	e8 c7 9d fe ff       	call   c000670a <iso_open>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	ba 02 00 00 00       	mov    edx,0x2
c001c94b:	40                   	inc    eax
c001c94c:	74 2b                	je     c001c979 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c94e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001c951:	eb 24                	jmp    c001c977 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001c953:	ba 04 00 00 00       	mov    edx,0x4
c001c958:	eb 1f                	jmp    c001c979 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c95a:	83 ec 0c             	sub    esp,0xc
c001c95d:	50                   	push   eax
c001c95e:	e8 1a a0 fe ff       	call   c000697d <iso_total>
c001c963:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c96a:	89 07                	mov    DWORD PTR [edi],eax
c001c96c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c96f:	e8 20 9e fe ff       	call   c0006794 <iso_close>
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	31 d2                	xor    edx,edx
c001c979:	83 c4 0c             	add    esp,0xc
c001c97c:	89 d0                	mov    eax,edx
c001c97e:	5b                   	pop    ebx
c001c97f:	5e                   	pop    esi
c001c980:	5f                   	pop    edi
c001c981:	5d                   	pop    ebp
c001c982:	c3                   	ret    
c001c983:	90                   	nop

c001c984 <ISO9660::close(void*)>:
c001c984:	83 ec 0c             	sub    esp,0xc
c001c987:	b8 04 00 00 00       	mov    eax,0x4
c001c98c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c990:	85 d2                	test   edx,edx
c001c992:	74 1b                	je     c001c9af <ISO9660::close(void*)+0x2b>
c001c994:	89 d0                	mov    eax,edx
c001c996:	b9 02 00 00 00       	mov    ecx,0x2
c001c99b:	99                   	cdq    
c001c99c:	83 ec 0c             	sub    esp,0xc
c001c99f:	f7 f9                	idiv   ecx
c001c9a1:	83 e8 32             	sub    eax,0x32
c001c9a4:	50                   	push   eax
c001c9a5:	e8 ea 9d fe ff       	call   c0006794 <iso_close>
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	31 c0                	xor    eax,eax
c001c9af:	83 c4 0c             	add    esp,0xc
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <ISO9660::openDir(char const*, void**)>:
c001c9b4:	56                   	push   esi
c001c9b5:	53                   	push   ebx
c001c9b6:	50                   	push   eax
c001c9b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c9bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c9bf:	85 db                	test   ebx,ebx
c001c9c1:	0f 84 bd 00 00 00    	je     c001ca84 <ISO9660::openDir(char const*, void**)+0xd0>
c001c9c7:	85 f6                	test   esi,esi
c001c9c9:	0f 84 b5 00 00 00    	je     c001ca84 <ISO9660::openDir(char const*, void**)+0xd0>
c001c9cf:	8a 13                	mov    dl,BYTE PTR [ebx]
c001c9d1:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001c9d7:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c9de:	74 1b                	je     c001c9fb <ISO9660::openDir(char const*, void**)+0x47>
c001c9e0:	85 c0                	test   eax,eax
c001c9e2:	74 10                	je     c001c9f4 <ISO9660::openDir(char const*, void**)+0x40>
c001c9e4:	83 ec 0c             	sub    esp,0xc
c001c9e7:	68 bd 54 02 c0       	push   0xc00254bd
c001c9ec:	e8 05 34 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001c9f1:	83 c4 10             	add    esp,0x10
c001c9f4:	8a 03                	mov    al,BYTE PTR [ebx]
c001c9f6:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c9fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c9fe:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ca05:	85 c0                	test   eax,eax
c001ca07:	74 10                	je     c001ca19 <ISO9660::openDir(char const*, void**)+0x65>
c001ca09:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ca10:	74 1a                	je     c001ca2c <ISO9660::openDir(char const*, void**)+0x78>
c001ca12:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ca19:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001ca20:	83 ec 0c             	sub    esp,0xc
c001ca23:	50                   	push   eax
c001ca24:	e8 1e a2 fe ff       	call   c0006c47 <init_percd>
c001ca29:	83 c4 10             	add    esp,0x10
c001ca2c:	50                   	push   eax
c001ca2d:	83 c3 03             	add    ebx,0x3
c001ca30:	50                   	push   eax
c001ca31:	6a 01                	push   0x1
c001ca33:	53                   	push   ebx
c001ca34:	e8 d1 9c fe ff       	call   c000670a <iso_open>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	83 f8 ff             	cmp    eax,0xffffffff
c001ca3f:	89 c3                	mov    ebx,eax
c001ca41:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001ca46:	75 1c                	jne    c001ca64 <ISO9660::openDir(char const*, void**)+0xb0>
c001ca48:	53                   	push   ebx
c001ca49:	53                   	push   ebx
c001ca4a:	68 65 55 02 c0       	push   0xc0025565
c001ca4f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001ca55:	e8 e0 5b ff ff       	call   c001263a <VgaText::puts(char const*)>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	b8 01 00 00 00       	mov    eax,0x1
c001ca62:	eb 25                	jmp    c001ca89 <ISO9660::openDir(char const*, void**)+0xd5>
c001ca64:	51                   	push   ecx
c001ca65:	01 db                	add    ebx,ebx
c001ca67:	51                   	push   ecx
c001ca68:	83 c3 65             	add    ebx,0x65
c001ca6b:	68 78 55 02 c0       	push   0xc0025578
c001ca70:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001ca76:	e8 bf 5b ff ff       	call   c001263a <VgaText::puts(char const*)>
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	31 c0                	xor    eax,eax
c001ca80:	89 1e                	mov    DWORD PTR [esi],ebx
c001ca82:	eb 05                	jmp    c001ca89 <ISO9660::openDir(char const*, void**)+0xd5>
c001ca84:	b8 04 00 00 00       	mov    eax,0x4
c001ca89:	5a                   	pop    edx
c001ca8a:	5b                   	pop    ebx
c001ca8b:	5e                   	pop    esi
c001ca8c:	c3                   	ret    
c001ca8d:	90                   	nop

c001ca8e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ca8e:	55                   	push   ebp
c001ca8f:	57                   	push   edi
c001ca90:	56                   	push   esi
c001ca91:	53                   	push   ebx
c001ca92:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca98:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001ca9f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001caa6:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001caad:	85 db                	test   ebx,ebx
c001caaf:	0f 84 e4 00 00 00    	je     c001cb99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cab5:	85 ed                	test   ebp,ebp
c001cab7:	0f 84 dc 00 00 00    	je     c001cb99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cabd:	83 ec 0c             	sub    esp,0xc
c001cac0:	68 8b 55 02 c0       	push   0xc002558b
c001cac5:	e8 84 a4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001caca:	89 d8                	mov    eax,ebx
c001cacc:	b9 02 00 00 00       	mov    ecx,0x2
c001cad1:	99                   	cdq    
c001cad2:	f7 f9                	idiv   ecx
c001cad4:	83 e8 32             	sub    eax,0x32
c001cad7:	89 04 24             	mov    DWORD PTR [esp],eax
c001cada:	e8 f0 9e fe ff       	call   c00069cf <iso_readdir>
c001cadf:	83 c4 10             	add    esp,0x10
c001cae2:	85 c0                	test   eax,eax
c001cae4:	89 c3                	mov    ebx,eax
c001cae6:	75 38                	jne    c001cb20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001cae8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001caed:	53                   	push   ebx
c001caee:	53                   	push   ebx
c001caef:	68 96 55 02 c0       	push   0xc0025596
c001caf4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cafa:	e8 3b 5b ff ff       	call   c001263a <VgaText::puts(char const*)>
c001caff:	83 c4 0c             	add    esp,0xc
c001cb02:	68 10 01 00 00       	push   0x110
c001cb07:	6a 00                	push   0x0
c001cb09:	57                   	push   edi
c001cb0a:	e8 e1 39 fe ff       	call   c00004f0 <memset>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	b8 01 00 00 00       	mov    eax,0x1
c001cb17:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001cb1e:	eb 7e                	jmp    c001cb9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cb20:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001cb26:	8d 70 08             	lea    esi,[eax+0x8]
c001cb29:	83 ec 0c             	sub    esp,0xc
c001cb2c:	56                   	push   esi
c001cb2d:	e8 4e 3a fe ff       	call   c0000580 <strlen>
c001cb32:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb3e:	83 c4 10             	add    esp,0x10
c001cb41:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001cb45:	75 0a                	jne    c001cb51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001cb47:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001cb4a:	b8 02 00 00 00       	mov    eax,0x2
c001cb4f:	74 05                	je     c001cb56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001cb51:	b8 01 00 00 00       	mov    eax,0x1
c001cb56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb5a:	50                   	push   eax
c001cb5b:	50                   	push   eax
c001cb5c:	56                   	push   esi
c001cb5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb61:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cb65:	50                   	push   eax
c001cb66:	e8 e5 3a fe ff       	call   c0000650 <strcpy>
c001cb6b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cb72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb74:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001cb7b:	5a                   	pop    edx
c001cb7c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cb81:	59                   	pop    ecx
c001cb82:	68 a9 55 02 c0       	push   0xc00255a9
c001cb87:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cb8d:	e8 a8 5a ff ff       	call   c001263a <VgaText::puts(char const*)>
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	31 c0                	xor    eax,eax
c001cb97:	eb 05                	jmp    c001cb9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cb99:	b8 04 00 00 00       	mov    eax,0x4
c001cb9e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cba4:	5b                   	pop    ebx
c001cba5:	5e                   	pop    esi
c001cba6:	5f                   	pop    edi
c001cba7:	5d                   	pop    ebp
c001cba8:	c3                   	ret    

c001cba9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cba9:	57                   	push   edi
c001cbaa:	56                   	push   esi
c001cbab:	53                   	push   ebx
c001cbac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cbb4:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001cbba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cbbe:	0f be cb             	movsx  ecx,bl
c001cbc1:	75 0b                	jne    c001cbce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001cbc3:	0f be 05 64 68 02 c0 	movsx  eax,BYTE PTR ds:0xc0026864
c001cbca:	39 c8                	cmp    eax,ecx
c001cbcc:	74 47                	je     c001cc15 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	31 d2                	xor    edx,edx
c001cbd3:	68 40 ec 02 c0       	push   0xc002ec40
c001cbd8:	6a 01                	push   0x1
c001cbda:	52                   	push   edx
c001cbdb:	56                   	push   esi
c001cbdc:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001cbe3:	e8 08 de fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001cbe8:	83 c4 20             	add    esp,0x20
c001cbeb:	85 c0                	test   eax,eax
c001cbed:	75 0e                	jne    c001cbfd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001cbef:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001cbf5:	88 1d 64 68 02 c0    	mov    BYTE PTR ds:0xc0026864,bl
c001cbfb:	eb 18                	jmp    c001cc15 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cbfd:	50                   	push   eax
c001cbfe:	68 00 08 00 00       	push   0x800
c001cc03:	6a 00                	push   0x0
c001cc05:	57                   	push   edi
c001cc06:	e8 e5 38 fe ff       	call   c00004f0 <memset>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	b8 01 00 00 00       	mov    eax,0x1
c001cc13:	eb 0e                	jmp    c001cc23 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001cc15:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001cc1a:	b9 00 08 00 00       	mov    ecx,0x800
c001cc1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc21:	31 c0                	xor    eax,eax
c001cc23:	5b                   	pop    ebx
c001cc24:	5e                   	pop    esi
c001cc25:	5f                   	pop    edi
c001cc26:	c3                   	ret    
c001cc27:	90                   	nop

c001cc28 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cc28:	53                   	push   ebx
c001cc29:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001cc2f:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001cc39:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001cc40:	8d 58 41             	lea    ebx,[eax+0x41]
c001cc43:	0f be db             	movsx  ebx,bl
c001cc46:	53                   	push   ebx
c001cc47:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cc4b:	50                   	push   eax
c001cc4c:	6a 10                	push   0x10
c001cc4e:	e8 56 ff ff ff       	call   c001cba9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	31 d2                	xor    edx,edx
c001cc58:	85 c0                	test   eax,eax
c001cc5a:	75 33                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc5c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cc61:	75 2c                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc63:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cc68:	75 25                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc6a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cc6f:	75 1e                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc71:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cc76:	75 17                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc78:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cc7d:	75 10                	jne    c001cc8f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cc7f:	83 ec 0c             	sub    esp,0xc
c001cc82:	53                   	push   ebx
c001cc83:	e8 bf 9f fe ff       	call   c0006c47 <init_percd>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	40                   	inc    eax
c001cc8c:	0f 95 c2             	setne  dl
c001cc8f:	81 c4 08 08 00 00    	add    esp,0x808
c001cc95:	88 d0                	mov    al,dl
c001cc97:	5b                   	pop    ebx
c001cc98:	c3                   	ret    
c001cc99:	90                   	nop

c001cc9a <ISO9660::ISO9660()>:
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca1:	83 ec 0c             	sub    esp,0xc
c001cca4:	50                   	push   eax
c001cca5:	e8 ac b0 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	ba c4 55 02 c0       	mov    edx,0xc00255c4
c001ccb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb6:	89 10                	mov    DWORD PTR [eax],edx
c001ccb8:	e8 9c a0 fe ff       	call   c0006d59 <fs_iso9660_init>
c001ccbd:	90                   	nop
c001ccbe:	83 c4 0c             	add    esp,0xc
c001ccc1:	c3                   	ret    

c001ccc2 <SoundCard::beginPlayback()>:
c001ccc2:	c7 44 24 04 28 56 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025628
c001ccca:	e9 27 31 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001cccf:	90                   	nop

c001ccd0 <SoundCard::stopPlayback()>:
c001ccd0:	c7 44 24 04 28 56 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025628
c001ccd8:	e9 19 31 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001ccdd:	90                   	nop

c001ccde <SoundCard::SoundCard(char const*)>:
c001ccde:	83 ec 1c             	sub    esp,0x1c
c001cce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cce5:	83 ec 08             	sub    esp,0x8
c001cce8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccec:	50                   	push   eax
c001cced:	e8 0a ce fe ff       	call   c0009afc <Device::Device(char const*)>
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	ba 74 56 02 c0       	mov    edx,0xc0025674
c001ccfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccfe:	89 10                	mov    DWORD PTR [eax],edx
c001cd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd04:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd0f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cd19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd1d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd2b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cd35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd39:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cd43:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd4b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cd50:	7f 1a                	jg     c001cd6c <SoundCard::SoundCard(char const*)+0x8e>
c001cd52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd5a:	83 c2 54             	add    edx,0x54
c001cd5d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cd65:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cd6a:	eb df                	jmp    c001cd4b <SoundCard::SoundCard(char const*)+0x6d>
c001cd6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd70:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd77:	90                   	nop
c001cd78:	83 c4 1c             	add    esp,0x1c
c001cd7b:	c3                   	ret    

c001cd7c <SoundCard::~SoundCard()>:
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	ba 74 56 02 c0       	mov    edx,0xc0025674
c001cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd88:	89 10                	mov    DWORD PTR [eax],edx
c001cd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	50                   	push   eax
c001cd92:	e8 05 cb fe ff       	call   c000989c <Device::~Device()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	90                   	nop
c001cd9b:	83 c4 0c             	add    esp,0xc
c001cd9e:	c3                   	ret    
c001cd9f:	90                   	nop

c001cda0 <SoundCard::~SoundCard()>:
c001cda0:	83 ec 0c             	sub    esp,0xc
c001cda3:	83 ec 0c             	sub    esp,0xc
c001cda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdaa:	e8 cd ff ff ff       	call   c001cd7c <SoundCard::~SoundCard()>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	83 ec 08             	sub    esp,0x8
c001cdb5:	68 e8 01 00 00       	push   0x1e8
c001cdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdbe:	e8 64 04 ff ff       	call   c000d227 <operator delete(void*, unsigned long)>
c001cdc3:	83 c4 10             	add    esp,0x10
c001cdc6:	83 c4 0c             	add    esp,0xc
c001cdc9:	c3                   	ret    

c001cdca <SoundCard::configureRates(int, int, int)>:
c001cdca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cdce:	31 c0                	xor    eax,eax
c001cdd0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cdd7:	75 20                	jne    c001cdf9 <SoundCard::configureRates(int, int, int)+0x2f>
c001cdd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cddd:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cde3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cde7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cdf7:	b0 01                	mov    al,0x1
c001cdf9:	c3                   	ret    

c001cdfa <SoundCard::getSamples16(int, short*)>:
c001cdfa:	55                   	push   ebp
c001cdfb:	57                   	push   edi
c001cdfc:	31 ff                	xor    edi,edi
c001cdfe:	56                   	push   esi
c001cdff:	53                   	push   ebx
c001ce00:	31 db                	xor    ebx,ebx
c001ce02:	83 ec 10             	sub    esp,0x10
c001ce05:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ce09:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce0d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ce10:	50                   	push   eax
c001ce11:	6a 00                	push   0x0
c001ce13:	55                   	push   ebp
c001ce14:	e8 d7 36 fe ff       	call   c00004f0 <memset>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce20:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ce27:	85 c0                	test   eax,eax
c001ce29:	74 1a                	je     c001ce45 <SoundCard::getSamples16(int, short*)+0x4b>
c001ce2b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce2f:	75 14                	jne    c001ce45 <SoundCard::getSamples16(int, short*)+0x4b>
c001ce31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce35:	55                   	push   ebp
c001ce36:	56                   	push   esi
c001ce37:	50                   	push   eax
c001ce38:	e8 8f 03 00 00       	call   c001d1cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	39 c3                	cmp    ebx,eax
c001ce42:	0f 4c d8             	cmovl  ebx,eax
c001ce45:	47                   	inc    edi
c001ce46:	83 ff 20             	cmp    edi,0x20
c001ce49:	75 d1                	jne    c001ce1c <SoundCard::getSamples16(int, short*)+0x22>
c001ce4b:	83 c4 0c             	add    esp,0xc
c001ce4e:	89 d8                	mov    eax,ebx
c001ce50:	5b                   	pop    ebx
c001ce51:	5e                   	pop    esi
c001ce52:	5f                   	pop    edi
c001ce53:	5d                   	pop    ebp
c001ce54:	c3                   	ret    
c001ce55:	90                   	nop

c001ce56 <SoundCard::getSamples32(int, int*)>:
c001ce56:	55                   	push   ebp
c001ce57:	57                   	push   edi
c001ce58:	31 ff                	xor    edi,edi
c001ce5a:	56                   	push   esi
c001ce5b:	31 f6                	xor    esi,esi
c001ce5d:	53                   	push   ebx
c001ce5e:	83 ec 10             	sub    esp,0x10
c001ce61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce65:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce69:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce6d:	c1 e0 02             	shl    eax,0x2
c001ce70:	50                   	push   eax
c001ce71:	6a 00                	push   0x0
c001ce73:	55                   	push   ebp
c001ce74:	e8 77 36 fe ff       	call   c00004f0 <memset>
c001ce79:	83 c4 10             	add    esp,0x10
c001ce7c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ce83:	85 c0                	test   eax,eax
c001ce85:	74 1a                	je     c001cea1 <SoundCard::getSamples32(int, int*)+0x4b>
c001ce87:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce8b:	75 14                	jne    c001cea1 <SoundCard::getSamples32(int, int*)+0x4b>
c001ce8d:	53                   	push   ebx
c001ce8e:	55                   	push   ebp
c001ce8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce93:	50                   	push   eax
c001ce94:	e8 03 04 00 00       	call   c001d29c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	39 c6                	cmp    esi,eax
c001ce9e:	0f 4c f0             	cmovl  esi,eax
c001cea1:	47                   	inc    edi
c001cea2:	83 ff 20             	cmp    edi,0x20
c001cea5:	75 d5                	jne    c001ce7c <SoundCard::getSamples32(int, int*)+0x26>
c001cea7:	85 f6                	test   esi,esi
c001cea9:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ceb0:	75 0f                	jne    c001cec1 <SoundCard::getSamples32(int, int*)+0x6b>
c001ceb2:	85 c0                	test   eax,eax
c001ceb4:	74 1b                	je     c001ced1 <SoundCard::getSamples32(int, int*)+0x7b>
c001ceb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceb8:	83 ec 0c             	sub    esp,0xc
c001cebb:	53                   	push   ebx
c001cebc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cebf:	eb 0d                	jmp    c001cece <SoundCard::getSamples32(int, int*)+0x78>
c001cec1:	85 c0                	test   eax,eax
c001cec3:	75 0c                	jne    c001ced1 <SoundCard::getSamples32(int, int*)+0x7b>
c001cec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	53                   	push   ebx
c001cecb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cece:	83 c4 10             	add    esp,0x10
c001ced1:	83 c4 0c             	add    esp,0xc
c001ced4:	89 f0                	mov    eax,esi
c001ced6:	5b                   	pop    ebx
c001ced7:	5e                   	pop    esi
c001ced8:	5f                   	pop    edi
c001ced9:	5d                   	pop    ebp
c001ceda:	c3                   	ret    
c001cedb:	90                   	nop

c001cedc <SoundCard::addChannel(SoundPort*)>:
c001cedc:	83 ec 0c             	sub    esp,0xc
c001cedf:	31 c0                	xor    eax,eax
c001cee1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cee5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ceed:	74 1b                	je     c001cf0a <SoundCard::addChannel(SoundPort*)+0x2e>
c001ceef:	40                   	inc    eax
c001cef0:	83 f8 20             	cmp    eax,0x20
c001cef3:	75 f0                	jne    c001cee5 <SoundCard::addChannel(SoundPort*)+0x9>
c001cef5:	83 ec 0c             	sub    esp,0xc
c001cef8:	68 4d 56 02 c0       	push   0xc002564d
c001cefd:	e8 f4 2e ff ff       	call   c000fdf6 <KePanic(char const*)>
c001cf02:	83 c4 10             	add    esp,0x10
c001cf05:	83 c8 ff             	or     eax,0xffffffff
c001cf08:	eb 0b                	jmp    c001cf15 <SoundCard::addChannel(SoundPort*)+0x39>
c001cf0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cf0e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001cf15:	83 c4 0c             	add    esp,0xc
c001cf18:	c3                   	ret    
c001cf19:	90                   	nop

c001cf1a <SoundCard::removeChannel(int)>:
c001cf1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf22:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cf2d:	c3                   	ret    
c001cf2e:	66 90                	xchg   ax,ax

c001cf30 <SoundPort::SoundPort(int, int, int, int)>:
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf37:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf42:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cf46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf4e:	89 10                	mov    DWORD PTR [eax],edx
c001cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cf5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf66:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cf6b:	75 13                	jne    c001cf80 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf71:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf73:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf78:	d1 e0                	shl    eax,1
c001cf7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf7e:	66 90                	xchg   ax,ax
c001cf80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf88:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cf96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf9d:	c1 e0 02             	shl    eax,0x2
c001cfa0:	83 ec 0c             	sub    esp,0xc
c001cfa3:	50                   	push   eax
c001cfa4:	e8 07 2b ff ff       	call   c000fab0 <malloc>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	89 c2                	mov    edx,eax
c001cfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cfb5:	90                   	nop
c001cfb6:	83 c4 0c             	add    esp,0xc
c001cfb9:	c3                   	ret    
c001cfba:	66 90                	xchg   ax,ax

c001cfbc <SoundPort::~SoundPort()>:
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfc6:	85 c0                	test   eax,eax
c001cfc8:	74 1e                	je     c001cfe8 <SoundPort::~SoundPort()+0x2c>
c001cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfd1:	83 ec 0c             	sub    esp,0xc
c001cfd4:	50                   	push   eax
c001cfd5:	e8 e6 2a ff ff       	call   c000fac0 <free>
c001cfda:	83 c4 10             	add    esp,0x10
c001cfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cfe8:	90                   	nop
c001cfe9:	83 c4 0c             	add    esp,0xc
c001cfec:	c3                   	ret    
c001cfed:	90                   	nop
c001cfee:	66 90                	xchg   ax,ax

c001cff0 <SoundPort::unpause()>:
c001cff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cff4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cff8:	c3                   	ret    
c001cff9:	90                   	nop
c001cffa:	66 90                	xchg   ax,ax

c001cffc <SoundPort::pause()>:
c001cffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d000:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d004:	c3                   	ret    
c001d005:	90                   	nop
c001d006:	66 90                	xchg   ax,ax

c001d008 <SoundPort::getBufferUsed()>:
c001d008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d00c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d00f:	c3                   	ret    

c001d010 <SoundPort::getBufferSize()>:
c001d010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d014:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d017:	c3                   	ret    

c001d018 <SoundPort::buffer8(signed char*, int)>:
c001d018:	55                   	push   ebp
c001d019:	57                   	push   edi
c001d01a:	56                   	push   esi
c001d01b:	53                   	push   ebx
c001d01c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d020:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d024:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d027:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d02a:	74 70                	je     c001d09c <SoundPort::buffer8(signed char*, int)+0x84>
c001d02c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d030:	85 c9                	test   ecx,ecx
c001d032:	7e 68                	jle    c001d09c <SoundPort::buffer8(signed char*, int)+0x84>
c001d034:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d038:	8d 48 01             	lea    ecx,[eax+0x1]
c001d03b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d03e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d041:	89 f1                	mov    ecx,esi
c001d043:	c1 e1 18             	shl    ecx,0x18
c001d046:	29 f1                	sub    ecx,esi
c001d048:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d04b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d04e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d051:	74 51                	je     c001d0a4 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d053:	31 ff                	xor    edi,edi
c001d055:	eb 25                	jmp    c001d07c <SoundPort::buffer8(signed char*, int)+0x64>
c001d057:	90                   	nop
c001d058:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d05d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d060:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d063:	89 f3                	mov    ebx,esi
c001d065:	c1 e3 18             	shl    ebx,0x18
c001d068:	29 f3                	sub    ebx,esi
c001d06a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d06d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d070:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d073:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d076:	74 1c                	je     c001d094 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d078:	89 c7                	mov    edi,eax
c001d07a:	66 90                	xchg   ax,ax
c001d07c:	8d 47 01             	lea    eax,[edi+0x1]
c001d07f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d083:	75 d3                	jne    c001d058 <SoundPort::buffer8(signed char*, int)+0x40>
c001d085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d089:	8d 76 00             	lea    esi,[esi+0x0]
c001d08c:	5b                   	pop    ebx
c001d08d:	5e                   	pop    esi
c001d08e:	5f                   	pop    edi
c001d08f:	5d                   	pop    ebp
c001d090:	c3                   	ret    
c001d091:	8d 76 00             	lea    esi,[esi+0x0]
c001d094:	5b                   	pop    ebx
c001d095:	8d 47 02             	lea    eax,[edi+0x2]
c001d098:	5e                   	pop    esi
c001d099:	5f                   	pop    edi
c001d09a:	5d                   	pop    ebp
c001d09b:	c3                   	ret    
c001d09c:	5b                   	pop    ebx
c001d09d:	31 c0                	xor    eax,eax
c001d09f:	5e                   	pop    esi
c001d0a0:	5f                   	pop    edi
c001d0a1:	5d                   	pop    ebp
c001d0a2:	c3                   	ret    
c001d0a3:	90                   	nop
c001d0a4:	b8 01 00 00 00       	mov    eax,0x1
c001d0a9:	eb e1                	jmp    c001d08c <SoundPort::buffer8(signed char*, int)+0x74>
c001d0ab:	90                   	nop

c001d0ac <SoundPort::buffer16(short*, int)>:
c001d0ac:	55                   	push   ebp
c001d0ad:	57                   	push   edi
c001d0ae:	56                   	push   esi
c001d0af:	53                   	push   ebx
c001d0b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d0b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d0b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d0bb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d0be:	74 70                	je     c001d130 <SoundPort::buffer16(short*, int)+0x84>
c001d0c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0c4:	85 c9                	test   ecx,ecx
c001d0c6:	7e 68                	jle    c001d130 <SoundPort::buffer16(short*, int)+0x84>
c001d0c8:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d0cc:	8d 48 01             	lea    ecx,[eax+0x1]
c001d0cf:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d0d2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d0d5:	89 f1                	mov    ecx,esi
c001d0d7:	c1 e1 10             	shl    ecx,0x10
c001d0da:	29 f1                	sub    ecx,esi
c001d0dc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d0df:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0e2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0e5:	74 51                	je     c001d138 <SoundPort::buffer16(short*, int)+0x8c>
c001d0e7:	31 ff                	xor    edi,edi
c001d0e9:	eb 25                	jmp    c001d110 <SoundPort::buffer16(short*, int)+0x64>
c001d0eb:	90                   	nop
c001d0ec:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d0f1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d0f4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d0f7:	89 f3                	mov    ebx,esi
c001d0f9:	c1 e3 10             	shl    ebx,0x10
c001d0fc:	29 f3                	sub    ebx,esi
c001d0fe:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d101:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d104:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d107:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d10a:	74 1c                	je     c001d128 <SoundPort::buffer16(short*, int)+0x7c>
c001d10c:	89 c7                	mov    edi,eax
c001d10e:	66 90                	xchg   ax,ax
c001d110:	8d 47 01             	lea    eax,[edi+0x1]
c001d113:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d117:	75 d3                	jne    c001d0ec <SoundPort::buffer16(short*, int)+0x40>
c001d119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d11d:	8d 76 00             	lea    esi,[esi+0x0]
c001d120:	5b                   	pop    ebx
c001d121:	5e                   	pop    esi
c001d122:	5f                   	pop    edi
c001d123:	5d                   	pop    ebp
c001d124:	c3                   	ret    
c001d125:	8d 76 00             	lea    esi,[esi+0x0]
c001d128:	5b                   	pop    ebx
c001d129:	8d 47 02             	lea    eax,[edi+0x2]
c001d12c:	5e                   	pop    esi
c001d12d:	5f                   	pop    edi
c001d12e:	5d                   	pop    ebp
c001d12f:	c3                   	ret    
c001d130:	5b                   	pop    ebx
c001d131:	31 c0                	xor    eax,eax
c001d133:	5e                   	pop    esi
c001d134:	5f                   	pop    edi
c001d135:	5d                   	pop    ebp
c001d136:	c3                   	ret    
c001d137:	90                   	nop
c001d138:	b8 01 00 00 00       	mov    eax,0x1
c001d13d:	eb e1                	jmp    c001d120 <SoundPort::buffer16(short*, int)+0x74>
c001d13f:	90                   	nop

c001d140 <SoundPort::buffer32(int*, int)>:
c001d140:	55                   	push   ebp
c001d141:	57                   	push   edi
c001d142:	56                   	push   esi
c001d143:	53                   	push   ebx
c001d144:	83 ec 04             	sub    esp,0x4
c001d147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d14b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d14f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d153:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d156:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d159:	89 04 24             	mov    DWORD PTR [esp],eax
c001d15c:	74 5a                	je     c001d1b8 <SoundPort::buffer32(int*, int)+0x78>
c001d15e:	85 c0                	test   eax,eax
c001d160:	7e 56                	jle    c001d1b8 <SoundPort::buffer32(int*, int)+0x78>
c001d162:	8d 71 01             	lea    esi,[ecx+0x1]
c001d165:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d168:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d16b:	8b 37                	mov    esi,DWORD PTR [edi]
c001d16d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d170:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d173:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d176:	74 4c                	je     c001d1c4 <SoundPort::buffer32(int*, int)+0x84>
c001d178:	31 f6                	xor    esi,esi
c001d17a:	eb 1c                	jmp    c001d198 <SoundPort::buffer32(int*, int)+0x58>
c001d17c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d17f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d182:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d185:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d188:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d18c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d18f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d192:	74 18                	je     c001d1ac <SoundPort::buffer32(int*, int)+0x6c>
c001d194:	89 de                	mov    esi,ebx
c001d196:	66 90                	xchg   ax,ax
c001d198:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d19b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d19e:	75 dc                	jne    c001d17c <SoundPort::buffer32(int*, int)+0x3c>
c001d1a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d1a3:	90                   	nop
c001d1a4:	83 c4 04             	add    esp,0x4
c001d1a7:	5b                   	pop    ebx
c001d1a8:	5e                   	pop    esi
c001d1a9:	5f                   	pop    edi
c001d1aa:	5d                   	pop    ebp
c001d1ab:	c3                   	ret    
c001d1ac:	8d 46 02             	lea    eax,[esi+0x2]
c001d1af:	83 c4 04             	add    esp,0x4
c001d1b2:	5b                   	pop    ebx
c001d1b3:	5e                   	pop    esi
c001d1b4:	5f                   	pop    edi
c001d1b5:	5d                   	pop    ebp
c001d1b6:	c3                   	ret    
c001d1b7:	90                   	nop
c001d1b8:	83 c4 04             	add    esp,0x4
c001d1bb:	31 c0                	xor    eax,eax
c001d1bd:	5b                   	pop    ebx
c001d1be:	5e                   	pop    esi
c001d1bf:	5f                   	pop    edi
c001d1c0:	5d                   	pop    ebp
c001d1c1:	c3                   	ret    
c001d1c2:	66 90                	xchg   ax,ax
c001d1c4:	b8 01 00 00 00       	mov    eax,0x1
c001d1c9:	eb d9                	jmp    c001d1a4 <SoundPort::buffer32(int*, int)+0x64>
c001d1cb:	90                   	nop

c001d1cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d1cc:	55                   	push   ebp
c001d1cd:	57                   	push   edi
c001d1ce:	56                   	push   esi
c001d1cf:	53                   	push   ebx
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d1d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1db:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d1df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d1e3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d1e9:	39 03                	cmp    DWORD PTR [ebx],eax
c001d1eb:	74 13                	je     c001d200 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001d1ed:	83 ec 0c             	sub    esp,0xc
c001d1f0:	68 a0 56 02 c0       	push   0xc00256a0
c001d1f5:	e8 fc 2b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d1fa:	83 c4 10             	add    esp,0x10
c001d1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d200:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d206:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d209:	74 11                	je     c001d21c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001d20b:	83 ec 0c             	sub    esp,0xc
c001d20e:	68 df 56 02 c0       	push   0xc00256df
c001d213:	e8 de 2b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	90                   	nop
c001d21c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d222:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d225:	74 11                	je     c001d238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001d227:	83 ec 0c             	sub    esp,0xc
c001d22a:	68 df 56 02 c0       	push   0xc00256df
c001d22f:	e8 c2 2b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d234:	83 c4 10             	add    esp,0x10
c001d237:	90                   	nop
c001d238:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001d23b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001d23f:	85 f6                	test   esi,esi
c001d241:	7e 2d                	jle    c001d270 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d243:	31 c0                	xor    eax,eax
c001d245:	8d 76 00             	lea    esi,[esi+0x0]
c001d248:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d24b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001d24e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001d254:	85 c9                	test   ecx,ecx
c001d256:	0f 49 d1             	cmovns edx,ecx
c001d259:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001d25d:	c1 fa 0f             	sar    edx,0xf
c001d260:	01 d1                	add    ecx,edx
c001d262:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001d266:	83 c0 01             	add    eax,0x1
c001d269:	39 f0                	cmp    eax,esi
c001d26b:	75 db                	jne    c001d248 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001d26d:	8d 76 00             	lea    esi,[esi+0x0]
c001d270:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d273:	83 ec 04             	sub    esp,0x4
c001d276:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d279:	29 f0                	sub    eax,esi
c001d27b:	c1 e0 02             	shl    eax,0x2
c001d27e:	50                   	push   eax
c001d27f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d282:	50                   	push   eax
c001d283:	52                   	push   edx
c001d284:	e8 47 31 fe ff       	call   c00003d0 <memmove>
c001d289:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d28c:	29 f0                	sub    eax,esi
c001d28e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d291:	83 c4 1c             	add    esp,0x1c
c001d294:	89 f0                	mov    eax,esi
c001d296:	5b                   	pop    ebx
c001d297:	5e                   	pop    esi
c001d298:	5f                   	pop    edi
c001d299:	5d                   	pop    ebp
c001d29a:	c3                   	ret    
c001d29b:	90                   	nop

c001d29c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d29c:	55                   	push   ebp
c001d29d:	57                   	push   edi
c001d29e:	56                   	push   esi
c001d29f:	53                   	push   ebx
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d2a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d2af:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d2b3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d2b9:	39 03                	cmp    DWORD PTR [ebx],eax
c001d2bb:	74 13                	je     c001d2d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001d2bd:	83 ec 0c             	sub    esp,0xc
c001d2c0:	68 c0 56 02 c0       	push   0xc00256c0
c001d2c5:	e8 2c 2b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d2d0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d2d6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d2d9:	74 11                	je     c001d2ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	68 fb 56 02 c0       	push   0xc00256fb
c001d2e3:	e8 0e 2b ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	90                   	nop
c001d2ec:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d2f2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d2f5:	74 11                	je     c001d308 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001d2f7:	83 ec 0c             	sub    esp,0xc
c001d2fa:	68 fb 56 02 c0       	push   0xc00256fb
c001d2ff:	e8 f2 2a ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d304:	83 c4 10             	add    esp,0x10
c001d307:	90                   	nop
c001d308:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001d30b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001d30f:	85 ff                	test   edi,edi
c001d311:	7e 21                	jle    c001d334 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001d313:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d31a:	31 c0                	xor    eax,eax
c001d31c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d31f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001d322:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d325:	01 d5                	add    ebp,edx
c001d327:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001d32a:	83 c0 04             	add    eax,0x4
c001d32d:	39 c1                	cmp    ecx,eax
c001d32f:	75 eb                	jne    c001d31c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001d331:	8d 76 00             	lea    esi,[esi+0x0]
c001d334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d337:	83 ec 04             	sub    esp,0x4
c001d33a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d33d:	29 f8                	sub    eax,edi
c001d33f:	c1 e0 02             	shl    eax,0x2
c001d342:	50                   	push   eax
c001d343:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d346:	50                   	push   eax
c001d347:	52                   	push   edx
c001d348:	e8 83 30 fe ff       	call   c00003d0 <memmove>
c001d34d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d350:	29 f8                	sub    eax,edi
c001d352:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d355:	83 c4 1c             	add    esp,0x1c
c001d358:	89 f8                	mov    eax,edi
c001d35a:	5b                   	pop    ebx
c001d35b:	5e                   	pop    esi
c001d35c:	5f                   	pop    edi
c001d35d:	5d                   	pop    ebp
c001d35e:	c3                   	ret    
c001d35f:	90                   	nop

c001d360 <PCI::open(int, int, void*)>:
c001d360:	83 ec 18             	sub    esp,0x18
c001d363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d367:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d36b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d371:	8b 10                	mov    edx,DWORD PTR [eax]
c001d373:	50                   	push   eax
c001d374:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d377:	31 c0                	xor    eax,eax
c001d379:	83 c4 1c             	add    esp,0x1c
c001d37c:	c3                   	ret    
c001d37d:	90                   	nop

c001d37e <PCI::close(int, int, void*)>:
c001d37e:	31 c0                	xor    eax,eax
c001d380:	c3                   	ret    
c001d381:	90                   	nop

c001d382 <PCI::PCI()>:
c001d382:	83 ec 0c             	sub    esp,0xc
c001d385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d389:	83 ec 08             	sub    esp,0x8
c001d38c:	68 17 57 02 c0       	push   0xc0025717
c001d391:	50                   	push   eax
c001d392:	e8 71 b5 fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001d397:	83 c4 10             	add    esp,0x10
c001d39a:	ba 24 58 02 c0       	mov    edx,0xc0025824
c001d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a3:	89 10                	mov    DWORD PTR [eax],edx
c001d3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b7:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3c6:	0f b6 d0             	movzx  edx,al
c001d3c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3cd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3de:	0f b6 d0             	movzx  edx,al
c001d3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d3f4:	8d 50 01             	lea    edx,[eax+0x1]
c001d3f7:	88 d1                	mov    cl,dl
c001d3f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3fd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d403:	0f b6 d0             	movzx  edx,al
c001d406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d40e:	83 c9 c0             	or     ecx,0xffffffc0
c001d411:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d415:	90                   	nop
c001d416:	83 c4 0c             	add    esp,0xc
c001d419:	c3                   	ret    

c001d41a <PCI::readBAR8(unsigned int, int)>:
c001d41a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d41e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d422:	f6 c2 01             	test   dl,0x1
c001d425:	74 07                	je     c001d42e <PCI::readBAR8(unsigned int, int)+0x14>
c001d427:	83 e2 fc             	and    edx,0xfffffffc
c001d42a:	01 c2                	add    edx,eax
c001d42c:	ec                   	in     al,dx
c001d42d:	c3                   	ret    
c001d42e:	83 e2 f0             	and    edx,0xfffffff0
c001d431:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d434:	c3                   	ret    
c001d435:	90                   	nop

c001d436 <PCI::readBAR16(unsigned int, int)>:
c001d436:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d43a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d43e:	f6 c2 01             	test   dl,0x1
c001d441:	74 08                	je     c001d44b <PCI::readBAR16(unsigned int, int)+0x15>
c001d443:	83 e2 fc             	and    edx,0xfffffffc
c001d446:	01 c2                	add    edx,eax
c001d448:	66 ed                	in     ax,dx
c001d44a:	c3                   	ret    
c001d44b:	83 e2 f0             	and    edx,0xfffffff0
c001d44e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <PCI::readBAR32(unsigned int, int)>:
c001d454:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d458:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d45c:	f6 c2 01             	test   dl,0x1
c001d45f:	74 07                	je     c001d468 <PCI::readBAR32(unsigned int, int)+0x14>
c001d461:	83 e2 fc             	and    edx,0xfffffffc
c001d464:	01 c2                	add    edx,eax
c001d466:	ed                   	in     eax,dx
c001d467:	c3                   	ret    
c001d468:	83 e2 f0             	and    edx,0xfffffff0
c001d46b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d46e:	c3                   	ret    
c001d46f:	90                   	nop

c001d470 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d47c:	f6 c2 01             	test   dl,0x1
c001d47f:	74 07                	je     c001d488 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d481:	83 e2 fc             	and    edx,0xfffffffc
c001d484:	01 ca                	add    edx,ecx
c001d486:	ee                   	out    dx,al
c001d487:	c3                   	ret    
c001d488:	83 e2 f0             	and    edx,0xfffffff0
c001d48b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d48e:	c3                   	ret    
c001d48f:	90                   	nop

c001d490 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d490:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d498:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d49c:	f6 c2 01             	test   dl,0x1
c001d49f:	74 08                	je     c001d4a9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d4a1:	83 e2 fc             	and    edx,0xfffffffc
c001d4a4:	01 ca                	add    edx,ecx
c001d4a6:	66 ef                	out    dx,ax
c001d4a8:	c3                   	ret    
c001d4a9:	83 e2 f0             	and    edx,0xfffffff0
c001d4ac:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d4b0:	c3                   	ret    
c001d4b1:	90                   	nop

c001d4b2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d4b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4be:	f6 c2 01             	test   dl,0x1
c001d4c1:	74 07                	je     c001d4ca <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d4c3:	83 e2 fc             	and    edx,0xfffffffc
c001d4c6:	01 ca                	add    edx,ecx
c001d4c8:	ef                   	out    dx,eax
c001d4c9:	c3                   	ret    
c001d4ca:	83 e2 f0             	and    edx,0xfffffff0
c001d4cd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d4d0:	c3                   	ret    
c001d4d1:	90                   	nop

c001d4d2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d4d2:	55                   	push   ebp
c001d4d3:	57                   	push   edi
c001d4d4:	56                   	push   esi
c001d4d5:	53                   	push   ebx
c001d4d6:	83 ec 0c             	sub    esp,0xc
c001d4d9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d4de:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d4e2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d4e6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d4ea:	83 fe 07             	cmp    esi,0x7
c001d4ed:	76 10                	jbe    c001d4ff <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	68 1f 57 02 c0       	push   0xc002571f
c001d4f7:	e8 fa 28 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	0f b6 db             	movzx  ebx,bl
c001d502:	83 fb 0f             	cmp    ebx,0xf
c001d505:	76 10                	jbe    c001d517 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	68 4f 57 02 c0       	push   0xc002574f
c001d50f:	e8 e2 28 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d514:	83 c4 10             	add    esp,0x10
c001d517:	8d 04 36             	lea    eax,[esi+esi*1]
c001d51a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d51f:	83 c8 f0             	or     eax,0xfffffff0
c001d522:	ee                   	out    dx,al
c001d523:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d528:	89 e8                	mov    eax,ebp
c001d52a:	ee                   	out    dx,al
c001d52b:	89 f9                	mov    ecx,edi
c001d52d:	89 d8                	mov    eax,ebx
c001d52f:	0f b6 d9             	movzx  ebx,cl
c001d532:	83 c4 0c             	add    esp,0xc
c001d535:	c1 e0 08             	shl    eax,0x8
c001d538:	83 e3 fc             	and    ebx,0xfffffffc
c001d53b:	09 d8                	or     eax,ebx
c001d53d:	5b                   	pop    ebx
c001d53e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d543:	5e                   	pop    esi
c001d544:	5f                   	pop    edi
c001d545:	5d                   	pop    ebp
c001d546:	c3                   	ret    
c001d547:	90                   	nop

c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d548:	57                   	push   edi
c001d549:	56                   	push   esi
c001d54a:	53                   	push   ebx
c001d54b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d54f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d557:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d55b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d561:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d565:	83 ff 01             	cmp    edi,0x1
c001d568:	75 3f                	jne    c001d5a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d56a:	89 de                	mov    esi,ebx
c001d56c:	0f b6 c0             	movzx  eax,al
c001d56f:	c1 e0 10             	shl    eax,0x10
c001d572:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d578:	0f b6 c9             	movzx  ecx,cl
c001d57b:	09 f0                	or     eax,esi
c001d57d:	c1 e1 08             	shl    ecx,0x8
c001d580:	0f b6 d2             	movzx  edx,dl
c001d583:	c1 e2 0b             	shl    edx,0xb
c001d586:	09 c8                	or     eax,ecx
c001d588:	09 d0                	or     eax,edx
c001d58a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d58f:	0d 00 00 00 80       	or     eax,0x80000000
c001d594:	ef                   	out    dx,eax
c001d595:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d59a:	ed                   	in     eax,dx
c001d59b:	83 e3 02             	and    ebx,0x2
c001d59e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d5a5:	d3 e8                	shr    eax,cl
c001d5a7:	eb 44                	jmp    c001d5ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d5a9:	83 ff 02             	cmp    edi,0x2
c001d5ac:	75 2d                	jne    c001d5db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d5ae:	83 ec 0c             	sub    esp,0xc
c001d5b1:	0f b6 fb             	movzx  edi,bl
c001d5b4:	57                   	push   edi
c001d5b5:	0f b6 c9             	movzx  ecx,cl
c001d5b8:	51                   	push   ecx
c001d5b9:	0f b6 d2             	movzx  edx,dl
c001d5bc:	52                   	push   edx
c001d5bd:	0f b6 c0             	movzx  eax,al
c001d5c0:	50                   	push   eax
c001d5c1:	56                   	push   esi
c001d5c2:	e8 0b ff ff ff       	call   c001d4d2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5c7:	89 c2                	mov    edx,eax
c001d5c9:	ed                   	in     eax,dx
c001d5ca:	83 e3 02             	and    ebx,0x2
c001d5cd:	83 c4 20             	add    esp,0x20
c001d5d0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d5d7:	d3 e8                	shr    eax,cl
c001d5d9:	eb 12                	jmp    c001d5ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d5db:	83 ec 0c             	sub    esp,0xc
c001d5de:	68 7f 57 02 c0       	push   0xc002577f
c001d5e3:	e8 0e 28 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	31 c0                	xor    eax,eax
c001d5ed:	5b                   	pop    ebx
c001d5ee:	5e                   	pop    esi
c001d5ef:	5f                   	pop    edi
c001d5f0:	c3                   	ret    
c001d5f1:	90                   	nop

c001d5f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d5f2:	83 ec 18             	sub    esp,0x18
c001d5f5:	6a 00                	push   0x0
c001d5f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5fc:	50                   	push   eax
c001d5fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d602:	50                   	push   eax
c001d603:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d608:	50                   	push   eax
c001d609:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d60d:	e8 36 ff ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d612:	83 c4 2c             	add    esp,0x2c
c001d615:	c3                   	ret    

c001d616 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d616:	83 ec 18             	sub    esp,0x18
c001d619:	6a 0e                	push   0xe
c001d61b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d620:	50                   	push   eax
c001d621:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d626:	50                   	push   eax
c001d627:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d62c:	50                   	push   eax
c001d62d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d631:	e8 12 ff ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d636:	83 c4 2c             	add    esp,0x2c
c001d639:	0f b6 c0             	movzx  eax,al
c001d63c:	c3                   	ret    
c001d63d:	90                   	nop

c001d63e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d63e:	55                   	push   ebp
c001d63f:	57                   	push   edi
c001d640:	56                   	push   esi
c001d641:	53                   	push   ebx
c001d642:	83 ec 18             	sub    esp,0x18
c001d645:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d64a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d64f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d654:	6a 0a                	push   0xa
c001d656:	56                   	push   esi
c001d657:	55                   	push   ebp
c001d658:	57                   	push   edi
c001d659:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d65d:	e8 e6 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d662:	83 c4 14             	add    esp,0x14
c001d665:	6a 0a                	push   0xa
c001d667:	56                   	push   esi
c001d668:	55                   	push   ebp
c001d669:	57                   	push   edi
c001d66a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d66e:	89 c3                	mov    ebx,eax
c001d670:	0f b6 db             	movzx  ebx,bl
c001d673:	e8 d0 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d678:	83 c4 2c             	add    esp,0x2c
c001d67b:	25 00 ff 00 00       	and    eax,0xff00
c001d680:	09 d8                	or     eax,ebx
c001d682:	5b                   	pop    ebx
c001d683:	5e                   	pop    esi
c001d684:	5f                   	pop    edi
c001d685:	5d                   	pop    ebp
c001d686:	c3                   	ret    
c001d687:	90                   	nop

c001d688 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d688:	83 ec 18             	sub    esp,0x18
c001d68b:	6a 08                	push   0x8
c001d68d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d692:	50                   	push   eax
c001d693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d698:	50                   	push   eax
c001d699:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d69e:	50                   	push   eax
c001d69f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6a3:	e8 a0 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a8:	83 c4 2c             	add    esp,0x2c
c001d6ab:	0f b6 c4             	movzx  eax,ah
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d6b0:	83 ec 18             	sub    esp,0x18
c001d6b3:	6a 08                	push   0x8
c001d6b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6ba:	50                   	push   eax
c001d6bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6c0:	50                   	push   eax
c001d6c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6c6:	50                   	push   eax
c001d6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6cb:	e8 78 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6d0:	83 c4 2c             	add    esp,0x2c
c001d6d3:	c3                   	ret    

c001d6d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d6d4:	83 ec 18             	sub    esp,0x18
c001d6d7:	6a 3c                	push   0x3c
c001d6d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6de:	50                   	push   eax
c001d6df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6e4:	50                   	push   eax
c001d6e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6ea:	50                   	push   eax
c001d6eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6ef:	e8 54 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6f4:	83 c4 2c             	add    esp,0x2c
c001d6f7:	c3                   	ret    

c001d6f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d6f8:	83 ec 18             	sub    esp,0x18
c001d6fb:	6a 18                	push   0x18
c001d6fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d702:	50                   	push   eax
c001d703:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d708:	50                   	push   eax
c001d709:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d70e:	50                   	push   eax
c001d70f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d713:	e8 30 fe ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d718:	83 c4 2c             	add    esp,0x2c
c001d71b:	0f b6 c4             	movzx  eax,ah
c001d71e:	c3                   	ret    
c001d71f:	90                   	nop

c001d720 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d720:	55                   	push   ebp
c001d721:	57                   	push   edi
c001d722:	56                   	push   esi
c001d723:	53                   	push   ebx
c001d724:	83 ec 28             	sub    esp,0x28
c001d727:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d72b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d730:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d735:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d73a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d741:	8d 43 12             	lea    eax,[ebx+0x12]
c001d744:	83 c3 10             	add    ebx,0x10
c001d747:	0f b6 c0             	movzx  eax,al
c001d74a:	0f b6 db             	movzx  ebx,bl
c001d74d:	50                   	push   eax
c001d74e:	51                   	push   ecx
c001d74f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d753:	57                   	push   edi
c001d754:	55                   	push   ebp
c001d755:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d759:	e8 ea fd ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d75e:	83 c4 14             	add    esp,0x14
c001d761:	53                   	push   ebx
c001d762:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d766:	51                   	push   ecx
c001d767:	89 c6                	mov    esi,eax
c001d769:	57                   	push   edi
c001d76a:	55                   	push   ebp
c001d76b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d76f:	c1 e6 10             	shl    esi,0x10
c001d772:	e8 d1 fd ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d777:	83 c4 3c             	add    esp,0x3c
c001d77a:	5b                   	pop    ebx
c001d77b:	0f b7 c0             	movzx  eax,ax
c001d77e:	09 f0                	or     eax,esi
c001d780:	5e                   	pop    esi
c001d781:	5f                   	pop    edi
c001d782:	5d                   	pop    ebp
c001d783:	c3                   	ret    

c001d784 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d784:	55                   	push   ebp
c001d785:	57                   	push   edi
c001d786:	56                   	push   esi
c001d787:	53                   	push   ebx
c001d788:	83 ec 0c             	sub    esp,0xc
c001d78b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d78f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d793:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d797:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001d79b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001d7a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d7a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d7a9:	83 f9 01             	cmp    ecx,0x1
c001d7ac:	75 5d                	jne    c001d80b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001d7ae:	0f b6 c8             	movzx  ecx,al
c001d7b1:	89 f0                	mov    eax,esi
c001d7b3:	25 fc 00 00 00       	and    eax,0xfc
c001d7b8:	0f b6 d2             	movzx  edx,dl
c001d7bb:	c1 e1 10             	shl    ecx,0x10
c001d7be:	c1 e2 0b             	shl    edx,0xb
c001d7c1:	09 c1                	or     ecx,eax
c001d7c3:	89 f8                	mov    eax,edi
c001d7c5:	0f b6 f8             	movzx  edi,al
c001d7c8:	c1 e7 08             	shl    edi,0x8
c001d7cb:	09 f9                	or     ecx,edi
c001d7cd:	09 d1                	or     ecx,edx
c001d7cf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7d4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d7da:	89 c8                	mov    eax,ecx
c001d7dc:	ef                   	out    dx,eax
c001d7dd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d7e2:	ed                   	in     eax,dx
c001d7e3:	83 e6 02             	and    esi,0x2
c001d7e6:	0f b7 db             	movzx  ebx,bx
c001d7e9:	74 0a                	je     c001d7f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001d7eb:	c1 e3 10             	shl    ebx,0x10
c001d7ee:	0f b7 d0             	movzx  edx,ax
c001d7f1:	09 d3                	or     ebx,edx
c001d7f3:	eb 05                	jmp    c001d7fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001d7f5:	66 31 c0             	xor    ax,ax
c001d7f8:	09 c3                	or     ebx,eax
c001d7fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7ff:	89 c8                	mov    eax,ecx
c001d801:	ef                   	out    dx,eax
c001d802:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d807:	89 d8                	mov    eax,ebx
c001d809:	eb 41                	jmp    c001d84c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d80b:	83 f9 02             	cmp    ecx,0x2
c001d80e:	75 45                	jne    c001d855 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001d810:	89 f1                	mov    ecx,esi
c001d812:	83 ec 0c             	sub    esp,0xc
c001d815:	0f b6 f1             	movzx  esi,cl
c001d818:	89 f9                	mov    ecx,edi
c001d81a:	56                   	push   esi
c001d81b:	0f b6 f9             	movzx  edi,cl
c001d81e:	57                   	push   edi
c001d81f:	0f b6 d2             	movzx  edx,dl
c001d822:	52                   	push   edx
c001d823:	0f b6 c0             	movzx  eax,al
c001d826:	50                   	push   eax
c001d827:	55                   	push   ebp
c001d828:	e8 a5 fc ff ff       	call   c001d4d2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d82d:	89 c2                	mov    edx,eax
c001d82f:	ed                   	in     eax,dx
c001d830:	83 c4 20             	add    esp,0x20
c001d833:	f6 c2 02             	test   dl,0x2
c001d836:	0f b7 db             	movzx  ebx,bx
c001d839:	74 0c                	je     c001d847 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001d83b:	0f b7 c8             	movzx  ecx,ax
c001d83e:	89 d8                	mov    eax,ebx
c001d840:	c1 e0 10             	shl    eax,0x10
c001d843:	09 c8                	or     eax,ecx
c001d845:	eb 05                	jmp    c001d84c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d847:	66 31 c0             	xor    ax,ax
c001d84a:	09 d8                	or     eax,ebx
c001d84c:	ef                   	out    dx,eax
c001d84d:	83 c4 0c             	add    esp,0xc
c001d850:	5b                   	pop    ebx
c001d851:	5e                   	pop    esi
c001d852:	5f                   	pop    edi
c001d853:	5d                   	pop    ebp
c001d854:	c3                   	ret    
c001d855:	c7 44 24 20 7f 57 02 c0 	mov    DWORD PTR [esp+0x20],0xc002577f
c001d85d:	83 c4 0c             	add    esp,0xc
c001d860:	5b                   	pop    ebx
c001d861:	5e                   	pop    esi
c001d862:	5f                   	pop    edi
c001d863:	5d                   	pop    ebp
c001d864:	e9 8d 25 ff ff       	jmp    c000fdf6 <KePanic(char const*)>
c001d869:	90                   	nop

c001d86a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d86a:	55                   	push   ebp
c001d86b:	57                   	push   edi
c001d86c:	56                   	push   esi
c001d86d:	53                   	push   ebx
c001d86e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001d874:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001d87b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001d882:	0f 85 bd 00 00 00    	jne    c001d945 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	68 14 01 00 00       	push   0x114
c001d890:	e8 1b 22 ff ff       	call   c000fab0 <malloc>
c001d895:	83 c4 0c             	add    esp,0xc
c001d898:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001d89e:	68 85 57 02 c0       	push   0xc0025785
c001d8a3:	50                   	push   eax
c001d8a4:	89 c3                	mov    ebx,eax
c001d8a6:	e8 81 a8 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001d8ab:	83 c4 10             	add    esp,0x10
c001d8ae:	85 db                	test   ebx,ebx
c001d8b0:	0f 84 6b 02 00 00    	je     c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d8b6:	57                   	push   edi
c001d8b7:	57                   	push   edi
c001d8b8:	6a 01                	push   0x1
c001d8ba:	53                   	push   ebx
c001d8bb:	e8 8a a8 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	85 c0                	test   eax,eax
c001d8c5:	0f 85 56 02 00 00    	jne    c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d8cb:	52                   	push   edx
c001d8cc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001d8d0:	50                   	push   eax
c001d8d1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d8d5:	50                   	push   eax
c001d8d6:	53                   	push   ebx
c001d8d7:	e8 70 ab fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001d8dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d8e0:	40                   	inc    eax
c001d8e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8e4:	e8 c7 21 ff ff       	call   c000fab0 <malloc>
c001d8e9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d8ed:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d8f1:	59                   	pop    ecx
c001d8f2:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001d8f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d8f9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001d8fd:	51                   	push   ecx
c001d8fe:	50                   	push   eax
c001d8ff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d903:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d907:	53                   	push   ebx
c001d908:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d90b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001d90f:	83 c4 20             	add    esp,0x20
c001d912:	89 c8                	mov    eax,ecx
c001d914:	99                   	cdq    
c001d915:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001d919:	0f 85 02 02 00 00    	jne    c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d91f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001d923:	0f 85 f8 01 00 00    	jne    c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d929:	83 ec 0c             	sub    esp,0xc
c001d92c:	53                   	push   ebx
c001d92d:	e8 76 a8 fe ff       	call   c00081a8 <File::close()>
c001d932:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001d940:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001d945:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d94d:	31 c9                	xor    ecx,ecx
c001d94f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001d956:	8b 2d 44 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f444
c001d95c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001d963:	8b 15 48 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f448
c001d969:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001d96e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001d976:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001d97b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001d983:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d987:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001d98f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d993:	39 cd                	cmp    ebp,ecx
c001d995:	0f 8e 86 01 00 00    	jle    c001db21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d99b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001d99e:	d4 40                	aam    0x40
c001d9a0:	d5 39                	aad    0x39
c001d9a2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d9a6:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001d9aa:	d4 40                	aam    0x40
c001d9ac:	d5 39                	aad    0x39
c001d9ae:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d9b2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001d9b6:	d4 40                	aam    0x40
c001d9b8:	d5 39                	aad    0x39
c001d9ba:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001d9be:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001d9c2:	d4 40                	aam    0x40
c001d9c4:	d5 39                	aad    0x39
c001d9c6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d9ca:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001d9ce:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d9d2:	3c 56                	cmp    al,0x56
c001d9d4:	74 47                	je     c001da1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001d9d6:	d4 40                	aam    0x40
c001d9d8:	d5 39                	aad    0x39
c001d9da:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d9dd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001d9e1:	0f b6 db             	movzx  ebx,bl
c001d9e4:	c1 e3 04             	shl    ebx,0x4
c001d9e7:	d4 40                	aam    0x40
c001d9e9:	d5 39                	aad    0x39
c001d9eb:	83 e8 30             	sub    eax,0x30
c001d9ee:	0f b6 c0             	movzx  eax,al
c001d9f1:	09 c3                	or     ebx,eax
c001d9f3:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001d9f7:	c1 e3 04             	shl    ebx,0x4
c001d9fa:	d4 40                	aam    0x40
c001d9fc:	d5 39                	aad    0x39
c001d9fe:	83 e8 30             	sub    eax,0x30
c001da01:	0f b6 c0             	movzx  eax,al
c001da04:	09 c3                	or     ebx,eax
c001da06:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001da0a:	c1 e3 04             	shl    ebx,0x4
c001da0d:	d4 40                	aam    0x40
c001da0f:	d5 39                	aad    0x39
c001da11:	83 e8 30             	sub    eax,0x30
c001da14:	0f b6 c0             	movzx  eax,al
c001da17:	09 c3                	or     ebx,eax
c001da19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001da1d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001da21:	80 fb 58             	cmp    bl,0x58
c001da24:	74 49                	je     c001da6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001da26:	88 d8                	mov    al,bl
c001da28:	d4 40                	aam    0x40
c001da2a:	d5 39                	aad    0x39
c001da2c:	83 e8 30             	sub    eax,0x30
c001da2f:	0f b6 f8             	movzx  edi,al
c001da32:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001da36:	c1 e7 04             	shl    edi,0x4
c001da39:	d4 40                	aam    0x40
c001da3b:	d5 39                	aad    0x39
c001da3d:	83 e8 30             	sub    eax,0x30
c001da40:	0f b6 c0             	movzx  eax,al
c001da43:	09 c7                	or     edi,eax
c001da45:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001da49:	c1 e7 04             	shl    edi,0x4
c001da4c:	d4 40                	aam    0x40
c001da4e:	d5 39                	aad    0x39
c001da50:	83 e8 30             	sub    eax,0x30
c001da53:	0f b6 c0             	movzx  eax,al
c001da56:	09 c7                	or     edi,eax
c001da58:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001da5c:	c1 e7 04             	shl    edi,0x4
c001da5f:	d4 40                	aam    0x40
c001da61:	d5 39                	aad    0x39
c001da63:	83 e8 30             	sub    eax,0x30
c001da66:	0f b6 c0             	movzx  eax,al
c001da69:	09 c7                	or     edi,eax
c001da6b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001da6f:	8d 41 10             	lea    eax,[ecx+0x10]
c001da72:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001da76:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001da7a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001da7e:	83 f9 0a             	cmp    ecx,0xa
c001da81:	74 07                	je     c001da8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001da83:	47                   	inc    edi
c001da84:	39 c5                	cmp    ebp,eax
c001da86:	75 16                	jne    c001da9e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001da88:	89 e8                	mov    eax,ebp
c001da8a:	83 f9 0a             	cmp    ecx,0xa
c001da8d:	0f 94 c1             	sete   cl
c001da90:	0f b6 c9             	movzx  ecx,cl
c001da93:	01 c1                	add    ecx,eax
c001da95:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001da9a:	75 0f                	jne    c001daab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001da9c:	eb 1c                	jmp    c001daba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001da9e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001daa1:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001daa5:	40                   	inc    eax
c001daa6:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001daa9:	eb cb                	jmp    c001da76 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001daab:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001daaf:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001dab4:	0f 85 d9 fe ff ff    	jne    c001d993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001daba:	80 fb 58             	cmp    bl,0x58
c001dabd:	74 10                	je     c001dacf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001dabf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001dac4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001dac9:	0f 85 c4 fe ff ff    	jne    c001d993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001dacf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dad3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dad7:	83 e8 30             	sub    eax,0x30
c001dada:	c1 e0 04             	shl    eax,0x4
c001dadd:	83 eb 30             	sub    ebx,0x30
c001dae0:	09 d8                	or     eax,ebx
c001dae2:	0f b6 c0             	movzx  eax,al
c001dae5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001dae9:	0f 85 a4 fe ff ff    	jne    c001d993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001daef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001daf7:	83 e8 30             	sub    eax,0x30
c001dafa:	c1 e0 04             	shl    eax,0x4
c001dafd:	83 eb 30             	sub    ebx,0x30
c001db00:	09 d8                	or     eax,ebx
c001db02:	0f b6 c0             	movzx  eax,al
c001db05:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001db09:	0f 85 84 fe ff ff    	jne    c001d993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001db0f:	50                   	push   eax
c001db10:	50                   	push   eax
c001db11:	8d 44 24 48          	lea    eax,[esp+0x48]
c001db15:	50                   	push   eax
c001db16:	56                   	push   esi
c001db17:	e8 34 2b fe ff       	call   c0000650 <strcpy>
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	eb 05                	jmp    c001db26 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001db21:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001db24:	31 f6                	xor    esi,esi
c001db26:	81 c4 4c 01 00 00    	add    esp,0x14c
c001db2c:	89 f0                	mov    eax,esi
c001db2e:	5b                   	pop    ebx
c001db2f:	5e                   	pop    esi
c001db30:	5f                   	pop    edi
c001db31:	5d                   	pop    ebp
c001db32:	c3                   	ret    
c001db33:	90                   	nop

c001db34 <PCI::checkBus(unsigned char)>:
c001db34:	56                   	push   esi
c001db35:	53                   	push   ebx
c001db36:	31 db                	xor    ebx,ebx
c001db38:	51                   	push   ecx
c001db39:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001db3e:	52                   	push   edx
c001db3f:	53                   	push   ebx
c001db40:	43                   	inc    ebx
c001db41:	56                   	push   esi
c001db42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db46:	e8 6f 03 00 00       	call   c001deba <PCI::checkDevice(unsigned char, unsigned char)>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	83 fb 20             	cmp    ebx,0x20
c001db51:	75 eb                	jne    c001db3e <PCI::checkBus(unsigned char)+0xa>
c001db53:	58                   	pop    eax
c001db54:	5b                   	pop    ebx
c001db55:	5e                   	pop    esi
c001db56:	c3                   	ret    
c001db57:	90                   	nop

c001db58 <PCI::foundDevice(PCIDeviceInfo)>:
c001db58:	55                   	push   ebp
c001db59:	57                   	push   edi
c001db5a:	56                   	push   esi
c001db5b:	53                   	push   ebx
c001db5c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001db62:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001db6a:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001db71:	3d ff ff 00 00       	cmp    eax,0xffff
c001db76:	0f 84 b6 01 00 00    	je     c001dd32 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001db7c:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001db84:	66 81 fd 06 04       	cmp    bp,0x406
c001db89:	75 32                	jne    c001dbbd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001db8b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001db93:	50                   	push   eax
c001db94:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001db9c:	50                   	push   eax
c001db9d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dba5:	50                   	push   eax
c001dba6:	53                   	push   ebx
c001dba7:	e8 4c fb ff ff       	call   c001d6f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dbac:	59                   	pop    ecx
c001dbad:	5e                   	pop    esi
c001dbae:	0f b6 c0             	movzx  eax,al
c001dbb1:	50                   	push   eax
c001dbb2:	53                   	push   ebx
c001dbb3:	e8 7c ff ff ff       	call   c001db34 <PCI::checkBus(unsigned char)>
c001dbb8:	e9 15 01 00 00       	jmp    c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001dbbd:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001dbc5:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dbcb:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001dbd2:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001dbd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dbdd:	85 c0                	test   eax,eax
c001dbdf:	74 34                	je     c001dc15 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001dbe1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dbe4:	85 d2                	test   edx,edx
c001dbe6:	74 29                	je     c001dc11 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dbe8:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dbee:	31 cf                	xor    edi,ecx
c001dbf0:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dbf6:	75 19                	jne    c001dc11 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dbf8:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dbfe:	75 11                	jne    c001dc11 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dc00:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001dc07:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001dc0b:	0f 84 21 01 00 00    	je     c001dd32 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dc11:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc13:	eb c8                	jmp    c001dbdd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001dc15:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001dc19:	be b8 57 02 c0       	mov    esi,0xc00257b8
c001dc1e:	b9 07 00 00 00       	mov    ecx,0x7
c001dc23:	fc                   	cld    
c001dc24:	31 d2                	xor    edx,edx
c001dc26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc28:	b9 12 00 00 00       	mov    ecx,0x12
c001dc2d:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001dc34:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001dc38:	83 ec 0c             	sub    esp,0xc
c001dc3b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc3d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dc45:	b9 0a 00 00 00       	mov    ecx,0xa
c001dc4a:	f7 f1                	div    ecx
c001dc4c:	83 c0 30             	add    eax,0x30
c001dc4f:	83 c2 30             	add    edx,0x30
c001dc52:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001dc56:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001dc5e:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001dc62:	31 d2                	xor    edx,edx
c001dc64:	f7 f1                	div    ecx
c001dc66:	83 c0 30             	add    eax,0x30
c001dc69:	83 c2 30             	add    edx,0x30
c001dc6c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001dc70:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001dc74:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dc78:	50                   	push   eax
c001dc79:	e8 e9 f4 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001dc7e:	83 c4 10             	add    esp,0x10
c001dc81:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001dc87:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001dc8e:	75 47                	jne    c001dcd7 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	68 64 01 00 00       	push   0x164
c001dc98:	e8 13 1e ff ff       	call   c000fab0 <malloc>
c001dc9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001dca0:	89 c5                	mov    ebp,eax
c001dca2:	e8 37 11 00 00       	call   c001edde <SATABus::SATABus()>
c001dca7:	58                   	pop    eax
c001dca8:	5a                   	pop    edx
c001dca9:	55                   	push   ebp
c001dcaa:	53                   	push   ebx
c001dcab:	e8 ea bc fe ff       	call   c000999a <Device::addChild(Device*)>
c001dcb0:	83 ec 1c             	sub    esp,0x1c
c001dcb3:	b9 09 00 00 00       	mov    ecx,0x9
c001dcb8:	89 e7                	mov    edi,esp
c001dcba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dcbc:	55                   	push   ebp
c001dcbd:	e8 1e bc fe ff       	call   c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001dcc2:	83 c4 30             	add    esp,0x30
c001dcc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dcc8:	6a 00                	push   0x0
c001dcca:	6a 00                	push   0x0
c001dccc:	6a 00                	push   0x0
c001dcce:	55                   	push   ebp
c001dccf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dcd2:	83 c4 10             	add    esp,0x10
c001dcd5:	eb 5b                	jmp    c001dd32 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dcd7:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001dcdd:	75 19                	jne    c001dcf8 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001dcdf:	83 ec 0c             	sub    esp,0xc
c001dce2:	68 70 02 00 00       	push   0x270
c001dce7:	e8 c4 1d ff ff       	call   c000fab0 <malloc>
c001dcec:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcef:	89 c5                	mov    ebp,eax
c001dcf1:	e8 94 02 00 00       	call   c001df8a <IDE::IDE()>
c001dcf6:	eb af                	jmp    c001dca7 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	68 58 01 00 00       	push   0x158
c001dd00:	e8 ab 1d ff ff       	call   c000fab0 <malloc>
c001dd05:	89 c5                	mov    ebp,eax
c001dd07:	58                   	pop    eax
c001dd08:	5a                   	pop    edx
c001dd09:	68 9e 57 02 c0       	push   0xc002579e
c001dd0e:	55                   	push   ebp
c001dd0f:	e8 3a bf fe ff       	call   c0009c4e <DriverlessDevice::DriverlessDevice(char const*)>
c001dd14:	59                   	pop    ecx
c001dd15:	5f                   	pop    edi
c001dd16:	55                   	push   ebp
c001dd17:	53                   	push   ebx
c001dd18:	e8 7d bc fe ff       	call   c000999a <Device::addChild(Device*)>
c001dd1d:	83 ec 1c             	sub    esp,0x1c
c001dd20:	b9 09 00 00 00       	mov    ecx,0x9
c001dd25:	89 e7                	mov    edi,esp
c001dd27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd29:	55                   	push   ebp
c001dd2a:	e8 b1 bb fe ff       	call   c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd2f:	83 c4 30             	add    esp,0x30
c001dd32:	81 c4 8c 00 00 00    	add    esp,0x8c
c001dd38:	5b                   	pop    ebx
c001dd39:	5e                   	pop    esi
c001dd3a:	5f                   	pop    edi
c001dd3b:	5d                   	pop    ebp
c001dd3c:	c3                   	ret    
c001dd3d:	90                   	nop

c001dd3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001dd3e:	55                   	push   ebp
c001dd3f:	57                   	push   edi
c001dd40:	56                   	push   esi
c001dd41:	53                   	push   ebx
c001dd42:	83 ec 68             	sub    esp,0x68
c001dd45:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001dd4c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001dd50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001dd5b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001dd60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dd64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001dd6b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001dd70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dd74:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001dd79:	6a 0c                	push   0xc
c001dd7b:	57                   	push   edi
c001dd7c:	53                   	push   ebx
c001dd7d:	56                   	push   esi
c001dd7e:	55                   	push   ebp
c001dd7f:	e8 c4 f7 ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd84:	83 c4 20             	add    esp,0x20
c001dd87:	57                   	push   edi
c001dd88:	53                   	push   ebx
c001dd89:	56                   	push   esi
c001dd8a:	55                   	push   ebp
c001dd8b:	e8 ae f8 ff ff       	call   c001d63e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001dd90:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001dd95:	57                   	push   edi
c001dd96:	53                   	push   ebx
c001dd97:	56                   	push   esi
c001dd98:	55                   	push   ebp
c001dd99:	e8 36 f9 ff ff       	call   c001d6d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001dd9e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001dda2:	83 c4 14             	add    esp,0x14
c001dda5:	6a 3c                	push   0x3c
c001dda7:	57                   	push   edi
c001dda8:	53                   	push   ebx
c001dda9:	56                   	push   esi
c001ddaa:	55                   	push   ebp
c001ddab:	e8 98 f7 ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddb0:	0f b6 c4             	movzx  eax,ah
c001ddb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddb7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ddbb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ddbf:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001ddc4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001ddca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ddd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddd4:	83 c4 20             	add    esp,0x20
c001ddd7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001dddc:	74 30                	je     c001de0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ddde:	31 c0                	xor    eax,eax
c001dde0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dde4:	7e 28                	jle    c001de0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dde6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ddee:	39 cb                	cmp    ebx,ecx
c001ddf0:	75 19                	jne    c001de0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ddf2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ddfa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ddfe:	75 0b                	jne    c001de0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001de00:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001de07:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001de0b:	40                   	inc    eax
c001de0c:	eb d2                	jmp    c001dde0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001de0e:	31 d2                	xor    edx,edx
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	57                   	push   edi
c001de14:	53                   	push   ebx
c001de15:	56                   	push   esi
c001de16:	52                   	push   edx
c001de17:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001de1b:	55                   	push   ebp
c001de1c:	e8 ff f8 ff ff       	call   c001d720 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de25:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001de29:	42                   	inc    edx
c001de2a:	83 c4 20             	add    esp,0x20
c001de2d:	83 fa 06             	cmp    edx,0x6
c001de30:	75 de                	jne    c001de10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001de32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001de36:	83 ec 0c             	sub    esp,0xc
c001de39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de3d:	c1 e2 08             	shl    edx,0x8
c001de40:	0f b6 c4             	movzx  eax,ah
c001de43:	09 d0                	or     eax,edx
c001de45:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001de4a:	6a 02                	push   0x2
c001de4c:	57                   	push   edi
c001de4d:	53                   	push   ebx
c001de4e:	56                   	push   esi
c001de4f:	55                   	push   ebp
c001de50:	e8 f3 f6 ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de55:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001de5a:	83 c4 20             	add    esp,0x20
c001de5d:	57                   	push   edi
c001de5e:	53                   	push   ebx
c001de5f:	56                   	push   esi
c001de60:	55                   	push   ebp
c001de61:	e8 22 f8 ff ff       	call   c001d688 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001de66:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001de6a:	57                   	push   edi
c001de6b:	53                   	push   ebx
c001de6c:	56                   	push   esi
c001de6d:	55                   	push   ebp
c001de6e:	e8 7f f7 ff ff       	call   c001d5f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001de73:	b9 09 00 00 00       	mov    ecx,0x9
c001de78:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001de7d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001de81:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001de85:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001de89:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001de8d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001de91:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001de95:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001de99:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001de9d:	83 ec 0c             	sub    esp,0xc
c001dea0:	fc                   	cld    
c001dea1:	8d 74 24 58          	lea    esi,[esp+0x58]
c001dea5:	89 e7                	mov    edi,esp
c001dea7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dea9:	55                   	push   ebp
c001deaa:	e8 a9 fc ff ff       	call   c001db58 <PCI::foundDevice(PCIDeviceInfo)>
c001deaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001deb5:	5b                   	pop    ebx
c001deb6:	5e                   	pop    esi
c001deb7:	5f                   	pop    edi
c001deb8:	5d                   	pop    ebp
c001deb9:	c3                   	ret    

c001deba <PCI::checkDevice(unsigned char, unsigned char)>:
c001deba:	55                   	push   ebp
c001debb:	57                   	push   edi
c001debc:	56                   	push   esi
c001debd:	53                   	push   ebx
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001dec6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001decb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001decf:	6a 00                	push   0x0
c001ded1:	56                   	push   esi
c001ded2:	57                   	push   edi
c001ded3:	55                   	push   ebp
c001ded4:	e8 19 f7 ff ff       	call   c001d5f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ded9:	6a 00                	push   0x0
c001dedb:	56                   	push   esi
c001dedc:	57                   	push   edi
c001dedd:	55                   	push   ebp
c001dede:	e8 5b fe ff ff       	call   c001dd3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001dee3:	83 c4 20             	add    esp,0x20
c001dee6:	6a 00                	push   0x0
c001dee8:	56                   	push   esi
c001dee9:	57                   	push   edi
c001deea:	55                   	push   ebp
c001deeb:	e8 26 f7 ff ff       	call   c001d616 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001def0:	83 c4 10             	add    esp,0x10
c001def3:	a8 80                	test   al,0x80
c001def5:	74 2d                	je     c001df24 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001def7:	bb 01 00 00 00       	mov    ebx,0x1
c001defc:	53                   	push   ebx
c001defd:	56                   	push   esi
c001defe:	57                   	push   edi
c001deff:	55                   	push   ebp
c001df00:	e8 ed f6 ff ff       	call   c001d5f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df05:	83 c4 10             	add    esp,0x10
c001df08:	0f b7 c0             	movzx  eax,ax
c001df0b:	3d ff ff 00 00       	cmp    eax,0xffff
c001df10:	74 0c                	je     c001df1e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001df12:	53                   	push   ebx
c001df13:	56                   	push   esi
c001df14:	57                   	push   edi
c001df15:	55                   	push   ebp
c001df16:	e8 23 fe ff ff       	call   c001dd3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001df1b:	83 c4 10             	add    esp,0x10
c001df1e:	43                   	inc    ebx
c001df1f:	83 fb 08             	cmp    ebx,0x8
c001df22:	75 d8                	jne    c001defc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001df24:	83 c4 0c             	add    esp,0xc
c001df27:	5b                   	pop    ebx
c001df28:	5e                   	pop    esi
c001df29:	5f                   	pop    edi
c001df2a:	5d                   	pop    ebp
c001df2b:	c3                   	ret    

c001df2c <PCI::detect()>:
c001df2c:	56                   	push   esi
c001df2d:	53                   	push   ebx
c001df2e:	53                   	push   ebx
c001df2f:	31 db                	xor    ebx,ebx
c001df31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df35:	6a 00                	push   0x0
c001df37:	6a 00                	push   0x0
c001df39:	6a 00                	push   0x0
c001df3b:	56                   	push   esi
c001df3c:	e8 d5 f6 ff ff       	call   c001d616 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001df41:	83 c4 10             	add    esp,0x10
c001df44:	a8 80                	test   al,0x80
c001df46:	75 21                	jne    c001df69 <PCI::detect()+0x3d>
c001df48:	51                   	push   ecx
c001df49:	51                   	push   ecx
c001df4a:	6a 00                	push   0x0
c001df4c:	56                   	push   esi
c001df4d:	e8 e2 fb ff ff       	call   c001db34 <PCI::checkBus(unsigned char)>
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	eb 2a                	jmp    c001df81 <PCI::detect()+0x55>
c001df57:	52                   	push   edx
c001df58:	52                   	push   edx
c001df59:	53                   	push   ebx
c001df5a:	43                   	inc    ebx
c001df5b:	56                   	push   esi
c001df5c:	e8 d3 fb ff ff       	call   c001db34 <PCI::checkBus(unsigned char)>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	83 fb 08             	cmp    ebx,0x8
c001df67:	74 18                	je     c001df81 <PCI::detect()+0x55>
c001df69:	53                   	push   ebx
c001df6a:	6a 00                	push   0x0
c001df6c:	6a 00                	push   0x0
c001df6e:	56                   	push   esi
c001df6f:	e8 7e f6 ff ff       	call   c001d5f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df74:	83 c4 10             	add    esp,0x10
c001df77:	0f b7 c0             	movzx  eax,ax
c001df7a:	3d ff ff 00 00       	cmp    eax,0xffff
c001df7f:	74 d6                	je     c001df57 <PCI::detect()+0x2b>
c001df81:	58                   	pop    eax
c001df82:	5b                   	pop    ebx
c001df83:	5e                   	pop    esi
c001df84:	c3                   	ret    
c001df85:	90                   	nop

c001df86 <IDE::close(int, int, void*)>:
c001df86:	83 c8 ff             	or     eax,0xffffffff
c001df89:	c3                   	ret    

c001df8a <IDE::IDE()>:
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df91:	83 ec 08             	sub    esp,0x8
c001df94:	68 48 58 02 c0       	push   0xc0025848
c001df99:	50                   	push   eax
c001df9a:	e8 55 bd fe ff       	call   c0009cf4 <HardDiskController::HardDiskController(char const*)>
c001df9f:	83 c4 10             	add    esp,0x10
c001dfa2:	ba 74 59 02 c0       	mov    edx,0xc0025974
c001dfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfab:	89 10                	mov    DWORD PTR [eax],edx
c001dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001dfb8:	90                   	nop
c001dfb9:	83 c4 0c             	add    esp,0xc
c001dfbc:	c3                   	ret    
c001dfbd:	90                   	nop

c001dfbe <IDE::prepareInterrupt(unsigned char)>:
c001dfbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dfc3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dfc7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001dfcf:	c3                   	ret    

c001dfd0 <selectDrive(unsigned char, unsigned char)>:
c001dfd0:	c3                   	ret    
c001dfd1:	90                   	nop

c001dfd2 <IDE::getBase(unsigned char)>:
c001dfd2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dfd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfdb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001dfe3:	c3                   	ret    

c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001dfe4:	55                   	push   ebp
c001dfe5:	57                   	push   edi
c001dfe6:	56                   	push   esi
c001dfe7:	53                   	push   ebx
c001dfe8:	83 ec 1c             	sub    esp,0x1c
c001dfeb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dfef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dff3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dff7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dffb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001dffe:	80 f9 03             	cmp    cl,0x3
c001e001:	77 4f                	ja     c001e052 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e007:	0f b6 f2             	movzx  esi,dl
c001e00a:	0f b6 db             	movzx  ebx,bl
c001e00d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e010:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e015:	80 ca 80             	or     dl,0x80
c001e018:	52                   	push   edx
c001e019:	6a 0c                	push   0xc
c001e01b:	56                   	push   esi
c001e01c:	57                   	push   edi
c001e01d:	e8 c2 ff ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e022:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e02b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e02f:	ee                   	out    dx,al
c001e030:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e035:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e039:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e03d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e045:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e049:	83 c4 2c             	add    esp,0x2c
c001e04c:	5b                   	pop    ebx
c001e04d:	5e                   	pop    esi
c001e04e:	5f                   	pop    edi
c001e04f:	5d                   	pop    ebp
c001e050:	eb 92                	jmp    c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e052:	0f b6 cb             	movzx  ecx,bl
c001e055:	83 f9 07             	cmp    ecx,0x7
c001e058:	77 12                	ja     c001e06c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e05a:	0f b6 d2             	movzx  edx,dl
c001e05d:	0f b6 db             	movzx  ebx,bl
c001e060:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e068:	01 da                	add    edx,ebx
c001e06a:	eb 2f                	jmp    c001e09b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e06c:	83 f9 0d             	cmp    ecx,0xd
c001e06f:	77 13                	ja     c001e084 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e071:	0f b6 d2             	movzx  edx,dl
c001e074:	0f b6 db             	movzx  ebx,bl
c001e077:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e07e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e082:	eb 17                	jmp    c001e09b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e084:	83 f9 15             	cmp    ecx,0x15
c001e087:	77 13                	ja     c001e09c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e089:	0f b6 d2             	movzx  edx,dl
c001e08c:	0f b6 db             	movzx  ebx,bl
c001e08f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e097:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e09b:	ee                   	out    dx,al
c001e09c:	83 c4 1c             	add    esp,0x1c
c001e09f:	5b                   	pop    ebx
c001e0a0:	5e                   	pop    esi
c001e0a1:	5f                   	pop    edi
c001e0a2:	5d                   	pop    ebp
c001e0a3:	c3                   	ret    

c001e0a4 <IDE::read(unsigned char, unsigned char)>:
c001e0a4:	57                   	push   edi
c001e0a5:	56                   	push   esi
c001e0a6:	53                   	push   ebx
c001e0a7:	83 ec 10             	sub    esp,0x10
c001e0aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e0ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e0b2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e0b6:	8d 42 f8             	lea    eax,[edx-0x8]
c001e0b9:	3c 03                	cmp    al,0x3
c001e0bb:	77 48                	ja     c001e105 <IDE::read(unsigned char, unsigned char)+0x61>
c001e0bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e0c1:	0f b6 f1             	movzx  esi,cl
c001e0c4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e0c7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e0cc:	0c 80                	or     al,0x80
c001e0ce:	50                   	push   eax
c001e0cf:	6a 0c                	push   0xc
c001e0d1:	56                   	push   esi
c001e0d2:	53                   	push   ebx
c001e0d3:	e8 0c ff ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0dc:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e0e1:	0f b6 d2             	movzx  edx,dl
c001e0e4:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e0e8:	ec                   	in     al,dx
c001e0e9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e0ed:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e0f2:	52                   	push   edx
c001e0f3:	6a 0c                	push   0xc
c001e0f5:	56                   	push   esi
c001e0f6:	53                   	push   ebx
c001e0f7:	e8 e8 fe ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0fc:	83 c4 20             	add    esp,0x20
c001e0ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e103:	eb 4c                	jmp    c001e151 <IDE::read(unsigned char, unsigned char)+0xad>
c001e105:	0f b6 f2             	movzx  esi,dl
c001e108:	83 fe 07             	cmp    esi,0x7
c001e10b:	77 12                	ja     c001e11f <IDE::read(unsigned char, unsigned char)+0x7b>
c001e10d:	0f b6 c9             	movzx  ecx,cl
c001e110:	0f b6 d2             	movzx  edx,dl
c001e113:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e11b:	01 c2                	add    edx,eax
c001e11d:	eb 31                	jmp    c001e150 <IDE::read(unsigned char, unsigned char)+0xac>
c001e11f:	83 fe 0d             	cmp    esi,0xd
c001e122:	77 13                	ja     c001e137 <IDE::read(unsigned char, unsigned char)+0x93>
c001e124:	0f b6 c9             	movzx  ecx,cl
c001e127:	0f b6 d2             	movzx  edx,dl
c001e12a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e131:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e135:	eb 19                	jmp    c001e150 <IDE::read(unsigned char, unsigned char)+0xac>
c001e137:	31 c0                	xor    eax,eax
c001e139:	83 fe 15             	cmp    esi,0x15
c001e13c:	77 13                	ja     c001e151 <IDE::read(unsigned char, unsigned char)+0xad>
c001e13e:	0f b6 c9             	movzx  ecx,cl
c001e141:	0f b6 d2             	movzx  edx,dl
c001e144:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e14c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e150:	ec                   	in     al,dx
c001e151:	83 c4 10             	add    esp,0x10
c001e154:	5b                   	pop    ebx
c001e155:	5e                   	pop    esi
c001e156:	5f                   	pop    edi
c001e157:	c3                   	ret    

c001e158 <IDE::waitInterrupt(unsigned char)>:
c001e158:	55                   	push   ebp
c001e159:	57                   	push   edi
c001e15a:	56                   	push   esi
c001e15b:	53                   	push   ebx
c001e15c:	31 db                	xor    ebx,ebx
c001e15e:	83 ec 0c             	sub    esp,0xc
c001e161:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e165:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e16a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e172:	89 e8                	mov    eax,ebp
c001e174:	84 c0                	test   al,al
c001e176:	75 31                	jne    c001e1a9 <IDE::waitInterrupt(unsigned char)+0x51>
c001e178:	52                   	push   edx
c001e179:	6a 0c                	push   0xc
c001e17b:	56                   	push   esi
c001e17c:	57                   	push   edi
c001e17d:	e8 22 ff ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	a8 01                	test   al,0x1
c001e187:	75 28                	jne    c001e1b1 <IDE::waitInterrupt(unsigned char)+0x59>
c001e189:	f6 c3 04             	test   bl,0x4
c001e18c:	75 13                	jne    c001e1a1 <IDE::waitInterrupt(unsigned char)+0x49>
c001e18e:	83 fb 32             	cmp    ebx,0x32
c001e191:	7e 0e                	jle    c001e1a1 <IDE::waitInterrupt(unsigned char)+0x49>
c001e193:	50                   	push   eax
c001e194:	50                   	push   eax
c001e195:	6a 00                	push   0x0
c001e197:	6a 64                	push   0x64
c001e199:	e8 7a 8d ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001e19e:	83 c4 10             	add    esp,0x10
c001e1a1:	83 fb 3c             	cmp    ebx,0x3c
c001e1a4:	74 0b                	je     c001e1b1 <IDE::waitInterrupt(unsigned char)+0x59>
c001e1a6:	43                   	inc    ebx
c001e1a7:	eb c1                	jmp    c001e16a <IDE::waitInterrupt(unsigned char)+0x12>
c001e1a9:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e1b1:	83 c4 0c             	add    esp,0xc
c001e1b4:	89 e8                	mov    eax,ebp
c001e1b6:	5b                   	pop    ebx
c001e1b7:	5e                   	pop    esi
c001e1b8:	5f                   	pop    edi
c001e1b9:	5d                   	pop    ebp
c001e1ba:	c3                   	ret    

c001e1bb <ideChannel0IRQHandler(regs*, void*)>:
c001e1bb:	83 ec 10             	sub    esp,0x10
c001e1be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1c2:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e1c9:	6a 07                	push   0x7
c001e1cb:	6a 00                	push   0x0
c001e1cd:	50                   	push   eax
c001e1ce:	e8 d1 fe ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e1d3:	83 c4 1c             	add    esp,0x1c
c001e1d6:	c3                   	ret    

c001e1d7 <ideChannel1IRQHandler(regs*, void*)>:
c001e1d7:	83 ec 10             	sub    esp,0x10
c001e1da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1de:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e1e5:	6a 07                	push   0x7
c001e1e7:	6a 01                	push   0x1
c001e1e9:	50                   	push   eax
c001e1ea:	e8 b5 fe ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e1ef:	83 c4 1c             	add    esp,0x1c
c001e1f2:	c3                   	ret    
c001e1f3:	90                   	nop

c001e1f4 <IDE::enableIRQs(unsigned char, bool)>:
c001e1f4:	57                   	push   edi
c001e1f5:	b8 02 00 00 00       	mov    eax,0x2
c001e1fa:	56                   	push   esi
c001e1fb:	53                   	push   ebx
c001e1fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e205:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e209:	74 02                	je     c001e20d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e20b:	31 c0                	xor    eax,eax
c001e20d:	0f b6 db             	movzx  ebx,bl
c001e210:	bf 04 00 00 00       	mov    edi,0x4
c001e215:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e21c:	50                   	push   eax
c001e21d:	6a 0c                	push   0xc
c001e21f:	53                   	push   ebx
c001e220:	56                   	push   esi
c001e221:	e8 be fd ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e226:	83 c4 10             	add    esp,0x10
c001e229:	50                   	push   eax
c001e22a:	6a 0c                	push   0xc
c001e22c:	53                   	push   ebx
c001e22d:	56                   	push   esi
c001e22e:	e8 71 fe ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e233:	83 c4 10             	add    esp,0x10
c001e236:	4f                   	dec    edi
c001e237:	75 f0                	jne    c001e229 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e239:	5b                   	pop    ebx
c001e23a:	5e                   	pop    esi
c001e23b:	5f                   	pop    edi
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <IDE::open(int, int, void*)>:
c001e23e:	55                   	push   ebp
c001e23f:	57                   	push   edi
c001e240:	56                   	push   esi
c001e241:	53                   	push   ebx
c001e242:	83 ec 1c             	sub    esp,0x1c
c001e245:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e249:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e250:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e259:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e262:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e269:	0f 85 80 02 00 00    	jne    c001e4ef <IDE::open(int, int, void*)+0x2b1>
c001e26f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e275:	a8 70                	test   al,0x70
c001e277:	75 44                	jne    c001e2bd <IDE::open(int, int, void*)+0x7f>
c001e279:	ba 20 84 00 00       	mov    edx,0x8420
c001e27e:	0f a3 c2             	bt     edx,eax
c001e281:	73 3a                	jae    c001e2bd <IDE::open(int, int, void*)+0x7f>
c001e283:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e289:	83 ec 0c             	sub    esp,0xc
c001e28c:	83 e0 fc             	and    eax,0xfffffffc
c001e28f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e296:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e29c:	83 e0 fc             	and    eax,0xfffffffc
c001e29f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e2a6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e2ac:	83 e0 fc             	and    eax,0xfffffffc
c001e2af:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e2b6:	68 65 2f 02 c0       	push   0xc0022f65
c001e2bb:	eb 60                	jmp    c001e31d <IDE::open(int, int, void*)+0xdf>
c001e2bd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e2c7:	be 64 00 00 00       	mov    esi,0x64
c001e2cc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e2d6:	57                   	push   edi
c001e2d7:	57                   	push   edi
c001e2d8:	68 60 58 02 c0       	push   0xc0025860
c001e2dd:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e2e1:	57                   	push   edi
c001e2e2:	e8 69 23 fe ff       	call   c0000650 <strcpy>
c001e2e7:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e2ee:	31 d2                	xor    edx,edx
c001e2f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e2f3:	89 c8                	mov    eax,ecx
c001e2f5:	f7 f6                	div    esi
c001e2f7:	be 0a 00 00 00       	mov    esi,0xa
c001e2fc:	31 d2                	xor    edx,edx
c001e2fe:	83 c0 30             	add    eax,0x30
c001e301:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e305:	89 c8                	mov    eax,ecx
c001e307:	f7 f6                	div    esi
c001e309:	89 d1                	mov    ecx,edx
c001e30b:	31 d2                	xor    edx,edx
c001e30d:	f7 f6                	div    esi
c001e30f:	83 c1 30             	add    ecx,0x30
c001e312:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e316:	83 c2 30             	add    edx,0x30
c001e319:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e31d:	e8 45 ee fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e322:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e329:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e32e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	89 fa                	mov    edx,edi
c001e33a:	c1 e1 10             	shl    ecx,0x10
c001e33d:	c1 e0 0b             	shl    eax,0xb
c001e340:	09 c1                	or     ecx,eax
c001e342:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e349:	c1 e0 08             	shl    eax,0x8
c001e34c:	09 c1                	or     ecx,eax
c001e34e:	89 c8                	mov    eax,ecx
c001e350:	0d 08 00 00 80       	or     eax,0x80000008
c001e355:	ef                   	out    dx,eax
c001e356:	be fc 0c 00 00       	mov    esi,0xcfc
c001e35b:	89 f2                	mov    edx,esi
c001e35d:	ed                   	in     eax,dx
c001e35e:	c1 e8 10             	shr    eax,0x10
c001e361:	3d ff ff 00 00       	cmp    eax,0xffff
c001e366:	0f 84 e1 00 00 00    	je     c001e44d <IDE::open(int, int, void*)+0x20f>
c001e36c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e372:	89 fa                	mov    edx,edi
c001e374:	89 c8                	mov    eax,ecx
c001e376:	ef                   	out    dx,eax
c001e377:	b0 fe                	mov    al,0xfe
c001e379:	89 f2                	mov    edx,esi
c001e37b:	ee                   	out    dx,al
c001e37c:	89 c8                	mov    eax,ecx
c001e37e:	89 fa                	mov    edx,edi
c001e380:	ef                   	out    dx,eax
c001e381:	89 f2                	mov    edx,esi
c001e383:	ed                   	in     eax,dx
c001e384:	3c fe                	cmp    al,0xfe
c001e386:	0f 85 83 00 00 00    	jne    c001e40f <IDE::open(int, int, void*)+0x1d1>
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	68 9b 2f 02 c0       	push   0xc0022f9b
c001e394:	e8 ce ed fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e399:	c7 04 24 66 58 02 c0 	mov    DWORD PTR [esp],0xc0025866
c001e3a0:	e8 a9 8b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e3a5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e3af:	c7 04 24 88 32 02 c0 	mov    DWORD PTR [esp],0xc0023288
c001e3b6:	e8 ac ed fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e3bb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e3c2:	89 fa                	mov    edx,edi
c001e3c4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e3cb:	c1 e1 10             	shl    ecx,0x10
c001e3ce:	c1 e0 08             	shl    eax,0x8
c001e3d1:	09 c1                	or     ecx,eax
c001e3d3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e3da:	c1 e0 0b             	shl    eax,0xb
c001e3dd:	09 c1                	or     ecx,eax
c001e3df:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e3e5:	89 c8                	mov    eax,ecx
c001e3e7:	ef                   	out    dx,eax
c001e3e8:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001e3ee:	89 f2                	mov    edx,esi
c001e3f0:	89 e8                	mov    eax,ebp
c001e3f2:	ee                   	out    dx,al
c001e3f3:	89 c8                	mov    eax,ecx
c001e3f5:	89 fa                	mov    edx,edi
c001e3f7:	ef                   	out    dx,eax
c001e3f8:	89 f2                	mov    edx,esi
c001e3fa:	ed                   	in     eax,dx
c001e3fb:	0f b6 c0             	movzx  eax,al
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	39 e8                	cmp    eax,ebp
c001e403:	74 58                	je     c001e45d <IDE::open(int, int, void*)+0x21f>
c001e405:	83 ec 0c             	sub    esp,0xc
c001e408:	68 7b 58 02 c0       	push   0xc002587b
c001e40d:	eb 46                	jmp    c001e455 <IDE::open(int, int, void*)+0x217>
c001e40f:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e418:	75 29                	jne    c001e443 <IDE::open(int, int, void*)+0x205>
c001e41a:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e421:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e426:	74 05                	je     c001e42d <IDE::open(int, int, void*)+0x1ef>
c001e428:	83 c0 80             	add    eax,0xffffff80
c001e42b:	75 16                	jne    c001e443 <IDE::open(int, int, void*)+0x205>
c001e42d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e434:	83 ec 0c             	sub    esp,0xc
c001e437:	68 9c 41 02 c0       	push   0xc002419c
c001e43c:	e8 26 ed fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e441:	eb 17                	jmp    c001e45a <IDE::open(int, int, void*)+0x21c>
c001e443:	83 ec 0c             	sub    esp,0xc
c001e446:	68 83 58 02 c0       	push   0xc0025883
c001e44b:	eb 08                	jmp    c001e455 <IDE::open(int, int, void*)+0x217>
c001e44d:	83 ec 0c             	sub    esp,0xc
c001e450:	68 b4 58 02 c0       	push   0xc00258b4
c001e455:	e8 9c 19 ff ff       	call   c000fdf6 <KePanic(char const*)>
c001e45a:	83 c4 10             	add    esp,0x10
c001e45d:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e464:	0f 84 bf 00 00 00    	je     c001e529 <IDE::open(int, int, void*)+0x2eb>
c001e46a:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e470:	83 ec 0c             	sub    esp,0xc
c001e473:	83 e0 fc             	and    eax,0xfffffffc
c001e476:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e47d:	83 c0 08             	add    eax,0x8
c001e480:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e487:	68 de 58 02 c0       	push   0xc00258de
c001e48c:	e8 bd 8a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e491:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e498:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e49f:	50                   	push   eax
c001e4a0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e4a7:	50                   	push   eax
c001e4a8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e4af:	50                   	push   eax
c001e4b0:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e4b6:	e8 8d f0 ff ff       	call   c001d548 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4bb:	83 c4 18             	add    esp,0x18
c001e4be:	83 c8 07             	or     eax,0x7
c001e4c1:	0f b7 c0             	movzx  eax,ax
c001e4c4:	50                   	push   eax
c001e4c5:	6a 04                	push   0x4
c001e4c7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e4ce:	50                   	push   eax
c001e4cf:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e4d6:	50                   	push   eax
c001e4d7:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e4de:	50                   	push   eax
c001e4df:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e4e5:	e8 9a f2 ff ff       	call   c001d784 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e4ea:	83 c4 20             	add    esp,0x20
c001e4ed:	eb 3a                	jmp    c001e529 <IDE::open(int, int, void*)+0x2eb>
c001e4ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e4f6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e4fc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e503:	05 06 02 00 00       	add    eax,0x206
c001e508:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e50f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e516:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e51d:	05 06 02 00 00       	add    eax,0x206
c001e522:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	68 03 38 02 c0       	push   0xc0023803
c001e531:	e8 31 ec fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e536:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	89 c2                	mov    edx,eax
c001e541:	83 e2 0f             	and    edx,0xf
c001e544:	83 fa 08             	cmp    edx,0x8
c001e547:	75 0a                	jne    c001e553 <IDE::open(int, int, void*)+0x315>
c001e549:	83 e8 02             	sub    eax,0x2
c001e54c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e553:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e559:	89 c2                	mov    edx,eax
c001e55b:	83 e2 0f             	and    edx,0xf
c001e55e:	83 fa 08             	cmp    edx,0x8
c001e561:	75 0a                	jne    c001e56d <IDE::open(int, int, void*)+0x32f>
c001e563:	83 e8 02             	sub    eax,0x2
c001e566:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e56d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e574:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e57b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e57e:	89 d0                	mov    eax,edx
c001e580:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e584:	8d 7a 01             	lea    edi,[edx+0x1]
c001e587:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e58b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e58f:	83 e1 3f             	and    ecx,0x3f
c001e592:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e596:	89 f9                	mov    ecx,edi
c001e598:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e59f:	8d 78 02             	lea    edi,[eax+0x2]
c001e5a2:	0f b6 c9             	movzx  ecx,cl
c001e5a5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e5a8:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e5ac:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e5b0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e5b4:	83 e2 3f             	and    edx,0x3f
c001e5b7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e5bb:	89 f9                	mov    ecx,edi
c001e5bd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e5c3:	8d 78 03             	lea    edi,[eax+0x3]
c001e5c6:	0f b6 d1             	movzx  edx,cl
c001e5c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e5cc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e5d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e5d4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e5d8:	83 e1 3f             	and    ecx,0x3f
c001e5db:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e5df:	89 fa                	mov    edx,edi
c001e5e1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e5e7:	8d 78 04             	lea    edi,[eax+0x4]
c001e5ea:	0f b6 ca             	movzx  ecx,dl
c001e5ed:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e5f0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e5f4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e5f8:	89 fa                	mov    edx,edi
c001e5fa:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e600:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e604:	83 e2 3f             	and    edx,0x3f
c001e607:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e60b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e612:	66 85 f6             	test   si,si
c001e615:	74 24                	je     c001e63b <IDE::open(int, int, void*)+0x3fd>
c001e617:	89 f9                	mov    ecx,edi
c001e619:	83 c0 05             	add    eax,0x5
c001e61c:	0f b6 d1             	movzx  edx,cl
c001e61f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e622:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e626:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e62a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e630:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e634:	83 e0 3f             	and    eax,0x3f
c001e637:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	68 f6 58 02 c0       	push   0xc00258f6
c001e643:	e8 1f eb fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e648:	58                   	pop    eax
c001e649:	5a                   	pop    edx
c001e64a:	6a 00                	push   0x0
c001e64c:	53                   	push   ebx
c001e64d:	e8 6c f9 ff ff       	call   c001dfbe <IDE::prepareInterrupt(unsigned char)>
c001e652:	59                   	pop    ecx
c001e653:	5e                   	pop    esi
c001e654:	6a 01                	push   0x1
c001e656:	53                   	push   ebx
c001e657:	e8 62 f9 ff ff       	call   c001dfbe <IDE::prepareInterrupt(unsigned char)>
c001e65c:	c7 04 24 45 51 02 c0 	mov    DWORD PTR [esp],0xc0025145
c001e663:	e8 ff ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e668:	83 c4 0c             	add    esp,0xc
c001e66b:	6a 00                	push   0x0
c001e66d:	6a 00                	push   0x0
c001e66f:	53                   	push   ebx
c001e670:	e8 7f fb ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001e675:	83 c4 0c             	add    esp,0xc
c001e678:	6a 00                	push   0x0
c001e67a:	6a 01                	push   0x1
c001e67c:	53                   	push   ebx
c001e67d:	e8 72 fb ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001e682:	c7 04 24 f8 58 02 c0 	mov    DWORD PTR [esp],0xc00258f8
c001e689:	e8 d9 ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e68e:	83 c4 10             	add    esp,0x10
c001e691:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e698:	74 3c                	je     c001e6d6 <IDE::open(int, int, void*)+0x498>
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	53                   	push   ebx
c001e69e:	6a 01                	push   0x1
c001e6a0:	68 bb e1 01 c0       	push   0xc001e1bb
c001e6a5:	6a 0e                	push   0xe
c001e6a7:	53                   	push   ebx
c001e6a8:	e8 99 b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e6ad:	83 c4 14             	add    esp,0x14
c001e6b0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e6b6:	53                   	push   ebx
c001e6b7:	6a 01                	push   0x1
c001e6b9:	68 d7 e1 01 c0       	push   0xc001e1d7
c001e6be:	6a 0f                	push   0xf
c001e6c0:	53                   	push   ebx
c001e6c1:	e8 80 b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e6c6:	83 c4 14             	add    esp,0x14
c001e6c9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e6cf:	68 8e 34 02 c0       	push   0xc002348e
c001e6d4:	eb 40                	jmp    c001e716 <IDE::open(int, int, void*)+0x4d8>
c001e6d6:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	53                   	push   ebx
c001e6e4:	6a 00                	push   0x0
c001e6e6:	68 bb e1 01 c0       	push   0xc001e1bb
c001e6eb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e6f1:	53                   	push   ebx
c001e6f2:	e8 4f b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e6f7:	83 c4 14             	add    esp,0x14
c001e6fa:	53                   	push   ebx
c001e6fb:	6a 00                	push   0x0
c001e6fd:	68 d7 e1 01 c0       	push   0xc001e1d7
c001e702:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e708:	53                   	push   ebx
c001e709:	e8 38 b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e70e:	83 c4 14             	add    esp,0x14
c001e711:	68 8b 41 02 c0       	push   0xc002418b
c001e716:	e8 4c ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e71b:	83 c4 10             	add    esp,0x10
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	68 fa 58 02 c0       	push   0xc00258fa
c001e726:	e8 3c ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e72b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e72d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e730:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e733:	c7 04 24 a5 48 02 c0 	mov    DWORD PTR [esp],0xc00248a5
c001e73a:	e8 28 ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e73f:	83 c4 0c             	add    esp,0xc
c001e742:	6a 07                	push   0x7
c001e744:	6a 00                	push   0x0
c001e746:	53                   	push   ebx
c001e747:	e8 58 f9 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e74c:	83 c4 0c             	add    esp,0xc
c001e74f:	6a 07                	push   0x7
c001e751:	6a 01                	push   0x1
c001e753:	53                   	push   ebx
c001e754:	e8 4b f9 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e759:	c7 04 24 4c 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f4c
c001e760:	e8 02 ea fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e765:	83 c4 0c             	add    esp,0xc
c001e768:	6a 01                	push   0x1
c001e76a:	6a 00                	push   0x0
c001e76c:	53                   	push   ebx
c001e76d:	e8 82 fa ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001e772:	83 c4 0c             	add    esp,0xc
c001e775:	6a 01                	push   0x1
c001e777:	6a 01                	push   0x1
c001e779:	53                   	push   ebx
c001e77a:	e8 75 fa ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001e77f:	c7 04 24 fd 58 02 c0 	mov    DWORD PTR [esp],0xc00258fd
c001e786:	e8 dc e9 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e78b:	83 c4 2c             	add    esp,0x2c
c001e78e:	31 c0                	xor    eax,eax
c001e790:	5b                   	pop    ebx
c001e791:	5e                   	pop    esi
c001e792:	5f                   	pop    edi
c001e793:	5d                   	pop    ebp
c001e794:	c3                   	ret    
c001e795:	90                   	nop

c001e796 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e796:	55                   	push   ebp
c001e797:	57                   	push   edi
c001e798:	56                   	push   esi
c001e799:	53                   	push   ebx
c001e79a:	83 ec 1c             	sub    esp,0x1c
c001e79d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e7a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e7a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7a9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e7ad:	8d 42 f8             	lea    eax,[edx-0x8]
c001e7b0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e7b4:	3c 03                	cmp    al,0x3
c001e7b6:	77 5a                	ja     c001e812 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e7b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7bc:	0f b6 db             	movzx  ebx,bl
c001e7bf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7c3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e7c6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e7cb:	0c 80                	or     al,0x80
c001e7cd:	50                   	push   eax
c001e7ce:	6a 0c                	push   0xc
c001e7d0:	53                   	push   ebx
c001e7d1:	56                   	push   esi
c001e7d2:	e8 0d f8 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7db:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e7e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e7e4:	0f b6 d2             	movzx  edx,dl
c001e7e7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e7eb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e7ed:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e7f2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e7f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e7fa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e802:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e806:	83 c4 2c             	add    esp,0x2c
c001e809:	5b                   	pop    ebx
c001e80a:	5e                   	pop    esi
c001e80b:	5f                   	pop    edi
c001e80c:	5d                   	pop    ebp
c001e80d:	e9 d2 f7 ff ff       	jmp    c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e812:	0f b6 c2             	movzx  eax,dl
c001e815:	83 f8 07             	cmp    eax,0x7
c001e818:	77 12                	ja     c001e82c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e81a:	0f b6 db             	movzx  ebx,bl
c001e81d:	0f b6 c2             	movzx  eax,dl
c001e820:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001e828:	01 c2                	add    edx,eax
c001e82a:	eb 2f                	jmp    c001e85b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e82c:	83 f8 0d             	cmp    eax,0xd
c001e82f:	77 13                	ja     c001e844 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001e831:	0f b6 db             	movzx  ebx,bl
c001e834:	0f b6 d2             	movzx  edx,dl
c001e837:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001e83e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e842:	eb 17                	jmp    c001e85b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e844:	83 f8 15             	cmp    eax,0x15
c001e847:	77 14                	ja     c001e85d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001e849:	0f b6 db             	movzx  ebx,bl
c001e84c:	0f b6 d2             	movzx  edx,dl
c001e84f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001e857:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e85b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e85d:	83 c4 1c             	add    esp,0x1c
c001e860:	5b                   	pop    ebx
c001e861:	5e                   	pop    esi
c001e862:	5f                   	pop    edi
c001e863:	5d                   	pop    ebp
c001e864:	c3                   	ret    
c001e865:	90                   	nop

c001e866 <IDE::detect()>:
c001e866:	55                   	push   ebp
c001e867:	57                   	push   edi
c001e868:	56                   	push   esi
c001e869:	53                   	push   ebx
c001e86a:	81 ec 28 02 00 00    	sub    esp,0x228
c001e870:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001e877:	68 ff 58 02 c0       	push   0xc00258ff
c001e87c:	e8 e6 e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e881:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001e887:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001e88b:	83 c4 10             	add    esp,0x10
c001e88e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001e893:	0f 85 26 04 00 00    	jne    c001ecbf <IDE::detect()+0x459>
c001e899:	83 ec 0c             	sub    esp,0xc
c001e89c:	31 f6                	xor    esi,esi
c001e89e:	68 02 59 02 c0       	push   0xc0025902
c001e8a3:	31 ff                	xor    edi,edi
c001e8a5:	e8 bd e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e8aa:	83 c4 10             	add    esp,0x10
c001e8ad:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e8b4:	83 ec 0c             	sub    esp,0xc
c001e8b7:	68 05 59 02 c0       	push   0xc0025905
c001e8bc:	e8 a6 e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e8c1:	83 c4 10             	add    esp,0x10
c001e8c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	31 ed                	xor    ebp,ebp
c001e8d0:	68 08 59 02 c0       	push   0xc0025908
c001e8d5:	e8 8d e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e8da:	89 f8                	mov    eax,edi
c001e8dc:	c1 e0 06             	shl    eax,0x6
c001e8df:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e8e7:	c7 04 24 0b 59 02 c0 	mov    DWORD PTR [esp],0xc002590b
c001e8ee:	e8 74 e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e8f3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e8f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ff:	c1 e0 04             	shl    eax,0x4
c001e902:	83 c8 a0             	or     eax,0xffffffa0
c001e905:	0f b6 c0             	movzx  eax,al
c001e908:	50                   	push   eax
c001e909:	6a 06                	push   0x6
c001e90b:	56                   	push   esi
c001e90c:	53                   	push   ebx
c001e90d:	e8 d2 f6 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e912:	83 c4 1c             	add    esp,0x1c
c001e915:	6a 0c                	push   0xc
c001e917:	56                   	push   esi
c001e918:	53                   	push   ebx
c001e919:	e8 86 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e91e:	83 c4 0c             	add    esp,0xc
c001e921:	6a 0c                	push   0xc
c001e923:	56                   	push   esi
c001e924:	53                   	push   ebx
c001e925:	e8 7a f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e92a:	83 c4 0c             	add    esp,0xc
c001e92d:	6a 0c                	push   0xc
c001e92f:	56                   	push   esi
c001e930:	53                   	push   ebx
c001e931:	e8 6e f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e936:	83 c4 0c             	add    esp,0xc
c001e939:	6a 0c                	push   0xc
c001e93b:	56                   	push   esi
c001e93c:	53                   	push   ebx
c001e93d:	e8 62 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e942:	c7 04 24 0e 59 02 c0 	mov    DWORD PTR [esp],0xc002590e
c001e949:	e8 19 e8 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e94e:	68 ec 00 00 00       	push   0xec
c001e953:	6a 07                	push   0x7
c001e955:	56                   	push   esi
c001e956:	53                   	push   ebx
c001e957:	e8 88 f6 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e95c:	83 c4 1c             	add    esp,0x1c
c001e95f:	6a 0c                	push   0xc
c001e961:	56                   	push   esi
c001e962:	53                   	push   ebx
c001e963:	e8 3c f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	6a 0c                	push   0xc
c001e96d:	56                   	push   esi
c001e96e:	53                   	push   ebx
c001e96f:	e8 30 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e974:	83 c4 0c             	add    esp,0xc
c001e977:	6a 0c                	push   0xc
c001e979:	56                   	push   esi
c001e97a:	53                   	push   ebx
c001e97b:	e8 24 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	6a 0c                	push   0xc
c001e985:	56                   	push   esi
c001e986:	53                   	push   ebx
c001e987:	e8 18 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e98c:	c7 04 24 11 59 02 c0 	mov    DWORD PTR [esp],0xc0025911
c001e993:	e8 cf e7 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e998:	83 c4 0c             	add    esp,0xc
c001e99b:	6a 0c                	push   0xc
c001e99d:	56                   	push   esi
c001e99e:	53                   	push   ebx
c001e99f:	e8 00 f7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e9a4:	83 c4 10             	add    esp,0x10
c001e9a7:	84 c0                	test   al,al
c001e9a9:	75 1f                	jne    c001e9ca <IDE::detect()+0x164>
c001e9ab:	83 ec 0c             	sub    esp,0xc
c001e9ae:	68 14 59 02 c0       	push   0xc0025914
c001e9b3:	e8 af e7 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001e9b8:	e9 e0 02 00 00       	jmp    c001ec9d <IDE::detect()+0x437>
c001e9bd:	a8 80                	test   al,0x80
c001e9bf:	74 21                	je     c001e9e2 <IDE::detect()+0x17c>
c001e9c1:	45                   	inc    ebp
c001e9c2:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001e9c8:	7f 1e                	jg     c001e9e8 <IDE::detect()+0x182>
c001e9ca:	50                   	push   eax
c001e9cb:	6a 0c                	push   0xc
c001e9cd:	56                   	push   esi
c001e9ce:	53                   	push   ebx
c001e9cf:	e8 d0 f6 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	a8 01                	test   al,0x1
c001e9d9:	74 e2                	je     c001e9bd <IDE::detect()+0x157>
c001e9db:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001e9e0:	eb 23                	jmp    c001ea05 <IDE::detect()+0x19f>
c001e9e2:	a8 08                	test   al,0x8
c001e9e4:	74 db                	je     c001e9c1 <IDE::detect()+0x15b>
c001e9e6:	eb 18                	jmp    c001ea00 <IDE::detect()+0x19a>
c001e9e8:	50                   	push   eax
c001e9e9:	50                   	push   eax
c001e9ea:	6a 00                	push   0x0
c001e9ec:	6a 32                	push   0x32
c001e9ee:	e8 25 85 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001e9f3:	83 c4 10             	add    esp,0x10
c001e9f6:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001e9fc:	75 cc                	jne    c001e9ca <IDE::detect()+0x164>
c001e9fe:	eb db                	jmp    c001e9db <IDE::detect()+0x175>
c001ea00:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 17 59 02 c0       	push   0xc0025917
c001ea0d:	e8 55 e7 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ea1a:	74 56                	je     c001ea72 <IDE::detect()+0x20c>
c001ea1c:	51                   	push   ecx
c001ea1d:	6a 04                	push   0x4
c001ea1f:	56                   	push   esi
c001ea20:	53                   	push   ebx
c001ea21:	e8 7e f6 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001ea26:	83 c4 0c             	add    esp,0xc
c001ea29:	6a 05                	push   0x5
c001ea2b:	56                   	push   esi
c001ea2c:	53                   	push   ebx
c001ea2d:	89 c5                	mov    ebp,eax
c001ea2f:	e8 70 f6 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001ea34:	89 e9                	mov    ecx,ebp
c001ea36:	83 c4 10             	add    esp,0x10
c001ea39:	0f b6 e9             	movzx  ebp,cl
c001ea3c:	83 fd 14             	cmp    ebp,0x14
c001ea3f:	75 04                	jne    c001ea45 <IDE::detect()+0x1df>
c001ea41:	3c eb                	cmp    al,0xeb
c001ea43:	74 11                	je     c001ea56 <IDE::detect()+0x1f0>
c001ea45:	83 fd 69             	cmp    ebp,0x69
c001ea48:	0f 85 52 02 00 00    	jne    c001eca0 <IDE::detect()+0x43a>
c001ea4e:	3c 96                	cmp    al,0x96
c001ea50:	0f 85 4a 02 00 00    	jne    c001eca0 <IDE::detect()+0x43a>
c001ea56:	68 a1 00 00 00       	push   0xa1
c001ea5b:	6a 07                	push   0x7
c001ea5d:	56                   	push   esi
c001ea5e:	53                   	push   ebx
c001ea5f:	e8 80 f5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea64:	58                   	pop    eax
c001ea65:	5a                   	pop    edx
c001ea66:	6a 00                	push   0x0
c001ea68:	6a 0a                	push   0xa
c001ea6a:	e8 a9 84 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	83 ec 0c             	sub    esp,0xc
c001ea75:	89 fd                	mov    ebp,edi
c001ea77:	68 1a 59 02 c0       	push   0xc002591a
c001ea7c:	e8 e6 e6 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ea81:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ea85:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001ea8c:	c1 e5 06             	shl    ebp,0x6
c001ea8f:	52                   	push   edx
c001ea90:	01 dd                	add    ebp,ebx
c001ea92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ea96:	6a 00                	push   0x0
c001ea98:	56                   	push   esi
c001ea99:	53                   	push   ebx
c001ea9a:	e8 f7 fc ff ff       	call   c001e796 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ea9f:	83 c4 14             	add    esp,0x14
c001eaa2:	68 1e 59 02 c0       	push   0xc002591e
c001eaa7:	e8 bb e6 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001eaac:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001eab1:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001eab8:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001eabf:	89 f0                	mov    eax,esi
c001eac1:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001eac7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001eacb:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001ead1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ead5:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001eadc:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001eae4:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001eaeb:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001eaf3:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001eaf9:	c7 04 24 22 59 02 c0 	mov    DWORD PTR [esp],0xc0025922
c001eb00:	e8 62 e6 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001eb0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb13:	74 09                	je     c001eb1e <IDE::detect()+0x2b8>
c001eb15:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001eb1c:	eb 07                	jmp    c001eb25 <IDE::detect()+0x2bf>
c001eb1e:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001eb25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eb29:	89 f8                	mov    eax,edi
c001eb2b:	83 ec 0c             	sub    esp,0xc
c001eb2e:	c1 e0 06             	shl    eax,0x6
c001eb31:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001eb34:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001eb3a:	68 26 59 02 c0       	push   0xc0025926
c001eb3f:	e8 23 e6 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001eb44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb48:	89 e8                	mov    eax,ebp
c001eb4a:	83 c4 10             	add    esp,0x10
c001eb4d:	8d 6a 28             	lea    ebp,[edx+0x28]
c001eb50:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001eb53:	83 c2 02             	add    edx,0x2
c001eb56:	83 c0 02             	add    eax,0x2
c001eb59:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001eb5f:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001eb62:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001eb68:	39 d5                	cmp    ebp,edx
c001eb6a:	75 e4                	jne    c001eb50 <IDE::detect()+0x2ea>
c001eb6c:	89 f8                	mov    eax,edi
c001eb6e:	c1 e0 06             	shl    eax,0x6
c001eb71:	01 d8                	add    eax,ebx
c001eb73:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eb7a:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001eb81:	c1 ea 09             	shr    edx,0x9
c001eb84:	83 e2 01             	and    edx,0x1
c001eb87:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001eb8e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001eb94:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001eb98:	74 0c                	je     c001eba6 <IDE::detect()+0x340>
c001eb9a:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001eba3:	0f 95 c2             	setne  dl
c001eba6:	89 fd                	mov    ebp,edi
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	c1 e5 06             	shl    ebp,0x6
c001ebae:	01 dd                	add    ebp,ebx
c001ebb0:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001ebb6:	68 2a 59 02 c0       	push   0xc002592a
c001ebbb:	e8 a7 e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ebc8:	75 66                	jne    c001ec30 <IDE::detect()+0x3ca>
c001ebca:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001ebd1:	0f 84 b8 00 00 00    	je     c001ec8f <IDE::detect()+0x429>
c001ebd7:	83 ec 0c             	sub    esp,0xc
c001ebda:	68 2e 59 02 c0       	push   0xc002592e
c001ebdf:	e8 83 e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ebe4:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001ebeb:	e8 c0 0e ff ff       	call   c000fab0 <malloc>
c001ebf0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebf3:	89 c5                	mov    ebp,eax
c001ebf5:	e8 44 05 00 00       	call   c001f13e <ATA::ATA()>
c001ebfa:	c7 04 24 32 59 02 c0 	mov    DWORD PTR [esp],0xc0025932
c001ec01:	e8 61 e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec06:	59                   	pop    ecx
c001ec07:	58                   	pop    eax
c001ec08:	55                   	push   ebp
c001ec09:	53                   	push   ebx
c001ec0a:	e8 8b ad fe ff       	call   c000999a <Device::addChild(Device*)>
c001ec0f:	c7 04 24 37 59 02 c0 	mov    DWORD PTR [esp],0xc0025937
c001ec16:	e8 4c e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ec1e:	53                   	push   ebx
c001ec1f:	57                   	push   edi
c001ec20:	6a 00                	push   0x0
c001ec22:	55                   	push   ebp
c001ec23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ec26:	83 c4 14             	add    esp,0x14
c001ec29:	68 3c 59 02 c0       	push   0xc002593c
c001ec2e:	eb 57                	jmp    c001ec87 <IDE::detect()+0x421>
c001ec30:	83 ec 0c             	sub    esp,0xc
c001ec33:	68 41 59 02 c0       	push   0xc0025941
c001ec38:	e8 2a e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec3d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ec44:	e8 67 0e ff ff       	call   c000fab0 <malloc>
c001ec49:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec4c:	89 c5                	mov    ebp,eax
c001ec4e:	e8 b1 0c 00 00       	call   c001f904 <ATAPI::ATAPI()>
c001ec53:	c7 04 24 47 59 02 c0 	mov    DWORD PTR [esp],0xc0025947
c001ec5a:	e8 08 e5 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec5f:	58                   	pop    eax
c001ec60:	5a                   	pop    edx
c001ec61:	55                   	push   ebp
c001ec62:	53                   	push   ebx
c001ec63:	e8 32 ad fe ff       	call   c000999a <Device::addChild(Device*)>
c001ec68:	c7 04 24 4e 59 02 c0 	mov    DWORD PTR [esp],0xc002594e
c001ec6f:	e8 f3 e4 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ec77:	53                   	push   ebx
c001ec78:	57                   	push   edi
c001ec79:	6a 00                	push   0x0
c001ec7b:	55                   	push   ebp
c001ec7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ec7f:	83 c4 14             	add    esp,0x14
c001ec82:	68 55 59 02 c0       	push   0xc0025955
c001ec87:	e8 db e4 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec8c:	83 c4 10             	add    esp,0x10
c001ec8f:	83 ec 0c             	sub    esp,0xc
c001ec92:	47                   	inc    edi
c001ec93:	68 5c 59 02 c0       	push   0xc002595c
c001ec98:	e8 ca e4 fe ff       	call   c000d167 <KeSetBootMessage(char const*)>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001eca4:	74 0c                	je     c001ecb2 <IDE::detect()+0x44c>
c001eca6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001ecad:	e9 19 fc ff ff       	jmp    c001e8cb <IDE::detect()+0x65>
c001ecb2:	4e                   	dec    esi
c001ecb3:	74 0a                	je     c001ecbf <IDE::detect()+0x459>
c001ecb5:	be 01 00 00 00       	mov    esi,0x1
c001ecba:	e9 f5 fb ff ff       	jmp    c001e8b4 <IDE::detect()+0x4e>
c001ecbf:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecc5:	5b                   	pop    ebx
c001ecc6:	5e                   	pop    esi
c001ecc7:	5f                   	pop    edi
c001ecc8:	5d                   	pop    ebp
c001ecc9:	c3                   	ret    

c001ecca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ecca:	55                   	push   ebp
c001eccb:	57                   	push   edi
c001eccc:	56                   	push   esi
c001eccd:	53                   	push   ebx
c001ecce:	83 ec 1c             	sub    esp,0x1c
c001ecd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ecd5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ecd9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ecdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ece1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ece5:	88 c3                	mov    bl,al
c001ece7:	25 ff 00 00 00       	and    eax,0xff
c001ecec:	0f 84 88 00 00 00    	je     c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ecf2:	83 ec 0c             	sub    esp,0xc
c001ecf5:	89 c7                	mov    edi,eax
c001ecf7:	68 60 59 02 c0       	push   0xc0025960
c001ecfc:	e8 4d 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	83 ff 01             	cmp    edi,0x1
c001ed07:	74 6b                	je     c001ed74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ed09:	83 ff 02             	cmp    edi,0x2
c001ed0c:	75 58                	jne    c001ed66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ed0e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ed13:	50                   	push   eax
c001ed14:	6a 01                	push   0x1
c001ed16:	01 ff                	add    edi,edi
c001ed18:	09 fe                	or     esi,edi
c001ed1a:	89 f0                	mov    eax,esi
c001ed1c:	0f b6 f0             	movzx  esi,al
c001ed1f:	c1 e6 06             	shl    esi,0x6
c001ed22:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ed2a:	50                   	push   eax
c001ed2b:	55                   	push   ebp
c001ed2c:	e8 73 f3 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001ed31:	83 c4 10             	add    esp,0x10
c001ed34:	a8 01                	test   al,0x1
c001ed36:	74 02                	je     c001ed3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ed38:	b3 07                	mov    bl,0x7
c001ed3a:	a8 02                	test   al,0x2
c001ed3c:	74 02                	je     c001ed40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ed3e:	b3 03                	mov    bl,0x3
c001ed40:	a8 04                	test   al,0x4
c001ed42:	74 02                	je     c001ed46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ed44:	b3 14                	mov    bl,0x14
c001ed46:	a8 08                	test   al,0x8
c001ed48:	74 02                	je     c001ed4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ed4a:	b3 03                	mov    bl,0x3
c001ed4c:	a8 10                	test   al,0x10
c001ed4e:	74 02                	je     c001ed52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ed50:	b3 15                	mov    bl,0x15
c001ed52:	a8 20                	test   al,0x20
c001ed54:	74 02                	je     c001ed58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ed56:	b3 03                	mov    bl,0x3
c001ed58:	a8 40                	test   al,0x40
c001ed5a:	74 02                	je     c001ed5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ed5c:	b3 16                	mov    bl,0x16
c001ed5e:	a8 80                	test   al,0x80
c001ed60:	74 18                	je     c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed62:	b3 0d                	mov    bl,0xd
c001ed64:	eb 14                	jmp    c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed66:	83 ff 03             	cmp    edi,0x3
c001ed69:	74 0d                	je     c001ed78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001ed6b:	83 ff 04             	cmp    edi,0x4
c001ed6e:	75 0a                	jne    c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed70:	b3 08                	mov    bl,0x8
c001ed72:	eb 06                	jmp    c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed74:	b3 13                	mov    bl,0x13
c001ed76:	eb 02                	jmp    c001ed7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed78:	b3 17                	mov    bl,0x17
c001ed7a:	83 c4 1c             	add    esp,0x1c
c001ed7d:	88 d8                	mov    al,bl
c001ed7f:	5b                   	pop    ebx
c001ed80:	5e                   	pop    esi
c001ed81:	5f                   	pop    edi
c001ed82:	5d                   	pop    ebp
c001ed83:	c3                   	ret    

c001ed84 <IDE::polling(unsigned char, unsigned int)>:
c001ed84:	57                   	push   edi
c001ed85:	56                   	push   esi
c001ed86:	53                   	push   ebx
c001ed87:	bb 04 00 00 00       	mov    ebx,0x4
c001ed8c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ed90:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ed95:	52                   	push   edx
c001ed96:	6a 0c                	push   0xc
c001ed98:	56                   	push   esi
c001ed99:	57                   	push   edi
c001ed9a:	e8 05 f3 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	4b                   	dec    ebx
c001eda3:	75 f0                	jne    c001ed95 <IDE::polling(unsigned char, unsigned int)+0x11>
c001eda5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001edaa:	50                   	push   eax
c001edab:	6a 0c                	push   0xc
c001edad:	56                   	push   esi
c001edae:	57                   	push   edi
c001edaf:	e8 f0 f2 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	a8 01                	test   al,0x1
c001edb9:	75 17                	jne    c001edd2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001edbb:	a8 20                	test   al,0x20
c001edbd:	75 0f                	jne    c001edce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001edbf:	4b                   	dec    ebx
c001edc0:	74 10                	je     c001edd2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001edc2:	a8 80                	test   al,0x80
c001edc4:	75 e4                	jne    c001edaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001edc6:	a8 08                	test   al,0x8
c001edc8:	74 e0                	je     c001edaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001edca:	31 c0                	xor    eax,eax
c001edcc:	eb 06                	jmp    c001edd4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001edce:	b0 01                	mov    al,0x1
c001edd0:	eb 02                	jmp    c001edd4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001edd2:	b0 02                	mov    al,0x2
c001edd4:	5b                   	pop    ebx
c001edd5:	5e                   	pop    esi
c001edd6:	5f                   	pop    edi
c001edd7:	c3                   	ret    

c001edd8 <SATABus::close(int, int, void*)>:
c001edd8:	31 c0                	xor    eax,eax
c001edda:	c3                   	ret    
c001eddb:	90                   	nop

c001eddc <SATABus::detect()>:
c001eddc:	c3                   	ret    
c001eddd:	90                   	nop

c001edde <SATABus::SATABus()>:
c001edde:	83 ec 0c             	sub    esp,0xc
c001ede1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede5:	83 ec 08             	sub    esp,0x8
c001ede8:	68 98 59 02 c0       	push   0xc0025998
c001eded:	50                   	push   eax
c001edee:	e8 01 af fe ff       	call   c0009cf4 <HardDiskController::HardDiskController(char const*)>
c001edf3:	83 c4 10             	add    esp,0x10
c001edf6:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c001edfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edff:	89 10                	mov    DWORD PTR [eax],edx
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	6a 50                	push   0x50
c001ee06:	e8 c3 12 ff ff       	call   c00100ce <Phys::allocateContiguousPages(int)>
c001ee0b:	83 c4 10             	add    esp,0x10
c001ee0e:	89 c2                	mov    edx,eax
c001ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee1a:	83 ec 0c             	sub    esp,0xc
c001ee1d:	6a 50                	push   0x50
c001ee1f:	e8 31 44 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c001ee24:	83 c4 10             	add    esp,0x10
c001ee27:	89 c2                	mov    edx,eax
c001ee29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee33:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001ee38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee3c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ee42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	6a 03                	push   0x3
c001ee51:	6a 50                	push   0x50
c001ee53:	51                   	push   ecx
c001ee54:	52                   	push   edx
c001ee55:	50                   	push   eax
c001ee56:	e8 cd 4c ff ff       	call   c0013b28 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ee5b:	83 c4 20             	add    esp,0x20
c001ee5e:	90                   	nop
c001ee5f:	83 c4 0c             	add    esp,0xc
c001ee62:	c3                   	ret    
c001ee63:	90                   	nop

c001ee64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ee64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee68:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ee6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ee6e:	09 c2                	or     edx,eax
c001ee70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ee7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee7c:	31 c0                	xor    eax,eax
c001ee7e:	c1 e9 08             	shr    ecx,0x8
c001ee81:	83 e1 0f             	and    ecx,0xf
c001ee84:	39 c8                	cmp    eax,ecx
c001ee86:	74 0a                	je     c001ee92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ee88:	f6 c2 01             	test   dl,0x1
c001ee8b:	74 08                	je     c001ee95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ee8d:	d1 ea                	shr    edx,1
c001ee8f:	40                   	inc    eax
c001ee90:	eb f2                	jmp    c001ee84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ee92:	83 c8 ff             	or     eax,0xffffffff
c001ee95:	c3                   	ret    

c001ee96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ee96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee9a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ee9d:	89 c2                	mov    edx,eax
c001ee9f:	c1 ea 08             	shr    edx,0x8
c001eea2:	83 e2 0f             	and    edx,0xf
c001eea5:	4a                   	dec    edx
c001eea6:	75 32                	jne    c001eeda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eea8:	83 e0 0f             	and    eax,0xf
c001eeab:	83 f8 03             	cmp    eax,0x3
c001eeae:	75 2a                	jne    c001eeda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eeb0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001eeb3:	b8 02 00 00 00       	mov    eax,0x2
c001eeb8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001eebe:	74 1c                	je     c001eedc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eec0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eec6:	b8 04 00 00 00       	mov    eax,0x4
c001eecb:	74 0f                	je     c001eedc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eecd:	31 c0                	xor    eax,eax
c001eecf:	83 fa 03             	cmp    edx,0x3
c001eed2:	0f 94 c0             	sete   al
c001eed5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001eed9:	c3                   	ret    
c001eeda:	31 c0                	xor    eax,eax
c001eedc:	c3                   	ret    
c001eedd:	90                   	nop

c001eede <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001eede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eee2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eee5:	0f ba e2 0f          	bt     edx,0xf
c001eee9:	72 f7                	jb     c001eee2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001eeeb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eeee:	83 ca 10             	or     edx,0x10
c001eef1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eef4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eef7:	83 ca 01             	or     edx,0x1
c001eefa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eefd:	c3                   	ret    

c001eefe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001eefe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef05:	83 e2 fe             	and    edx,0xfffffffe
c001ef08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef0e:	83 e2 ef             	and    edx,0xffffffef
c001ef11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef17:	0f ba e2 0e          	bt     edx,0xe
c001ef1b:	72 f7                	jb     c001ef14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef1d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef20:	0f ba e2 0f          	bt     edx,0xf
c001ef24:	72 ee                	jb     c001ef14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef26:	c3                   	ret    
c001ef27:	90                   	nop

c001ef28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ef28:	55                   	push   ebp
c001ef29:	57                   	push   edi
c001ef2a:	56                   	push   esi
c001ef2b:	53                   	push   ebx
c001ef2c:	83 ec 1c             	sub    esp,0x1c
c001ef2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef37:	53                   	push   ebx
c001ef38:	57                   	push   edi
c001ef39:	e8 c0 ff ff ff       	call   c001eefe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ef3e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ef42:	83 ec 0c             	sub    esp,0xc
c001ef45:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ef4b:	c1 e5 0a             	shl    ebp,0xa
c001ef4e:	01 e8                	add    eax,ebp
c001ef50:	89 03                	mov    DWORD PTR [ebx],eax
c001ef52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef54:	68 00 04 00 00       	push   0x400
c001ef59:	6a 00                	push   0x0
c001ef5b:	50                   	push   eax
c001ef5c:	e8 8f 15 fe ff       	call   c00004f0 <memset>
c001ef61:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ef67:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ef6b:	83 c4 1c             	add    esp,0x1c
c001ef6e:	01 e8                	add    eax,ebp
c001ef70:	89 03                	mov    DWORD PTR [ebx],eax
c001ef72:	c1 e6 08             	shl    esi,0x8
c001ef75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ef7c:	81 c6 00 80 00 00    	add    esi,0x8000
c001ef82:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ef88:	01 f0                	add    eax,esi
c001ef8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ef8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ef90:	68 00 01 00 00       	push   0x100
c001ef95:	6a 00                	push   0x0
c001ef97:	50                   	push   eax
c001ef98:	e8 53 15 fe ff       	call   c00004f0 <memset>
c001ef9d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001efa3:	31 d2                	xor    edx,edx
c001efa5:	01 f0                	add    eax,esi
c001efa7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001efaa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001efb1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001efb7:	01 ee                	add    esi,ebp
c001efb9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	c1 e5 0d             	shl    ebp,0xd
c001efc3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001efc9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001efcf:	83 c6 20             	add    esi,0x20
c001efd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efd6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001efdc:	01 e8                	add    eax,ebp
c001efde:	01 d0                	add    eax,edx
c001efe0:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001efe3:	52                   	push   edx
c001efe4:	68 00 01 00 00       	push   0x100
c001efe9:	6a 00                	push   0x0
c001efeb:	50                   	push   eax
c001efec:	e8 ff 14 fe ff       	call   c00004f0 <memset>
c001eff1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001eff7:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001effe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f002:	83 c4 10             	add    esp,0x10
c001f005:	01 e8                	add    eax,ebp
c001f007:	01 d0                	add    eax,edx
c001f009:	81 c2 00 01 00 00    	add    edx,0x100
c001f00f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f012:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f018:	75 af                	jne    c001efc9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f01a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f021:	50                   	push   eax
c001f022:	50                   	push   eax
c001f023:	53                   	push   ebx
c001f024:	57                   	push   edi
c001f025:	e8 b4 fe ff ff       	call   c001eede <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f02a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f031:	83 c4 2c             	add    esp,0x2c
c001f034:	5b                   	pop    ebx
c001f035:	5e                   	pop    esi
c001f036:	5f                   	pop    edi
c001f037:	5d                   	pop    ebp
c001f038:	c3                   	ret    
c001f039:	90                   	nop

c001f03a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f03a:	55                   	push   ebp
c001f03b:	57                   	push   edi
c001f03c:	56                   	push   esi
c001f03d:	53                   	push   ebx
c001f03e:	31 db                	xor    ebx,ebx
c001f040:	83 ec 0c             	sub    esp,0xc
c001f043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f047:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f04b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f04e:	f7 c7 01 00 00 00    	test   edi,0x1
c001f054:	74 7a                	je     c001f0d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f056:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f05a:	89 d8                	mov    eax,ebx
c001f05c:	c1 e0 07             	shl    eax,0x7
c001f05f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f066:	55                   	push   ebp
c001f067:	56                   	push   esi
c001f068:	e8 29 fe ff ff       	call   c001ee96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f06d:	5a                   	pop    edx
c001f06e:	59                   	pop    ecx
c001f06f:	83 f8 01             	cmp    eax,0x1
c001f072:	75 21                	jne    c001f095 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f074:	50                   	push   eax
c001f075:	53                   	push   ebx
c001f076:	55                   	push   ebp
c001f077:	56                   	push   esi
c001f078:	e8 ab fe ff ff       	call   c001ef28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f07d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f084:	e8 27 0a ff ff       	call   c000fab0 <malloc>
c001f089:	89 04 24             	mov    DWORD PTR [esp],eax
c001f08c:	89 c5                	mov    ebp,eax
c001f08e:	e8 37 0f 00 00       	call   c001ffca <SATA::SATA()>
c001f093:	eb 24                	jmp    c001f0b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f095:	83 f8 04             	cmp    eax,0x4
c001f098:	75 36                	jne    c001f0d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f09a:	51                   	push   ecx
c001f09b:	53                   	push   ebx
c001f09c:	55                   	push   ebp
c001f09d:	56                   	push   esi
c001f09e:	e8 85 fe ff ff       	call   c001ef28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f0a3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f0aa:	e8 01 0a ff ff       	call   c000fab0 <malloc>
c001f0af:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0b2:	89 c5                	mov    ebp,eax
c001f0b4:	e8 a7 12 00 00       	call   c0020360 <SATAPI::SATAPI()>
c001f0b9:	58                   	pop    eax
c001f0ba:	5a                   	pop    edx
c001f0bb:	55                   	push   ebp
c001f0bc:	56                   	push   esi
c001f0bd:	e8 d8 a8 fe ff       	call   c000999a <Device::addChild(Device*)>
c001f0c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f0c5:	56                   	push   esi
c001f0c6:	6a 00                	push   0x0
c001f0c8:	53                   	push   ebx
c001f0c9:	55                   	push   ebp
c001f0ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f0cd:	83 c4 20             	add    esp,0x20
c001f0d0:	d1 ef                	shr    edi,1
c001f0d2:	43                   	inc    ebx
c001f0d3:	83 fb 20             	cmp    ebx,0x20
c001f0d6:	0f 85 72 ff ff ff    	jne    c001f04e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f0dc:	83 c4 0c             	add    esp,0xc
c001f0df:	5b                   	pop    ebx
c001f0e0:	5e                   	pop    esi
c001f0e1:	5f                   	pop    edi
c001f0e2:	5d                   	pop    ebp
c001f0e3:	c3                   	ret    

c001f0e4 <SATABus::open(int, int, void*)>:
c001f0e4:	53                   	push   ebx
c001f0e5:	83 ec 08             	sub    esp,0x8
c001f0e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0ec:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f0f2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f0f8:	e8 5f 79 ff ff       	call   c0016a5c <KeDisablePreemption()>
c001f0fd:	52                   	push   edx
c001f0fe:	52                   	push   edx
c001f0ff:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f105:	53                   	push   ebx
c001f106:	e8 2f ff ff ff       	call   c001f03a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f10b:	e8 74 79 ff ff       	call   c0016a84 <KeRestorePreemption()>
c001f110:	83 c4 18             	add    esp,0x18
c001f113:	31 c0                	xor    eax,eax
c001f115:	5b                   	pop    ebx
c001f116:	c3                   	ret    
c001f117:	90                   	nop

c001f118 <ATA::close(int, int, void*)>:
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f125:	85 c0                	test   eax,eax
c001f127:	74 0c                	je     c001f135 <ATA::close(int, int, void*)+0x1d>
c001f129:	8b 10                	mov    edx,DWORD PTR [eax]
c001f12b:	83 ec 0c             	sub    esp,0xc
c001f12e:	50                   	push   eax
c001f12f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f132:	83 c4 10             	add    esp,0x10
c001f135:	31 c0                	xor    eax,eax
c001f137:	83 c4 0c             	add    esp,0xc
c001f13a:	c3                   	ret    
c001f13b:	90                   	nop

c001f13c <ATA::powerSaving(PowerSavingLevel)>:
c001f13c:	c3                   	ret    
c001f13d:	90                   	nop

c001f13e <ATA::ATA()>:
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f145:	83 ec 04             	sub    esp,0x4
c001f148:	68 00 02 00 00       	push   0x200
c001f14d:	68 45 5b 02 c0       	push   0xc0025b45
c001f152:	50                   	push   eax
c001f153:	e8 26 ac fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f158:	83 c4 10             	add    esp,0x10
c001f15b:	ba ac 5a 02 c0       	mov    edx,0xc0025aac
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	89 10                	mov    DWORD PTR [eax],edx
c001f166:	90                   	nop
c001f167:	83 c4 0c             	add    esp,0xc
c001f16a:	c3                   	ret    
c001f16b:	90                   	nop

c001f16c <ATA::flush(bool)>:
c001f16c:	53                   	push   ebx
c001f16d:	83 ec 08             	sub    esp,0x8
c001f170:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f179:	83 f8 01             	cmp    eax,0x1
c001f17c:	19 c0                	sbb    eax,eax
c001f17e:	83 e0 fd             	and    eax,0xfffffffd
c001f181:	05 ea 00 00 00       	add    eax,0xea
c001f186:	50                   	push   eax
c001f187:	6a 07                	push   0x7
c001f189:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f190:	50                   	push   eax
c001f191:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f197:	e8 48 ee ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f19c:	83 c4 0c             	add    esp,0xc
c001f19f:	6a 00                	push   0x0
c001f1a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1a8:	50                   	push   eax
c001f1a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1af:	e8 d0 fb ff ff       	call   c001ed84 <IDE::polling(unsigned char, unsigned int)>
c001f1b4:	83 c4 18             	add    esp,0x18
c001f1b7:	5b                   	pop    ebx
c001f1b8:	c3                   	ret    
c001f1b9:	90                   	nop

c001f1ba <ATA::readyForCommand()>:
c001f1ba:	56                   	push   esi
c001f1bb:	53                   	push   ebx
c001f1bc:	31 db                	xor    ebx,ebx
c001f1be:	50                   	push   eax
c001f1bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1c3:	50                   	push   eax
c001f1c4:	6a 0c                	push   0xc
c001f1c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f1cd:	50                   	push   eax
c001f1ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f1d4:	e8 cb ee ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001f1d9:	83 c4 10             	add    esp,0x10
c001f1dc:	a8 88                	test   al,0x88
c001f1de:	74 20                	je     c001f200 <ATA::readyForCommand()+0x46>
c001f1e0:	43                   	inc    ebx
c001f1e1:	83 fb 63             	cmp    ebx,0x63
c001f1e4:	7e dd                	jle    c001f1c3 <ATA::readyForCommand()+0x9>
c001f1e6:	51                   	push   ecx
c001f1e7:	51                   	push   ecx
c001f1e8:	6a 00                	push   0x0
c001f1ea:	6a 0a                	push   0xa
c001f1ec:	e8 27 7d ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f1fa:	75 c7                	jne    c001f1c3 <ATA::readyForCommand()+0x9>
c001f1fc:	31 c0                	xor    eax,eax
c001f1fe:	eb 02                	jmp    c001f202 <ATA::readyForCommand()+0x48>
c001f200:	b0 01                	mov    al,0x1
c001f202:	5a                   	pop    edx
c001f203:	5b                   	pop    ebx
c001f204:	5e                   	pop    esi
c001f205:	c3                   	ret    

c001f206 <ATA::access(unsigned long long, int, void*, bool)>:
c001f206:	55                   	push   ebp
c001f207:	57                   	push   edi
c001f208:	56                   	push   esi
c001f209:	53                   	push   ebx
c001f20a:	83 ec 2c             	sub    esp,0x2c
c001f20d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f211:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f215:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f219:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f21d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f221:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f225:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f229:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f22f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f233:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f239:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f23d:	c1 e0 06             	shl    eax,0x6
c001f240:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f248:	74 5b                	je     c001f2a5 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001f24a:	89 fa                	mov    edx,edi
c001f24c:	89 f0                	mov    eax,esi
c001f24e:	c1 ea 1c             	shr    edx,0x1c
c001f251:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001f255:	89 d1                	mov    ecx,edx
c001f257:	09 c1                	or     ecx,eax
c001f259:	74 25                	je     c001f280 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f25b:	31 ed                	xor    ebp,ebp
c001f25d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f264:	89 fa                	mov    edx,edi
c001f266:	89 f0                	mov    eax,esi
c001f268:	0f ad d0             	shrd   eax,edx,cl
c001f26b:	d3 ea                	shr    edx,cl
c001f26d:	f6 c1 20             	test   cl,0x20
c001f270:	74 02                	je     c001f274 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f272:	89 d0                	mov    eax,edx
c001f274:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f278:	45                   	inc    ebp
c001f279:	83 fd 06             	cmp    ebp,0x6
c001f27c:	75 df                	jne    c001f25d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f27e:	eb 71                	jmp    c001f2f1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001f280:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f285:	89 f0                	mov    eax,esi
c001f287:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f28e:	0f ac f8 10          	shrd   eax,edi,0x10
c001f292:	bf 01 00 00 00       	mov    edi,0x1
c001f297:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f29b:	c1 ee 18             	shr    esi,0x18
c001f29e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f2a3:	eb 53                	jmp    c001f2f8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f2a5:	6a 00                	push   0x0
c001f2a7:	6a 3f                	push   0x3f
c001f2a9:	57                   	push   edi
c001f2aa:	56                   	push   esi
c001f2ab:	e8 14 25 00 00       	call   c00217c4 <__umoddi3>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	40                   	inc    eax
c001f2b4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f2b8:	6a 00                	push   0x0
c001f2ba:	68 f0 03 00 00       	push   0x3f0
c001f2bf:	57                   	push   edi
c001f2c0:	56                   	push   esi
c001f2c1:	e8 fe 23 00 00       	call   c00216c4 <__udivdi3>
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f2ce:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f2d5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f2da:	6a 00                	push   0x0
c001f2dc:	6a 3f                	push   0x3f
c001f2de:	57                   	push   edi
c001f2df:	31 ff                	xor    edi,edi
c001f2e1:	56                   	push   esi
c001f2e2:	e8 dd 23 00 00       	call   c00216c4 <__udivdi3>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	83 e0 0f             	and    eax,0xf
c001f2ed:	89 c6                	mov    esi,eax
c001f2ef:	eb 07                	jmp    c001f2f8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f2f1:	31 f6                	xor    esi,esi
c001f2f3:	bf 02 00 00 00       	mov    edi,0x2
c001f2f8:	55                   	push   ebp
c001f2f9:	6a 00                	push   0x0
c001f2fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f302:	50                   	push   eax
c001f303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f307:	e8 e8 ee ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001f30c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f30f:	e8 a6 fe ff ff       	call   c001f1ba <ATA::readyForCommand()>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	84 c0                	test   al,al
c001f319:	75 0a                	jne    c001f325 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001f31b:	be 01 00 00 00       	mov    esi,0x1
c001f320:	e9 df 02 00 00       	jmp    c001f604 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f325:	fa                   	cli    
c001f326:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f32c:	f7 c7 03 00 00 00    	test   edi,0x3
c001f332:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f338:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f33e:	75 0a                	jne    c001f34a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001f340:	c1 e0 04             	shl    eax,0x4
c001f343:	09 c6                	or     esi,eax
c001f345:	83 ce a0             	or     esi,0xffffffa0
c001f348:	eb 08                	jmp    c001f352 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001f34a:	c1 e0 04             	shl    eax,0x4
c001f34d:	09 c6                	or     esi,eax
c001f34f:	83 ce e0             	or     esi,0xffffffe0
c001f352:	89 f0                	mov    eax,esi
c001f354:	0f b6 d2             	movzx  edx,dl
c001f357:	0f b6 f0             	movzx  esi,al
c001f35a:	56                   	push   esi
c001f35b:	6a 06                	push   0x6
c001f35d:	52                   	push   edx
c001f35e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f364:	e8 7b ec ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f369:	83 c4 10             	add    esp,0x10
c001f36c:	6a 00                	push   0x0
c001f36e:	6a 01                	push   0x1
c001f370:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f377:	50                   	push   eax
c001f378:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f37e:	e8 61 ec ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f383:	89 f8                	mov    eax,edi
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	0f b6 f0             	movzx  esi,al
c001f38b:	83 fe 02             	cmp    esi,0x2
c001f38e:	75 6e                	jne    c001f3fe <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f390:	6a 00                	push   0x0
c001f392:	6a 08                	push   0x8
c001f394:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f39b:	50                   	push   eax
c001f39c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3a2:	e8 3d ec ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3a7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f3ac:	50                   	push   eax
c001f3ad:	6a 09                	push   0x9
c001f3af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3b6:	50                   	push   eax
c001f3b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3bd:	e8 22 ec ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3c2:	83 c4 20             	add    esp,0x20
c001f3c5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f3ca:	50                   	push   eax
c001f3cb:	6a 0a                	push   0xa
c001f3cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3d4:	50                   	push   eax
c001f3d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3db:	e8 04 ec ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3e0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f3e5:	50                   	push   eax
c001f3e6:	6a 0b                	push   0xb
c001f3e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3ef:	50                   	push   eax
c001f3f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3f6:	e8 e9 eb ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3fb:	83 c4 20             	add    esp,0x20
c001f3fe:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f403:	50                   	push   eax
c001f404:	6a 02                	push   0x2
c001f406:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f40d:	50                   	push   eax
c001f40e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f414:	e8 cb eb ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f419:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f41e:	50                   	push   eax
c001f41f:	6a 03                	push   0x3
c001f421:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f428:	50                   	push   eax
c001f429:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f42f:	e8 b0 eb ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f434:	83 c4 20             	add    esp,0x20
c001f437:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f43c:	50                   	push   eax
c001f43d:	6a 04                	push   0x4
c001f43f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f446:	50                   	push   eax
c001f447:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f44d:	e8 92 eb ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f452:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f457:	50                   	push   eax
c001f458:	6a 05                	push   0x5
c001f45a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f461:	50                   	push   eax
c001f462:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f468:	e8 77 eb ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f46d:	83 c4 20             	add    esp,0x20
c001f470:	83 fe 02             	cmp    esi,0x2
c001f473:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001f478:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001f47d:	85 c9                	test   ecx,ecx
c001f47f:	74 07                	je     c001f488 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f481:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f486:	75 45                	jne    c001f4cd <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001f488:	89 f8                	mov    eax,edi
c001f48a:	0f b6 f8             	movzx  edi,al
c001f48d:	31 c0                	xor    eax,eax
c001f48f:	4f                   	dec    edi
c001f490:	0f 94 c0             	sete   al
c001f493:	89 c6                	mov    esi,eax
c001f495:	75 0c                	jne    c001f4a3 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001f497:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f49c:	b8 30 00 00 00       	mov    eax,0x30
c001f4a1:	75 2f                	jne    c001f4d2 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f4a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f4a7:	83 f2 01             	xor    edx,0x1
c001f4aa:	85 c9                	test   ecx,ecx
c001f4ac:	74 09                	je     c001f4b7 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001f4ae:	84 d2                	test   dl,dl
c001f4b0:	b8 24 00 00 00       	mov    eax,0x24
c001f4b5:	75 1b                	jne    c001f4d2 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f4b7:	85 f6                	test   esi,esi
c001f4b9:	0f 84 5c fe ff ff    	je     c001f31b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f4bf:	84 d2                	test   dl,dl
c001f4c1:	b8 20 00 00 00       	mov    eax,0x20
c001f4c6:	75 0a                	jne    c001f4d2 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f4c8:	e9 4e fe ff ff       	jmp    c001f31b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f4cd:	b8 34 00 00 00       	mov    eax,0x34
c001f4d2:	50                   	push   eax
c001f4d3:	6a 07                	push   0x7
c001f4d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4dc:	50                   	push   eax
c001f4dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4e3:	e8 fc ea ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4e8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f4f9:	75 01                	jne    c001f4fc <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001f4fb:	fb                   	sti    
c001f4fc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f500:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001f505:	85 f6                	test   esi,esi
c001f507:	0f 84 dd 00 00 00    	je     c001f5ea <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f50d:	57                   	push   edi
c001f50e:	6a 01                	push   0x1
c001f510:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f517:	50                   	push   eax
c001f518:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f51e:	e8 61 f8 ff ff       	call   c001ed84 <IDE::polling(unsigned char, unsigned int)>
c001f523:	83 c4 10             	add    esp,0x10
c001f526:	0f b6 c0             	movzx  eax,al
c001f529:	85 c0                	test   eax,eax
c001f52b:	74 23                	je     c001f550 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001f52d:	50                   	push   eax
c001f52e:	89 c6                	mov    esi,eax
c001f530:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f537:	50                   	push   eax
c001f538:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f53f:	50                   	push   eax
c001f540:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f546:	e8 7f f7 ff ff       	call   c001ecca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f54b:	e9 b1 00 00 00       	jmp    c001f601 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001f550:	85 ed                	test   ebp,ebp
c001f552:	74 49                	je     c001f59d <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001f554:	fa                   	cli    
c001f555:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f55b:	31 ff                	xor    edi,edi
c001f55d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f561:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001f565:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001f56a:	51                   	push   ecx
c001f56b:	51                   	push   ecx
c001f56c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f573:	50                   	push   eax
c001f574:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f57a:	e8 53 ea ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001f57f:	89 c2                	mov    edx,eax
c001f581:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001f586:	66 ef                	out    dx,ax
c001f588:	47                   	inc    edi
c001f589:	83 c4 10             	add    esp,0x10
c001f58c:	81 ff 00 01 00 00    	cmp    edi,0x100
c001f592:	75 c9                	jne    c001f55d <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001f594:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f59b:	eb 35                	jmp    c001f5d2 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001f59d:	fa                   	cli    
c001f59e:	52                   	push   edx
c001f59f:	52                   	push   edx
c001f5a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5a7:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f5ad:	50                   	push   eax
c001f5ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5b4:	e8 19 ea ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001f5b9:	b9 00 01 00 00       	mov    ecx,0x100
c001f5be:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f5c2:	89 c2                	mov    edx,eax
c001f5c4:	fc                   	cld    
c001f5c5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f5c8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f5d9:	75 01                	jne    c001f5dc <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001f5db:	fb                   	sti    
c001f5dc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f5e4:	4e                   	dec    esi
c001f5e5:	e9 1b ff ff ff       	jmp    c001f505 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001f5ea:	31 f6                	xor    esi,esi
c001f5ec:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f5f1:	74 11                	je     c001f604 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f5f3:	50                   	push   eax
c001f5f4:	50                   	push   eax
c001f5f5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001f5fa:	50                   	push   eax
c001f5fb:	53                   	push   ebx
c001f5fc:	e8 6b fb ff ff       	call   c001f16c <ATA::flush(bool)>
c001f601:	83 c4 10             	add    esp,0x10
c001f604:	83 c4 2c             	add    esp,0x2c
c001f607:	89 f0                	mov    eax,esi
c001f609:	5b                   	pop    ebx
c001f60a:	5e                   	pop    esi
c001f60b:	5f                   	pop    edi
c001f60c:	5d                   	pop    ebp
c001f60d:	c3                   	ret    

c001f60e <ATA::read(unsigned long long, int, void*)>:
c001f60e:	57                   	push   edi
c001f60f:	b8 04 00 00 00       	mov    eax,0x4
c001f614:	56                   	push   esi
c001f615:	53                   	push   ebx
c001f616:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f61a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f61e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f622:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f626:	8d 7a ff             	lea    edi,[edx-0x1]
c001f629:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f62f:	77 25                	ja     c001f656 <ATA::read(unsigned long long, int, void*)+0x48>
c001f631:	85 f6                	test   esi,esi
c001f633:	b8 06 00 00 00       	mov    eax,0x6
c001f638:	74 1c                	je     c001f656 <ATA::read(unsigned long long, int, void*)+0x48>
c001f63a:	50                   	push   eax
c001f63b:	50                   	push   eax
c001f63c:	6a 00                	push   0x0
c001f63e:	56                   	push   esi
c001f63f:	52                   	push   edx
c001f640:	53                   	push   ebx
c001f641:	51                   	push   ecx
c001f642:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f646:	e8 bb fb ff ff       	call   c001f206 <ATA::access(unsigned long long, int, void*, bool)>
c001f64b:	83 c4 20             	add    esp,0x20
c001f64e:	85 c0                	test   eax,eax
c001f650:	0f 95 c0             	setne  al
c001f653:	0f b6 c0             	movzx  eax,al
c001f656:	5b                   	pop    ebx
c001f657:	5e                   	pop    esi
c001f658:	5f                   	pop    edi
c001f659:	c3                   	ret    

c001f65a <ATA::write(unsigned long long, int, void*)>:
c001f65a:	57                   	push   edi
c001f65b:	b8 04 00 00 00       	mov    eax,0x4
c001f660:	56                   	push   esi
c001f661:	53                   	push   ebx
c001f662:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f666:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f66a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f66e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f672:	8d 7a ff             	lea    edi,[edx-0x1]
c001f675:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f67b:	77 25                	ja     c001f6a2 <ATA::write(unsigned long long, int, void*)+0x48>
c001f67d:	85 f6                	test   esi,esi
c001f67f:	b8 06 00 00 00       	mov    eax,0x6
c001f684:	74 1c                	je     c001f6a2 <ATA::write(unsigned long long, int, void*)+0x48>
c001f686:	50                   	push   eax
c001f687:	50                   	push   eax
c001f688:	6a 01                	push   0x1
c001f68a:	56                   	push   esi
c001f68b:	52                   	push   edx
c001f68c:	53                   	push   ebx
c001f68d:	51                   	push   ecx
c001f68e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f692:	e8 6f fb ff ff       	call   c001f206 <ATA::access(unsigned long long, int, void*, bool)>
c001f697:	83 c4 20             	add    esp,0x20
c001f69a:	85 c0                	test   eax,eax
c001f69c:	0f 95 c0             	setne  al
c001f69f:	0f b6 c0             	movzx  eax,al
c001f6a2:	5b                   	pop    ebx
c001f6a3:	5e                   	pop    esi
c001f6a4:	5f                   	pop    edi
c001f6a5:	c3                   	ret    

c001f6a6 <ATA::detectCHS()>:
c001f6a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6aa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f6b0:	c1 e0 06             	shl    eax,0x6
c001f6b3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f6b9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f6c3:	c7 44 24 04 e8 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc00259e8
c001f6cb:	e9 26 07 ff ff       	jmp    c000fdf6 <KePanic(char const*)>

c001f6d0 <ATA::open(int, int, void*)>:
c001f6d0:	53                   	push   ebx
c001f6d1:	83 ec 08             	sub    esp,0x8
c001f6d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f6dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6e0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f6e6:	c1 e0 06             	shl    eax,0x6
c001f6e9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f6ef:	01 d0                	add    eax,edx
c001f6f1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f6f8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f6fe:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f705:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f70f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f716:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f71c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f723:	75 0c                	jne    c001f731 <ATA::open(int, int, void*)+0x61>
c001f725:	83 ec 0c             	sub    esp,0xc
c001f728:	53                   	push   ebx
c001f729:	e8 78 ff ff ff       	call   c001f6a6 <ATA::detectCHS()>
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f737:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f73d:	c1 e0 06             	shl    eax,0x6
c001f740:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f747:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f751:	d1 e8                	shr    eax,1
c001f753:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f759:	6a 04                	push   0x4
c001f75b:	6a 0c                	push   0xc
c001f75d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f764:	50                   	push   eax
c001f765:	52                   	push   edx
c001f766:	e8 79 e8 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f76b:	90                   	nop
c001f76c:	90                   	nop
c001f76d:	6a 00                	push   0x0
c001f76f:	6a 0c                	push   0xc
c001f771:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f778:	50                   	push   eax
c001f779:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f77f:	e8 60 e8 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f784:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f78a:	83 c4 20             	add    esp,0x20
c001f78d:	c1 e0 06             	shl    eax,0x6
c001f790:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f796:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f79d:	0f 84 00 01 00 00    	je     c001f8a3 <ATA::open(int, int, void*)+0x1d3>
c001f7a3:	83 ec 0c             	sub    esp,0xc
c001f7a6:	6a 08                	push   0x8
c001f7a8:	e8 21 09 ff ff       	call   c00100ce <Phys::allocateContiguousPages(int)>
c001f7ad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f7b3:	c7 04 24 fa 59 02 c0 	mov    DWORD PTR [esp],0xc00259fa
c001f7ba:	e8 8f 77 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f7bf:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f7c6:	e8 8a 3a ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c001f7cb:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f7d1:	6a 03                	push   0x3
c001f7d3:	50                   	push   eax
c001f7d4:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f7da:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f7e0:	e8 49 41 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c001f7e5:	83 c4 20             	add    esp,0x20
c001f7e8:	e8 03 08 ff ff       	call   c000fff0 <Phys::allocatePage()>
c001f7ed:	83 ec 0c             	sub    esp,0xc
c001f7f0:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f7f6:	6a 01                	push   0x1
c001f7f8:	e8 58 3a ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c001f7fd:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f803:	6a 03                	push   0x3
c001f805:	50                   	push   eax
c001f806:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f80c:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f812:	e8 17 41 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c001f817:	83 c4 14             	add    esp,0x14
c001f81a:	68 33 5a 02 c0       	push   0xc0025a33
c001f81f:	e8 2a 77 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f824:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f82b:	50                   	push   eax
c001f82c:	6a 12                	push   0x12
c001f82e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f835:	50                   	push   eax
c001f836:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f83c:	e8 a3 e7 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f841:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001f847:	83 c4 20             	add    esp,0x20
c001f84a:	0f b6 c4             	movzx  eax,ah
c001f84d:	50                   	push   eax
c001f84e:	6a 13                	push   0x13
c001f850:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f857:	50                   	push   eax
c001f858:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f85e:	e8 81 e7 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f863:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001f86a:	50                   	push   eax
c001f86b:	6a 14                	push   0x14
c001f86d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f874:	50                   	push   eax
c001f875:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f87b:	e8 64 e7 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f880:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001f887:	83 c4 20             	add    esp,0x20
c001f88a:	50                   	push   eax
c001f88b:	6a 15                	push   0x15
c001f88d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f894:	50                   	push   eax
c001f895:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f89b:	e8 44 e7 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8a0:	83 c4 10             	add    esp,0x10
c001f8a3:	83 ec 0c             	sub    esp,0xc
c001f8a6:	53                   	push   ebx
c001f8a7:	e8 3a a5 fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c001f8ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8af:	e8 d2 b3 fe ff       	call   c000ac86 <createPartitionsForDisk(PhysicalDisk*)>
c001f8b4:	83 c4 18             	add    esp,0x18
c001f8b7:	31 c0                	xor    eax,eax
c001f8b9:	5b                   	pop    ebx
c001f8ba:	c3                   	ret    

c001f8bb <combineCharAndColour(char, unsigned char)>:
c001f8bb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f8c0:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001f8c6:	c1 e0 08             	shl    eax,0x8
c001f8c9:	09 d0                	or     eax,edx
c001f8cb:	c3                   	ret    

c001f8cc <combineColours(unsigned char, unsigned char)>:
c001f8cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f8d1:	c1 e0 04             	shl    eax,0x4
c001f8d4:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001f8d8:	c3                   	ret    
c001f8d9:	90                   	nop

c001f8da <ATAPI::write(unsigned long long, int, void*)>:
c001f8da:	b8 03 00 00 00       	mov    eax,0x3
c001f8df:	c3                   	ret    

c001f8e0 <ATAPI::close(int, int, void*)>:
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f8ed:	85 c0                	test   eax,eax
c001f8ef:	74 0c                	je     c001f8fd <ATAPI::close(int, int, void*)+0x1d>
c001f8f1:	8b 10                	mov    edx,DWORD PTR [eax]
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	50                   	push   eax
c001f8f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f8fa:	83 c4 10             	add    esp,0x10
c001f8fd:	31 c0                	xor    eax,eax
c001f8ff:	83 c4 0c             	add    esp,0xc
c001f902:	c3                   	ret    
c001f903:	90                   	nop

c001f904 <ATAPI::ATAPI()>:
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90b:	83 ec 04             	sub    esp,0x4
c001f90e:	68 00 08 00 00       	push   0x800
c001f913:	68 e5 5b 02 c0       	push   0xc0025be5
c001f918:	50                   	push   eax
c001f919:	e8 60 a4 fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f91e:	83 c4 10             	add    esp,0x10
c001f921:	ba f4 5a 02 c0       	mov    edx,0xc0025af4
c001f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92a:	89 10                	mov    DWORD PTR [eax],edx
c001f92c:	90                   	nop
c001f92d:	83 c4 0c             	add    esp,0xc
c001f930:	c3                   	ret    
c001f931:	90                   	nop

c001f932 <ATAPI::readyForCommand()>:
c001f932:	56                   	push   esi
c001f933:	53                   	push   ebx
c001f934:	31 db                	xor    ebx,ebx
c001f936:	50                   	push   eax
c001f937:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f93b:	50                   	push   eax
c001f93c:	6a 0c                	push   0xc
c001f93e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f945:	50                   	push   eax
c001f946:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f94c:	e8 53 e7 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001f951:	83 c4 10             	add    esp,0x10
c001f954:	a8 88                	test   al,0x88
c001f956:	74 26                	je     c001f97e <ATAPI::readyForCommand()+0x4c>
c001f958:	43                   	inc    ebx
c001f959:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f95f:	7e da                	jle    c001f93b <ATAPI::readyForCommand()+0x9>
c001f961:	51                   	push   ecx
c001f962:	51                   	push   ecx
c001f963:	6a 00                	push   0x0
c001f965:	68 5e 01 00 00       	push   0x15e
c001f96a:	e8 a9 75 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001f96f:	83 c4 10             	add    esp,0x10
c001f972:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f978:	75 c1                	jne    c001f93b <ATAPI::readyForCommand()+0x9>
c001f97a:	31 c0                	xor    eax,eax
c001f97c:	eb 02                	jmp    c001f980 <ATAPI::readyForCommand()+0x4e>
c001f97e:	b0 01                	mov    al,0x1
c001f980:	5a                   	pop    edx
c001f981:	5b                   	pop    ebx
c001f982:	5e                   	pop    esi
c001f983:	c3                   	ret    

c001f984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f984:	55                   	push   ebp
c001f985:	57                   	push   edi
c001f986:	56                   	push   esi
c001f987:	53                   	push   ebx
c001f988:	83 ec 20             	sub    esp,0x20
c001f98b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f98f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f993:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f997:	6a 01                	push   0x1
c001f999:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9a0:	50                   	push   eax
c001f9a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9a7:	e8 48 e8 ff ff       	call   c001e1f4 <IDE::enableIRQs(unsigned char, bool)>
c001f9ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9b3:	59                   	pop    ecx
c001f9b4:	5e                   	pop    esi
c001f9b5:	50                   	push   eax
c001f9b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9bc:	e8 fd e5 ff ff       	call   c001dfbe <IDE::prepareInterrupt(unsigned char)>
c001f9c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f9c4:	e8 69 ff ff ff       	call   c001f932 <ATAPI::readyForCommand()>
c001f9c9:	83 c4 10             	add    esp,0x10
c001f9cc:	84 c0                	test   al,al
c001f9ce:	75 0a                	jne    c001f9da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001f9d0:	bb 01 00 00 00       	mov    ebx,0x1
c001f9d5:	e9 5f 02 00 00       	jmp    c001fc39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f9da:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001f9e0:	c1 e0 04             	shl    eax,0x4
c001f9e3:	0f b6 c0             	movzx  eax,al
c001f9e6:	50                   	push   eax
c001f9e7:	6a 06                	push   0x6
c001f9e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f9f0:	50                   	push   eax
c001f9f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f9f7:	e8 e8 e5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9fc:	6a 00                	push   0x0
c001f9fe:	6a 01                	push   0x1
c001fa00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa07:	50                   	push   eax
c001fa08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa0e:	e8 d1 e5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa13:	83 c4 20             	add    esp,0x20
c001fa16:	0f b6 c3             	movzx  eax,bl
c001fa19:	50                   	push   eax
c001fa1a:	0f b6 df             	movzx  ebx,bh
c001fa1d:	6a 04                	push   0x4
c001fa1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa26:	50                   	push   eax
c001fa27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa2d:	e8 b2 e5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa32:	53                   	push   ebx
c001fa33:	6a 05                	push   0x5
c001fa35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa3c:	50                   	push   eax
c001fa3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa43:	e8 9c e5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa48:	83 c4 20             	add    esp,0x20
c001fa4b:	68 a0 00 00 00       	push   0xa0
c001fa50:	6a 07                	push   0x7
c001fa52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa59:	50                   	push   eax
c001fa5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa60:	e8 7f e5 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa65:	83 c4 0c             	add    esp,0xc
c001fa68:	6a 01                	push   0x1
c001fa6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa71:	50                   	push   eax
c001fa72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa78:	e8 07 f3 ff ff       	call   c001ed84 <IDE::polling(unsigned char, unsigned int)>
c001fa7d:	83 c4 10             	add    esp,0x10
c001fa80:	0f b6 d8             	movzx  ebx,al
c001fa83:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001fa89:	85 db                	test   ebx,ebx
c001fa8b:	74 20                	je     c001faad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001fa8d:	53                   	push   ebx
c001fa8e:	0f b6 c0             	movzx  eax,al
c001fa91:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001fa98:	52                   	push   edx
c001fa99:	50                   	push   eax
c001fa9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001faa0:	e8 25 f2 ff ff       	call   c001ecca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001faa5:	83 c4 10             	add    esp,0x10
c001faa8:	e9 8c 01 00 00       	jmp    c001fc39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001faad:	52                   	push   edx
c001faae:	0f b6 c0             	movzx  eax,al
c001fab1:	52                   	push   edx
c001fab2:	50                   	push   eax
c001fab3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fab9:	e8 14 e5 ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001fabe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fac2:	b9 06 00 00 00       	mov    ecx,0x6
c001fac7:	89 c2                	mov    edx,eax
c001fac9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001facc:	89 e8                	mov    eax,ebp
c001face:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	0f b6 c0             	movzx  eax,al
c001fad8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fadc:	85 db                	test   ebx,ebx
c001fade:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fae4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001faeb:	0f 84 eb 00 00 00    	je     c001fbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001faf1:	55                   	push   ebp
c001faf2:	55                   	push   ebp
c001faf3:	52                   	push   edx
c001faf4:	50                   	push   eax
c001faf5:	e8 5e e6 ff ff       	call   c001e158 <IDE::waitInterrupt(unsigned char)>
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	84 c0                	test   al,al
c001faff:	0f 84 cb fe ff ff    	je     c001f9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001fb05:	56                   	push   esi
c001fb06:	56                   	push   esi
c001fb07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb0e:	50                   	push   eax
c001fb0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb15:	e8 a4 e4 ff ff       	call   c001dfbe <IDE::prepareInterrupt(unsigned char)>
c001fb1a:	83 c4 0c             	add    esp,0xc
c001fb1d:	6a 04                	push   0x4
c001fb1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb26:	50                   	push   eax
c001fb27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb2d:	e8 72 e5 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001fb32:	83 c4 0c             	add    esp,0xc
c001fb35:	6a 05                	push   0x5
c001fb37:	89 c6                	mov    esi,eax
c001fb39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb40:	50                   	push   eax
c001fb41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb47:	e8 58 e5 ff ff       	call   c001e0a4 <IDE::read(unsigned char, unsigned char)>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	0f b6 e8             	movzx  ebp,al
c001fb52:	89 f0                	mov    eax,esi
c001fb54:	c1 e5 08             	shl    ebp,0x8
c001fb57:	0f b6 f0             	movzx  esi,al
c001fb5a:	09 f5                	or     ebp,esi
c001fb5c:	31 f6                	xor    esi,esi
c001fb5e:	d1 fd                	sar    ebp,1
c001fb60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fb65:	74 5c                	je     c001fbc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001fb67:	39 ee                	cmp    esi,ebp
c001fb69:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fb6f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fb76:	75 0d                	jne    c001fb85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001fb78:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001fb7b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001fb7f:	4b                   	dec    ebx
c001fb80:	e9 57 ff ff ff       	jmp    c001fadc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001fb85:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001fb89:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001fb8d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001fb92:	51                   	push   ecx
c001fb93:	51                   	push   ecx
c001fb94:	52                   	push   edx
c001fb95:	50                   	push   eax
c001fb96:	e8 37 e4 ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001fb9b:	89 c2                	mov    edx,eax
c001fb9d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001fba2:	66 ef                	out    dx,ax
c001fba4:	46                   	inc    esi
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	eb bd                	jmp    c001fb67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001fbaa:	51                   	push   ecx
c001fbab:	51                   	push   ecx
c001fbac:	52                   	push   edx
c001fbad:	50                   	push   eax
c001fbae:	e8 1f e4 ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001fbb3:	89 c2                	mov    edx,eax
c001fbb5:	66 ed                	in     ax,dx
c001fbb7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001fbc2:	46                   	inc    esi
c001fbc3:	39 ee                	cmp    esi,ebp
c001fbc5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbcb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbd2:	75 d6                	jne    c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001fbd4:	01 f6                	add    esi,esi
c001fbd6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001fbda:	eb a3                	jmp    c001fb7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001fbdc:	51                   	push   ecx
c001fbdd:	51                   	push   ecx
c001fbde:	52                   	push   edx
c001fbdf:	50                   	push   eax
c001fbe0:	e8 73 e5 ff ff       	call   c001e158 <IDE::waitInterrupt(unsigned char)>
c001fbe5:	83 c4 10             	add    esp,0x10
c001fbe8:	84 c0                	test   al,al
c001fbea:	0f 84 e0 fd ff ff    	je     c001f9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001fbf0:	52                   	push   edx
c001fbf1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fbf6:	52                   	push   edx
c001fbf7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbfe:	50                   	push   eax
c001fbff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc05:	e8 b4 e3 ff ff       	call   c001dfbe <IDE::prepareInterrupt(unsigned char)>
c001fc0a:	83 c4 10             	add    esp,0x10
c001fc0d:	50                   	push   eax
c001fc0e:	50                   	push   eax
c001fc0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc16:	50                   	push   eax
c001fc17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc1d:	e8 b0 e3 ff ff       	call   c001dfd2 <IDE::getBase(unsigned char)>
c001fc22:	8d 50 07             	lea    edx,[eax+0x7]
c001fc25:	ec                   	in     al,dx
c001fc26:	83 c4 10             	add    esp,0x10
c001fc29:	a8 88                	test   al,0x88
c001fc2b:	74 0a                	je     c001fc37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fc2d:	4b                   	dec    ebx
c001fc2e:	75 dd                	jne    c001fc0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fc30:	bb 02 00 00 00       	mov    ebx,0x2
c001fc35:	eb 02                	jmp    c001fc39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc37:	31 db                	xor    ebx,ebx
c001fc39:	83 c4 1c             	add    esp,0x1c
c001fc3c:	89 d8                	mov    eax,ebx
c001fc3e:	5b                   	pop    ebx
c001fc3f:	5e                   	pop    esi
c001fc40:	5f                   	pop    edi
c001fc41:	5d                   	pop    ebp
c001fc42:	c3                   	ret    
c001fc43:	90                   	nop

c001fc44 <ATAPI::diskRemoved()>:
c001fc44:	53                   	push   ebx
c001fc45:	83 ec 14             	sub    esp,0x14
c001fc48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fc4c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fc53:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fc59:	e8 18 ad fe ff       	call   c000a976 <LogicalDisk::unmount()>
c001fc5e:	58                   	pop    eax
c001fc5f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fc65:	e8 ea b6 fe ff       	call   c000b354 <VCache::writeWriteBuffer()>
c001fc6a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fc70:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fc74:	83 c4 18             	add    esp,0x18
c001fc77:	5b                   	pop    ebx
c001fc78:	e9 c7 b6 fe ff       	jmp    c000b344 <VCache::invalidateReadBuffer()>
c001fc7d:	90                   	nop

c001fc7e <ATAPI::eject()>:
c001fc7e:	57                   	push   edi
c001fc7f:	b9 03 00 00 00       	mov    ecx,0x3
c001fc84:	53                   	push   ebx
c001fc85:	83 ec 14             	sub    esp,0x14
c001fc88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fc8c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fc90:	fc                   	cld    
c001fc91:	31 c0                	xor    eax,eax
c001fc93:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fc95:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fc9a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fc9f:	50                   	push   eax
c001fca0:	50                   	push   eax
c001fca1:	6a 00                	push   0x0
c001fca3:	6a 00                	push   0x0
c001fca5:	6a 00                	push   0x0
c001fca7:	6a 02                	push   0x2
c001fca9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fcad:	50                   	push   eax
c001fcae:	53                   	push   ebx
c001fcaf:	e8 d0 fc ff ff       	call   c001f984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fcb4:	83 c4 14             	add    esp,0x14
c001fcb7:	53                   	push   ebx
c001fcb8:	e8 87 ff ff ff       	call   c001fc44 <ATAPI::diskRemoved()>
c001fcbd:	83 c4 24             	add    esp,0x24
c001fcc0:	31 c0                	xor    eax,eax
c001fcc2:	5b                   	pop    ebx
c001fcc3:	5f                   	pop    edi
c001fcc4:	c3                   	ret    
c001fcc5:	90                   	nop

c001fcc6 <ATAPI::diskInserted()>:
c001fcc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fcd1:	c3                   	ret    

c001fcd2 <ATAPI::detectMedia()>:
c001fcd2:	56                   	push   esi
c001fcd3:	53                   	push   ebx
c001fcd4:	83 ec 28             	sub    esp,0x28
c001fcd7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fcdb:	6a 0c                	push   0xc
c001fcdd:	6a 00                	push   0x0
c001fcdf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fce3:	56                   	push   esi
c001fce4:	e8 07 08 fe ff       	call   c00004f0 <memset>
c001fce9:	58                   	pop    eax
c001fcea:	5a                   	pop    edx
c001fceb:	6a 00                	push   0x0
c001fced:	6a 00                	push   0x0
c001fcef:	6a 00                	push   0x0
c001fcf1:	6a 00                	push   0x0
c001fcf3:	56                   	push   esi
c001fcf4:	53                   	push   ebx
c001fcf5:	e8 8a fc ff ff       	call   c001f984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fcfa:	83 c4 1c             	add    esp,0x1c
c001fcfd:	6a 0c                	push   0xc
c001fcff:	6a 00                	push   0x0
c001fd01:	56                   	push   esi
c001fd02:	e8 e9 07 fe ff       	call   c00004f0 <memset>
c001fd07:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fd0c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fd11:	59                   	pop    ecx
c001fd12:	58                   	pop    eax
c001fd13:	6a 01                	push   0x1
c001fd15:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fd19:	50                   	push   eax
c001fd1a:	6a 00                	push   0x0
c001fd1c:	6a 12                	push   0x12
c001fd1e:	56                   	push   esi
c001fd1f:	53                   	push   ebx
c001fd20:	e8 5f fc ff ff       	call   c001f984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd25:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fd29:	83 c4 20             	add    esp,0x20
c001fd2c:	83 e0 7f             	and    eax,0x7f
c001fd2f:	83 f8 70             	cmp    eax,0x70
c001fd32:	74 15                	je     c001fd49 <ATAPI::detectMedia()+0x77>
c001fd34:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd3b:	75 0c                	jne    c001fd49 <ATAPI::detectMedia()+0x77>
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	53                   	push   ebx
c001fd41:	e8 80 ff ff ff       	call   c001fcc6 <ATAPI::diskInserted()>
c001fd46:	83 c4 10             	add    esp,0x10
c001fd49:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fd4d:	83 e0 0f             	and    eax,0xf
c001fd50:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fd55:	0f b6 c0             	movzx  eax,al
c001fd58:	75 19                	jne    c001fd73 <ATAPI::detectMedia()+0xa1>
c001fd5a:	83 f8 02             	cmp    eax,0x2
c001fd5d:	75 14                	jne    c001fd73 <ATAPI::detectMedia()+0xa1>
c001fd5f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd66:	74 24                	je     c001fd8c <ATAPI::detectMedia()+0xba>
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	53                   	push   ebx
c001fd6c:	e8 d3 fe ff ff       	call   c001fc44 <ATAPI::diskRemoved()>
c001fd71:	eb 16                	jmp    c001fd89 <ATAPI::detectMedia()+0xb7>
c001fd73:	85 c0                	test   eax,eax
c001fd75:	75 15                	jne    c001fd8c <ATAPI::detectMedia()+0xba>
c001fd77:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fd7e:	75 0c                	jne    c001fd8c <ATAPI::detectMedia()+0xba>
c001fd80:	83 ec 0c             	sub    esp,0xc
c001fd83:	53                   	push   ebx
c001fd84:	e8 3d ff ff ff       	call   c001fcc6 <ATAPI::diskInserted()>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	83 c4 24             	add    esp,0x24
c001fd8f:	5b                   	pop    ebx
c001fd90:	5e                   	pop    esi
c001fd91:	c3                   	ret    

c001fd92 <ATAPI::open(int, int, void*)>:
c001fd92:	56                   	push   esi
c001fd93:	53                   	push   ebx
c001fd94:	50                   	push   eax
c001fd95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fd9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fda1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fda7:	c1 e0 06             	shl    eax,0x6
c001fdaa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fdb0:	01 d0                	add    eax,edx
c001fdb2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fdb9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fdbf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fdc6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fdd0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fdd7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fddd:	6a 04                	push   0x4
c001fddf:	6a 0c                	push   0xc
c001fde1:	51                   	push   ecx
c001fde2:	52                   	push   edx
c001fde3:	e8 fc e1 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fde8:	90                   	nop
c001fde9:	90                   	nop
c001fdea:	6a 00                	push   0x0
c001fdec:	6a 0c                	push   0xc
c001fdee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdf5:	50                   	push   eax
c001fdf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdfc:	e8 e3 e1 ff ff       	call   c001dfe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe01:	83 c4 14             	add    esp,0x14
c001fe04:	68 78 01 00 00       	push   0x178
c001fe09:	e8 a2 fc fe ff       	call   c000fab0 <malloc>
c001fe0e:	83 c4 0c             	add    esp,0xc
c001fe11:	6a 00                	push   0x0
c001fe13:	68 ff ff ff 7f       	push   0x7fffffff
c001fe18:	6a 00                	push   0x0
c001fe1a:	6a 00                	push   0x0
c001fe1c:	53                   	push   ebx
c001fe1d:	68 97 5c 02 c0       	push   0xc0025c97
c001fe22:	89 c6                	mov    esi,eax
c001fe24:	50                   	push   eax
c001fe25:	e8 8a a9 fe ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fe2a:	83 c4 14             	add    esp,0x14
c001fe2d:	56                   	push   esi
c001fe2e:	e8 41 aa fe ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c001fe33:	5a                   	pop    edx
c001fe34:	59                   	pop    ecx
c001fe35:	0f be c0             	movsx  eax,al
c001fe38:	50                   	push   eax
c001fe39:	68 dc 5a 02 c0       	push   0xc0025adc
c001fe3e:	e8 0b 71 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fe43:	58                   	pop    eax
c001fe44:	5a                   	pop    edx
c001fe45:	56                   	push   esi
c001fe46:	53                   	push   ebx
c001fe47:	e8 4e 9b fe ff       	call   c000999a <Device::addChild(Device*)>
c001fe4c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001fe52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe55:	e8 8c 9f fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c001fe5a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe64:	e8 69 fe ff ff       	call   c001fcd2 <ATAPI::detectMedia()>
c001fe69:	83 c4 14             	add    esp,0x14
c001fe6c:	31 c0                	xor    eax,eax
c001fe6e:	5b                   	pop    ebx
c001fe6f:	5e                   	pop    esi
c001fe70:	c3                   	ret    
c001fe71:	90                   	nop

c001fe72 <ATAPI::read(unsigned long long, int, void*)>:
c001fe72:	55                   	push   ebp
c001fe73:	57                   	push   edi
c001fe74:	56                   	push   esi
c001fe75:	53                   	push   ebx
c001fe76:	83 ec 1c             	sub    esp,0x1c
c001fe79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fe7d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fe81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fe85:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fe8c:	74 3c                	je     c001feca <ATAPI::read(unsigned long long, int, void*)+0x58>
c001fe8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe92:	b9 03 00 00 00       	mov    ecx,0x3
c001fe97:	fc                   	cld    
c001fe98:	31 c0                	xor    eax,eax
c001fe9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe9c:	89 e8                	mov    eax,ebp
c001fe9e:	0f ce                	bswap  esi
c001fea0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fea4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fea9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001fead:	50                   	push   eax
c001feae:	50                   	push   eax
c001feaf:	55                   	push   ebp
c001feb0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001feb4:	c1 e5 0b             	shl    ebp,0xb
c001feb7:	6a 00                	push   0x0
c001feb9:	55                   	push   ebp
c001feba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001febe:	50                   	push   eax
c001febf:	53                   	push   ebx
c001fec0:	e8 bf fa ff ff       	call   c001f984 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fec5:	83 c4 20             	add    esp,0x20
c001fec8:	eb 1a                	jmp    c001fee4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	53                   	push   ebx
c001fece:	e8 ff fd ff ff       	call   c001fcd2 <ATAPI::detectMedia()>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fedd:	75 af                	jne    c001fe8e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fedf:	b8 02 00 00 00       	mov    eax,0x2
c001fee4:	83 c4 1c             	add    esp,0x1c
c001fee7:	5b                   	pop    ebx
c001fee8:	5e                   	pop    esi
c001fee9:	5f                   	pop    edi
c001feea:	5d                   	pop    ebp
c001feeb:	c3                   	ret    

c001feec <SATA::close(int, int, void*)>:
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fef9:	85 c0                	test   eax,eax
c001fefb:	74 0c                	je     c001ff09 <SATA::close(int, int, void*)+0x1d>
c001fefd:	8b 10                	mov    edx,DWORD PTR [eax]
c001feff:	83 ec 0c             	sub    esp,0xc
c001ff02:	50                   	push   eax
c001ff03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ff06:	83 c4 10             	add    esp,0x10
c001ff09:	31 c0                	xor    eax,eax
c001ff0b:	83 c4 0c             	add    esp,0xc
c001ff0e:	c3                   	ret    
c001ff0f:	90                   	nop

c001ff10 <SATA::powerSaving(PowerSavingLevel)>:
c001ff10:	c3                   	ret    
c001ff11:	90                   	nop

c001ff12 <SATA::open(int, int, void*)>:
c001ff12:	56                   	push   esi
c001ff13:	53                   	push   ebx
c001ff14:	83 ec 10             	sub    esp,0x10
c001ff17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff1b:	68 24 5b 02 c0       	push   0xc0025b24
c001ff20:	e8 29 70 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ff25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff29:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff33:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ff3d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ff43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ff47:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ff51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ff58:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ff5e:	e8 8d 00 ff ff       	call   c000fff0 <Phys::allocatePage()>
c001ff63:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ff69:	89 c6                	mov    esi,eax
c001ff6b:	e8 80 00 ff ff       	call   c000fff0 <Phys::allocatePage()>
c001ff70:	81 c6 00 10 00 00    	add    esi,0x1000
c001ff76:	83 c4 10             	add    esp,0x10
c001ff79:	39 c6                	cmp    esi,eax
c001ff7b:	74 10                	je     c001ff8d <SATA::open(int, int, void*)+0x7b>
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	68 30 5b 02 c0       	push   0xc0025b30
c001ff85:	e8 6c fe fe ff       	call   c000fdf6 <KePanic(char const*)>
c001ff8a:	83 c4 10             	add    esp,0x10
c001ff8d:	83 ec 0c             	sub    esp,0xc
c001ff90:	6a 02                	push   0x2
c001ff92:	e8 be 32 ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c001ff97:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff9d:	6a 03                	push   0x3
c001ff9f:	50                   	push   eax
c001ffa0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ffa6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001ffac:	e8 7d 39 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ffb1:	83 c4 14             	add    esp,0x14
c001ffb4:	53                   	push   ebx
c001ffb5:	e8 2c 9e fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c001ffba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffbd:	e8 c4 ac fe ff       	call   c000ac86 <createPartitionsForDisk(PhysicalDisk*)>
c001ffc2:	83 c4 14             	add    esp,0x14
c001ffc5:	31 c0                	xor    eax,eax
c001ffc7:	5b                   	pop    ebx
c001ffc8:	5e                   	pop    esi
c001ffc9:	c3                   	ret    

c001ffca <SATA::SATA()>:
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd1:	83 ec 04             	sub    esp,0x4
c001ffd4:	68 00 02 00 00       	push   0x200
c001ffd9:	68 44 5b 02 c0       	push   0xc0025b44
c001ffde:	50                   	push   eax
c001ffdf:	e8 9a 9d fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ffe4:	83 c4 10             	add    esp,0x10
c001ffe7:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c001ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff0:	89 10                	mov    DWORD PTR [eax],edx
c001fff2:	90                   	nop
c001fff3:	83 c4 0c             	add    esp,0xc
c001fff6:	c3                   	ret    
c001fff7:	90                   	nop

c001fff8 <SATA::access(unsigned long long, int, void*, bool)>:
c001fff8:	55                   	push   ebp
c001fff9:	57                   	push   edi
c001fffa:	56                   	push   esi
c001fffb:	53                   	push   ebx
c001fffc:	83 ec 2c             	sub    esp,0x2c
c001ffff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020003:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020007:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002000b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002000f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020013:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002001b:	fa                   	cli    
c002001c:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0020022:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020027:	7e 10                	jle    c0020039 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020029:	83 ec 0c             	sub    esp,0xc
c002002c:	68 54 5b 02 c0       	push   0xc0025b54
c0020031:	e8 c0 fd fe ff       	call   c000fdf6 <KePanic(char const*)>
c0020036:	83 c4 10             	add    esp,0x10
c0020039:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002003f:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020045:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002004b:	89 e8                	mov    eax,ebp
c002004d:	c1 e0 07             	shl    eax,0x7
c0020050:	01 d0                	add    eax,edx
c0020052:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002005c:	8d 45 02             	lea    eax,[ebp+0x2]
c002005f:	51                   	push   ecx
c0020060:	c1 e0 07             	shl    eax,0x7
c0020063:	51                   	push   ecx
c0020064:	01 d0                	add    eax,edx
c0020066:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002006a:	50                   	push   eax
c002006b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020071:	e8 ee ed ff ff       	call   c001ee64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020076:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0020082:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020086:	0f 84 a6 01 00 00    	je     c0020232 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c002008c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020090:	c1 e0 09             	shl    eax,0x9
c0020093:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002009c:	74 0e                	je     c00200ac <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002009e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00200a4:	89 c1                	mov    ecx,eax
c00200a6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00200aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00200b0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00200b6:	8d 45 02             	lea    eax,[ebp+0x2]
c00200b9:	c1 e0 07             	shl    eax,0x7
c00200bc:	01 d0                	add    eax,edx
c00200be:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00200c6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00200cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00200d0:	c1 e1 05             	shl    ecx,0x5
c00200d3:	01 c8                	add    eax,ecx
c00200d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200d9:	83 e1 01             	and    ecx,0x1
c00200dc:	89 ce                	mov    esi,ecx
c00200de:	8a 08                	mov    cl,BYTE PTR [eax]
c00200e0:	c1 e6 06             	shl    esi,0x6
c00200e3:	83 e1 bf             	and    ecx,0xffffffbf
c00200e6:	09 f1                	or     ecx,esi
c00200e8:	88 08                	mov    BYTE PTR [eax],cl
c00200ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00200ec:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00200f2:	81 c9 05 00 01 00    	or     ecx,0x10005
c00200f8:	89 08                	mov    DWORD PTR [eax],ecx
c00200fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020100:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020106:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002010c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002010f:	50                   	push   eax
c0020110:	68 90 00 00 00       	push   0x90
c0020115:	6a 00                	push   0x0
c0020117:	56                   	push   esi
c0020118:	e8 d3 03 fe ff       	call   c00004f0 <memset>
c002011d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020123:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	48                   	dec    eax
c0020131:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020136:	89 c1                	mov    ecx,eax
c0020138:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002013e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020143:	09 c8                	or     eax,ecx
c0020145:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002014b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020151:	83 c8 80             	or     eax,0xffffff80
c0020154:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002015a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002015d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020161:	25 00 7f 00 00       	and    eax,0x7f00
c0020166:	0d 27 80 ff ff       	or     eax,0xffff8027
c002016b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020170:	66 89 06             	mov    WORD PTR [esi],ax
c0020173:	b0 35                	mov    al,0x35
c0020175:	75 02                	jne    c0020179 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0020177:	b0 25                	mov    al,0x25
c0020179:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002017c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020180:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020184:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020188:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002018c:	c1 e8 10             	shr    eax,0x10
c002018f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020192:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020196:	c1 e8 18             	shr    eax,0x18
c0020199:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002019c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00201a0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00201a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00201a7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00201aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00201ae:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00201b2:	89 ee                	mov    esi,ebp
c00201b4:	31 c0                	xor    eax,eax
c00201b6:	c1 e6 07             	shl    esi,0x7
c00201b9:	01 d6                	add    esi,edx
c00201bb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00201c1:	80 e1 88             	and    cl,0x88
c00201c4:	74 0a                	je     c00201d0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00201c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00201cb:	74 0a                	je     c00201d7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00201cd:	40                   	inc    eax
c00201ce:	eb eb                	jmp    c00201bb <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00201d0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00201d5:	75 0a                	jne    c00201e1 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00201d7:	83 ec 0c             	sub    esp,0xc
c00201da:	68 8d 5b 02 c0       	push   0xc0025b8d
c00201df:	eb 34                	jmp    c0020215 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00201e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00201e5:	c1 e5 07             	shl    ebp,0x7
c00201e8:	b8 01 00 00 00       	mov    eax,0x1
c00201ed:	01 ea                	add    edx,ebp
c00201ef:	d3 e0                	shl    eax,cl
c00201f1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00201f7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00201fd:	85 c8                	test   eax,ecx
c00201ff:	74 25                	je     c0020226 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020201:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020207:	0f ba e1 1e          	bt     ecx,0x1e
c002020b:	73 ea                	jae    c00201f7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002020d:	83 ec 0c             	sub    esp,0xc
c0020210:	68 9b 5b 02 c0       	push   0xc0025b9b
c0020215:	e8 34 6d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c002021a:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020221:	83 c4 10             	add    esp,0x10
c0020224:	eb 13                	jmp    c0020239 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020226:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002022c:	0f ba e0 1e          	bt     eax,0x1e
c0020230:	73 18                	jae    c002024a <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020232:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020239:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0020240:	75 01                	jne    c0020243 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020242:	fb                   	sti    
c0020243:	b8 01 00 00 00       	mov    eax,0x1
c0020248:	eb 2c                	jmp    c0020276 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002024a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002024f:	75 10                	jne    c0020261 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020251:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020257:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002025b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002025f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020261:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020268:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c002026d:	85 c0                	test   eax,eax
c002026f:	75 03                	jne    c0020274 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020271:	fb                   	sti    
c0020272:	eb 02                	jmp    c0020276 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020274:	31 c0                	xor    eax,eax
c0020276:	83 c4 2c             	add    esp,0x2c
c0020279:	5b                   	pop    ebx
c002027a:	5e                   	pop    esi
c002027b:	5f                   	pop    edi
c002027c:	5d                   	pop    ebp
c002027d:	c3                   	ret    

c002027e <SATA::read(unsigned long long, int, void*)>:
c002027e:	57                   	push   edi
c002027f:	b8 04 00 00 00       	mov    eax,0x4
c0020284:	56                   	push   esi
c0020285:	53                   	push   ebx
c0020286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002028a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002028e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020292:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020296:	8d 7a ff             	lea    edi,[edx-0x1]
c0020299:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002029f:	77 25                	ja     c00202c6 <SATA::read(unsigned long long, int, void*)+0x48>
c00202a1:	85 f6                	test   esi,esi
c00202a3:	b8 06 00 00 00       	mov    eax,0x6
c00202a8:	74 1c                	je     c00202c6 <SATA::read(unsigned long long, int, void*)+0x48>
c00202aa:	50                   	push   eax
c00202ab:	50                   	push   eax
c00202ac:	6a 00                	push   0x0
c00202ae:	56                   	push   esi
c00202af:	52                   	push   edx
c00202b0:	53                   	push   ebx
c00202b1:	51                   	push   ecx
c00202b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00202b6:	e8 3d fd ff ff       	call   c001fff8 <SATA::access(unsigned long long, int, void*, bool)>
c00202bb:	83 c4 20             	add    esp,0x20
c00202be:	85 c0                	test   eax,eax
c00202c0:	0f 95 c0             	setne  al
c00202c3:	0f b6 c0             	movzx  eax,al
c00202c6:	5b                   	pop    ebx
c00202c7:	5e                   	pop    esi
c00202c8:	5f                   	pop    edi
c00202c9:	c3                   	ret    

c00202ca <SATA::write(unsigned long long, int, void*)>:
c00202ca:	55                   	push   ebp
c00202cb:	b8 04 00 00 00       	mov    eax,0x4
c00202d0:	57                   	push   edi
c00202d1:	56                   	push   esi
c00202d2:	53                   	push   ebx
c00202d3:	83 ec 0c             	sub    esp,0xc
c00202d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00202da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00202de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00202e2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00202e6:	8d 73 ff             	lea    esi,[ebx-0x1]
c00202e9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00202ef:	77 3d                	ja     c002032e <SATA::write(unsigned long long, int, void*)+0x64>
c00202f1:	85 ed                	test   ebp,ebp
c00202f3:	b8 06 00 00 00       	mov    eax,0x6
c00202f8:	74 34                	je     c002032e <SATA::write(unsigned long long, int, void*)+0x64>
c00202fa:	c1 e3 09             	shl    ebx,0x9
c00202fd:	01 eb                	add    ebx,ebp
c00202ff:	50                   	push   eax
c0020300:	89 d6                	mov    esi,edx
c0020302:	50                   	push   eax
c0020303:	83 c6 01             	add    esi,0x1
c0020306:	6a 01                	push   0x1
c0020308:	89 cf                	mov    edi,ecx
c002030a:	55                   	push   ebp
c002030b:	83 d7 00             	adc    edi,0x0
c002030e:	6a 01                	push   0x1
c0020310:	81 c5 00 02 00 00    	add    ebp,0x200
c0020316:	51                   	push   ecx
c0020317:	52                   	push   edx
c0020318:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002031c:	e8 d7 fc ff ff       	call   c001fff8 <SATA::access(unsigned long long, int, void*, bool)>
c0020321:	83 c4 20             	add    esp,0x20
c0020324:	39 dd                	cmp    ebp,ebx
c0020326:	89 f2                	mov    edx,esi
c0020328:	89 f9                	mov    ecx,edi
c002032a:	75 d3                	jne    c00202ff <SATA::write(unsigned long long, int, void*)+0x35>
c002032c:	31 c0                	xor    eax,eax
c002032e:	83 c4 0c             	add    esp,0xc
c0020331:	5b                   	pop    ebx
c0020332:	5e                   	pop    esi
c0020333:	5f                   	pop    edi
c0020334:	5d                   	pop    ebp
c0020335:	c3                   	ret    

c0020336 <SATAPI::write(unsigned long long, int, void*)>:
c0020336:	b8 03 00 00 00       	mov    eax,0x3
c002033b:	c3                   	ret    

c002033c <SATAPI::close(int, int, void*)>:
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020343:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020349:	85 c0                	test   eax,eax
c002034b:	74 0c                	je     c0020359 <SATAPI::close(int, int, void*)+0x1d>
c002034d:	8b 10                	mov    edx,DWORD PTR [eax]
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	50                   	push   eax
c0020353:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020356:	83 c4 10             	add    esp,0x10
c0020359:	31 c0                	xor    eax,eax
c002035b:	83 c4 0c             	add    esp,0xc
c002035e:	c3                   	ret    
c002035f:	90                   	nop

c0020360 <SATAPI::SATAPI()>:
c0020360:	83 ec 0c             	sub    esp,0xc
c0020363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020367:	83 ec 04             	sub    esp,0x4
c002036a:	68 00 08 00 00       	push   0x800
c002036f:	68 e4 5b 02 c0       	push   0xc0025be4
c0020374:	50                   	push   eax
c0020375:	e8 04 9a fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002037a:	83 c4 10             	add    esp,0x10
c002037d:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0020382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020386:	89 10                	mov    DWORD PTR [eax],edx
c0020388:	90                   	nop
c0020389:	83 c4 0c             	add    esp,0xc
c002038c:	c3                   	ret    
c002038d:	90                   	nop

c002038e <SATAPI::diskRemoved()>:
c002038e:	c3                   	ret    
c002038f:	90                   	nop

c0020390 <SATAPI::diskInserted()>:
c0020390:	83 ec 18             	sub    esp,0x18
c0020393:	68 f0 5b 02 c0       	push   0xc0025bf0
c0020398:	e8 b1 6b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c002039d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203a1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00203a8:	83 c4 1c             	add    esp,0x1c
c00203ab:	c3                   	ret    

c00203ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00203ac:	55                   	push   ebp
c00203ad:	57                   	push   edi
c00203ae:	56                   	push   esi
c00203af:	53                   	push   ebx
c00203b0:	83 ec 34             	sub    esp,0x34
c00203b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00203b7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00203bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00203c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00203c7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00203cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00203d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00203d7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00203dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203e1:	83 c0 02             	add    eax,0x2
c00203e4:	c1 e0 07             	shl    eax,0x7
c00203e7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00203eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203f3:	c1 e0 07             	shl    eax,0x7
c00203f6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00203fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00203fe:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020408:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002040c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020412:	e8 4d ea ff ff       	call   c001ee64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020417:	83 c4 10             	add    esp,0x10
c002041a:	89 c2                	mov    edx,eax
c002041c:	b8 01 00 00 00       	mov    eax,0x1
c0020421:	83 fa ff             	cmp    edx,0xffffffff
c0020424:	0f 84 63 02 00 00    	je     c002068d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002042a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002042e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020432:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020438:	8b 00                	mov    eax,DWORD PTR [eax]
c002043a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020440:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020446:	89 d1                	mov    ecx,edx
c0020448:	c1 e1 05             	shl    ecx,0x5
c002044b:	01 c8                	add    eax,ecx
c002044d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002044f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020455:	81 c9 25 00 01 00    	or     ecx,0x10025
c002045b:	89 08                	mov    DWORD PTR [eax],ecx
c002045d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020463:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020469:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002046f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020472:	50                   	push   eax
c0020473:	68 90 00 00 00       	push   0x90
c0020478:	6a 00                	push   0x0
c002047a:	53                   	push   ebx
c002047b:	e8 70 00 fe ff       	call   c00004f0 <memset>
c0020480:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020483:	b9 0c 00 00 00       	mov    ecx,0xc
c0020488:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002048c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002048e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020494:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020498:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002049c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00204a2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00204a6:	48                   	dec    eax
c00204a7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00204ac:	89 c1                	mov    ecx,eax
c00204ae:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00204b4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00204b9:	09 c8                	or     eax,ecx
c00204bb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00204c1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00204c7:	83 c8 80             	or     eax,0xffffff80
c00204ca:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00204d0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00204d3:	25 00 7f 00 00       	and    eax,0x7f00
c00204d8:	0d 27 80 ff ff       	or     eax,0xffff8027
c00204dd:	66 89 03             	mov    WORD PTR [ebx],ax
c00204e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204e4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00204e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204ec:	c1 e8 10             	shr    eax,0x10
c00204ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00204f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204f6:	c1 e8 18             	shr    eax,0x18
c00204f9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00204fc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020500:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020507:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002050a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002050e:	83 c4 10             	add    esp,0x10
c0020511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020515:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020519:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002051d:	31 c0                	xor    eax,eax
c002051f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020525:	80 e1 88             	and    cl,0x88
c0020528:	74 0a                	je     c0020534 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002052a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002052f:	74 0a                	je     c002053b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020531:	40                   	inc    eax
c0020532:	eb eb                	jmp    c002051f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020534:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020539:	75 43                	jne    c002057e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002053b:	83 ec 0c             	sub    esp,0xc
c002053e:	68 08 5c 02 c0       	push   0xc0025c08
c0020543:	e8 06 6a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020548:	58                   	pop    eax
c0020549:	5a                   	pop    edx
c002054a:	68 1d 5c 02 c0       	push   0xc0025c1d
c002054f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0020555:	e8 e0 20 ff ff       	call   c001263a <VgaText::puts(char const*)>
c002055a:	59                   	pop    ecx
c002055b:	5b                   	pop    ebx
c002055c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020560:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020566:	e8 93 e9 ff ff       	call   c001eefe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002056b:	5e                   	pop    esi
c002056c:	5f                   	pop    edi
c002056d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020571:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020577:	e8 62 e9 ff ff       	call   c001eede <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002057c:	eb 48                	jmp    c00205c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002057e:	b8 01 00 00 00       	mov    eax,0x1
c0020583:	88 d1                	mov    cl,dl
c0020585:	d3 e0                	shl    eax,cl
c0020587:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002058c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020592:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020596:	89 c7                	mov    edi,eax
c0020598:	c1 e3 07             	shl    ebx,0x7
c002059b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002059f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00205a5:	85 c7                	test   edi,eax
c00205a7:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00205ad:	0f 84 a7 00 00 00    	je     c002065a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c00205b3:	0f ba e0 1e          	bt     eax,0x1e
c00205b7:	73 1a                	jae    c00205d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c00205b9:	83 ec 0c             	sub    esp,0xc
c00205bc:	68 2f 5c 02 c0       	push   0xc0025c2f
c00205c1:	e8 88 69 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00205c6:	83 c4 10             	add    esp,0x10
c00205c9:	b8 01 00 00 00       	mov    eax,0x1
c00205ce:	e9 ba 00 00 00       	jmp    c002068d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c00205d3:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c00205d9:	83 f8 0d             	cmp    eax,0xd
c00205dc:	77 0b                	ja     c00205e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c00205de:	50                   	push   eax
c00205df:	50                   	push   eax
c00205e0:	6a 00                	push   0x0
c00205e2:	68 c8 00 00 00       	push   0xc8
c00205e7:	eb 2a                	jmp    c0020613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00205e9:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c00205ef:	83 f8 0d             	cmp    eax,0xd
c00205f2:	77 0b                	ja     c00205ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00205f4:	51                   	push   ecx
c00205f5:	51                   	push   ecx
c00205f6:	6a 00                	push   0x0
c00205f8:	68 58 02 00 00       	push   0x258
c00205fd:	eb 14                	jmp    c0020613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00205ff:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020605:	83 f8 06             	cmp    eax,0x6
c0020608:	77 11                	ja     c002061b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c002060a:	52                   	push   edx
c002060b:	52                   	push   edx
c002060c:	6a 00                	push   0x0
c002060e:	68 dc 05 00 00       	push   0x5dc
c0020613:	e8 00 69 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0020618:	83 c4 10             	add    esp,0x10
c002061b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002061f:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020622:	75 06                	jne    c002062a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020624:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020628:	74 16                	je     c0020640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c002062a:	83 fe 06             	cmp    esi,0x6
c002062d:	77 11                	ja     c0020640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c002062f:	50                   	push   eax
c0020630:	50                   	push   eax
c0020631:	6a 00                	push   0x0
c0020633:	68 c4 09 00 00       	push   0x9c4
c0020638:	e8 db 68 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c002063d:	83 c4 10             	add    esp,0x10
c0020640:	46                   	inc    esi
c0020641:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020647:	0f 85 52 ff ff ff    	jne    c002059f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002064d:	83 ec 0c             	sub    esp,0xc
c0020650:	68 42 5c 02 c0       	push   0xc0025c42
c0020655:	e9 67 ff ff ff       	jmp    c00205c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002065a:	0f ba e0 1e          	bt     eax,0x1e
c002065e:	73 0d                	jae    c002066d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020660:	83 ec 0c             	sub    esp,0xc
c0020663:	68 56 5c 02 c0       	push   0xc0025c56
c0020668:	e9 54 ff ff ff       	jmp    c00205c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002066d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020672:	74 17                	je     c002068b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020674:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020679:	74 10                	je     c002068b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c002067b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020681:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020685:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020689:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002068b:	31 c0                	xor    eax,eax
c002068d:	83 c4 2c             	add    esp,0x2c
c0020690:	5b                   	pop    ebx
c0020691:	5e                   	pop    esi
c0020692:	5f                   	pop    edi
c0020693:	5d                   	pop    ebp
c0020694:	c3                   	ret    
c0020695:	90                   	nop

c0020696 <SATAPI::eject()>:
c0020696:	57                   	push   edi
c0020697:	b9 03 00 00 00       	mov    ecx,0x3
c002069c:	83 ec 18             	sub    esp,0x18
c002069f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00206a3:	fc                   	cld    
c00206a4:	31 c0                	xor    eax,eax
c00206a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206a8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00206ad:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00206b2:	50                   	push   eax
c00206b3:	6a 00                	push   0x0
c00206b5:	6a 00                	push   0x0
c00206b7:	6a 00                	push   0x0
c00206b9:	6a 00                	push   0x0
c00206bb:	6a 02                	push   0x2
c00206bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00206c1:	50                   	push   eax
c00206c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00206c6:	e8 e1 fc ff ff       	call   c00203ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00206cb:	83 c4 38             	add    esp,0x38
c00206ce:	31 c0                	xor    eax,eax
c00206d0:	5f                   	pop    edi
c00206d1:	c3                   	ret    

c00206d2 <SATAPI::detectMedia()>:
c00206d2:	53                   	push   ebx
c00206d3:	83 ec 14             	sub    esp,0x14
c00206d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00206da:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00206e0:	e8 6f ac fe ff       	call   c000b354 <VCache::writeWriteBuffer()>
c00206e5:	59                   	pop    ecx
c00206e6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00206ec:	e8 53 ac fe ff       	call   c000b344 <VCache::invalidateReadBuffer()>
c00206f1:	c7 04 24 6b 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c6b
c00206f8:	e8 51 68 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00206fd:	83 c4 10             	add    esp,0x10
c0020700:	31 c0                	xor    eax,eax
c0020702:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020709:	85 d2                	test   edx,edx
c002070b:	74 0f                	je     c002071c <SATAPI::detectMedia()+0x4a>
c002070d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020713:	75 07                	jne    c002071c <SATAPI::detectMedia()+0x4a>
c0020715:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002071c:	40                   	inc    eax
c002071d:	83 f8 1a             	cmp    eax,0x1a
c0020720:	75 e0                	jne    c0020702 <SATAPI::detectMedia()+0x30>
c0020722:	83 c4 08             	add    esp,0x8
c0020725:	5b                   	pop    ebx
c0020726:	c3                   	ret    
c0020727:	90                   	nop

c0020728 <SATAPI::open(int, int, void*)>:
c0020728:	56                   	push   esi
c0020729:	53                   	push   ebx
c002072a:	51                   	push   ecx
c002072b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002072f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020733:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002073d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020747:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020751:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002075b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020762:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020768:	e8 83 f8 fe ff       	call   c000fff0 <Phys::allocatePage()>
c002076d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020773:	89 c6                	mov    esi,eax
c0020775:	e8 76 f8 fe ff       	call   c000fff0 <Phys::allocatePage()>
c002077a:	81 c6 00 10 00 00    	add    esi,0x1000
c0020780:	39 c6                	cmp    esi,eax
c0020782:	74 10                	je     c0020794 <SATAPI::open(int, int, void*)+0x6c>
c0020784:	83 ec 0c             	sub    esp,0xc
c0020787:	68 80 5c 02 c0       	push   0xc0025c80
c002078c:	e8 65 f6 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	83 ec 0c             	sub    esp,0xc
c0020797:	6a 02                	push   0x2
c0020799:	e8 b7 2a ff ff       	call   c0013255 <Virt::allocateKernelVirtualPages(int)>
c002079e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00207a4:	6a 03                	push   0x3
c00207a6:	50                   	push   eax
c00207a7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00207ad:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00207b3:	e8 76 31 ff ff       	call   c001392e <VAS::mapPage(unsigned long, unsigned long, int)>
c00207b8:	83 c4 14             	add    esp,0x14
c00207bb:	68 78 01 00 00       	push   0x178
c00207c0:	e8 eb f2 fe ff       	call   c000fab0 <malloc>
c00207c5:	83 c4 0c             	add    esp,0xc
c00207c8:	6a 00                	push   0x0
c00207ca:	68 ff ff ff 7f       	push   0x7fffffff
c00207cf:	6a 00                	push   0x0
c00207d1:	6a 00                	push   0x0
c00207d3:	53                   	push   ebx
c00207d4:	68 96 5c 02 c0       	push   0xc0025c96
c00207d9:	89 c6                	mov    esi,eax
c00207db:	50                   	push   eax
c00207dc:	e8 d3 9f fe ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00207e1:	83 c4 14             	add    esp,0x14
c00207e4:	56                   	push   esi
c00207e5:	e8 8a a0 fe ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c00207ea:	5a                   	pop    edx
c00207eb:	59                   	pop    ecx
c00207ec:	0f be c0             	movsx  eax,al
c00207ef:	50                   	push   eax
c00207f0:	68 dc 5a 02 c0       	push   0xc0025adc
c00207f5:	e8 54 67 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00207fa:	58                   	pop    eax
c00207fb:	5a                   	pop    edx
c00207fc:	56                   	push   esi
c00207fd:	53                   	push   ebx
c00207fe:	e8 97 91 fe ff       	call   c000999a <Device::addChild(Device*)>
c0020803:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020809:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002080c:	e8 d5 95 fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c0020811:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002081b:	e8 b2 fe ff ff       	call   c00206d2 <SATAPI::detectMedia()>
c0020820:	83 c4 14             	add    esp,0x14
c0020823:	31 c0                	xor    eax,eax
c0020825:	5b                   	pop    ebx
c0020826:	5e                   	pop    esi
c0020827:	c3                   	ret    

c0020828 <SATAPI::read(unsigned long long, int, void*)>:
c0020828:	55                   	push   ebp
c0020829:	57                   	push   edi
c002082a:	56                   	push   esi
c002082b:	53                   	push   ebx
c002082c:	83 ec 3c             	sub    esp,0x3c
c002082f:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0020833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020837:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002083b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002083f:	83 fd 04             	cmp    ebp,0x4
c0020842:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020846:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002084a:	7e 10                	jle    c002085c <SATAPI::read(unsigned long long, int, void*)+0x34>
c002084c:	83 ec 0c             	sub    esp,0xc
c002084f:	68 a4 5c 02 c0       	push   0xc0025ca4
c0020854:	e8 9d f5 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0020859:	83 c4 10             	add    esp,0x10
c002085c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020862:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020868:	51                   	push   ecx
c0020869:	50                   	push   eax
c002086a:	83 c0 02             	add    eax,0x2
c002086d:	c1 e0 07             	shl    eax,0x7
c0020870:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020876:	50                   	push   eax
c0020877:	52                   	push   edx
c0020878:	e8 ab e6 ff ff       	call   c001ef28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002087d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020881:	b9 03 00 00 00       	mov    ecx,0x3
c0020886:	fc                   	cld    
c0020887:	31 c0                	xor    eax,eax
c0020889:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002088b:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020890:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020895:	83 c4 0c             	add    esp,0xc
c0020898:	6a 00                	push   0x0
c002089a:	6a 00                	push   0x0
c002089c:	6a 00                	push   0x0
c002089e:	6a 00                	push   0x0
c00208a0:	6a 02                	push   0x2
c00208a2:	8d 44 24 30          	lea    eax,[esp+0x30]
c00208a6:	50                   	push   eax
c00208a7:	53                   	push   ebx
c00208a8:	e8 ff fa ff ff       	call   c00203ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00208ad:	83 c4 20             	add    esp,0x20
c00208b0:	85 c0                	test   eax,eax
c00208b2:	89 c6                	mov    esi,eax
c00208b4:	75 46                	jne    c00208fc <SATAPI::read(unsigned long long, int, void*)+0xd4>
c00208b6:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00208ba:	b9 03 00 00 00       	mov    ecx,0x3
c00208bf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00208c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c5:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00208ca:	0f c8                	bswap  eax
c00208cc:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00208d0:	89 e8                	mov    eax,ebp
c00208d2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00208d6:	50                   	push   eax
c00208d7:	55                   	push   ebp
c00208d8:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00208dc:	c1 e5 0b             	shl    ebp,0xb
c00208df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208e7:	55                   	push   ebp
c00208e8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00208ec:	50                   	push   eax
c00208ed:	53                   	push   ebx
c00208ee:	e8 b9 fa ff ff       	call   c00203ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00208f3:	83 c4 20             	add    esp,0x20
c00208f6:	85 c0                	test   eax,eax
c00208f8:	89 c6                	mov    esi,eax
c00208fa:	74 0c                	je     c0020908 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c00208fc:	83 ec 0c             	sub    esp,0xc
c00208ff:	53                   	push   ebx
c0020900:	e8 cd fd ff ff       	call   c00206d2 <SATAPI::detectMedia()>
c0020905:	83 c4 10             	add    esp,0x10
c0020908:	83 c4 3c             	add    esp,0x3c
c002090b:	89 f0                	mov    eax,esi
c002090d:	5b                   	pop    ebx
c002090e:	5e                   	pop    esi
c002090f:	5f                   	pop    edi
c0020910:	5d                   	pop    ebp
c0020911:	c3                   	ret    

c0020912 <IOAPIC::close(int, int, void*)>:
c0020912:	b8 00 00 00 00       	mov    eax,0x0
c0020917:	c3                   	ret    

c0020918 <apicGetBase()>:
c0020918:	55                   	push   ebp
c0020919:	89 e5                	mov    ebp,esp
c002091b:	83 ec 08             	sub    esp,0x8
c002091e:	83 ec 0c             	sub    esp,0xc
c0020921:	68 08 5d 02 c0       	push   0xc0025d08
c0020926:	e8 cb f4 fe ff       	call   c000fdf6 <KePanic(char const*)>
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	b8 00 00 00 00       	mov    eax,0x0
c0020933:	c9                   	leave  
c0020934:	c3                   	ret    
c0020935:	90                   	nop

c0020936 <IOAPIC::IOAPIC()>:
c0020936:	83 ec 0c             	sub    esp,0xc
c0020939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093d:	83 ec 08             	sub    esp,0x8
c0020940:	68 17 5d 02 c0       	push   0xc0025d17
c0020945:	50                   	push   eax
c0020946:	e8 b1 91 fe ff       	call   c0009afc <Device::Device(char const*)>
c002094b:	83 c4 10             	add    esp,0x10
c002094e:	ba 38 5d 02 c0       	mov    edx,0xc0025d38
c0020953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020957:	89 10                	mov    DWORD PTR [eax],edx
c0020959:	90                   	nop
c002095a:	83 c4 0c             	add    esp,0xc
c002095d:	c3                   	ret    

c002095e <apicOpen()>:
c002095e:	55                   	push   ebp
c002095f:	89 e5                	mov    ebp,esp
c0020961:	53                   	push   ebx
c0020962:	83 ec 34             	sub    esp,0x34
c0020965:	83 ec 0c             	sub    esp,0xc
c0020968:	68 1f 5d 02 c0       	push   0xc0025d1f
c002096d:	e8 dc 65 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c002097a:	83 f0 01             	xor    eax,0x1
c002097d:	0f b6 c0             	movzx  eax,al
c0020980:	85 c0                	test   eax,eax
c0020982:	0f 84 a3 00 00 00    	je     c0020a2b <apicOpen()+0xcd>
c0020988:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002098c:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0020991:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020995:	0f b6 c0             	movzx  eax,al
c0020998:	39 c2                	cmp    edx,eax
c002099a:	0f 83 84 00 00 00    	jae    c0020a24 <apicOpen()+0xc6>
c00209a0:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00209a7:	83 ec 0c             	sub    esp,0xc
c00209aa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00209ad:	e8 fe f0 fe ff       	call   c000fab0 <malloc>
c00209b2:	83 c4 10             	add    esp,0x10
c00209b5:	89 c3                	mov    ebx,eax
c00209b7:	83 ec 0c             	sub    esp,0xc
c00209ba:	53                   	push   ebx
c00209bb:	e8 76 ff ff ff       	call   c0020936 <IOAPIC::IOAPIC()>
c00209c0:	83 c4 10             	add    esp,0x10
c00209c3:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00209c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00209ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00209cd:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c00209d4:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c00209d9:	83 c0 01             	add    eax,0x1
c00209dc:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c00209e1:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00209e6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00209ec:	83 ec 08             	sub    esp,0x8
c00209ef:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00209f2:	50                   	push   eax
c00209f3:	e8 a2 8f fe ff       	call   c000999a <Device::addChild(Device*)>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00209fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a00:	83 c0 08             	add    eax,0x8
c0020a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a05:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020a09:	6a 00                	push   0x0
c0020a0b:	6a 00                	push   0x0
c0020a0d:	52                   	push   edx
c0020a0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020a11:	ff d0                	call   eax
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020a19:	83 c0 01             	add    eax,0x1
c0020a1c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020a1f:	e9 68 ff ff ff       	jmp    c002098c <apicOpen()+0x2e>
c0020a24:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020a2b:	e8 e8 fe ff ff       	call   c0020918 <apicGetBase()>
c0020a30:	05 f0 00 00 00       	add    eax,0xf0
c0020a35:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020a38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a3d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020a40:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020a47:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020a4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020a51:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020a54:	89 10                	mov    DWORD PTR [eax],edx
c0020a56:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020a5d:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020a62:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020a65:	7d 7c                	jge    c0020ae3 <apicOpen()+0x185>
c0020a67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a6a:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020a71:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020a74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a77:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020a7e:	c1 e8 08             	shr    eax,0x8
c0020a81:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020a85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020a88:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020a8f:	c1 e8 18             	shr    eax,0x18
c0020a92:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020a95:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020a99:	3d ff 00 00 00       	cmp    eax,0xff
c0020a9e:	75 3a                	jne    c0020ada <apicOpen()+0x17c>
c0020aa0:	e8 73 fe ff ff       	call   c0020918 <apicGetBase()>
c0020aa5:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020aa9:	83 fa 01             	cmp    edx,0x1
c0020aac:	75 07                	jne    c0020ab5 <apicOpen()+0x157>
c0020aae:	ba 60 03 00 00       	mov    edx,0x360
c0020ab3:	eb 05                	jmp    c0020aba <apicOpen()+0x15c>
c0020ab5:	ba 50 03 00 00       	mov    edx,0x350
c0020aba:	01 d0                	add    eax,edx
c0020abc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020abf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ac4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020ac7:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020ace:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020ad2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ad5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020ad8:	89 10                	mov    DWORD PTR [eax],edx
c0020ada:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020ade:	e9 7a ff ff ff       	jmp    c0020a5d <apicOpen()+0xff>
c0020ae3:	90                   	nop
c0020ae4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020ae7:	c9                   	leave  
c0020ae8:	c3                   	ret    
c0020ae9:	90                   	nop

c0020aea <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020aea:	55                   	push   ebp
c0020aeb:	89 e5                	mov    ebp,esp
c0020aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020af0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020af6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020af9:	72 1d                	jb     c0020b18 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020afe:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b07:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020b0d:	01 d0                	add    eax,edx
c0020b0f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020b12:	73 04                	jae    c0020b18 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020b14:	b0 01                	mov    al,0x1
c0020b16:	eb 02                	jmp    c0020b1a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020b18:	b0 00                	mov    al,0x0
c0020b1a:	5d                   	pop    ebp
c0020b1b:	c3                   	ret    

c0020b1c <IOAPIC::read(int)>:
c0020b1c:	55                   	push   ebp
c0020b1d:	89 e5                	mov    ebp,esp
c0020b1f:	83 ec 10             	sub    esp,0x10
c0020b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b2b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020b2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020b31:	0f b6 d0             	movzx  edx,al
c0020b34:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020b37:	89 10                	mov    DWORD PTR [eax],edx
c0020b39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020b3c:	83 c0 10             	add    eax,0x10
c0020b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b41:	c9                   	leave  
c0020b42:	c3                   	ret    
c0020b43:	90                   	nop

c0020b44 <IOAPIC::open(int, int, void*)>:
c0020b44:	55                   	push   ebp
c0020b45:	89 e5                	mov    ebp,esp
c0020b47:	57                   	push   edi
c0020b48:	56                   	push   esi
c0020b49:	53                   	push   ebx
c0020b4a:	83 ec 04             	sub    esp,0x4
c0020b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020b53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b62:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c0020b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b75:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b7b:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b85:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b8e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020b9d:	0f b6 f0             	movzx  esi,al
c0020ba0:	89 d0                	mov    eax,edx
c0020ba2:	ba 00 00 00 00       	mov    edx,0x0
c0020ba7:	89 c7                	mov    edi,eax
c0020ba9:	83 e7 ff             	and    edi,0xffffffff
c0020bac:	89 f9                	mov    ecx,edi
c0020bae:	0f b6 da             	movzx  ebx,dl
c0020bb1:	89 c8                	mov    eax,ecx
c0020bb3:	89 da                	mov    edx,ebx
c0020bb5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020bb8:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020bbb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020bbf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020bc3:	83 e0 00             	and    eax,0x0
c0020bc6:	09 d0                	or     eax,edx
c0020bc8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bcf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020bd5:	8d 50 01             	lea    edx,[eax+0x1]
c0020bd8:	88 d1                	mov    cl,dl
c0020bda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020bdd:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020be3:	0f b6 d0             	movzx  edx,al
c0020be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020be9:	83 c2 08             	add    edx,0x8
c0020bec:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020bf0:	0f b6 c9             	movzx  ecx,cl
c0020bf3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020bf9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020bfd:	6a 01                	push   0x1
c0020bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c02:	e8 15 ff ff ff       	call   c0020b1c <IOAPIC::read(int)>
c0020c07:	83 c4 08             	add    esp,0x8
c0020c0a:	c1 f8 10             	sar    eax,0x10
c0020c0d:	0f b6 c0             	movzx  eax,al
c0020c10:	8d 50 01             	lea    edx,[eax+0x1]
c0020c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c16:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020c1c:	b8 00 00 00 00       	mov    eax,0x0
c0020c21:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020c24:	5b                   	pop    ebx
c0020c25:	5e                   	pop    esi
c0020c26:	5f                   	pop    edi
c0020c27:	5d                   	pop    ebp
c0020c28:	c3                   	ret    
c0020c29:	90                   	nop

c0020c2a <IOAPIC::write(int, int)>:
c0020c2a:	55                   	push   ebp
c0020c2b:	89 e5                	mov    ebp,esp
c0020c2d:	83 ec 10             	sub    esp,0x10
c0020c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c33:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020c39:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020c3f:	0f b6 d0             	movzx  edx,al
c0020c42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020c45:	89 10                	mov    DWORD PTR [eax],edx
c0020c47:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020c4a:	8d 50 10             	lea    edx,[eax+0x10]
c0020c4d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020c50:	89 02                	mov    DWORD PTR [edx],eax
c0020c52:	90                   	nop
c0020c53:	c9                   	leave  
c0020c54:	c3                   	ret    
c0020c55:	90                   	nop

c0020c56 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020c56:	55                   	push   ebp
c0020c57:	89 e5                	mov    ebp,esp
c0020c59:	53                   	push   ebx
c0020c5a:	83 ec 2c             	sub    esp,0x2c
c0020c5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020c60:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020c63:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020c66:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020c69:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020c6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020c6f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020c72:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020c75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020c78:	88 d8                	mov    al,bl
c0020c7a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020c7d:	88 c8                	mov    al,cl
c0020c7f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020c82:	88 d0                	mov    al,dl
c0020c84:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020c87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020c8b:	83 c0 08             	add    eax,0x8
c0020c8e:	d1 e0                	shl    eax,1
c0020c90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020c93:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020c97:	83 c0 08             	add    eax,0x8
c0020c9a:	d1 e0                	shl    eax,1
c0020c9c:	83 c0 01             	add    eax,0x1
c0020c9f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020ca2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020ca5:	50                   	push   eax
c0020ca6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ca9:	e8 6e fe ff ff       	call   c0020b1c <IOAPIC::read(int)>
c0020cae:	83 c4 08             	add    esp,0x8
c0020cb1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020cb4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020cbb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020cbe:	c1 e0 18             	shl    eax,0x18
c0020cc1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020cc4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020cc7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020cca:	52                   	push   edx
c0020ccb:	50                   	push   eax
c0020ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ccf:	e8 56 ff ff ff       	call   c0020c2a <IOAPIC::write(int, int)>
c0020cd4:	83 c4 0c             	add    esp,0xc
c0020cd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020cda:	50                   	push   eax
c0020cdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020cde:	e8 39 fe ff ff       	call   c0020b1c <IOAPIC::read(int)>
c0020ce3:	83 c4 08             	add    esp,0x8
c0020ce6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020ce9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020cf0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020cf7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020cfe:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020d02:	85 c0                	test   eax,eax
c0020d04:	74 09                	je     c0020d0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020d06:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020d0d:	eb 07                	jmp    c0020d16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020d0f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020d16:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020d1a:	85 c0                	test   eax,eax
c0020d1c:	74 09                	je     c0020d27 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020d1e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020d25:	eb 07                	jmp    c0020d2e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020d27:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020d2e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020d35:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020d39:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020d3c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020d3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020d42:	52                   	push   edx
c0020d43:	50                   	push   eax
c0020d44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d47:	e8 de fe ff ff       	call   c0020c2a <IOAPIC::write(int, int)>
c0020d4c:	83 c4 0c             	add    esp,0xc
c0020d4f:	90                   	nop
c0020d50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020d53:	c9                   	leave  
c0020d54:	c3                   	ret    
c0020d55:	66 90                	xchg   ax,ax
c0020d57:	90                   	nop

c0020d58 <APICTimer::close(int, int, void*)>:
c0020d58:	b8 00 00 00 00       	mov    eax,0x0
c0020d5d:	c3                   	ret    
c0020d5e:	66 90                	xchg   ax,ax

c0020d60 <apicTimerHandler(regs*, void*)>:
c0020d60:	83 ec 0c             	sub    esp,0xc
c0020d63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020d69:	b8 10 27 00 00       	mov    eax,0x2710
c0020d6e:	ba 00 00 00 00       	mov    edx,0x0
c0020d73:	f7 f1                	div    ecx
c0020d75:	83 ec 0c             	sub    esp,0xc
c0020d78:	50                   	push   eax
c0020d79:	e8 f2 a2 fe ff       	call   c000b070 <timerHandler(unsigned int)>
c0020d7e:	83 c4 10             	add    esp,0x10
c0020d81:	90                   	nop
c0020d82:	83 c4 0c             	add    esp,0xc
c0020d85:	c3                   	ret    
c0020d86:	66 90                	xchg   ax,ax

c0020d88 <APICTimer::open(int, int, void*)>:
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d91:	83 c0 24             	add    eax,0x24
c0020d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d96:	83 ec 08             	sub    esp,0x8
c0020d99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020da1:	ff d0                	call   eax
c0020da3:	83 c4 10             	add    esp,0x10
c0020da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020daa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020dae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020dbc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020dc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020dc6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020dcc:	83 ec 0c             	sub    esp,0xc
c0020dcf:	51                   	push   ecx
c0020dd0:	6a 01                	push   0x1
c0020dd2:	68 60 0d 02 c0       	push   0xc0020d60
c0020dd7:	52                   	push   edx
c0020dd8:	50                   	push   eax
c0020dd9:	e8 68 8b fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dde:	83 c4 20             	add    esp,0x20
c0020de1:	89 c2                	mov    edx,eax
c0020de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020ded:	b8 00 00 00 00       	mov    eax,0x0
c0020df2:	83 c4 0c             	add    esp,0xc
c0020df5:	c3                   	ret    
c0020df6:	66 90                	xchg   ax,ax

c0020df8 <APICTimer::write(int)>:
c0020df8:	83 ec 0c             	sub    esp,0xc
c0020dfb:	83 ec 0c             	sub    esp,0xc
c0020dfe:	68 5c 5d 02 c0       	push   0xc0025d5c
c0020e03:	e8 ee ef fe ff       	call   c000fdf6 <KePanic(char const*)>
c0020e08:	83 c4 10             	add    esp,0x10
c0020e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020e19:	90                   	nop
c0020e1a:	83 c4 0c             	add    esp,0xc
c0020e1d:	c3                   	ret    
c0020e1e:	66 90                	xchg   ax,ax

c0020e20 <APICTimer::APICTimer()>:
c0020e20:	83 ec 0c             	sub    esp,0xc
c0020e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e27:	83 ec 08             	sub    esp,0x8
c0020e2a:	68 6c 5d 02 c0       	push   0xc0025d6c
c0020e2f:	50                   	push   eax
c0020e30:	e8 6f a1 fe ff       	call   c000afa4 <Timer::Timer(char const*)>
c0020e35:	83 c4 10             	add    esp,0x10
c0020e38:	ba 80 5d 02 c0       	mov    edx,0xc0025d80
c0020e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e41:	89 10                	mov    DWORD PTR [eax],edx
c0020e43:	90                   	nop
c0020e44:	83 c4 0c             	add    esp,0xc
c0020e47:	c3                   	ret    

c0020e48 <PIT::write(int)>:
c0020e48:	83 ec 10             	sub    esp,0x10
c0020e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020e53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e5d:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c0020e62:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020e67:	89 c2                	mov    edx,eax
c0020e69:	c1 fa 1f             	sar    edx,0x1f
c0020e6c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020e70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e74:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020e7b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020e80:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020e84:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020e89:	ee                   	out    dx,al
c0020e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8e:	0f b6 c0             	movzx  eax,al
c0020e91:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020e98:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020e9c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020ea0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020ea5:	ee                   	out    dx,al
c0020ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eaa:	c1 f8 08             	sar    eax,0x8
c0020ead:	0f b6 c0             	movzx  eax,al
c0020eb0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020eb7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ebb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ebf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020ec4:	ee                   	out    dx,al
c0020ec5:	90                   	nop
c0020ec6:	83 c4 10             	add    esp,0x10
c0020ec9:	c3                   	ret    
c0020eca:	66 90                	xchg   ax,ax

c0020ecc <pitHandler(regs*, void*)>:
c0020ecc:	83 ec 0c             	sub    esp,0xc
c0020ecf:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c0020ed5:	b8 10 27 00 00       	mov    eax,0x2710
c0020eda:	89 c2                	mov    edx,eax
c0020edc:	c1 fa 1f             	sar    edx,0x1f
c0020edf:	f7 f9                	idiv   ecx
c0020ee1:	83 ec 0c             	sub    esp,0xc
c0020ee4:	50                   	push   eax
c0020ee5:	e8 86 a1 fe ff       	call   c000b070 <timerHandler(unsigned int)>
c0020eea:	83 c4 10             	add    esp,0x10
c0020eed:	90                   	nop
c0020eee:	83 c4 0c             	add    esp,0xc
c0020ef1:	c3                   	ret    
c0020ef2:	66 90                	xchg   ax,ax

c0020ef4 <PIT::open(int, int, void*)>:
c0020ef4:	83 ec 0c             	sub    esp,0xc
c0020ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020efb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020efd:	83 c0 24             	add    eax,0x24
c0020f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f02:	83 ec 08             	sub    esp,0x8
c0020f05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f0d:	ff d0                	call   eax
c0020f0f:	83 c4 10             	add    esp,0x10
c0020f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f16:	83 ec 0c             	sub    esp,0xc
c0020f19:	6a 00                	push   0x0
c0020f1b:	6a 01                	push   0x1
c0020f1d:	68 cc 0e 02 c0       	push   0xc0020ecc
c0020f22:	6a 00                	push   0x0
c0020f24:	50                   	push   eax
c0020f25:	e8 1c 8a fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020f2a:	83 c4 20             	add    esp,0x20
c0020f2d:	89 c2                	mov    edx,eax
c0020f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020f39:	b8 00 00 00 00       	mov    eax,0x0
c0020f3e:	83 c4 0c             	add    esp,0xc
c0020f41:	c3                   	ret    
c0020f42:	66 90                	xchg   ax,ax

c0020f44 <PIT::close(int, int, void*)>:
c0020f44:	83 ec 0c             	sub    esp,0xc
c0020f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f4b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f59:	6a 01                	push   0x1
c0020f5b:	68 cc 0e 02 c0       	push   0xc0020ecc
c0020f60:	6a 00                	push   0x0
c0020f62:	50                   	push   eax
c0020f63:	e8 14 8a fe ff       	call   c000997c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020f68:	83 c4 10             	add    esp,0x10
c0020f6b:	b8 00 00 00 00       	mov    eax,0x0
c0020f70:	83 c4 0c             	add    esp,0xc
c0020f73:	c3                   	ret    

c0020f74 <PIT::PIT()>:
c0020f74:	83 ec 0c             	sub    esp,0xc
c0020f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f7b:	83 ec 08             	sub    esp,0x8
c0020f7e:	68 a8 5d 02 c0       	push   0xc0025da8
c0020f83:	50                   	push   eax
c0020f84:	e8 1b a0 fe ff       	call   c000afa4 <Timer::Timer(char const*)>
c0020f89:	83 c4 10             	add    esp,0x10
c0020f8c:	ba d0 5d 02 c0       	mov    edx,0xc0025dd0
c0020f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f95:	89 10                	mov    DWORD PTR [eax],edx
c0020f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020fa1:	0f b6 d0             	movzx  edx,al
c0020fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fa8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020fb9:	0f b6 d0             	movzx  edx,al
c0020fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020fcf:	8d 50 01             	lea    edx,[eax+0x1]
c0020fd2:	88 d1                	mov    cl,dl
c0020fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020fd8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020fde:	0f b6 d0             	movzx  edx,al
c0020fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020fe9:	83 e1 3f             	and    ecx,0x3f
c0020fec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020ff0:	90                   	nop
c0020ff1:	83 c4 0c             	add    esp,0xc
c0020ff4:	c3                   	ret    
c0020ff5:	66 90                	xchg   ax,ax
c0020ff7:	66 90                	xchg   ax,ax
c0020ff9:	66 90                	xchg   ax,ax
c0020ffb:	66 90                	xchg   ax,ax
c0020ffd:	66 90                	xchg   ax,ax
c0020fff:	90                   	nop

c0021000 <avxDetect>:
c0021000:	b8 01 00 00 00       	mov    eax,0x1
c0021005:	0f a2                	cpuid  
c0021007:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002100d:	74 15                	je     c0021024 <avxDetect.noAVX>
c002100f:	b8 01 00 00 00       	mov    eax,0x1
c0021014:	0f a2                	cpuid  
c0021016:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002101c:	74 06                	je     c0021024 <avxDetect.noAVX>
c002101e:	b8 01 00 00 00       	mov    eax,0x1
c0021023:	c3                   	ret    

c0021024 <avxDetect.noAVX>:
c0021024:	b8 00 00 00 00       	mov    eax,0x0
c0021029:	c3                   	ret    

c002102a <avxSave>:
c002102a:	53                   	push   ebx
c002102b:	52                   	push   edx
c002102c:	31 c0                	xor    eax,eax
c002102e:	48                   	dec    eax
c002102f:	89 c2                	mov    edx,eax
c0021031:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021035:	0f ae 23             	xsave  [ebx]
c0021038:	5a                   	pop    edx
c0021039:	5b                   	pop    ebx
c002103a:	c3                   	ret    

c002103b <avxLoad>:
c002103b:	53                   	push   ebx
c002103c:	52                   	push   edx
c002103d:	31 c0                	xor    eax,eax
c002103f:	48                   	dec    eax
c0021040:	89 c2                	mov    edx,eax
c0021042:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021046:	0f ae 2b             	xrstor [ebx]
c0021049:	5a                   	pop    edx
c002104a:	5b                   	pop    ebx
c002104b:	c3                   	ret    

c002104c <avxInit>:
c002104c:	e8 17 03 00 00       	call   c0021368 <sseInit>
c0021051:	50                   	push   eax
c0021052:	51                   	push   ecx
c0021053:	0f 20 e0             	mov    eax,cr4
c0021056:	0d 00 00 04 00       	or     eax,0x40000
c002105b:	0f 22 e0             	mov    cr4,eax
c002105e:	31 c9                	xor    ecx,ecx
c0021060:	0f 01 d0             	xgetbv 
c0021063:	0d 07 00 00 00       	or     eax,0x7
c0021068:	0f 01 d1             	xsetbv 
c002106b:	59                   	pop    ecx
c002106c:	58                   	pop    eax
c002106d:	c3                   	ret    

c002106e <avxClose>:
c002106e:	c3                   	ret    
c002106f:	90                   	nop

c0021070 <isr0>:
c0021070:	fa                   	cli    
c0021071:	68 00 00 00 00       	push   0x0
c0021076:	68 00 00 00 00       	push   0x0
c002107b:	e9 56 01 00 00       	jmp    c00211d6 <int_common_stub>

c0021080 <isr1>:
c0021080:	fa                   	cli    
c0021081:	6a 00                	push   0x0
c0021083:	6a 01                	push   0x1
c0021085:	e9 4c 01 00 00       	jmp    c00211d6 <int_common_stub>

c002108a <isr2>:
c002108a:	fa                   	cli    
c002108b:	6a 00                	push   0x0
c002108d:	6a 02                	push   0x2
c002108f:	e9 42 01 00 00       	jmp    c00211d6 <int_common_stub>

c0021094 <isr3>:
c0021094:	fa                   	cli    
c0021095:	6a 00                	push   0x0
c0021097:	6a 03                	push   0x3
c0021099:	e9 38 01 00 00       	jmp    c00211d6 <int_common_stub>

c002109e <isr4>:
c002109e:	fa                   	cli    
c002109f:	6a 00                	push   0x0
c00210a1:	6a 04                	push   0x4
c00210a3:	e9 2e 01 00 00       	jmp    c00211d6 <int_common_stub>

c00210a8 <isr5>:
c00210a8:	fa                   	cli    
c00210a9:	6a 00                	push   0x0
c00210ab:	6a 05                	push   0x5
c00210ad:	e9 24 01 00 00       	jmp    c00211d6 <int_common_stub>

c00210b2 <isr6>:
c00210b2:	fa                   	cli    
c00210b3:	6a 00                	push   0x0
c00210b5:	6a 06                	push   0x6
c00210b7:	e9 1a 01 00 00       	jmp    c00211d6 <int_common_stub>

c00210bc <isr7>:
c00210bc:	fa                   	cli    
c00210bd:	6a 00                	push   0x0
c00210bf:	6a 07                	push   0x7
c00210c1:	e9 10 01 00 00       	jmp    c00211d6 <int_common_stub>

c00210c6 <isr8>:
c00210c6:	fa                   	cli    
c00210c7:	6a 08                	push   0x8
c00210c9:	e9 08 01 00 00       	jmp    c00211d6 <int_common_stub>

c00210ce <isr9>:
c00210ce:	fa                   	cli    
c00210cf:	6a 00                	push   0x0
c00210d1:	6a 09                	push   0x9
c00210d3:	e9 fe 00 00 00       	jmp    c00211d6 <int_common_stub>

c00210d8 <isr10>:
c00210d8:	fa                   	cli    
c00210d9:	6a 0a                	push   0xa
c00210db:	e9 f6 00 00 00       	jmp    c00211d6 <int_common_stub>

c00210e0 <isr11>:
c00210e0:	fa                   	cli    
c00210e1:	6a 0b                	push   0xb
c00210e3:	e9 ee 00 00 00       	jmp    c00211d6 <int_common_stub>

c00210e8 <isr12>:
c00210e8:	fa                   	cli    
c00210e9:	6a 0c                	push   0xc
c00210eb:	e9 e6 00 00 00       	jmp    c00211d6 <int_common_stub>

c00210f0 <isr13>:
c00210f0:	fa                   	cli    
c00210f1:	6a 0d                	push   0xd
c00210f3:	53                   	push   ebx
c00210f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00210f8:	81 fb 95 12 02 c0    	cmp    ebx,0xc0021295
c00210fe:	5b                   	pop    ebx
c00210ff:	0f 84 92 01 00 00    	je     c0021297 <finishSignal2>
c0021105:	e9 cc 00 00 00       	jmp    c00211d6 <int_common_stub>

c002110a <isr14>:
c002110a:	fa                   	cli    
c002110b:	6a 0e                	push   0xe
c002110d:	e9 c4 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021112 <isr15>:
c0021112:	fa                   	cli    
c0021113:	6a 00                	push   0x0
c0021115:	6a 0f                	push   0xf
c0021117:	e9 ba 00 00 00       	jmp    c00211d6 <int_common_stub>

c002111c <isr16>:
c002111c:	fa                   	cli    
c002111d:	6a 00                	push   0x0
c002111f:	6a 10                	push   0x10
c0021121:	e9 b0 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021126 <isr17>:
c0021126:	fa                   	cli    
c0021127:	6a 00                	push   0x0
c0021129:	6a 11                	push   0x11
c002112b:	e9 a6 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021130 <isr18>:
c0021130:	fa                   	cli    
c0021131:	6a 00                	push   0x0
c0021133:	6a 12                	push   0x12
c0021135:	e9 9c 00 00 00       	jmp    c00211d6 <int_common_stub>

c002113a <irq3>:
c002113a:	fa                   	cli    
c002113b:	6a 00                	push   0x0
c002113d:	6a 23                	push   0x23
c002113f:	e9 92 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021144 <irq4>:
c0021144:	fa                   	cli    
c0021145:	6a 00                	push   0x0
c0021147:	6a 24                	push   0x24
c0021149:	e9 88 00 00 00       	jmp    c00211d6 <int_common_stub>

c002114e <irq5>:
c002114e:	fa                   	cli    
c002114f:	6a 00                	push   0x0
c0021151:	6a 25                	push   0x25
c0021153:	e9 7e 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021158 <irq6>:
c0021158:	fa                   	cli    
c0021159:	6a 00                	push   0x0
c002115b:	6a 26                	push   0x26
c002115d:	e9 74 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021162 <irq7>:
c0021162:	fa                   	cli    
c0021163:	6a 00                	push   0x0
c0021165:	6a 27                	push   0x27
c0021167:	e9 6a 00 00 00       	jmp    c00211d6 <int_common_stub>

c002116c <irq8>:
c002116c:	fa                   	cli    
c002116d:	6a 00                	push   0x0
c002116f:	6a 28                	push   0x28
c0021171:	e9 60 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021176 <irq9>:
c0021176:	fa                   	cli    
c0021177:	6a 00                	push   0x0
c0021179:	6a 29                	push   0x29
c002117b:	e9 56 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021180 <irq10>:
c0021180:	fa                   	cli    
c0021181:	6a 00                	push   0x0
c0021183:	6a 2a                	push   0x2a
c0021185:	e9 4c 00 00 00       	jmp    c00211d6 <int_common_stub>

c002118a <irq11>:
c002118a:	fa                   	cli    
c002118b:	6a 00                	push   0x0
c002118d:	6a 2b                	push   0x2b
c002118f:	e9 42 00 00 00       	jmp    c00211d6 <int_common_stub>

c0021194 <irq12>:
c0021194:	fa                   	cli    
c0021195:	6a 00                	push   0x0
c0021197:	6a 2c                	push   0x2c
c0021199:	e9 38 00 00 00       	jmp    c00211d6 <int_common_stub>

c002119e <irq13>:
c002119e:	fa                   	cli    
c002119f:	6a 00                	push   0x0
c00211a1:	6a 2d                	push   0x2d
c00211a3:	e9 2e 00 00 00       	jmp    c00211d6 <int_common_stub>

c00211a8 <irq14>:
c00211a8:	fa                   	cli    
c00211a9:	6a 00                	push   0x0
c00211ab:	6a 2e                	push   0x2e
c00211ad:	e9 24 00 00 00       	jmp    c00211d6 <int_common_stub>

c00211b2 <irq15>:
c00211b2:	fa                   	cli    
c00211b3:	6a 00                	push   0x0
c00211b5:	6a 2f                	push   0x2f
c00211b7:	e9 1a 00 00 00       	jmp    c00211d6 <int_common_stub>

c00211bc <irq1>:
c00211bc:	fa                   	cli    
c00211bd:	6a 00                	push   0x0
c00211bf:	6a 21                	push   0x21
c00211c1:	eb 13                	jmp    c00211d6 <int_common_stub>

c00211c3 <irq2>:
c00211c3:	fa                   	cli    
c00211c4:	6a 00                	push   0x0
c00211c6:	6a 22                	push   0x22
c00211c8:	eb 0c                	jmp    c00211d6 <int_common_stub>

c00211ca <isr96>:
c00211ca:	6a 00                	push   0x0
c00211cc:	6a 60                	push   0x60
c00211ce:	fb                   	sti    
c00211cf:	eb 05                	jmp    c00211d6 <int_common_stub>

c00211d1 <irq0>:
c00211d1:	fa                   	cli    
c00211d2:	6a 00                	push   0x0
c00211d4:	6a 20                	push   0x20

c00211d6 <int_common_stub>:
c00211d6:	60                   	pusha  
c00211d7:	1e                   	push   ds
c00211d8:	06                   	push   es
c00211d9:	0f a0                	push   fs
c00211db:	0f a8                	push   gs
c00211dd:	66 b8 10 00          	mov    ax,0x10
c00211e1:	66 8e d8             	mov    ds,ax
c00211e4:	66 8e c0             	mov    es,ax
c00211e7:	66 8e e0             	mov    fs,ax
c00211ea:	66 8e e8             	mov    gs,ax
c00211ed:	54                   	push   esp
c00211ee:	fc                   	cld    
c00211ef:	e8 20 d7 fe ff       	call   c000e914 <int_handler>
c00211f4:	81 c4 04 00 00 00    	add    esp,0x4
c00211fa:	0f a9                	pop    gs
c00211fc:	0f a1                	pop    fs
c00211fe:	07                   	pop    es
c00211ff:	1f                   	pop    ds
c0021200:	e8 16 ff fe ff       	call   c001111b <KiCheckSignalZ>
c0021205:	85 c0                	test   eax,eax
c0021207:	75 08                	jne    c0021211 <doSignals>
c0021209:	61                   	popa   
c002120a:	81 c4 08 00 00 00    	add    esp,0x8
c0021210:	cf                   	iret   

c0021211 <doSignals>:
c0021211:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021216:	61                   	popa   
c0021217:	53                   	push   ebx
c0021218:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002121e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021221:	5b                   	pop    ebx
c0021222:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021227:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002122a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002122d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021230:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021233:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021236:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021239:	81 c4 08 00 00 00    	add    esp,0x8
c002123f:	5e                   	pop    esi
c0021240:	5b                   	pop    ebx
c0021241:	59                   	pop    ecx
c0021242:	5a                   	pop    edx
c0021243:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021246:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021249:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002124c:	52                   	push   edx
c002124d:	51                   	push   ecx
c002124e:	53                   	push   ebx
c002124f:	56                   	push   esi
c0021250:	81 ec 08 00 00 00    	sub    esp,0x8
c0021256:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021259:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002125c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002125f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021262:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021265:	60                   	pusha  
c0021266:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002126c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002126f:	89 e3                	mov    ebx,esp
c0021271:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021274:	52                   	push   edx
c0021275:	68 95 12 02 c0       	push   0xc0021295
c002127a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002127d:	89 dc                	mov    esp,ebx
c002127f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021282:	68 23 00 00 00       	push   0x23
c0021287:	51                   	push   ecx
c0021288:	68 02 02 00 00       	push   0x202
c002128d:	68 1b 00 00 00       	push   0x1b
c0021292:	ff 36                	push   DWORD PTR [esi]
c0021294:	cf                   	iret   

c0021295 <finishSignal>:
c0021295:	cd 0f                	int    0xf

c0021297 <finishSignal2>:
c0021297:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002129d:	e8 05 ff fe ff       	call   c00111a7 <KiFinishSignalZ>
c00212a2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00212a8:	68 23 00 00 00       	push   0x23
c00212ad:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00212b0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00212b3:	68 1b 00 00 00       	push   0x1b
c00212b8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00212bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00212be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00212c1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00212c4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00212c7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00212ca:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00212cd:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00212d0:	cf                   	iret   
c00212d1:	90                   	nop
c00212d2:	90                   	nop
c00212d3:	90                   	nop

c00212d4 <irq16>:
c00212d4:	fa                   	cli    
c00212d5:	6a 00                	push   0x0
c00212d7:	6a 30                	push   0x30
c00212d9:	e9 f8 fe ff ff       	jmp    c00211d6 <int_common_stub>

c00212de <irq17>:
c00212de:	fa                   	cli    
c00212df:	6a 00                	push   0x0
c00212e1:	6a 31                	push   0x31
c00212e3:	e9 ee fe ff ff       	jmp    c00211d6 <int_common_stub>

c00212e8 <irq18>:
c00212e8:	fa                   	cli    
c00212e9:	6a 00                	push   0x0
c00212eb:	6a 32                	push   0x32
c00212ed:	e9 e4 fe ff ff       	jmp    c00211d6 <int_common_stub>

c00212f2 <irq19>:
c00212f2:	fa                   	cli    
c00212f3:	6a 00                	push   0x0
c00212f5:	6a 33                	push   0x33
c00212f7:	e9 da fe ff ff       	jmp    c00211d6 <int_common_stub>

c00212fc <irq20>:
c00212fc:	fa                   	cli    
c00212fd:	6a 00                	push   0x0
c00212ff:	6a 34                	push   0x34
c0021301:	e9 d0 fe ff ff       	jmp    c00211d6 <int_common_stub>

c0021306 <irq21>:
c0021306:	fa                   	cli    
c0021307:	6a 00                	push   0x0
c0021309:	6a 35                	push   0x35
c002130b:	e9 c6 fe ff ff       	jmp    c00211d6 <int_common_stub>

c0021310 <irq22>:
c0021310:	fa                   	cli    
c0021311:	6a 00                	push   0x0
c0021313:	6a 36                	push   0x36
c0021315:	e9 bc fe ff ff       	jmp    c00211d6 <int_common_stub>

c002131a <irq23>:
c002131a:	fa                   	cli    
c002131b:	6a 00                	push   0x0
c002131d:	6a 37                	push   0x37
c002131f:	e9 b2 fe ff ff       	jmp    c00211d6 <int_common_stub>
c0021324:	66 90                	xchg   ax,ax
c0021326:	66 90                	xchg   ax,ax
c0021328:	66 90                	xchg   ax,ax
c002132a:	66 90                	xchg   ax,ax
c002132c:	66 90                	xchg   ax,ax
c002132e:	66 90                	xchg   ax,ax

c0021330 <i386GetRDRAND>:
c0021330:	b9 64 00 00 00       	mov    ecx,0x64

c0021335 <retry>:
c0021335:	0f c7 f0             	rdrand eax
c0021338:	72 05                	jb     c002133f <retry.done>
c002133a:	e2 f9                	loop   c0021335 <retry>

c002133c <retry.fail>:
c002133c:	31 c0                	xor    eax,eax
c002133e:	c3                   	ret    

c002133f <retry.done>:
c002133f:	c3                   	ret    

c0021340 <sseDetect>:
c0021340:	b8 01 00 00 00       	mov    eax,0x1
c0021345:	0f a2                	cpuid  
c0021347:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002134d:	74 06                	je     c0021355 <sseDetect.noSSE>
c002134f:	b8 01 00 00 00       	mov    eax,0x1
c0021354:	c3                   	ret    

c0021355 <sseDetect.noSSE>:
c0021355:	31 c0                	xor    eax,eax
c0021357:	c3                   	ret    

c0021358 <sseSave>:
c0021358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002135c:	0f ae 00             	fxsave [eax]
c002135f:	c3                   	ret    

c0021360 <sseLoad>:
c0021360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021364:	0f ae 08             	fxrstor [eax]
c0021367:	c3                   	ret    

c0021368 <sseInit>:
c0021368:	e8 48 00 00 00       	call   c00213b5 <x87Init>
c002136d:	0f 20 e0             	mov    eax,cr4
c0021370:	66 0d 00 06          	or     ax,0x600
c0021374:	0f 22 e0             	mov    cr4,eax
c0021377:	c3                   	ret    

c0021378 <sseClose>:
c0021378:	c3                   	ret    
c0021379:	66 90                	xchg   ax,ax
c002137b:	66 90                	xchg   ax,ax
c002137d:	66 90                	xchg   ax,ax
c002137f:	90                   	nop

c0021380 <value_37F>:
c0021380:	7f 03                	jg     c0021385 <value_37A+0x1>

c0021382 <value_37E>:
c0021382:	7e 03                	jle    c0021387 <x87Detect+0x1>

c0021384 <value_37A>:
c0021384:	7a 03                	jp     c0021389 <x87Detect+0x3>

c0021386 <x87Detect>:
c0021386:	53                   	push   ebx
c0021387:	51                   	push   ecx
c0021388:	52                   	push   edx
c0021389:	b8 01 00 00 00       	mov    eax,0x1
c002138e:	0f a2                	cpuid  
c0021390:	f7 c2 01 00 00 00    	test   edx,0x1
c0021396:	74 06                	je     c002139e <x87Detect.nox87>
c0021398:	b8 01 00 00 00       	mov    eax,0x1
c002139d:	c3                   	ret    

c002139e <x87Detect.nox87>:
c002139e:	b8 00 00 00 00       	mov    eax,0x0
c00213a3:	5a                   	pop    edx
c00213a4:	59                   	pop    ecx
c00213a5:	5b                   	pop    ebx
c00213a6:	c3                   	ret    

c00213a7 <x87Save>:
c00213a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ab:	dd 30                	fnsave [eax]
c00213ad:	c3                   	ret    

c00213ae <x87Load>:
c00213ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b2:	dd 20                	frstor [eax]
c00213b4:	c3                   	ret    

c00213b5 <x87Init>:
c00213b5:	0f 20 c0             	mov    eax,cr0
c00213b8:	66 25 fb ff          	and    ax,0xfffb
c00213bc:	66 0d 22 00          	or     ax,0x22
c00213c0:	0f 22 c0             	mov    cr0,eax
c00213c3:	db e3                	fninit 
c00213c5:	0f 06                	clts   
c00213c7:	d9 2d 84 13 02 c0    	fldcw  WORD PTR ds:0xc0021384
c00213cd:	c3                   	ret    

c00213ce <x87Close>:
c00213ce:	c3                   	ret    
c00213cf:	90                   	nop

c00213d0 <__do_global_ctors_aux>:
c00213d0:	a1 84 23 02 c0       	mov    eax,ds:0xc0022384
c00213d5:	83 f8 ff             	cmp    eax,0xffffffff
c00213d8:	74 1a                	je     c00213f4 <__do_global_ctors_aux+0x24>
c00213da:	55                   	push   ebp
c00213db:	89 e5                	mov    ebp,esp
c00213dd:	53                   	push   ebx
c00213de:	52                   	push   edx
c00213df:	bb 84 23 02 c0       	mov    ebx,0xc0022384
c00213e4:	ff d0                	call   eax
c00213e6:	83 eb 04             	sub    ebx,0x4
c00213e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00213eb:	83 f8 ff             	cmp    eax,0xffffffff
c00213ee:	75 f4                	jne    c00213e4 <__do_global_ctors_aux+0x14>
c00213f0:	58                   	pop    eax
c00213f1:	5b                   	pop    ebx
c00213f2:	5d                   	pop    ebp
c00213f3:	c3                   	ret    
c00213f4:	c3                   	ret    
c00213f5:	66 90                	xchg   ax,ax
c00213f7:	90                   	nop

c00213f8 <__divdi3>:
c00213f8:	55                   	push   ebp
c00213f9:	57                   	push   edi
c00213fa:	56                   	push   esi
c00213fb:	53                   	push   ebx
c00213fc:	83 ec 1c             	sub    esp,0x1c
c00213ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021403:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021407:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002140a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002140e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021412:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021416:	85 db                	test   ebx,ebx
c0021418:	0f 88 8e 00 00 00    	js     c00214ac <__divdi3+0xb4>
c002141e:	89 dd                	mov    ebp,ebx
c0021420:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021428:	89 d3                	mov    ebx,edx
c002142a:	85 d2                	test   edx,edx
c002142c:	79 0d                	jns    c002143b <__divdi3+0x43>
c002142e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021432:	f7 d8                	neg    eax
c0021434:	83 d2 00             	adc    edx,0x0
c0021437:	f7 da                	neg    edx
c0021439:	89 d3                	mov    ebx,edx
c002143b:	89 c7                	mov    edi,eax
c002143d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021440:	85 db                	test   ebx,ebx
c0021442:	75 48                	jne    c002148c <__divdi3+0x94>
c0021444:	39 ef                	cmp    edi,ebp
c0021446:	76 24                	jbe    c002146c <__divdi3+0x74>
c0021448:	89 ea                	mov    edx,ebp
c002144a:	f7 f7                	div    edi
c002144c:	89 c1                	mov    ecx,eax
c002144e:	31 f6                	xor    esi,esi
c0021450:	89 c8                	mov    eax,ecx
c0021452:	89 f2                	mov    edx,esi
c0021454:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021458:	85 c9                	test   ecx,ecx
c002145a:	74 07                	je     c0021463 <__divdi3+0x6b>
c002145c:	f7 d8                	neg    eax
c002145e:	83 d2 00             	adc    edx,0x0
c0021461:	f7 da                	neg    edx
c0021463:	83 c4 1c             	add    esp,0x1c
c0021466:	5b                   	pop    ebx
c0021467:	5e                   	pop    esi
c0021468:	5f                   	pop    edi
c0021469:	5d                   	pop    ebp
c002146a:	c3                   	ret    
c002146b:	90                   	nop
c002146c:	85 ff                	test   edi,edi
c002146e:	75 0b                	jne    c002147b <__divdi3+0x83>
c0021470:	b8 01 00 00 00       	mov    eax,0x1
c0021475:	31 d2                	xor    edx,edx
c0021477:	f7 f3                	div    ebx
c0021479:	89 c7                	mov    edi,eax
c002147b:	31 d2                	xor    edx,edx
c002147d:	89 e8                	mov    eax,ebp
c002147f:	f7 f7                	div    edi
c0021481:	89 c6                	mov    esi,eax
c0021483:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021486:	f7 f7                	div    edi
c0021488:	89 c1                	mov    ecx,eax
c002148a:	eb c4                	jmp    c0021450 <__divdi3+0x58>
c002148c:	39 eb                	cmp    ebx,ebp
c002148e:	77 3c                	ja     c00214cc <__divdi3+0xd4>
c0021490:	0f bd f3             	bsr    esi,ebx
c0021493:	83 f6 1f             	xor    esi,0x1f
c0021496:	75 40                	jne    c00214d8 <__divdi3+0xe0>
c0021498:	39 eb                	cmp    ebx,ebp
c002149a:	72 09                	jb     c00214a5 <__divdi3+0xad>
c002149c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002149f:	0f 87 97 00 00 00    	ja     c002153c <__divdi3+0x144>
c00214a5:	b9 01 00 00 00       	mov    ecx,0x1
c00214aa:	eb a4                	jmp    c0021450 <__divdi3+0x58>
c00214ac:	f7 d9                	neg    ecx
c00214ae:	83 d3 00             	adc    ebx,0x0
c00214b1:	f7 db                	neg    ebx
c00214b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00214b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00214ba:	89 dd                	mov    ebp,ebx
c00214bc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00214c4:	e9 5f ff ff ff       	jmp    c0021428 <__divdi3+0x30>
c00214c9:	8d 76 00             	lea    esi,[esi+0x0]
c00214cc:	31 f6                	xor    esi,esi
c00214ce:	31 c9                	xor    ecx,ecx
c00214d0:	e9 7b ff ff ff       	jmp    c0021450 <__divdi3+0x58>
c00214d5:	8d 76 00             	lea    esi,[esi+0x0]
c00214d8:	b8 20 00 00 00       	mov    eax,0x20
c00214dd:	29 f0                	sub    eax,esi
c00214df:	89 f1                	mov    ecx,esi
c00214e1:	d3 e3                	shl    ebx,cl
c00214e3:	89 fa                	mov    edx,edi
c00214e5:	88 c1                	mov    cl,al
c00214e7:	d3 ea                	shr    edx,cl
c00214e9:	09 da                	or     edx,ebx
c00214eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00214ef:	89 f1                	mov    ecx,esi
c00214f1:	d3 e7                	shl    edi,cl
c00214f3:	89 eb                	mov    ebx,ebp
c00214f5:	88 c1                	mov    cl,al
c00214f7:	d3 eb                	shr    ebx,cl
c00214f9:	89 f1                	mov    ecx,esi
c00214fb:	d3 e5                	shl    ebp,cl
c00214fd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021500:	88 c1                	mov    cl,al
c0021502:	d3 ea                	shr    edx,cl
c0021504:	09 d5                	or     ebp,edx
c0021506:	89 e8                	mov    eax,ebp
c0021508:	89 da                	mov    edx,ebx
c002150a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002150e:	89 d3                	mov    ebx,edx
c0021510:	89 c5                	mov    ebp,eax
c0021512:	f7 e7                	mul    edi
c0021514:	39 d3                	cmp    ebx,edx
c0021516:	72 18                	jb     c0021530 <__divdi3+0x138>
c0021518:	74 0a                	je     c0021524 <__divdi3+0x12c>
c002151a:	89 e9                	mov    ecx,ebp
c002151c:	31 f6                	xor    esi,esi
c002151e:	e9 2d ff ff ff       	jmp    c0021450 <__divdi3+0x58>
c0021523:	90                   	nop
c0021524:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021527:	89 f1                	mov    ecx,esi
c0021529:	d3 e7                	shl    edi,cl
c002152b:	39 c7                	cmp    edi,eax
c002152d:	73 eb                	jae    c002151a <__divdi3+0x122>
c002152f:	90                   	nop
c0021530:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021533:	31 f6                	xor    esi,esi
c0021535:	e9 16 ff ff ff       	jmp    c0021450 <__divdi3+0x58>
c002153a:	66 90                	xchg   ax,ax
c002153c:	31 c9                	xor    ecx,ecx
c002153e:	e9 0d ff ff ff       	jmp    c0021450 <__divdi3+0x58>
c0021543:	90                   	nop

c0021544 <__moddi3>:
c0021544:	55                   	push   ebp
c0021545:	57                   	push   edi
c0021546:	56                   	push   esi
c0021547:	53                   	push   ebx
c0021548:	83 ec 2c             	sub    esp,0x2c
c002154b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002154f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021553:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021557:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002155b:	85 db                	test   ebx,ebx
c002155d:	0f 88 85 00 00 00    	js     c00215e8 <__moddi3+0xa4>
c0021563:	89 de                	mov    esi,ebx
c0021565:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002156d:	89 d7                	mov    edi,edx
c002156f:	85 d2                	test   edx,edx
c0021571:	79 09                	jns    c002157c <__moddi3+0x38>
c0021573:	f7 d8                	neg    eax
c0021575:	83 d2 00             	adc    edx,0x0
c0021578:	f7 da                	neg    edx
c002157a:	89 d7                	mov    edi,edx
c002157c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021580:	89 cd                	mov    ebp,ecx
c0021582:	85 ff                	test   edi,edi
c0021584:	75 52                	jne    c00215d8 <__moddi3+0x94>
c0021586:	89 c3                	mov    ebx,eax
c0021588:	39 f0                	cmp    eax,esi
c002158a:	76 24                	jbe    c00215b0 <__moddi3+0x6c>
c002158c:	89 c8                	mov    eax,ecx
c002158e:	89 f2                	mov    edx,esi
c0021590:	f7 f3                	div    ebx
c0021592:	89 d6                	mov    esi,edx
c0021594:	89 f0                	mov    eax,esi
c0021596:	31 d2                	xor    edx,edx
c0021598:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002159c:	85 c9                	test   ecx,ecx
c002159e:	74 07                	je     c00215a7 <__moddi3+0x63>
c00215a0:	f7 d8                	neg    eax
c00215a2:	83 d2 00             	adc    edx,0x0
c00215a5:	f7 da                	neg    edx
c00215a7:	83 c4 2c             	add    esp,0x2c
c00215aa:	5b                   	pop    ebx
c00215ab:	5e                   	pop    esi
c00215ac:	5f                   	pop    edi
c00215ad:	5d                   	pop    ebp
c00215ae:	c3                   	ret    
c00215af:	90                   	nop
c00215b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00215b4:	85 db                	test   ebx,ebx
c00215b6:	75 0d                	jne    c00215c5 <__moddi3+0x81>
c00215b8:	b8 01 00 00 00       	mov    eax,0x1
c00215bd:	31 d2                	xor    edx,edx
c00215bf:	f7 f7                	div    edi
c00215c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215c5:	89 f0                	mov    eax,esi
c00215c7:	31 d2                	xor    edx,edx
c00215c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00215cd:	f7 f7                	div    edi
c00215cf:	89 e8                	mov    eax,ebp
c00215d1:	f7 f7                	div    edi
c00215d3:	89 d6                	mov    esi,edx
c00215d5:	eb bd                	jmp    c0021594 <__moddi3+0x50>
c00215d7:	90                   	nop
c00215d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00215dc:	39 f7                	cmp    edi,esi
c00215de:	76 20                	jbe    c0021600 <__moddi3+0xbc>
c00215e0:	89 c8                	mov    eax,ecx
c00215e2:	89 f2                	mov    edx,esi
c00215e4:	eb b2                	jmp    c0021598 <__moddi3+0x54>
c00215e6:	66 90                	xchg   ax,ax
c00215e8:	f7 d9                	neg    ecx
c00215ea:	83 d3 00             	adc    ebx,0x0
c00215ed:	f7 db                	neg    ebx
c00215ef:	89 de                	mov    esi,ebx
c00215f1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00215f9:	e9 6f ff ff ff       	jmp    c002156d <__moddi3+0x29>
c00215fe:	66 90                	xchg   ax,ax
c0021600:	0f bd c7             	bsr    eax,edi
c0021603:	83 f0 1f             	xor    eax,0x1f
c0021606:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002160a:	75 24                	jne    c0021630 <__moddi3+0xec>
c002160c:	39 f7                	cmp    edi,esi
c002160e:	72 06                	jb     c0021616 <__moddi3+0xd2>
c0021610:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021614:	77 0c                	ja     c0021622 <__moddi3+0xde>
c0021616:	89 e9                	mov    ecx,ebp
c0021618:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002161c:	19 fe                	sbb    esi,edi
c002161e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021626:	89 f2                	mov    edx,esi
c0021628:	e9 6b ff ff ff       	jmp    c0021598 <__moddi3+0x54>
c002162d:	8d 76 00             	lea    esi,[esi+0x0]
c0021630:	b8 20 00 00 00       	mov    eax,0x20
c0021635:	89 c2                	mov    edx,eax
c0021637:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002163b:	29 da                	sub    edx,ebx
c002163d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021641:	88 d9                	mov    cl,bl
c0021643:	d3 e7                	shl    edi,cl
c0021645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021649:	88 d1                	mov    cl,dl
c002164b:	d3 e8                	shr    eax,cl
c002164d:	09 c7                	or     edi,eax
c002164f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021653:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021657:	89 d8                	mov    eax,ebx
c0021659:	88 d9                	mov    cl,bl
c002165b:	d3 e7                	shl    edi,cl
c002165d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021661:	89 f3                	mov    ebx,esi
c0021663:	88 d1                	mov    cl,dl
c0021665:	d3 eb                	shr    ebx,cl
c0021667:	89 c7                	mov    edi,eax
c0021669:	88 c1                	mov    cl,al
c002166b:	d3 e6                	shl    esi,cl
c002166d:	89 e8                	mov    eax,ebp
c002166f:	88 d1                	mov    cl,dl
c0021671:	d3 e8                	shr    eax,cl
c0021673:	09 f0                	or     eax,esi
c0021675:	89 f9                	mov    ecx,edi
c0021677:	d3 e5                	shl    ebp,cl
c0021679:	89 da                	mov    edx,ebx
c002167b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002167f:	89 d3                	mov    ebx,edx
c0021681:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021685:	89 c6                	mov    esi,eax
c0021687:	89 d1                	mov    ecx,edx
c0021689:	39 d3                	cmp    ebx,edx
c002168b:	72 27                	jb     c00216b4 <__moddi3+0x170>
c002168d:	74 21                	je     c00216b0 <__moddi3+0x16c>
c002168f:	29 f5                	sub    ebp,esi
c0021691:	19 cb                	sbb    ebx,ecx
c0021693:	89 de                	mov    esi,ebx
c0021695:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021699:	d3 e6                	shl    esi,cl
c002169b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002169f:	89 f9                	mov    ecx,edi
c00216a1:	d3 ed                	shr    ebp,cl
c00216a3:	09 ee                	or     esi,ebp
c00216a5:	89 f0                	mov    eax,esi
c00216a7:	d3 eb                	shr    ebx,cl
c00216a9:	89 da                	mov    edx,ebx
c00216ab:	e9 e8 fe ff ff       	jmp    c0021598 <__moddi3+0x54>
c00216b0:	39 c5                	cmp    ebp,eax
c00216b2:	73 db                	jae    c002168f <__moddi3+0x14b>
c00216b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00216b8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00216bc:	89 d1                	mov    ecx,edx
c00216be:	89 c6                	mov    esi,eax
c00216c0:	eb cd                	jmp    c002168f <__moddi3+0x14b>
c00216c2:	66 90                	xchg   ax,ax

c00216c4 <__udivdi3>:
c00216c4:	55                   	push   ebp
c00216c5:	57                   	push   edi
c00216c6:	56                   	push   esi
c00216c7:	53                   	push   ebx
c00216c8:	83 ec 1c             	sub    esp,0x1c
c00216cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00216cf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00216d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00216d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00216db:	85 d2                	test   edx,edx
c00216dd:	75 41                	jne    c0021720 <__udivdi3+0x5c>
c00216df:	39 f7                	cmp    edi,esi
c00216e1:	76 15                	jbe    c00216f8 <__udivdi3+0x34>
c00216e3:	89 e8                	mov    eax,ebp
c00216e5:	89 f2                	mov    edx,esi
c00216e7:	f7 f7                	div    edi
c00216e9:	31 db                	xor    ebx,ebx
c00216eb:	89 da                	mov    edx,ebx
c00216ed:	83 c4 1c             	add    esp,0x1c
c00216f0:	5b                   	pop    ebx
c00216f1:	5e                   	pop    esi
c00216f2:	5f                   	pop    edi
c00216f3:	5d                   	pop    ebp
c00216f4:	c3                   	ret    
c00216f5:	8d 76 00             	lea    esi,[esi+0x0]
c00216f8:	89 f9                	mov    ecx,edi
c00216fa:	85 ff                	test   edi,edi
c00216fc:	75 0b                	jne    c0021709 <__udivdi3+0x45>
c00216fe:	b8 01 00 00 00       	mov    eax,0x1
c0021703:	31 d2                	xor    edx,edx
c0021705:	f7 f7                	div    edi
c0021707:	89 c1                	mov    ecx,eax
c0021709:	31 d2                	xor    edx,edx
c002170b:	89 f0                	mov    eax,esi
c002170d:	f7 f1                	div    ecx
c002170f:	89 c3                	mov    ebx,eax
c0021711:	89 e8                	mov    eax,ebp
c0021713:	f7 f1                	div    ecx
c0021715:	89 da                	mov    edx,ebx
c0021717:	83 c4 1c             	add    esp,0x1c
c002171a:	5b                   	pop    ebx
c002171b:	5e                   	pop    esi
c002171c:	5f                   	pop    edi
c002171d:	5d                   	pop    ebp
c002171e:	c3                   	ret    
c002171f:	90                   	nop
c0021720:	39 f2                	cmp    edx,esi
c0021722:	77 1c                	ja     c0021740 <__udivdi3+0x7c>
c0021724:	0f bd da             	bsr    ebx,edx
c0021727:	83 f3 1f             	xor    ebx,0x1f
c002172a:	75 24                	jne    c0021750 <__udivdi3+0x8c>
c002172c:	39 f2                	cmp    edx,esi
c002172e:	72 08                	jb     c0021738 <__udivdi3+0x74>
c0021730:	39 ef                	cmp    edi,ebp
c0021732:	0f 87 84 00 00 00    	ja     c00217bc <__udivdi3+0xf8>
c0021738:	b8 01 00 00 00       	mov    eax,0x1
c002173d:	eb ac                	jmp    c00216eb <__udivdi3+0x27>
c002173f:	90                   	nop
c0021740:	31 db                	xor    ebx,ebx
c0021742:	31 c0                	xor    eax,eax
c0021744:	89 da                	mov    edx,ebx
c0021746:	83 c4 1c             	add    esp,0x1c
c0021749:	5b                   	pop    ebx
c002174a:	5e                   	pop    esi
c002174b:	5f                   	pop    edi
c002174c:	5d                   	pop    ebp
c002174d:	c3                   	ret    
c002174e:	66 90                	xchg   ax,ax
c0021750:	b8 20 00 00 00       	mov    eax,0x20
c0021755:	29 d8                	sub    eax,ebx
c0021757:	88 d9                	mov    cl,bl
c0021759:	d3 e2                	shl    edx,cl
c002175b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002175f:	89 fa                	mov    edx,edi
c0021761:	88 c1                	mov    cl,al
c0021763:	d3 ea                	shr    edx,cl
c0021765:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021769:	09 d1                	or     ecx,edx
c002176b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002176f:	88 d9                	mov    cl,bl
c0021771:	d3 e7                	shl    edi,cl
c0021773:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021777:	89 f7                	mov    edi,esi
c0021779:	88 c1                	mov    cl,al
c002177b:	d3 ef                	shr    edi,cl
c002177d:	88 d9                	mov    cl,bl
c002177f:	d3 e6                	shl    esi,cl
c0021781:	89 ea                	mov    edx,ebp
c0021783:	88 c1                	mov    cl,al
c0021785:	d3 ea                	shr    edx,cl
c0021787:	09 d6                	or     esi,edx
c0021789:	89 f0                	mov    eax,esi
c002178b:	89 fa                	mov    edx,edi
c002178d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021791:	89 d7                	mov    edi,edx
c0021793:	89 c6                	mov    esi,eax
c0021795:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021799:	39 d7                	cmp    edi,edx
c002179b:	72 13                	jb     c00217b0 <__udivdi3+0xec>
c002179d:	74 09                	je     c00217a8 <__udivdi3+0xe4>
c002179f:	89 f0                	mov    eax,esi
c00217a1:	31 db                	xor    ebx,ebx
c00217a3:	e9 43 ff ff ff       	jmp    c00216eb <__udivdi3+0x27>
c00217a8:	88 d9                	mov    cl,bl
c00217aa:	d3 e5                	shl    ebp,cl
c00217ac:	39 c5                	cmp    ebp,eax
c00217ae:	73 ef                	jae    c002179f <__udivdi3+0xdb>
c00217b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00217b3:	31 db                	xor    ebx,ebx
c00217b5:	e9 31 ff ff ff       	jmp    c00216eb <__udivdi3+0x27>
c00217ba:	66 90                	xchg   ax,ax
c00217bc:	31 c0                	xor    eax,eax
c00217be:	e9 28 ff ff ff       	jmp    c00216eb <__udivdi3+0x27>
c00217c3:	90                   	nop

c00217c4 <__umoddi3>:
c00217c4:	55                   	push   ebp
c00217c5:	57                   	push   edi
c00217c6:	56                   	push   esi
c00217c7:	53                   	push   ebx
c00217c8:	83 ec 1c             	sub    esp,0x1c
c00217cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00217cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00217d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00217d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00217db:	89 da                	mov    edx,ebx
c00217dd:	85 c0                	test   eax,eax
c00217df:	75 37                	jne    c0021818 <__umoddi3+0x54>
c00217e1:	39 df                	cmp    edi,ebx
c00217e3:	76 13                	jbe    c00217f8 <__umoddi3+0x34>
c00217e5:	89 f0                	mov    eax,esi
c00217e7:	f7 f7                	div    edi
c00217e9:	89 d0                	mov    eax,edx
c00217eb:	31 d2                	xor    edx,edx
c00217ed:	83 c4 1c             	add    esp,0x1c
c00217f0:	5b                   	pop    ebx
c00217f1:	5e                   	pop    esi
c00217f2:	5f                   	pop    edi
c00217f3:	5d                   	pop    ebp
c00217f4:	c3                   	ret    
c00217f5:	8d 76 00             	lea    esi,[esi+0x0]
c00217f8:	89 fd                	mov    ebp,edi
c00217fa:	85 ff                	test   edi,edi
c00217fc:	75 0b                	jne    c0021809 <__umoddi3+0x45>
c00217fe:	b8 01 00 00 00       	mov    eax,0x1
c0021803:	31 d2                	xor    edx,edx
c0021805:	f7 f7                	div    edi
c0021807:	89 c5                	mov    ebp,eax
c0021809:	89 d8                	mov    eax,ebx
c002180b:	31 d2                	xor    edx,edx
c002180d:	f7 f5                	div    ebp
c002180f:	89 f0                	mov    eax,esi
c0021811:	f7 f5                	div    ebp
c0021813:	89 d0                	mov    eax,edx
c0021815:	eb d4                	jmp    c00217eb <__umoddi3+0x27>
c0021817:	90                   	nop
c0021818:	89 f1                	mov    ecx,esi
c002181a:	39 d8                	cmp    eax,ebx
c002181c:	76 0a                	jbe    c0021828 <__umoddi3+0x64>
c002181e:	89 f0                	mov    eax,esi
c0021820:	83 c4 1c             	add    esp,0x1c
c0021823:	5b                   	pop    ebx
c0021824:	5e                   	pop    esi
c0021825:	5f                   	pop    edi
c0021826:	5d                   	pop    ebp
c0021827:	c3                   	ret    
c0021828:	0f bd e8             	bsr    ebp,eax
c002182b:	83 f5 1f             	xor    ebp,0x1f
c002182e:	75 1c                	jne    c002184c <__umoddi3+0x88>
c0021830:	39 d8                	cmp    eax,ebx
c0021832:	72 04                	jb     c0021838 <__umoddi3+0x74>
c0021834:	39 f7                	cmp    edi,esi
c0021836:	77 08                	ja     c0021840 <__umoddi3+0x7c>
c0021838:	89 da                	mov    edx,ebx
c002183a:	29 fe                	sub    esi,edi
c002183c:	19 c2                	sbb    edx,eax
c002183e:	89 f1                	mov    ecx,esi
c0021840:	89 c8                	mov    eax,ecx
c0021842:	83 c4 1c             	add    esp,0x1c
c0021845:	5b                   	pop    ebx
c0021846:	5e                   	pop    esi
c0021847:	5f                   	pop    edi
c0021848:	5d                   	pop    ebp
c0021849:	c3                   	ret    
c002184a:	66 90                	xchg   ax,ax
c002184c:	ba 20 00 00 00       	mov    edx,0x20
c0021851:	29 ea                	sub    edx,ebp
c0021853:	89 e9                	mov    ecx,ebp
c0021855:	d3 e0                	shl    eax,cl
c0021857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002185b:	89 f8                	mov    eax,edi
c002185d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021861:	88 d1                	mov    cl,dl
c0021863:	d3 e8                	shr    eax,cl
c0021865:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021869:	09 c1                	or     ecx,eax
c002186b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002186f:	89 e9                	mov    ecx,ebp
c0021871:	d3 e7                	shl    edi,cl
c0021873:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021877:	89 d8                	mov    eax,ebx
c0021879:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002187d:	88 d1                	mov    cl,dl
c002187f:	d3 e8                	shr    eax,cl
c0021881:	89 c7                	mov    edi,eax
c0021883:	89 e9                	mov    ecx,ebp
c0021885:	d3 e3                	shl    ebx,cl
c0021887:	89 f0                	mov    eax,esi
c0021889:	88 d1                	mov    cl,dl
c002188b:	d3 e8                	shr    eax,cl
c002188d:	09 d8                	or     eax,ebx
c002188f:	89 e9                	mov    ecx,ebp
c0021891:	d3 e6                	shl    esi,cl
c0021893:	89 f3                	mov    ebx,esi
c0021895:	89 fa                	mov    edx,edi
c0021897:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002189b:	89 d1                	mov    ecx,edx
c002189d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00218a1:	89 c6                	mov    esi,eax
c00218a3:	89 d7                	mov    edi,edx
c00218a5:	39 d1                	cmp    ecx,edx
c00218a7:	72 27                	jb     c00218d0 <__umoddi3+0x10c>
c00218a9:	74 21                	je     c00218cc <__umoddi3+0x108>
c00218ab:	89 ca                	mov    edx,ecx
c00218ad:	29 f3                	sub    ebx,esi
c00218af:	19 fa                	sbb    edx,edi
c00218b1:	89 d0                	mov    eax,edx
c00218b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00218b7:	d3 e0                	shl    eax,cl
c00218b9:	89 e9                	mov    ecx,ebp
c00218bb:	d3 eb                	shr    ebx,cl
c00218bd:	09 d8                	or     eax,ebx
c00218bf:	d3 ea                	shr    edx,cl
c00218c1:	83 c4 1c             	add    esp,0x1c
c00218c4:	5b                   	pop    ebx
c00218c5:	5e                   	pop    esi
c00218c6:	5f                   	pop    edi
c00218c7:	5d                   	pop    ebp
c00218c8:	c3                   	ret    
c00218c9:	8d 76 00             	lea    esi,[esi+0x0]
c00218cc:	39 c3                	cmp    ebx,eax
c00218ce:	73 db                	jae    c00218ab <__umoddi3+0xe7>
c00218d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00218d4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00218d8:	89 d7                	mov    edi,edx
c00218da:	89 c6                	mov    esi,eax
c00218dc:	eb cd                	jmp    c00218ab <__umoddi3+0xe7>

Disassembly of section .init:

c00218de <_init>:
c00218de:	55                   	push   ebp
c00218df:	89 e5                	mov    ebp,esp
c00218e1:	e8 0e e8 fd ff       	call   c00000f4 <frame_dummy>
c00218e6:	e8 e5 fa ff ff       	call   c00213d0 <__do_global_ctors_aux>
c00218eb:	5d                   	pop    ebp
c00218ec:	c3                   	ret    

Disassembly of section .fini:

c00218ed <_fini>:
c00218ed:	55                   	push   ebp
c00218ee:	89 e5                	mov    ebp,esp
c00218f0:	e8 8f e7 fd ff       	call   c0000084 <__do_global_dtors_aux>
c00218f5:	5d                   	pop    ebp
c00218f6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00218f8 <DriverlessDevice::~DriverlessDevice()>:
c00218f8:	ba 3c 33 02 c0       	mov    edx,0xc002333c
c00218fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021901:	89 10                	mov    DWORD PTR [eax],edx
c0021903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021907:	50                   	push   eax
c0021908:	e8 8f 7f fe ff       	call   c000989c <Device::~Device()>
c002190d:	83 c4 04             	add    esp,0x4
c0021910:	90                   	nop
c0021911:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021912 <DriverlessDevice::~DriverlessDevice()>:
c0021912:	83 ec 0c             	sub    esp,0xc
c0021915:	83 ec 0c             	sub    esp,0xc
c0021918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002191c:	e8 d7 ff ff ff       	call   c00218f8 <DriverlessDevice::~DriverlessDevice()>
c0021921:	83 c4 10             	add    esp,0x10
c0021924:	83 ec 08             	sub    esp,0x8
c0021927:	68 58 01 00 00       	push   0x158
c002192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021930:	e8 f2 b8 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0021935:	83 c4 10             	add    esp,0x10
c0021938:	83 c4 0c             	add    esp,0xc
c002193b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002193c <LinkedList<Device>::addElement(Device*)>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021944:	75 10                	jne    c0021956 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021946:	83 ec 0c             	sub    esp,0xc
c0021949:	68 d0 32 02 c0       	push   0xc00232d0
c002194e:	e8 a3 e4 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021953:	83 c4 10             	add    esp,0x10
c0021956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195a:	8b 00                	mov    eax,DWORD PTR [eax]
c002195c:	85 c0                	test   eax,eax
c002195e:	74 3a                	je     c002199a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021964:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021967:	85 c0                	test   eax,eax
c0021969:	74 2f                	je     c002199a <LinkedList<Device>::addElement(Device*)+0x5e>
c002196b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021972:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021976:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002197c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021980:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021984:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002198e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021998:	eb 68                	jmp    c0021a02 <LinkedList<Device>::addElement(Device*)+0xc6>
c002199a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002199e:	8b 00                	mov    eax,DWORD PTR [eax]
c00219a0:	85 c0                	test   eax,eax
c00219a2:	75 4e                	jne    c00219f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00219a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219ab:	85 c0                	test   eax,eax
c00219ad:	75 43                	jne    c00219f2 <LinkedList<Device>::addElement(Device*)+0xb6>
c00219af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219b7:	89 10                	mov    DWORD PTR [eax],edx
c00219b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219cb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00219d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219dc:	85 c0                	test   eax,eax
c00219de:	74 22                	je     c0021a02 <LinkedList<Device>::addElement(Device*)+0xc6>
c00219e0:	83 ec 0c             	sub    esp,0xc
c00219e3:	68 f2 32 02 c0       	push   0xc00232f2
c00219e8:	e8 09 e4 fe ff       	call   c000fdf6 <KePanic(char const*)>
c00219ed:	83 c4 10             	add    esp,0x10
c00219f0:	eb 10                	jmp    c0021a02 <LinkedList<Device>::addElement(Device*)+0xc6>
c00219f2:	83 ec 0c             	sub    esp,0xc
c00219f5:	68 fc 32 02 c0       	push   0xc00232fc
c00219fa:	e8 f7 e3 fe ff       	call   c000fdf6 <KePanic(char const*)>
c00219ff:	83 c4 10             	add    esp,0x10
c0021a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a09:	8d 50 01             	lea    edx,[eax+0x1]
c0021a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a13:	90                   	nop
c0021a14:	83 c4 0c             	add    esp,0xc
c0021a17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021a18 <LinkedList<Device>::LinkedList()>:
c0021a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a58:	90                   	nop
c0021a59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021a5c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a62:	85 c0                	test   eax,eax
c0021a64:	75 0e                	jne    c0021a74 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a6d:	85 c0                	test   eax,eax
c0021a6f:	75 03                	jne    c0021a74 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a71:	b0 01                	mov    al,0x1
c0021a73:	c3                   	ret    
c0021a74:	b0 00                	mov    al,0x0
c0021a76:	90                   	nop
c0021a77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021a78 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a7e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021a80 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a89:	85 c0                	test   eax,eax
c0021a8b:	75 17                	jne    c0021aa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021a8d:	83 ec 0c             	sub    esp,0xc
c0021a90:	68 6c 35 02 c0       	push   0xc002356c
c0021a95:	e8 5c e3 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021a9a:	83 c4 10             	add    esp,0x10
c0021a9d:	e9 96 00 00 00       	jmp    c0021b38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021aa2:	66 90                	xchg   ax,ax
c0021aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021aae:	85 c0                	test   eax,eax
c0021ab0:	0f 95 c0             	setne  al
c0021ab3:	0f b6 c0             	movzx  eax,al
c0021ab6:	85 c0                	test   eax,eax
c0021ab8:	74 12                	je     c0021acc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021aba:	83 ec 0c             	sub    esp,0xc
c0021abd:	68 b7 35 02 c0       	push   0xc00235b7
c0021ac2:	e8 2f e3 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	66 90                	xchg   ax,ax
c0021acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ad2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ad5:	85 c0                	test   eax,eax
c0021ad7:	0f 94 c0             	sete   al
c0021ada:	0f b6 c0             	movzx  eax,al
c0021add:	85 c0                	test   eax,eax
c0021adf:	74 33                	je     c0021b14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021afd:	83 f8 01             	cmp    eax,0x1
c0021b00:	74 22                	je     c0021b24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021b02:	83 ec 0c             	sub    esp,0xc
c0021b05:	68 90 35 02 c0       	push   0xc0023590
c0021b0a:	e8 e7 e2 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	eb 10                	jmp    c0021b24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b1a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b21:	89 10                	mov    DWORD PTR [eax],edx
c0021b23:	90                   	nop
c0021b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b2b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b35:	8d 76 00             	lea    esi,[esi+0x0]
c0021b38:	83 c4 0c             	add    esp,0xc
c0021b3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021b3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021b3c:	83 ec 0c             	sub    esp,0xc
c0021b3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b44:	75 12                	jne    c0021b58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021b46:	83 ec 0c             	sub    esp,0xc
c0021b49:	68 d0 32 02 c0       	push   0xc00232d0
c0021b4e:	e8 a3 e2 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	66 90                	xchg   ax,ax
c0021b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b5e:	85 c0                	test   eax,eax
c0021b60:	74 36                	je     c0021b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b69:	85 c0                	test   eax,eax
c0021b6b:	74 2b                	je     c0021b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b78:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021b94:	eb 6a                	jmp    c0021c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021b96:	66 90                	xchg   ax,ax
c0021b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b9e:	85 c0                	test   eax,eax
c0021ba0:	75 4e                	jne    c0021bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ba9:	85 c0                	test   eax,eax
c0021bab:	75 43                	jne    c0021bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bb5:	89 10                	mov    DWORD PTR [eax],edx
c0021bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bc9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bd7:	85 c0                	test   eax,eax
c0021bd9:	74 25                	je     c0021c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021bdb:	83 ec 0c             	sub    esp,0xc
c0021bde:	68 f2 32 02 c0       	push   0xc00232f2
c0021be3:	e8 0e e2 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021be8:	83 c4 10             	add    esp,0x10
c0021beb:	eb 13                	jmp    c0021c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021bed:	8d 76 00             	lea    esi,[esi+0x0]
c0021bf0:	83 ec 0c             	sub    esp,0xc
c0021bf3:	68 fc 32 02 c0       	push   0xc00232fc
c0021bf8:	e8 f9 e1 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c07:	8d 50 01             	lea    edx,[eax+0x1]
c0021c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c11:	90                   	nop
c0021c12:	83 c4 0c             	add    esp,0xc
c0021c15:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021c18 <ACPI::~ACPI()>:
c0021c18:	83 ec 0c             	sub    esp,0xc
c0021c1b:	ba 8c 39 02 c0       	mov    edx,0xc002398c
c0021c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c24:	89 10                	mov    DWORD PTR [eax],edx
c0021c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2a:	83 ec 0c             	sub    esp,0xc
c0021c2d:	50                   	push   eax
c0021c2e:	e8 69 7c fe ff       	call   c000989c <Device::~Device()>
c0021c33:	83 c4 10             	add    esp,0x10
c0021c36:	90                   	nop
c0021c37:	83 c4 0c             	add    esp,0xc
c0021c3a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021c3c <ACPI::~ACPI()>:
c0021c3c:	83 ec 0c             	sub    esp,0xc
c0021c3f:	83 ec 0c             	sub    esp,0xc
c0021c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c46:	e8 cd ff ff ff       	call   c0021c18 <ACPI::~ACPI()>
c0021c4b:	83 c4 10             	add    esp,0x10
c0021c4e:	83 ec 08             	sub    esp,0x8
c0021c51:	68 64 12 00 00       	push   0x1264
c0021c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c5a:	e8 c8 b5 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0021c5f:	83 c4 10             	add    esp,0x10
c0021c62:	83 c4 0c             	add    esp,0xc
c0021c65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021c68 <LinkedList<Device>::~LinkedList()>:
c0021c68:	90                   	nop
c0021c69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021c6c <LinkedList<Device>::isEmpty()>:
c0021c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c72:	85 c0                	test   eax,eax
c0021c74:	75 0e                	jne    c0021c84 <LinkedList<Device>::isEmpty()+0x18>
c0021c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c7d:	85 c0                	test   eax,eax
c0021c7f:	75 03                	jne    c0021c84 <LinkedList<Device>::isEmpty()+0x18>
c0021c81:	b0 01                	mov    al,0x1
c0021c83:	c3                   	ret    
c0021c84:	b0 00                	mov    al,0x0
c0021c86:	90                   	nop
c0021c87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021c88 <LinkedList<Device>::getFirstElement()>:
c0021c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021c90 <LinkedList<Device>::removeFirst()>:
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c99:	85 c0                	test   eax,eax
c0021c9b:	75 17                	jne    c0021cb4 <LinkedList<Device>::removeFirst()+0x24>
c0021c9d:	83 ec 0c             	sub    esp,0xc
c0021ca0:	68 6c 35 02 c0       	push   0xc002356c
c0021ca5:	e8 4c e1 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021caa:	83 c4 10             	add    esp,0x10
c0021cad:	e9 92 00 00 00       	jmp    c0021d44 <LinkedList<Device>::removeFirst()+0xb4>
c0021cb2:	66 90                	xchg   ax,ax
c0021cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cbb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021cc1:	85 c0                	test   eax,eax
c0021cc3:	74 13                	je     c0021cd8 <LinkedList<Device>::removeFirst()+0x48>
c0021cc5:	83 ec 0c             	sub    esp,0xc
c0021cc8:	68 b7 35 02 c0       	push   0xc00235b7
c0021ccd:	e8 24 e1 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021cd2:	83 c4 10             	add    esp,0x10
c0021cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cde:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021ce4:	85 c0                	test   eax,eax
c0021ce6:	75 34                	jne    c0021d1c <LinkedList<Device>::removeFirst()+0x8c>
c0021ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d04:	83 f8 01             	cmp    eax,0x1
c0021d07:	74 27                	je     c0021d30 <LinkedList<Device>::removeFirst()+0xa0>
c0021d09:	83 ec 0c             	sub    esp,0xc
c0021d0c:	68 90 35 02 c0       	push   0xc0023590
c0021d11:	e8 e0 e0 fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021d16:	83 c4 10             	add    esp,0x10
c0021d19:	eb 15                	jmp    c0021d30 <LinkedList<Device>::removeFirst()+0xa0>
c0021d1b:	90                   	nop
c0021d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d22:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2c:	89 10                	mov    DWORD PTR [eax],edx
c0021d2e:	66 90                	xchg   ax,ax
c0021d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d37:	8d 50 ff             	lea    edx,[eax-0x1]
c0021d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d41:	8d 76 00             	lea    esi,[esi+0x0]
c0021d44:	83 c4 0c             	add    esp,0xc
c0021d47:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021d48 <Computer::~Computer()>:
c0021d48:	83 ec 0c             	sub    esp,0xc
c0021d4b:	ba 3c 3c 02 c0       	mov    edx,0xc0023c3c
c0021d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d54:	89 10                	mov    DWORD PTR [eax],edx
c0021d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5a:	83 ec 0c             	sub    esp,0xc
c0021d5d:	50                   	push   eax
c0021d5e:	e8 39 7b fe ff       	call   c000989c <Device::~Device()>
c0021d63:	83 c4 10             	add    esp,0x10
c0021d66:	90                   	nop
c0021d67:	83 c4 0c             	add    esp,0xc
c0021d6a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021d6c <Computer::~Computer()>:
c0021d6c:	83 ec 0c             	sub    esp,0xc
c0021d6f:	83 ec 0c             	sub    esp,0xc
c0021d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d76:	e8 cd ff ff ff       	call   c0021d48 <Computer::~Computer()>
c0021d7b:	83 c4 10             	add    esp,0x10
c0021d7e:	83 ec 08             	sub    esp,0x8
c0021d81:	68 6c 01 00 00       	push   0x16c
c0021d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d8a:	e8 98 b4 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0021d8f:	83 c4 10             	add    esp,0x10
c0021d92:	83 c4 0c             	add    esp,0xc
c0021d95:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021d96 <idleCommon()>:
c0021d96:	83 ec 0c             	sub    esp,0xc
c0021d99:	fa                   	cli    
c0021d9a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021da0:	e8 7f 4f ff ff       	call   c0016d24 <schedule()>
c0021da5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021dac:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021db3:	75 01                	jne    c0021db6 <idleCommon()+0x20>
c0021db5:	fb                   	sti    
c0021db6:	83 c4 0c             	add    esp,0xc
c0021db9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021dba <LinkedList<UnixFile>::~LinkedList()>:
c0021dba:	90                   	nop
c0021dbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021dbc <LinkedList<UnixFile>::LinkedList()>:
c0021dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dd5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021df5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021dfc:	90                   	nop
c0021dfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021dfe <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021dfe:	83 ec 0c             	sub    esp,0xc
c0021e01:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e06:	75 10                	jne    c0021e18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	68 d0 32 02 c0       	push   0xc00232d0
c0021e10:	e8 e1 df fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021e15:	83 c4 10             	add    esp,0x10
c0021e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e1e:	85 c0                	test   eax,eax
c0021e20:	74 34                	je     c0021e56 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e29:	85 c0                	test   eax,eax
c0021e2b:	74 29                	je     c0021e56 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e54:	eb 65                	jmp    c0021ebb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e5c:	85 c0                	test   eax,eax
c0021e5e:	75 4b                	jne    c0021eab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e67:	85 c0                	test   eax,eax
c0021e69:	75 40                	jne    c0021eab <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e73:	89 10                	mov    DWORD PTR [eax],edx
c0021e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e95:	85 c0                	test   eax,eax
c0021e97:	74 22                	je     c0021ebb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021e99:	83 ec 0c             	sub    esp,0xc
c0021e9c:	68 f2 32 02 c0       	push   0xc00232f2
c0021ea1:	e8 50 df fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021ea6:	83 c4 10             	add    esp,0x10
c0021ea9:	eb 10                	jmp    c0021ebb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021eab:	83 ec 0c             	sub    esp,0xc
c0021eae:	68 fc 32 02 c0       	push   0xc00232fc
c0021eb3:	e8 3e df fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021eb8:	83 c4 10             	add    esp,0x10
c0021ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ebf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ec2:	8d 50 01             	lea    edx,[eax+0x1]
c0021ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ecc:	90                   	nop
c0021ecd:	83 c4 0c             	add    esp,0xc
c0021ed0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021ed2 <LinkedList<UnixFile>::getFirstElement()>:
c0021ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ed8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021eda <LinkedList<UnixFile>::removeFirst()>:
c0021eda:	83 ec 0c             	sub    esp,0xc
c0021edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee3:	85 c0                	test   eax,eax
c0021ee5:	75 12                	jne    c0021ef9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021ee7:	83 ec 0c             	sub    esp,0xc
c0021eea:	68 6c 35 02 c0       	push   0xc002356c
c0021eef:	e8 02 df fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021ef4:	83 c4 10             	add    esp,0x10
c0021ef7:	eb 7e                	jmp    c0021f77 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f03:	85 c0                	test   eax,eax
c0021f05:	74 10                	je     c0021f17 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021f07:	83 ec 0c             	sub    esp,0xc
c0021f0a:	68 b7 35 02 c0       	push   0xc00235b7
c0021f0f:	e8 e2 de fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021f14:	83 c4 10             	add    esp,0x10
c0021f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f20:	85 c0                	test   eax,eax
c0021f22:	75 33                	jne    c0021f57 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f40:	83 f8 01             	cmp    eax,0x1
c0021f43:	74 21                	je     c0021f66 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021f45:	83 ec 0c             	sub    esp,0xc
c0021f48:	68 90 35 02 c0       	push   0xc0023590
c0021f4d:	e8 a4 de fe ff       	call   c000fdf6 <KePanic(char const*)>
c0021f52:	83 c4 10             	add    esp,0x10
c0021f55:	eb 0f                	jmp    c0021f66 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f5d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f64:	89 10                	mov    DWORD PTR [eax],edx
c0021f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f6d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f74:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f77:	83 c4 0c             	add    esp,0xc
c0021f7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021f7c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021f84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021f8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021f8c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021f8c:	90                   	nop
c0021f8d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021f90 <ThreadControlBlock::ThreadControlBlock()>:
c0021f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f94:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021f9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f9f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021fb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0021fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fc0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0021fc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fcb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0021fcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fd3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0021fd7:	90                   	nop
c0021fd8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021fdc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002200a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022015:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002201c:	90                   	nop
c002201d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002201e <CPU::~CPU()>:
c002201e:	83 ec 0c             	sub    esp,0xc
c0022021:	ba c0 52 02 c0       	mov    edx,0xc00252c0
c0022026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202a:	89 10                	mov    DWORD PTR [eax],edx
c002202c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022030:	83 ec 0c             	sub    esp,0xc
c0022033:	50                   	push   eax
c0022034:	e8 63 78 fe ff       	call   c000989c <Device::~Device()>
c0022039:	83 c4 10             	add    esp,0x10
c002203c:	90                   	nop
c002203d:	83 c4 0c             	add    esp,0xc
c0022040:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022042 <CPU::~CPU()>:
c0022042:	83 ec 0c             	sub    esp,0xc
c0022045:	83 ec 0c             	sub    esp,0xc
c0022048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002204c:	e8 cd ff ff ff       	call   c002201e <CPU::~CPU()>
c0022051:	83 c4 10             	add    esp,0x10
c0022054:	83 ec 08             	sub    esp,0x8
c0022057:	68 78 11 00 00       	push   0x1178
c002205c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022060:	e8 c2 b1 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022065:	83 c4 10             	add    esp,0x10
c0022068:	83 c4 0c             	add    esp,0xc
c002206b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002206c <PCI::~PCI()>:
c002206c:	83 ec 0c             	sub    esp,0xc
c002206f:	ba 24 58 02 c0       	mov    edx,0xc0025824
c0022074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022078:	89 10                	mov    DWORD PTR [eax],edx
c002207a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207e:	83 ec 0c             	sub    esp,0xc
c0022081:	50                   	push   eax
c0022082:	e8 b9 68 fe ff       	call   c0008940 <Bus::~Bus()>
c0022087:	83 c4 10             	add    esp,0x10
c002208a:	90                   	nop
c002208b:	83 c4 0c             	add    esp,0xc
c002208e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022090 <PCI::~PCI()>:
c0022090:	83 ec 0c             	sub    esp,0xc
c0022093:	83 ec 0c             	sub    esp,0xc
c0022096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002209a:	e8 cd ff ff ff       	call   c002206c <PCI::~PCI()>
c002209f:	83 c4 10             	add    esp,0x10
c00220a2:	83 ec 08             	sub    esp,0x8
c00220a5:	68 5c 01 00 00       	push   0x15c
c00220aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ae:	e8 74 b1 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00220b3:	83 c4 10             	add    esp,0x10
c00220b6:	83 c4 0c             	add    esp,0xc
c00220b9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00220ba <IDE::~IDE()>:
c00220ba:	83 ec 0c             	sub    esp,0xc
c00220bd:	ba 74 59 02 c0       	mov    edx,0xc0025974
c00220c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c6:	89 10                	mov    DWORD PTR [eax],edx
c00220c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cc:	83 ec 0c             	sub    esp,0xc
c00220cf:	50                   	push   eax
c00220d0:	e8 57 7c fe ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c00220d5:	83 c4 10             	add    esp,0x10
c00220d8:	90                   	nop
c00220d9:	83 c4 0c             	add    esp,0xc
c00220dc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00220de <IDE::~IDE()>:
c00220de:	83 ec 0c             	sub    esp,0xc
c00220e1:	83 ec 0c             	sub    esp,0xc
c00220e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220e8:	e8 cd ff ff ff       	call   c00220ba <IDE::~IDE()>
c00220ed:	83 c4 10             	add    esp,0x10
c00220f0:	83 ec 08             	sub    esp,0x8
c00220f3:	68 70 02 00 00       	push   0x270
c00220f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220fc:	e8 26 b1 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022101:	83 c4 10             	add    esp,0x10
c0022104:	83 c4 0c             	add    esp,0xc
c0022107:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022108 <SATABus::~SATABus()>:
c0022108:	83 ec 0c             	sub    esp,0xc
c002210b:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	89 10                	mov    DWORD PTR [eax],edx
c0022116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211a:	83 ec 0c             	sub    esp,0xc
c002211d:	50                   	push   eax
c002211e:	e8 09 7c fe ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	90                   	nop
c0022127:	83 c4 0c             	add    esp,0xc
c002212a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002212c <SATABus::~SATABus()>:
c002212c:	83 ec 0c             	sub    esp,0xc
c002212f:	83 ec 0c             	sub    esp,0xc
c0022132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022136:	e8 cd ff ff ff       	call   c0022108 <SATABus::~SATABus()>
c002213b:	83 c4 10             	add    esp,0x10
c002213e:	83 ec 08             	sub    esp,0x8
c0022141:	68 64 01 00 00       	push   0x164
c0022146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002214a:	e8 d8 b0 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c002214f:	83 c4 10             	add    esp,0x10
c0022152:	83 c4 0c             	add    esp,0xc
c0022155:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022156 <ATA::~ATA()>:
c0022156:	83 ec 0c             	sub    esp,0xc
c0022159:	ba ac 5a 02 c0       	mov    edx,0xc0025aac
c002215e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022162:	89 10                	mov    DWORD PTR [eax],edx
c0022164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022168:	83 ec 0c             	sub    esp,0xc
c002216b:	50                   	push   eax
c002216c:	e8 9d 7c fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c0022171:	83 c4 10             	add    esp,0x10
c0022174:	90                   	nop
c0022175:	83 c4 0c             	add    esp,0xc
c0022178:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002217a <ATA::~ATA()>:
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022184:	e8 cd ff ff ff       	call   c0022156 <ATA::~ATA()>
c0022189:	83 c4 10             	add    esp,0x10
c002218c:	83 ec 08             	sub    esp,0x8
c002218f:	68 8c 01 00 00       	push   0x18c
c0022194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022198:	e8 8a b0 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c002219d:	83 c4 10             	add    esp,0x10
c00221a0:	83 c4 0c             	add    esp,0xc
c00221a3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00221a4 <ATAPI::~ATAPI()>:
c00221a4:	83 ec 0c             	sub    esp,0xc
c00221a7:	ba f4 5a 02 c0       	mov    edx,0xc0025af4
c00221ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b0:	89 10                	mov    DWORD PTR [eax],edx
c00221b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	50                   	push   eax
c00221ba:	e8 4f 7c fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	90                   	nop
c00221c3:	83 c4 0c             	add    esp,0xc
c00221c6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00221c8 <ATAPI::~ATAPI()>:
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	83 ec 0c             	sub    esp,0xc
c00221ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221d2:	e8 cd ff ff ff       	call   c00221a4 <ATAPI::~ATAPI()>
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	83 ec 08             	sub    esp,0x8
c00221dd:	68 84 01 00 00       	push   0x184
c00221e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221e6:	e8 3c b0 fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00221eb:	83 c4 10             	add    esp,0x10
c00221ee:	83 c4 0c             	add    esp,0xc
c00221f1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00221f2 <SATA::~SATA()>:
c00221f2:	83 ec 0c             	sub    esp,0xc
c00221f5:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c00221fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fe:	89 10                	mov    DWORD PTR [eax],edx
c0022200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022204:	83 ec 0c             	sub    esp,0xc
c0022207:	50                   	push   eax
c0022208:	e8 01 7c fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c002220d:	83 c4 10             	add    esp,0x10
c0022210:	90                   	nop
c0022211:	83 c4 0c             	add    esp,0xc
c0022214:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022216 <SATA::~SATA()>:
c0022216:	83 ec 0c             	sub    esp,0xc
c0022219:	83 ec 0c             	sub    esp,0xc
c002221c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022220:	e8 cd ff ff ff       	call   c00221f2 <SATA::~SATA()>
c0022225:	83 c4 10             	add    esp,0x10
c0022228:	83 ec 08             	sub    esp,0x8
c002222b:	68 7c 01 00 00       	push   0x17c
c0022230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022234:	e8 ee af fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022239:	83 c4 10             	add    esp,0x10
c002223c:	83 c4 0c             	add    esp,0xc
c002223f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022240 <SATAPI::~SATAPI()>:
c0022240:	83 ec 0c             	sub    esp,0xc
c0022243:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0022248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224c:	89 10                	mov    DWORD PTR [eax],edx
c002224e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022252:	83 ec 0c             	sub    esp,0xc
c0022255:	50                   	push   eax
c0022256:	e8 b3 7b fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c002225b:	83 c4 10             	add    esp,0x10
c002225e:	90                   	nop
c002225f:	83 c4 0c             	add    esp,0xc
c0022262:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022264 <SATAPI::~SATAPI()>:
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	83 ec 0c             	sub    esp,0xc
c002226a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002226e:	e8 cd ff ff ff       	call   c0022240 <SATAPI::~SATAPI()>
c0022273:	83 c4 10             	add    esp,0x10
c0022276:	83 ec 08             	sub    esp,0x8
c0022279:	68 84 01 00 00       	push   0x184
c002227e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022282:	e8 a0 af fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022287:	83 c4 10             	add    esp,0x10
c002228a:	83 c4 0c             	add    esp,0xc
c002228d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002228e <IOAPIC::~IOAPIC()>:
c002228e:	83 ec 0c             	sub    esp,0xc
c0022291:	ba 38 5d 02 c0       	mov    edx,0xc0025d38
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	89 10                	mov    DWORD PTR [eax],edx
c002229c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a0:	83 ec 0c             	sub    esp,0xc
c00222a3:	50                   	push   eax
c00222a4:	e8 f3 75 fe ff       	call   c000989c <Device::~Device()>
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	90                   	nop
c00222ad:	83 c4 0c             	add    esp,0xc
c00222b0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00222b2 <IOAPIC::~IOAPIC()>:
c00222b2:	83 ec 0c             	sub    esp,0xc
c00222b5:	83 ec 0c             	sub    esp,0xc
c00222b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222bc:	e8 cd ff ff ff       	call   c002228e <IOAPIC::~IOAPIC()>
c00222c1:	83 c4 10             	add    esp,0x10
c00222c4:	83 ec 08             	sub    esp,0x8
c00222c7:	68 68 01 00 00       	push   0x168
c00222cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222d0:	e8 52 af fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c00222d5:	83 c4 10             	add    esp,0x10
c00222d8:	83 c4 0c             	add    esp,0xc
c00222db:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00222dc <APICTimer::~APICTimer()>:
c00222dc:	83 ec 0c             	sub    esp,0xc
c00222df:	ba 80 5d 02 c0       	mov    edx,0xc0025d80
c00222e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e8:	89 10                	mov    DWORD PTR [eax],edx
c00222ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ee:	83 ec 0c             	sub    esp,0xc
c00222f1:	50                   	push   eax
c00222f2:	e8 e5 8c fe ff       	call   c000afdc <Timer::~Timer()>
c00222f7:	83 c4 10             	add    esp,0x10
c00222fa:	90                   	nop
c00222fb:	83 c4 0c             	add    esp,0xc
c00222fe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022300 <APICTimer::~APICTimer()>:
c0022300:	83 ec 0c             	sub    esp,0xc
c0022303:	83 ec 0c             	sub    esp,0xc
c0022306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002230a:	e8 cd ff ff ff       	call   c00222dc <APICTimer::~APICTimer()>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	83 ec 08             	sub    esp,0x8
c0022315:	68 60 01 00 00       	push   0x160
c002231a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002231e:	e8 04 af fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022323:	83 c4 10             	add    esp,0x10
c0022326:	83 c4 0c             	add    esp,0xc
c0022329:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002232c <PIT::~PIT()>:
c002232c:	83 ec 0c             	sub    esp,0xc
c002232f:	ba d0 5d 02 c0       	mov    edx,0xc0025dd0
c0022334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022338:	89 10                	mov    DWORD PTR [eax],edx
c002233a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002233e:	83 ec 0c             	sub    esp,0xc
c0022341:	50                   	push   eax
c0022342:	e8 95 8c fe ff       	call   c000afdc <Timer::~Timer()>
c0022347:	83 c4 10             	add    esp,0x10
c002234a:	90                   	nop
c002234b:	83 c4 0c             	add    esp,0xc
c002234e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022350 <PIT::~PIT()>:
c0022350:	83 ec 0c             	sub    esp,0xc
c0022353:	83 ec 0c             	sub    esp,0xc
c0022356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002235a:	e8 cd ff ff ff       	call   c002232c <PIT::~PIT()>
c002235f:	83 c4 10             	add    esp,0x10
c0022362:	83 ec 08             	sub    esp,0x8
c0022365:	68 5c 01 00 00       	push   0x15c
c002236a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002236e:	e8 b4 ae fe ff       	call   c000d227 <operator delete(void*, unsigned long)>
c0022373:	83 c4 10             	add    esp,0x10
c0022376:	83 c4 0c             	add    esp,0xc
c0022379:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 1f 40 02 c0       	mov    esi,0xc002401f
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 3b 40 02 c0       	mov    esi,0xc002403b
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
