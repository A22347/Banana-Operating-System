
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 17 fd 00 00       	call   c000fd37 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 71 02 c0       	mov    eax,0xc0027188
c0000025:	3d 88 71 02 c0       	cmp    eax,0xc0027188
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 71 02 c0       	push   0xc0027188
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 71 02 c0       	mov    eax,0xc0027188
c0000051:	2d 88 71 02 c0       	sub    eax,0xc0027188
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 71 02 c0       	push   0xc0027188
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e0 27 02 c0       	mov    ebx,0xc00227e0
c0000097:	81 eb dc 27 02 c0    	sub    ebx,0xc00227dc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be dc 27 02 c0       	mov    esi,0xc00227dc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 71 02 c0       	push   0xc0027188
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 88 71 02 c0       	push   0xc0027188
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1f 65 01 00       	call   c00167cc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 5e 43 01 00       	call   c0014623 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 fd 64 01 00       	call   c00167cc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5e 6a 01 00       	call   c0016d4c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b5 6f 01 00       	call   c00172ac <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 f0 02 c0 	lgdtd  ds:0xc002f0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 c6 ef 00 00       	jmp    c000f345 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 28 02 c0 02 	test   BYTE PTR [edx-0x3ffdd800],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 28 02 c0 01 	test   BYTE PTR [edx-0x3ffdd800],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 28 02 c0 08 	test   BYTE PTR [edx-0x3ffdd800],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 28 02 c0 08 	test   BYTE PTR [edx-0x3ffdd800],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 28 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd800],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 28 02 c0 01 	test   BYTE PTR [edx-0x3ffdd800],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000e2a:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e8e:	e8 f3 eb 00 00       	call   c000fa86 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 00 eb 00 00       	call   c000fa28 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 db e9 00 00       	call   c000f9f2 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 d6 e9 00 00       	call   c000fa28 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 cc e8 00 00       	call   c000f9f2 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 e7 e7 00 00       	call   c000f9f2 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 d1 e7 00 00       	call   c000f9f2 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c0001313:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000136a:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c00013b3:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013ce:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c0001488:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c000148e:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001495:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000155b:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001561:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c0001568:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 91 02 c0       	mov    edx,0xc0029100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c00016b6:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 04 29 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd6fc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 65 a0 01 00       	jmp    c001c020 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 8f a0 01 00       	jmp    c001c060 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 b0 a0 01 00       	jmp    c001c0a0 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 60 2a 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd5a0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 60 2a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd5a0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 1c 29 02 c0       	mov    edx,0xc002291c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 22 29 02 c0       	mov    eax,0xc0022922
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf e0 29 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd620]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 2b 29 02 c0       	mov    eax,0xc002292b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 60 2a 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd5a0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 b0 29 02 c0       	mov    eax,0xc00229b0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb a0 29 02 c0       	mov    ebx,0xc00229a0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 90 29 02 c0       	mov    eax,0xc0022990
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 32 29 02 c0       	mov    edx,0xc0022932
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 3e 29 02 c0       	mov    edx,0xc002293e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 52 29 02 c0       	mov    edx,0xc0022952
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 c5 9c 00 00       	call   c000fb08 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 bd 9c 00 00       	call   c000fb18 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 80 2d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022d80
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 80 2d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022d80
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 80 2b 02 c0       	mov    eax,0xc0022b80
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 80 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd580]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 80 2e 02 c0       	push   0xc0022e80
c0006327:	e8 98 66 01 00       	call   c001c9c4 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 8e 2e 02 c0       	push   0xc0022e8e
c000635f:	e8 60 66 01 00       	call   c001c9c4 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 c9 65 01 00       	call   c001c968 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 90 02 c0       	mov    eax,0xc0029080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 90 02 c0       	mov    eax,0xc0029020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 9d 2e 02 c0       	push   0xc0022e9d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c000675b:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006765:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c000677d:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067f6:	8b 9d 4c 95 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd6ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c000688d:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068ef:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c000692c:	05 40 95 02 c0       	add    eax,0xc0029540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069ec:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 a0 2e 02 c0       	push   0xc0022ea0
c0006a0f:	e8 b0 5f 01 00       	call   c001c9c4 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 be 5f 01 00       	call   c001c9e0 <iso_kprintfd>
c0006a22:	c7 04 24 a5 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea5
c0006a29:	e8 96 5f 01 00       	call   c001c9c4 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a35:	e8 a6 5f 01 00       	call   c001c9e0 <iso_kprintfd>
c0006a3a:	c7 04 24 ab 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eab
c0006a41:	e8 7e 5f 01 00       	call   c001c9c4 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a4d:	e8 8e 5f 01 00       	call   c001c9e0 <iso_kprintfd>
c0006a52:	c7 04 24 b1 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eb1
c0006a59:	e8 66 5f 01 00       	call   c001c9c4 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a65:	e8 76 5f 01 00       	call   c001c9e0 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006acb:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 95 02 c0    	lea    ebp,[edi-0x3ffd6aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 95 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd6aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 9d 2e 02 c0       	push   0xc0022e9d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006c0a:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006c10:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 95 02 c0    	lea    eax,[edi-0x3ffd6ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 ba 2e 02 c0       	push   0xc0022eba
c0006c32:	e8 8d 5d 01 00       	call   c001c9c4 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c67:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 c5 2e 02 c0       	push   0xc0022ec5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 cc 2e 02 c0       	push   0xc0022ecc
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006d05:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d28:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 d3 2e 02 c0       	push   0xc0022ed3
c0006d49:	e8 76 5c 01 00       	call   c001c9c4 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 de 2e 02 c0       	push   0xc0022ede
c0006d64:	e8 5b 5c 01 00       	call   c001c9c4 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 95 02 c0       	push   0xc0029540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 75 8d 00 00       	call   c000fb08 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d9f:	e8 64 8d 00 00       	call   c000fb08 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 4f 8d 00 00       	call   c000fb08 <malloc>
c0006db9:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 36 8d 00 00       	call   c000fb08 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006dff:	e8 14 8d 00 00       	call   c000fb18 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 06 8d 00 00       	call   c000fb18 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 ec 8c 00 00       	call   c000fb18 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 d7 8c 00 00       	call   c000fb18 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 24 f1 02 c0 10 	test   BYTE PTR ds:0xc002f124,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 1c             	sub    esp,0x1c
c0006f55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0006f59:	85 ff                	test   edi,edi
c0006f5b:	0f 84 44 01 00 00    	je     c00070a5 <Dbg::kprintf(char const*, ...)+0x157>
c0006f61:	f6 05 24 f1 02 c0 10 	test   BYTE PTR ds:0xc002f124,0x10
c0006f68:	74 08                	je     c0006f72 <Dbg::kprintf(char const*, ...)+0x24>
c0006f6a:	83 c4 1c             	add    esp,0x1c
c0006f6d:	5b                   	pop    ebx
c0006f6e:	5e                   	pop    esi
c0006f6f:	5f                   	pop    edi
c0006f70:	5d                   	pop    ebp
c0006f71:	c3                   	ret    
c0006f72:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f76:	31 f6                	xor    esi,esi
c0006f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f7c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 e7                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f83:	8d 5e 01             	lea    ebx,[esi+0x1]
c0006f86:	83 f8 25             	cmp    eax,0x25
c0006f89:	8d 2c 1f             	lea    ebp,[edi+ebx*1]
c0006f8c:	75 4c                	jne    c0006fda <Dbg::kprintf(char const*, ...)+0x8c>
c0006f8e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f91:	83 c6 02             	add    esi,0x2
c0006f94:	8d 1c 37             	lea    ebx,[edi+esi*1]
c0006f97:	83 e8 25             	sub    eax,0x25
c0006f9a:	0f b6 c0             	movzx  eax,al
c0006f9d:	83 f8 53             	cmp    eax,0x53
c0006fa0:	0f 87 e1 00 00 00    	ja     c0007087 <Dbg::kprintf(char const*, ...)+0x139>
c0006fa6:	ff 24 85 00 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd100]
c0006fad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fb1:	83 ec 0c             	sub    esp,0xc
c0006fb4:	89 c8                	mov    eax,ecx
c0006fb6:	83 c1 04             	add    ecx,0x4
c0006fb9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fbf:	50                   	push   eax
c0006fc0:	e8 4a ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fc5:	83 c4 10             	add    esp,0x10
c0006fc8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fcb:	85 c0                	test   eax,eax
c0006fcd:	74 9b                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006fcf:	8d 5e 01             	lea    ebx,[esi+0x1]
c0006fd2:	83 f8 25             	cmp    eax,0x25
c0006fd5:	8d 2c 1f             	lea    ebp,[edi+ebx*1]
c0006fd8:	74 b4                	je     c0006f8e <Dbg::kprintf(char const*, ...)+0x40>
c0006fda:	83 ec 0c             	sub    esp,0xc
c0006fdd:	89 de                	mov    esi,ebx
c0006fdf:	50                   	push   eax
c0006fe0:	89 eb                	mov    ebx,ebp
c0006fe2:	e8 e9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fe7:	83 c4 10             	add    esp,0x10
c0006fea:	eb dc                	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0006fec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006ff0:	83 ec 0c             	sub    esp,0xc
c0006ff3:	89 c8                	mov    eax,ecx
c0006ff5:	83 c1 04             	add    ecx,0x4
c0006ff8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ffc:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006ffe:	55                   	push   ebp
c0006fff:	e8 ec fe ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0007004:	83 c4 10             	add    esp,0x10
c0007007:	eb bf                	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0007009:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000700d:	83 ec 0c             	sub    esp,0xc
c0007010:	89 d0                	mov    eax,edx
c0007012:	83 c2 04             	add    edx,0x4
c0007015:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007019:	8b 08                	mov    ecx,DWORD PTR [eax]
c000701b:	51                   	push   ecx
c000701c:	e8 ee fe ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007021:	83 c4 10             	add    esp,0x10
c0007024:	eb a2                	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0007026:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702a:	83 ec 0c             	sub    esp,0xc
c000702d:	89 d0                	mov    eax,edx
c000702f:	83 c2 04             	add    edx,0x4
c0007032:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007036:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007039:	50                   	push   eax
c000703a:	e8 91 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000703f:	83 c4 10             	add    esp,0x10
c0007042:	eb 84                	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0007044:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007048:	89 c8                	mov    eax,ecx
c000704a:	83 c1 04             	add    ecx,0x4
c000704d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	6a 10                	push   0x10
c0007056:	8b 10                	mov    edx,DWORD PTR [eax]
c0007058:	52                   	push   edx
c0007059:	e8 cf fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000705e:	83 c4 10             	add    esp,0x10
c0007061:	e9 62 ff ff ff       	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0007066:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000706a:	89 d0                	mov    eax,edx
c000706c:	83 c2 08             	add    edx,0x8
c000706f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007073:	eb dc                	jmp    c0007051 <Dbg::kprintf(char const*, ...)+0x103>
c0007075:	83 ec 0c             	sub    esp,0xc
c0007078:	6a 25                	push   0x25
c000707a:	e8 51 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707f:	83 c4 10             	add    esp,0x10
c0007082:	e9 41 ff ff ff       	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c0007087:	83 ec 0c             	sub    esp,0xc
c000708a:	6a 25                	push   0x25
c000708c:	e8 3f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007091:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007095:	89 04 24             	mov    DWORD PTR [esp],eax
c0007098:	e8 33 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709d:	83 c4 10             	add    esp,0x10
c00070a0:	e9 23 ff ff ff       	jmp    c0006fc8 <Dbg::kprintf(char const*, ...)+0x7a>
c00070a5:	83 ec 0c             	sub    esp,0xc
c00070a8:	68 ef 2e 02 c0       	push   0xc0022eef
c00070ad:	e8 9c fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b2:	83 c4 10             	add    esp,0x10
c00070b5:	e9 b0 fe ff ff       	jmp    c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c00070ba:	66 90                	xchg   ax,ax

c00070bc <KiUbsanPrintDetails(char const*, void*)>:
c00070bc:	83 ec 1c             	sub    esp,0x1c
c00070bf:	83 ec 08             	sub    esp,0x8
c00070c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070c6:	68 50 30 02 c0       	push   0xc0023050
c00070cb:	e8 7e fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070d0:	83 c4 10             	add    esp,0x10
c00070d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070df:	8b 00                	mov    eax,DWORD PTR [eax]
c00070e1:	83 ec 08             	sub    esp,0x8
c00070e4:	50                   	push   eax
c00070e5:	68 64 30 02 c0       	push   0xc0023064
c00070ea:	e8 5f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070ef:	83 c4 10             	add    esp,0x10
c00070f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070f9:	83 ec 08             	sub    esp,0x8
c00070fc:	50                   	push   eax
c00070fd:	68 6e 30 02 c0       	push   0xc002306e
c0007102:	e8 47 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007107:	83 c4 10             	add    esp,0x10
c000710a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000710e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007111:	83 ec 08             	sub    esp,0x8
c0007114:	50                   	push   eax
c0007115:	68 78 30 02 c0       	push   0xc0023078
c000711a:	e8 2f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711f:	83 c4 10             	add    esp,0x10
c0007122:	90                   	nop
c0007123:	83 c4 1c             	add    esp,0x1c
c0007126:	c3                   	ret    
c0007127:	90                   	nop

c0007128 <__ubsan_handle_type_mismatch_v1>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	83 ec 08             	sub    esp,0x8
c000712e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007132:	68 bc 31 02 c0       	push   0xc00231bc
c0007137:	e8 80 ff ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c000713c:	83 c4 10             	add    esp,0x10
c000713f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007144:	75 16                	jne    c000715c <__ubsan_handle_type_mismatch_v1+0x34>
c0007146:	83 ec 0c             	sub    esp,0xc
c0007149:	68 82 30 02 c0       	push   0xc0023082
c000714e:	e8 fb fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007153:	83 c4 10             	add    esp,0x10
c0007156:	e9 91 00 00 00       	jmp    c00071ec <__ubsan_handle_type_mismatch_v1+0xc4>
c000715b:	90                   	nop
c000715c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007160:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007163:	85 c0                	test   eax,eax
c0007165:	74 29                	je     c0007190 <__ubsan_handle_type_mismatch_v1+0x68>
c0007167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000716e:	83 e8 01             	sub    eax,0x1
c0007171:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007175:	75 19                	jne    c0007190 <__ubsan_handle_type_mismatch_v1+0x68>
c0007177:	83 ec 08             	sub    esp,0x8
c000717a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000717e:	68 dc 31 02 c0       	push   0xc00231dc
c0007183:	e8 c6 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007188:	83 c4 10             	add    esp,0x10
c000718b:	eb 5f                	jmp    c00071ec <__ubsan_handle_type_mismatch_v1+0xc4>
c000718d:	8d 76 00             	lea    esi,[esi+0x0]
c0007190:	83 ec 0c             	sub    esp,0xc
c0007193:	68 97 30 02 c0       	push   0xc0023097
c0007198:	e8 b1 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000719d:	83 c4 10             	add    esp,0x10
c00071a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a4:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071a7:	0f b6 c0             	movzx  eax,al
c00071aa:	83 ec 08             	sub    esp,0x8
c00071ad:	50                   	push   eax
c00071ae:	68 b1 30 02 c0       	push   0xc00230b1
c00071b3:	e8 96 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071b8:	83 c4 10             	add    esp,0x10
c00071bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071c2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071cd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071d0:	0f b6 c0             	movzx  eax,al
c00071d3:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c00071da:	51                   	push   ecx
c00071db:	52                   	push   edx
c00071dc:	50                   	push   eax
c00071dd:	68 04 32 02 c0       	push   0xc0023204
c00071e2:	e8 67 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	66 90                	xchg   ax,ax
c00071ec:	83 ec 0c             	sub    esp,0xc
c00071ef:	68 bc 31 02 c0       	push   0xc00231bc
c00071f4:	e8 55 8c 00 00       	call   c000fe4e <KePanic(char const*)>
c00071f9:	83 c4 10             	add    esp,0x10
c00071fc:	90                   	nop
c00071fd:	83 c4 0c             	add    esp,0xc
c0007200:	c3                   	ret    
c0007201:	8d 76 00             	lea    esi,[esi+0x0]

c0007204 <__ubsan_handle_pointer_overflow>:
c0007204:	83 ec 0c             	sub    esp,0xc
c0007207:	83 ec 08             	sub    esp,0x8
c000720a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000720e:	68 4c 32 02 c0       	push   0xc002324c
c0007213:	e8 a4 fe ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c0007218:	83 c4 10             	add    esp,0x10
c000721b:	83 ec 0c             	sub    esp,0xc
c000721e:	68 4c 32 02 c0       	push   0xc002324c
c0007223:	e8 26 8c 00 00       	call   c000fe4e <KePanic(char const*)>
c0007228:	83 c4 10             	add    esp,0x10
c000722b:	90                   	nop
c000722c:	83 c4 0c             	add    esp,0xc
c000722f:	c3                   	ret    

c0007230 <__ubsan_handle_out_of_bounds>:
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	83 ec 08             	sub    esp,0x8
c0007236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000723a:	68 bc 30 02 c0       	push   0xc00230bc
c000723f:	e8 78 fe ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c0007244:	83 c4 10             	add    esp,0x10
c0007247:	83 ec 0c             	sub    esp,0xc
c000724a:	68 bc 30 02 c0       	push   0xc00230bc
c000724f:	e8 fa 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c0007254:	83 c4 10             	add    esp,0x10
c0007257:	90                   	nop
c0007258:	83 c4 0c             	add    esp,0xc
c000725b:	c3                   	ret    

c000725c <__ubsan_handle_add_overflow>:
c000725c:	83 ec 0c             	sub    esp,0xc
c000725f:	83 ec 08             	sub    esp,0x8
c0007262:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007266:	68 d9 30 02 c0       	push   0xc00230d9
c000726b:	e8 4c fe ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c0007270:	83 c4 10             	add    esp,0x10
c0007273:	83 ec 0c             	sub    esp,0xc
c0007276:	68 d9 30 02 c0       	push   0xc00230d9
c000727b:	e8 ce 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c0007280:	83 c4 10             	add    esp,0x10
c0007283:	90                   	nop
c0007284:	83 c4 0c             	add    esp,0xc
c0007287:	c3                   	ret    

c0007288 <__ubsan_handle_load_invalid_value>:
c0007288:	83 ec 0c             	sub    esp,0xc
c000728b:	83 ec 08             	sub    esp,0x8
c000728e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007292:	68 6c 32 02 c0       	push   0xc002326c
c0007297:	e8 20 fe ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c000729c:	83 c4 10             	add    esp,0x10
c000729f:	83 ec 0c             	sub    esp,0xc
c00072a2:	68 6c 32 02 c0       	push   0xc002326c
c00072a7:	e8 a2 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c00072ac:	83 c4 10             	add    esp,0x10
c00072af:	90                   	nop
c00072b0:	83 c4 0c             	add    esp,0xc
c00072b3:	c3                   	ret    

c00072b4 <__ubsan_handle_divrem_overflow>:
c00072b4:	83 ec 0c             	sub    esp,0xc
c00072b7:	83 ec 08             	sub    esp,0x8
c00072ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072be:	68 90 32 02 c0       	push   0xc0023290
c00072c3:	e8 f4 fd ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c00072c8:	83 c4 10             	add    esp,0x10
c00072cb:	83 ec 0c             	sub    esp,0xc
c00072ce:	68 90 32 02 c0       	push   0xc0023290
c00072d3:	e8 76 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c00072d8:	83 c4 10             	add    esp,0x10
c00072db:	90                   	nop
c00072dc:	83 c4 0c             	add    esp,0xc
c00072df:	c3                   	ret    

c00072e0 <__ubsan_handle_mul_overflow>:
c00072e0:	83 ec 0c             	sub    esp,0xc
c00072e3:	83 ec 08             	sub    esp,0x8
c00072e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ea:	68 f5 30 02 c0       	push   0xc00230f5
c00072ef:	e8 c8 fd ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c00072f4:	83 c4 10             	add    esp,0x10
c00072f7:	83 ec 0c             	sub    esp,0xc
c00072fa:	68 f5 30 02 c0       	push   0xc00230f5
c00072ff:	e8 4a 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c0007304:	83 c4 10             	add    esp,0x10
c0007307:	90                   	nop
c0007308:	83 c4 0c             	add    esp,0xc
c000730b:	c3                   	ret    

c000730c <__ubsan_handle_sub_overflow>:
c000730c:	83 ec 0c             	sub    esp,0xc
c000730f:	83 ec 08             	sub    esp,0x8
c0007312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007316:	68 11 31 02 c0       	push   0xc0023111
c000731b:	e8 9c fd ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c0007320:	83 c4 10             	add    esp,0x10
c0007323:	83 ec 0c             	sub    esp,0xc
c0007326:	68 11 31 02 c0       	push   0xc0023111
c000732b:	e8 1e 8b 00 00       	call   c000fe4e <KePanic(char const*)>
c0007330:	83 c4 10             	add    esp,0x10
c0007333:	90                   	nop
c0007334:	83 c4 0c             	add    esp,0xc
c0007337:	c3                   	ret    

c0007338 <__ubsan_handle_shift_out_of_bounds>:
c0007338:	83 ec 0c             	sub    esp,0xc
c000733b:	83 ec 08             	sub    esp,0x8
c000733e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007342:	68 b0 32 02 c0       	push   0xc00232b0
c0007347:	e8 70 fd ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c000734c:	83 c4 10             	add    esp,0x10
c000734f:	83 ec 0c             	sub    esp,0xc
c0007352:	68 b0 32 02 c0       	push   0xc00232b0
c0007357:	e8 f2 8a 00 00       	call   c000fe4e <KePanic(char const*)>
c000735c:	83 c4 10             	add    esp,0x10
c000735f:	90                   	nop
c0007360:	83 c4 0c             	add    esp,0xc
c0007363:	c3                   	ret    

c0007364 <__ubsan_handle_negate_overflow>:
c0007364:	83 ec 0c             	sub    esp,0xc
c0007367:	83 ec 08             	sub    esp,0x8
c000736a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000736e:	68 d4 32 02 c0       	push   0xc00232d4
c0007373:	e8 44 fd ff ff       	call   c00070bc <KiUbsanPrintDetails(char const*, void*)>
c0007378:	83 c4 10             	add    esp,0x10
c000737b:	83 ec 0c             	sub    esp,0xc
c000737e:	68 d4 32 02 c0       	push   0xc00232d4
c0007383:	e8 c6 8a 00 00       	call   c000fe4e <KePanic(char const*)>
c0007388:	83 c4 10             	add    esp,0x10
c000738b:	90                   	nop
c000738c:	83 c4 0c             	add    esp,0xc
c000738f:	c3                   	ret    

c0007390 <KiIsHashInTable(unsigned short)>:
c0007390:	0f b7 d0             	movzx  edx,ax
c0007393:	83 e0 07             	and    eax,0x7
c0007396:	c1 fa 03             	sar    edx,0x3
c0007399:	88 c1                	mov    cl,al
c000739b:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073a2:	d3 fa                	sar    edx,cl
c00073a4:	89 d0                	mov    eax,edx
c00073a6:	83 e0 01             	and    eax,0x1
c00073a9:	c3                   	ret    

c00073aa <KiSetHashInTable(unsigned short, bool)>:
c00073aa:	56                   	push   esi
c00073ab:	53                   	push   ebx
c00073ac:	0f b7 d8             	movzx  ebx,ax
c00073af:	c1 fb 03             	sar    ebx,0x3
c00073b2:	83 e0 07             	and    eax,0x7
c00073b5:	89 c1                	mov    ecx,eax
c00073b7:	b8 01 00 00 00       	mov    eax,0x1
c00073bc:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073c3:	d3 e0                	shl    eax,cl
c00073c5:	84 d2                	test   dl,dl
c00073c7:	74 04                	je     c00073cd <KiSetHashInTable(unsigned short, bool)+0x23>
c00073c9:	09 f0                	or     eax,esi
c00073cb:	eb 04                	jmp    c00073d1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073cd:	f7 d0                	not    eax
c00073cf:	21 f0                	and    eax,esi
c00073d1:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c00073d7:	5b                   	pop    ebx
c00073d8:	5e                   	pop    esi
c00073d9:	c3                   	ret    

c00073da <KiFlushSymlinkChanges()>:
c00073da:	57                   	push   edi
c00073db:	56                   	push   esi
c00073dc:	53                   	push   ebx
c00073dd:	83 ec 1c             	sub    esp,0x1c
c00073e0:	68 14 01 00 00       	push   0x114
c00073e5:	e8 1e 87 00 00       	call   c000fb08 <malloc>
c00073ea:	83 c4 0c             	add    esp,0xc
c00073ed:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00073f3:	68 f3 32 02 c0       	push   0xc00232f3
c00073f8:	50                   	push   eax
c00073f9:	89 c3                	mov    ebx,eax
c00073fb:	e8 64 0d 00 00       	call   c0008164 <File::File(char const*, Process*)>
c0007400:	83 c4 10             	add    esp,0x10
c0007403:	85 db                	test   ebx,ebx
c0007405:	75 10                	jne    c0007417 <KiFlushSymlinkChanges()+0x3d>
c0007407:	83 ec 0c             	sub    esp,0xc
c000740a:	68 11 33 02 c0       	push   0xc0023311
c000740f:	e8 3a 8a 00 00       	call   c000fe4e <KePanic(char const*)>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	50                   	push   eax
c0007418:	50                   	push   eax
c0007419:	6a 06                	push   0x6
c000741b:	53                   	push   ebx
c000741c:	e8 61 0d 00 00       	call   c0008182 <File::open(FileOpenMode)>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	74 10                	je     c0007438 <KiFlushSymlinkChanges()+0x5e>
c0007428:	83 ec 0c             	sub    esp,0xc
c000742b:	68 2b 33 02 c0       	push   0xc002332b
c0007430:	e8 19 8a 00 00       	call   c000fe4e <KePanic(char const*)>
c0007435:	83 c4 10             	add    esp,0x10
c0007438:	31 f6                	xor    esi,esi
c000743a:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007440:	7e 70                	jle    c00074b2 <KiFlushSymlinkChanges()+0xd8>
c0007442:	83 ec 0c             	sub    esp,0xc
c0007445:	89 f0                	mov    eax,esi
c0007447:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007449:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000744d:	c1 e0 08             	shl    eax,0x8
c0007450:	57                   	push   edi
c0007451:	05 00 9f 02 c0       	add    eax,0xc0029f00
c0007456:	50                   	push   eax
c0007457:	6a 00                	push   0x0
c0007459:	68 00 01 00 00       	push   0x100
c000745e:	53                   	push   ebx
c000745f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007462:	83 c4 20             	add    esp,0x20
c0007465:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000746d:	74 10                	je     c000747f <KiFlushSymlinkChanges()+0xa5>
c000746f:	83 ec 0c             	sub    esp,0xc
c0007472:	68 45 33 02 c0       	push   0xc0023345
c0007477:	e8 d2 89 00 00       	call   c000fe4e <KePanic(char const*)>
c000747c:	83 c4 10             	add    esp,0x10
c000747f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007481:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c0007488:	83 ec 0c             	sub    esp,0xc
c000748b:	57                   	push   edi
c000748c:	52                   	push   edx
c000748d:	6a 00                	push   0x0
c000748f:	6a 08                	push   0x8
c0007491:	53                   	push   ebx
c0007492:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000749d:	74 10                	je     c00074af <KiFlushSymlinkChanges()+0xd5>
c000749f:	83 ec 0c             	sub    esp,0xc
c00074a2:	68 5f 33 02 c0       	push   0xc002335f
c00074a7:	e8 a2 89 00 00       	call   c000fe4e <KePanic(char const*)>
c00074ac:	83 c4 10             	add    esp,0x10
c00074af:	46                   	inc    esi
c00074b0:	eb 88                	jmp    c000743a <KiFlushSymlinkChanges()+0x60>
c00074b2:	83 ec 0c             	sub    esp,0xc
c00074b5:	53                   	push   ebx
c00074b6:	e8 25 0d 00 00       	call   c00081e0 <File::close()>
c00074bb:	83 c4 10             	add    esp,0x10
c00074be:	85 db                	test   ebx,ebx
c00074c0:	74 0c                	je     c00074ce <KiFlushSymlinkChanges()+0xf4>
c00074c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074c4:	83 ec 0c             	sub    esp,0xc
c00074c7:	53                   	push   ebx
c00074c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074cb:	83 c4 10             	add    esp,0x10
c00074ce:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c00074d8:	83 c4 10             	add    esp,0x10
c00074db:	5b                   	pop    ebx
c00074dc:	5e                   	pop    esi
c00074dd:	5f                   	pop    edi
c00074de:	c3                   	ret    

c00074df <KiDeinitialiseSymlinks(void*)>:
c00074df:	e9 f6 fe ff ff       	jmp    c00073da <KiFlushSymlinkChanges()>

c00074e4 <KiGetSymlinkHash(char const*)>:
c00074e4:	53                   	push   ebx
c00074e5:	89 c3                	mov    ebx,eax
c00074e7:	83 ec 14             	sub    esp,0x14
c00074ea:	50                   	push   eax
c00074eb:	e8 90 90 ff ff       	call   c0000580 <strlen>
c00074f0:	5a                   	pop    edx
c00074f1:	59                   	pop    ecx
c00074f2:	50                   	push   eax
c00074f3:	53                   	push   ebx
c00074f4:	e8 00 6e 00 00       	call   c000e2f9 <KeCalculateCRC32(unsigned char*, int)>
c00074f9:	83 c4 18             	add    esp,0x18
c00074fc:	5b                   	pop    ebx
c00074fd:	89 c2                	mov    edx,eax
c00074ff:	c1 ea 10             	shr    edx,0x10
c0007502:	31 d0                	xor    eax,edx
c0007504:	c3                   	ret    

c0007505 <KiCreateSymlinkID()>:
c0007505:	55                   	push   ebp
c0007506:	57                   	push   edi
c0007507:	56                   	push   esi
c0007508:	53                   	push   ebx
c0007509:	31 db                	xor    ebx,ebx
c000750b:	83 ec 1c             	sub    esp,0x1c
c000750e:	e8 2a 93 00 00       	call   c001083d <KeRand()>
c0007513:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007519:	31 d2                	xor    edx,edx
c000751b:	43                   	inc    ebx
c000751c:	31 ff                	xor    edi,edi
c000751e:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007521:	89 ee                	mov    esi,ebp
c0007523:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007529:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000752d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007531:	c1 e0 1f             	shl    eax,0x1f
c0007534:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000753a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000753e:	75 10                	jne    c0007550 <KiCreateSymlinkID()+0x4b>
c0007540:	83 ec 0c             	sub    esp,0xc
c0007543:	68 79 33 02 c0       	push   0xc0023379
c0007548:	e8 01 89 00 00       	call   c000fe4e <KePanic(char const*)>
c000754d:	83 c4 10             	add    esp,0x10
c0007550:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007554:	75 06                	jne    c000755c <KiCreateSymlinkID()+0x57>
c0007556:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000755a:	74 b2                	je     c000750e <KiCreateSymlinkID()+0x9>
c000755c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007564:	83 c4 1c             	add    esp,0x1c
c0007567:	5b                   	pop    ebx
c0007568:	31 f0                	xor    eax,esi
c000756a:	5e                   	pop    esi
c000756b:	31 fa                	xor    edx,edi
c000756d:	5f                   	pop    edi
c000756e:	5d                   	pop    ebp
c000756f:	c3                   	ret    

c0007570 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007570:	53                   	push   ebx
c0007571:	83 ec 0c             	sub    esp,0xc
c0007574:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007578:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000757c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007581:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007585:	68 00 01 00 00       	push   0x100
c000758a:	6a 00                	push   0x0
c000758c:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c0007593:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c000759a:	c1 e0 08             	shl    eax,0x8
c000759d:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075a2:	50                   	push   eax
c00075a3:	e8 48 8f ff ff       	call   c00004f0 <memset>
c00075a8:	58                   	pop    eax
c00075a9:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075ae:	5a                   	pop    edx
c00075af:	c1 e0 08             	shl    eax,0x8
c00075b2:	53                   	push   ebx
c00075b3:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075b8:	50                   	push   eax
c00075b9:	e8 92 90 ff ff       	call   c0000650 <strcpy>
c00075be:	89 d8                	mov    eax,ebx
c00075c0:	e8 1f ff ff ff       	call   c00074e4 <KiGetSymlinkHash(char const*)>
c00075c5:	ba 01 00 00 00       	mov    edx,0x1
c00075ca:	0f b7 c0             	movzx  eax,ax
c00075cd:	e8 d8 fd ff ff       	call   c00073aa <KiSetHashInTable(unsigned short, bool)>
c00075d2:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075d7:	83 c4 10             	add    esp,0x10
c00075da:	40                   	inc    eax
c00075db:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c00075e0:	83 f8 03             	cmp    eax,0x3
c00075e3:	7e 09                	jle    c00075ee <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075e5:	83 c4 08             	add    esp,0x8
c00075e8:	5b                   	pop    ebx
c00075e9:	e9 ec fd ff ff       	jmp    c00073da <KiFlushSymlinkChanges()>
c00075ee:	83 c4 08             	add    esp,0x8
c00075f1:	5b                   	pop    ebx
c00075f2:	c3                   	ret    

c00075f3 <KeInitialiseSymlinks()>:
c00075f3:	57                   	push   edi
c00075f4:	56                   	push   esi
c00075f5:	53                   	push   ebx
c00075f6:	81 ec 14 01 00 00    	sub    esp,0x114
c00075fc:	68 00 20 00 00       	push   0x2000
c0007601:	6a 00                	push   0x0
c0007603:	68 00 a3 02 c0       	push   0xc002a300
c0007608:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007612:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000761c:	e8 cf 8e ff ff       	call   c00004f0 <memset>
c0007621:	59                   	pop    ecx
c0007622:	5b                   	pop    ebx
c0007623:	6a 00                	push   0x0
c0007625:	68 df 74 00 c0       	push   0xc00074df
c000762a:	e8 b6 5a 00 00       	call   c000d0e5 <KeRegisterAtexit(void (*)(void*), void*)>
c000762f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007636:	e8 cd 84 00 00       	call   c000fb08 <malloc>
c000763b:	83 c4 0c             	add    esp,0xc
c000763e:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007644:	68 f3 32 02 c0       	push   0xc00232f3
c0007649:	50                   	push   eax
c000764a:	89 c3                	mov    ebx,eax
c000764c:	e8 13 0b 00 00       	call   c0008164 <File::File(char const*, Process*)>
c0007651:	83 c4 10             	add    esp,0x10
c0007654:	85 db                	test   ebx,ebx
c0007656:	75 10                	jne    c0007668 <KeInitialiseSymlinks()+0x75>
c0007658:	83 ec 0c             	sub    esp,0xc
c000765b:	68 82 33 02 c0       	push   0xc0023382
c0007660:	e8 e9 87 00 00       	call   c000fe4e <KePanic(char const*)>
c0007665:	83 c4 10             	add    esp,0x10
c0007668:	83 ec 0c             	sub    esp,0xc
c000766b:	53                   	push   ebx
c000766c:	e8 d5 0d 00 00       	call   c0008446 <File::exists()>
c0007671:	83 c4 10             	add    esp,0x10
c0007674:	84 c0                	test   al,al
c0007676:	75 3a                	jne    c00076b2 <KeInitialiseSymlinks()+0xbf>
c0007678:	52                   	push   edx
c0007679:	52                   	push   edx
c000767a:	6a 12                	push   0x12
c000767c:	53                   	push   ebx
c000767d:	e8 00 0b 00 00       	call   c0008182 <File::open(FileOpenMode)>
c0007682:	83 c4 10             	add    esp,0x10
c0007685:	85 c0                	test   eax,eax
c0007687:	74 10                	je     c0007699 <KeInitialiseSymlinks()+0xa6>
c0007689:	83 ec 0c             	sub    esp,0xc
c000768c:	68 9f 33 02 c0       	push   0xc002339f
c0007691:	e8 b8 87 00 00       	call   c000fe4e <KePanic(char const*)>
c0007696:	83 c4 10             	add    esp,0x10
c0007699:	83 ec 0c             	sub    esp,0xc
c000769c:	53                   	push   ebx
c000769d:	e8 3e 0b 00 00       	call   c00081e0 <File::close()>
c00076a2:	83 c4 10             	add    esp,0x10
c00076a5:	85 db                	test   ebx,ebx
c00076a7:	0f 84 9e 00 00 00    	je     c000774b <KeInitialiseSymlinks()+0x158>
c00076ad:	e9 8d 00 00 00       	jmp    c000773f <KeInitialiseSymlinks()+0x14c>
c00076b2:	50                   	push   eax
c00076b3:	50                   	push   eax
c00076b4:	6a 01                	push   0x1
c00076b6:	53                   	push   ebx
c00076b7:	e8 c6 0a 00 00       	call   c0008182 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xe0>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 bc 33 02 c0       	push   0xc00233bc
c00076cb:	e8 7e 87 00 00       	call   c000fe4e <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c00076d9:	83 ec 0c             	sub    esp,0xc
c00076dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e2:	57                   	push   edi
c00076e3:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076e7:	56                   	push   esi
c00076e8:	6a 00                	push   0x0
c00076ea:	68 00 01 00 00       	push   0x100
c00076ef:	53                   	push   ebx
c00076f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f3:	83 c4 20             	add    esp,0x20
c00076f6:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076fe:	75 33                	jne    c0007733 <KeInitialiseSymlinks()+0x140>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007705:	57                   	push   edi
c0007706:	8d 54 24 18          	lea    edx,[esp+0x18]
c000770a:	52                   	push   edx
c000770b:	6a 00                	push   0x0
c000770d:	6a 08                	push   0x8
c000770f:	53                   	push   ebx
c0007710:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007713:	83 c4 20             	add    esp,0x20
c0007716:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000771b:	75 16                	jne    c0007733 <KeInitialiseSymlinks()+0x140>
c000771d:	89 f0                	mov    eax,esi
c000771f:	e8 c0 fd ff ff       	call   c00074e4 <KiGetSymlinkHash(char const*)>
c0007724:	ba 01 00 00 00       	mov    edx,0x1
c0007729:	0f b7 c0             	movzx  eax,ax
c000772c:	e8 79 fc ff ff       	call   c00073aa <KiSetHashInTable(unsigned short, bool)>
c0007731:	eb a0                	jmp    c00076d3 <KeInitialiseSymlinks()+0xe0>
c0007733:	83 ec 0c             	sub    esp,0xc
c0007736:	53                   	push   ebx
c0007737:	e8 a4 0a 00 00       	call   c00081e0 <File::close()>
c000773c:	83 c4 10             	add    esp,0x10
c000773f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007741:	83 ec 0c             	sub    esp,0xc
c0007744:	53                   	push   ebx
c0007745:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007748:	83 c4 10             	add    esp,0x10
c000774b:	81 c4 10 01 00 00    	add    esp,0x110
c0007751:	5b                   	pop    ebx
c0007752:	5e                   	pop    esi
c0007753:	5f                   	pop    edi
c0007754:	c3                   	ret    

c0007755 <KiIsSymlinkRegistered(char const*)>:
c0007755:	55                   	push   ebp
c0007756:	57                   	push   edi
c0007757:	56                   	push   esi
c0007758:	53                   	push   ebx
c0007759:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000775f:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007766:	89 f0                	mov    eax,esi
c0007768:	e8 77 fd ff ff       	call   c00074e4 <KiGetSymlinkHash(char const*)>
c000776d:	0f b7 c0             	movzx  eax,ax
c0007770:	e8 1b fc ff ff       	call   c0007390 <KiIsHashInTable(unsigned short)>
c0007775:	31 d2                	xor    edx,edx
c0007777:	88 c1                	mov    cl,al
c0007779:	31 c0                	xor    eax,eax
c000777b:	84 c9                	test   cl,cl
c000777d:	0f 84 31 01 00 00    	je     c00078b4 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007783:	31 db                	xor    ebx,ebx
c0007785:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c000778b:	7e 30                	jle    c00077bd <KiIsSymlinkRegistered(char const*)+0x68>
c000778d:	89 d8                	mov    eax,ebx
c000778f:	c1 e0 08             	shl    eax,0x8
c0007792:	51                   	push   ecx
c0007793:	05 00 9f 02 c0       	add    eax,0xc0029f00
c0007798:	51                   	push   ecx
c0007799:	50                   	push   eax
c000779a:	56                   	push   esi
c000779b:	e8 e0 8f ff ff       	call   c0000780 <strcmp>
c00077a0:	83 c4 10             	add    esp,0x10
c00077a3:	85 c0                	test   eax,eax
c00077a5:	75 13                	jne    c00077ba <KiIsSymlinkRegistered(char const*)+0x65>
c00077a7:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077ae:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077b5:	e9 fa 00 00 00       	jmp    c00078b4 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077ba:	43                   	inc    ebx
c00077bb:	eb c8                	jmp    c0007785 <KiIsSymlinkRegistered(char const*)+0x30>
c00077bd:	83 ec 0c             	sub    esp,0xc
c00077c0:	68 14 01 00 00       	push   0x114
c00077c5:	e8 3e 83 00 00       	call   c000fb08 <malloc>
c00077ca:	83 c4 0c             	add    esp,0xc
c00077cd:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00077d3:	68 f3 32 02 c0       	push   0xc00232f3
c00077d8:	50                   	push   eax
c00077d9:	89 c3                	mov    ebx,eax
c00077db:	e8 84 09 00 00       	call   c0008164 <File::File(char const*, Process*)>
c00077e0:	83 c4 10             	add    esp,0x10
c00077e3:	85 db                	test   ebx,ebx
c00077e5:	75 12                	jne    c00077f9 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077e7:	83 ec 0c             	sub    esp,0xc
c00077ea:	68 d7 33 02 c0       	push   0xc00233d7
c00077ef:	e8 5a 86 00 00       	call   c000fe4e <KePanic(char const*)>
c00077f4:	83 c4 10             	add    esp,0x10
c00077f7:	eb 10                	jmp    c0007809 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077f9:	83 ec 0c             	sub    esp,0xc
c00077fc:	53                   	push   ebx
c00077fd:	e8 44 0c 00 00       	call   c0008446 <File::exists()>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	84 c0                	test   al,al
c0007807:	74 de                	je     c00077e7 <KiIsSymlinkRegistered(char const*)+0x92>
c0007809:	52                   	push   edx
c000780a:	52                   	push   edx
c000780b:	6a 01                	push   0x1
c000780d:	53                   	push   ebx
c000780e:	e8 6f 09 00 00       	call   c0008182 <File::open(FileOpenMode)>
c0007813:	83 c4 10             	add    esp,0x10
c0007816:	85 c0                	test   eax,eax
c0007818:	74 10                	je     c000782a <KiIsSymlinkRegistered(char const*)+0xd5>
c000781a:	83 ec 0c             	sub    esp,0xc
c000781d:	68 f2 33 02 c0       	push   0xc00233f2
c0007822:	e8 27 86 00 00       	call   c000fe4e <KePanic(char const*)>
c0007827:	83 c4 10             	add    esp,0x10
c000782a:	83 ec 0c             	sub    esp,0xc
c000782d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000782f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007833:	55                   	push   ebp
c0007834:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007838:	57                   	push   edi
c0007839:	6a 00                	push   0x0
c000783b:	68 00 01 00 00       	push   0x100
c0007840:	53                   	push   ebx
c0007841:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007844:	83 c4 20             	add    esp,0x20
c0007847:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000784f:	75 4b                	jne    c000789c <KiIsSymlinkRegistered(char const*)+0x147>
c0007851:	83 ec 0c             	sub    esp,0xc
c0007854:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007856:	55                   	push   ebp
c0007857:	8d 54 24 18          	lea    edx,[esp+0x18]
c000785b:	52                   	push   edx
c000785c:	6a 00                	push   0x0
c000785e:	6a 08                	push   0x8
c0007860:	53                   	push   ebx
c0007861:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007864:	83 c4 20             	add    esp,0x20
c0007867:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000786c:	75 2e                	jne    c000789c <KiIsSymlinkRegistered(char const*)+0x147>
c000786e:	50                   	push   eax
c000786f:	50                   	push   eax
c0007870:	57                   	push   edi
c0007871:	56                   	push   esi
c0007872:	e8 09 8f ff ff       	call   c0000780 <strcmp>
c0007877:	83 c4 10             	add    esp,0x10
c000787a:	85 c0                	test   eax,eax
c000787c:	75 ac                	jne    c000782a <KiIsSymlinkRegistered(char const*)+0xd5>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 59 09 00 00       	call   c00081e0 <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007897:	83 c4 10             	add    esp,0x10
c000789a:	eb 18                	jmp    c00078b4 <KiIsSymlinkRegistered(char const*)+0x15f>
c000789c:	83 ec 0c             	sub    esp,0xc
c000789f:	53                   	push   ebx
c00078a0:	e8 3b 09 00 00       	call   c00081e0 <File::close()>
c00078a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078ad:	83 c4 10             	add    esp,0x10
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	31 d2                	xor    edx,edx
c00078b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078ba:	5b                   	pop    ebx
c00078bb:	5e                   	pop    esi
c00078bc:	5f                   	pop    edi
c00078bd:	5d                   	pop    ebp
c00078be:	c3                   	ret    

c00078bf <KeDereferenceSymlink(char const*, char*)>:
c00078bf:	55                   	push   ebp
c00078c0:	57                   	push   edi
c00078c1:	56                   	push   esi
c00078c2:	53                   	push   ebx
c00078c3:	83 ec 48             	sub    esp,0x48
c00078c6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ca:	56                   	push   esi
c00078cb:	e8 85 fe ff ff       	call   c0007755 <KiIsSymlinkRegistered(char const*)>
c00078d0:	83 c4 10             	add    esp,0x10
c00078d3:	89 c7                	mov    edi,eax
c00078d5:	89 d0                	mov    eax,edx
c00078d7:	09 f8                	or     eax,edi
c00078d9:	75 07                	jne    c00078e2 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078db:	31 c0                	xor    eax,eax
c00078dd:	e9 7c 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078e2:	83 ec 0c             	sub    esp,0xc
c00078e5:	89 d5                	mov    ebp,edx
c00078e7:	68 14 01 00 00       	push   0x114
c00078ec:	e8 17 82 00 00       	call   c000fb08 <malloc>
c00078f1:	83 c4 0c             	add    esp,0xc
c00078f4:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00078fa:	56                   	push   esi
c00078fb:	50                   	push   eax
c00078fc:	89 c3                	mov    ebx,eax
c00078fe:	e8 61 08 00 00       	call   c0008164 <File::File(char const*, Process*)>
c0007903:	83 c4 10             	add    esp,0x10
c0007906:	85 db                	test   ebx,ebx
c0007908:	0f 84 32 01 00 00    	je     c0007a40 <KeDereferenceSymlink(char const*, char*)+0x181>
c000790e:	56                   	push   esi
c000790f:	56                   	push   esi
c0007910:	6a 01                	push   0x1
c0007912:	53                   	push   ebx
c0007913:	e8 6a 08 00 00       	call   c0008182 <File::open(FileOpenMode)>
c0007918:	83 c4 10             	add    esp,0x10
c000791b:	85 c0                	test   eax,eax
c000791d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000791f:	74 09                	je     c000792a <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007921:	83 ec 0c             	sub    esp,0xc
c0007924:	53                   	push   ebx
c0007925:	e9 10 01 00 00       	jmp    c0007a3a <KeDereferenceSymlink(char const*, char*)+0x17b>
c000792a:	83 ec 0c             	sub    esp,0xc
c000792d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007931:	56                   	push   esi
c0007932:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007936:	52                   	push   edx
c0007937:	6a 00                	push   0x0
c0007939:	6a 08                	push   0x8
c000793b:	53                   	push   ebx
c000793c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000793f:	83 c4 20             	add    esp,0x20
c0007942:	85 c0                	test   eax,eax
c0007944:	0f 85 e2 00 00 00    	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000794a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000794f:	0f 85 d7 00 00 00    	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 ec 0c             	sub    esp,0xc
c0007958:	8b 03                	mov    eax,DWORD PTR [ebx]
c000795a:	56                   	push   esi
c000795b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000795f:	52                   	push   edx
c0007960:	6a 00                	push   0x0
c0007962:	6a 08                	push   0x8
c0007964:	53                   	push   ebx
c0007965:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007968:	83 c4 20             	add    esp,0x20
c000796b:	85 c0                	test   eax,eax
c000796d:	0f 85 b9 00 00 00    	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007973:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007978:	0f 85 ae 00 00 00    	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000797e:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007982:	0f 85 53 ff ff ff    	jne    c00078db <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007988:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000798c:	0f 85 49 ff ff ff    	jne    c00078db <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007992:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000799a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079a2:	51                   	push   ecx
c00079a3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079a7:	50                   	push   eax
c00079a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079ac:	50                   	push   eax
c00079ad:	53                   	push   ebx
c00079ae:	e8 d1 0a 00 00       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c00079b3:	83 c4 10             	add    esp,0x10
c00079b6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079bb:	75 6f                	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079c1:	31 c9                	xor    ecx,ecx
c00079c3:	bf 0f 00 00 00       	mov    edi,0xf
c00079c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079cc:	39 c7                	cmp    edi,eax
c00079ce:	89 cf                	mov    edi,ecx
c00079d0:	19 d7                	sbb    edi,edx
c00079d2:	73 58                	jae    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079d4:	83 c0 f0             	add    eax,0xfffffff0
c00079d7:	bf ff 00 00 00       	mov    edi,0xff
c00079dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079e0:	83 d2 ff             	adc    edx,0xffffffff
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079e9:	19 d1                	sbb    ecx,edx
c00079eb:	72 53                	jb     c0007a40 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079ed:	40                   	inc    eax
c00079ee:	52                   	push   edx
c00079ef:	50                   	push   eax
c00079f0:	6a 00                	push   0x0
c00079f2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079f6:	e8 f5 8a ff ff       	call   c00004f0 <memset>
c00079fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a00:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a0c:	53                   	push   ebx
c0007a0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a10:	83 c4 20             	add    esp,0x20
c0007a13:	85 c0                	test   eax,eax
c0007a15:	75 15                	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a1b:	89 c7                	mov    edi,eax
c0007a1d:	c1 ff 1f             	sar    edi,0x1f
c0007a20:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a24:	75 06                	jne    c0007a2c <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a26:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a2a:	74 19                	je     c0007a45 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a2c:	83 ec 0c             	sub    esp,0xc
c0007a2f:	53                   	push   ebx
c0007a30:	e8 ab 07 00 00       	call   c00081e0 <File::close()>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a3d:	83 c4 10             	add    esp,0x10
c0007a40:	83 c8 ff             	or     eax,0xffffffff
c0007a43:	eb 19                	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a45:	83 ec 0c             	sub    esp,0xc
c0007a48:	53                   	push   ebx
c0007a49:	e8 92 07 00 00       	call   c00081e0 <File::close()>
c0007a4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a56:	83 c4 10             	add    esp,0x10
c0007a59:	b8 01 00 00 00       	mov    eax,0x1
c0007a5e:	83 c4 3c             	add    esp,0x3c
c0007a61:	5b                   	pop    ebx
c0007a62:	5e                   	pop    esi
c0007a63:	5f                   	pop    edi
c0007a64:	5d                   	pop    ebp
c0007a65:	c3                   	ret    

c0007a66 <KeCreateSymlink(char const*, char const*)>:
c0007a66:	55                   	push   ebp
c0007a67:	57                   	push   edi
c0007a68:	56                   	push   esi
c0007a69:	53                   	push   ebx
c0007a6a:	83 ec 38             	sub    esp,0x38
c0007a6d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a71:	68 14 01 00 00       	push   0x114
c0007a76:	e8 8d 80 00 00       	call   c000fb08 <malloc>
c0007a7b:	6a 00                	push   0x0
c0007a7d:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007a83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a87:	89 c3                	mov    ebx,eax
c0007a89:	50                   	push   eax
c0007a8a:	e8 d7 05 00 00       	call   c0008066 <File::File(char const*, Process*, bool)>
c0007a8f:	83 c4 20             	add    esp,0x20
c0007a92:	85 db                	test   ebx,ebx
c0007a94:	b8 01 00 00 00       	mov    eax,0x1
c0007a99:	0f 84 fb 00 00 00    	je     c0007b9a <KeCreateSymlink(char const*, char const*)+0x134>
c0007a9f:	52                   	push   edx
c0007aa0:	52                   	push   edx
c0007aa1:	6a 12                	push   0x12
c0007aa3:	53                   	push   ebx
c0007aa4:	e8 d9 06 00 00       	call   c0008182 <File::open(FileOpenMode)>
c0007aa9:	83 c4 10             	add    esp,0x10
c0007aac:	85 c0                	test   eax,eax
c0007aae:	74 0b                	je     c0007abb <KeCreateSymlink(char const*, char const*)+0x55>
c0007ab0:	83 ec 0c             	sub    esp,0xc
c0007ab3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab5:	53                   	push   ebx
c0007ab6:	e9 d4 00 00 00       	jmp    c0007b8f <KeCreateSymlink(char const*, char const*)+0x129>
c0007abb:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007abf:	be 0d 34 02 c0       	mov    esi,0xc002340d
c0007ac4:	b9 09 00 00 00       	mov    ecx,0x9
c0007ac9:	fc                   	cld    
c0007aca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007acc:	83 ec 0c             	sub    esp,0xc
c0007acf:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ad3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad5:	56                   	push   esi
c0007ad6:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007ada:	52                   	push   edx
c0007adb:	6a 00                	push   0x0
c0007add:	6a 08                	push   0x8
c0007adf:	53                   	push   ebx
c0007ae0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae3:	83 c4 20             	add    esp,0x20
c0007ae6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007aeb:	0f 85 90 00 00 00    	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007af1:	85 c0                	test   eax,eax
c0007af3:	0f 85 88 00 00 00    	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007af9:	e8 07 fa ff ff       	call   c0007505 <KiCreateSymlinkID()>
c0007afe:	83 ec 0c             	sub    esp,0xc
c0007b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b05:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0b:	56                   	push   esi
c0007b0c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b10:	52                   	push   edx
c0007b11:	6a 00                	push   0x0
c0007b13:	6a 08                	push   0x8
c0007b15:	53                   	push   ebx
c0007b16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b19:	83 c4 20             	add    esp,0x20
c0007b1c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b21:	75 5e                	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b23:	85 c0                	test   eax,eax
c0007b25:	75 5a                	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b29:	83 ec 0c             	sub    esp,0xc
c0007b2c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b2f:	55                   	push   ebp
c0007b30:	e8 4b 8a ff ff       	call   c0000580 <strlen>
c0007b35:	31 d2                	xor    edx,edx
c0007b37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b3a:	55                   	push   ebp
c0007b3b:	52                   	push   edx
c0007b3c:	50                   	push   eax
c0007b3d:	53                   	push   ebx
c0007b3e:	ff d7                	call   edi
c0007b40:	83 c4 14             	add    esp,0x14
c0007b43:	55                   	push   ebp
c0007b44:	89 c6                	mov    esi,eax
c0007b46:	e8 35 8a ff ff       	call   c0000580 <strlen>
c0007b4b:	83 c4 10             	add    esp,0x10
c0007b4e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b52:	75 2d                	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b54:	85 f6                	test   esi,esi
c0007b56:	75 29                	jne    c0007b81 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b58:	50                   	push   eax
c0007b59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b61:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b65:	e8 06 fa ff ff       	call   c0007570 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b6d:	e8 6e 06 00 00       	call   c00081e0 <File::close()>
c0007b72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b7a:	83 c4 10             	add    esp,0x10
c0007b7d:	31 c0                	xor    eax,eax
c0007b7f:	eb 19                	jmp    c0007b9a <KeCreateSymlink(char const*, char const*)+0x134>
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	53                   	push   ebx
c0007b85:	e8 56 06 00 00       	call   c00081e0 <File::close()>
c0007b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b92:	83 c4 10             	add    esp,0x10
c0007b95:	b8 01 00 00 00       	mov    eax,0x1
c0007b9a:	83 c4 2c             	add    esp,0x2c
c0007b9d:	5b                   	pop    ebx
c0007b9e:	5e                   	pop    esi
c0007b9f:	5f                   	pop    edi
c0007ba0:	5d                   	pop    ebp
c0007ba1:	c3                   	ret    

c0007ba2 <File::read(unsigned long long, void*, int*)>:
c0007ba2:	53                   	push   ebx
c0007ba3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ba7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bb2:	83 f8 19             	cmp    eax,0x19
c0007bb5:	77 35                	ja     c0007bec <File::read(unsigned long long, void*, int*)+0x4a>
c0007bb7:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bbe:	85 c0                	test   eax,eax
c0007bc0:	74 2a                	je     c0007bec <File::read(unsigned long long, void*, int*)+0x4a>
c0007bc2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bc8:	85 c0                	test   eax,eax
c0007bca:	74 20                	je     c0007bec <File::read(unsigned long long, void*, int*)+0x4a>
c0007bcc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bd0:	74 21                	je     c0007bf3 <File::read(unsigned long long, void*, int*)+0x51>
c0007bd2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bd4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bd8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007be6:	5b                   	pop    ebx
c0007be7:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bea:	ff e0                	jmp    eax
c0007bec:	b8 0b 00 00 00       	mov    eax,0xb
c0007bf1:	eb 05                	jmp    c0007bf8 <File::read(unsigned long long, void*, int*)+0x56>
c0007bf3:	b8 05 00 00 00       	mov    eax,0x5
c0007bf8:	5b                   	pop    ebx
c0007bf9:	c3                   	ret    

c0007bfa <File::write(unsigned long long, void*, int*)>:
c0007bfa:	53                   	push   ebx
c0007bfb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c03:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c0a:	83 f8 19             	cmp    eax,0x19
c0007c0d:	77 35                	ja     c0007c44 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c0f:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c16:	85 c0                	test   eax,eax
c0007c18:	74 2a                	je     c0007c44 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c1a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c20:	85 c0                	test   eax,eax
c0007c22:	74 20                	je     c0007c44 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c28:	74 21                	je     c0007c4b <File::write(unsigned long long, void*, int*)+0x51>
c0007c2a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c2c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c30:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c3e:	5b                   	pop    ebx
c0007c3f:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c42:	ff e0                	jmp    eax
c0007c44:	b8 0b 00 00 00       	mov    eax,0xb
c0007c49:	eb 05                	jmp    c0007c50 <File::write(unsigned long long, void*, int*)+0x56>
c0007c4b:	b8 05 00 00 00       	mov    eax,0x5
c0007c50:	5b                   	pop    ebx
c0007c51:	c3                   	ret    

c0007c52 <Directory::read(unsigned long long, void*, int*)>:
c0007c52:	53                   	push   ebx
c0007c53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c5b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c62:	83 f8 19             	cmp    eax,0x19
c0007c65:	77 35                	ja     c0007c9c <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c67:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c6e:	85 c0                	test   eax,eax
c0007c70:	74 2a                	je     c0007c9c <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c72:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c78:	85 c0                	test   eax,eax
c0007c7a:	74 20                	je     c0007c9c <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c80:	74 21                	je     c0007ca3 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c84:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c88:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c96:	5b                   	pop    ebx
c0007c97:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c9a:	ff e0                	jmp    eax
c0007c9c:	b8 0b 00 00 00       	mov    eax,0xb
c0007ca1:	eb 05                	jmp    c0007ca8 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007ca3:	b8 05 00 00 00       	mov    eax,0x5
c0007ca8:	5b                   	pop    ebx
c0007ca9:	c3                   	ret    

c0007caa <Directory::write(unsigned long long, void*, int*)>:
c0007caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cae:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cb5:	b8 0b 00 00 00       	mov    eax,0xb
c0007cba:	83 fa 19             	cmp    edx,0x19
c0007cbd:	77 18                	ja     c0007cd7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cbf:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007cc6:	85 d2                	test   edx,edx
c0007cc8:	74 0d                	je     c0007cd7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cca:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cd1:	19 c0                	sbb    eax,eax
c0007cd3:	83 e0 0a             	and    eax,0xa
c0007cd6:	40                   	inc    eax
c0007cd7:	c3                   	ret    

c0007cd8 <File::isAtty()>:
c0007cd8:	31 c0                	xor    eax,eax
c0007cda:	c3                   	ret    
c0007cdb:	90                   	nop

c0007cdc <Directory::isAtty()>:
c0007cdc:	31 c0                	xor    eax,eax
c0007cde:	c3                   	ret    
c0007cdf:	90                   	nop

c0007ce0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ce0:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce5:	c3                   	ret    

c0007ce6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007ce6:	b8 0a 00 00 00       	mov    eax,0xa
c0007ceb:	c3                   	ret    

c0007cec <Filesystem::allocateSwapfile(char const*, int)>:
c0007cec:	31 c0                	xor    eax,eax
c0007cee:	31 d2                	xor    edx,edx
c0007cf0:	c3                   	ret    
c0007cf1:	90                   	nop

c0007cf2 <File::~File()>:
c0007cf2:	83 ec 0c             	sub    esp,0xc
c0007cf5:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c0007cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cfe:	89 10                	mov    DWORD PTR [eax],edx
c0007d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d04:	83 ec 0c             	sub    esp,0xc
c0007d07:	50                   	push   eax
c0007d08:	e8 35 b3 00 00       	call   c0013042 <UnixFile::~UnixFile()>
c0007d0d:	83 c4 10             	add    esp,0x10
c0007d10:	90                   	nop
c0007d11:	83 c4 0c             	add    esp,0xc
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	83 ec 0c             	sub    esp,0xc
c0007d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d20:	e8 cd ff ff ff       	call   c0007cf2 <File::~File()>
c0007d25:	83 c4 10             	add    esp,0x10
c0007d28:	83 ec 08             	sub    esp,0x8
c0007d2b:	68 14 01 00 00       	push   0x114
c0007d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d34:	e8 32 55 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0007d39:	83 c4 10             	add    esp,0x10
c0007d3c:	83 c4 0c             	add    esp,0xc
c0007d3f:	c3                   	ret    

c0007d40 <Directory::~Directory()>:
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	ba 00 35 02 c0       	mov    edx,0xc0023500
c0007d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d4c:	89 10                	mov    DWORD PTR [eax],edx
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	83 ec 0c             	sub    esp,0xc
c0007d55:	50                   	push   eax
c0007d56:	e8 e7 b2 00 00       	call   c0013042 <UnixFile::~UnixFile()>
c0007d5b:	83 c4 10             	add    esp,0x10
c0007d5e:	90                   	nop
c0007d5f:	83 c4 0c             	add    esp,0xc
c0007d62:	c3                   	ret    
c0007d63:	90                   	nop

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	83 ec 0c             	sub    esp,0xc
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 cd ff ff ff       	call   c0007d40 <Directory::~Directory()>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 ec 08             	sub    esp,0x8
c0007d79:	68 14 01 00 00       	push   0x114
c0007d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d82:	e8 e4 54 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	83 c4 0c             	add    esp,0xc
c0007d8d:	c3                   	ret    

c0007d8e <Filesystem::Filesystem()>:
c0007d8e:	ba 78 34 02 c0       	mov    edx,0xc0023478
c0007d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d97:	89 10                	mov    DWORD PTR [eax],edx
c0007d99:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007da3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007daa:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007daf:	90                   	nop
c0007db0:	c3                   	ret    
c0007db1:	90                   	nop

c0007db2 <Filesystem::~Filesystem()>:
c0007db2:	ba 78 34 02 c0       	mov    edx,0xc0023478
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	90                   	nop
c0007dbe:	c3                   	ret    
c0007dbf:	90                   	nop

c0007dc0 <Filesystem::~Filesystem()>:
c0007dc0:	83 ec 0c             	sub    esp,0xc
c0007dc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007dc7:	e8 e6 ff ff ff       	call   c0007db2 <Filesystem::~Filesystem()>
c0007dcc:	83 c4 04             	add    esp,0x4
c0007dcf:	83 ec 08             	sub    esp,0x8
c0007dd2:	6a 08                	push   0x8
c0007dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dd8:	e8 8e 54 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0007ddd:	83 c4 10             	add    esp,0x10
c0007de0:	83 c4 0c             	add    esp,0xc
c0007de3:	c3                   	ret    

c0007de4 <Fs::getcwd(Process*, char*, int)>:
c0007de4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007de8:	31 c0                	xor    eax,eax
c0007dea:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dee:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007df1:	7d 15                	jge    c0007e08 <Fs::getcwd(Process*, char*, int)+0x24>
c0007df3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007df7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dfe:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e01:	84 c9                	test   cl,cl
c0007e03:	74 06                	je     c0007e0b <Fs::getcwd(Process*, char*, int)+0x27>
c0007e05:	40                   	inc    eax
c0007e06:	eb e2                	jmp    c0007dea <Fs::getcwd(Process*, char*, int)+0x6>
c0007e08:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e0b:	31 c0                	xor    eax,eax
c0007e0d:	c3                   	ret    

c0007e0e <Fs::initVFS()>:
c0007e0e:	83 ec 18             	sub    esp,0x18
c0007e11:	6a 08                	push   0x8
c0007e13:	e8 f0 7c 00 00       	call   c000fb08 <malloc>
c0007e18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e1b:	e8 a0 43 01 00       	call   c001c1c0 <FAT::FAT()>
c0007e20:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e27:	e8 dc 7c 00 00       	call   c000fb08 <malloc>
c0007e2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e2f:	e8 ba 52 01 00       	call   c001d0ee <ISO9660::ISO9660()>
c0007e34:	83 c4 1c             	add    esp,0x1c
c0007e37:	c3                   	ret    

c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e38:	55                   	push   ebp
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	53                   	push   ebx
c0007e3c:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e42:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e49:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e50:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e57:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e5e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e62:	68 00 04 00 00       	push   0x400
c0007e67:	6a 00                	push   0x0
c0007e69:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e6d:	57                   	push   edi
c0007e6e:	e8 7d 86 ff ff       	call   c00004f0 <memset>
c0007e73:	83 c4 10             	add    esp,0x10
c0007e76:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e7a:	75 0b                	jne    c0007e87 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e7c:	50                   	push   eax
c0007e7d:	50                   	push   eax
c0007e7e:	56                   	push   esi
c0007e7f:	57                   	push   edi
c0007e80:	e8 cb 87 ff ff       	call   c0000650 <strcpy>
c0007e85:	eb 45                	jmp    c0007ecc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e87:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e8a:	83 f8 2f             	cmp    eax,0x2f
c0007e8d:	74 05                	je     c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e8f:	83 f8 5c             	cmp    eax,0x5c
c0007e92:	75 19                	jne    c0007ead <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e94:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e97:	3c 60                	cmp    al,0x60
c0007e99:	7e 03                	jle    c0007e9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e9b:	83 e8 20             	sub    eax,0x20
c0007e9e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ea9:	50                   	push   eax
c0007eaa:	50                   	push   eax
c0007eab:	eb 18                	jmp    c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ead:	50                   	push   eax
c0007eae:	50                   	push   eax
c0007eaf:	55                   	push   ebp
c0007eb0:	57                   	push   edi
c0007eb1:	e8 9a 87 ff ff       	call   c0000650 <strcpy>
c0007eb6:	58                   	pop    eax
c0007eb7:	5a                   	pop    edx
c0007eb8:	68 a5 52 02 c0       	push   0xc00252a5
c0007ebd:	57                   	push   edi
c0007ebe:	e8 ad 89 ff ff       	call   c0000870 <strcat>
c0007ec3:	59                   	pop    ecx
c0007ec4:	5d                   	pop    ebp
c0007ec5:	56                   	push   esi
c0007ec6:	57                   	push   edi
c0007ec7:	e8 a4 89 ff ff       	call   c0000870 <strcat>
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ed3:	3c 60                	cmp    al,0x60
c0007ed5:	7e 03                	jle    c0007eda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007ed7:	83 e8 20             	sub    eax,0x20
c0007eda:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ede:	be 03 00 00 00       	mov    esi,0x3
c0007ee3:	88 03                	mov    BYTE PTR [ebx],al
c0007ee5:	b8 03 00 00 00       	mov    eax,0x3
c0007eea:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ef1:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ef7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007efb:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f00:	89 fa                	mov    edx,edi
c0007f02:	0f be ea             	movsx  ebp,dl
c0007f05:	85 ed                	test   ebp,ebp
c0007f07:	0f 84 a1 00 00 00    	je     c0007fae <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f0d:	8d 56 01             	lea    edx,[esi+0x1]
c0007f10:	83 fd 2f             	cmp    ebp,0x2f
c0007f13:	74 05                	je     c0007f1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f15:	83 fd 5c             	cmp    ebp,0x5c
c0007f18:	75 12                	jne    c0007f2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f1a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f1f:	89 c5                	mov    ebp,eax
c0007f21:	74 09                	je     c0007f2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f23:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f27:	40                   	inc    eax
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	eb cf                	jmp    c0007efb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f2c:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f31:	89 f9                	mov    ecx,edi
c0007f33:	0f be e9             	movsx  ebp,cl
c0007f36:	75 61                	jne    c0007f99 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f38:	83 fd 2e             	cmp    ebp,0x2e
c0007f3b:	75 5c                	jne    c0007f99 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f3d:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f42:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f47:	74 19                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f49:	83 fd 2e             	cmp    ebp,0x2e
c0007f4c:	74 55                	je     c0007fa3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f4e:	89 f2                	mov    edx,esi
c0007f50:	42                   	inc    edx
c0007f51:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f56:	83 f9 2f             	cmp    ecx,0x2f
c0007f59:	74 f5                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f5b:	83 f9 5c             	cmp    ecx,0x5c
c0007f5e:	74 f0                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f60:	eb c6                	jmp    c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f62:	83 fd 2e             	cmp    ebp,0x2e
c0007f65:	74 3c                	je     c0007fa3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f67:	83 f8 03             	cmp    eax,0x3
c0007f6a:	74 bc                	je     c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6c:	42                   	inc    edx
c0007f6d:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f72:	83 f9 2f             	cmp    ecx,0x2f
c0007f75:	74 f5                	je     c0007f6c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f77:	83 f9 5c             	cmp    ecx,0x5c
c0007f7a:	74 f0                	je     c0007f6c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f7c:	48                   	dec    eax
c0007f7d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f81:	75 06                	jne    c0007f89 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f83:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f87:	eb f3                	jmp    c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f89:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f8d:	74 07                	je     c0007f96 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f8f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f93:	48                   	dec    eax
c0007f94:	eb f3                	jmp    c0007f89 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f96:	40                   	inc    eax
c0007f97:	eb 8f                	jmp    c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f99:	83 fd 2f             	cmp    ebp,0x2f
c0007f9c:	74 8a                	je     c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f9e:	83 fd 5c             	cmp    ebp,0x5c
c0007fa1:	74 85                	je     c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fa3:	89 f9                	mov    ecx,edi
c0007fa5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fa8:	40                   	inc    eax
c0007fa9:	e9 7a ff ff ff       	jmp    c0007f28 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb2:	83 ec 0c             	sub    esp,0xc
c0007fb5:	53                   	push   ebx
c0007fb6:	e8 c5 85 ff ff       	call   c0000580 <strlen>
c0007fbb:	83 c4 10             	add    esp,0x10
c0007fbe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fc3:	74 1c                	je     c0007fe1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fc5:	83 ec 0c             	sub    esp,0xc
c0007fc8:	53                   	push   ebx
c0007fc9:	e8 b2 85 ff ff       	call   c0000580 <strlen>
c0007fce:	83 c4 10             	add    esp,0x10
c0007fd1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007fd6:	74 09                	je     c0007fe1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fd8:	31 ff                	xor    edi,edi
c0007fda:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fdf:	eb 5c                	jmp    c000803d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fe1:	83 ec 0c             	sub    esp,0xc
c0007fe4:	53                   	push   ebx
c0007fe5:	e8 96 85 ff ff       	call   c0000580 <strlen>
c0007fea:	83 c4 10             	add    esp,0x10
c0007fed:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007ff2:	74 e4                	je     c0007fd8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007ff4:	83 ec 0c             	sub    esp,0xc
c0007ff7:	53                   	push   ebx
c0007ff8:	e8 83 85 ff ff       	call   c0000580 <strlen>
c0007ffd:	83 c4 10             	add    esp,0x10
c0008000:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008005:	eb ab                	jmp    c0007fb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0008007:	52                   	push   edx
c0008008:	52                   	push   edx
c0008009:	53                   	push   ebx
c000800a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000800e:	55                   	push   ebp
c000800f:	e8 3c 86 ff ff       	call   c0000650 <strcpy>
c0008014:	59                   	pop    ecx
c0008015:	58                   	pop    eax
c0008016:	53                   	push   ebx
c0008017:	55                   	push   ebp
c0008018:	e8 a2 f8 ff ff       	call   c00078bf <KeDereferenceSymlink(char const*, char*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	48                   	dec    eax
c0008021:	75 37                	jne    c000805a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008023:	50                   	push   eax
c0008024:	53                   	push   ebx
c0008025:	55                   	push   ebp
c0008026:	68 16 34 02 c0       	push   0xc0023416
c000802b:	e8 1e ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008030:	8d 47 01             	lea    eax,[edi+0x1]
c0008033:	83 c4 10             	add    esp,0x10
c0008036:	83 ff 14             	cmp    edi,0x14
c0008039:	74 08                	je     c0008043 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000803b:	89 c7                	mov    edi,eax
c000803d:	85 f6                	test   esi,esi
c000803f:	75 c6                	jne    c0008007 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008041:	eb 17                	jmp    c000805a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008043:	83 ec 0c             	sub    esp,0xc
c0008046:	bf 15 00 00 00       	mov    edi,0x15
c000804b:	68 31 34 02 c0       	push   0xc0023431
c0008050:	e8 f9 7d 00 00       	call   c000fe4e <KePanic(char const*)>
c0008055:	83 c4 10             	add    esp,0x10
c0008058:	eb e3                	jmp    c000803d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000805a:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008060:	5b                   	pop    ebx
c0008061:	5e                   	pop    esi
c0008062:	5f                   	pop    edi
c0008063:	5d                   	pop    ebp
c0008064:	c3                   	ret    
c0008065:	90                   	nop

c0008066 <File::File(char const*, Process*, bool)>:
c0008066:	83 ec 1c             	sub    esp,0x1c
c0008069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000806d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008075:	83 ec 08             	sub    esp,0x8
c0008078:	6a 00                	push   0x0
c000807a:	50                   	push   eax
c000807b:	e8 dc ad 00 00       	call   c0012e5c <UnixFile::UnixFile(int)>
c0008080:	83 c4 10             	add    esp,0x10
c0008083:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c0008088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000808c:	89 10                	mov    DWORD PTR [eax],edx
c000808e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008093:	85 c0                	test   eax,eax
c0008095:	74 0f                	je     c00080a6 <File::File(char const*, Process*, bool)+0x40>
c0008097:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000809c:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080a0:	74 04                	je     c00080a6 <File::File(char const*, Process*, bool)+0x40>
c00080a2:	b0 01                	mov    al,0x1
c00080a4:	eb 02                	jmp    c00080a8 <File::File(char const*, Process*, bool)+0x42>
c00080a6:	b0 00                	mov    al,0x0
c00080a8:	0f b6 c0             	movzx  eax,al
c00080ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080af:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080b9:	83 c2 0d             	add    edx,0xd
c00080bc:	50                   	push   eax
c00080bd:	51                   	push   ecx
c00080be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080c2:	52                   	push   edx
c00080c3:	e8 70 fd ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080c8:	83 c4 10             	add    esp,0x10
c00080cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080d6:	83 c2 0d             	add    edx,0xd
c00080d9:	83 ec 04             	sub    esp,0x4
c00080dc:	50                   	push   eax
c00080dd:	52                   	push   edx
c00080de:	68 57 34 02 c0       	push   0xc0023457
c00080e3:	e8 66 ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080e8:	83 c4 10             	add    esp,0x10
c00080eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ef:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080f2:	83 e8 41             	sub    eax,0x41
c00080f5:	88 c2                	mov    dl,al
c00080f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080fb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008105:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008113:	0f b6 c0             	movzx  eax,al
c0008116:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000811d:	85 c0                	test   eax,eax
c000811f:	74 3e                	je     c000815f <File::File(char const*, Process*, bool)+0xf9>
c0008121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008125:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000812b:	0f b6 c0             	movzx  eax,al
c000812e:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008135:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000813b:	85 c0                	test   eax,eax
c000813d:	75 20                	jne    c000815f <File::File(char const*, Process*, bool)+0xf9>
c000813f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008143:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008149:	0f b6 c0             	movzx  eax,al
c000814c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008153:	83 ec 0c             	sub    esp,0xc
c0008156:	50                   	push   eax
c0008157:	e8 0a 28 00 00       	call   c000a966 <LogicalDisk::mount()>
c000815c:	83 c4 10             	add    esp,0x10
c000815f:	90                   	nop
c0008160:	83 c4 1c             	add    esp,0x1c
c0008163:	c3                   	ret    

c0008164 <File::File(char const*, Process*)>:
c0008164:	83 ec 0c             	sub    esp,0xc
c0008167:	6a 01                	push   0x1
c0008169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008175:	e8 ec fe ff ff       	call   c0008066 <File::File(char const*, Process*, bool)>
c000817a:	83 c4 10             	add    esp,0x10
c000817d:	90                   	nop
c000817e:	83 c4 0c             	add    esp,0xc
c0008181:	c3                   	ret    

c0008182 <File::open(FileOpenMode)>:
c0008182:	53                   	push   ebx
c0008183:	b8 0b 00 00 00       	mov    eax,0xb
c0008188:	83 ec 08             	sub    esp,0x8
c000818b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000818f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008196:	83 fa 19             	cmp    edx,0x19
c0008199:	77 40                	ja     c00081db <File::open(FileOpenMode)+0x59>
c000819b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081a2:	85 d2                	test   edx,edx
c00081a4:	74 35                	je     c00081db <File::open(FileOpenMode)+0x59>
c00081a6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081ac:	85 d2                	test   edx,edx
c00081ae:	74 2b                	je     c00081db <File::open(FileOpenMode)+0x59>
c00081b0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081b4:	b8 06 00 00 00       	mov    eax,0x6
c00081b9:	75 20                	jne    c00081db <File::open(FileOpenMode)+0x59>
c00081bb:	8b 02                	mov    eax,DWORD PTR [edx]
c00081bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081c7:	51                   	push   ecx
c00081c8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081cb:	51                   	push   ecx
c00081cc:	52                   	push   edx
c00081cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	85 c0                	test   eax,eax
c00081d5:	75 04                	jne    c00081db <File::open(FileOpenMode)+0x59>
c00081d7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081db:	83 c4 08             	add    esp,0x8
c00081de:	5b                   	pop    ebx
c00081df:	c3                   	ret    

c00081e0 <File::close()>:
c00081e0:	53                   	push   ebx
c00081e1:	b8 0b 00 00 00       	mov    eax,0xb
c00081e6:	83 ec 08             	sub    esp,0x8
c00081e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081f4:	83 f9 19             	cmp    ecx,0x19
c00081f7:	77 41                	ja     c000823a <File::close()+0x5a>
c00081f9:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008200:	85 db                	test   ebx,ebx
c0008202:	74 36                	je     c000823a <File::close()+0x5a>
c0008204:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000820b:	74 2d                	je     c000823a <File::close()+0x5a>
c000820d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008211:	b8 05 00 00 00       	mov    eax,0x5
c0008216:	74 22                	je     c000823a <File::close()+0x5a>
c0008218:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000821c:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008223:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008229:	53                   	push   ebx
c000822a:	53                   	push   ebx
c000822b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000822d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008233:	50                   	push   eax
c0008234:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008237:	83 c4 10             	add    esp,0x10
c000823a:	83 c4 08             	add    esp,0x8
c000823d:	5b                   	pop    ebx
c000823e:	c3                   	ret    
c000823f:	90                   	nop

c0008240 <File::seek(unsigned long long)>:
c0008240:	56                   	push   esi
c0008241:	b8 0b 00 00 00       	mov    eax,0xb
c0008246:	53                   	push   ebx
c0008247:	51                   	push   ecx
c0008248:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008250:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008254:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000825b:	83 fa 19             	cmp    edx,0x19
c000825e:	77 31                	ja     c0008291 <File::seek(unsigned long long)+0x51>
c0008260:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008267:	85 d2                	test   edx,edx
c0008269:	74 26                	je     c0008291 <File::seek(unsigned long long)+0x51>
c000826b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008271:	85 d2                	test   edx,edx
c0008273:	74 1c                	je     c0008291 <File::seek(unsigned long long)+0x51>
c0008275:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008279:	b8 05 00 00 00       	mov    eax,0x5
c000827e:	74 11                	je     c0008291 <File::seek(unsigned long long)+0x51>
c0008280:	8b 02                	mov    eax,DWORD PTR [edx]
c0008282:	53                   	push   ebx
c0008283:	51                   	push   ecx
c0008284:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828a:	52                   	push   edx
c000828b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000828e:	83 c4 10             	add    esp,0x10
c0008291:	5a                   	pop    edx
c0008292:	5b                   	pop    ebx
c0008293:	5e                   	pop    esi
c0008294:	c3                   	ret    
c0008295:	90                   	nop

c0008296 <File::truncate(unsigned long long)>:
c0008296:	56                   	push   esi
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	53                   	push   ebx
c000829d:	51                   	push   ecx
c000829e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082aa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082b1:	83 fa 19             	cmp    edx,0x19
c00082b4:	77 31                	ja     c00082e7 <File::truncate(unsigned long long)+0x51>
c00082b6:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 26                	je     c00082e7 <File::truncate(unsigned long long)+0x51>
c00082c1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c7:	85 d2                	test   edx,edx
c00082c9:	74 1c                	je     c00082e7 <File::truncate(unsigned long long)+0x51>
c00082cb:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082cf:	b8 05 00 00 00       	mov    eax,0x5
c00082d4:	74 11                	je     c00082e7 <File::truncate(unsigned long long)+0x51>
c00082d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082d8:	53                   	push   ebx
c00082d9:	51                   	push   ecx
c00082da:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082e0:	52                   	push   edx
c00082e1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082e4:	83 c4 10             	add    esp,0x10
c00082e7:	5a                   	pop    edx
c00082e8:	5b                   	pop    ebx
c00082e9:	5e                   	pop    esi
c00082ea:	c3                   	ret    
c00082eb:	90                   	nop

c00082ec <File::tell(unsigned long long*)>:
c00082ec:	83 ec 0c             	sub    esp,0xc
c00082ef:	b8 0b 00 00 00       	mov    eax,0xb
c00082f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082ff:	83 fa 19             	cmp    edx,0x19
c0008302:	77 34                	ja     c0008338 <File::tell(unsigned long long*)+0x4c>
c0008304:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000830b:	85 d2                	test   edx,edx
c000830d:	74 29                	je     c0008338 <File::tell(unsigned long long*)+0x4c>
c000830f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008315:	85 d2                	test   edx,edx
c0008317:	74 1f                	je     c0008338 <File::tell(unsigned long long*)+0x4c>
c0008319:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000831d:	b8 05 00 00 00       	mov    eax,0x5
c0008322:	74 14                	je     c0008338 <File::tell(unsigned long long*)+0x4c>
c0008324:	50                   	push   eax
c0008325:	8b 02                	mov    eax,DWORD PTR [edx]
c0008327:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000832b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008331:	52                   	push   edx
c0008332:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008335:	83 c4 10             	add    esp,0x10
c0008338:	83 c4 0c             	add    esp,0xc
c000833b:	c3                   	ret    

c000833c <File::rewind()>:
c000833c:	83 ec 10             	sub    esp,0x10
c000833f:	6a 00                	push   0x0
c0008341:	6a 00                	push   0x0
c0008343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008347:	e8 f4 fe ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000834c:	83 c4 1c             	add    esp,0x1c
c000834f:	c3                   	ret    

c0008350 <File::unlink()>:
c0008350:	83 ec 0c             	sub    esp,0xc
c0008353:	b8 0b 00 00 00       	mov    eax,0xb
c0008358:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000835c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008363:	83 f9 19             	cmp    ecx,0x19
c0008366:	77 2f                	ja     c0008397 <File::unlink()+0x47>
c0008368:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000836f:	85 c9                	test   ecx,ecx
c0008371:	74 24                	je     c0008397 <File::unlink()+0x47>
c0008373:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008379:	85 c9                	test   ecx,ecx
c000837b:	74 1a                	je     c0008397 <File::unlink()+0x47>
c000837d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008381:	b8 06 00 00 00       	mov    eax,0x6
c0008386:	75 0f                	jne    c0008397 <File::unlink()+0x47>
c0008388:	50                   	push   eax
c0008389:	83 c2 0d             	add    edx,0xd
c000838c:	50                   	push   eax
c000838d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000838f:	52                   	push   edx
c0008390:	51                   	push   ecx
c0008391:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008394:	83 c4 10             	add    esp,0x10
c0008397:	83 c4 0c             	add    esp,0xc
c000839a:	c3                   	ret    
c000839b:	90                   	nop

c000839c <File::rename(char const*)>:
c000839c:	83 ec 0c             	sub    esp,0xc
c000839f:	b8 0b 00 00 00       	mov    eax,0xb
c00083a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083af:	83 f9 19             	cmp    ecx,0x19
c00083b2:	77 32                	ja     c00083e6 <File::rename(char const*)+0x4a>
c00083b4:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083bb:	85 c9                	test   ecx,ecx
c00083bd:	74 27                	je     c00083e6 <File::rename(char const*)+0x4a>
c00083bf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c5:	85 c9                	test   ecx,ecx
c00083c7:	74 1d                	je     c00083e6 <File::rename(char const*)+0x4a>
c00083c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cd:	b8 06 00 00 00       	mov    eax,0x6
c00083d2:	75 12                	jne    c00083e6 <File::rename(char const*)+0x4a>
c00083d4:	50                   	push   eax
c00083d5:	83 c2 0d             	add    edx,0xd
c00083d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083de:	52                   	push   edx
c00083df:	51                   	push   ecx
c00083e0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083e3:	83 c4 10             	add    esp,0x10
c00083e6:	83 c4 0c             	add    esp,0xc
c00083e9:	c3                   	ret    

c00083ea <File::chfatattr(unsigned char, unsigned char)>:
c00083ea:	57                   	push   edi
c00083eb:	b8 0b 00 00 00       	mov    eax,0xb
c00083f0:	56                   	push   esi
c00083f1:	53                   	push   ebx
c00083f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008405:	83 f9 19             	cmp    ecx,0x19
c0008408:	77 37                	ja     c0008441 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000840a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008411:	85 c9                	test   ecx,ecx
c0008413:	74 2c                	je     c0008441 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008415:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841b:	85 c9                	test   ecx,ecx
c000841d:	74 22                	je     c0008441 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000841f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008423:	b8 06 00 00 00       	mov    eax,0x6
c0008428:	75 17                	jne    c0008441 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842a:	89 f0                	mov    eax,esi
c000842c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000842e:	0f b6 db             	movzx  ebx,bl
c0008431:	0f b6 f0             	movzx  esi,al
c0008434:	83 c2 0d             	add    edx,0xd
c0008437:	56                   	push   esi
c0008438:	53                   	push   ebx
c0008439:	52                   	push   edx
c000843a:	51                   	push   ecx
c000843b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000843e:	83 c4 10             	add    esp,0x10
c0008441:	5b                   	pop    ebx
c0008442:	5e                   	pop    esi
c0008443:	5f                   	pop    edi
c0008444:	c3                   	ret    
c0008445:	90                   	nop

c0008446 <File::exists()>:
c0008446:	83 ec 0c             	sub    esp,0xc
c0008449:	31 c0                	xor    eax,eax
c000844b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000844f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008456:	83 f9 19             	cmp    ecx,0x19
c0008459:	77 24                	ja     c000847f <File::exists()+0x39>
c000845b:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008462:	85 c9                	test   ecx,ecx
c0008464:	74 19                	je     c000847f <File::exists()+0x39>
c0008466:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000846c:	85 c9                	test   ecx,ecx
c000846e:	74 0f                	je     c000847f <File::exists()+0x39>
c0008470:	50                   	push   eax
c0008471:	83 c2 0d             	add    edx,0xd
c0008474:	50                   	push   eax
c0008475:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008477:	52                   	push   edx
c0008478:	51                   	push   ecx
c0008479:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000847c:	83 c4 10             	add    esp,0x10
c000847f:	83 c4 0c             	add    esp,0xc
c0008482:	c3                   	ret    
c0008483:	90                   	nop

c0008484 <File::stat(unsigned long long*, bool*)>:
c0008484:	56                   	push   esi
c0008485:	53                   	push   ebx
c0008486:	50                   	push   eax
c0008487:	b8 0b 00 00 00       	mov    eax,0xb
c000848c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008490:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008494:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008498:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000849f:	83 f9 19             	cmp    ecx,0x19
c00084a2:	77 3d                	ja     c00084e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00084a4:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084ab:	85 c9                	test   ecx,ecx
c00084ad:	74 32                	je     c00084e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00084af:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084b5:	85 c9                	test   ecx,ecx
c00084b7:	74 28                	je     c00084e1 <File::stat(unsigned long long*, bool*)+0x5d>
c00084b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084bf:	74 13                	je     c00084d4 <File::stat(unsigned long long*, bool*)+0x50>
c00084c1:	83 ec 04             	sub    esp,0x4
c00084c4:	56                   	push   esi
c00084c5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084cb:	51                   	push   ecx
c00084cc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084cf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084d2:	eb 0a                	jmp    c00084de <File::stat(unsigned long long*, bool*)+0x5a>
c00084d4:	53                   	push   ebx
c00084d5:	83 c2 0d             	add    edx,0xd
c00084d8:	56                   	push   esi
c00084d9:	52                   	push   edx
c00084da:	51                   	push   ecx
c00084db:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084de:	83 c4 10             	add    esp,0x10
c00084e1:	5a                   	pop    edx
c00084e2:	5b                   	pop    ebx
c00084e3:	5e                   	pop    esi
c00084e4:	c3                   	ret    

c00084e5 <Fs::setcwd(Process*, char*)>:
c00084e5:	55                   	push   ebp
c00084e6:	57                   	push   edi
c00084e7:	56                   	push   esi
c00084e8:	53                   	push   ebx
c00084e9:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084ef:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084f6:	6a 00                	push   0x0
c00084f8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084fe:	57                   	push   edi
c00084ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008506:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000850a:	56                   	push   esi
c000850b:	e8 28 f9 ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008510:	89 34 24             	mov    DWORD PTR [esp],esi
c0008513:	e8 68 80 ff ff       	call   c0000580 <strlen>
c0008518:	83 c4 10             	add    esp,0x10
c000851b:	83 f8 02             	cmp    eax,0x2
c000851e:	77 15                	ja     c0008535 <Fs::setcwd(Process*, char*)+0x50>
c0008520:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008525:	83 eb 41             	sub    ebx,0x41
c0008528:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c000852f:	85 c0                	test   eax,eax
c0008531:	75 1c                	jne    c000854f <Fs::setcwd(Process*, char*)+0x6a>
c0008533:	eb 2f                	jmp    c0008564 <Fs::setcwd(Process*, char*)+0x7f>
c0008535:	83 ec 0c             	sub    esp,0xc
c0008538:	56                   	push   esi
c0008539:	e8 42 80 ff ff       	call   c0000580 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 03             	cmp    eax,0x3
c0008544:	75 57                	jne    c000859d <Fs::setcwd(Process*, char*)+0xb8>
c0008546:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000854b:	75 50                	jne    c000859d <Fs::setcwd(Process*, char*)+0xb8>
c000854d:	eb d1                	jmp    c0008520 <Fs::setcwd(Process*, char*)+0x3b>
c000854f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008556:	75 0c                	jne    c0008564 <Fs::setcwd(Process*, char*)+0x7f>
c0008558:	83 ec 0c             	sub    esp,0xc
c000855b:	50                   	push   eax
c000855c:	e8 05 24 00 00       	call   c000a966 <LogicalDisk::mount()>
c0008561:	83 c4 10             	add    esp,0x10
c0008564:	83 fb 19             	cmp    ebx,0x19
c0008567:	b8 03 00 00 00       	mov    eax,0x3
c000856c:	0f 87 c6 00 00 00    	ja     c0008638 <Fs::setcwd(Process*, char*)+0x153>
c0008572:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c0008579:	b8 05 00 00 00       	mov    eax,0x5
c000857e:	85 d2                	test   edx,edx
c0008580:	0f 84 b2 00 00 00    	je     c0008638 <Fs::setcwd(Process*, char*)+0x153>
c0008586:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000858d:	b8 06 00 00 00       	mov    eax,0x6
c0008592:	0f 85 92 00 00 00    	jne    c000862a <Fs::setcwd(Process*, char*)+0x145>
c0008598:	e9 9b 00 00 00       	jmp    c0008638 <Fs::setcwd(Process*, char*)+0x153>
c000859d:	83 ec 0c             	sub    esp,0xc
c00085a0:	68 14 01 00 00       	push   0x114
c00085a5:	e8 5e 75 00 00       	call   c000fb08 <malloc>
c00085aa:	83 c4 0c             	add    esp,0xc
c00085ad:	55                   	push   ebp
c00085ae:	56                   	push   esi
c00085af:	50                   	push   eax
c00085b0:	89 c3                	mov    ebx,eax
c00085b2:	e8 ad fb ff ff       	call   c0008164 <File::File(char const*, Process*)>
c00085b7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085bc:	83 c4 0c             	add    esp,0xc
c00085bf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085c3:	50                   	push   eax
c00085c4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085c8:	50                   	push   eax
c00085c9:	53                   	push   ebx
c00085ca:	e8 b5 fe ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	83 f8 02             	cmp    eax,0x2
c00085d5:	74 27                	je     c00085fe <Fs::setcwd(Process*, char*)+0x119>
c00085d7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085dc:	75 1c                	jne    c00085fa <Fs::setcwd(Process*, char*)+0x115>
c00085de:	85 db                	test   ebx,ebx
c00085e0:	b8 02 00 00 00       	mov    eax,0x2
c00085e5:	74 51                	je     c0008638 <Fs::setcwd(Process*, char*)+0x153>
c00085e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e9:	83 ec 0c             	sub    esp,0xc
c00085ec:	53                   	push   ebx
c00085ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f0:	83 c4 10             	add    esp,0x10
c00085f3:	b8 02 00 00 00       	mov    eax,0x2
c00085f8:	eb 3e                	jmp    c0008638 <Fs::setcwd(Process*, char*)+0x153>
c00085fa:	85 c0                	test   eax,eax
c00085fc:	74 1c                	je     c000861a <Fs::setcwd(Process*, char*)+0x135>
c00085fe:	85 db                	test   ebx,ebx
c0008600:	b8 01 00 00 00       	mov    eax,0x1
c0008605:	74 31                	je     c0008638 <Fs::setcwd(Process*, char*)+0x153>
c0008607:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	53                   	push   ebx
c000860d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008610:	83 c4 10             	add    esp,0x10
c0008613:	b8 01 00 00 00       	mov    eax,0x1
c0008618:	eb 1e                	jmp    c0008638 <Fs::setcwd(Process*, char*)+0x153>
c000861a:	85 db                	test   ebx,ebx
c000861c:	74 0c                	je     c000862a <Fs::setcwd(Process*, char*)+0x145>
c000861e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008620:	83 ec 0c             	sub    esp,0xc
c0008623:	53                   	push   ebx
c0008624:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008627:	83 c4 10             	add    esp,0x10
c000862a:	50                   	push   eax
c000862b:	50                   	push   eax
c000862c:	56                   	push   esi
c000862d:	57                   	push   edi
c000862e:	e8 1d 80 ff ff       	call   c0000650 <strcpy>
c0008633:	83 c4 10             	add    esp,0x10
c0008636:	31 c0                	xor    eax,eax
c0008638:	81 c4 1c 02 00 00    	add    esp,0x21c
c000863e:	5b                   	pop    ebx
c000863f:	5e                   	pop    esi
c0008640:	5f                   	pop    edi
c0008641:	5d                   	pop    ebp
c0008642:	c3                   	ret    
c0008643:	90                   	nop

c0008644 <Directory::Directory(char const*, Process*)>:
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	83 ec 08             	sub    esp,0x8
c000864e:	6a 00                	push   0x0
c0008650:	50                   	push   eax
c0008651:	e8 06 a8 00 00       	call   c0012e5c <UnixFile::UnixFile(int)>
c0008656:	83 c4 10             	add    esp,0x10
c0008659:	ba 00 35 02 c0       	mov    edx,0xc0023500
c000865e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008662:	89 10                	mov    DWORD PTR [eax],edx
c0008664:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0008669:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000866d:	0f 95 c0             	setne  al
c0008670:	0f b6 c0             	movzx  eax,al
c0008673:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008677:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000867d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008681:	83 c2 0d             	add    edx,0xd
c0008684:	50                   	push   eax
c0008685:	51                   	push   ecx
c0008686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868a:	52                   	push   edx
c000868b:	e8 a8 f7 ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008697:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000869a:	83 e8 41             	sub    eax,0x41
c000869d:	88 c2                	mov    dl,al
c000869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086c5:	85 c0                	test   eax,eax
c00086c7:	74 3e                	je     c0008707 <Directory::Directory(char const*, Process*)+0xc3>
c00086c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086d3:	0f b6 c0             	movzx  eax,al
c00086d6:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086e3:	85 c0                	test   eax,eax
c00086e5:	75 20                	jne    c0008707 <Directory::Directory(char const*, Process*)+0xc3>
c00086e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f1:	0f b6 c0             	movzx  eax,al
c00086f4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086fb:	83 ec 0c             	sub    esp,0xc
c00086fe:	50                   	push   eax
c00086ff:	e8 62 22 00 00       	call   c000a966 <LogicalDisk::mount()>
c0008704:	83 c4 10             	add    esp,0x10
c0008707:	90                   	nop
c0008708:	83 c4 0c             	add    esp,0xc
c000870b:	c3                   	ret    

c000870c <Directory::open()>:
c000870c:	53                   	push   ebx
c000870d:	b8 0b 00 00 00       	mov    eax,0xb
c0008712:	83 ec 08             	sub    esp,0x8
c0008715:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008719:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008720:	83 fa 19             	cmp    edx,0x19
c0008723:	77 3d                	ja     c0008762 <Directory::open()+0x56>
c0008725:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000872c:	85 d2                	test   edx,edx
c000872e:	74 32                	je     c0008762 <Directory::open()+0x56>
c0008730:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008736:	85 d2                	test   edx,edx
c0008738:	74 28                	je     c0008762 <Directory::open()+0x56>
c000873a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000873e:	b8 06 00 00 00       	mov    eax,0x6
c0008743:	75 1d                	jne    c0008762 <Directory::open()+0x56>
c0008745:	50                   	push   eax
c0008746:	8b 02                	mov    eax,DWORD PTR [edx]
c0008748:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000874e:	51                   	push   ecx
c000874f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008752:	51                   	push   ecx
c0008753:	52                   	push   edx
c0008754:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	85 c0                	test   eax,eax
c000875c:	75 04                	jne    c0008762 <Directory::open()+0x56>
c000875e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008762:	83 c4 08             	add    esp,0x8
c0008765:	5b                   	pop    ebx
c0008766:	c3                   	ret    
c0008767:	90                   	nop

c0008768 <Directory::close()>:
c0008768:	53                   	push   ebx
c0008769:	b8 0b 00 00 00       	mov    eax,0xb
c000876e:	83 ec 08             	sub    esp,0x8
c0008771:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008775:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000877c:	83 f9 19             	cmp    ecx,0x19
c000877f:	77 41                	ja     c00087c2 <Directory::close()+0x5a>
c0008781:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008788:	85 db                	test   ebx,ebx
c000878a:	74 36                	je     c00087c2 <Directory::close()+0x5a>
c000878c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008793:	74 2d                	je     c00087c2 <Directory::close()+0x5a>
c0008795:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008799:	b8 05 00 00 00       	mov    eax,0x5
c000879e:	74 22                	je     c00087c2 <Directory::close()+0x5a>
c00087a0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087a4:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087b1:	53                   	push   ebx
c00087b2:	53                   	push   ebx
c00087b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087b5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087bb:	50                   	push   eax
c00087bc:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	83 c4 08             	add    esp,0x8
c00087c5:	5b                   	pop    ebx
c00087c6:	c3                   	ret    
c00087c7:	90                   	nop

c00087c8 <Directory::unlink()>:
c00087c8:	83 ec 0c             	sub    esp,0xc
c00087cb:	b8 0b 00 00 00       	mov    eax,0xb
c00087d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087db:	83 f9 19             	cmp    ecx,0x19
c00087de:	77 2f                	ja     c000880f <Directory::unlink()+0x47>
c00087e0:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00087e7:	85 c9                	test   ecx,ecx
c00087e9:	74 24                	je     c000880f <Directory::unlink()+0x47>
c00087eb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087f1:	85 c9                	test   ecx,ecx
c00087f3:	74 1a                	je     c000880f <Directory::unlink()+0x47>
c00087f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087f9:	b8 06 00 00 00       	mov    eax,0x6
c00087fe:	75 0f                	jne    c000880f <Directory::unlink()+0x47>
c0008800:	50                   	push   eax
c0008801:	83 c2 0d             	add    edx,0xd
c0008804:	50                   	push   eax
c0008805:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008807:	52                   	push   edx
c0008808:	51                   	push   ecx
c0008809:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000880c:	83 c4 10             	add    esp,0x10
c000880f:	83 c4 0c             	add    esp,0xc
c0008812:	c3                   	ret    
c0008813:	90                   	nop

c0008814 <Directory::rename(char const*)>:
c0008814:	83 ec 0c             	sub    esp,0xc
c0008817:	b8 0b 00 00 00       	mov    eax,0xb
c000881c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008820:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008827:	83 f9 19             	cmp    ecx,0x19
c000882a:	77 32                	ja     c000885e <Directory::rename(char const*)+0x4a>
c000882c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008833:	85 c9                	test   ecx,ecx
c0008835:	74 27                	je     c000885e <Directory::rename(char const*)+0x4a>
c0008837:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000883d:	85 c9                	test   ecx,ecx
c000883f:	74 1d                	je     c000885e <Directory::rename(char const*)+0x4a>
c0008841:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008845:	b8 06 00 00 00       	mov    eax,0x6
c000884a:	75 12                	jne    c000885e <Directory::rename(char const*)+0x4a>
c000884c:	50                   	push   eax
c000884d:	83 c2 0d             	add    edx,0xd
c0008850:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008852:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008856:	52                   	push   edx
c0008857:	51                   	push   ecx
c0008858:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000885b:	83 c4 10             	add    esp,0x10
c000885e:	83 c4 0c             	add    esp,0xc
c0008861:	c3                   	ret    

c0008862 <Directory::exists()>:
c0008862:	83 ec 0c             	sub    esp,0xc
c0008865:	31 c0                	xor    eax,eax
c0008867:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000886b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008872:	83 f9 19             	cmp    ecx,0x19
c0008875:	77 24                	ja     c000889b <Directory::exists()+0x39>
c0008877:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000887e:	85 c9                	test   ecx,ecx
c0008880:	74 19                	je     c000889b <Directory::exists()+0x39>
c0008882:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008888:	85 c9                	test   ecx,ecx
c000888a:	74 0f                	je     c000889b <Directory::exists()+0x39>
c000888c:	50                   	push   eax
c000888d:	83 c2 0d             	add    edx,0xd
c0008890:	50                   	push   eax
c0008891:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008893:	52                   	push   edx
c0008894:	51                   	push   ecx
c0008895:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008898:	83 c4 10             	add    esp,0x10
c000889b:	83 c4 0c             	add    esp,0xc
c000889e:	c3                   	ret    
c000889f:	90                   	nop

c00088a0 <Directory::read(dirent*)>:
c00088a0:	83 ec 1c             	sub    esp,0x1c
c00088a3:	b8 0b 00 00 00       	mov    eax,0xb
c00088a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088b3:	83 f9 19             	cmp    ecx,0x19
c00088b6:	77 30                	ja     c00088e8 <Directory::read(dirent*)+0x48>
c00088b8:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088bf:	85 c9                	test   ecx,ecx
c00088c1:	74 25                	je     c00088e8 <Directory::read(dirent*)+0x48>
c00088c3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ca:	74 1c                	je     c00088e8 <Directory::read(dirent*)+0x48>
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00088d1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088d5:	51                   	push   ecx
c00088d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088da:	6a 00                	push   0x0
c00088dc:	68 10 01 00 00       	push   0x110
c00088e1:	52                   	push   edx
c00088e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088e5:	83 c4 20             	add    esp,0x20
c00088e8:	83 c4 1c             	add    esp,0x1c
c00088eb:	c3                   	ret    

c00088ec <Directory::create()>:
c00088ec:	83 ec 0c             	sub    esp,0xc
c00088ef:	b8 0b 00 00 00       	mov    eax,0xb
c00088f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ff:	83 f9 19             	cmp    ecx,0x19
c0008902:	77 2f                	ja     c0008933 <Directory::create()+0x47>
c0008904:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000890b:	85 c9                	test   ecx,ecx
c000890d:	74 24                	je     c0008933 <Directory::create()+0x47>
c000890f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008915:	85 c9                	test   ecx,ecx
c0008917:	74 1a                	je     c0008933 <Directory::create()+0x47>
c0008919:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000891d:	b8 06 00 00 00       	mov    eax,0x6
c0008922:	75 0f                	jne    c0008933 <Directory::create()+0x47>
c0008924:	50                   	push   eax
c0008925:	83 c2 0d             	add    edx,0xd
c0008928:	50                   	push   eax
c0008929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000892b:	52                   	push   edx
c000892c:	51                   	push   ecx
c000892d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	83 c4 0c             	add    esp,0xc
c0008936:	c3                   	ret    
c0008937:	90                   	nop

c0008938 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008938:	b8 0a 00 00 00       	mov    eax,0xa
c000893d:	c3                   	ret    
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::Bus(char const*)>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008947:	83 ec 08             	sub    esp,0x8
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	50                   	push   eax
c000894f:	e8 e0 11 00 00       	call   c0009b34 <Device::Device(char const*)>
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c000895c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008960:	89 10                	mov    DWORD PTR [eax],edx
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008970:	90                   	nop
c0008971:	83 c4 0c             	add    esp,0xc
c0008974:	c3                   	ret    
c0008975:	90                   	nop
c0008976:	66 90                	xchg   ax,ax

c0008978 <Bus::~Bus()>:
c0008978:	83 ec 0c             	sub    esp,0xc
c000897b:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	83 ec 0c             	sub    esp,0xc
c000898d:	50                   	push   eax
c000898e:	e8 41 0f 00 00       	call   c00098d4 <Device::~Device()>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	90                   	nop
c0008997:	83 c4 0c             	add    esp,0xc
c000899a:	c3                   	ret    
c000899b:	90                   	nop

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	83 ec 0c             	sub    esp,0xc
c00089a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a6:	e8 cd ff ff ff       	call   c0008978 <Bus::~Bus()>
c00089ab:	83 c4 10             	add    esp,0x10
c00089ae:	83 ec 08             	sub    esp,0x8
c00089b1:	68 58 01 00 00       	push   0x158
c00089b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ba:	e8 ac 48 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c00089bf:	83 c4 10             	add    esp,0x10
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	c3                   	ret    

c00089c6 <KeBeepThread(void*)>:
c00089c6:	83 ec 0c             	sub    esp,0xc
c00089c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089cd:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00089d4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00089db:	75 01                	jne    c00089de <KeBeepThread(void*)+0x18>
c00089dd:	fb                   	sti    
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	52                   	push   edx
c00089e2:	52                   	push   edx
c00089e3:	99                   	cdq    
c00089e4:	52                   	push   edx
c00089e5:	50                   	push   eax
c00089e6:	e8 51 e8 00 00       	call   c001723c <milliTenthSleep(unsigned long long)>
c00089eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089f2:	e8 12 1a 01 00       	call   c001a409 <HalMakeBeep(int)>
c00089f7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ff:	83 c4 1c             	add    esp,0x1c
c0008a02:	e9 01 e7 00 00       	jmp    c0017108 <blockTask(TaskState)>

c0008a07 <KeBeep(int, int, bool)>:
c0008a07:	56                   	push   esi
c0008a08:	53                   	push   ebx
c0008a09:	83 ec 10             	sub    esp,0x10
c0008a0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a18:	e8 ec 19 01 00       	call   c001a409 <HalMakeBeep(int)>
c0008a1d:	89 f0                	mov    eax,esi
c0008a1f:	83 c4 10             	add    esp,0x10
c0008a22:	84 c0                	test   al,al
c0008a24:	74 1f                	je     c0008a45 <KeBeep(int, int, bool)+0x3e>
c0008a26:	50                   	push   eax
c0008a27:	50                   	push   eax
c0008a28:	6b c3 0a             	imul   eax,ebx,0xa
c0008a2b:	99                   	cdq    
c0008a2c:	52                   	push   edx
c0008a2d:	50                   	push   eax
c0008a2e:	e8 09 e8 00 00       	call   c001723c <milliTenthSleep(unsigned long long)>
c0008a33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a3b:	83 c4 14             	add    esp,0x14
c0008a3e:	5b                   	pop    ebx
c0008a3f:	5e                   	pop    esi
c0008a40:	e9 c4 19 01 00       	jmp    c001a409 <HalMakeBeep(int)>
c0008a45:	68 e6 00 00 00       	push   0xe6
c0008a4a:	53                   	push   ebx
c0008a4b:	68 c6 89 00 c0       	push   0xc00089c6
c0008a50:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0008a56:	e8 45 e3 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c0008a5b:	83 c4 14             	add    esp,0x14
c0008a5e:	5b                   	pop    ebx
c0008a5f:	5e                   	pop    esi
c0008a60:	c3                   	ret    
c0008a61:	90                   	nop

c0008a62 <KeLoadTimezoneStrings()>:
c0008a62:	55                   	push   ebp
c0008a63:	89 e5                	mov    ebp,esp
c0008a65:	53                   	push   ebx
c0008a66:	83 ec 44             	sub    esp,0x44
c0008a69:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a70:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a77:	83 ec 0c             	sub    esp,0xc
c0008a7a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a7d:	e8 86 70 00 00       	call   c000fb08 <malloc>
c0008a82:	83 c4 10             	add    esp,0x10
c0008a85:	89 c3                	mov    ebx,eax
c0008a87:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0008a8c:	83 ec 04             	sub    esp,0x4
c0008a8f:	50                   	push   eax
c0008a90:	68 40 35 02 c0       	push   0xc0023540
c0008a95:	53                   	push   ebx
c0008a96:	e8 c9 f6 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0008a9b:	83 c4 10             	add    esp,0x10
c0008a9e:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008aa1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008aa5:	75 10                	jne    c0008ab7 <KeLoadTimezoneStrings()+0x55>
c0008aa7:	83 ec 0c             	sub    esp,0xc
c0008aaa:	68 5f 35 02 c0       	push   0xc002355f
c0008aaf:	e8 9a 73 00 00       	call   c000fe4e <KePanic(char const*)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	83 ec 08             	sub    esp,0x8
c0008aba:	6a 01                	push   0x1
c0008abc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008abf:	e8 be f6 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	83 ec 04             	sub    esp,0x4
c0008aca:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008acd:	50                   	push   eax
c0008ace:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008ad1:	50                   	push   eax
c0008ad2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ad5:	e8 aa f9 ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ae0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ae3:	83 ec 08             	sub    esp,0x8
c0008ae6:	50                   	push   eax
c0008ae7:	68 75 35 02 c0       	push   0xc0023575
c0008aec:	e8 5d e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008af1:	83 c4 10             	add    esp,0x10
c0008af4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008af7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008afa:	83 c0 01             	add    eax,0x1
c0008afd:	83 ec 0c             	sub    esp,0xc
c0008b00:	50                   	push   eax
c0008b01:	e8 02 70 00 00       	call   c000fb08 <malloc>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b0f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b12:	83 ec 04             	sub    esp,0x4
c0008b15:	50                   	push   eax
c0008b16:	6a 00                	push   0x0
c0008b18:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b1b:	e8 d0 79 ff ff       	call   c00004f0 <memset>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b28:	83 c0 0c             	add    eax,0xc
c0008b2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b2d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b30:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b33:	83 ec 0c             	sub    esp,0xc
c0008b36:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b39:	53                   	push   ebx
c0008b3a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3d:	52                   	push   edx
c0008b3e:	50                   	push   eax
c0008b3f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b42:	ff d1                	call   ecx
c0008b44:	83 c4 20             	add    esp,0x20
c0008b47:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b4a:	83 ec 08             	sub    esp,0x8
c0008b4d:	50                   	push   eax
c0008b4e:	68 85 35 02 c0       	push   0xc0023585
c0008b53:	e8 f6 e3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b58:	83 c4 10             	add    esp,0x10
c0008b5b:	83 ec 0c             	sub    esp,0xc
c0008b5e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b61:	e8 7a f6 ff ff       	call   c00081e0 <File::close()>
c0008b66:	83 c4 10             	add    esp,0x10
c0008b69:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b6d:	74 15                	je     c0008b84 <KeLoadTimezoneStrings()+0x122>
c0008b6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b74:	83 c0 08             	add    eax,0x8
c0008b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b79:	83 ec 0c             	sub    esp,0xc
c0008b7c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b7f:	ff d0                	call   eax
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b8b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b92:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b99:	7f 3a                	jg     c0008bd5 <KeLoadTimezoneStrings()+0x173>
c0008b9b:	83 ec 0c             	sub    esp,0xc
c0008b9e:	6a 78                	push   0x78
c0008ba0:	e8 63 6f 00 00       	call   c000fb08 <malloc>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	89 c2                	mov    edx,eax
c0008baa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bad:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bb7:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008bbe:	83 ec 08             	sub    esp,0x8
c0008bc1:	68 8e 35 02 c0       	push   0xc002358e
c0008bc6:	50                   	push   eax
c0008bc7:	e8 84 7a ff ff       	call   c0000650 <strcpy>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bd3:	eb bd                	jmp    c0008b92 <KeLoadTimezoneStrings()+0x130>
c0008bd5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008bdc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0008be2:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008be5:	89 c2                	mov    edx,eax
c0008be7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bea:	01 d0                	add    eax,edx
c0008bec:	8a 00                	mov    al,BYTE PTR [eax]
c0008bee:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bf1:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bf5:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bf8:	0f be c0             	movsx  eax,al
c0008bfb:	83 f8 0d             	cmp    eax,0xd
c0008bfe:	0f 84 82 01 00 00    	je     c0008d86 <KeLoadTimezoneStrings()+0x324>
c0008c04:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c07:	0f be c0             	movsx  eax,al
c0008c0a:	83 f8 09             	cmp    eax,0x9
c0008c0d:	75 44                	jne    c0008c53 <KeLoadTimezoneStrings()+0x1f1>
c0008c0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c12:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c19:	83 ec 0c             	sub    esp,0xc
c0008c1c:	50                   	push   eax
c0008c1d:	e8 5e 79 ff ff       	call   c0000580 <strlen>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 f8 08             	cmp    eax,0x8
c0008c28:	0f 96 c0             	setbe  al
c0008c2b:	0f b6 c0             	movzx  eax,al
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	0f 84 56 01 00 00    	je     c0008d8c <KeLoadTimezoneStrings()+0x32a>
c0008c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c39:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c40:	83 ec 08             	sub    esp,0x8
c0008c43:	68 8e 35 02 c0       	push   0xc002358e
c0008c48:	50                   	push   eax
c0008c49:	e8 22 7c ff ff       	call   c0000870 <strcat>
c0008c4e:	83 c4 10             	add    esp,0x10
c0008c51:	eb bc                	jmp    c0008c0f <KeLoadTimezoneStrings()+0x1ad>
c0008c53:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c56:	0f be c0             	movsx  eax,al
c0008c59:	83 f8 0a             	cmp    eax,0xa
c0008c5c:	0f 85 9b 00 00 00    	jne    c0008cfd <KeLoadTimezoneStrings()+0x29b>
c0008c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c65:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 0b 79 ff ff       	call   c0000580 <strlen>
c0008c75:	83 c4 10             	add    esp,0x10
c0008c78:	83 f8 35             	cmp    eax,0x35
c0008c7b:	0f 96 c0             	setbe  al
c0008c7e:	0f b6 c0             	movzx  eax,al
c0008c81:	85 c0                	test   eax,eax
c0008c83:	74 1d                	je     c0008ca2 <KeLoadTimezoneStrings()+0x240>
c0008c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c88:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c8f:	83 ec 08             	sub    esp,0x8
c0008c92:	68 8e 35 02 c0       	push   0xc002358e
c0008c97:	50                   	push   eax
c0008c98:	e8 d3 7b ff ff       	call   c0000870 <strcat>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	eb c0                	jmp    c0008c62 <KeLoadTimezoneStrings()+0x200>
c0008ca2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008ca6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ca9:	89 c2                	mov    edx,eax
c0008cab:	c1 fa 1f             	sar    edx,0x1f
c0008cae:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cb1:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cb4:	39 c8                	cmp    eax,ecx
c0008cb6:	89 d0                	mov    eax,edx
c0008cb8:	19 d8                	sbb    eax,ebx
c0008cba:	0f 82 d2 00 00 00    	jb     c0008d92 <KeLoadTimezoneStrings()+0x330>
c0008cc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cc3:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cc8:	83 ec 08             	sub    esp,0x8
c0008ccb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cce:	68 90 35 02 c0       	push   0xc0023590
c0008cd3:	e8 76 e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008ce0:	83 ec 08             	sub    esp,0x8
c0008ce3:	50                   	push   eax
c0008ce4:	68 a5 35 02 c0       	push   0xc00235a5
c0008ce9:	e8 60 e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008cee:	83 c4 10             	add    esp,0x10
c0008cf1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cf8:	e9 9b 00 00 00       	jmp    c0008d98 <KeLoadTimezoneStrings()+0x336>
c0008cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d00:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d07:	83 ec 0c             	sub    esp,0xc
c0008d0a:	50                   	push   eax
c0008d0b:	e8 70 78 ff ff       	call   c0000580 <strlen>
c0008d10:	83 c4 10             	add    esp,0x10
c0008d13:	83 f8 31             	cmp    eax,0x31
c0008d16:	0f 96 c0             	setbe  al
c0008d19:	0f b6 c0             	movzx  eax,al
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	74 1f                	je     c0008d3f <KeLoadTimezoneStrings()+0x2dd>
c0008d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d23:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2a:	83 ec 08             	sub    esp,0x8
c0008d2d:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d30:	52                   	push   edx
c0008d31:	50                   	push   eax
c0008d32:	e8 39 7b ff ff       	call   c0000870 <strcat>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	e9 9d fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d42:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	50                   	push   eax
c0008d4d:	e8 2e 78 ff ff       	call   c0000580 <strlen>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	83 f8 32             	cmp    eax,0x32
c0008d58:	0f 94 c0             	sete   al
c0008d5b:	0f b6 c0             	movzx  eax,al
c0008d5e:	85 c0                	test   eax,eax
c0008d60:	0f 84 76 fe ff ff    	je     c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d69:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d70:	83 ec 08             	sub    esp,0x8
c0008d73:	68 a9 35 02 c0       	push   0xc00235a9
c0008d78:	50                   	push   eax
c0008d79:	e8 f2 7a ff ff       	call   c0000870 <strcat>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	e9 56 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d86:	90                   	nop
c0008d87:	e9 50 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d8c:	90                   	nop
c0008d8d:	e9 4a fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d92:	90                   	nop
c0008d93:	e9 44 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d98:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d9d:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008da0:	7d 49                	jge    c0008deb <KeLoadTimezoneStrings()+0x389>
c0008da2:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008da7:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008daa:	0f 9c c0             	setl   al
c0008dad:	0f b6 d0             	movzx  edx,al
c0008db0:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008db5:	52                   	push   edx
c0008db6:	50                   	push   eax
c0008db7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dba:	68 ae 35 02 c0       	push   0xc00235ae
c0008dbf:	e8 8a e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008dc4:	83 c4 10             	add    esp,0x10
c0008dc7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dca:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008dd1:	83 ec 04             	sub    esp,0x4
c0008dd4:	50                   	push   eax
c0008dd5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dd8:	68 bc 35 02 c0       	push   0xc00235bc
c0008ddd:	e8 6c e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008de2:	83 c4 10             	add    esp,0x10
c0008de5:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008de9:	eb ad                	jmp    c0008d98 <KeLoadTimezoneStrings()+0x336>
c0008deb:	90                   	nop
c0008dec:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008def:	c9                   	leave  
c0008df0:	c3                   	ret    

c0008df1 <KeGetTimezoneStringFromID(int)>:
c0008df1:	55                   	push   ebp
c0008df2:	89 e5                	mov    ebp,esp
c0008df4:	83 ec 08             	sub    esp,0x8
c0008df7:	83 ec 08             	sub    esp,0x8
c0008dfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dfd:	68 c5 35 02 c0       	push   0xc00235c5
c0008e02:	e8 47 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e0f:	83 f0 01             	xor    eax,0x1
c0008e12:	0f b6 c0             	movzx  eax,al
c0008e15:	85 c0                	test   eax,eax
c0008e17:	74 15                	je     c0008e2e <KeGetTimezoneStringFromID(int)+0x3d>
c0008e19:	e8 44 fc ff ff       	call   c0008a62 <KeLoadTimezoneStrings()>
c0008e1e:	83 ec 0c             	sub    esp,0xc
c0008e21:	68 e3 35 02 c0       	push   0xc00235e3
c0008e26:	e8 23 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e33:	83 ec 04             	sub    esp,0x4
c0008e36:	50                   	push   eax
c0008e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3a:	68 f4 35 02 c0       	push   0xc00235f4
c0008e3f:	e8 0a e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e4c:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e4f:	7d 06                	jge    c0008e57 <KeGetTimezoneStringFromID(int)+0x66>
c0008e51:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e55:	79 07                	jns    c0008e5e <KeGetTimezoneStringFromID(int)+0x6d>
c0008e57:	b8 00 00 00 00       	mov    eax,0x0
c0008e5c:	eb 2e                	jmp    c0008e8c <KeGetTimezoneStringFromID(int)+0x9b>
c0008e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e61:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e68:	83 c0 01             	add    eax,0x1
c0008e6b:	83 ec 04             	sub    esp,0x4
c0008e6e:	50                   	push   eax
c0008e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e72:	68 07 36 02 c0       	push   0xc0023607
c0008e77:	e8 d2 e0 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e82:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e89:	83 c0 01             	add    eax,0x1
c0008e8c:	c9                   	leave  
c0008e8d:	c3                   	ret    

c0008e8e <KeUpdateTimezone(char const*)>:
c0008e8e:	55                   	push   ebp
c0008e8f:	89 e5                	mov    ebp,esp
c0008e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e94:	8a 00                	mov    al,BYTE PTR [eax]
c0008e96:	0f be c0             	movsx  eax,al
c0008e99:	83 f8 2b             	cmp    eax,0x2b
c0008e9c:	74 11                	je     c0008eaf <KeUpdateTimezone(char const*)+0x21>
c0008e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea3:	0f be c0             	movsx  eax,al
c0008ea6:	83 f8 2d             	cmp    eax,0x2d
c0008ea9:	0f 85 be 00 00 00    	jne    c0008f6d <KeUpdateTimezone(char const*)+0xdf>
c0008eaf:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb9:	83 c0 02             	add    eax,0x2
c0008ebc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ebe:	0f be c0             	movsx  eax,al
c0008ec1:	83 f8 2e             	cmp    eax,0x2e
c0008ec4:	75 10                	jne    c0008ed6 <KeUpdateTimezone(char const*)+0x48>
c0008ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec9:	83 c0 03             	add    eax,0x3
c0008ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ece:	0f be c0             	movsx  eax,al
c0008ed1:	83 f8 35             	cmp    eax,0x35
c0008ed4:	74 20                	je     c0008ef6 <KeUpdateTimezone(char const*)+0x68>
c0008ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed9:	83 c0 03             	add    eax,0x3
c0008edc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ede:	0f be c0             	movsx  eax,al
c0008ee1:	83 f8 2e             	cmp    eax,0x2e
c0008ee4:	75 14                	jne    c0008efa <KeUpdateTimezone(char const*)+0x6c>
c0008ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee9:	83 c0 04             	add    eax,0x4
c0008eec:	8a 00                	mov    al,BYTE PTR [eax]
c0008eee:	0f be c0             	movsx  eax,al
c0008ef1:	83 f8 35             	cmp    eax,0x35
c0008ef4:	75 04                	jne    c0008efa <KeUpdateTimezone(char const*)+0x6c>
c0008ef6:	b0 01                	mov    al,0x1
c0008ef8:	eb 02                	jmp    c0008efc <KeUpdateTimezone(char const*)+0x6e>
c0008efa:	b0 00                	mov    al,0x0
c0008efc:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f04:	83 c0 01             	add    eax,0x1
c0008f07:	8a 00                	mov    al,BYTE PTR [eax]
c0008f09:	0f be c0             	movsx  eax,al
c0008f0c:	83 e8 30             	sub    eax,0x30
c0008f0f:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f17:	83 c0 03             	add    eax,0x3
c0008f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0008f1c:	0f be c0             	movsx  eax,al
c0008f1f:	83 f8 2e             	cmp    eax,0x2e
c0008f22:	75 2e                	jne    c0008f52 <KeUpdateTimezone(char const*)+0xc4>
c0008f24:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f2a:	89 d0                	mov    eax,edx
c0008f2c:	c1 e0 02             	shl    eax,0x2
c0008f2f:	01 d0                	add    eax,edx
c0008f31:	d1 e0                	shl    eax,1
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 02             	add    eax,0x2
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f46:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f4b:	01 d0                	add    eax,edx
c0008f4d:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f55:	8a 00                	mov    al,BYTE PTR [eax]
c0008f57:	0f be c0             	movsx  eax,al
c0008f5a:	83 f8 2d             	cmp    eax,0x2d
c0008f5d:	75 26                	jne    c0008f85 <KeUpdateTimezone(char const*)+0xf7>
c0008f5f:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f64:	f7 d8                	neg    eax
c0008f66:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f6b:	eb 18                	jmp    c0008f85 <KeUpdateTimezone(char const*)+0xf7>
c0008f6d:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f74:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f7b:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008f85:	90                   	nop
c0008f86:	5d                   	pop    ebp
c0008f87:	c3                   	ret    

c0008f88 <KeSetTimezone(char const*)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	68 14 36 02 c0       	push   0xc0023614
c0008f96:	e8 25 43 00 00       	call   c000d2c0 <CmOpen(char const*)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fa1:	83 ec 08             	sub    esp,0x8
c0008fa4:	68 39 36 02 c0       	push   0xc0023639
c0008fa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fac:	e8 0a 4f 00 00       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fb1:	83 c4 10             	add    esp,0x10
c0008fb4:	83 ec 04             	sub    esp,0x4
c0008fb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fba:	50                   	push   eax
c0008fbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fbe:	e8 cf 47 00 00       	call   c000d792 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fc3:	83 c4 10             	add    esp,0x10
c0008fc6:	83 ec 0c             	sub    esp,0xc
c0008fc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fcc:	e8 0d 44 00 00       	call   c000d3de <CmClose(Reghive_Tag*)>
c0008fd1:	83 c4 10             	add    esp,0x10
c0008fd4:	83 ec 0c             	sub    esp,0xc
c0008fd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fda:	e8 af fe ff ff       	call   c0008e8e <KeUpdateTimezone(char const*)>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	90                   	nop
c0008fe3:	c9                   	leave  
c0008fe4:	c3                   	ret    

c0008fe5 <KeSetTimezone(int)>:
c0008fe5:	55                   	push   ebp
c0008fe6:	89 e5                	mov    ebp,esp
c0008fe8:	83 ec 18             	sub    esp,0x18
c0008feb:	83 ec 0c             	sub    esp,0xc
c0008fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ff1:	e8 fb fd ff ff       	call   c0008df1 <KeGetTimezoneStringFromID(int)>
c0008ff6:	83 c4 10             	add    esp,0x10
c0008ff9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008ffc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009000:	74 12                	je     c0009014 <KeSetTimezone(int)+0x2f>
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009008:	e8 7b ff ff ff       	call   c0008f88 <KeSetTimezone(char const*)>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	b0 01                	mov    al,0x1
c0009012:	eb 02                	jmp    c0009016 <KeSetTimezone(int)+0x31>
c0009014:	b0 00                	mov    al,0x0
c0009016:	c9                   	leave  
c0009017:	c3                   	ret    

c0009018 <KeLoadTimezone()>:
c0009018:	55                   	push   ebp
c0009019:	89 e5                	mov    ebp,esp
c000901b:	81 ec 68 02 00 00    	sub    esp,0x268
c0009021:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009028:	83 ec 0c             	sub    esp,0xc
c000902b:	68 14 36 02 c0       	push   0xc0023614
c0009030:	e8 8b 42 00 00       	call   c000d2c0 <CmOpen(char const*)>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000903b:	83 ec 08             	sub    esp,0x8
c000903e:	68 39 36 02 c0       	push   0xc0023639
c0009043:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009046:	e8 70 4e 00 00       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009051:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009055:	7e 18                	jle    c000906f <KeLoadTimezone()+0x57>
c0009057:	83 ec 04             	sub    esp,0x4
c000905a:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009060:	50                   	push   eax
c0009061:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009064:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009067:	e8 c4 43 00 00       	call   c000d430 <CmGetString(Reghive_Tag*, int, char*)>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	83 ec 0c             	sub    esp,0xc
c0009072:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009075:	e8 64 43 00 00       	call   c000d3de <CmClose(Reghive_Tag*)>
c000907a:	83 c4 10             	add    esp,0x10
c000907d:	83 ec 0c             	sub    esp,0xc
c0009080:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009086:	50                   	push   eax
c0009087:	e8 02 fe ff ff       	call   c0008e8e <KeUpdateTimezone(char const*)>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	90                   	nop
c0009090:	c9                   	leave  
c0009091:	c3                   	ret    

c0009092 <Clock::Clock(char const*)>:
c0009092:	83 ec 0c             	sub    esp,0xc
c0009095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009099:	83 ec 08             	sub    esp,0x8
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	50                   	push   eax
c00090a1:	e8 8e 0a 00 00       	call   c0009b34 <Device::Device(char const*)>
c00090a6:	83 c4 10             	add    esp,0x10
c00090a9:	ba 98 36 02 c0       	mov    edx,0xc0023698
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	89 10                	mov    DWORD PTR [eax],edx
c00090b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090c2:	90                   	nop
c00090c3:	83 c4 0c             	add    esp,0xc
c00090c6:	c3                   	ret    
c00090c7:	90                   	nop

c00090c8 <Clock::~Clock()>:
c00090c8:	83 ec 0c             	sub    esp,0xc
c00090cb:	ba 98 36 02 c0       	mov    edx,0xc0023698
c00090d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d4:	89 10                	mov    DWORD PTR [eax],edx
c00090d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090da:	83 ec 0c             	sub    esp,0xc
c00090dd:	50                   	push   eax
c00090de:	e8 f1 07 00 00       	call   c00098d4 <Device::~Device()>
c00090e3:	83 c4 10             	add    esp,0x10
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f6:	e8 cd ff ff ff       	call   c00090c8 <Clock::~Clock()>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	83 ec 08             	sub    esp,0x8
c0009101:	68 58 01 00 00       	push   0x158
c0009106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910a:	e8 5c 41 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	83 c4 0c             	add    esp,0xc
c0009115:	c3                   	ret    

c0009116 <Clock::timeInSecondsLocal()>:
c0009116:	55                   	push   ebp
c0009117:	89 e5                	mov    ebp,esp
c0009119:	53                   	push   ebx
c000911a:	83 ec 04             	sub    esp,0x4
c000911d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009120:	8b 00                	mov    eax,DWORD PTR [eax]
c0009122:	83 c0 24             	add    eax,0x24
c0009125:	8b 00                	mov    eax,DWORD PTR [eax]
c0009127:	83 ec 0c             	sub    esp,0xc
c000912a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000912d:	ff d0                	call   eax
c000912f:	83 c4 10             	add    esp,0x10
c0009132:	89 c1                	mov    ecx,eax
c0009134:	89 d3                	mov    ebx,edx
c0009136:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000913b:	0f b6 d0             	movzx  edx,al
c000913e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009143:	01 d0                	add    eax,edx
c0009145:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000914b:	89 c2                	mov    edx,eax
c000914d:	c1 fa 1f             	sar    edx,0x1f
c0009150:	01 c1                	add    ecx,eax
c0009152:	11 d3                	adc    ebx,edx
c0009154:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009159:	0f b6 c0             	movzx  eax,al
c000915c:	85 c0                	test   eax,eax
c000915e:	74 0c                	je     c000916c <Clock::timeInSecondsLocal()+0x56>
c0009160:	b8 08 07 00 00       	mov    eax,0x708
c0009165:	ba 00 00 00 00       	mov    edx,0x0
c000916a:	eb 0a                	jmp    c0009176 <Clock::timeInSecondsLocal()+0x60>
c000916c:	b8 00 00 00 00       	mov    eax,0x0
c0009171:	ba 00 00 00 00       	mov    edx,0x0
c0009176:	01 c8                	add    eax,ecx
c0009178:	11 da                	adc    edx,ebx
c000917a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000917d:	c9                   	leave  
c000917e:	c3                   	ret    
c000917f:	90                   	nop

c0009180 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009180:	55                   	push   ebp
c0009181:	89 e5                	mov    ebp,esp
c0009183:	56                   	push   esi
c0009184:	53                   	push   ebx
c0009185:	83 ec 10             	sub    esp,0x10
c0009188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000918b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000918e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009191:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009197:	8b 00                	mov    eax,DWORD PTR [eax]
c0009199:	83 c0 2c             	add    eax,0x2c
c000919c:	8b 30                	mov    esi,DWORD PTR [eax]
c000919e:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091a3:	0f b6 d0             	movzx  edx,al
c00091a6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091ab:	01 d0                	add    eax,edx
c00091ad:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091b3:	89 c2                	mov    edx,eax
c00091b5:	c1 fa 1f             	sar    edx,0x1f
c00091b8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091bb:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091be:	29 c1                	sub    ecx,eax
c00091c0:	19 d3                	sbb    ebx,edx
c00091c2:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00091c7:	0f b6 c0             	movzx  eax,al
c00091ca:	85 c0                	test   eax,eax
c00091cc:	74 0c                	je     c00091da <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091ce:	b8 08 07 00 00       	mov    eax,0x708
c00091d3:	ba 00 00 00 00       	mov    edx,0x0
c00091d8:	eb 0a                	jmp    c00091e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091da:	b8 00 00 00 00       	mov    eax,0x0
c00091df:	ba 00 00 00 00       	mov    edx,0x0
c00091e4:	29 c1                	sub    ecx,eax
c00091e6:	19 d3                	sbb    ebx,edx
c00091e8:	89 c8                	mov    eax,ecx
c00091ea:	89 da                	mov    edx,ebx
c00091ec:	83 ec 04             	sub    esp,0x4
c00091ef:	52                   	push   edx
c00091f0:	50                   	push   eax
c00091f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091f4:	ff d6                	call   esi
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091fc:	5b                   	pop    ebx
c00091fd:	5e                   	pop    esi
c00091fe:	5d                   	pop    ebp
c00091ff:	c3                   	ret    

c0009200 <KeDatetimeToSeconds(datetime_t)>:
c0009200:	55                   	push   ebp
c0009201:	89 e5                	mov    ebp,esp
c0009203:	53                   	push   ebx
c0009204:	83 ec 24             	sub    esp,0x24
c0009207:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000920b:	2d 6c 07 00 00       	sub    eax,0x76c
c0009210:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009214:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009217:	83 e8 01             	sub    eax,0x1
c000921a:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c000921d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009224:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000922b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009232:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009239:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c000923c:	0f b6 c8             	movzx  ecx,al
c000923f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009242:	0f b6 d0             	movzx  edx,al
c0009245:	89 d0                	mov    eax,edx
c0009247:	c1 e0 04             	shl    eax,0x4
c000924a:	29 d0                	sub    eax,edx
c000924c:	c1 e0 02             	shl    eax,0x2
c000924f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009252:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009255:	0f b6 c0             	movzx  eax,al
c0009258:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000925e:	01 d0                	add    eax,edx
c0009260:	89 c2                	mov    edx,eax
c0009262:	c1 fa 1f             	sar    edx,0x1f
c0009265:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009268:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000926b:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c000926e:	0f b6 c0             	movzx  eax,al
c0009271:	83 e8 01             	sub    eax,0x1
c0009274:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009277:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000927a:	0f b6 c0             	movzx  eax,al
c000927d:	8b 04 85 60 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9a0]
c0009284:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009287:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000928a:	0f b6 c0             	movzx  eax,al
c000928d:	83 f8 01             	cmp    eax,0x1
c0009290:	76 7c                	jbe    c000930e <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009292:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009296:	0f b7 c0             	movzx  eax,ax
c0009299:	83 e0 03             	and    eax,0x3
c000929c:	85 c0                	test   eax,eax
c000929e:	75 6e                	jne    c000930e <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092a0:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092a4:	0f b7 c8             	movzx  ecx,ax
c00092a7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092ac:	89 c8                	mov    eax,ecx
c00092ae:	f7 e2                	mul    edx
c00092b0:	c1 ea 05             	shr    edx,0x5
c00092b3:	89 d0                	mov    eax,edx
c00092b5:	c1 e0 02             	shl    eax,0x2
c00092b8:	01 d0                	add    eax,edx
c00092ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092c1:	01 d0                	add    eax,edx
c00092c3:	c1 e0 02             	shl    eax,0x2
c00092c6:	29 c1                	sub    ecx,eax
c00092c8:	89 c8                	mov    eax,ecx
c00092ca:	0f b7 c0             	movzx  eax,ax
c00092cd:	85 c0                	test   eax,eax
c00092cf:	75 39                	jne    c000930a <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092d1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092d5:	0f b7 c0             	movzx  eax,ax
c00092d8:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092de:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092e3:	f7 e9                	imul   ecx
c00092e5:	c1 fa 07             	sar    edx,0x7
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	c1 f8 1f             	sar    eax,0x1f
c00092ed:	29 c2                	sub    edx,eax
c00092ef:	89 d0                	mov    eax,edx
c00092f1:	c1 e0 02             	shl    eax,0x2
c00092f4:	01 d0                	add    eax,edx
c00092f6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092fd:	01 d0                	add    eax,edx
c00092ff:	c1 e0 04             	shl    eax,0x4
c0009302:	29 c1                	sub    ecx,eax
c0009304:	89 ca                	mov    edx,ecx
c0009306:	85 d2                	test   edx,edx
c0009308:	75 04                	jne    c000930e <KeDatetimeToSeconds(datetime_t)+0x10e>
c000930a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000930e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009312:	0f b7 c0             	movzx  eax,ax
c0009315:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009318:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000931b:	83 f8 46             	cmp    eax,0x46
c000931e:	0f 9f c0             	setg   al
c0009321:	0f b6 c0             	movzx  eax,al
c0009324:	85 c0                	test   eax,eax
c0009326:	0f 84 a4 00 00 00    	je     c00093d0 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c000932c:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009333:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009337:	0f b7 d0             	movzx  edx,ax
c000933a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933d:	39 c2                	cmp    edx,eax
c000933f:	0f 8e b8 01 00 00    	jle    c00094fd <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009345:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009348:	83 e0 03             	and    eax,0x3
c000934b:	85 c0                	test   eax,eax
c000934d:	75 6b                	jne    c00093ba <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000934f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009352:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009357:	f7 e9                	imul   ecx
c0009359:	c1 fa 05             	sar    edx,0x5
c000935c:	89 c8                	mov    eax,ecx
c000935e:	c1 f8 1f             	sar    eax,0x1f
c0009361:	29 c2                	sub    edx,eax
c0009363:	89 d0                	mov    eax,edx
c0009365:	c1 e0 02             	shl    eax,0x2
c0009368:	01 d0                	add    eax,edx
c000936a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009371:	01 d0                	add    eax,edx
c0009373:	c1 e0 02             	shl    eax,0x2
c0009376:	29 c1                	sub    ecx,eax
c0009378:	89 ca                	mov    edx,ecx
c000937a:	85 d2                	test   edx,edx
c000937c:	75 35                	jne    c00093b3 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c000937e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009381:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009387:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000938c:	f7 e9                	imul   ecx
c000938e:	c1 fa 07             	sar    edx,0x7
c0009391:	89 c8                	mov    eax,ecx
c0009393:	c1 f8 1f             	sar    eax,0x1f
c0009396:	29 c2                	sub    edx,eax
c0009398:	89 d0                	mov    eax,edx
c000939a:	c1 e0 02             	shl    eax,0x2
c000939d:	01 d0                	add    eax,edx
c000939f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093a6:	01 d0                	add    eax,edx
c00093a8:	c1 e0 04             	shl    eax,0x4
c00093ab:	29 c1                	sub    ecx,eax
c00093ad:	89 ca                	mov    edx,ecx
c00093af:	85 d2                	test   edx,edx
c00093b1:	75 07                	jne    c00093ba <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093b3:	b8 6e 01 00 00       	mov    eax,0x16e
c00093b8:	eb 05                	jmp    c00093bf <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093ba:	b8 6d 01 00 00       	mov    eax,0x16d
c00093bf:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093c5:	83 c0 01             	add    eax,0x1
c00093c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093cb:	e9 63 ff ff ff       	jmp    c0009333 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d3:	83 f8 45             	cmp    eax,0x45
c00093d6:	0f 8f 21 01 00 00    	jg     c00094fd <KeDatetimeToSeconds(datetime_t)+0x2fd>
c00093dc:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093e3:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093e7:	0f b7 d0             	movzx  edx,ax
c00093ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ed:	39 c2                	cmp    edx,eax
c00093ef:	0f 8d 8b 00 00 00    	jge    c0009480 <KeDatetimeToSeconds(datetime_t)+0x280>
c00093f5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f8:	83 e0 03             	and    eax,0x3
c00093fb:	85 c0                	test   eax,eax
c00093fd:	75 6b                	jne    c000946a <KeDatetimeToSeconds(datetime_t)+0x26a>
c00093ff:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009402:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009407:	f7 e9                	imul   ecx
c0009409:	c1 fa 05             	sar    edx,0x5
c000940c:	89 c8                	mov    eax,ecx
c000940e:	c1 f8 1f             	sar    eax,0x1f
c0009411:	29 c2                	sub    edx,eax
c0009413:	89 d0                	mov    eax,edx
c0009415:	c1 e0 02             	shl    eax,0x2
c0009418:	01 d0                	add    eax,edx
c000941a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009421:	01 d0                	add    eax,edx
c0009423:	c1 e0 02             	shl    eax,0x2
c0009426:	29 c1                	sub    ecx,eax
c0009428:	89 ca                	mov    edx,ecx
c000942a:	85 d2                	test   edx,edx
c000942c:	75 35                	jne    c0009463 <KeDatetimeToSeconds(datetime_t)+0x263>
c000942e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009431:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009437:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000943c:	f7 e9                	imul   ecx
c000943e:	c1 fa 07             	sar    edx,0x7
c0009441:	89 c8                	mov    eax,ecx
c0009443:	c1 f8 1f             	sar    eax,0x1f
c0009446:	29 c2                	sub    edx,eax
c0009448:	89 d0                	mov    eax,edx
c000944a:	c1 e0 02             	shl    eax,0x2
c000944d:	01 d0                	add    eax,edx
c000944f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009456:	01 d0                	add    eax,edx
c0009458:	c1 e0 04             	shl    eax,0x4
c000945b:	29 c1                	sub    ecx,eax
c000945d:	89 ca                	mov    edx,ecx
c000945f:	85 d2                	test   edx,edx
c0009461:	75 07                	jne    c000946a <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009463:	b8 6e 01 00 00       	mov    eax,0x16e
c0009468:	eb 05                	jmp    c000946f <KeDatetimeToSeconds(datetime_t)+0x26f>
c000946a:	b8 6d 01 00 00       	mov    eax,0x16d
c000946f:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009472:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009475:	83 e8 01             	sub    eax,0x1
c0009478:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000947b:	e9 63 ff ff ff       	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009480:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009483:	83 e0 03             	and    eax,0x3
c0009486:	85 c0                	test   eax,eax
c0009488:	75 6b                	jne    c00094f5 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c000948a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000948d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009492:	f7 e9                	imul   ecx
c0009494:	c1 fa 05             	sar    edx,0x5
c0009497:	89 c8                	mov    eax,ecx
c0009499:	c1 f8 1f             	sar    eax,0x1f
c000949c:	29 c2                	sub    edx,eax
c000949e:	89 d0                	mov    eax,edx
c00094a0:	c1 e0 02             	shl    eax,0x2
c00094a3:	01 d0                	add    eax,edx
c00094a5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094ac:	01 d0                	add    eax,edx
c00094ae:	c1 e0 02             	shl    eax,0x2
c00094b1:	29 c1                	sub    ecx,eax
c00094b3:	89 ca                	mov    edx,ecx
c00094b5:	85 d2                	test   edx,edx
c00094b7:	75 35                	jne    c00094ee <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094bc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094c2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094c7:	f7 e9                	imul   ecx
c00094c9:	c1 fa 07             	sar    edx,0x7
c00094cc:	89 c8                	mov    eax,ecx
c00094ce:	c1 f8 1f             	sar    eax,0x1f
c00094d1:	29 c2                	sub    edx,eax
c00094d3:	89 d0                	mov    eax,edx
c00094d5:	c1 e0 02             	shl    eax,0x2
c00094d8:	01 d0                	add    eax,edx
c00094da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094e1:	01 d0                	add    eax,edx
c00094e3:	c1 e0 04             	shl    eax,0x4
c00094e6:	29 c1                	sub    ecx,eax
c00094e8:	89 ca                	mov    edx,ecx
c00094ea:	85 d2                	test   edx,edx
c00094ec:	75 07                	jne    c00094f5 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ee:	b8 6e 01 00 00       	mov    eax,0x16e
c00094f3:	eb 05                	jmp    c00094fa <KeDatetimeToSeconds(datetime_t)+0x2fa>
c00094f5:	b8 6d 01 00 00       	mov    eax,0x16d
c00094fa:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009500:	89 c2                	mov    edx,eax
c0009502:	c1 fa 1f             	sar    edx,0x1f
c0009505:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000950b:	6b c8 00             	imul   ecx,eax,0x0
c000950e:	01 d9                	add    ecx,ebx
c0009510:	bb 80 51 01 00       	mov    ebx,0x15180
c0009515:	f7 e3                	mul    ebx
c0009517:	01 d1                	add    ecx,edx
c0009519:	89 ca                	mov    edx,ecx
c000951b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000951e:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009521:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009524:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009527:	83 c4 24             	add    esp,0x24
c000952a:	5b                   	pop    ebx
c000952b:	5d                   	pop    ebp
c000952c:	c3                   	ret    
c000952d:	90                   	nop

c000952e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000952e:	55                   	push   ebp
c000952f:	89 e5                	mov    ebp,esp
c0009531:	56                   	push   esi
c0009532:	53                   	push   ebx
c0009533:	83 ec 20             	sub    esp,0x20
c0009536:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009539:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000953c:	e8 bf fc ff ff       	call   c0009200 <KeDatetimeToSeconds(datetime_t)>
c0009541:	83 c4 08             	add    esp,0x8
c0009544:	89 c3                	mov    ebx,eax
c0009546:	89 d6                	mov    esi,edx
c0009548:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000954d:	0f b6 d0             	movzx  edx,al
c0009550:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009555:	01 d0                	add    eax,edx
c0009557:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000955d:	89 c2                	mov    edx,eax
c000955f:	c1 fa 1f             	sar    edx,0x1f
c0009562:	29 c3                	sub    ebx,eax
c0009564:	19 d6                	sbb    esi,edx
c0009566:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c000956b:	0f b6 c0             	movzx  eax,al
c000956e:	85 c0                	test   eax,eax
c0009570:	74 0c                	je     c000957e <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009572:	b8 08 07 00 00       	mov    eax,0x708
c0009577:	ba 00 00 00 00       	mov    edx,0x0
c000957c:	eb 0a                	jmp    c0009588 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c000957e:	b8 00 00 00 00       	mov    eax,0x0
c0009583:	ba 00 00 00 00       	mov    edx,0x0
c0009588:	29 c3                	sub    ebx,eax
c000958a:	19 d6                	sbb    esi,edx
c000958c:	89 d8                	mov    eax,ebx
c000958e:	89 f2                	mov    edx,esi
c0009590:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009593:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009596:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009599:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000959c:	89 d0                	mov    eax,edx
c000959e:	31 d2                	xor    edx,edx
c00095a0:	89 c3                	mov    ebx,eax
c00095a2:	89 d6                	mov    esi,edx
c00095a4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095a7:	80 e5 ff             	and    ch,0xff
c00095aa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095ad:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095b0:	83 e1 00             	and    ecx,0x0
c00095b3:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095b6:	83 ec 0c             	sub    esp,0xc
c00095b9:	56                   	push   esi
c00095ba:	53                   	push   ebx
c00095bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095be:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095c1:	68 4e 36 02 c0       	push   0xc002364e
c00095c6:	e8 83 d9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00095cb:	83 c4 20             	add    esp,0x20
c00095ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d3:	83 c0 2c             	add    eax,0x2c
c00095d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d8:	83 ec 04             	sub    esp,0x4
c00095db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095de:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095e4:	ff d0                	call   eax
c00095e6:	83 c4 10             	add    esp,0x10
c00095e9:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095ec:	5b                   	pop    ebx
c00095ed:	5e                   	pop    esi
c00095ee:	5d                   	pop    ebp
c00095ef:	c3                   	ret    

c00095f0 <KeSecondsToDatetime(unsigned long long)>:
c00095f0:	55                   	push   ebp
c00095f1:	89 e5                	mov    ebp,esp
c00095f3:	83 ec 48             	sub    esp,0x48
c00095f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095f9:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00095ff:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009602:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009605:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009608:	6a 00                	push   0x0
c000960a:	68 80 51 01 00       	push   0x15180
c000960f:	52                   	push   edx
c0009610:	50                   	push   eax
c0009611:	e8 fe 84 01 00       	call   c0021b14 <__udivdi3>
c0009616:	83 c4 10             	add    esp,0x10
c0009619:	05 6c fa 0a 00       	add    eax,0xafa6c
c000961e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009621:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009624:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009627:	6a 00                	push   0x0
c0009629:	68 80 51 01 00       	push   0x15180
c000962e:	52                   	push   edx
c000962f:	50                   	push   eax
c0009630:	e8 df 85 01 00       	call   c0021c14 <__umoddi3>
c0009635:	83 c4 10             	add    esp,0x10
c0009638:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000963b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000963f:	79 0b                	jns    c000964c <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009641:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009648:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000964c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000964f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009654:	89 c8                	mov    eax,ecx
c0009656:	f7 ea                	imul   edx
c0009658:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000965b:	c1 f8 0b             	sar    eax,0xb
c000965e:	89 c2                	mov    edx,eax
c0009660:	89 c8                	mov    eax,ecx
c0009662:	c1 f8 1f             	sar    eax,0x1f
c0009665:	29 c2                	sub    edx,eax
c0009667:	89 d0                	mov    eax,edx
c0009669:	88 c2                	mov    dl,al
c000966b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000966e:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009671:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009674:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009679:	89 c8                	mov    eax,ecx
c000967b:	f7 ea                	imul   edx
c000967d:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009680:	c1 f8 0b             	sar    eax,0xb
c0009683:	89 c2                	mov    edx,eax
c0009685:	89 c8                	mov    eax,ecx
c0009687:	c1 f8 1f             	sar    eax,0x1f
c000968a:	29 c2                	sub    edx,eax
c000968c:	89 d0                	mov    eax,edx
c000968e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009694:	29 c1                	sub    ecx,eax
c0009696:	89 c8                	mov    eax,ecx
c0009698:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000969b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000969e:	ba 89 88 88 88       	mov    edx,0x88888889
c00096a3:	89 c8                	mov    eax,ecx
c00096a5:	f7 ea                	imul   edx
c00096a7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096aa:	c1 f8 05             	sar    eax,0x5
c00096ad:	89 c2                	mov    edx,eax
c00096af:	89 c8                	mov    eax,ecx
c00096b1:	c1 f8 1f             	sar    eax,0x1f
c00096b4:	29 c2                	sub    edx,eax
c00096b6:	89 d0                	mov    eax,edx
c00096b8:	88 c2                	mov    dl,al
c00096ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096bd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096c0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c3:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c8:	89 c8                	mov    eax,ecx
c00096ca:	f7 ea                	imul   edx
c00096cc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096cf:	c1 f8 05             	sar    eax,0x5
c00096d2:	89 c2                	mov    edx,eax
c00096d4:	89 c8                	mov    eax,ecx
c00096d6:	c1 f8 1f             	sar    eax,0x1f
c00096d9:	29 c2                	sub    edx,eax
c00096db:	89 d0                	mov    eax,edx
c00096dd:	c1 e0 04             	shl    eax,0x4
c00096e0:	29 d0                	sub    eax,edx
c00096e2:	c1 e0 02             	shl    eax,0x2
c00096e5:	29 c1                	sub    ecx,eax
c00096e7:	89 ca                	mov    edx,ecx
c00096e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096ec:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c00096ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00096f3:	79 20                	jns    c0009715 <KeSecondsToDatetime(unsigned long long)+0x125>
c00096f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096f8:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c00096fe:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009703:	89 c8                	mov    eax,ecx
c0009705:	f7 ea                	imul   edx
c0009707:	c1 fa 0f             	sar    edx,0xf
c000970a:	89 c8                	mov    eax,ecx
c000970c:	c1 f8 1f             	sar    eax,0x1f
c000970f:	29 c2                	sub    edx,eax
c0009711:	89 d0                	mov    eax,edx
c0009713:	eb 18                	jmp    c000972d <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009715:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009718:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000971d:	89 c8                	mov    eax,ecx
c000971f:	f7 ea                	imul   edx
c0009721:	c1 fa 0f             	sar    edx,0xf
c0009724:	89 c8                	mov    eax,ecx
c0009726:	c1 f8 1f             	sar    eax,0x1f
c0009729:	29 c2                	sub    edx,eax
c000972b:	89 d0                	mov    eax,edx
c000972d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009730:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009733:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c0009739:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000973c:	01 d0                	add    eax,edx
c000973e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009741:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009744:	c1 e8 02             	shr    eax,0x2
c0009747:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000974c:	f7 e2                	mul    edx
c000974e:	c1 ea 07             	shr    edx,0x7
c0009751:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009754:	29 d0                	sub    eax,edx
c0009756:	89 c1                	mov    ecx,eax
c0009758:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000975b:	c1 e8 02             	shr    eax,0x2
c000975e:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009763:	f7 e2                	mul    edx
c0009765:	89 d0                	mov    eax,edx
c0009767:	c1 e8 0b             	shr    eax,0xb
c000976a:	01 c1                	add    ecx,eax
c000976c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000976f:	c1 e8 04             	shr    eax,0x4
c0009772:	ba 41 d6 72 00       	mov    edx,0x72d641
c0009777:	f7 e2                	mul    edx
c0009779:	89 d0                	mov    eax,edx
c000977b:	c1 e8 04             	shr    eax,0x4
c000977e:	29 c1                	sub    ecx,eax
c0009780:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009785:	89 c8                	mov    eax,ecx
c0009787:	f7 e2                	mul    edx
c0009789:	89 c8                	mov    eax,ecx
c000978b:	29 d0                	sub    eax,edx
c000978d:	d1 e8                	shr    eax,1
c000978f:	01 d0                	add    eax,edx
c0009791:	c1 e8 08             	shr    eax,0x8
c0009794:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009797:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000979a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000979f:	f7 e2                	mul    edx
c00097a1:	89 d1                	mov    ecx,edx
c00097a3:	c1 e9 05             	shr    ecx,0x5
c00097a6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097a9:	89 d0                	mov    eax,edx
c00097ab:	c1 e0 03             	shl    eax,0x3
c00097ae:	01 d0                	add    eax,edx
c00097b0:	c1 e0 03             	shl    eax,0x3
c00097b3:	01 d0                	add    eax,edx
c00097b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097bc:	01 c2                	add    edx,eax
c00097be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097c1:	c1 e8 02             	shr    eax,0x2
c00097c4:	01 d0                	add    eax,edx
c00097c6:	29 c1                	sub    ecx,eax
c00097c8:	89 ca                	mov    edx,ecx
c00097ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097cd:	01 d0                	add    eax,edx
c00097cf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097d2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097d5:	89 d0                	mov    eax,edx
c00097d7:	c1 e0 02             	shl    eax,0x2
c00097da:	01 d0                	add    eax,edx
c00097dc:	83 c0 02             	add    eax,0x2
c00097df:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c00097e4:	f7 e2                	mul    edx
c00097e6:	89 d0                	mov    eax,edx
c00097e8:	c1 e8 07             	shr    eax,0x7
c00097eb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00097ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00097f1:	89 d0                	mov    eax,edx
c00097f3:	c1 e0 03             	shl    eax,0x3
c00097f6:	01 d0                	add    eax,edx
c00097f8:	89 c2                	mov    edx,eax
c00097fa:	c1 e2 04             	shl    edx,0x4
c00097fd:	01 d0                	add    eax,edx
c00097ff:	83 c0 02             	add    eax,0x2
c0009802:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009807:	f7 e2                	mul    edx
c0009809:	c1 ea 02             	shr    edx,0x2
c000980c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000980f:	29 d0                	sub    eax,edx
c0009811:	83 c0 01             	add    eax,0x1
c0009814:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009817:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000981b:	77 07                	ja     c0009824 <KeSecondsToDatetime(unsigned long long)+0x234>
c000981d:	b8 02 00 00 00       	mov    eax,0x2
c0009822:	eb 05                	jmp    c0009829 <KeSecondsToDatetime(unsigned long long)+0x239>
c0009824:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009829:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000982c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000982f:	89 d0                	mov    eax,edx
c0009831:	c1 e0 02             	shl    eax,0x2
c0009834:	01 d0                	add    eax,edx
c0009836:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983d:	01 d0                	add    eax,edx
c000983f:	c1 e0 04             	shl    eax,0x4
c0009842:	89 c2                	mov    edx,eax
c0009844:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009847:	01 c2                	add    edx,eax
c0009849:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000984d:	0f 96 c0             	setbe  al
c0009850:	0f b6 c0             	movzx  eax,al
c0009853:	01 d0                	add    eax,edx
c0009855:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009858:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000985b:	89 c2                	mov    edx,eax
c000985d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009860:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009864:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009867:	83 c0 01             	add    eax,0x1
c000986a:	88 c2                	mov    dl,al
c000986c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000986f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009872:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009875:	88 c2                	mov    dl,al
c0009877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000987a:	88 10                	mov    BYTE PTR [eax],dl
c000987c:	90                   	nop
c000987d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009880:	c9                   	leave  
c0009881:	c2 04 00             	ret    0x4

c0009884 <Clock::timeInDatetimeLocal()>:
c0009884:	55                   	push   ebp
c0009885:	89 e5                	mov    ebp,esp
c0009887:	83 ec 08             	sub    esp,0x8
c000988a:	83 ec 0c             	sub    esp,0xc
c000988d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009890:	e8 81 f8 ff ff       	call   c0009116 <Clock::timeInSecondsLocal()>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000989b:	83 ec 04             	sub    esp,0x4
c000989e:	52                   	push   edx
c000989f:	50                   	push   eax
c00098a0:	51                   	push   ecx
c00098a1:	e8 4a fd ff ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c00098a6:	83 c4 0c             	add    esp,0xc
c00098a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ac:	c9                   	leave  
c00098ad:	c2 04 00             	ret    0x4

c00098b0 <Device::hibernate()>:
c00098b0:	c3                   	ret    
c00098b1:	90                   	nop

c00098b2 <Device::wake()>:
c00098b2:	c3                   	ret    
c00098b3:	90                   	nop

c00098b4 <Device::detect()>:
c00098b4:	c3                   	ret    
c00098b5:	90                   	nop

c00098b6 <Device::disableLegacy()>:
c00098b6:	c3                   	ret    
c00098b7:	90                   	nop

c00098b8 <Device::powerSaving(PowerSavingLevel)>:
c00098b8:	c3                   	ret    
c00098b9:	90                   	nop

c00098ba <DriverlessDevice::close(int, int, void*)>:
c00098ba:	31 c0                	xor    eax,eax
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <DriverlessDevice::detect()>:
c00098be:	c3                   	ret    
c00098bf:	90                   	nop

c00098c0 <DriverlessDevice::open(int, int, void*)>:
c00098c0:	83 ec 18             	sub    esp,0x18
c00098c3:	68 cc 36 02 c0       	push   0xc00236cc
c00098c8:	e8 81 65 00 00       	call   c000fe4e <KePanic(char const*)>
c00098cd:	83 c8 ff             	or     eax,0xffffffff
c00098d0:	83 c4 1c             	add    esp,0x1c
c00098d3:	c3                   	ret    

c00098d4 <Device::~Device()>:
c00098d4:	ba 70 37 02 c0       	mov    edx,0xc0023770
c00098d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098dd:	89 10                	mov    DWORD PTR [eax],edx
c00098df:	90                   	nop
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <Device::~Device()>:
c00098e2:	83 ec 0c             	sub    esp,0xc
c00098e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00098e9:	e8 e6 ff ff ff       	call   c00098d4 <Device::~Device()>
c00098ee:	83 c4 04             	add    esp,0x4
c00098f1:	83 ec 08             	sub    esp,0x8
c00098f4:	68 58 01 00 00       	push   0x158
c00098f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098fd:	e8 69 39 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0009902:	83 c4 10             	add    esp,0x10
c0009905:	83 c4 0c             	add    esp,0xc
c0009908:	c3                   	ret    
c0009909:	90                   	nop

c000990a <Device::findAndLoadDriver()>:
c000990a:	c7 44 24 04 ea 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236ea
c0009912:	e9 37 d6 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0009917:	90                   	nop

c0009918 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009918:	57                   	push   edi
c0009919:	b9 09 00 00 00       	mov    ecx,0x9
c000991e:	56                   	push   esi
c000991f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009923:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009927:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009931:	81 c7 18 01 00 00    	add    edi,0x118
c0009937:	fc                   	cld    
c0009938:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000993a:	5e                   	pop    esi
c000993b:	5f                   	pop    edi
c000993c:	c3                   	ret    
c000993d:	90                   	nop

c000993e <Device::preOpenACPI(void*, char*, char*)>:
c000993e:	57                   	push   edi
c000993f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009944:	56                   	push   esi
c0009945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000994d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009951:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000995b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009961:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009967:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009969:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000996f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009973:	b9 0e 00 00 00       	mov    ecx,0xe
c0009978:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000997a:	5e                   	pop    esi
c000997b:	5f                   	pop    edi
c000997c:	c3                   	ret    
c000997d:	90                   	nop

c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000997e:	53                   	push   ebx
c000997f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009983:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009987:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000998b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000998f:	0f b6 c0             	movzx  eax,al
c0009992:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000999a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000999e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099a2:	5b                   	pop    ebx
c00099a3:	e9 29 0e 01 00       	jmp    c001a7d1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099a8 <Device::getParent()>:
c00099a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099ac:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099b2:	c3                   	ret    
c00099b3:	90                   	nop

c00099b4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099bc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099c5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099cd:	e9 70 0f 01 00       	jmp    c001a942 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099d2 <Device::addChild(Device*)>:
c00099d2:	53                   	push   ebx
c00099d3:	83 ec 08             	sub    esp,0x8
c00099d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099de:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00099e4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00099ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c00099ec:	85 d2                	test   edx,edx
c00099ee:	74 04                	je     c00099f4 <Device::addChild(Device*)+0x22>
c00099f0:	89 d3                	mov    ebx,edx
c00099f2:	eb f6                	jmp    c00099ea <Device::addChild(Device*)+0x18>
c00099f4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00099f7:	83 ec 0c             	sub    esp,0xc
c00099fa:	6a 08                	push   0x8
c00099fc:	e8 07 61 00 00       	call   c000fb08 <malloc>
c0009a01:	89 03                	mov    DWORD PTR [ebx],eax
c0009a03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a10:	83 c4 18             	add    esp,0x18
c0009a13:	5b                   	pop    ebx
c0009a14:	c3                   	ret    
c0009a15:	90                   	nop

c0009a16 <Device::removeAllChildren()>:
c0009a16:	56                   	push   esi
c0009a17:	53                   	push   ebx
c0009a18:	52                   	push   edx
c0009a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a1d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a26:	74 17                	je     c0009a3f <Device::removeAllChildren()+0x29>
c0009a28:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a2b:	85 c0                	test   eax,eax
c0009a2d:	74 0c                	je     c0009a3b <Device::removeAllChildren()+0x25>
c0009a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a31:	83 ec 0c             	sub    esp,0xc
c0009a34:	50                   	push   eax
c0009a35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a38:	83 c4 10             	add    esp,0x10
c0009a3b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a3d:	eb e4                	jmp    c0009a23 <Device::removeAllChildren()+0xd>
c0009a3f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a4b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a58:	58                   	pop    eax
c0009a59:	5b                   	pop    ebx
c0009a5a:	5e                   	pop    esi
c0009a5b:	c3                   	ret    

c0009a5c <Device::hibernateAll()>:
c0009a5c:	53                   	push   ebx
c0009a5d:	83 ec 14             	sub    esp,0x14
c0009a60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a66:	53                   	push   ebx
c0009a67:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a70:	83 c4 10             	add    esp,0x10
c0009a73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a76:	74 0f                	je     c0009a87 <Device::hibernateAll()+0x2b>
c0009a78:	83 ec 0c             	sub    esp,0xc
c0009a7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a7e:	e8 d9 ff ff ff       	call   c0009a5c <Device::hibernateAll()>
c0009a83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a85:	eb e9                	jmp    c0009a70 <Device::hibernateAll()+0x14>
c0009a87:	83 c4 08             	add    esp,0x8
c0009a8a:	5b                   	pop    ebx
c0009a8b:	c3                   	ret    

c0009a8c <Device::wakeAll()>:
c0009a8c:	53                   	push   ebx
c0009a8d:	83 ec 14             	sub    esp,0x14
c0009a90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a96:	53                   	push   ebx
c0009a97:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009a9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009aa0:	83 c4 10             	add    esp,0x10
c0009aa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa6:	74 0f                	je     c0009ab7 <Device::wakeAll()+0x2b>
c0009aa8:	83 ec 0c             	sub    esp,0xc
c0009aab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aae:	e8 d9 ff ff ff       	call   c0009a8c <Device::wakeAll()>
c0009ab3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ab5:	eb e9                	jmp    c0009aa0 <Device::wakeAll()+0x14>
c0009ab7:	83 c4 08             	add    esp,0x8
c0009aba:	5b                   	pop    ebx
c0009abb:	c3                   	ret    

c0009abc <Device::detectAll()>:
c0009abc:	53                   	push   ebx
c0009abd:	83 ec 14             	sub    esp,0x14
c0009ac0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac6:	53                   	push   ebx
c0009ac7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ad0:	83 c4 10             	add    esp,0x10
c0009ad3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad6:	74 0f                	je     c0009ae7 <Device::detectAll()+0x2b>
c0009ad8:	83 ec 0c             	sub    esp,0xc
c0009adb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ade:	e8 d9 ff ff ff       	call   c0009abc <Device::detectAll()>
c0009ae3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ae5:	eb e9                	jmp    c0009ad0 <Device::detectAll()+0x14>
c0009ae7:	83 c4 08             	add    esp,0x8
c0009aea:	5b                   	pop    ebx
c0009aeb:	c3                   	ret    

c0009aec <Device::disableLegacyAll()>:
c0009aec:	c3                   	ret    
c0009aed:	90                   	nop

c0009aee <Device::loadDriversForAll()>:
c0009aee:	c3                   	ret    
c0009aef:	90                   	nop

c0009af0 <Device::powerSavingAll(PowerSavingLevel)>:
c0009af0:	56                   	push   esi
c0009af1:	53                   	push   ebx
c0009af2:	83 ec 0c             	sub    esp,0xc
c0009af5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009af9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009afd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aff:	56                   	push   esi
c0009b00:	53                   	push   ebx
c0009b01:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b0a:	83 c4 10             	add    esp,0x10
c0009b0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b10:	74 0f                	je     c0009b21 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b12:	52                   	push   edx
c0009b13:	52                   	push   edx
c0009b14:	56                   	push   esi
c0009b15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b18:	e8 d3 ff ff ff       	call   c0009af0 <Device::powerSavingAll(PowerSavingLevel)>
c0009b1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b1f:	eb e9                	jmp    c0009b0a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b21:	58                   	pop    eax
c0009b22:	5b                   	pop    ebx
c0009b23:	5e                   	pop    esi
c0009b24:	c3                   	ret    
c0009b25:	90                   	nop

c0009b26 <Device::setName(char const*)>:
c0009b26:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b2e:	e9 1d 6b ff ff       	jmp    c0000650 <strcpy>
c0009b33:	90                   	nop

c0009b34 <Device::Device(char const*)>:
c0009b34:	83 ec 1c             	sub    esp,0x1c
c0009b37:	ba 70 37 02 c0       	mov    edx,0xc0023770
c0009b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b40:	89 10                	mov    DWORD PTR [eax],edx
c0009b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b46:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b54:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b62:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b70:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b7a:	83 ec 08             	sub    esp,0x8
c0009b7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b85:	e8 9c ff ff ff       	call   c0009b26 <Device::setName(char const*)>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009b95:	83 ec 0c             	sub    esp,0xc
c0009b98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009b9c:	e8 67 5f 00 00       	call   c000fb08 <malloc>
c0009ba1:	83 c4 10             	add    esp,0x10
c0009ba4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009baa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bb5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bbf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bc5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bcf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009beb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c12:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c20:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c2a:	90                   	nop
c0009c2b:	83 c4 1c             	add    esp,0x1c
c0009c2e:	c3                   	ret    
c0009c2f:	90                   	nop

c0009c30 <Device::getName()>:
c0009c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c34:	05 d0 00 00 00       	add    eax,0xd0
c0009c39:	c3                   	ret    

c0009c3a <Device::closeAll()>:
c0009c3a:	53                   	push   ebx
c0009c3b:	83 ec 08             	sub    esp,0x8
c0009c3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c42:	53                   	push   ebx
c0009c43:	e8 e8 ff ff ff       	call   c0009c30 <Device::getName()>
c0009c48:	52                   	push   edx
c0009c49:	50                   	push   eax
c0009c4a:	68 24 37 02 c0       	push   0xc0023724
c0009c4f:	e8 fa d2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009c54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c56:	6a 00                	push   0x0
c0009c58:	6a 00                	push   0x0
c0009c5a:	6a 00                	push   0x0
c0009c5c:	53                   	push   ebx
c0009c5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c66:	83 c4 20             	add    esp,0x20
c0009c69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c6c:	74 12                	je     c0009c80 <Device::closeAll()+0x46>
c0009c6e:	83 ec 0c             	sub    esp,0xc
c0009c71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c74:	e8 c1 ff ff ff       	call   c0009c3a <Device::closeAll()>
c0009c79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c7b:	83 c4 10             	add    esp,0x10
c0009c7e:	eb e9                	jmp    c0009c69 <Device::closeAll()+0x2f>
c0009c80:	83 c4 08             	add    esp,0x8
c0009c83:	5b                   	pop    ebx
c0009c84:	c3                   	ret    
c0009c85:	90                   	nop

c0009c86 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009c86:	83 ec 0c             	sub    esp,0xc
c0009c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8d:	83 ec 08             	sub    esp,0x8
c0009c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c94:	50                   	push   eax
c0009c95:	e8 9a fe ff ff       	call   c0009b34 <Device::Device(char const*)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c0009ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca6:	89 10                	mov    DWORD PTR [eax],edx
c0009ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cb6:	90                   	nop
c0009cb7:	83 c4 0c             	add    esp,0xc
c0009cba:	c3                   	ret    
c0009cbb:	90                   	nop

c0009cbc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009cbc:	57                   	push   edi
c0009cbd:	56                   	push   esi
c0009cbe:	53                   	push   ebx
c0009cbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009cc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009ccb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cd1:	75 0c                	jne    c0009cdf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cd3:	52                   	push   edx
c0009cd4:	52                   	push   edx
c0009cd5:	53                   	push   ebx
c0009cd6:	56                   	push   esi
c0009cd7:	e8 b0 80 01 00       	call   c0021d8c <LinkedList<Device>::addElement(Device*)>
c0009cdc:	83 c4 10             	add    esp,0x10
c0009cdf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ce8:	74 12                	je     c0009cfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009cea:	50                   	push   eax
c0009ceb:	57                   	push   edi
c0009cec:	56                   	push   esi
c0009ced:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf0:	e8 c7 ff ff ff       	call   c0009cbc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009cf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cf7:	83 c4 10             	add    esp,0x10
c0009cfa:	eb e9                	jmp    c0009ce5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009cfc:	5b                   	pop    ebx
c0009cfd:	5e                   	pop    esi
c0009cfe:	5f                   	pop    edi
c0009cff:	c3                   	ret    

c0009d00 <getDevicesOfType(DeviceType)>:
c0009d00:	53                   	push   ebx
c0009d01:	83 ec 14             	sub    esp,0x14
c0009d04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d08:	53                   	push   ebx
c0009d09:	e8 5a 81 01 00       	call   c0021e68 <LinkedList<Device>::LinkedList()>
c0009d0e:	83 c4 0c             	add    esp,0xc
c0009d11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d15:	53                   	push   ebx
c0009d16:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c0009d1c:	e8 9b ff ff ff       	call   c0009cbc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d21:	83 c4 18             	add    esp,0x18
c0009d24:	89 d8                	mov    eax,ebx
c0009d26:	5b                   	pop    ebx
c0009d27:	c2 04 00             	ret    0x4
c0009d2a:	66 90                	xchg   ax,ax

c0009d2c <HardDiskController::HardDiskController(char const*)>:
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d3a:	50                   	push   eax
c0009d3b:	e8 f4 fd ff ff       	call   c0009b34 <Device::Device(char const*)>
c0009d40:	83 c4 10             	add    esp,0x10
c0009d43:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c0009d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d4c:	89 10                	mov    DWORD PTR [eax],edx
c0009d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d52:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d5c:	90                   	nop
c0009d5d:	83 c4 0c             	add    esp,0xc
c0009d60:	c3                   	ret    
c0009d61:	90                   	nop
c0009d62:	66 90                	xchg   ax,ax

c0009d64 <HardDiskController::~HardDiskController()>:
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	83 ec 0c             	sub    esp,0xc
c0009d79:	50                   	push   eax
c0009d7a:	e8 55 fb ff ff       	call   c00098d4 <Device::~Device()>
c0009d7f:	83 c4 10             	add    esp,0x10
c0009d82:	90                   	nop
c0009d83:	83 c4 0c             	add    esp,0xc
c0009d86:	c3                   	ret    
c0009d87:	90                   	nop

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	83 ec 0c             	sub    esp,0xc
c0009d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d92:	e8 cd ff ff ff       	call   c0009d64 <HardDiskController::~HardDiskController()>
c0009d97:	83 c4 10             	add    esp,0x10
c0009d9a:	83 ec 08             	sub    esp,0x8
c0009d9d:	68 58 01 00 00       	push   0x158
c0009da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da6:	e8 c0 34 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	83 c4 0c             	add    esp,0xc
c0009db1:	c3                   	ret    

c0009db2 <PhysicalDisk::eject()>:
c0009db2:	83 c8 ff             	or     eax,0xffffffff
c0009db5:	c3                   	ret    

c0009db6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009db6:	83 ec 0c             	sub    esp,0xc
c0009db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dbd:	83 ec 08             	sub    esp,0x8
c0009dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc4:	50                   	push   eax
c0009dc5:	e8 6a fd ff ff       	call   c0009b34 <Device::Device(char const*)>
c0009dca:	83 c4 10             	add    esp,0x10
c0009dcd:	ba f4 37 02 c0       	mov    edx,0xc00237f4
c0009dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd6:	89 10                	mov    DWORD PTR [eax],edx
c0009dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ddc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e04:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e18:	90                   	nop
c0009e19:	83 c4 0c             	add    esp,0xc
c0009e1c:	c3                   	ret    
c0009e1d:	90                   	nop

c0009e1e <PhysicalDisk::startCache()>:
c0009e1e:	56                   	push   esi
c0009e1f:	53                   	push   ebx
c0009e20:	83 ec 10             	sub    esp,0x10
c0009e23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e27:	6a 44                	push   0x44
c0009e29:	e8 da 5c 00 00       	call   c000fb08 <malloc>
c0009e2e:	89 c6                	mov    esi,eax
c0009e30:	58                   	pop    eax
c0009e31:	5a                   	pop    edx
c0009e32:	53                   	push   ebx
c0009e33:	56                   	push   esi
c0009e34:	e8 d3 13 00 00       	call   c000b20c <VCache::VCache(PhysicalDisk*)>
c0009e39:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e3f:	83 c4 14             	add    esp,0x14
c0009e42:	5b                   	pop    ebx
c0009e43:	5e                   	pop    esi
c0009e44:	c3                   	ret    
c0009e45:	90                   	nop

c0009e46 <PhysicalDisk::~PhysicalDisk()>:
c0009e46:	83 ec 0c             	sub    esp,0xc
c0009e49:	ba f4 37 02 c0       	mov    edx,0xc00237f4
c0009e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e52:	89 10                	mov    DWORD PTR [eax],edx
c0009e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e58:	83 ec 0c             	sub    esp,0xc
c0009e5b:	50                   	push   eax
c0009e5c:	e8 73 fa ff ff       	call   c00098d4 <Device::~Device()>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	90                   	nop
c0009e65:	83 c4 0c             	add    esp,0xc
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	83 ec 0c             	sub    esp,0xc
c0009e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e74:	e8 cd ff ff ff       	call   c0009e46 <PhysicalDisk::~PhysicalDisk()>
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	83 ec 08             	sub    esp,0x8
c0009e7f:	68 6c 01 00 00       	push   0x16c
c0009e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e88:	e8 de 33 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c0009e8d:	83 c4 10             	add    esp,0x10
c0009e90:	83 c4 0c             	add    esp,0xc
c0009e93:	c3                   	ret    

c0009e94 <startGUI(void*)>:
c0009e94:	55                   	push   ebp
c0009e95:	89 e5                	mov    ebp,esp
c0009e97:	53                   	push   ebx
c0009e98:	83 ec 04             	sub    esp,0x4
c0009e9b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009ea3:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009ea8:	85 c0                	test   eax,eax
c0009eaa:	75 01                	jne    c0009ead <startGUI(void*)+0x19>
c0009eac:	fb                   	sti    
c0009ead:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009eb3:	83 ec 08             	sub    esp,0x8
c0009eb6:	6a 01                	push   0x1
c0009eb8:	68 24 38 02 c0       	push   0xc0023824
c0009ebd:	e8 e8 c5 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c0009ec2:	83 c4 10             	add    esp,0x10
c0009ec5:	83 ec 08             	sub    esp,0x8
c0009ec8:	53                   	push   ebx
c0009ec9:	50                   	push   eax
c0009eca:	e8 3c c8 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c0009ecf:	83 c4 10             	add    esp,0x10
c0009ed2:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009ed8:	83 ec 08             	sub    esp,0x8
c0009edb:	6a 01                	push   0x1
c0009edd:	68 3e 38 02 c0       	push   0xc002383e
c0009ee2:	e8 c3 c5 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c0009ee7:	83 c4 10             	add    esp,0x10
c0009eea:	83 ec 08             	sub    esp,0x8
c0009eed:	53                   	push   ebx
c0009eee:	50                   	push   eax
c0009eef:	e8 17 c8 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	eb fe                	jmp    c0009ef7 <startGUI(void*)+0x63>

c0009ef9 <startGUIVESA(void*)>:
c0009ef9:	55                   	push   ebp
c0009efa:	89 e5                	mov    ebp,esp
c0009efc:	53                   	push   ebx
c0009efd:	83 ec 04             	sub    esp,0x4
c0009f00:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f08:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f0d:	85 c0                	test   eax,eax
c0009f0f:	75 01                	jne    c0009f12 <startGUIVESA(void*)+0x19>
c0009f11:	fb                   	sti    
c0009f12:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f18:	83 ec 08             	sub    esp,0x8
c0009f1b:	6a 01                	push   0x1
c0009f1d:	68 5c 38 02 c0       	push   0xc002385c
c0009f22:	e8 83 c5 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	83 ec 08             	sub    esp,0x8
c0009f2d:	53                   	push   ebx
c0009f2e:	50                   	push   eax
c0009f2f:	e8 d7 c7 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c0009f34:	83 c4 10             	add    esp,0x10
c0009f37:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f3d:	83 ec 08             	sub    esp,0x8
c0009f40:	6a 01                	push   0x1
c0009f42:	68 3e 38 02 c0       	push   0xc002383e
c0009f47:	e8 5e c5 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	83 ec 08             	sub    esp,0x8
c0009f52:	53                   	push   ebx
c0009f53:	50                   	push   eax
c0009f54:	e8 b2 c7 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	eb fe                	jmp    c0009f5c <startGUIVESA(void*)+0x63>

c0009f5e <sendKeyToTerminal(unsigned char)>:
c0009f5e:	55                   	push   ebp
c0009f5f:	89 e5                	mov    ebp,esp
c0009f61:	83 ec 28             	sub    esp,0x28
c0009f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f6a:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0009f6f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f73:	83 ec 08             	sub    esp,0x8
c0009f76:	52                   	push   edx
c0009f77:	50                   	push   eax
c0009f78:	e8 73 8a 00 00       	call   c00129f0 <VgaText::receiveKey(unsigned char)>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f84:	83 f8 0a             	cmp    eax,0xa
c0009f87:	74 16                	je     c0009f9f <sendKeyToTerminal(unsigned char)+0x41>
c0009f89:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f8d:	83 f8 03             	cmp    eax,0x3
c0009f90:	74 0d                	je     c0009f9f <sendKeyToTerminal(unsigned char)+0x41>
c0009f92:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f96:	83 f8 1c             	cmp    eax,0x1c
c0009f99:	0f 85 92 00 00 00    	jne    c000a031 <sendKeyToTerminal(unsigned char)+0xd3>
c0009f9f:	fa                   	cli    
c0009fa0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009fa5:	83 c0 01             	add    eax,0x1
c0009fa8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0009fad:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0009fb2:	83 c0 01             	add    eax,0x1
c0009fb5:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0009fba:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0009fbf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fc2:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c0009fcc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009fd0:	74 1f                	je     c0009ff1 <sendKeyToTerminal(unsigned char)+0x93>
c0009fd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009fd5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fe1:	83 ec 0c             	sub    esp,0xc
c0009fe4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009fe7:	e8 b4 d3 00 00       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0009fec:	83 c4 10             	add    esp,0x10
c0009fef:	eb db                	jmp    c0009fcc <sendKeyToTerminal(unsigned char)+0x6e>
c0009ff1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0009ff6:	83 e8 01             	sub    eax,0x1
c0009ff9:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0009ffe:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a003:	85 c0                	test   eax,eax
c000a005:	75 18                	jne    c000a01f <sendKeyToTerminal(unsigned char)+0xc1>
c000a007:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c000a00c:	85 c0                	test   eax,eax
c000a00e:	74 0f                	je     c000a01f <sendKeyToTerminal(unsigned char)+0xc1>
c000a010:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000a01a:	e8 29 d0 00 00       	call   c0017048 <schedule()>
c000a01f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a027:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a02c:	85 c0                	test   eax,eax
c000a02e:	75 01                	jne    c000a031 <sendKeyToTerminal(unsigned char)+0xd3>
c000a030:	fb                   	sti    
c000a031:	90                   	nop
c000a032:	c9                   	leave  
c000a033:	c3                   	ret    

c000a034 <sendKeyboardToken(KeyboardToken)>:
c000a034:	55                   	push   ebp
c000a035:	89 e5                	mov    ebp,esp
c000a037:	83 ec 18             	sub    esp,0x18
c000a03a:	e8 3a 67 00 00       	call   c0010779 <KeUserIOReceived()>
c000a03f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a045:	0f b7 c0             	movzx  eax,ax
c000a048:	83 f2 01             	xor    edx,0x1
c000a04b:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a051:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a056:	85 c0                	test   eax,eax
c000a058:	74 24                	je     c000a07e <sendKeyboardToken(KeyboardToken)+0x4a>
c000a05a:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a060:	83 ec 04             	sub    esp,0x4
c000a063:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a068:	83 ec 08             	sub    esp,0x8
c000a06b:	89 e0                	mov    eax,esp
c000a06d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a070:	89 08                	mov    DWORD PTR [eax],ecx
c000a072:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a075:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a079:	ff d2                	call   edx
c000a07b:	83 c4 10             	add    esp,0x10
c000a07e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a082:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a085:	0f b6 c0             	movzx  eax,al
c000a088:	85 c0                	test   eax,eax
c000a08a:	0f 84 da 00 00 00    	je     c000a16a <sendKeyboardToken(KeyboardToken)+0x136>
c000a090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a093:	0f b7 c0             	movzx  eax,ax
c000a096:	3d 18 03 00 00       	cmp    eax,0x318
c000a09b:	75 06                	jne    c000a0a3 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a09d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a6:	0f b7 c0             	movzx  eax,ax
c000a0a9:	3d 19 03 00 00       	cmp    eax,0x319
c000a0ae:	75 06                	jne    c000a0b6 <sendKeyboardToken(KeyboardToken)+0x82>
c000a0b0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b9:	0f b7 c0             	movzx  eax,ax
c000a0bc:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0c1:	75 06                	jne    c000a0c9 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0c3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cc:	0f b7 c0             	movzx  eax,ax
c000a0cf:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0d4:	75 06                	jne    c000a0dc <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0d6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0df:	0f b7 c0             	movzx  eax,ax
c000a0e2:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0e7:	75 06                	jne    c000a0ef <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0e9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f2:	0f b7 c0             	movzx  eax,ax
c000a0f5:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0fa:	75 06                	jne    c000a102 <sendKeyboardToken(KeyboardToken)+0xce>
c000a0fc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a105:	0f b7 c0             	movzx  eax,ax
c000a108:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a10d:	75 06                	jne    c000a115 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a10f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a118:	0f b7 c0             	movzx  eax,ax
c000a11b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a120:	75 06                	jne    c000a128 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a122:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12b:	0f b7 c0             	movzx  eax,ax
c000a12e:	3d 20 03 00 00       	cmp    eax,0x320
c000a133:	75 06                	jne    c000a13b <sendKeyboardToken(KeyboardToken)+0x107>
c000a135:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a13b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13e:	0f b7 c0             	movzx  eax,ax
c000a141:	3d 21 03 00 00       	cmp    eax,0x321
c000a146:	75 06                	jne    c000a14e <sendKeyboardToken(KeyboardToken)+0x11a>
c000a148:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a14e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a151:	0f b7 c0             	movzx  eax,ax
c000a154:	3d 22 03 00 00       	cmp    eax,0x322
c000a159:	0f 85 f1 00 00 00    	jne    c000a250 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a15f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a165:	e9 e6 00 00 00       	jmp    c000a250 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a16a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a16d:	0f b7 c0             	movzx  eax,ax
c000a170:	3d 18 03 00 00       	cmp    eax,0x318
c000a175:	75 0a                	jne    c000a181 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a177:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a17d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a184:	0f b7 c0             	movzx  eax,ax
c000a187:	3d 19 03 00 00       	cmp    eax,0x319
c000a18c:	75 0a                	jne    c000a198 <sendKeyboardToken(KeyboardToken)+0x164>
c000a18e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a194:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a19b:	0f b7 c0             	movzx  eax,ax
c000a19e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1a3:	75 0a                	jne    c000a1af <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1a5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1b2:	0f b7 c0             	movzx  eax,ax
c000a1b5:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1ba:	75 0a                	jne    c000a1c6 <sendKeyboardToken(KeyboardToken)+0x192>
c000a1bc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c9:	0f b7 c0             	movzx  eax,ax
c000a1cc:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1d1:	75 0a                	jne    c000a1dd <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1d3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e0:	0f b7 c0             	movzx  eax,ax
c000a1e3:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1e8:	75 0a                	jne    c000a1f4 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f7:	0f b7 c0             	movzx  eax,ax
c000a1fa:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1ff:	75 0a                	jne    c000a20b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a201:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a207:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a20e:	0f b7 c0             	movzx  eax,ax
c000a211:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a216:	75 0a                	jne    c000a222 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a218:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a21e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a225:	0f b7 c0             	movzx  eax,ax
c000a228:	3d 20 03 00 00       	cmp    eax,0x320
c000a22d:	75 0a                	jne    c000a239 <sendKeyboardToken(KeyboardToken)+0x205>
c000a22f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a235:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a23c:	0f b7 c0             	movzx  eax,ax
c000a23f:	3d 21 03 00 00       	cmp    eax,0x321
c000a244:	75 0a                	jne    c000a250 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a246:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a24c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a253:	0f b7 c0             	movzx  eax,ax
c000a256:	3d 00 02 00 00       	cmp    eax,0x200
c000a25b:	75 2f                	jne    c000a28c <sendKeyboardToken(KeyboardToken)+0x258>
c000a25d:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a262:	83 f0 01             	xor    eax,0x1
c000a265:	0f b6 c0             	movzx  eax,al
c000a268:	85 c0                	test   eax,eax
c000a26a:	74 20                	je     c000a28c <sendKeyboardToken(KeyboardToken)+0x258>
c000a26c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a271:	6a 01                	push   0x1
c000a273:	6a 00                	push   0x0
c000a275:	68 94 9e 00 c0       	push   0xc0009e94
c000a27a:	50                   	push   eax
c000a27b:	e8 20 cb 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a28a:	eb 3a                	jmp    c000a2c6 <sendKeyboardToken(KeyboardToken)+0x292>
c000a28c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28f:	0f b7 c0             	movzx  eax,ax
c000a292:	3d 01 02 00 00       	cmp    eax,0x201
c000a297:	75 2d                	jne    c000a2c6 <sendKeyboardToken(KeyboardToken)+0x292>
c000a299:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a29e:	83 f0 01             	xor    eax,0x1
c000a2a1:	0f b6 c0             	movzx  eax,al
c000a2a4:	85 c0                	test   eax,eax
c000a2a6:	74 1e                	je     c000a2c6 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2a8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a2ad:	6a 01                	push   0x1
c000a2af:	6a 00                	push   0x0
c000a2b1:	68 f9 9e 00 c0       	push   0xc0009ef9
c000a2b6:	50                   	push   eax
c000a2b7:	e8 e4 ca 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c000a2bc:	83 c4 10             	add    esp,0x10
c000a2bf:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2c9:	0f b7 c0             	movzx  eax,ax
c000a2cc:	3d 25 03 00 00       	cmp    eax,0x325
c000a2d1:	75 06                	jne    c000a2d9 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2d3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2dc:	0f b7 c0             	movzx  eax,ax
c000a2df:	3d 24 03 00 00       	cmp    eax,0x324
c000a2e4:	75 06                	jne    c000a2ec <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2e6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ef:	0f b7 c0             	movzx  eax,ax
c000a2f2:	3d 23 03 00 00       	cmp    eax,0x323
c000a2f7:	75 06                	jne    c000a2ff <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2f9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a302:	0f b7 c0             	movzx  eax,ax
c000a305:	3d 26 03 00 00       	cmp    eax,0x326
c000a30a:	75 06                	jne    c000a312 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a30c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a315:	0f b7 c0             	movzx  eax,ax
c000a318:	3d 27 03 00 00       	cmp    eax,0x327
c000a31d:	75 06                	jne    c000a325 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a31f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a328:	0f b7 c0             	movzx  eax,ax
c000a32b:	3d 22 03 00 00       	cmp    eax,0x322
c000a330:	75 06                	jne    c000a338 <sendKeyboardToken(KeyboardToken)+0x304>
c000a332:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a338:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a33c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a33f:	83 f0 01             	xor    eax,0x1
c000a342:	0f b6 c0             	movzx  eax,al
c000a345:	85 c0                	test   eax,eax
c000a347:	74 7c                	je     c000a3c5 <sendKeyboardToken(KeyboardToken)+0x391>
c000a349:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a34e:	0f b6 c0             	movzx  eax,al
c000a351:	85 c0                	test   eax,eax
c000a353:	74 43                	je     c000a398 <sendKeyboardToken(KeyboardToken)+0x364>
c000a355:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a359:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a35d:	85 c0                	test   eax,eax
c000a35f:	74 2b                	je     c000a38c <sendKeyboardToken(KeyboardToken)+0x358>
c000a361:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a367:	89 d0                	mov    eax,edx
c000a369:	c1 e0 02             	shl    eax,0x2
c000a36c:	01 d0                	add    eax,edx
c000a36e:	d1 e0                	shl    eax,1
c000a370:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a378:	0f b7 c0             	movzx  eax,ax
c000a37b:	8d 50 d0             	lea    edx,[eax-0x30]
c000a37e:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a383:	01 d0                	add    eax,edx
c000a385:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a38a:	eb 71                	jmp    c000a3fd <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a38c:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a396:	eb 65                	jmp    c000a3fd <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a398:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a39d:	85 c0                	test   eax,eax
c000a39f:	74 18                	je     c000a3b9 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3a1:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3a6:	0f b6 c0             	movzx  eax,al
c000a3a9:	83 ec 0c             	sub    esp,0xc
c000a3ac:	50                   	push   eax
c000a3ad:	e8 ac fb ff ff       	call   c0009f5e <sendKeyToTerminal(unsigned char)>
c000a3b2:	83 c4 10             	add    esp,0x10
c000a3b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3b9:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3c3:	eb 38                	jmp    c000a3fd <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3c8:	0f b7 c0             	movzx  eax,ax
c000a3cb:	3d 01 01 00 00       	cmp    eax,0x101
c000a3d0:	75 2b                	jne    c000a3fd <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3d2:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3d7:	85 c0                	test   eax,eax
c000a3d9:	74 18                	je     c000a3f3 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3db:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3e0:	0f b6 c0             	movzx  eax,al
c000a3e3:	83 ec 0c             	sub    esp,0xc
c000a3e6:	50                   	push   eax
c000a3e7:	e8 72 fb ff ff       	call   c0009f5e <sendKeyToTerminal(unsigned char)>
c000a3ec:	83 c4 10             	add    esp,0x10
c000a3ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3f3:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3fd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a400:	83 f0 01             	xor    eax,0x1
c000a403:	0f b6 c0             	movzx  eax,al
c000a406:	85 c0                	test   eax,eax
c000a408:	74 5a                	je     c000a464 <sendKeyboardToken(KeyboardToken)+0x430>
c000a40a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a40d:	83 f0 01             	xor    eax,0x1
c000a410:	0f b6 c0             	movzx  eax,al
c000a413:	85 c0                	test   eax,eax
c000a415:	74 4d                	je     c000a464 <sendKeyboardToken(KeyboardToken)+0x430>
c000a417:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a41c:	83 f0 01             	xor    eax,0x1
c000a41f:	0f b6 c0             	movzx  eax,al
c000a422:	85 c0                	test   eax,eax
c000a424:	74 3e                	je     c000a464 <sendKeyboardToken(KeyboardToken)+0x430>
c000a426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a429:	0f b7 c0             	movzx  eax,ax
c000a42c:	83 f8 1f             	cmp    eax,0x1f
c000a42f:	76 0b                	jbe    c000a43c <sendKeyboardToken(KeyboardToken)+0x408>
c000a431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a434:	0f b7 c0             	movzx  eax,ax
c000a437:	83 f8 7e             	cmp    eax,0x7e
c000a43a:	76 16                	jbe    c000a452 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a43f:	0f b7 c0             	movzx  eax,ax
c000a442:	83 f8 0a             	cmp    eax,0xa
c000a445:	74 0b                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a44a:	0f b7 c0             	movzx  eax,ax
c000a44d:	83 f8 08             	cmp    eax,0x8
c000a450:	75 12                	jne    c000a464 <sendKeyboardToken(KeyboardToken)+0x430>
c000a452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a455:	0f b6 c0             	movzx  eax,al
c000a458:	83 ec 0c             	sub    esp,0xc
c000a45b:	50                   	push   eax
c000a45c:	e8 fd fa ff ff       	call   c0009f5e <sendKeyToTerminal(unsigned char)>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a467:	83 f0 01             	xor    eax,0x1
c000a46a:	0f b6 c0             	movzx  eax,al
c000a46d:	85 c0                	test   eax,eax
c000a46f:	74 5d                	je     c000a4ce <sendKeyboardToken(KeyboardToken)+0x49a>
c000a471:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a474:	83 f0 01             	xor    eax,0x1
c000a477:	0f b6 c0             	movzx  eax,al
c000a47a:	85 c0                	test   eax,eax
c000a47c:	74 50                	je     c000a4ce <sendKeyboardToken(KeyboardToken)+0x49a>
c000a47e:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 44                	je     c000a4ce <sendKeyboardToken(KeyboardToken)+0x49a>
c000a48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a48d:	0f b7 c0             	movzx  eax,ax
c000a490:	83 f8 3f             	cmp    eax,0x3f
c000a493:	76 39                	jbe    c000a4ce <sendKeyboardToken(KeyboardToken)+0x49a>
c000a495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a498:	0f b7 c0             	movzx  eax,ax
c000a49b:	83 f8 7f             	cmp    eax,0x7f
c000a49e:	77 2e                	ja     c000a4ce <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a3:	88 c2                	mov    dl,al
c000a4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a8:	0f b7 c0             	movzx  eax,ax
c000a4ab:	83 f8 5f             	cmp    eax,0x5f
c000a4ae:	76 04                	jbe    c000a4b4 <sendKeyboardToken(KeyboardToken)+0x480>
c000a4b0:	b0 20                	mov    al,0x20
c000a4b2:	eb 02                	jmp    c000a4b6 <sendKeyboardToken(KeyboardToken)+0x482>
c000a4b4:	b0 00                	mov    al,0x0
c000a4b6:	89 d1                	mov    ecx,edx
c000a4b8:	29 c1                	sub    ecx,eax
c000a4ba:	89 c8                	mov    eax,ecx
c000a4bc:	83 e8 40             	sub    eax,0x40
c000a4bf:	0f b6 c0             	movzx  eax,al
c000a4c2:	83 ec 0c             	sub    esp,0xc
c000a4c5:	50                   	push   eax
c000a4c6:	e8 93 fa ff ff       	call   c0009f5e <sendKeyToTerminal(unsigned char)>
c000a4cb:	83 c4 10             	add    esp,0x10
c000a4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d1:	0f b7 c0             	movzx  eax,ax
c000a4d4:	3d 00 03 00 00       	cmp    eax,0x300
c000a4d9:	75 12                	jne    c000a4ed <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4de:	83 f0 01             	xor    eax,0x1
c000a4e1:	0f b6 c0             	movzx  eax,al
c000a4e4:	85 c0                	test   eax,eax
c000a4e6:	74 05                	je     c000a4ed <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4e8:	e8 08 7c 00 00       	call   c00120f5 <doTerminalCycle()>
c000a4ed:	90                   	nop
c000a4ee:	c9                   	leave  
c000a4ef:	c3                   	ret    

c000a4f0 <clearInternalKeybuffer(VgaText*)>:
c000a4f0:	55                   	push   ebp
c000a4f1:	89 e5                	mov    ebp,esp
c000a4f3:	83 ec 08             	sub    esp,0x8
c000a4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f9:	05 02 01 00 00       	add    eax,0x102
c000a4fe:	83 ec 0c             	sub    esp,0xc
c000a501:	50                   	push   eax
c000a502:	e8 79 60 ff ff       	call   c0000580 <strlen>
c000a507:	83 c4 10             	add    esp,0x10
c000a50a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a50d:	81 c2 02 01 00 00    	add    edx,0x102
c000a513:	83 ec 04             	sub    esp,0x4
c000a516:	50                   	push   eax
c000a517:	6a 00                	push   0x0
c000a519:	52                   	push   edx
c000a51a:	e8 d1 5f ff ff       	call   c00004f0 <memset>
c000a51f:	83 c4 10             	add    esp,0x10
c000a522:	90                   	nop
c000a523:	c9                   	leave  
c000a524:	c3                   	ret    

c000a525 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a525:	55                   	push   ebp
c000a526:	89 e5                	mov    ebp,esp
c000a528:	83 ec 18             	sub    esp,0x18
c000a52b:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a530:	85 c0                	test   eax,eax
c000a532:	74 2a                	je     c000a55e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a534:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a53a:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a540:	83 ec 04             	sub    esp,0x4
c000a543:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a548:	83 ec 08             	sub    esp,0x8
c000a54b:	89 e0                	mov    eax,esp
c000a54d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a550:	89 08                	mov    DWORD PTR [eax],ecx
c000a552:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a555:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a559:	ff d2                	call   edx
c000a55b:	83 c4 10             	add    esp,0x10
c000a55e:	fb                   	sti    
c000a55f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a566:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a56a:	0f 84 08 01 00 00    	je     c000a678 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a573:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a579:	0f be c0             	movsx  eax,al
c000a57c:	85 c0                	test   eax,eax
c000a57e:	75 27                	jne    c000a5a7 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a580:	fa                   	cli    
c000a581:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a586:	83 c0 01             	add    eax,0x1
c000a589:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a58e:	e8 b5 ca 00 00       	call   c0017048 <schedule()>
c000a593:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a59b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a5a0:	85 c0                	test   eax,eax
c000a5a2:	75 cc                	jne    c000a570 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5a4:	fb                   	sti    
c000a5a5:	eb c9                	jmp    c000a570 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5aa:	8d 50 01             	lea    edx,[eax+0x1]
c000a5ad:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5b3:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5b9:	88 10                	mov    BYTE PTR [eax],dl
c000a5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5be:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5c4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5c7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5cb:	83 f8 03             	cmp    eax,0x3
c000a5ce:	75 1e                	jne    c000a5ee <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5d0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5da:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5e0:	83 ec 08             	sub    esp,0x8
c000a5e3:	6a 02                	push   0x2
c000a5e5:	50                   	push   eax
c000a5e6:	e8 d8 69 00 00       	call   c0010fc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5f2:	83 f8 1c             	cmp    eax,0x1c
c000a5f5:	75 1e                	jne    c000a615 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a601:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a607:	83 ec 08             	sub    esp,0x8
c000a60a:	6a 09                	push   0x9
c000a60c:	50                   	push   eax
c000a60d:	e8 b1 69 00 00       	call   c0010fc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a612:	83 c4 10             	add    esp,0x10
c000a615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a618:	05 02 01 00 00       	add    eax,0x102
c000a61d:	83 ec 0c             	sub    esp,0xc
c000a620:	50                   	push   eax
c000a621:	e8 5a 5f ff ff       	call   c0000580 <strlen>
c000a626:	83 c4 10             	add    esp,0x10
c000a629:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a62c:	81 c2 02 01 00 00    	add    edx,0x102
c000a632:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a635:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a638:	81 c2 02 01 00 00    	add    edx,0x102
c000a63e:	83 ec 04             	sub    esp,0x4
c000a641:	50                   	push   eax
c000a642:	51                   	push   ecx
c000a643:	52                   	push   edx
c000a644:	e8 87 5d ff ff       	call   c00003d0 <memmove>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a650:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a654:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a658:	83 f8 0a             	cmp    eax,0xa
c000a65b:	74 16                	je     c000a673 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a65d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a661:	83 f8 03             	cmp    eax,0x3
c000a664:	74 0d                	je     c000a673 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a666:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a66a:	83 f8 1c             	cmp    eax,0x1c
c000a66d:	0f 85 f3 fe ff ff    	jne    c000a566 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a676:	eb 03                	jmp    c000a67b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a678:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a67b:	c9                   	leave  
c000a67c:	c3                   	ret    
c000a67d:	90                   	nop

c000a67e <Keyboard::Keyboard(char const*)>:
c000a67e:	83 ec 0c             	sub    esp,0xc
c000a681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a685:	83 ec 08             	sub    esp,0x8
c000a688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68c:	50                   	push   eax
c000a68d:	e8 a2 f4 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	ba 80 38 02 c0       	mov    edx,0xc0023880
c000a69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a69e:	89 10                	mov    DWORD PTR [eax],edx
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6ae:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a6b5:	90                   	nop
c000a6b6:	83 c4 0c             	add    esp,0xc
c000a6b9:	c3                   	ret    

c000a6ba <Keyboard::~Keyboard()>:
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	ba 80 38 02 c0       	mov    edx,0xc0023880
c000a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c6:	89 10                	mov    DWORD PTR [eax],edx
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	50                   	push   eax
c000a6d0:	e8 ff f1 ff ff       	call   c00098d4 <Device::~Device()>
c000a6d5:	83 c4 10             	add    esp,0x10
c000a6d8:	90                   	nop
c000a6d9:	83 c4 0c             	add    esp,0xc
c000a6dc:	c3                   	ret    
c000a6dd:	90                   	nop

c000a6de <Keyboard::~Keyboard()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	83 ec 0c             	sub    esp,0xc
c000a6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e8:	e8 cd ff ff ff       	call   c000a6ba <Keyboard::~Keyboard()>
c000a6ed:	83 c4 10             	add    esp,0x10
c000a6f0:	83 ec 08             	sub    esp,0x8
c000a6f3:	68 5c 01 00 00       	push   0x15c
c000a6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fc:	e8 6a 2b 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	83 c4 0c             	add    esp,0xc
c000a707:	c3                   	ret    

c000a708 <LogicalDisk::close(int, int, void*)>:
c000a708:	83 c8 ff             	or     eax,0xffffffff
c000a70b:	c3                   	ret    

c000a70c <LogicalDisk::~LogicalDisk()>:
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c000a714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a718:	89 10                	mov    DWORD PTR [eax],edx
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	83 ec 0c             	sub    esp,0xc
c000a721:	50                   	push   eax
c000a722:	e8 ad f1 ff ff       	call   c00098d4 <Device::~Device()>
c000a727:	83 c4 10             	add    esp,0x10
c000a72a:	90                   	nop
c000a72b:	83 c4 0c             	add    esp,0xc
c000a72e:	c3                   	ret    
c000a72f:	90                   	nop

c000a730 <LogicalDisk::~LogicalDisk()>:
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	83 ec 0c             	sub    esp,0xc
c000a736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73a:	e8 cd ff ff ff       	call   c000a70c <LogicalDisk::~LogicalDisk()>
c000a73f:	83 c4 10             	add    esp,0x10
c000a742:	83 ec 08             	sub    esp,0x8
c000a745:	68 78 01 00 00       	push   0x178
c000a74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a74e:	e8 18 2b 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000a753:	83 c4 10             	add    esp,0x10
c000a756:	83 c4 0c             	add    esp,0xc
c000a759:	c3                   	ret    

c000a75a <LogicalDisk::open(int, int, void*)>:
c000a75a:	83 ec 18             	sub    esp,0x18
c000a75d:	68 ac 38 02 c0       	push   0xc00238ac
c000a762:	e8 e7 56 00 00       	call   c000fe4e <KePanic(char const*)>
c000a767:	83 c8 ff             	or     eax,0xffffffff
c000a76a:	83 c4 1c             	add    esp,0x1c
c000a76d:	c3                   	ret    

c000a76e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a76e:	53                   	push   ebx
c000a76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a773:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a777:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a77b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a781:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a787:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a78d:	77 10                	ja     c000a79f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a78f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a795:	89 d3                	mov    ebx,edx
c000a797:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a79d:	72 05                	jb     c000a7a4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a79f:	83 c8 ff             	or     eax,0xffffffff
c000a7a2:	89 c2                	mov    edx,eax
c000a7a4:	5b                   	pop    ebx
c000a7a5:	c3                   	ret    

c000a7a6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7a6:	56                   	push   esi
c000a7a7:	83 c8 ff             	or     eax,0xffffffff
c000a7aa:	53                   	push   ebx
c000a7ab:	89 c2                	mov    edx,eax
c000a7ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7b9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7bf:	77 27                	ja     c000a7e8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7c1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7c7:	89 d8                	mov    eax,ebx
c000a7c9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7d4:	89 c2                	mov    edx,eax
c000a7d6:	73 10                	jae    c000a7e8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7d8:	89 c8                	mov    eax,ecx
c000a7da:	89 da                	mov    edx,ebx
c000a7dc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7e2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7e8:	5b                   	pop    ebx
c000a7e9:	5e                   	pop    esi
c000a7ea:	c3                   	ret    
c000a7eb:	90                   	nop

c000a7ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7ec:	83 ec 1c             	sub    esp,0x1c
c000a7ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a803:	89 04 24             	mov    DWORD PTR [esp],eax
c000a806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a80a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a812:	83 ec 08             	sub    esp,0x8
c000a815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a819:	50                   	push   eax
c000a81a:	e8 15 f3 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000a81f:	83 c4 10             	add    esp,0x10
c000a822:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c000a827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a82b:	89 10                	mov    DWORD PTR [eax],edx
c000a82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a831:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a83c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a847:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a852:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a85c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a864:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a868:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a86e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a874:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a878:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a87b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a87f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a885:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a88b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a88f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a893:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a89d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8a7:	90                   	nop
c000a8a8:	83 c4 1c             	add    esp,0x1c
c000a8ab:	c3                   	ret    

c000a8ac <LogicalDisk::assignDriveLetter()>:
c000a8ac:	55                   	push   ebp
c000a8ad:	57                   	push   edi
c000a8ae:	56                   	push   esi
c000a8af:	53                   	push   ebx
c000a8b0:	83 ec 14             	sub    esp,0x14
c000a8b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8b7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8bd:	b0 41                	mov    al,0x41
c000a8bf:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8c5:	84 d2                	test   dl,dl
c000a8c7:	75 02                	jne    c000a8cb <LogicalDisk::assignDriveLetter()+0x1f>
c000a8c9:	b0 43                	mov    al,0x43
c000a8cb:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a8d1:	0f b6 ca             	movzx  ecx,dl
c000a8d4:	0f be e8             	movsx  ebp,al
c000a8d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8db:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8df:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a8e5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8e9:	3c 43                	cmp    al,0x43
c000a8eb:	75 10                	jne    c000a8fd <LogicalDisk::assignDriveLetter()+0x51>
c000a8ed:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8f4:	75 5a                	jne    c000a950 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8fb:	75 53                	jne    c000a950 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8fd:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a900:	ba 01 00 00 00       	mov    edx,0x1
c000a905:	89 34 24             	mov    DWORD PTR [esp],esi
c000a908:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a90b:	d3 e2                	shl    edx,cl
c000a90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a911:	89 d7                	mov    edi,edx
c000a913:	89 d6                	mov    esi,edx
c000a915:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a919:	c1 ff 1f             	sar    edi,0x1f
c000a91c:	21 f9                	and    ecx,edi
c000a91e:	09 d1                	or     ecx,edx
c000a920:	75 2e                	jne    c000a950 <LogicalDisk::assignDriveLetter()+0xa4>
c000a922:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a926:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a92a:	09 f2                	or     edx,esi
c000a92c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a92f:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a935:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a939:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a93f:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a946:	09 fa                	or     edx,edi
c000a948:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a94e:	eb 0d                	jmp    c000a95d <LogicalDisk::assignDriveLetter()+0xb1>
c000a950:	8d 50 01             	lea    edx,[eax+0x1]
c000a953:	45                   	inc    ebp
c000a954:	80 fa 5b             	cmp    dl,0x5b
c000a957:	88 d0                	mov    al,dl
c000a959:	75 8e                	jne    c000a8e9 <LogicalDisk::assignDriveLetter()+0x3d>
c000a95b:	31 c0                	xor    eax,eax
c000a95d:	83 c4 14             	add    esp,0x14
c000a960:	5b                   	pop    ebx
c000a961:	5e                   	pop    esi
c000a962:	5f                   	pop    edi
c000a963:	5d                   	pop    ebp
c000a964:	c3                   	ret    
c000a965:	90                   	nop

c000a966 <LogicalDisk::mount()>:
c000a966:	56                   	push   esi
c000a967:	53                   	push   ebx
c000a968:	53                   	push   ebx
c000a969:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a96d:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a973:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a97d:	85 db                	test   ebx,ebx
c000a97f:	74 27                	je     c000a9a8 <LogicalDisk::mount()+0x42>
c000a981:	51                   	push   ecx
c000a982:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a989:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a98b:	83 e8 41             	sub    eax,0x41
c000a98e:	50                   	push   eax
c000a98f:	56                   	push   esi
c000a990:	53                   	push   ebx
c000a991:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a994:	83 c4 10             	add    esp,0x10
c000a997:	84 c0                	test   al,al
c000a999:	74 08                	je     c000a9a3 <LogicalDisk::mount()+0x3d>
c000a99b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9a1:	eb 07                	jmp    c000a9aa <LogicalDisk::mount()+0x44>
c000a9a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9a6:	eb d5                	jmp    c000a97d <LogicalDisk::mount()+0x17>
c000a9a8:	31 c0                	xor    eax,eax
c000a9aa:	5a                   	pop    edx
c000a9ab:	5b                   	pop    ebx
c000a9ac:	5e                   	pop    esi
c000a9ad:	c3                   	ret    

c000a9ae <LogicalDisk::unmount()>:
c000a9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9bc:	c3                   	ret    
c000a9bd:	90                   	nop

c000a9be <LogicalDisk::eject()>:
c000a9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9ce:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9d1:	90                   	nop

c000a9d2 <LogicalDisk::unassignDriveLetter()>:
c000a9d2:	57                   	push   edi
c000a9d3:	56                   	push   esi
c000a9d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9d8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9df:	85 c9                	test   ecx,ecx
c000a9e1:	75 0f                	jne    c000a9f2 <LogicalDisk::unassignDriveLetter()+0x20>
c000a9e3:	c7 44 24 0c d0 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc00238d0
c000a9eb:	5e                   	pop    esi
c000a9ec:	5f                   	pop    edi
c000a9ed:	e9 5c 54 00 00       	jmp    c000fe4e <KePanic(char const*)>
c000a9f2:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9f9:	83 e9 41             	sub    ecx,0x41
c000a9fc:	b8 01 00 00 00       	mov    eax,0x1
c000aa01:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa0c:	d3 e0                	shl    eax,cl
c000aa0e:	89 c7                	mov    edi,eax
c000aa10:	f7 d0                	not    eax
c000aa12:	c1 ff 1f             	sar    edi,0x1f
c000aa15:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa1b:	89 fe                	mov    esi,edi
c000aa1d:	f7 d6                	not    esi
c000aa1f:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aa25:	5e                   	pop    esi
c000aa26:	5f                   	pop    edi
c000aa27:	c3                   	ret    

c000aa28 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa28:	57                   	push   edi
c000aa29:	56                   	push   esi
c000aa2a:	53                   	push   ebx
c000aa2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa3b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa41:	77 41                	ja     c000aa84 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa43:	99                   	cdq    
c000aa44:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa4a:	01 c8                	add    eax,ecx
c000aa4c:	11 da                	adc    edx,ebx
c000aa4e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa54:	19 d7                	sbb    edi,edx
c000aa56:	72 33                	jb     c000aa8b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa58:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa5e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa64:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa68:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa6c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa7c:	5b                   	pop    ebx
c000aa7d:	5e                   	pop    esi
c000aa7e:	5f                   	pop    edi
c000aa7f:	e9 a2 0b 00 00       	jmp    c000b626 <VCache::read(unsigned long long, int, void*)>
c000aa84:	b8 05 00 00 00       	mov    eax,0x5
c000aa89:	eb 05                	jmp    c000aa90 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa8b:	b8 07 00 00 00       	mov    eax,0x7
c000aa90:	5b                   	pop    ebx
c000aa91:	5e                   	pop    esi
c000aa92:	5f                   	pop    edi
c000aa93:	c3                   	ret    

c000aa94 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa94:	57                   	push   edi
c000aa95:	56                   	push   esi
c000aa96:	53                   	push   ebx
c000aa97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa9f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aaa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaa7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aaad:	77 41                	ja     c000aaf0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aaaf:	99                   	cdq    
c000aab0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aab6:	01 c8                	add    eax,ecx
c000aab8:	11 da                	adc    edx,ebx
c000aaba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aac0:	19 d7                	sbb    edi,edx
c000aac2:	72 33                	jb     c000aaf7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aac4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aad0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aad4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aad8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aade:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aae4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aae8:	5b                   	pop    ebx
c000aae9:	5e                   	pop    esi
c000aaea:	5f                   	pop    edi
c000aaeb:	e9 68 09 00 00       	jmp    c000b458 <VCache::write(unsigned long long, int, void*)>
c000aaf0:	b8 05 00 00 00       	mov    eax,0x5
c000aaf5:	eb 05                	jmp    c000aafc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aaf7:	b8 07 00 00 00       	mov    eax,0x7
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	c3                   	ret    

c000ab00 <Mouse::Mouse(char const*)>:
c000ab00:	83 ec 0c             	sub    esp,0xc
c000ab03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab07:	83 ec 08             	sub    esp,0x8
c000ab0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab0e:	50                   	push   eax
c000ab0f:	e8 20 f0 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000ab14:	83 c4 10             	add    esp,0x10
c000ab17:	ba 24 39 02 c0       	mov    edx,0xc0023924
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	89 10                	mov    DWORD PTR [eax],edx
c000ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab26:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab30:	90                   	nop
c000ab31:	83 c4 0c             	add    esp,0xc
c000ab34:	c3                   	ret    
c000ab35:	90                   	nop
c000ab36:	66 90                	xchg   ax,ax

c000ab38 <Mouse::~Mouse()>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	ba 24 39 02 c0       	mov    edx,0xc0023924
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	89 10                	mov    DWORD PTR [eax],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	83 ec 0c             	sub    esp,0xc
c000ab4d:	50                   	push   eax
c000ab4e:	e8 81 ed ff ff       	call   c00098d4 <Device::~Device()>
c000ab53:	83 c4 10             	add    esp,0x10
c000ab56:	90                   	nop
c000ab57:	83 c4 0c             	add    esp,0xc
c000ab5a:	c3                   	ret    
c000ab5b:	90                   	nop

c000ab5c <Mouse::~Mouse()>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	83 ec 0c             	sub    esp,0xc
c000ab62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab66:	e8 cd ff ff ff       	call   c000ab38 <Mouse::~Mouse()>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	83 ec 08             	sub    esp,0x8
c000ab71:	68 58 01 00 00       	push   0x158
c000ab76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab7a:	e8 ec 26 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000ab7f:	83 c4 10             	add    esp,0x10
c000ab82:	83 c4 0c             	add    esp,0xc
c000ab85:	c3                   	ret    

c000ab86 <NIC::getMAC()>:
c000ab86:	31 c0                	xor    eax,eax
c000ab88:	31 d2                	xor    edx,edx
c000ab8a:	c3                   	ret    
c000ab8b:	90                   	nop

c000ab8c <NIC::write(int, unsigned char*, int*)>:
c000ab8c:	b8 01 00 00 00       	mov    eax,0x1
c000ab91:	c3                   	ret    

c000ab92 <NIC::NIC(char const*)>:
c000ab92:	83 ec 0c             	sub    esp,0xc
c000ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab99:	83 ec 08             	sub    esp,0x8
c000ab9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba0:	50                   	push   eax
c000aba1:	e8 8e ef ff ff       	call   c0009b34 <Device::Device(char const*)>
c000aba6:	83 c4 10             	add    esp,0x10
c000aba9:	ba 50 39 02 c0       	mov    edx,0xc0023950
c000abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb2:	89 10                	mov    DWORD PTR [eax],edx
c000abb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abc2:	90                   	nop
c000abc3:	83 c4 0c             	add    esp,0xc
c000abc6:	c3                   	ret    
c000abc7:	90                   	nop

c000abc8 <NIC::~NIC()>:
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	ba 50 39 02 c0       	mov    edx,0xc0023950
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	89 10                	mov    DWORD PTR [eax],edx
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	83 ec 0c             	sub    esp,0xc
c000abdd:	50                   	push   eax
c000abde:	e8 f1 ec ff ff       	call   c00098d4 <Device::~Device()>
c000abe3:	83 c4 10             	add    esp,0x10
c000abe6:	90                   	nop
c000abe7:	83 c4 0c             	add    esp,0xc
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <NIC::~NIC()>:
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	83 ec 0c             	sub    esp,0xc
c000abf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf6:	e8 cd ff ff ff       	call   c000abc8 <NIC::~NIC()>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	83 ec 08             	sub    esp,0x8
c000ac01:	68 58 01 00 00       	push   0x158
c000ac06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac0a:	e8 5c 26 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	83 c4 0c             	add    esp,0xc
c000ac15:	c3                   	ret    

c000ac16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac16:	55                   	push   ebp
c000ac17:	57                   	push   edi
c000ac18:	56                   	push   esi
c000ac19:	53                   	push   ebx
c000ac1a:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac20:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac27:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac2e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac35:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac40:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac44:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac4b:	e8 e0 ef ff ff       	call   c0009c30 <Device::getName()>
c000ac50:	5a                   	pop    edx
c000ac51:	59                   	pop    ecx
c000ac52:	50                   	push   eax
c000ac53:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac57:	55                   	push   ebp
c000ac58:	e8 f3 59 ff ff       	call   c0000650 <strcpy>
c000ac5d:	5b                   	pop    ebx
c000ac5e:	58                   	pop    eax
c000ac5f:	68 7c 39 02 c0       	push   0xc002397c
c000ac64:	55                   	push   ebp
c000ac65:	e8 06 5c ff ff       	call   c0000870 <strcat>
c000ac6a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac71:	e8 92 4e 00 00       	call   c000fb08 <malloc>
c000ac76:	83 c4 0c             	add    esp,0xc
c000ac79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac81:	89 c3                	mov    ebx,eax
c000ac83:	57                   	push   edi
c000ac84:	56                   	push   esi
c000ac85:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac8c:	55                   	push   ebp
c000ac8d:	50                   	push   eax
c000ac8e:	e8 59 fb ff ff       	call   c000a7ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac93:	83 c4 14             	add    esp,0x14
c000ac96:	53                   	push   ebx
c000ac97:	e8 10 fc ff ff       	call   c000a8ac <LogicalDisk::assignDriveLetter()>
c000ac9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac9f:	e8 c2 fc ff ff       	call   c000a966 <LogicalDisk::mount()>
c000aca4:	58                   	pop    eax
c000aca5:	5a                   	pop    edx
c000aca6:	53                   	push   ebx
c000aca7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acae:	e8 1f ed ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000acb3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000acb9:	5b                   	pop    ebx
c000acba:	5e                   	pop    esi
c000acbb:	5f                   	pop    edi
c000acbc:	5d                   	pop    ebp
c000acbd:	c3                   	ret    

c000acbe <createPartitionsForDisk(PhysicalDisk*)>:
c000acbe:	55                   	push   ebp
c000acbf:	57                   	push   edi
c000acc0:	56                   	push   esi
c000acc1:	53                   	push   ebx
c000acc2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acc8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000accf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acd5:	3d 00 02 00 00       	cmp    eax,0x200
c000acda:	74 27                	je     c000ad03 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000acdc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ace2:	83 ec 10             	sub    esp,0x10
c000ace5:	99                   	cdq    
c000ace6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acec:	52                   	push   edx
c000aced:	50                   	push   eax
c000acee:	0f a4 f7 0a          	shld   edi,esi,0xa
c000acf2:	c1 e6 0a             	shl    esi,0xa
c000acf5:	89 fd                	mov    ebp,edi
c000acf7:	55                   	push   ebp
c000acf8:	56                   	push   esi
c000acf9:	e8 16 6e 01 00       	call   c0021b14 <__udivdi3>
c000acfe:	e9 b9 00 00 00       	jmp    c000adbc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad08:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad0c:	56                   	push   esi
c000ad0d:	6a 01                	push   0x1
c000ad0f:	6a 00                	push   0x0
c000ad11:	6a 00                	push   0x0
c000ad13:	53                   	push   ebx
c000ad14:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad17:	83 c4 20             	add    esp,0x20
c000ad1a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad22:	75 0a                	jne    c000ad2e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad24:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad2c:	74 2c                	je     c000ad5a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad34:	83 ec 10             	sub    esp,0x10
c000ad37:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad3d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad43:	89 f7                	mov    edi,esi
c000ad45:	c1 ff 1f             	sar    edi,0x1f
c000ad48:	57                   	push   edi
c000ad49:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad4d:	56                   	push   esi
c000ad4e:	c1 e0 0a             	shl    eax,0xa
c000ad51:	52                   	push   edx
c000ad52:	50                   	push   eax
c000ad53:	e8 bc 6d 01 00       	call   c0021b14 <__udivdi3>
c000ad58:	eb 62                	jmp    c000adbc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad5a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad61:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad68:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad6f:	89 cf                	mov    edi,ecx
c000ad71:	83 e2 7f             	and    edx,0x7f
c000ad74:	83 e7 7f             	and    edi,0x7f
c000ad77:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad7a:	83 e0 7f             	and    eax,0x7f
c000ad7d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad80:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad87:	83 e0 7f             	and    eax,0x7f
c000ad8a:	01 d0                	add    eax,edx
c000ad8c:	84 c0                	test   al,al
c000ad8e:	89 c5                	mov    ebp,eax
c000ad90:	74 41                	je     c000add3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad98:	83 ec 10             	sub    esp,0x10
c000ad9b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ada1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ada7:	89 f7                	mov    edi,esi
c000ada9:	c1 ff 1f             	sar    edi,0x1f
c000adac:	57                   	push   edi
c000adad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adb1:	56                   	push   esi
c000adb2:	c1 e0 0a             	shl    eax,0xa
c000adb5:	52                   	push   edx
c000adb6:	50                   	push   eax
c000adb7:	e8 58 6d 01 00       	call   c0021b14 <__udivdi3>
c000adbc:	83 c4 14             	add    esp,0x14
c000adbf:	52                   	push   edx
c000adc0:	50                   	push   eax
c000adc1:	6a 00                	push   0x0
c000adc3:	6a 00                	push   0x0
c000adc5:	53                   	push   ebx
c000adc6:	e8 4b fe ff ff       	call   c000ac16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adcb:	83 c4 20             	add    esp,0x20
c000adce:	e9 73 01 00 00       	jmp    c000af46 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000add3:	89 f0                	mov    eax,esi
c000add5:	31 c9                	xor    ecx,ecx
c000add7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000adde:	75 02                	jne    c000ade2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ade0:	89 cd                	mov    ebp,ecx
c000ade2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000adf1:	83 c0 10             	add    eax,0x10
c000adf4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adfc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ae03:	c1 e2 08             	shl    edx,0x8
c000ae06:	c1 e6 10             	shl    esi,0x10
c000ae09:	09 f2                	or     edx,esi
c000ae0b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae12:	09 f2                	or     edx,esi
c000ae14:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae1b:	c1 e6 18             	shl    esi,0x18
c000ae1e:	09 f2                	or     edx,esi
c000ae20:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae27:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae2b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae32:	c1 e6 10             	shl    esi,0x10
c000ae35:	c1 e2 08             	shl    edx,0x8
c000ae38:	09 f2                	or     edx,esi
c000ae3a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae41:	09 f2                	or     edx,esi
c000ae43:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae4a:	c1 e6 18             	shl    esi,0x18
c000ae4d:	09 f2                	or     edx,esi
c000ae4f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae53:	41                   	inc    ecx
c000ae54:	83 f9 04             	cmp    ecx,0x4
c000ae57:	0f 85 7a ff ff ff    	jne    c000add7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae61:	83 f0 01             	xor    eax,0x1
c000ae64:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae68:	75 4f                	jne    c000aeb9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae6e:	83 f0 01             	xor    eax,0x1
c000ae71:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae75:	75 42                	jne    c000aeb9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae77:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae85:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae8b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae93:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae99:	89 f7                	mov    edi,esi
c000ae9b:	c1 ff 1f             	sar    edi,0x1f
c000ae9e:	57                   	push   edi
c000ae9f:	56                   	push   esi
c000aea0:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aea4:	52                   	push   edx
c000aea5:	c1 e0 0a             	shl    eax,0xa
c000aea8:	50                   	push   eax
c000aea9:	e8 66 6c 01 00       	call   c0021b14 <__udivdi3>
c000aeae:	83 c4 10             	add    esp,0x10
c000aeb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aeb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aeb9:	89 e8                	mov    eax,ebp
c000aebb:	0f b6 e8             	movzx  ebp,al
c000aebe:	85 ed                	test   ebp,ebp
c000aec0:	74 50                	je     c000af12 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aec6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aece:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aed2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aed6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aeda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aede:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aee2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aef2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aef6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aefa:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aefe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af02:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af06:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af0a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af0e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af12:	31 ed                	xor    ebp,ebp
c000af14:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af18:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af1c:	89 f8                	mov    eax,edi
c000af1e:	09 f0                	or     eax,esi
c000af20:	74 1e                	je     c000af40 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af22:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af26:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af2a:	89 d1                	mov    ecx,edx
c000af2c:	09 c1                	or     ecx,eax
c000af2e:	74 10                	je     c000af40 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	57                   	push   edi
c000af34:	56                   	push   esi
c000af35:	52                   	push   edx
c000af36:	50                   	push   eax
c000af37:	53                   	push   ebx
c000af38:	e8 d9 fc ff ff       	call   c000ac16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af3d:	83 c4 20             	add    esp,0x20
c000af40:	45                   	inc    ebp
c000af41:	83 fd 04             	cmp    ebp,0x4
c000af44:	75 ce                	jne    c000af14 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af46:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af4c:	5b                   	pop    ebx
c000af4d:	5e                   	pop    esi
c000af4e:	5f                   	pop    edi
c000af4f:	5d                   	pop    ebp
c000af50:	c3                   	ret    
c000af51:	66 90                	xchg   ax,ax
c000af53:	90                   	nop

c000af54 <Serial::Serial(char const*)>:
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5b:	83 ec 08             	sub    esp,0x8
c000af5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af62:	50                   	push   eax
c000af63:	e8 cc eb ff ff       	call   c0009b34 <Device::Device(char const*)>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000af70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af74:	89 10                	mov    DWORD PTR [eax],edx
c000af76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af84:	90                   	nop
c000af85:	83 c4 0c             	add    esp,0xc
c000af88:	c3                   	ret    
c000af89:	90                   	nop
c000af8a:	66 90                	xchg   ax,ax

c000af8c <Serial::~Serial()>:
c000af8c:	83 ec 0c             	sub    esp,0xc
c000af8f:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	83 ec 0c             	sub    esp,0xc
c000afa1:	50                   	push   eax
c000afa2:	e8 2d e9 ff ff       	call   c00098d4 <Device::~Device()>
c000afa7:	83 c4 10             	add    esp,0x10
c000afaa:	90                   	nop
c000afab:	83 c4 0c             	add    esp,0xc
c000afae:	c3                   	ret    
c000afaf:	90                   	nop

c000afb0 <Serial::~Serial()>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	83 ec 0c             	sub    esp,0xc
c000afb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afba:	e8 cd ff ff ff       	call   c000af8c <Serial::~Serial()>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	83 ec 08             	sub    esp,0x8
c000afc5:	68 58 01 00 00       	push   0x158
c000afca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afce:	e8 98 22 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	83 c4 0c             	add    esp,0xc
c000afd9:	c3                   	ret    
c000afda:	66 90                	xchg   ax,ax

c000afdc <Timer::Timer(char const*)>:
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe3:	83 ec 08             	sub    esp,0x8
c000afe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afea:	50                   	push   eax
c000afeb:	e8 44 eb ff ff       	call   c0009b34 <Device::Device(char const*)>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	ba 6c 3a 02 c0       	mov    edx,0xc0023a6c
c000aff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affc:	89 10                	mov    DWORD PTR [eax],edx
c000affe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b002:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b00c:	90                   	nop
c000b00d:	83 c4 0c             	add    esp,0xc
c000b010:	c3                   	ret    
c000b011:	90                   	nop
c000b012:	66 90                	xchg   ax,ax

c000b014 <Timer::~Timer()>:
c000b014:	83 ec 0c             	sub    esp,0xc
c000b017:	ba 6c 3a 02 c0       	mov    edx,0xc0023a6c
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	89 10                	mov    DWORD PTR [eax],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	50                   	push   eax
c000b02a:	e8 a5 e8 ff ff       	call   c00098d4 <Device::~Device()>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Timer::~Timer()>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b042:	e8 cd ff ff ff       	call   c000b014 <Timer::~Timer()>
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	83 ec 08             	sub    esp,0x8
c000b04d:	68 5c 01 00 00       	push   0x15c
c000b052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b056:	e8 10 22 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000b05b:	83 c4 10             	add    esp,0x10
c000b05e:	83 c4 0c             	add    esp,0xc
c000b061:	c3                   	ret    

c000b062 <Timer::read()>:
c000b062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b066:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b06c:	c3                   	ret    

c000b06d <setupTimer(int)>:
c000b06d:	53                   	push   ebx
c000b06e:	83 ec 14             	sub    esp,0x14
c000b071:	68 5c 01 00 00       	push   0x15c
c000b076:	e8 8d 4a 00 00       	call   c000fb08 <malloc>
c000b07b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b07e:	89 c3                	mov    ebx,eax
c000b080:	e8 43 63 01 00       	call   c00213c8 <PIT::PIT()>
c000b085:	58                   	pop    eax
c000b086:	5a                   	pop    edx
c000b087:	53                   	push   ebx
c000b088:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c000b08e:	e8 3f e9 ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000b093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b095:	6a 00                	push   0x0
c000b097:	6a 00                	push   0x0
c000b099:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b09d:	53                   	push   ebx
c000b09e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0a1:	83 c4 28             	add    esp,0x28
c000b0a4:	89 d8                	mov    eax,ebx
c000b0a6:	5b                   	pop    ebx
c000b0a7:	c3                   	ret    

c000b0a8 <timerHandler(unsigned int)>:
c000b0a8:	57                   	push   edi
c000b0a9:	31 d2                	xor    edx,edx
c000b0ab:	56                   	push   esi
c000b0ac:	53                   	push   ebx
c000b0ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0b1:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b0b7:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b0bd:	80 3d d5 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d5,0x0
c000b0c4:	75 12                	jne    c000b0d8 <timerHandler(unsigned int)+0x30>
c000b0c6:	c7 44 24 10 1f 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023a1f
c000b0ce:	5b                   	pop    ebx
c000b0cf:	5e                   	pop    esi
c000b0d0:	5f                   	pop    edi
c000b0d1:	e9 78 be ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0d6:	66 90                	xchg   ax,ax
c000b0d8:	fa                   	cli    
c000b0d9:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000b0df:	83 ec 0c             	sub    esp,0xc
c000b0e2:	68 40 fa 02 c0       	push   0xc002fa40
c000b0e7:	e8 c0 6d 01 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	84 c0                	test   al,al
c000b0f1:	0f 85 a9 00 00 00    	jne    c000b1a0 <timerHandler(unsigned int)+0xf8>
c000b0f7:	83 ec 0c             	sub    esp,0xc
c000b0fa:	68 40 fa 02 c0       	push   0xc002fa40
c000b0ff:	e8 c4 6d 01 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	89 c6                	mov    esi,eax
c000b109:	8d 76 00             	lea    esi,[esi+0x0]
c000b10c:	83 ec 0c             	sub    esp,0xc
c000b10f:	68 40 fa 02 c0       	push   0xc002fa40
c000b114:	e8 af 6d 01 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b119:	c7 04 24 40 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa40
c000b120:	89 c7                	mov    edi,eax
c000b122:	e8 a9 6d 01 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b127:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b12a:	83 c4 10             	add    esp,0x10
c000b12d:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b130:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b135:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b13b:	19 c8                	sbb    eax,ecx
c000b13d:	72 21                	jb     c000b160 <timerHandler(unsigned int)+0xb8>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	57                   	push   edi
c000b143:	e8 58 c2 00 00       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	39 fe                	cmp    esi,edi
c000b14d:	75 25                	jne    c000b174 <timerHandler(unsigned int)+0xcc>
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	68 40 fa 02 c0       	push   0xc002fa40
c000b157:	e8 6c 6d 01 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b15c:	89 c6                	mov    esi,eax
c000b15e:	eb 10                	jmp    c000b170 <timerHandler(unsigned int)+0xc8>
c000b160:	50                   	push   eax
c000b161:	50                   	push   eax
c000b162:	57                   	push   edi
c000b163:	68 40 fa 02 c0       	push   0xc002fa40
c000b168:	e8 1f 6e 01 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b16d:	8d 76 00             	lea    esi,[esi+0x0]
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	90                   	nop
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	68 40 fa 02 c0       	push   0xc002fa40
c000b17c:	e8 2b 6d 01 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	84 c0                	test   al,al
c000b186:	75 18                	jne    c000b1a0 <timerHandler(unsigned int)+0xf8>
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	68 40 fa 02 c0       	push   0xc002fa40
c000b190:	e8 33 6d 01 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b195:	83 c4 10             	add    esp,0x10
c000b198:	39 f0                	cmp    eax,esi
c000b19a:	0f 85 6c ff ff ff    	jne    c000b10c <timerHandler(unsigned int)+0x64>
c000b1a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1a8:	85 c0                	test   eax,eax
c000b1aa:	74 48                	je     c000b1f4 <timerHandler(unsigned int)+0x14c>
c000b1ac:	80 3d d4 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d4,0x0
c000b1b3:	74 3f                	je     c000b1f4 <timerHandler(unsigned int)+0x14c>
c000b1b5:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1ba:	76 1c                	jbe    c000b1d8 <timerHandler(unsigned int)+0x130>
c000b1bc:	83 ec 0c             	sub    esp,0xc
c000b1bf:	68 35 3a 02 c0       	push   0xc0023a35
c000b1c4:	e8 85 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b1c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1ce:	83 c4 10             	add    esp,0x10
c000b1d1:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1de:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1e1:	89 c1                	mov    ecx,eax
c000b1e3:	29 d9                	sub    ecx,ebx
c000b1e5:	39 d8                	cmp    eax,ebx
c000b1e7:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b1ea:	77 08                	ja     c000b1f4 <timerHandler(unsigned int)+0x14c>
c000b1ec:	e8 57 be 00 00       	call   c0017048 <schedule()>
c000b1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f4:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000b1fb:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000b202:	75 04                	jne    c000b208 <timerHandler(unsigned int)+0x160>
c000b204:	fb                   	sti    
c000b205:	8d 76 00             	lea    esi,[esi+0x0]
c000b208:	5b                   	pop    ebx
c000b209:	5e                   	pop    esi
c000b20a:	5f                   	pop    edi
c000b20b:	c3                   	ret    

c000b20c <VCache::VCache(PhysicalDisk*)>:
c000b20c:	53                   	push   ebx
c000b20d:	83 ec 18             	sub    esp,0x18
c000b210:	ba dc 3a 02 c0       	mov    edx,0xc0023adc
c000b215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b219:	89 10                	mov    DWORD PTR [eax],edx
c000b21b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b21f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b22a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b235:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b23c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b247:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b24e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b259:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b264:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b273:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b27a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b286:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b296:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b29d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2a5:	83 ec 0c             	sub    esp,0xc
c000b2a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2ac:	e8 57 48 00 00       	call   c000fb08 <malloc>
c000b2b1:	83 c4 10             	add    esp,0x10
c000b2b4:	89 c3                	mov    ebx,eax
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	53                   	push   ebx
c000b2ba:	e8 75 4b 00 00       	call   c000fe34 <Mutex::Mutex()>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2d1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2e3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2f4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b2fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b300:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b304:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b307:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b312:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b316:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b31c:	05 00 01 00 00       	add    eax,0x100
c000b321:	c1 e0 04             	shl    eax,0x4
c000b324:	83 ec 0c             	sub    esp,0xc
c000b327:	50                   	push   eax
c000b328:	e8 db 47 00 00       	call   c000fb08 <malloc>
c000b32d:	83 c4 10             	add    esp,0x10
c000b330:	89 c2                	mov    edx,eax
c000b332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b336:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b344:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b348:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b34c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b350:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b356:	89 d0                	mov    eax,edx
c000b358:	c1 e0 02             	shl    eax,0x2
c000b35b:	01 d0                	add    eax,edx
c000b35d:	c1 e0 04             	shl    eax,0x4
c000b360:	83 ec 0c             	sub    esp,0xc
c000b363:	50                   	push   eax
c000b364:	e8 9f 47 00 00       	call   c000fb08 <malloc>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 c2                	mov    edx,eax
c000b36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b372:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b375:	90                   	nop
c000b376:	83 c4 18             	add    esp,0x18
c000b379:	5b                   	pop    ebx
c000b37a:	c3                   	ret    
c000b37b:	90                   	nop

c000b37c <VCache::invalidateReadBuffer()>:
c000b37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b380:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b386:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b38a:	c3                   	ret    
c000b38b:	90                   	nop

c000b38c <VCache::writeWriteBuffer()>:
c000b38c:	53                   	push   ebx
c000b38d:	83 ec 08             	sub    esp,0x8
c000b390:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b394:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b398:	74 1e                	je     c000b3b8 <VCache::writeWriteBuffer()+0x2c>
c000b39a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b39d:	83 ec 0c             	sub    esp,0xc
c000b3a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3ab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3ae:	50                   	push   eax
c000b3af:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3b2:	83 c4 20             	add    esp,0x20
c000b3b5:	8d 76 00             	lea    esi,[esi+0x0]
c000b3b8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3bf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3c6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3ca:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3d1:	83 c4 08             	add    esp,0x8
c000b3d4:	5b                   	pop    ebx
c000b3d5:	c3                   	ret    
c000b3d6:	66 90                	xchg   ax,ax

c000b3d8 <VCache::~VCache()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	ba dc 3a 02 c0       	mov    edx,0xc0023adc
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3ed:	0f b6 c0             	movzx  eax,al
c000b3f0:	85 c0                	test   eax,eax
c000b3f2:	74 10                	je     c000b404 <VCache::~VCache()+0x2c>
c000b3f4:	83 ec 0c             	sub    esp,0xc
c000b3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fb:	e8 8c ff ff ff       	call   c000b38c <VCache::writeWriteBuffer()>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	90                   	nop
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	50                   	push   eax
c000b40f:	e8 04 47 00 00       	call   c000fb18 <free>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b41e:	83 ec 0c             	sub    esp,0xc
c000b421:	50                   	push   eax
c000b422:	e8 f1 46 00 00       	call   c000fb18 <free>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	90                   	nop
c000b42b:	83 c4 0c             	add    esp,0xc
c000b42e:	c3                   	ret    
c000b42f:	90                   	nop

c000b430 <VCache::~VCache()>:
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43a:	e8 99 ff ff ff       	call   c000b3d8 <VCache::~VCache()>
c000b43f:	83 c4 10             	add    esp,0x10
c000b442:	83 ec 08             	sub    esp,0x8
c000b445:	6a 44                	push   0x44
c000b447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44b:	e8 1b 1e 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	83 c4 0c             	add    esp,0xc
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <VCache::write(unsigned long long, int, void*)>:
c000b458:	55                   	push   ebp
c000b459:	57                   	push   edi
c000b45a:	56                   	push   esi
c000b45b:	53                   	push   ebx
c000b45c:	83 ec 1c             	sub    esp,0x1c
c000b45f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b463:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b467:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b46b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b46f:	e8 e4 b8 00 00       	call   c0016d58 <KeDisablePreemption()>
c000b474:	b9 00 10 00 00       	mov    ecx,0x1000
c000b479:	50                   	push   eax
c000b47a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b47d:	0f af c3             	imul   eax,ebx
c000b480:	05 ff 0f 00 00       	add    eax,0xfff
c000b485:	99                   	cdq    
c000b486:	f7 f9                	idiv   ecx
c000b488:	50                   	push   eax
c000b489:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b48d:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b493:	e8 7c 8b 00 00       	call   c0014014 <VAS::canLockPages(unsigned long, int)>
c000b498:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4a4:	74 2a                	je     c000b4d0 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4a6:	50                   	push   eax
c000b4a7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4af:	0f af c3             	imul   eax,ebx
c000b4b2:	05 ff 0f 00 00       	add    eax,0xfff
c000b4b7:	99                   	cdq    
c000b4b8:	f7 f9                	idiv   ecx
c000b4ba:	50                   	push   eax
c000b4bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4bf:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b4c5:	e8 44 8f 00 00       	call   c001440e <VAS::lockPages(unsigned long, int)>
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d0:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4d4:	74 0e                	je     c000b4e4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4d6:	83 ec 0c             	sub    esp,0xc
c000b4d9:	55                   	push   ebp
c000b4da:	e8 9d fe ff ff       	call   c000b37c <VCache::invalidateReadBuffer()>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	66 90                	xchg   ax,ax
c000b4e4:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4e8:	74 72                	je     c000b55c <VCache::write(unsigned long long, int, void*)+0x104>
c000b4ea:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4ed:	89 c8                	mov    eax,ecx
c000b4ef:	99                   	cdq    
c000b4f0:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4f3:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b502:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b506:	31 f0                	xor    eax,esi
c000b508:	31 fa                	xor    edx,edi
c000b50a:	09 d0                	or     eax,edx
c000b50c:	75 42                	jne    c000b550 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b50e:	83 fb 01             	cmp    ebx,0x1
c000b511:	75 3d                	jne    c000b550 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b516:	89 cf                	mov    edi,ecx
c000b518:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b51c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b522:	0f af f8             	imul   edi,eax
c000b525:	89 c1                	mov    ecx,eax
c000b527:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b52a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b52c:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b52f:	40                   	inc    eax
c000b530:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b533:	83 f8 50             	cmp    eax,0x50
c000b536:	0f 85 a8 00 00 00    	jne    c000b5e4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	55                   	push   ebp
c000b540:	e8 47 fe ff ff       	call   c000b38c <VCache::writeWriteBuffer()>
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	e9 97 00 00 00       	jmp    c000b5e4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	55                   	push   ebp
c000b554:	e8 33 fe ff ff       	call   c000b38c <VCache::writeWriteBuffer()>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	83 fb 4f             	cmp    ebx,0x4f
c000b55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b562:	7f 20                	jg     c000b584 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b564:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b567:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b56b:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b56e:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b571:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b574:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b578:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b57e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b580:	eb 62                	jmp    c000b5e4 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b582:	66 90                	xchg   ax,ax
c000b584:	83 ec 0c             	sub    esp,0xc
c000b587:	8b 10                	mov    edx,DWORD PTR [eax]
c000b589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b58d:	53                   	push   ebx
c000b58e:	57                   	push   edi
c000b58f:	56                   	push   esi
c000b590:	50                   	push   eax
c000b591:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b594:	83 c4 20             	add    esp,0x20
c000b597:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b59c:	89 c6                	mov    esi,eax
c000b59e:	74 28                	je     c000b5c8 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5a0:	52                   	push   edx
c000b5a1:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5a6:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5aa:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5b0:	99                   	cdq    
c000b5b1:	f7 f9                	idiv   ecx
c000b5b3:	50                   	push   eax
c000b5b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5b8:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b5be:	e8 8d 8a 00 00       	call   c0014050 <VAS::unlockPages(unsigned long, int)>
c000b5c3:	83 c4 10             	add    esp,0x10
c000b5c6:	66 90                	xchg   ax,ax
c000b5c8:	e8 b3 b7 00 00       	call   c0016d80 <KeRestorePreemption()>
c000b5cd:	85 f6                	test   esi,esi
c000b5cf:	74 4b                	je     c000b61c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 94 3a 02 c0       	push   0xc0023a94
c000b5d9:	e8 70 b9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	eb 39                	jmp    c000b61c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5e3:	90                   	nop
c000b5e4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5e9:	74 29                	je     c000b614 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5eb:	50                   	push   eax
c000b5ec:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5f1:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5f5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5fb:	99                   	cdq    
c000b5fc:	f7 f9                	idiv   ecx
c000b5fe:	50                   	push   eax
c000b5ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b603:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b609:	e8 42 8a 00 00       	call   c0014050 <VAS::unlockPages(unsigned long, int)>
c000b60e:	83 c4 10             	add    esp,0x10
c000b611:	8d 76 00             	lea    esi,[esi+0x0]
c000b614:	e8 67 b7 00 00       	call   c0016d80 <KeRestorePreemption()>
c000b619:	31 f6                	xor    esi,esi
c000b61b:	90                   	nop
c000b61c:	83 c4 1c             	add    esp,0x1c
c000b61f:	89 f0                	mov    eax,esi
c000b621:	5b                   	pop    ebx
c000b622:	5e                   	pop    esi
c000b623:	5f                   	pop    edi
c000b624:	5d                   	pop    ebp
c000b625:	c3                   	ret    

c000b626 <VCache::read(unsigned long long, int, void*)>:
c000b626:	55                   	push   ebp
c000b627:	bd 00 10 00 00       	mov    ebp,0x1000
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	83 ec 2c             	sub    esp,0x2c
c000b632:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b636:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b63a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b63e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b642:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b646:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b64a:	e8 09 b7 00 00       	call   c0016d58 <KeDisablePreemption()>
c000b64f:	50                   	push   eax
c000b650:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b653:	0f af c6             	imul   eax,esi
c000b656:	05 ff 0f 00 00       	add    eax,0xfff
c000b65b:	99                   	cdq    
c000b65c:	f7 fd                	idiv   ebp
c000b65e:	50                   	push   eax
c000b65f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b663:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b669:	e8 a6 89 00 00       	call   c0014014 <VAS::canLockPages(unsigned long, int)>
c000b66e:	83 c4 10             	add    esp,0x10
c000b671:	84 c0                	test   al,al
c000b673:	89 c7                	mov    edi,eax
c000b675:	74 25                	je     c000b69c <VCache::read(unsigned long long, int, void*)+0x76>
c000b677:	50                   	push   eax
c000b678:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b67b:	0f af c6             	imul   eax,esi
c000b67e:	05 ff 0f 00 00       	add    eax,0xfff
c000b683:	99                   	cdq    
c000b684:	f7 fd                	idiv   ebp
c000b686:	50                   	push   eax
c000b687:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b68b:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b691:	e8 78 8d 00 00       	call   c001440e <VAS::lockPages(unsigned long, int)>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	8d 76 00             	lea    esi,[esi+0x0]
c000b69c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6a0:	74 0e                	je     c000b6b0 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	53                   	push   ebx
c000b6a6:	e8 e1 fc ff ff       	call   c000b38c <VCache::writeWriteBuffer()>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	66 90                	xchg   ax,ax
c000b6b0:	83 fe 01             	cmp    esi,0x1
c000b6b3:	0f 85 fb 00 00 00    	jne    c000b7b4 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6bc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6c7:	0f 85 e7 00 00 00    	jne    c000b7b4 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6cd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6d0:	89 ee                	mov    esi,ebp
c000b6d2:	f7 de                	neg    esi
c000b6d4:	89 f0                	mov    eax,esi
c000b6d6:	c1 f8 1f             	sar    eax,0x1f
c000b6d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b6e1:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b6e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6e9:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6ed:	89 ca                	mov    edx,ecx
c000b6ef:	89 f9                	mov    ecx,edi
c000b6f1:	0f b6 f9             	movzx  edi,cl
c000b6f4:	89 f0                	mov    eax,esi
c000b6f6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b6fa:	74 0c                	je     c000b708 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6fc:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b6ff:	75 07                	jne    c000b708 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b701:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b704:	74 56                	je     c000b75c <VCache::read(unsigned long long, int, void*)+0x136>
c000b706:	66 90                	xchg   ax,ax
c000b708:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b70c:	83 ec 0c             	sub    esp,0xc
c000b70f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b712:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b716:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b719:	8b 37                	mov    esi,DWORD PTR [edi]
c000b71b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b71e:	55                   	push   ebp
c000b71f:	52                   	push   edx
c000b720:	50                   	push   eax
c000b721:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b725:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b728:	83 c4 20             	add    esp,0x20
c000b72b:	85 c0                	test   eax,eax
c000b72d:	89 c5                	mov    ebp,eax
c000b72f:	74 2b                	je     c000b75c <VCache::read(unsigned long long, int, void*)+0x136>
c000b731:	83 ec 0c             	sub    esp,0xc
c000b734:	68 ac 3a 02 c0       	push   0xc0023aac
c000b739:	e8 10 b8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b73e:	83 c4 10             	add    esp,0x10
c000b741:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b746:	0f 84 bc 00 00 00    	je     c000b808 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b74c:	56                   	push   esi
c000b74d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b750:	05 ff 0f 00 00       	add    eax,0xfff
c000b755:	e9 92 00 00 00       	jmp    c000b7ec <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b75a:	66 90                	xchg   ax,ax
c000b75c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b75f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b763:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b769:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b76c:	8d 70 ff             	lea    esi,[eax-0x1]
c000b76f:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b773:	0f af f1             	imul   esi,ecx
c000b776:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b779:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b77b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b780:	74 26                	je     c000b7a8 <VCache::read(unsigned long long, int, void*)+0x182>
c000b782:	51                   	push   ecx
c000b783:	b9 00 10 00 00       	mov    ecx,0x1000
c000b788:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b78b:	05 ff 0f 00 00       	add    eax,0xfff
c000b790:	99                   	cdq    
c000b791:	f7 f9                	idiv   ecx
c000b793:	50                   	push   eax
c000b794:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b798:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b79e:	e8 ad 88 00 00       	call   c0014050 <VAS::unlockPages(unsigned long, int)>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	66 90                	xchg   ax,ax
c000b7a8:	e8 d3 b5 00 00       	call   c0016d80 <KeRestorePreemption()>
c000b7ad:	31 ed                	xor    ebp,ebp
c000b7af:	eb 5f                	jmp    c000b810 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	53                   	push   ebx
c000b7b8:	e8 bf fb ff ff       	call   c000b37c <VCache::invalidateReadBuffer()>
c000b7bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7c0:	5a                   	pop    edx
c000b7c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7c7:	56                   	push   esi
c000b7c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7d0:	50                   	push   eax
c000b7d1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7d4:	83 c4 20             	add    esp,0x20
c000b7d7:	89 c5                	mov    ebp,eax
c000b7d9:	89 f8                	mov    eax,edi
c000b7db:	84 c0                	test   al,al
c000b7dd:	74 29                	je     c000b808 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b7df:	50                   	push   eax
c000b7e0:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7e4:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7ea:	66 90                	xchg   ax,ax
c000b7ec:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7f1:	99                   	cdq    
c000b7f2:	f7 f9                	idiv   ecx
c000b7f4:	50                   	push   eax
c000b7f5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7f9:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b7ff:	e8 4c 88 00 00       	call   c0014050 <VAS::unlockPages(unsigned long, int)>
c000b804:	83 c4 10             	add    esp,0x10
c000b807:	90                   	nop
c000b808:	e8 73 b5 00 00       	call   c0016d80 <KeRestorePreemption()>
c000b80d:	8d 76 00             	lea    esi,[esi+0x0]
c000b810:	83 c4 2c             	add    esp,0x2c
c000b813:	89 e8                	mov    eax,ebp
c000b815:	5b                   	pop    ebx
c000b816:	5e                   	pop    esi
c000b817:	5f                   	pop    edi
c000b818:	5d                   	pop    ebp
c000b819:	c3                   	ret    

c000b81a <Video::putrect(int, int, int, int, unsigned int)>:
c000b81a:	55                   	push   ebp
c000b81b:	57                   	push   edi
c000b81c:	56                   	push   esi
c000b81d:	53                   	push   ebx
c000b81e:	83 ec 1c             	sub    esp,0x1c
c000b821:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b825:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b829:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b82d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b831:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b839:	01 df                	add    edi,ebx
c000b83b:	39 fb                	cmp    ebx,edi
c000b83d:	7d 1f                	jge    c000b85e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b83f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b843:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b847:	7d 12                	jge    c000b85b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b849:	8b 16                	mov    edx,DWORD PTR [esi]
c000b84b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b84f:	53                   	push   ebx
c000b850:	55                   	push   ebp
c000b851:	45                   	inc    ebp
c000b852:	56                   	push   esi
c000b853:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b856:	83 c4 10             	add    esp,0x10
c000b859:	eb e8                	jmp    c000b843 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b85b:	43                   	inc    ebx
c000b85c:	eb dd                	jmp    c000b83b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b85e:	83 c4 1c             	add    esp,0x1c
c000b861:	5b                   	pop    ebx
c000b862:	5e                   	pop    esi
c000b863:	5f                   	pop    edi
c000b864:	5d                   	pop    ebp
c000b865:	c3                   	ret    

c000b866 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b866:	55                   	push   ebp
c000b867:	57                   	push   edi
c000b868:	31 ff                	xor    edi,edi
c000b86a:	56                   	push   esi
c000b86b:	53                   	push   ebx
c000b86c:	83 ec 1c             	sub    esp,0x1c
c000b86f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b873:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b877:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b87e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b887:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b88b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b88f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b892:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b896:	01 f9                	add    ecx,edi
c000b898:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b89c:	7d 2f                	jge    c000b8cd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b89e:	31 f6                	xor    esi,esi
c000b8a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8a4:	01 f2                	add    edx,esi
c000b8a6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8aa:	7d 1a                	jge    c000b8c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8af:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8b2:	46                   	inc    esi
c000b8b3:	51                   	push   ecx
c000b8b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8b8:	52                   	push   edx
c000b8b9:	55                   	push   ebp
c000b8ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8c4:	eb da                	jmp    c000b8a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8c6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8ca:	47                   	inc    edi
c000b8cb:	eb c5                	jmp    c000b892 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8cd:	83 c4 1c             	add    esp,0x1c
c000b8d0:	5b                   	pop    ebx
c000b8d1:	5e                   	pop    esi
c000b8d2:	5f                   	pop    edi
c000b8d3:	5d                   	pop    ebp
c000b8d4:	c3                   	ret    
c000b8d5:	90                   	nop

c000b8d6 <Video::blit(unsigned int*, int, int, int, int)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	ba 00 00 00 00       	mov    edx,0x0
c000b8dc:	57                   	push   edi
c000b8dd:	56                   	push   esi
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 1c             	sub    esp,0x1c
c000b8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8e6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b8ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8ee:	85 c0                	test   eax,eax
c000b8f0:	0f 49 d0             	cmovns edx,eax
c000b8f3:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b8fa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b8fe:	89 eb                	mov    ebx,ebp
c000b900:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b904:	01 ea                	add    edx,ebp
c000b906:	39 da                	cmp    edx,ebx
c000b908:	7e 54                	jle    c000b95e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b90a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b910:	7c 4c                	jl     c000b95e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b912:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b916:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b91a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b91e:	01 c1                	add    ecx,eax
c000b920:	39 f9                	cmp    ecx,edi
c000b922:	7e 2f                	jle    c000b953 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b924:	83 c2 04             	add    edx,0x4
c000b927:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b92d:	7c 21                	jl     c000b950 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b92f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b933:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b935:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b938:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b93c:	55                   	push   ebp
c000b93d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b941:	56                   	push   esi
c000b942:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b94c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b950:	47                   	inc    edi
c000b951:	eb c7                	jmp    c000b91a <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b953:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b957:	43                   	inc    ebx
c000b958:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b95c:	eb a2                	jmp    c000b900 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b95e:	83 c4 1c             	add    esp,0x1c
c000b961:	5b                   	pop    ebx
c000b962:	5e                   	pop    esi
c000b963:	5f                   	pop    edi
c000b964:	5d                   	pop    ebp
c000b965:	c3                   	ret    

c000b966 <Video::clearScreen(unsigned int)>:
c000b966:	57                   	push   edi
c000b967:	56                   	push   esi
c000b968:	53                   	push   ebx
c000b969:	31 db                	xor    ebx,ebx
c000b96b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b96f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b975:	7e 1f                	jle    c000b996 <Video::clearScreen(unsigned int)+0x30>
c000b977:	31 ff                	xor    edi,edi
c000b979:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b97f:	7e 12                	jle    c000b993 <Video::clearScreen(unsigned int)+0x2d>
c000b981:	8b 06                	mov    eax,DWORD PTR [esi]
c000b983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b987:	53                   	push   ebx
c000b988:	57                   	push   edi
c000b989:	47                   	inc    edi
c000b98a:	56                   	push   esi
c000b98b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	eb e6                	jmp    c000b979 <Video::clearScreen(unsigned int)+0x13>
c000b993:	43                   	inc    ebx
c000b994:	eb d9                	jmp    c000b96f <Video::clearScreen(unsigned int)+0x9>
c000b996:	5b                   	pop    ebx
c000b997:	5e                   	pop    esi
c000b998:	5f                   	pop    edi
c000b999:	c3                   	ret    

c000b99a <Video::putpixel(int, int, unsigned int)>:
c000b99a:	c7 44 24 04 e4 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023ae4
c000b9a2:	e9 a7 44 00 00       	jmp    c000fe4e <KePanic(char const*)>
c000b9a7:	90                   	nop

c000b9a8 <Video::readPixelApprox(int, int)>:
c000b9a8:	83 ec 18             	sub    esp,0x18
c000b9ab:	68 05 3b 02 c0       	push   0xc0023b05
c000b9b0:	e8 99 44 00 00       	call   c000fe4e <KePanic(char const*)>
c000b9b5:	31 c0                	xor    eax,eax
c000b9b7:	83 c4 1c             	add    esp,0x1c
c000b9ba:	c3                   	ret    
c000b9bb:	90                   	nop

c000b9bc <Video::Video(char const*)>:
c000b9bc:	83 ec 0c             	sub    esp,0xc
c000b9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c3:	83 ec 08             	sub    esp,0x8
c000b9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ca:	50                   	push   eax
c000b9cb:	e8 64 e1 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000b9d0:	83 c4 10             	add    esp,0x10
c000b9d3:	ba a8 3b 02 c0       	mov    edx,0xc0023ba8
c000b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dc:	89 10                	mov    DWORD PTR [eax],edx
c000b9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9ec:	90                   	nop
c000b9ed:	83 c4 0c             	add    esp,0xc
c000b9f0:	c3                   	ret    
c000b9f1:	90                   	nop

c000b9f2 <Video::~Video()>:
c000b9f2:	83 ec 0c             	sub    esp,0xc
c000b9f5:	ba a8 3b 02 c0       	mov    edx,0xc0023ba8
c000b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fe:	89 10                	mov    DWORD PTR [eax],edx
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	83 ec 0c             	sub    esp,0xc
c000ba07:	50                   	push   eax
c000ba08:	e8 c7 de ff ff       	call   c00098d4 <Device::~Device()>
c000ba0d:	83 c4 10             	add    esp,0x10
c000ba10:	90                   	nop
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::~Video()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	83 ec 0c             	sub    esp,0xc
c000ba1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba20:	e8 cd ff ff ff       	call   c000b9f2 <Video::~Video()>
c000ba25:	83 c4 10             	add    esp,0x10
c000ba28:	83 ec 08             	sub    esp,0x8
c000ba2b:	68 64 01 00 00       	push   0x164
c000ba30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba34:	e8 32 18 00 00       	call   c000d26b <operator delete(void*, unsigned long)>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	83 c4 0c             	add    esp,0xc
c000ba3f:	c3                   	ret    

c000ba40 <Video::isMonochrome()>:
c000ba40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba44:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba4a:	c3                   	ret    
c000ba4b:	90                   	nop

c000ba4c <Video::getWidth()>:
c000ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba56:	c3                   	ret    
c000ba57:	90                   	nop

c000ba58 <Video::getHeight()>:
c000ba58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba5c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba62:	c3                   	ret    
c000ba63:	90                   	nop

c000ba64 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba64:	55                   	push   ebp
c000ba65:	57                   	push   edi
c000ba66:	56                   	push   esi
c000ba67:	53                   	push   ebx
c000ba68:	83 ec 2c             	sub    esp,0x2c
c000ba6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba6f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba73:	83 f8 01             	cmp    eax,0x1
c000ba76:	19 c9                	sbb    ecx,ecx
c000ba78:	31 db                	xor    ebx,ebx
c000ba7a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba7e:	89 ce                	mov    esi,ecx
c000ba80:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba88:	f7 d6                	not    esi
c000ba8a:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ba90:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba94:	01 d8                	add    eax,ebx
c000ba96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba9a:	57                   	push   edi
c000ba9b:	e8 b8 ff ff ff       	call   c000ba58 <Video::getHeight()>
c000baa0:	59                   	pop    ecx
c000baa1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000baa5:	7e 70                	jle    c000bb17 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000baa7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000baaf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bab2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bab6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bac1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac5:	89 e8                	mov    eax,ebp
c000bac7:	83 c0 20             	add    eax,0x20
c000baca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bace:	57                   	push   edi
c000bacf:	e8 78 ff ff ff       	call   c000ba4c <Video::getWidth()>
c000bad4:	5a                   	pop    edx
c000bad5:	39 c5                	cmp    ebp,eax
c000bad7:	7d 34                	jge    c000bb0d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bad9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bade:	74 05                	je     c000bae5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bae0:	8b 07                	mov    eax,DWORD PTR [edi]
c000bae2:	56                   	push   esi
c000bae3:	eb 0d                	jmp    c000baf2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bae5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000baea:	74 12                	je     c000bafe <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000baec:	8b 07                	mov    eax,DWORD PTR [edi]
c000baee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000baf6:	55                   	push   ebp
c000baf7:	57                   	push   edi
c000baf8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb02:	45                   	inc    ebp
c000bb03:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb07:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb0b:	75 c1                	jne    c000bace <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb0d:	43                   	inc    ebx
c000bb0e:	83 fb 20             	cmp    ebx,0x20
c000bb11:	0f 85 79 ff ff ff    	jne    c000ba90 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb17:	83 c4 2c             	add    esp,0x2c
c000bb1a:	5b                   	pop    ebx
c000bb1b:	5e                   	pop    esi
c000bb1c:	5f                   	pop    edi
c000bb1d:	5d                   	pop    ebp
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb20:	55                   	push   ebp
c000bb21:	57                   	push   edi
c000bb22:	56                   	push   esi
c000bb23:	53                   	push   ebx
c000bb24:	83 ec 48             	sub    esp,0x48
c000bb27:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb2b:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb2f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb33:	c1 e0 08             	shl    eax,0x8
c000bb36:	01 d0                	add    eax,edx
c000bb38:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb40:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb44:	c1 e0 08             	shl    eax,0x8
c000bb47:	01 d0                	add    eax,edx
c000bb49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb51:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb65:	50                   	push   eax
c000bb66:	e8 9d 3f 00 00       	call   c000fb08 <malloc>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	89 c5                	mov    ebp,eax
c000bb72:	75 10                	jne    c000bb84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	68 30 3b 02 c0       	push   0xc0023b30
c000bb7c:	e8 cd 42 00 00       	call   c000fe4e <KePanic(char const*)>
c000bb81:	83 c4 10             	add    esp,0x10
c000bb84:	52                   	push   edx
c000bb85:	bf 12 00 00 00       	mov    edi,0x12
c000bb8a:	52                   	push   edx
c000bb8b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb8f:	50                   	push   eax
c000bb90:	68 40 3b 02 c0       	push   0xc0023b40
c000bb95:	e8 b4 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb9a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb9d:	83 e0 20             	and    eax,0x20
c000bba0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bba4:	85 c0                	test   eax,eax
c000bba6:	59                   	pop    ecx
c000bba7:	0f 94 c0             	sete   al
c000bbaa:	0f b6 c0             	movzx  eax,al
c000bbad:	5e                   	pop    esi
c000bbae:	50                   	push   eax
c000bbaf:	68 4a 3b 02 c0       	push   0xc0023b4a
c000bbb4:	e8 95 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bbb9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	85 c0                	test   eax,eax
c000bbc2:	89 c2                	mov    edx,eax
c000bbc4:	74 11                	je     c000bbd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbc6:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbca:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbce:	c1 ff 03             	sar    edi,0x3
c000bbd1:	0f af f9             	imul   edi,ecx
c000bbd4:	83 c7 12             	add    edi,0x12
c000bbd7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbdc:	74 07                	je     c000bbe5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bbde:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbe3:	75 12                	jne    c000bbf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bbe5:	83 ec 0c             	sub    esp,0xc
c000bbe8:	68 58 3b 02 c0       	push   0xc0023b58
c000bbed:	e8 5c b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bbf2:	e9 aa 02 00 00       	jmp    c000bea1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bbf7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bbfb:	83 f9 02             	cmp    ecx,0x2
c000bbfe:	74 0e                	je     c000bc0e <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc00:	83 f9 0a             	cmp    ecx,0xa
c000bc03:	0f 84 d1 00 00 00    	je     c000bcda <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc09:	e9 7e 02 00 00       	jmp    c000be8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc0e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc13:	75 0e                	jne    c000bc23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc15:	84 d2                	test   dl,dl
c000bc17:	75 0a                	jne    c000bc23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc19:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc1c:	83 e8 18             	sub    eax,0x18
c000bc1f:	a8 f7                	test   al,0xf7
c000bc21:	74 0d                	je     c000bc30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc23:	83 ec 0c             	sub    esp,0xc
c000bc26:	68 6d 3b 02 c0       	push   0xc0023b6d
c000bc2b:	e9 64 02 00 00       	jmp    c000be94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc30:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc38:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc3d:	31 c0                	xor    eax,eax
c000bc3f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc4b:	89 c6                	mov    esi,eax
c000bc4d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc52:	75 15                	jne    c000bc69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc54:	99                   	cdq    
c000bc55:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc59:	85 d2                	test   edx,edx
c000bc5b:	75 0c                	jne    c000bc69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc5d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc61:	29 c6                	sub    esi,eax
c000bc63:	4e                   	dec    esi
c000bc64:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc69:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc75:	75 0c                	jne    c000bc83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc77:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc7c:	c1 e2 18             	shl    edx,0x18
c000bc7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc83:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc88:	8d 46 01             	lea    eax,[esi+0x1]
c000bc8b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bc8f:	c1 e1 10             	shl    ecx,0x10
c000bc92:	89 ca                	mov    edx,ecx
c000bc94:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bc99:	c1 e1 08             	shl    ecx,0x8
c000bc9c:	09 d1                	or     ecx,edx
c000bc9e:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bca2:	09 d1                	or     ecx,edx
c000bca4:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bca8:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcac:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcb0:	c1 fa 03             	sar    edx,0x3
c000bcb3:	01 d7                	add    edi,edx
c000bcb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcb9:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bcbd:	7e 04                	jle    c000bcc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bcbf:	89 c6                	mov    esi,eax
c000bcc1:	eb 8a                	jmp    c000bc4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bcc3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bccb:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bccf:	0f 8f 6e ff ff ff    	jg     c000bc43 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcd5:	e9 ce 01 00 00       	jmp    c000bea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcda:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bcdf:	75 0e                	jne    c000bcef <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bce1:	85 c0                	test   eax,eax
c000bce3:	75 0a                	jne    c000bcef <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bce5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bce8:	83 e8 18             	sub    eax,0x18
c000bceb:	a8 f7                	test   al,0xf7
c000bced:	74 0d                	je     c000bcfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bcef:	83 ec 0c             	sub    esp,0xc
c000bcf2:	68 7b 3b 02 c0       	push   0xc0023b7b
c000bcf7:	e9 98 01 00 00       	jmp    c000be94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bcfc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd04:	31 c9                	xor    ecx,ecx
c000bd06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd0e:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd12:	0f 8d 90 01 00 00    	jge    c000bea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd1c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd20:	0f 8e 82 01 00 00    	jle    c000bea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd26:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd2a:	8d 77 01             	lea    esi,[edi+0x1]
c000bd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd31:	83 fa 7f             	cmp    edx,0x7f
c000bd34:	89 d0                	mov    eax,edx
c000bd36:	0f 8e a3 00 00 00    	jle    c000bddf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd3c:	83 e0 7f             	and    eax,0x7f
c000bd3f:	31 d2                	xor    edx,edx
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	40                   	inc    eax
c000bd46:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd4e:	75 08                	jne    c000bd58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd50:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd55:	c1 e2 18             	shl    edx,0x18
c000bd58:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd5d:	c1 e0 10             	shl    eax,0x10
c000bd60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd64:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd69:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd6d:	c1 e0 08             	shl    eax,0x8
c000bd70:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd74:	09 f8                	or     eax,edi
c000bd76:	31 ff                	xor    edi,edi
c000bd78:	09 d0                	or     eax,edx
c000bd7a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bd8c:	75 1d                	jne    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd8e:	89 c8                	mov    eax,ecx
c000bd90:	99                   	cdq    
c000bd91:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd95:	85 d2                	test   edx,edx
c000bd97:	75 12                	jne    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd9d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bda1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bda5:	49                   	dec    ecx
c000bda6:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdaf:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdb2:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdb6:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdba:	8d 47 01             	lea    eax,[edi+0x1]
c000bdbd:	7e 06                	jle    c000bdc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bdbf:	89 c7                	mov    edi,eax
c000bdc1:	89 d1                	mov    ecx,edx
c000bdc3:	eb c2                	jmp    c000bd87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bdc5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdc9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdcd:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdd1:	c1 f8 03             	sar    eax,0x3
c000bdd4:	01 c6                	add    esi,eax
c000bdd6:	89 d1                	mov    ecx,edx
c000bdd8:	89 f7                	mov    edi,esi
c000bdda:	e9 2f ff ff ff       	jmp    c000bd0e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bddf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bde7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bdeb:	40                   	inc    eax
c000bdec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdf5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdfe:	75 1d                	jne    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be00:	89 c8                	mov    eax,ecx
c000be02:	99                   	cdq    
c000be03:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be07:	85 d2                	test   edx,edx
c000be09:	75 12                	jne    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be0f:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be13:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be17:	49                   	dec    ecx
c000be18:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be1d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be21:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be29:	75 0c                	jne    c000be37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be2b:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be30:	c1 e7 18             	shl    edi,0x18
c000be33:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be37:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be3c:	8d 51 01             	lea    edx,[ecx+0x1]
c000be3f:	c1 e0 10             	shl    eax,0x10
c000be42:	89 c7                	mov    edi,eax
c000be44:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be49:	c1 e0 08             	shl    eax,0x8
c000be4c:	09 f8                	or     eax,edi
c000be4e:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be52:	09 f8                	or     eax,edi
c000be54:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be58:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be60:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be64:	c1 f8 03             	sar    eax,0x3
c000be67:	01 c6                	add    esi,eax
c000be69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be6d:	40                   	inc    eax
c000be6e:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be72:	7e 0b                	jle    c000be7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be78:	89 d1                	mov    ecx,edx
c000be7a:	e9 7a ff ff ff       	jmp    c000bdf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be7f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be83:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be87:	e9 4a ff ff ff       	jmp    c000bdd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000be8c:	50                   	push   eax
c000be8d:	50                   	push   eax
c000be8e:	51                   	push   ecx
c000be8f:	68 8a 3b 02 c0       	push   0xc0023b8a
c000be94:	e8 b5 b0 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000be99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be9c:	e8 77 3c 00 00       	call   c000fb18 <free>
c000bea1:	83 c4 10             	add    esp,0x10
c000bea4:	31 ed                	xor    ebp,ebp
c000bea6:	eb 14                	jmp    c000bebc <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000bea8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000beac:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000beb0:	89 18                	mov    DWORD PTR [eax],ebx
c000beb2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beb6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beba:	89 18                	mov    DWORD PTR [eax],ebx
c000bebc:	83 c4 3c             	add    esp,0x3c
c000bebf:	89 e8                	mov    eax,ebp
c000bec1:	5b                   	pop    ebx
c000bec2:	5e                   	pop    esi
c000bec3:	5f                   	pop    edi
c000bec4:	5d                   	pop    ebp
c000bec5:	c3                   	ret    

c000bec6 <Video::putTGA(int, int, unsigned char*, int)>:
c000bec6:	55                   	push   ebp
c000bec7:	57                   	push   edi
c000bec8:	56                   	push   esi
c000bec9:	53                   	push   ebx
c000beca:	83 ec 28             	sub    esp,0x28
c000becd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bed1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bed5:	50                   	push   eax
c000bed6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000beda:	50                   	push   eax
c000bedb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bedf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bee3:	55                   	push   ebp
c000bee4:	e8 37 fc ff ff       	call   c000bb20 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bee9:	83 c4 20             	add    esp,0x20
c000beec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bef0:	85 c0                	test   eax,eax
c000bef2:	74 3b                	je     c000bf2f <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bef4:	89 c6                	mov    esi,eax
c000bef6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000befa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000befe:	39 d8                	cmp    eax,ebx
c000bf00:	7e 2d                	jle    c000bf2f <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf02:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf0a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf0e:	39 f8                	cmp    eax,edi
c000bf10:	7e 1a                	jle    c000bf2c <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf12:	83 c6 04             	add    esi,0x4
c000bf15:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf18:	85 c0                	test   eax,eax
c000bf1a:	79 0d                	jns    c000bf29 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf1c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf1f:	50                   	push   eax
c000bf20:	53                   	push   ebx
c000bf21:	57                   	push   edi
c000bf22:	55                   	push   ebp
c000bf23:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf26:	83 c4 10             	add    esp,0x10
c000bf29:	47                   	inc    edi
c000bf2a:	eb da                	jmp    c000bf06 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf2c:	43                   	inc    ebx
c000bf2d:	eb c7                	jmp    c000bef6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf2f:	83 c4 1c             	add    esp,0x1c
c000bf32:	5b                   	pop    ebx
c000bf33:	5e                   	pop    esi
c000bf34:	5f                   	pop    edi
c000bf35:	5d                   	pop    ebp
c000bf36:	c3                   	ret    
c000bf37:	90                   	nop

c000bf38 <ACPI::close(int, int, void*)>:
c000bf38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf3d:	c3                   	ret    
c000bf3e:	66 90                	xchg   ax,ax

c000bf40 <loadACPITables(unsigned char*)>:
c000bf40:	57                   	push   edi
c000bf41:	56                   	push   esi
c000bf42:	53                   	push   ebx
c000bf43:	83 ec 60             	sub    esp,0x60
c000bf46:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf4b:	0f 84 43 02 00 00    	je     c000c194 <loadACPITables(unsigned char*)+0x254>
c000bf51:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bf56:	0f b6 c0             	movzx  eax,al
c000bf59:	85 c0                	test   eax,eax
c000bf5b:	74 7b                	je     c000bfd8 <loadACPITables(unsigned char*)+0x98>
c000bf5d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf6c:	83 e8 24             	sub    eax,0x24
c000bf6f:	c1 e8 03             	shr    eax,0x3
c000bf72:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf76:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf7e:	66 90                	xchg   ax,ax
c000bf80:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf84:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf88:	0f 8d ba 00 00 00    	jge    c000c048 <loadACPITables(unsigned char*)+0x108>
c000bf8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf92:	83 c0 24             	add    eax,0x24
c000bf95:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf99:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf9d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfa1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa5:	c1 e0 03             	shl    eax,0x3
c000bfa8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfb3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfb5:	89 c1                	mov    ecx,eax
c000bfb7:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000bfbc:	8d 50 01             	lea    edx,[eax+0x1]
c000bfbf:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000bfc5:	89 ca                	mov    edx,ecx
c000bfc7:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000bfce:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfd3:	eb ab                	jmp    c000bf80 <loadACPITables(unsigned char*)+0x40>
c000bfd5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfd8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfdc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfe0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfe7:	83 e8 24             	sub    eax,0x24
c000bfea:	c1 e8 02             	shr    eax,0x2
c000bfed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bff1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bff9:	8d 76 00             	lea    esi,[esi+0x0]
c000bffc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c000:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c004:	7d 42                	jge    c000c048 <loadACPITables(unsigned char*)+0x108>
c000c006:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c00a:	83 c0 24             	add    eax,0x24
c000c00d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c011:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c015:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c019:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c01d:	c1 e0 02             	shl    eax,0x2
c000c020:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c024:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c028:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c02a:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c02f:	8d 50 01             	lea    edx,[eax+0x1]
c000c032:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c038:	89 ca                	mov    edx,ecx
c000c03a:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c041:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c046:	eb b4                	jmp    c000bffc <loadACPITables(unsigned char*)+0xbc>
c000c048:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c050:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c055:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c059:	0f 8d 39 01 00 00    	jge    c000c198 <loadACPITables(unsigned char*)+0x258>
c000c05f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c063:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c06a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c06e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c072:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07a:	25 ff 0f 00 00       	and    eax,0xfff
c000c07f:	89 c6                	mov    esi,eax
c000c081:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c087:	83 ec 0c             	sub    esp,0xc
c000c08a:	6a 01                	push   0x1
c000c08c:	e8 2c 72 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c098:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c09e:	83 ec 0c             	sub    esp,0xc
c000c0a1:	6a 01                	push   0x1
c000c0a3:	6a 01                	push   0x1
c000c0a5:	50                   	push   eax
c000c0a6:	52                   	push   edx
c000c0a7:	53                   	push   ebx
c000c0a8:	e8 e3 7a 00 00       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0ad:	83 c4 20             	add    esp,0x20
c000c0b0:	09 f0                	or     eax,esi
c000c0b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0b6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0ba:	c1 e0 03             	shl    eax,0x3
c000c0bd:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c0c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ce:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0ea:	89 c6                	mov    esi,eax
c000c0ec:	89 d7                	mov    edi,edx
c000c0ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0f0:	89 c8                	mov    eax,ecx
c000c0f2:	89 fa                	mov    edx,edi
c000c0f4:	89 f3                	mov    ebx,esi
c000c0f6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c0fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c109:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c111:	05 00 10 00 00       	add    eax,0x1000
c000c116:	c1 e8 0c             	shr    eax,0xc
c000c119:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c11d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c121:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c125:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c129:	25 ff 0f 00 00       	and    eax,0xfff
c000c12e:	89 c6                	mov    esi,eax
c000c130:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c136:	83 ec 0c             	sub    esp,0xc
c000c139:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c13d:	e8 7b 71 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c000c142:	83 c4 10             	add    esp,0x10
c000c145:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c149:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c14f:	83 ec 0c             	sub    esp,0xc
c000c152:	6a 01                	push   0x1
c000c154:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c158:	50                   	push   eax
c000c159:	52                   	push   edx
c000c15a:	53                   	push   ebx
c000c15b:	e8 30 7a 00 00       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c160:	83 c4 20             	add    esp,0x20
c000c163:	09 f0                	or     eax,esi
c000c165:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c16d:	83 ec 0c             	sub    esp,0xc
c000c170:	50                   	push   eax
c000c171:	e8 45 74 00 00       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c17d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c181:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c188:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c18d:	e9 be fe ff ff       	jmp    c000c050 <loadACPITables(unsigned char*)+0x110>
c000c192:	66 90                	xchg   ax,ax
c000c194:	90                   	nop
c000c195:	8d 76 00             	lea    esi,[esi+0x0]
c000c198:	83 c4 60             	add    esp,0x60
c000c19b:	5b                   	pop    ebx
c000c19c:	5e                   	pop    esi
c000c19d:	5f                   	pop    edi
c000c19e:	c3                   	ret    
c000c19f:	90                   	nop

c000c1a0 <findRSDT(unsigned char*)>:
c000c1a0:	57                   	push   edi
c000c1a1:	56                   	push   esi
c000c1a2:	53                   	push   ebx
c000c1a3:	83 ec 50             	sub    esp,0x50
c000c1a6:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c1ab:	85 c0                	test   eax,eax
c000c1ad:	75 0d                	jne    c000c1bc <findRSDT(unsigned char*)+0x1c>
c000c1af:	b8 00 00 00 00       	mov    eax,0x0
c000c1b4:	e9 2b 01 00 00       	jmp    c000c2e4 <findRSDT(unsigned char*)+0x144>
c000c1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1bc:	89 e0                	mov    eax,esp
c000c1be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1ca:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1e6:	89 c6                	mov    esi,eax
c000c1e8:	89 d7                	mov    edi,edx
c000c1ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1ec:	89 c8                	mov    eax,ecx
c000c1ee:	89 fa                	mov    edx,edi
c000c1f0:	89 f3                	mov    ebx,esi
c000c1f2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1f6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1fe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c202:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c206:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c20e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c212:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c216:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c222:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c226:	25 ff 0f 00 00       	and    eax,0xfff
c000c22b:	89 c6                	mov    esi,eax
c000c22d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c233:	83 ec 0c             	sub    esp,0xc
c000c236:	6a 02                	push   0x2
c000c238:	e8 80 70 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c000c23d:	83 c4 10             	add    esp,0x10
c000c240:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c244:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	6a 01                	push   0x1
c000c24f:	6a 02                	push   0x2
c000c251:	50                   	push   eax
c000c252:	52                   	push   edx
c000c253:	53                   	push   ebx
c000c254:	e8 37 79 00 00       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c259:	83 c4 20             	add    esp,0x20
c000c25c:	09 f0                	or     eax,esi
c000c25e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c262:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c266:	25 ff 0f 00 00       	and    eax,0xfff
c000c26b:	89 c6                	mov    esi,eax
c000c26d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c273:	83 ec 0c             	sub    esp,0xc
c000c276:	6a 02                	push   0x2
c000c278:	e8 40 70 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c284:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c28a:	83 ec 0c             	sub    esp,0xc
c000c28d:	6a 01                	push   0x1
c000c28f:	6a 02                	push   0x2
c000c291:	50                   	push   eax
c000c292:	52                   	push   edx
c000c293:	53                   	push   ebx
c000c294:	e8 f7 78 00 00       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c299:	83 c4 20             	add    esp,0x20
c000c29c:	09 f0                	or     eax,esi
c000c29e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2a2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2a7:	85 c0                	test   eax,eax
c000c2a9:	75 11                	jne    c000c2bc <findRSDT(unsigned char*)+0x11c>
c000c2ab:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c2b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2ba:	eb 24                	jmp    c000c2e0 <findRSDT(unsigned char*)+0x140>
c000c2bc:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2c1:	83 f8 02             	cmp    eax,0x2
c000c2c4:	75 12                	jne    c000c2d8 <findRSDT(unsigned char*)+0x138>
c000c2c6:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c2cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2d5:	eb 09                	jmp    c000c2e0 <findRSDT(unsigned char*)+0x140>
c000c2d7:	90                   	nop
c000c2d8:	b8 00 00 00 00       	mov    eax,0x0
c000c2dd:	eb 05                	jmp    c000c2e4 <findRSDT(unsigned char*)+0x144>
c000c2df:	90                   	nop
c000c2e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2e4:	83 c4 50             	add    esp,0x50
c000c2e7:	5b                   	pop    ebx
c000c2e8:	5e                   	pop    esi
c000c2e9:	5f                   	pop    edi
c000c2ea:	c3                   	ret    
c000c2eb:	90                   	nop

c000c2ec <findDataTable(unsigned char*, char*)>:
c000c2ec:	83 ec 1c             	sub    esp,0x1c
c000c2ef:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2f4:	75 0a                	jne    c000c300 <findDataTable(unsigned char*, char*)+0x14>
c000c2f6:	b8 00 00 00 00       	mov    eax,0x0
c000c2fb:	eb 5f                	jmp    c000c35c <findDataTable(unsigned char*, char*)+0x70>
c000c2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c300:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c308:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c30d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c311:	7d 41                	jge    c000c354 <findDataTable(unsigned char*, char*)+0x68>
c000c313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c317:	c1 e0 03             	shl    eax,0x3
c000c31a:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c31f:	83 ec 04             	sub    esp,0x4
c000c322:	6a 04                	push   0x4
c000c324:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c328:	50                   	push   eax
c000c329:	e8 52 40 ff ff       	call   c0000380 <memcmp>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	85 c0                	test   eax,eax
c000c333:	0f 94 c0             	sete   al
c000c336:	0f b6 c0             	movzx  eax,al
c000c339:	85 c0                	test   eax,eax
c000c33b:	74 0f                	je     c000c34c <findDataTable(unsigned char*, char*)+0x60>
c000c33d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c341:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c348:	eb 12                	jmp    c000c35c <findDataTable(unsigned char*, char*)+0x70>
c000c34a:	66 90                	xchg   ax,ax
c000c34c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c351:	eb b5                	jmp    c000c308 <findDataTable(unsigned char*, char*)+0x1c>
c000c353:	90                   	nop
c000c354:	b8 00 00 00 00       	mov    eax,0x0
c000c359:	8d 76 00             	lea    esi,[esi+0x0]
c000c35c:	83 c4 1c             	add    esp,0x1c
c000c35f:	c3                   	ret    

c000c360 <scanMADT()>:
c000c360:	53                   	push   ebx
c000c361:	83 ec 38             	sub    esp,0x38
c000c364:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c36e:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c378:	83 ec 0c             	sub    esp,0xc
c000c37b:	68 ec 3b 02 c0       	push   0xc0023bec
c000c380:	e8 c9 ab ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c385:	83 c4 10             	add    esp,0x10
c000c388:	e8 bf d6 00 00       	call   c0019a4c <HalFindRSDP()>
c000c38d:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c392:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c397:	85 c0                	test   eax,eax
c000c399:	0f 84 41 04 00 00    	je     c000c7e0 <scanMADT()+0x480>
c000c39f:	83 ec 0c             	sub    esp,0xc
c000c3a2:	68 fa 3b 02 c0       	push   0xc0023bfa
c000c3a7:	e8 a2 ab ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3b4:	83 ec 0c             	sub    esp,0xc
c000c3b7:	50                   	push   eax
c000c3b8:	e8 e3 fd ff ff       	call   c000c1a0 <findRSDT(unsigned char*)>
c000c3bd:	83 c4 10             	add    esp,0x10
c000c3c0:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c3c5:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c3ca:	85 c0                	test   eax,eax
c000c3cc:	0f 84 12 04 00 00    	je     c000c7e4 <scanMADT()+0x484>
c000c3d2:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c3d8:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3dd:	83 ec 04             	sub    esp,0x4
c000c3e0:	52                   	push   edx
c000c3e1:	50                   	push   eax
c000c3e2:	68 88 3d 02 c0       	push   0xc0023d88
c000c3e7:	e8 62 ab ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c3f4:	83 ec 0c             	sub    esp,0xc
c000c3f7:	50                   	push   eax
c000c3f8:	e8 43 fb ff ff       	call   c000bf40 <loadACPITables(unsigned char*)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c405:	83 ec 08             	sub    esp,0x8
c000c408:	68 09 3c 02 c0       	push   0xc0023c09
c000c40d:	50                   	push   eax
c000c40e:	e8 d9 fe ff ff       	call   c000c2ec <findDataTable(unsigned char*, char*)>
c000c413:	83 c4 10             	add    esp,0x10
c000c416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c41a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c41f:	0f 84 c3 03 00 00    	je     c000c7e8 <scanMADT()+0x488>
c000c425:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c42d:	8d 76 00             	lea    esi,[esi+0x0]
c000c430:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c437:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c43b:	0f 87 af 03 00 00    	ja     c000c7f0 <scanMADT()+0x490>
c000c441:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c449:	0f 87 a1 03 00 00    	ja     c000c7f0 <scanMADT()+0x490>
c000c44f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c453:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c457:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c45b:	8d 50 01             	lea    edx,[eax+0x1]
c000c45e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c462:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c466:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c46a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c472:	8d 50 01             	lea    edx,[eax+0x1]
c000c475:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c479:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c47d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c481:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c485:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c48a:	83 f8 02             	cmp    eax,0x2
c000c48d:	0f 86 59 03 00 00    	jbe    c000c7ec <scanMADT()+0x48c>
c000c493:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c498:	85 c0                	test   eax,eax
c000c49a:	75 58                	jne    c000c4f4 <scanMADT()+0x194>
c000c49c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4a0:	8d 50 01             	lea    edx,[eax+0x1]
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4ad:	0f b6 d2             	movzx  edx,dl
c000c4b0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4b4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4b8:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c9:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4cf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4d2:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c4d8:	0f b6 d2             	movzx  edx,dl
c000c4db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4df:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4e3:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c4e9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4ee:	e9 d9 02 00 00       	jmp    c000c7cc <scanMADT()+0x46c>
c000c4f3:	90                   	nop
c000c4f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f9:	83 f8 01             	cmp    eax,0x1
c000c4fc:	0f 85 1a 01 00 00    	jne    c000c61c <scanMADT()+0x2bc>
c000c502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c506:	8d 50 01             	lea    edx,[eax+0x1]
c000c509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c50d:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c513:	0f b6 d2             	movzx  edx,dl
c000c516:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c51a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c51e:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c524:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c529:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c52d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c531:	01 d0                	add    eax,edx
c000c533:	83 c0 2c             	add    eax,0x2c
c000c536:	8a 00                	mov    al,BYTE PTR [eax]
c000c538:	0f b6 d0             	movzx  edx,al
c000c53b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c53f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c542:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c546:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c54a:	0f b6 c0             	movzx  eax,al
c000c54d:	c1 e0 08             	shl    eax,0x8
c000c550:	89 d1                	mov    ecx,edx
c000c552:	09 c1                	or     ecx,eax
c000c554:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c558:	8d 50 02             	lea    edx,[eax+0x2]
c000c55b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c55f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c563:	0f b6 c0             	movzx  eax,al
c000c566:	c1 e0 10             	shl    eax,0x10
c000c569:	09 c1                	or     ecx,eax
c000c56b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56f:	8d 50 03             	lea    edx,[eax+0x3]
c000c572:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c576:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c57a:	0f b6 c0             	movzx  eax,al
c000c57d:	c1 e0 18             	shl    eax,0x18
c000c580:	09 c1                	or     ecx,eax
c000c582:	89 ca                	mov    edx,ecx
c000c584:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c589:	0f b6 c0             	movzx  eax,al
c000c58c:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c593:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a0:	01 d0                	add    eax,edx
c000c5a2:	83 c0 2c             	add    eax,0x2c
c000c5a5:	8a 00                	mov    al,BYTE PTR [eax]
c000c5a7:	0f b6 d0             	movzx  edx,al
c000c5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5b9:	0f b6 c0             	movzx  eax,al
c000c5bc:	c1 e0 08             	shl    eax,0x8
c000c5bf:	89 d1                	mov    ecx,edx
c000c5c1:	09 c1                	or     ecx,eax
c000c5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c7:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5d2:	0f b6 c0             	movzx  eax,al
c000c5d5:	c1 e0 10             	shl    eax,0x10
c000c5d8:	09 c1                	or     ecx,eax
c000c5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5de:	8d 50 03             	lea    edx,[eax+0x3]
c000c5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	c1 e0 18             	shl    eax,0x18
c000c5ef:	09 c1                	or     ecx,eax
c000c5f1:	89 ca                	mov    edx,ecx
c000c5f3:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5f8:	0f b6 c0             	movzx  eax,al
c000c5fb:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c602:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c607:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c60c:	83 c0 01             	add    eax,0x1
c000c60f:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c614:	e9 b3 01 00 00       	jmp    c000c7cc <scanMADT()+0x46c>
c000c619:	8d 76 00             	lea    esi,[esi+0x0]
c000c61c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c621:	83 f8 02             	cmp    eax,0x2
c000c624:	0f 85 ea 00 00 00    	jne    c000c714 <scanMADT()+0x3b4>
c000c62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c62e:	8d 50 01             	lea    edx,[eax+0x1]
c000c631:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c635:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c639:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c63d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c645:	8d 50 01             	lea    edx,[eax+0x1]
c000c648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c64c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c650:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c654:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c658:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c65c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c660:	01 d0                	add    eax,edx
c000c662:	83 c0 2c             	add    eax,0x2c
c000c665:	8a 00                	mov    al,BYTE PTR [eax]
c000c667:	0f b6 d0             	movzx  edx,al
c000c66a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c675:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	c1 e0 08             	shl    eax,0x8
c000c67f:	89 d1                	mov    ecx,edx
c000c681:	09 c1                	or     ecx,eax
c000c683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c687:	8d 50 02             	lea    edx,[eax+0x2]
c000c68a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c68e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c692:	0f b6 c0             	movzx  eax,al
c000c695:	c1 e0 10             	shl    eax,0x10
c000c698:	09 c1                	or     ecx,eax
c000c69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69e:	8d 50 03             	lea    edx,[eax+0x3]
c000c6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6a9:	0f b6 c0             	movzx  eax,al
c000c6ac:	c1 e0 18             	shl    eax,0x18
c000c6af:	09 c8                	or     eax,ecx
c000c6b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c2:	01 d0                	add    eax,edx
c000c6c4:	83 c0 2c             	add    eax,0x2c
c000c6c7:	8a 00                	mov    al,BYTE PTR [eax]
c000c6c9:	0f b6 d0             	movzx  edx,al
c000c6cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d0:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6db:	0f b6 c0             	movzx  eax,al
c000c6de:	c1 e0 08             	shl    eax,0x8
c000c6e1:	09 d0                	or     eax,edx
c000c6e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6e8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6ed:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6f6:	88 90 48 67 02 c0    	mov    BYTE PTR [eax-0x3ffd98b8],dl
c000c6fc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c701:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c706:	66 89 94 00 20 ce 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd31e0],dx
c000c70e:	e9 b9 00 00 00       	jmp    c000c7cc <scanMADT()+0x46c>
c000c713:	90                   	nop
c000c714:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c719:	83 f8 04             	cmp    eax,0x4
c000c71c:	0f 85 9a 00 00 00    	jne    c000c7bc <scanMADT()+0x45c>
c000c722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c726:	8d 50 01             	lea    edx,[eax+0x1]
c000c729:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c731:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c735:	0f b6 c0             	movzx  eax,al
c000c738:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c73c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c740:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c744:	01 d0                	add    eax,edx
c000c746:	83 c0 2c             	add    eax,0x2c
c000c749:	8a 00                	mov    al,BYTE PTR [eax]
c000c74b:	0f b6 d0             	movzx  edx,al
c000c74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c752:	8d 48 01             	lea    ecx,[eax+0x1]
c000c755:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c759:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c75d:	0f b6 c0             	movzx  eax,al
c000c760:	c1 e0 08             	shl    eax,0x8
c000c763:	09 d0                	or     eax,edx
c000c765:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c769:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c76e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c772:	8d 50 01             	lea    edx,[eax+0x1]
c000c775:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c779:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c781:	0f b6 c0             	movzx  eax,al
c000c784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c78c:	c1 e0 08             	shl    eax,0x8
c000c78f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c793:	89 c1                	mov    ecx,eax
c000c795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c799:	c1 e0 18             	shl    eax,0x18
c000c79c:	89 c3                	mov    ebx,eax
c000c79e:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c7a3:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a6:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c7ac:	09 d9                	or     ecx,ebx
c000c7ae:	89 ca                	mov    edx,ecx
c000c7b0:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c7b7:	eb 13                	jmp    c000c7cc <scanMADT()+0x46c>
c000c7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7c1:	83 f8 05             	cmp    eax,0x5
c000c7c4:	75 06                	jne    c000c7cc <scanMADT()+0x46c>
c000c7c6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c7cb:	90                   	nop
c000c7cc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c7d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7d5:	01 d0                	add    eax,edx
c000c7d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7db:	e9 50 fc ff ff       	jmp    c000c430 <scanMADT()+0xd0>
c000c7e0:	90                   	nop
c000c7e1:	eb 0d                	jmp    c000c7f0 <scanMADT()+0x490>
c000c7e3:	90                   	nop
c000c7e4:	90                   	nop
c000c7e5:	eb 09                	jmp    c000c7f0 <scanMADT()+0x490>
c000c7e7:	90                   	nop
c000c7e8:	90                   	nop
c000c7e9:	eb 05                	jmp    c000c7f0 <scanMADT()+0x490>
c000c7eb:	90                   	nop
c000c7ec:	90                   	nop
c000c7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f0:	83 c4 38             	add    esp,0x38
c000c7f3:	5b                   	pop    ebx
c000c7f4:	c3                   	ret    
c000c7f5:	90                   	nop
c000c7f6:	66 90                	xchg   ax,ax

c000c7f8 <ACPI::ACPI()>:
c000c7f8:	83 ec 0c             	sub    esp,0xc
c000c7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ff:	83 ec 08             	sub    esp,0x8
c000c802:	68 0e 3c 02 c0       	push   0xc0023c0e
c000c807:	50                   	push   eax
c000c808:	e8 27 d3 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000c80d:	83 c4 10             	add    esp,0x10
c000c810:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c000c815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c819:	89 10                	mov    DWORD PTR [eax],edx
c000c81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c81f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c838:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c842:	e8 19 fb ff ff       	call   c000c360 <scanMADT()>
c000c847:	90                   	nop
c000c848:	83 c4 0c             	add    esp,0xc
c000c84b:	c3                   	ret    

c000c84c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c84c:	83 ec 2c             	sub    esp,0x2c
c000c84f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c853:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c857:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c85b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c85f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c864:	88 c8                	mov    al,cl
c000c866:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c86a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c86f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c877:	90                   	nop
c000c878:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c87c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c882:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c886:	0f 8d b0 00 00 00    	jge    c000c93c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c88c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c890:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c894:	83 c2 2a             	add    edx,0x2a
c000c897:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c89b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8a0:	0f b7 c0             	movzx  eax,ax
c000c8a3:	39 c2                	cmp    edx,eax
c000c8a5:	0f 85 85 00 00 00    	jne    c000c930 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8b3:	83 c2 2a             	add    edx,0x2a
c000c8b6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8ba:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8bf:	0f b6 c0             	movzx  eax,al
c000c8c2:	39 c2                	cmp    edx,eax
c000c8c4:	75 6a                	jne    c000c930 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8c6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c8cb:	85 c0                	test   eax,eax
c000c8cd:	74 3d                	je     c000c90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c8cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8d7:	83 c2 2a             	add    edx,0x2a
c000c8da:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c8de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8e5:	39 c2                	cmp    edx,eax
c000c8e7:	74 13                	je     c000c8fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8e9:	83 ec 0c             	sub    esp,0xc
c000c8ec:	68 ac 3d 02 c0       	push   0xc0023dac
c000c8f1:	e8 58 35 00 00       	call   c000fe4e <KePanic(char const*)>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8fc:	83 ec 0c             	sub    esp,0xc
c000c8ff:	68 13 3c 02 c0       	push   0xc0023c13
c000c904:	e8 45 35 00 00       	call   c000fe4e <KePanic(char const*)>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c910:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c918:	83 c2 2a             	add    edx,0x2a
c000c91b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c91f:	8b 02                	mov    eax,DWORD PTR [edx]
c000c921:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c924:	89 01                	mov    DWORD PTR [ecx],eax
c000c926:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c929:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c92e:	66 90                	xchg   ax,ax
c000c930:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c935:	e9 3e ff ff ff       	jmp    c000c878 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c93a:	66 90                	xchg   ax,ax
c000c93c:	90                   	nop
c000c93d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c941:	83 c4 2c             	add    esp,0x2c
c000c944:	c2 04 00             	ret    0x4
c000c947:	90                   	nop

c000c948 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c948:	83 ec 1c             	sub    esp,0x1c
c000c94b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c94f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c953:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c957:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c95c:	88 c8                	mov    al,cl
c000c95e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c962:	88 d0                	mov    al,dl
c000c964:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c976:	83 c2 2a             	add    edx,0x2a
c000c979:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c97d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c985:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c992:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c996:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9a5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9a9:	83 c0 01             	add    eax,0x1
c000c9ac:	88 c1                	mov    cl,al
c000c9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b2:	83 c2 2a             	add    edx,0x2a
c000c9b5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c9ce:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9dc:	8d 50 01             	lea    edx,[eax+0x1]
c000c9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9f3:	3d 00 02 00 00       	cmp    eax,0x200
c000c9f8:	75 12                	jne    c000ca0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c9fa:	83 ec 0c             	sub    esp,0xc
c000c9fd:	68 22 3c 02 c0       	push   0xc0023c22
c000ca02:	e8 47 34 00 00       	call   c000fe4e <KePanic(char const*)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	66 90                	xchg   ax,ax
c000ca0c:	90                   	nop
c000ca0d:	83 c4 1c             	add    esp,0x1c
c000ca10:	c3                   	ret    
c000ca11:	90                   	nop
c000ca12:	66 90                	xchg   ax,ax

c000ca14 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca14:	b8 00 00 00 00       	mov    eax,0x0
c000ca19:	c3                   	ret    
c000ca1a:	66 90                	xchg   ax,ax

c000ca1c <ACPI::detectPCI()>:
c000ca1c:	53                   	push   ebx
c000ca1d:	83 ec 28             	sub    esp,0x28
c000ca20:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca25:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca2a:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000ca2f:	83 ec 08             	sub    esp,0x8
c000ca32:	68 3f 3c 02 c0       	push   0xc0023c3f
c000ca37:	50                   	push   eax
c000ca38:	e8 af f8 ff ff       	call   c000c2ec <findDataTable(unsigned char*, char*)>
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca49:	74 0d                	je     c000ca58 <ACPI::detectPCI()+0x3c>
c000ca4b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca50:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca55:	8d 76 00             	lea    esi,[esi+0x0]
c000ca58:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca64:	8a 00                	mov    al,BYTE PTR [eax]
c000ca66:	0f b6 c0             	movzx  eax,al
c000ca69:	83 f8 01             	cmp    eax,0x1
c000ca6c:	75 0e                	jne    c000ca7c <ACPI::detectPCI()+0x60>
c000ca6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca78:	eb 2e                	jmp    c000caa8 <ACPI::detectPCI()+0x8c>
c000ca7a:	66 90                	xchg   ax,ax
c000ca7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca80:	8a 00                	mov    al,BYTE PTR [eax]
c000ca82:	0f b6 c0             	movzx  eax,al
c000ca85:	83 f8 02             	cmp    eax,0x2
c000ca88:	75 1e                	jne    c000caa8 <ACPI::detectPCI()+0x8c>
c000ca8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca8f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca94:	85 c0                	test   eax,eax
c000ca96:	74 10                	je     c000caa8 <ACPI::detectPCI()+0x8c>
c000ca98:	83 ec 0c             	sub    esp,0xc
c000ca9b:	68 dc 3d 02 c0       	push   0xc0023ddc
c000caa0:	e8 a9 33 00 00       	call   c000fe4e <KePanic(char const*)>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000caac:	83 f0 01             	xor    eax,0x1
c000caaf:	0f b6 c0             	movzx  eax,al
c000cab2:	85 c0                	test   eax,eax
c000cab4:	74 46                	je     c000cafc <ACPI::detectPCI()+0xe0>
c000cab6:	e8 75 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cabb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cabf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cac4:	75 0e                	jne    c000cad4 <ACPI::detectPCI()+0xb8>
c000cac6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cacb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cad0:	eb 2a                	jmp    c000cafc <ACPI::detectPCI()+0xe0>
c000cad2:	66 90                	xchg   ax,ax
c000cad4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cad9:	75 21                	jne    c000cafc <ACPI::detectPCI()+0xe0>
c000cadb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cae5:	85 c0                	test   eax,eax
c000cae7:	74 13                	je     c000cafc <ACPI::detectPCI()+0xe0>
c000cae9:	83 ec 0c             	sub    esp,0xc
c000caec:	68 dc 3d 02 c0       	push   0xc0023ddc
c000caf1:	e8 58 33 00 00       	call   c000fe4e <KePanic(char const*)>
c000caf6:	83 c4 10             	add    esp,0x10
c000caf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cafc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb01:	85 c0                	test   eax,eax
c000cb03:	0f 84 87 00 00 00    	je     c000cb90 <ACPI::detectPCI()+0x174>
c000cb09:	83 ec 0c             	sub    esp,0xc
c000cb0c:	68 44 3c 02 c0       	push   0xc0023c44
c000cb11:	e8 95 06 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cb16:	83 c4 10             	add    esp,0x10
c000cb19:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb28:	e8 db 2f 00 00       	call   c000fb08 <malloc>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	89 c3                	mov    ebx,eax
c000cb32:	83 ec 0c             	sub    esp,0xc
c000cb35:	53                   	push   ebx
c000cb36:	e8 9b 0c 01 00       	call   c001d7d6 <PCI::PCI()>
c000cb3b:	83 c4 10             	add    esp,0x10
c000cb3e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb46:	83 ec 08             	sub    esp,0x8
c000cb49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4d:	50                   	push   eax
c000cb4e:	e8 7f ce ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb5c:	83 c0 08             	add    eax,0x8
c000cb5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb61:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb66:	85 d2                	test   edx,edx
c000cb68:	74 0a                	je     c000cb74 <ACPI::detectPCI()+0x158>
c000cb6a:	ba 01 00 00 00       	mov    edx,0x1
c000cb6f:	eb 0b                	jmp    c000cb7c <ACPI::detectPCI()+0x160>
c000cb71:	8d 76 00             	lea    esi,[esi+0x0]
c000cb74:	ba 02 00 00 00       	mov    edx,0x2
c000cb79:	8d 76 00             	lea    esi,[esi+0x0]
c000cb7c:	6a 00                	push   0x0
c000cb7e:	6a 00                	push   0x0
c000cb80:	52                   	push   edx
c000cb81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb85:	ff d0                	call   eax
c000cb87:	83 c4 10             	add    esp,0x10
c000cb8a:	e9 91 00 00 00       	jmp    c000cc20 <ACPI::detectPCI()+0x204>
c000cb8f:	90                   	nop
c000cb90:	83 ec 0c             	sub    esp,0xc
c000cb93:	68 5c 3c 02 c0       	push   0xc0023c5c
c000cb98:	e8 0e 06 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cba7:	83 ec 0c             	sub    esp,0xc
c000cbaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbae:	e8 55 2f 00 00       	call   c000fb08 <malloc>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 c3                	mov    ebx,eax
c000cbb8:	83 ec 0c             	sub    esp,0xc
c000cbbb:	53                   	push   ebx
c000cbbc:	e8 1d 18 01 00       	call   c001e3de <IDE::IDE()>
c000cbc1:	83 c4 10             	add    esp,0x10
c000cbc4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cbc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbcc:	83 ec 08             	sub    esp,0x8
c000cbcf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cbd3:	50                   	push   eax
c000cbd4:	e8 f9 cd ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbe0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cbea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbee:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cbf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbfb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc08:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc0a:	83 c0 08             	add    eax,0x8
c000cc0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc0f:	6a 00                	push   0x0
c000cc11:	6a 00                	push   0x0
c000cc13:	6a 00                	push   0x0
c000cc15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc19:	ff d0                	call   eax
c000cc1b:	83 c4 10             	add    esp,0x10
c000cc1e:	66 90                	xchg   ax,ax
c000cc20:	90                   	nop
c000cc21:	83 c4 28             	add    esp,0x28
c000cc24:	5b                   	pop    ebx
c000cc25:	c3                   	ret    
c000cc26:	66 90                	xchg   ax,ax

c000cc28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc28:	83 ec 0c             	sub    esp,0xc
c000cc2b:	83 ec 0c             	sub    esp,0xc
c000cc2e:	68 71 3c 02 c0       	push   0xc0023c71
c000cc33:	e8 16 32 00 00       	call   c000fe4e <KePanic(char const*)>
c000cc38:	83 c4 10             	add    esp,0x10
c000cc3b:	90                   	nop
c000cc3c:	83 c4 0c             	add    esp,0xc
c000cc3f:	c3                   	ret    

c000cc40 <ACPI::open(int, int, void*)>:
c000cc40:	55                   	push   ebp
c000cc41:	89 e5                	mov    ebp,esp
c000cc43:	53                   	push   ebx
c000cc44:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc4a:	83 ec 0c             	sub    esp,0xc
c000cc4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc50:	e8 c7 fd ff ff       	call   c000ca1c <ACPI::detectPCI()>
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	83 ec 0c             	sub    esp,0xc
c000cc5b:	68 04 3e 02 c0       	push   0xc0023e04
c000cc60:	e8 46 05 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cc65:	83 c4 10             	add    esp,0x10
c000cc68:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc6d:	8a 00                	mov    al,BYTE PTR [eax]
c000cc6f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cc72:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc76:	83 f8 01             	cmp    eax,0x1
c000cc79:	75 15                	jne    c000cc90 <ACPI::open(int, int, void*)+0x50>
c000cc7b:	83 ec 0c             	sub    esp,0xc
c000cc7e:	68 82 3c 02 c0       	push   0xc0023c82
c000cc83:	e8 ea 8c 00 00       	call   c0015972 <Thr::loadKernelSymbolTable(char const*)>
c000cc88:	83 c4 10             	add    esp,0x10
c000cc8b:	eb 33                	jmp    c000ccc0 <ACPI::open(int, int, void*)+0x80>
c000cc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000cc90:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc94:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc99:	75 15                	jne    c000ccb0 <ACPI::open(int, int, void*)+0x70>
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	68 a0 3c 02 c0       	push   0xc0023ca0
c000cca3:	e8 ca 8c 00 00       	call   c0015972 <Thr::loadKernelSymbolTable(char const*)>
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	eb 13                	jmp    c000ccc0 <ACPI::open(int, int, void*)+0x80>
c000ccad:	8d 76 00             	lea    esi,[esi+0x0]
c000ccb0:	83 ec 0c             	sub    esp,0xc
c000ccb3:	68 be 3c 02 c0       	push   0xc0023cbe
c000ccb8:	e8 91 31 00 00       	call   c000fe4e <KePanic(char const*)>
c000ccbd:	83 c4 10             	add    esp,0x10
c000ccc0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccc4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cccb:	83 ec 0c             	sub    esp,0xc
c000ccce:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000ccd1:	e8 32 2e 00 00       	call   c000fb08 <malloc>
c000ccd6:	83 c4 10             	add    esp,0x10
c000ccd9:	89 c3                	mov    ebx,eax
c000ccdb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cce0:	83 ec 04             	sub    esp,0x4
c000cce3:	50                   	push   eax
c000cce4:	68 d8 3c 02 c0       	push   0xc0023cd8
c000cce9:	53                   	push   ebx
c000ccea:	e8 75 b4 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c000ccef:	83 c4 10             	add    esp,0x10
c000ccf2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000ccf5:	83 ec 08             	sub    esp,0x8
c000ccf8:	6a 01                	push   0x1
c000ccfa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ccfd:	e8 80 b4 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c000cd02:	83 c4 10             	add    esp,0x10
c000cd05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd08:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd0c:	75 12                	jne    c000cd20 <ACPI::open(int, int, void*)+0xe0>
c000cd0e:	83 ec 0c             	sub    esp,0xc
c000cd11:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd14:	e8 c7 b4 ff ff       	call   c00081e0 <File::close()>
c000cd19:	83 c4 10             	add    esp,0x10
c000cd1c:	eb 06                	jmp    c000cd24 <ACPI::open(int, int, void*)+0xe4>
c000cd1e:	66 90                	xchg   ax,ax
c000cd20:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd24:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd28:	74 16                	je     c000cd40 <ACPI::open(int, int, void*)+0x100>
c000cd2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd2f:	83 c0 08             	add    eax,0x8
c000cd32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd3a:	ff d0                	call   eax
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	90                   	nop
c000cd40:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd43:	83 f0 01             	xor    eax,0x1
c000cd46:	0f b6 c0             	movzx  eax,al
c000cd49:	85 c0                	test   eax,eax
c000cd4b:	74 27                	je     c000cd74 <ACPI::open(int, int, void*)+0x134>
c000cd4d:	83 ec 0c             	sub    esp,0xc
c000cd50:	68 f6 3c 02 c0       	push   0xc0023cf6
c000cd55:	e8 51 04 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cd5a:	83 c4 10             	add    esp,0x10
c000cd5d:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd64:	83 ec 0c             	sub    esp,0xc
c000cd67:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cd6a:	e8 73 67 00 00       	call   c00134e2 <Virt::setupPageSwapping(int)>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	66 90                	xchg   ax,ax
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	68 11 3d 02 c0       	push   0xc0023d11
c000cd7c:	e8 2a 04 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cd81:	83 c4 10             	add    esp,0x10
c000cd84:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd87:	83 ec 08             	sub    esp,0x8
c000cd8a:	6a 13                	push   0x13
c000cd8c:	50                   	push   eax
c000cd8d:	e8 6e cf ff ff       	call   c0009d00 <getDevicesOfType(DeviceType)>
c000cd92:	83 c4 0c             	add    esp,0xc
c000cd95:	8d 76 00             	lea    esi,[esi+0x0]
c000cd98:	83 ec 0c             	sub    esp,0xc
c000cd9b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd9e:	50                   	push   eax
c000cd9f:	e8 18 53 01 00       	call   c00220bc <LinkedList<Device>::isEmpty()>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	83 f0 01             	xor    eax,0x1
c000cdaa:	0f b6 c0             	movzx  eax,al
c000cdad:	85 c0                	test   eax,eax
c000cdaf:	0f 84 1f 01 00 00    	je     c000ced4 <ACPI::open(int, int, void*)+0x294>
c000cdb5:	83 ec 0c             	sub    esp,0xc
c000cdb8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdbb:	50                   	push   eax
c000cdbc:	e8 17 53 01 00       	call   c00220d8 <LinkedList<Device>::getFirstElement()>
c000cdc1:	83 c4 10             	add    esp,0x10
c000cdc4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdc7:	83 ec 0c             	sub    esp,0xc
c000cdca:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdcd:	50                   	push   eax
c000cdce:	e8 0d 53 01 00       	call   c00220e0 <LinkedList<Device>::removeFirst()>
c000cdd3:	83 c4 10             	add    esp,0x10
c000cdd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000cdd9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000cddc:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000cddf:	b8 24 00 00 00       	mov    eax,0x24
c000cde4:	83 e0 fc             	and    eax,0xfffffffc
c000cde7:	89 c3                	mov    ebx,eax
c000cde9:	b8 00 00 00 00       	mov    eax,0x0
c000cdee:	66 90                	xchg   ax,ax
c000cdf0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000cdf7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000cdfe:	83 c0 04             	add    eax,0x4
c000ce01:	39 d8                	cmp    eax,ebx
c000ce03:	72 eb                	jb     c000cdf0 <ACPI::open(int, int, void*)+0x1b0>
c000ce05:	83 ec 08             	sub    esp,0x8
c000ce08:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce0e:	50                   	push   eax
c000ce0f:	83 ec 24             	sub    esp,0x24
c000ce12:	89 e1                	mov    ecx,esp
c000ce14:	b8 24 00 00 00       	mov    eax,0x24
c000ce19:	83 e0 fc             	and    eax,0xfffffffc
c000ce1c:	89 c3                	mov    ebx,eax
c000ce1e:	b8 00 00 00 00       	mov    eax,0x0
c000ce23:	90                   	nop
c000ce24:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce2b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce2e:	83 c0 04             	add    eax,0x4
c000ce31:	39 d8                	cmp    eax,ebx
c000ce33:	72 ef                	jb     c000ce24 <ACPI::open(int, int, void*)+0x1e4>
c000ce35:	e8 84 0e 01 00       	call   c001dcbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce3a:	83 c4 30             	add    esp,0x30
c000ce3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce40:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce44:	0f 84 4e ff ff ff    	je     c000cd98 <ACPI::open(int, int, void*)+0x158>
c000ce4a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce51:	83 ec 0c             	sub    esp,0xc
c000ce54:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce57:	e8 ac 2c 00 00       	call   c000fb08 <malloc>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	89 c3                	mov    ebx,eax
c000ce61:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000ce66:	83 ec 04             	sub    esp,0x4
c000ce69:	50                   	push   eax
c000ce6a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce6d:	53                   	push   ebx
c000ce6e:	e8 f1 b2 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c000ce73:	83 c4 10             	add    esp,0x10
c000ce76:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce7f:	e8 c2 b5 ff ff       	call   c0008446 <File::exists()>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	0f b6 c0             	movzx  eax,al
c000ce8a:	85 c0                	test   eax,eax
c000ce8c:	74 22                	je     c000ceb0 <ACPI::open(int, int, void*)+0x270>
c000ce8e:	83 ec 08             	sub    esp,0x8
c000ce91:	6a 01                	push   0x1
c000ce93:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce96:	e8 0f 96 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c000ce9b:	83 c4 10             	add    esp,0x10
c000ce9e:	83 ec 08             	sub    esp,0x8
c000cea1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cea4:	50                   	push   eax
c000cea5:	e8 61 98 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	8d 76 00             	lea    esi,[esi+0x0]
c000ceb0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceb4:	0f 84 de fe ff ff    	je     c000cd98 <ACPI::open(int, int, void*)+0x158>
c000ceba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cebd:	8b 00                	mov    eax,DWORD PTR [eax]
c000cebf:	83 c0 08             	add    eax,0x8
c000cec2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ceca:	ff d0                	call   eax
c000cecc:	83 c4 10             	add    esp,0x10
c000cecf:	e9 c4 fe ff ff       	jmp    c000cd98 <ACPI::open(int, int, void*)+0x158>
c000ced4:	83 ec 0c             	sub    esp,0xc
c000ced7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ceda:	50                   	push   eax
c000cedb:	e8 d8 51 01 00       	call   c00220b8 <LinkedList<Device>::~LinkedList()>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c000cee9:	83 ec 08             	sub    esp,0x8
c000ceec:	6a 01                	push   0x1
c000ceee:	68 2b 3d 02 c0       	push   0xc0023d2b
c000cef3:	e8 b2 95 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c000cef8:	83 c4 10             	add    esp,0x10
c000cefb:	83 ec 08             	sub    esp,0x8
c000cefe:	53                   	push   ebx
c000ceff:	50                   	push   eax
c000cf00:	e8 06 98 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c000cf05:	83 c4 10             	add    esp,0x10
c000cf08:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cf0d:	85 c0                	test   eax,eax
c000cf0f:	0f 84 bb 00 00 00    	je     c000cfd0 <ACPI::open(int, int, void*)+0x390>
c000cf15:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000cf1a:	85 c0                	test   eax,eax
c000cf1c:	0f 84 ae 00 00 00    	je     c000cfd0 <ACPI::open(int, int, void*)+0x390>
c000cf22:	83 ec 0c             	sub    esp,0xc
c000cf25:	68 48 3d 02 c0       	push   0xc0023d48
c000cf2a:	e8 7c 02 00 00       	call   c000d1ab <KeSetBootMessage(char const*)>
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf39:	83 ec 0c             	sub    esp,0xc
c000cf3c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf3f:	e8 c4 2b 00 00       	call   c000fb08 <malloc>
c000cf44:	83 c4 10             	add    esp,0x10
c000cf47:	89 c3                	mov    ebx,eax
c000cf49:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cf4e:	83 ec 04             	sub    esp,0x4
c000cf51:	50                   	push   eax
c000cf52:	68 65 3d 02 c0       	push   0xc0023d65
c000cf57:	53                   	push   ebx
c000cf58:	e8 07 b2 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf63:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf67:	74 13                	je     c000cf7c <ACPI::open(int, int, void*)+0x33c>
c000cf69:	83 ec 0c             	sub    esp,0xc
c000cf6c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf6f:	e8 d2 b4 ff ff       	call   c0008446 <File::exists()>
c000cf74:	83 c4 10             	add    esp,0x10
c000cf77:	0f b6 c0             	movzx  eax,al
c000cf7a:	85 c0                	test   eax,eax
c000cf7c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf80:	74 1e                	je     c000cfa0 <ACPI::open(int, int, void*)+0x360>
c000cf82:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf86:	74 18                	je     c000cfa0 <ACPI::open(int, int, void*)+0x360>
c000cf88:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cf8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf8d:	83 c0 08             	add    eax,0x8
c000cf90:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf92:	83 ec 0c             	sub    esp,0xc
c000cf95:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf98:	ff d0                	call   eax
c000cf9a:	83 c4 10             	add    esp,0x10
c000cf9d:	8d 76 00             	lea    esi,[esi+0x0]
c000cfa0:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cfa5:	83 ec 08             	sub    esp,0x8
c000cfa8:	68 82 3d 02 c0       	push   0xc0023d82
c000cfad:	50                   	push   eax
c000cfae:	e8 39 f3 ff ff       	call   c000c2ec <findDataTable(unsigned char*, char*)>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cfb9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cfbd:	74 11                	je     c000cfd0 <ACPI::open(int, int, void*)+0x390>
c000cfbf:	83 ec 08             	sub    esp,0x8
c000cfc2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cfc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfc8:	e8 5b fc ff ff       	call   c000cc28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	b8 00 00 00 00       	mov    eax,0x0
c000cfd5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfd8:	c9                   	leave  
c000cfd9:	c3                   	ret    
c000cfda:	66 90                	xchg   ax,ax

c000cfdc <KeAssertionFailed(char*, char const*, char const*, int)>:
c000cfdc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000cfe2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000cfe9:	89 c2                	mov    edx,eax
c000cfeb:	c1 fa 1f             	sar    edx,0x1f
c000cfee:	83 ec 04             	sub    esp,0x4
c000cff1:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000cff5:	51                   	push   ecx
c000cff6:	52                   	push   edx
c000cff7:	50                   	push   eax
c000cff8:	e8 03 29 00 00       	call   c000f900 <KeItoa(long long, char*)>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	83 ec 08             	sub    esp,0x8
c000d003:	68 50 3e 02 c0       	push   0xc0023e50
c000d008:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d00c:	50                   	push   eax
c000d00d:	e8 3e 36 ff ff       	call   c0000650 <strcpy>
c000d012:	83 c4 10             	add    esp,0x10
c000d015:	83 ec 08             	sub    esp,0x8
c000d018:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d01f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d023:	50                   	push   eax
c000d024:	e8 47 38 ff ff       	call   c0000870 <strcat>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	83 ec 08             	sub    esp,0x8
c000d02f:	68 5e 3e 02 c0       	push   0xc0023e5e
c000d034:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d038:	50                   	push   eax
c000d039:	e8 32 38 ff ff       	call   c0000870 <strcat>
c000d03e:	83 c4 10             	add    esp,0x10
c000d041:	83 ec 08             	sub    esp,0x8
c000d044:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d04b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d04f:	50                   	push   eax
c000d050:	e8 1b 38 ff ff       	call   c0000870 <strcat>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	83 ec 08             	sub    esp,0x8
c000d05b:	68 61 3e 02 c0       	push   0xc0023e61
c000d060:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d064:	50                   	push   eax
c000d065:	e8 06 38 ff ff       	call   c0000870 <strcat>
c000d06a:	83 c4 10             	add    esp,0x10
c000d06d:	83 ec 08             	sub    esp,0x8
c000d070:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d077:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d07b:	50                   	push   eax
c000d07c:	e8 ef 37 ff ff       	call   c0000870 <strcat>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	83 ec 08             	sub    esp,0x8
c000d087:	68 61 3e 02 c0       	push   0xc0023e61
c000d08c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d090:	50                   	push   eax
c000d091:	e8 da 37 ff ff       	call   c0000870 <strcat>
c000d096:	83 c4 10             	add    esp,0x10
c000d099:	83 ec 08             	sub    esp,0x8
c000d09c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0a0:	50                   	push   eax
c000d0a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a5:	50                   	push   eax
c000d0a6:	e8 c5 37 ff ff       	call   c0000870 <strcat>
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	83 ec 0c             	sub    esp,0xc
c000d0b1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0b5:	50                   	push   eax
c000d0b6:	e8 93 2d 00 00       	call   c000fe4e <KePanic(char const*)>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	90                   	nop
c000d0bf:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d0c5:	c3                   	ret    

c000d0c6 <KeInitialiseAtexit()>:
c000d0c6:	83 ec 10             	sub    esp,0x10
c000d0c9:	6a 60                	push   0x60
c000d0cb:	6a 00                	push   0x0
c000d0cd:	68 60 d0 02 c0       	push   0xc002d060
c000d0d2:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d0dc:	e8 0f 34 ff ff       	call   c00004f0 <memset>
c000d0e1:	83 c4 1c             	add    esp,0x1c
c000d0e4:	c3                   	ret    

c000d0e5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d0e5:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d0ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ee:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d0f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f9:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d100:	40                   	inc    eax
c000d101:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d106:	83 f8 17             	cmp    eax,0x17
c000d109:	7e 0d                	jle    c000d118 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d10b:	c7 44 24 04 63 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023e63
c000d113:	e9 36 2d 00 00       	jmp    c000fe4e <KePanic(char const*)>
c000d118:	c3                   	ret    

c000d119 <KeExecuteAtexit()>:
c000d119:	53                   	push   ebx
c000d11a:	31 db                	xor    ebx,ebx
c000d11c:	83 ec 08             	sub    esp,0x8
c000d11f:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d125:	7e 50                	jle    c000d177 <KeExecuteAtexit()+0x5e>
c000d127:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d12e:	85 c0                	test   eax,eax
c000d130:	74 42                	je     c000d174 <KeExecuteAtexit()+0x5b>
c000d132:	51                   	push   ecx
c000d133:	50                   	push   eax
c000d134:	53                   	push   ebx
c000d135:	68 7c 3e 02 c0       	push   0xc0023e7c
c000d13a:	e8 0f 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d13f:	58                   	pop    eax
c000d140:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d147:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d14e:	c7 04 24 9e 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e9e
c000d155:	e8 f4 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d15a:	c7 04 24 37 42 02 c0 	mov    DWORD PTR [esp],0xc0024237
c000d161:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d16c:	e8 dd 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d171:	83 c4 10             	add    esp,0x10
c000d174:	43                   	inc    ebx
c000d175:	eb a8                	jmp    c000d11f <KeExecuteAtexit()+0x6>
c000d177:	83 c4 08             	add    esp,0x8
c000d17a:	5b                   	pop    ebx
c000d17b:	c3                   	ret    

c000d17c <KeDisplaySplashScreen()>:
c000d17c:	53                   	push   ebx
c000d17d:	bb 01 00 00 00       	mov    ebx,0x1
c000d182:	83 ec 08             	sub    esp,0x8
c000d185:	43                   	inc    ebx
c000d186:	0f be 83 a1 3e 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc15f]
c000d18d:	85 c0                	test   eax,eax
c000d18f:	74 15                	je     c000d1a6 <KeDisplaySplashScreen()+0x2a>
c000d191:	83 ec 0c             	sub    esp,0xc
c000d194:	6a 01                	push   0x1
c000d196:	53                   	push   ebx
c000d197:	6a 00                	push   0x0
c000d199:	6a 0f                	push   0xf
c000d19b:	50                   	push   eax
c000d19c:	e8 e7 e1 00 00       	call   c001b388 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1a1:	83 c4 20             	add    esp,0x20
c000d1a4:	eb df                	jmp    c000d185 <KeDisplaySplashScreen()+0x9>
c000d1a6:	83 c4 08             	add    esp,0x8
c000d1a9:	5b                   	pop    ebx
c000d1aa:	c3                   	ret    

c000d1ab <KeSetBootMessage(char const*)>:
c000d1ab:	57                   	push   edi
c000d1ac:	56                   	push   esi
c000d1ad:	53                   	push   ebx
c000d1ae:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d1b4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d1bb:	68 9e 00 00 00       	push   0x9e
c000d1c0:	6a 00                	push   0x0
c000d1c2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d1c6:	56                   	push   esi
c000d1c7:	e8 24 33 ff ff       	call   c00004f0 <memset>
c000d1cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d1cf:	e8 ac 33 ff ff       	call   c0000580 <strlen>
c000d1d4:	ba 50 00 00 00       	mov    edx,0x50
c000d1d9:	83 c4 10             	add    esp,0x10
c000d1dc:	31 c9                	xor    ecx,ecx
c000d1de:	29 c2                	sub    edx,eax
c000d1e0:	83 e2 fe             	and    edx,0xfffffffe
c000d1e3:	01 f2                	add    edx,esi
c000d1e5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d1ea:	84 c0                	test   al,al
c000d1ec:	74 0a                	je     c000d1f8 <KeSetBootMessage(char const*)+0x4d>
c000d1ee:	80 cc 07             	or     ah,0x7
c000d1f1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d1f5:	41                   	inc    ecx
c000d1f6:	eb ed                	jmp    c000d1e5 <KeSetBootMessage(char const*)+0x3a>
c000d1f8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d1fd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d202:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d204:	50                   	push   eax
c000d205:	50                   	push   eax
c000d206:	53                   	push   ebx
c000d207:	68 b6 3e 02 c0       	push   0xc0023eb6
c000d20c:	e8 3d 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d211:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d217:	5b                   	pop    ebx
c000d218:	5e                   	pop    esi
c000d219:	5f                   	pop    edi
c000d21a:	c3                   	ret    

c000d21b <__cxa_atexit>:
c000d21b:	31 c0                	xor    eax,eax
c000d21d:	c3                   	ret    

c000d21e <__cxa_finalize>:
c000d21e:	c3                   	ret    

c000d21f <__stack_chk_fail>:
c000d21f:	55                   	push   ebp
c000d220:	89 e5                	mov    ebp,esp
c000d222:	83 ec 10             	sub    esp,0x10
c000d225:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d228:	68 c4 3e 02 c0       	push   0xc0023ec4
c000d22d:	e8 1c 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d232:	58                   	pop    eax
c000d233:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d236:	5a                   	pop    edx
c000d237:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d23a:	68 c4 3e 02 c0       	push   0xc0023ec4
c000d23f:	e8 0a 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d244:	c7 04 24 cc 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ecc
c000d24b:	e8 fe 2b 00 00       	call   c000fe4e <KePanic(char const*)>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	c9                   	leave  
c000d254:	c3                   	ret    

c000d255 <__cxa_pure_virtual>:
c000d255:	83 ec 18             	sub    esp,0x18
c000d258:	68 e4 3e 02 c0       	push   0xc0023ee4
c000d25d:	e8 ec 2b 00 00       	call   c000fe4e <KePanic(char const*)>
c000d262:	83 c4 1c             	add    esp,0x1c
c000d265:	c3                   	ret    

c000d266 <operator new[](unsigned long)>:
c000d266:	e9 9d 28 00 00       	jmp    c000fb08 <malloc>

c000d26b <operator delete(void*, unsigned long)>:
c000d26b:	e9 b8 28 00 00       	jmp    c000fb28 <rfree>

c000d270 <operator delete[](void*)>:
c000d270:	e9 b3 28 00 00       	jmp    c000fb28 <rfree>

c000d275 <operator delete[](void*, unsigned long)>:
c000d275:	e9 ae 28 00 00       	jmp    c000fb28 <rfree>
c000d27a:	66 90                	xchg   ax,ax

c000d27c <CUnlockScheduler>:
c000d27c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000d284:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d289:	85 c0                	test   eax,eax
c000d28b:	75 03                	jne    c000d290 <CUnlockScheduler+0x14>
c000d28d:	fb                   	sti    
c000d28e:	66 90                	xchg   ax,ax
c000d290:	90                   	nop
c000d291:	c3                   	ret    
c000d292:	66 90                	xchg   ax,ax

c000d294 <CLockScheduler>:
c000d294:	fa                   	cli    
c000d295:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d29a:	83 c0 01             	add    eax,0x1
c000d29d:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000d2a2:	90                   	nop
c000d2a3:	c3                   	ret    

c000d2a4 <CPrintf>:
c000d2a4:	83 ec 0c             	sub    esp,0xc
c000d2a7:	83 ec 08             	sub    esp,0x8
c000d2aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2ae:	68 f7 3e 02 c0       	push   0xc0023ef7
c000d2b3:	e8 96 9c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d2b8:	83 c4 10             	add    esp,0x10
c000d2bb:	90                   	nop
c000d2bc:	83 c4 0c             	add    esp,0xc
c000d2bf:	c3                   	ret    

c000d2c0 <CmOpen(char const*)>:
c000d2c0:	57                   	push   edi
c000d2c1:	56                   	push   esi
c000d2c2:	53                   	push   ebx
c000d2c3:	83 ec 1c             	sub    esp,0x1c
c000d2c6:	6a 30                	push   0x30
c000d2c8:	e8 3b 28 00 00       	call   c000fb08 <malloc>
c000d2cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d2d4:	89 c3                	mov    ebx,eax
c000d2d6:	e8 2d 28 00 00       	call   c000fb08 <malloc>
c000d2db:	83 c4 0c             	add    esp,0xc
c000d2de:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000d2e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2e8:	89 c6                	mov    esi,eax
c000d2ea:	50                   	push   eax
c000d2eb:	e8 74 ae ff ff       	call   c0008164 <File::File(char const*, Process*)>
c000d2f0:	83 c4 0c             	add    esp,0xc
c000d2f3:	89 33                	mov    DWORD PTR [ebx],esi
c000d2f5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d2f9:	50                   	push   eax
c000d2fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d2fe:	50                   	push   eax
c000d2ff:	56                   	push   esi
c000d300:	e8 7f b1 ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c000d305:	5a                   	pop    edx
c000d306:	59                   	pop    ecx
c000d307:	6a 01                	push   0x1
c000d309:	ff 33                	push   DWORD PTR [ebx]
c000d30b:	e8 72 ae ff ff       	call   c0008182 <File::open(FileOpenMode)>
c000d310:	5e                   	pop    esi
c000d311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d315:	e8 ee 27 00 00       	call   c000fb08 <malloc>
c000d31a:	5a                   	pop    edx
c000d31b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d31f:	89 c7                	mov    edi,eax
c000d321:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d323:	8b 10                	mov    edx,DWORD PTR [eax]
c000d325:	56                   	push   esi
c000d326:	57                   	push   edi
c000d327:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d32b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d32f:	50                   	push   eax
c000d330:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d333:	83 c4 14             	add    esp,0x14
c000d336:	ff 33                	push   DWORD PTR [ebx]
c000d338:	e8 a3 ae ff ff       	call   c00081e0 <File::close()>
c000d33d:	59                   	pop    ecx
c000d33e:	58                   	pop    eax
c000d33f:	6a 13                	push   0x13
c000d341:	ff 33                	push   DWORD PTR [ebx]
c000d343:	e8 3a ae ff ff       	call   c0008182 <File::open(FileOpenMode)>
c000d348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d34a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d34c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d34f:	57                   	push   edi
c000d350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d358:	50                   	push   eax
c000d359:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d35c:	83 c4 14             	add    esp,0x14
c000d35f:	57                   	push   edi
c000d360:	e8 b3 27 00 00       	call   c000fb18 <free>
c000d365:	83 c4 10             	add    esp,0x10
c000d368:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d36b:	75 10                	jne    c000d37d <CmOpen(char const*)+0xbd>
c000d36d:	83 ec 0c             	sub    esp,0xc
c000d370:	68 fa 3e 02 c0       	push   0xc0023efa
c000d375:	e8 d4 2a 00 00       	call   c000fe4e <KePanic(char const*)>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	50                   	push   eax
c000d37e:	6a 00                	push   0x0
c000d380:	6a 00                	push   0x0
c000d382:	ff 33                	push   DWORD PTR [ebx]
c000d384:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d387:	e8 b4 ae ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d38c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d38e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d390:	89 34 24             	mov    DWORD PTR [esp],esi
c000d393:	57                   	push   edi
c000d394:	6a 00                	push   0x0
c000d396:	6a 2b                	push   0x2b
c000d398:	50                   	push   eax
c000d399:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d39c:	83 c4 1c             	add    esp,0x1c
c000d39f:	6a 00                	push   0x0
c000d3a1:	6a 00                	push   0x0
c000d3a3:	ff 33                	push   DWORD PTR [ebx]
c000d3a5:	e8 96 ae ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d3aa:	83 c4 0c             	add    esp,0xc
c000d3ad:	6a 08                	push   0x8
c000d3af:	68 0b 3f 02 c0       	push   0xc0023f0b
c000d3b4:	57                   	push   edi
c000d3b5:	e8 c6 2f ff ff       	call   c0000380 <memcmp>
c000d3ba:	83 c4 10             	add    esp,0x10
c000d3bd:	85 c0                	test   eax,eax
c000d3bf:	74 10                	je     c000d3d1 <CmOpen(char const*)+0x111>
c000d3c1:	83 ec 0c             	sub    esp,0xc
c000d3c4:	68 14 3f 02 c0       	push   0xc0023f14
c000d3c9:	e8 80 2a 00 00       	call   c000fe4e <KePanic(char const*)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d3d5:	83 c4 10             	add    esp,0x10
c000d3d8:	89 d8                	mov    eax,ebx
c000d3da:	5b                   	pop    ebx
c000d3db:	5e                   	pop    esi
c000d3dc:	5f                   	pop    edi
c000d3dd:	c3                   	ret    

c000d3de <CmClose(Reghive_Tag*)>:
c000d3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d3e6:	74 0b                	je     c000d3f3 <CmClose(Reghive_Tag*)+0x15>
c000d3e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3ee:	e9 ed ad ff ff       	jmp    c00081e0 <File::close()>
c000d3f3:	c3                   	ret    

c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d3f4:	53                   	push   ebx
c000d3f5:	83 ec 18             	sub    esp,0x18
c000d3f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d3fc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d400:	74 29                	je     c000d42b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d402:	50                   	push   eax
c000d403:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d408:	99                   	cdq    
c000d409:	52                   	push   edx
c000d40a:	50                   	push   eax
c000d40b:	ff 33                	push   DWORD PTR [ebx]
c000d40d:	e8 2e ae ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d412:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d414:	5a                   	pop    edx
c000d415:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d419:	8b 10                	mov    edx,DWORD PTR [eax]
c000d41b:	51                   	push   ecx
c000d41c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d420:	6a 00                	push   0x0
c000d422:	6a 2b                	push   0x2b
c000d424:	50                   	push   eax
c000d425:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d428:	83 c4 20             	add    esp,0x20
c000d42b:	83 c4 18             	add    esp,0x18
c000d42e:	5b                   	pop    ebx
c000d42f:	c3                   	ret    

c000d430 <CmGetString(Reghive_Tag*, int, char*)>:
c000d430:	55                   	push   ebp
c000d431:	57                   	push   edi
c000d432:	56                   	push   esi
c000d433:	53                   	push   ebx
c000d434:	31 db                	xor    ebx,ebx
c000d436:	83 ec 70             	sub    esp,0x70
c000d439:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d43d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d444:	50                   	push   eax
c000d445:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d44c:	55                   	push   ebp
c000d44d:	e8 a2 ff ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d452:	83 c4 10             	add    esp,0x10
c000d455:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d45a:	c1 e0 08             	shl    eax,0x8
c000d45d:	89 c2                	mov    edx,eax
c000d45f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d464:	09 d0                	or     eax,edx
c000d466:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d46b:	c1 e0 08             	shl    eax,0x8
c000d46e:	09 d0                	or     eax,edx
c000d470:	74 25                	je     c000d497 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d472:	52                   	push   edx
c000d473:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d477:	52                   	push   edx
c000d478:	6b fb 0d             	imul   edi,ebx,0xd
c000d47b:	50                   	push   eax
c000d47c:	55                   	push   ebp
c000d47d:	e8 72 ff ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d482:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d486:	b9 27 00 00 00       	mov    ecx,0x27
c000d48b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	83 c3 03             	add    ebx,0x3
c000d49a:	83 fb 15             	cmp    ebx,0x15
c000d49d:	75 b6                	jne    c000d455 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d49f:	83 c4 6c             	add    esp,0x6c
c000d4a2:	5b                   	pop    ebx
c000d4a3:	5e                   	pop    esi
c000d4a4:	5f                   	pop    edi
c000d4a5:	5d                   	pop    ebp
c000d4a6:	c3                   	ret    

c000d4a7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4a7:	83 ec 40             	sub    esp,0x40
c000d4aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4ae:	50                   	push   eax
c000d4af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4b7:	e8 38 ff ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4bc:	83 c4 10             	add    esp,0x10
c000d4bf:	83 c8 ff             	or     eax,0xffffffff
c000d4c2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d4c7:	75 19                	jne    c000d4e2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d4c9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d4ce:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d4d3:	c1 e0 08             	shl    eax,0x8
c000d4d6:	09 c2                	or     edx,eax
c000d4d8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d4dd:	c1 e0 10             	shl    eax,0x10
c000d4e0:	09 d0                	or     eax,edx
c000d4e2:	83 c4 3c             	add    esp,0x3c
c000d4e5:	c3                   	ret    

c000d4e6 <CmGetNext(Reghive_Tag*, int)>:
c000d4e6:	83 ec 40             	sub    esp,0x40
c000d4e9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4ed:	50                   	push   eax
c000d4ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4f6:	e8 f9 fe ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4fb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d500:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d505:	c1 e0 08             	shl    eax,0x8
c000d508:	09 c2                	or     edx,eax
c000d50a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d50f:	83 c4 4c             	add    esp,0x4c
c000d512:	c1 e0 10             	shl    eax,0x10
c000d515:	09 d0                	or     eax,edx
c000d517:	c3                   	ret    

c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d518:	53                   	push   ebx
c000d519:	83 ec 18             	sub    esp,0x18
c000d51c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d520:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d524:	74 29                	je     c000d54f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d526:	50                   	push   eax
c000d527:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d52c:	99                   	cdq    
c000d52d:	52                   	push   edx
c000d52e:	50                   	push   eax
c000d52f:	ff 33                	push   DWORD PTR [ebx]
c000d531:	e8 0a ad ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d536:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d538:	5a                   	pop    edx
c000d539:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d53d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d53f:	51                   	push   ecx
c000d540:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d544:	6a 00                	push   0x0
c000d546:	6a 2b                	push   0x2b
c000d548:	50                   	push   eax
c000d549:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d54c:	83 c4 20             	add    esp,0x20
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	5b                   	pop    ebx
c000d553:	c3                   	ret    

c000d554 <CmFreeExtent(Reghive_Tag*, int)>:
c000d554:	53                   	push   ebx
c000d555:	83 ec 3c             	sub    esp,0x3c
c000d558:	6a 2b                	push   0x2b
c000d55a:	6a 00                	push   0x0
c000d55c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d560:	53                   	push   ebx
c000d561:	e8 8a 2f ff ff       	call   c00004f0 <memset>
c000d566:	83 c4 0c             	add    esp,0xc
c000d569:	53                   	push   ebx
c000d56a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d572:	e8 a1 ff ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d577:	83 c4 48             	add    esp,0x48
c000d57a:	5b                   	pop    ebx
c000d57b:	c3                   	ret    

c000d57c <CmUpdateHeader(Reghive_Tag*)>:
c000d57c:	83 ec 0c             	sub    esp,0xc
c000d57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d583:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d587:	74 10                	je     c000d599 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d589:	52                   	push   edx
c000d58a:	8d 50 05             	lea    edx,[eax+0x5]
c000d58d:	52                   	push   edx
c000d58e:	6a 00                	push   0x0
c000d590:	50                   	push   eax
c000d591:	e8 82 ff ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d596:	83 c4 10             	add    esp,0x10
c000d599:	83 c4 0c             	add    esp,0xc
c000d59c:	c3                   	ret    

c000d59d <CmExpand(Reghive_Tag*, int)>:
c000d59d:	55                   	push   ebp
c000d59e:	57                   	push   edi
c000d59f:	83 cf ff             	or     edi,0xffffffff
c000d5a2:	56                   	push   esi
c000d5a3:	53                   	push   ebx
c000d5a4:	83 ec 3c             	sub    esp,0x3c
c000d5a7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d5ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d5af:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5b3:	74 59                	je     c000d60e <CmExpand(Reghive_Tag*, int)+0x71>
c000d5b5:	50                   	push   eax
c000d5b6:	31 d2                	xor    edx,edx
c000d5b8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d5bc:	31 ff                	xor    edi,edi
c000d5be:	52                   	push   edx
c000d5bf:	50                   	push   eax
c000d5c0:	ff 33                	push   DWORD PTR [ebx]
c000d5c2:	e8 79 ac ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d5c7:	83 c4 0c             	add    esp,0xc
c000d5ca:	6a 2b                	push   0x2b
c000d5cc:	6a 00                	push   0x0
c000d5ce:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d5d2:	55                   	push   ebp
c000d5d3:	e8 18 2f ff ff       	call   c00004f0 <memset>
c000d5d8:	83 c4 10             	add    esp,0x10
c000d5db:	39 f7                	cmp    edi,esi
c000d5dd:	7d 1b                	jge    c000d5fa <CmExpand(Reghive_Tag*, int)+0x5d>
c000d5df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5e1:	83 ec 0c             	sub    esp,0xc
c000d5e4:	47                   	inc    edi
c000d5e5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d5e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5eb:	51                   	push   ecx
c000d5ec:	55                   	push   ebp
c000d5ed:	6a 00                	push   0x0
c000d5ef:	6a 2b                	push   0x2b
c000d5f1:	50                   	push   eax
c000d5f2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5f5:	83 c4 20             	add    esp,0x20
c000d5f8:	eb e1                	jmp    c000d5db <CmExpand(Reghive_Tag*, int)+0x3e>
c000d5fa:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d5fd:	83 ec 0c             	sub    esp,0xc
c000d600:	01 fe                	add    esi,edi
c000d602:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d605:	53                   	push   ebx
c000d606:	e8 71 ff ff ff       	call   c000d57c <CmUpdateHeader(Reghive_Tag*)>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	83 c4 3c             	add    esp,0x3c
c000d611:	89 f8                	mov    eax,edi
c000d613:	5b                   	pop    ebx
c000d614:	5e                   	pop    esi
c000d615:	5f                   	pop    edi
c000d616:	5d                   	pop    ebp
c000d617:	c3                   	ret    

c000d618 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d618:	55                   	push   ebp
c000d619:	57                   	push   edi
c000d61a:	56                   	push   esi
c000d61b:	53                   	push   ebx
c000d61c:	83 cb ff             	or     ebx,0xffffffff
c000d61f:	83 ec 1c             	sub    esp,0x1c
c000d622:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d626:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d62a:	74 68                	je     c000d694 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d62c:	51                   	push   ecx
c000d62d:	be 2b 00 00 00       	mov    esi,0x2b
c000d632:	6a 00                	push   0x0
c000d634:	31 ff                	xor    edi,edi
c000d636:	6a 00                	push   0x0
c000d638:	31 db                	xor    ebx,ebx
c000d63a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d63d:	e8 fe ab ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d648:	76 3b                	jbe    c000d685 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d64a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d64d:	83 ec 0c             	sub    esp,0xc
c000d650:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d654:	8b 10                	mov    edx,DWORD PTR [eax]
c000d656:	51                   	push   ecx
c000d657:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d65b:	51                   	push   ecx
c000d65c:	6a 00                	push   0x0
c000d65e:	6a 01                	push   0x1
c000d660:	50                   	push   eax
c000d661:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d664:	83 c4 20             	add    esp,0x20
c000d667:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d66c:	74 26                	je     c000d694 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d66e:	52                   	push   edx
c000d66f:	43                   	inc    ebx
c000d670:	57                   	push   edi
c000d671:	56                   	push   esi
c000d672:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d675:	e8 c6 ab ff ff       	call   c0008240 <File::seek(unsigned long long)>
c000d67a:	83 c6 2b             	add    esi,0x2b
c000d67d:	83 d7 00             	adc    edi,0x0
c000d680:	83 c4 10             	add    esp,0x10
c000d683:	eb c0                	jmp    c000d645 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d685:	50                   	push   eax
c000d686:	50                   	push   eax
c000d687:	6a 40                	push   0x40
c000d689:	55                   	push   ebp
c000d68a:	e8 0e ff ff ff       	call   c000d59d <CmExpand(Reghive_Tag*, int)>
c000d68f:	83 c4 10             	add    esp,0x10
c000d692:	89 c3                	mov    ebx,eax
c000d694:	83 c4 1c             	add    esp,0x1c
c000d697:	89 d8                	mov    eax,ebx
c000d699:	5b                   	pop    ebx
c000d69a:	5e                   	pop    esi
c000d69b:	5f                   	pop    edi
c000d69c:	5d                   	pop    ebp
c000d69d:	c3                   	ret    

c000d69e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d69e:	55                   	push   ebp
c000d69f:	57                   	push   edi
c000d6a0:	56                   	push   esi
c000d6a1:	53                   	push   ebx
c000d6a2:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6a8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6af:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6b6:	e8 5d ff ff ff       	call   c000d618 <CmFindUnusedExtent(Reghive_Tag*)>
c000d6bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6bf:	83 c4 0c             	add    esp,0xc
c000d6c2:	6a 2b                	push   0x2b
c000d6c4:	6a 00                	push   0x0
c000d6c6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d6ca:	55                   	push   ebp
c000d6cb:	e8 20 2e ff ff       	call   c00004f0 <memset>
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	85 db                	test   ebx,ebx
c000d6d5:	74 12                	je     c000d6e9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d6d7:	51                   	push   ecx
c000d6d8:	55                   	push   ebp
c000d6d9:	53                   	push   ebx
c000d6da:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6e1:	e8 0e fd ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d6ed:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d6f4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d6f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6fb:	85 db                	test   ebx,ebx
c000d6fd:	74 49                	je     c000d748 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d6ff:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d704:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d70d:	c1 e0 08             	shl    eax,0x8
c000d710:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d716:	09 c8                	or     eax,ecx
c000d718:	74 11                	je     c000d72b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d71a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d71e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d722:	c1 e8 10             	shr    eax,0x10
c000d725:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d729:	eb 0f                	jmp    c000d73a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d72b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d730:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d735:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d73a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d73e:	c1 ea 08             	shr    edx,0x8
c000d741:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d746:	eb 0f                	jmp    c000d757 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d748:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d74d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d752:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d757:	52                   	push   edx
c000d758:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d75c:	50                   	push   eax
c000d75d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d761:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d768:	e8 ab fd ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	85 db                	test   ebx,ebx
c000d772:	74 12                	je     c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d774:	50                   	push   eax
c000d775:	55                   	push   ebp
c000d776:	53                   	push   ebx
c000d777:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d77e:	e8 95 fd ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d78a:	83 c4 7c             	add    esp,0x7c
c000d78d:	5b                   	pop    ebx
c000d78e:	5e                   	pop    esi
c000d78f:	5f                   	pop    edi
c000d790:	5d                   	pop    ebp
c000d791:	c3                   	ret    

c000d792 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d792:	55                   	push   ebp
c000d793:	57                   	push   edi
c000d794:	56                   	push   esi
c000d795:	53                   	push   ebx
c000d796:	bb 27 00 00 00       	mov    ebx,0x27
c000d79b:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7a1:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d7a8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7af:	e8 cc 2d ff ff       	call   c0000580 <strlen>
c000d7b4:	8d 48 26             	lea    ecx,[eax+0x26]
c000d7b7:	89 c8                	mov    eax,ecx
c000d7b9:	99                   	cdq    
c000d7ba:	f7 fb                	idiv   ebx
c000d7bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d7c9:	7e 10                	jle    c000d7db <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d7cb:	83 ec 0c             	sub    esp,0xc
c000d7ce:	68 25 3f 02 c0       	push   0xc0023f25
c000d7d3:	e8 76 26 00 00       	call   c000fe4e <KePanic(char const*)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	53                   	push   ebx
c000d7dc:	31 ed                	xor    ebp,ebp
c000d7de:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d7e2:	53                   	push   ebx
c000d7e3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7ea:	57                   	push   edi
c000d7eb:	e8 04 fc ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7f0:	83 c4 10             	add    esp,0x10
c000d7f3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d7f7:	89 f0                	mov    eax,esi
c000d7f9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d7fd:	c1 e0 08             	shl    eax,0x8
c000d800:	09 c6                	or     esi,eax
c000d802:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d806:	c1 e6 08             	shl    esi,0x8
c000d809:	09 c6                	or     esi,eax
c000d80b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d80f:	7e 72                	jle    c000d883 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d811:	85 f6                	test   esi,esi
c000d813:	75 25                	jne    c000d83a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d815:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d81a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d81e:	50                   	push   eax
c000d81f:	6a 00                	push   0x0
c000d821:	6a 00                	push   0x0
c000d823:	57                   	push   edi
c000d824:	e8 75 fe ff ff       	call   c000d69e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d829:	83 c4 10             	add    esp,0x10
c000d82c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d82f:	89 c6                	mov    esi,eax
c000d831:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d834:	c1 f8 10             	sar    eax,0x10
c000d837:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d83a:	51                   	push   ecx
c000d83b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d83f:	52                   	push   edx
c000d840:	56                   	push   esi
c000d841:	57                   	push   edi
c000d842:	e8 ad fb ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d847:	83 c4 0c             	add    esp,0xc
c000d84a:	6a 27                	push   0x27
c000d84c:	6a 00                	push   0x0
c000d84e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d852:	51                   	push   ecx
c000d853:	e8 98 2c ff ff       	call   c00004f0 <memset>
c000d858:	6b c5 27             	imul   eax,ebp,0x27
c000d85b:	83 c4 0c             	add    esp,0xc
c000d85e:	6a 27                	push   0x27
c000d860:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d867:	50                   	push   eax
c000d868:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d86c:	51                   	push   ecx
c000d86d:	e8 1e 2e ff ff       	call   c0000690 <strncpy>
c000d872:	83 c4 0c             	add    esp,0xc
c000d875:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d879:	52                   	push   edx
c000d87a:	56                   	push   esi
c000d87b:	57                   	push   edi
c000d87c:	e8 97 fc ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d881:	eb 19                	jmp    c000d89c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d883:	85 f6                	test   esi,esi
c000d885:	74 18                	je     c000d89f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d887:	52                   	push   edx
c000d888:	52                   	push   edx
c000d889:	56                   	push   esi
c000d88a:	57                   	push   edi
c000d88b:	e8 c4 fc ff ff       	call   c000d554 <CmFreeExtent(Reghive_Tag*, int)>
c000d890:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d894:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d898:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	45                   	inc    ebp
c000d8a0:	83 c3 03             	add    ebx,0x3
c000d8a3:	83 fd 07             	cmp    ebp,0x7
c000d8a6:	0f 85 47 ff ff ff    	jne    c000d7f3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8ac:	50                   	push   eax
c000d8ad:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d8b1:	50                   	push   eax
c000d8b2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8b9:	57                   	push   edi
c000d8ba:	e8 59 fc ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8bf:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d8c5:	5b                   	pop    ebx
c000d8c6:	5e                   	pop    esi
c000d8c7:	5f                   	pop    edi
c000d8c8:	5d                   	pop    ebp
c000d8c9:	c3                   	ret    

c000d8ca <CmGetMatch(char*, char*, bool, bool*)>:
c000d8ca:	56                   	push   esi
c000d8cb:	53                   	push   ebx
c000d8cc:	50                   	push   eax
c000d8cd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d8d2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8d6:	74 25                	je     c000d8fd <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d8d8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d8db:	31 db                	xor    ebx,ebx
c000d8dd:	50                   	push   eax
c000d8de:	50                   	push   eax
c000d8df:	8d 04 9d 60 67 02 c0 	lea    eax,[ebx*4-0x3ffd98a0]
c000d8e6:	50                   	push   eax
c000d8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8eb:	e8 90 2e ff ff       	call   c0000780 <strcmp>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	85 c0                	test   eax,eax
c000d8f5:	74 2e                	je     c000d925 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d8f7:	43                   	inc    ebx
c000d8f8:	83 fb 3f             	cmp    ebx,0x3f
c000d8fb:	75 e0                	jne    c000d8dd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d8fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d900:	31 db                	xor    ebx,ebx
c000d902:	51                   	push   ecx
c000d903:	51                   	push   ecx
c000d904:	8d 04 9d 60 67 02 c0 	lea    eax,[ebx*4-0x3ffd98a0]
c000d90b:	50                   	push   eax
c000d90c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d910:	e8 6b 2e ff ff       	call   c0000780 <strcmp>
c000d915:	83 c4 10             	add    esp,0x10
c000d918:	85 c0                	test   eax,eax
c000d91a:	74 09                	je     c000d925 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d91c:	43                   	inc    ebx
c000d91d:	83 fb 3f             	cmp    ebx,0x3f
c000d920:	75 e0                	jne    c000d902 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d922:	83 cb ff             	or     ebx,0xffffffff
c000d925:	5a                   	pop    edx
c000d926:	89 d8                	mov    eax,ebx
c000d928:	5b                   	pop    ebx
c000d929:	5e                   	pop    esi
c000d92a:	c3                   	ret    

c000d92b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d92b:	55                   	push   ebp
c000d92c:	31 c0                	xor    eax,eax
c000d92e:	57                   	push   edi
c000d92f:	56                   	push   esi
c000d930:	53                   	push   ebx
c000d931:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d935:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d939:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d93d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d941:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d943:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d946:	83 fd 1f             	cmp    ebp,0x1f
c000d949:	7f 0b                	jg     c000d956 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d94b:	0f b6 c2             	movzx  eax,dl
c000d94e:	d3 e0                	shl    eax,cl
c000d950:	09 07                	or     DWORD PTR [edi],eax
c000d952:	b0 01                	mov    al,0x1
c000d954:	01 33                	add    DWORD PTR [ebx],esi
c000d956:	5b                   	pop    ebx
c000d957:	5e                   	pop    esi
c000d958:	5f                   	pop    edi
c000d959:	5d                   	pop    ebp
c000d95a:	c3                   	ret    

c000d95b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d95b:	57                   	push   edi
c000d95c:	56                   	push   esi
c000d95d:	53                   	push   ebx
c000d95e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d962:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d966:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d96a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d96e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d970:	7c 17                	jl     c000d989 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d972:	8b 17                	mov    edx,DWORD PTR [edi]
c000d974:	b8 01 00 00 00       	mov    eax,0x1
c000d979:	d3 e0                	shl    eax,cl
c000d97b:	48                   	dec    eax
c000d97c:	21 d0                	and    eax,edx
c000d97e:	d3 ea                	shr    edx,cl
c000d980:	89 17                	mov    DWORD PTR [edi],edx
c000d982:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d984:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d987:	eb 05                	jmp    c000d98e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d989:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d98c:	31 c0                	xor    eax,eax
c000d98e:	5b                   	pop    ebx
c000d98f:	5e                   	pop    esi
c000d990:	5f                   	pop    edi
c000d991:	c3                   	ret    

c000d992 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d992:	83 ec 40             	sub    esp,0x40
c000d995:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d999:	50                   	push   eax
c000d99a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d99e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9a2:	e8 4d fa ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9ab:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9af:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d9b3:	89 10                	mov    DWORD PTR [eax],edx
c000d9b5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d9b8:	83 c4 4c             	add    esp,0x4c
c000d9bb:	c3                   	ret    

c000d9bc <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d9bc:	55                   	push   ebp
c000d9bd:	57                   	push   edi
c000d9be:	56                   	push   esi
c000d9bf:	53                   	push   ebx
c000d9c0:	83 ec 40             	sub    esp,0x40
c000d9c3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d9c7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d9cb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d9cf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d9d3:	53                   	push   ebx
c000d9d4:	56                   	push   esi
c000d9d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9d9:	e8 16 fa ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9de:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d9e2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d9e6:	83 c4 0c             	add    esp,0xc
c000d9e9:	53                   	push   ebx
c000d9ea:	56                   	push   esi
c000d9eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9ef:	e8 24 fb ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9f4:	83 c4 4c             	add    esp,0x4c
c000d9f7:	5b                   	pop    ebx
c000d9f8:	5e                   	pop    esi
c000d9f9:	5f                   	pop    edi
c000d9fa:	5d                   	pop    ebp
c000d9fb:	c3                   	ret    

c000d9fc <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d9fc:	55                   	push   ebp
c000d9fd:	57                   	push   edi
c000d9fe:	56                   	push   esi
c000d9ff:	31 f6                	xor    esi,esi
c000da01:	53                   	push   ebx
c000da02:	31 db                	xor    ebx,ebx
c000da04:	83 ec 40             	sub    esp,0x40
c000da07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da0f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da17:	6a 12                	push   0x12
c000da19:	68 ee 00 00 00       	push   0xee
c000da1e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da22:	e8 c9 2a ff ff       	call   c00004f0 <memset>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da2e:	6a 08                	push   0x8
c000da30:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da34:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da38:	50                   	push   eax
c000da39:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da3d:	55                   	push   ebp
c000da3e:	57                   	push   edi
c000da3f:	e8 e7 fe ff ff       	call   c000d92b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da44:	83 c4 10             	add    esp,0x10
c000da47:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da4b:	50                   	push   eax
c000da4c:	6a 06                	push   0x6
c000da4e:	55                   	push   ebp
c000da4f:	57                   	push   edi
c000da50:	e8 06 ff ff ff       	call   c000d95b <CmGetShift(unsigned int*, int*, int, bool*)>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da5d:	74 07                	je     c000da66 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da5f:	46                   	inc    esi
c000da60:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da64:	eb e1                	jmp    c000da47 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da66:	43                   	inc    ebx
c000da67:	83 fb 12             	cmp    ebx,0x12
c000da6a:	75 c2                	jne    c000da2e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da6c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da70:	31 f6                	xor    esi,esi
c000da72:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da75:	50                   	push   eax
c000da76:	50                   	push   eax
c000da77:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000da7c:	46                   	inc    esi
c000da7d:	8d 04 85 60 67 02 c0 	lea    eax,[eax*4-0x3ffd98a0]
c000da84:	50                   	push   eax
c000da85:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da89:	e8 e2 2d ff ff       	call   c0000870 <strcat>
c000da8e:	83 c4 10             	add    esp,0x10
c000da91:	83 fe 18             	cmp    esi,0x18
c000da94:	75 df                	jne    c000da75 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000da96:	83 c4 3c             	add    esp,0x3c
c000da99:	31 c0                	xor    eax,eax
c000da9b:	5b                   	pop    ebx
c000da9c:	5e                   	pop    esi
c000da9d:	5f                   	pop    edi
c000da9e:	5d                   	pop    ebp
c000da9f:	c3                   	ret    

c000daa0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000daa0:	83 ec 40             	sub    esp,0x40
c000daa3:	8d 44 24 09          	lea    eax,[esp+0x9]
c000daa7:	50                   	push   eax
c000daa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000daac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dab0:	e8 3f f9 ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dab5:	58                   	pop    eax
c000dab6:	5a                   	pop    edx
c000dab7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dabb:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dabf:	50                   	push   eax
c000dac0:	e8 37 ff ff ff       	call   c000d9fc <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dac5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000daca:	83 c4 4c             	add    esp,0x4c
c000dacd:	c3                   	ret    

c000dace <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dace:	55                   	push   ebp
c000dacf:	57                   	push   edi
c000dad0:	56                   	push   esi
c000dad1:	53                   	push   ebx
c000dad2:	31 db                	xor    ebx,ebx
c000dad4:	83 ec 70             	sub    esp,0x70
c000dad7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dade:	6a 30                	push   0x30
c000dae0:	6a 00                	push   0x0
c000dae2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dae6:	56                   	push   esi
c000dae7:	e8 04 2a ff ff       	call   c00004f0 <memset>
c000daec:	83 c4 10             	add    esp,0x10
c000daef:	83 ec 0c             	sub    esp,0xc
c000daf2:	57                   	push   edi
c000daf3:	e8 88 2a ff ff       	call   c0000580 <strlen>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	39 d8                	cmp    eax,ebx
c000dafd:	76 16                	jbe    c000db15 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000daff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	50                   	push   eax
c000db07:	e8 54 2e ff ff       	call   c0000960 <toupper>
c000db0c:	83 c4 10             	add    esp,0x10
c000db0f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db12:	43                   	inc    ebx
c000db13:	eb da                	jmp    c000daef <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db15:	52                   	push   edx
c000db16:	31 db                	xor    ebx,ebx
c000db18:	6a 18                	push   0x18
c000db1a:	31 ff                	xor    edi,edi
c000db1c:	6a 3f                	push   0x3f
c000db1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db22:	50                   	push   eax
c000db23:	e8 c8 29 ff ff       	call   c00004f0 <memset>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db2f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db33:	84 c0                	test   al,al
c000db35:	0f 84 af 00 00 00    	je     c000dbea <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db3b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db3f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db42:	83 ec 0c             	sub    esp,0xc
c000db45:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db4a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db4e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000db52:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000db57:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db5b:	56                   	push   esi
c000db5c:	e8 1f 2a ff ff       	call   c0000580 <strlen>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	85 c0                	test   eax,eax
c000db66:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db6a:	74 0b                	je     c000db77 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db6c:	50                   	push   eax
c000db6d:	6a 01                	push   0x1
c000db6f:	56                   	push   esi
c000db70:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db74:	50                   	push   eax
c000db75:	eb 0a                	jmp    c000db81 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db77:	50                   	push   eax
c000db78:	6a 00                	push   0x0
c000db7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db7e:	50                   	push   eax
c000db7f:	6a 00                	push   0x0
c000db81:	e8 44 fd ff ff       	call   c000d8ca <CmGetMatch(char*, char*, bool, bool*)>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	83 f8 ff             	cmp    eax,0xffffffff
c000db8c:	75 1a                	jne    c000dba8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000db8e:	83 ec 0c             	sub    esp,0xc
c000db91:	68 3a 3f 02 c0       	push   0xc0023f3a
c000db96:	e8 b3 22 00 00       	call   c000fe4e <KePanic(char const*)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	b8 02 00 00 00       	mov    eax,0x2
c000dba3:	e9 bb 00 00 00       	jmp    c000dc63 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dba8:	83 ff 18             	cmp    edi,0x18
c000dbab:	75 1a                	jne    c000dbc7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbad:	83 ec 0c             	sub    esp,0xc
c000dbb0:	68 4f 3f 02 c0       	push   0xc0023f4f
c000dbb5:	e8 94 22 00 00       	call   c000fe4e <KePanic(char const*)>
c000dbba:	83 c4 10             	add    esp,0x10
c000dbbd:	b8 01 00 00 00       	mov    eax,0x1
c000dbc2:	e9 9c 00 00 00       	jmp    c000dc63 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbc7:	47                   	inc    edi
c000dbc8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbcd:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dbd1:	0f 45 dd             	cmovne ebx,ebp
c000dbd4:	83 ec 0c             	sub    esp,0xc
c000dbd7:	56                   	push   esi
c000dbd8:	e8 a3 29 ff ff       	call   c0000580 <strlen>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	85 c0                	test   eax,eax
c000dbe2:	74 06                	je     c000dbea <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dbe4:	43                   	inc    ebx
c000dbe5:	e9 41 ff ff ff       	jmp    c000db2b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dbea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dbf2:	31 db                	xor    ebx,ebx
c000dbf4:	31 ff                	xor    edi,edi
c000dbf6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dbfe:	50                   	push   eax
c000dbff:	6a 12                	push   0x12
c000dc01:	68 ee 00 00 00       	push   0xee
c000dc06:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc0d:	e8 de 28 ff ff       	call   c00004f0 <memset>
c000dc12:	83 c4 10             	add    esp,0x10
c000dc15:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc19:	83 fb 17             	cmp    ebx,0x17
c000dc1c:	7e 26                	jle    c000dc44 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc1e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc22:	50                   	push   eax
c000dc23:	6a 08                	push   0x8
c000dc25:	55                   	push   ebp
c000dc26:	56                   	push   esi
c000dc27:	e8 2f fd ff ff       	call   c000d95b <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc34:	74 26                	je     c000dc5c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc36:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc3d:	4b                   	dec    ebx
c000dc3e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc41:	47                   	inc    edi
c000dc42:	eb 1c                	jmp    c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc44:	6a 06                	push   0x6
c000dc46:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc4b:	50                   	push   eax
c000dc4c:	55                   	push   ebp
c000dc4d:	56                   	push   esi
c000dc4e:	e8 d8 fc ff ff       	call   c000d92b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	84 c0                	test   al,al
c000dc58:	75 06                	jne    c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc5a:	eb c2                	jmp    c000dc1e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dc5c:	31 c0                	xor    eax,eax
c000dc5e:	eb 03                	jmp    c000dc63 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc60:	43                   	inc    ebx
c000dc61:	eb b2                	jmp    c000dc15 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dc63:	83 c4 6c             	add    esp,0x6c
c000dc66:	5b                   	pop    ebx
c000dc67:	5e                   	pop    esi
c000dc68:	5f                   	pop    edi
c000dc69:	5d                   	pop    ebp
c000dc6a:	c3                   	ret    

c000dc6b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc6b:	53                   	push   ebx
c000dc6c:	83 ec 3c             	sub    esp,0x3c
c000dc6f:	6a 2b                	push   0x2b
c000dc71:	6a 00                	push   0x0
c000dc73:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc77:	53                   	push   ebx
c000dc78:	e8 73 28 ff ff       	call   c00004f0 <memset>
c000dc7d:	58                   	pop    eax
c000dc7e:	5a                   	pop    edx
c000dc7f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc83:	50                   	push   eax
c000dc84:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc88:	e8 41 fe ff ff       	call   c000dace <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc8d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dc92:	83 c4 0c             	add    esp,0xc
c000dc95:	6a 15                	push   0x15
c000dc97:	6a 00                	push   0x0
c000dc99:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dc9d:	50                   	push   eax
c000dc9e:	e8 4d 28 ff ff       	call   c00004f0 <memset>
c000dca3:	53                   	push   ebx
c000dca4:	6a 00                	push   0x0
c000dca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcaa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcae:	e8 eb f9 ff ff       	call   c000d69e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dcb3:	83 c4 58             	add    esp,0x58
c000dcb6:	5b                   	pop    ebx
c000dcb7:	c3                   	ret    

c000dcb8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dcb8:	56                   	push   esi
c000dcb9:	53                   	push   ebx
c000dcba:	83 ec 48             	sub    esp,0x48
c000dcbd:	6a 12                	push   0x12
c000dcbf:	68 ff 00 00 00       	push   0xff
c000dcc4:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dcc8:	56                   	push   esi
c000dcc9:	e8 22 28 ff ff       	call   c00004f0 <memset>
c000dcce:	5a                   	pop    edx
c000dccf:	59                   	pop    ecx
c000dcd0:	56                   	push   esi
c000dcd1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dcd5:	e8 f4 fd ff ff       	call   c000dace <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcda:	83 c4 10             	add    esp,0x10
c000dcdd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dce1:	85 db                	test   ebx,ebx
c000dce3:	74 42                	je     c000dd27 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dce5:	50                   	push   eax
c000dce6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dcea:	50                   	push   eax
c000dceb:	53                   	push   ebx
c000dcec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcf0:	e8 ff f6 ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcf5:	83 c4 0c             	add    esp,0xc
c000dcf8:	6a 12                	push   0x12
c000dcfa:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dcfe:	50                   	push   eax
c000dcff:	56                   	push   esi
c000dd00:	e8 7b 26 ff ff       	call   c0000380 <memcmp>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	85 c0                	test   eax,eax
c000dd0a:	74 1e                	je     c000dd2a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd0c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd11:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd16:	c1 e3 08             	shl    ebx,0x8
c000dd19:	09 d8                	or     eax,ebx
c000dd1b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd20:	c1 e3 10             	shl    ebx,0x10
c000dd23:	09 c3                	or     ebx,eax
c000dd25:	eb ba                	jmp    c000dce1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd27:	83 cb ff             	or     ebx,0xffffffff
c000dd2a:	83 c4 44             	add    esp,0x44
c000dd2d:	89 d8                	mov    eax,ebx
c000dd2f:	5b                   	pop    ebx
c000dd30:	5e                   	pop    esi
c000dd31:	c3                   	ret    

c000dd32 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd32:	57                   	push   edi
c000dd33:	56                   	push   esi
c000dd34:	53                   	push   ebx
c000dd35:	83 ec 34             	sub    esp,0x34
c000dd38:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd3c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd40:	6a 2b                	push   0x2b
c000dd42:	6a 00                	push   0x0
c000dd44:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd48:	53                   	push   ebx
c000dd49:	e8 a2 27 ff ff       	call   c00004f0 <memset>
c000dd4e:	58                   	pop    eax
c000dd4f:	5a                   	pop    edx
c000dd50:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd54:	50                   	push   eax
c000dd55:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd59:	e8 70 fd ff ff       	call   c000dace <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd5e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dd62:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd66:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd6a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd6e:	53                   	push   ebx
c000dd6f:	6a 00                	push   0x0
c000dd71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd75:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd79:	e8 20 f9 ff ff       	call   c000d69e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd7e:	83 c4 50             	add    esp,0x50
c000dd81:	5b                   	pop    ebx
c000dd82:	5e                   	pop    esi
c000dd83:	5f                   	pop    edi
c000dd84:	c3                   	ret    

c000dd85 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd85:	55                   	push   ebp
c000dd86:	57                   	push   edi
c000dd87:	56                   	push   esi
c000dd88:	53                   	push   ebx
c000dd89:	83 ec 40             	sub    esp,0x40
c000dd8c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dd90:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd94:	6a 2b                	push   0x2b
c000dd96:	6a 00                	push   0x0
c000dd98:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dd9c:	56                   	push   esi
c000dd9d:	e8 4e 27 ff ff       	call   c00004f0 <memset>
c000dda2:	5f                   	pop    edi
c000dda3:	89 ef                	mov    edi,ebp
c000dda5:	58                   	pop    eax
c000dda6:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddaa:	50                   	push   eax
c000ddab:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddaf:	e8 1a fd ff ff       	call   c000dace <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddb4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000ddb9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ddbe:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ddc3:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000ddc8:	83 c4 10             	add    esp,0x10
c000ddcb:	85 ed                	test   ebp,ebp
c000ddcd:	74 14                	je     c000dde3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddcf:	51                   	push   ecx
c000ddd0:	51                   	push   ecx
c000ddd1:	57                   	push   edi
c000ddd2:	53                   	push   ebx
c000ddd3:	e8 0e f7 ff ff       	call   c000d4e6 <CmGetNext(Reghive_Tag*, int)>
c000ddd8:	83 c4 10             	add    esp,0x10
c000dddb:	85 c0                	test   eax,eax
c000dddd:	74 04                	je     c000dde3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dddf:	89 c7                	mov    edi,eax
c000dde1:	eb e8                	jmp    c000ddcb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000dde3:	56                   	push   esi
c000dde4:	6a 00                	push   0x0
c000dde6:	57                   	push   edi
c000dde7:	53                   	push   ebx
c000dde8:	e8 b1 f8 ff ff       	call   c000d69e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dded:	83 c4 0c             	add    esp,0xc
c000ddf0:	56                   	push   esi
c000ddf1:	50                   	push   eax
c000ddf2:	89 c7                	mov    edi,eax
c000ddf4:	53                   	push   ebx
c000ddf5:	e8 fa f5 ff ff       	call   c000d3f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddfa:	58                   	pop    eax
c000ddfb:	5a                   	pop    edx
c000ddfc:	6a 6c                	push   0x6c
c000ddfe:	6a 00                	push   0x0
c000de00:	6a 00                	push   0x0
c000de02:	68 60 3f 02 c0       	push   0xc0023f60
c000de07:	57                   	push   edi
c000de08:	53                   	push   ebx
c000de09:	e8 24 ff ff ff       	call   c000dd32 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de0e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de12:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de16:	c1 e8 10             	shr    eax,0x10
c000de19:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de1d:	83 c4 1c             	add    esp,0x1c
c000de20:	56                   	push   esi
c000de21:	57                   	push   edi
c000de22:	53                   	push   ebx
c000de23:	e8 f0 f6 ff ff       	call   c000d518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de28:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de2d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de32:	c1 e0 08             	shl    eax,0x8
c000de35:	09 c2                	or     edx,eax
c000de37:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de3c:	83 c4 4c             	add    esp,0x4c
c000de3f:	5b                   	pop    ebx
c000de40:	5e                   	pop    esi
c000de41:	c1 e0 10             	shl    eax,0x10
c000de44:	09 d0                	or     eax,edx
c000de46:	5f                   	pop    edi
c000de47:	5d                   	pop    ebp
c000de48:	c3                   	ret    

c000de49 <zStrtok(char*, char const*)>:
c000de49:	55                   	push   ebp
c000de4a:	57                   	push   edi
c000de4b:	56                   	push   esi
c000de4c:	53                   	push   ebx
c000de4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de55:	85 db                	test   ebx,ebx
c000de57:	74 2f                	je     c000de88 <zStrtok(char*, char const*)+0x3f>
c000de59:	85 c0                	test   eax,eax
c000de5b:	75 09                	jne    c000de66 <zStrtok(char*, char const*)+0x1d>
c000de5d:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000de62:	85 c0                	test   eax,eax
c000de64:	74 50                	je     c000deb6 <zStrtok(char*, char const*)+0x6d>
c000de66:	31 c9                	xor    ecx,ecx
c000de68:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de6c:	74 03                	je     c000de71 <zStrtok(char*, char const*)+0x28>
c000de6e:	41                   	inc    ecx
c000de6f:	eb f7                	jmp    c000de68 <zStrtok(char*, char const*)+0x1f>
c000de71:	31 d2                	xor    edx,edx
c000de73:	39 ca                	cmp    edx,ecx
c000de75:	74 15                	je     c000de8c <zStrtok(char*, char const*)+0x43>
c000de77:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de7b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de7e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de81:	39 ee                	cmp    esi,ebp
c000de83:	74 13                	je     c000de98 <zStrtok(char*, char const*)+0x4f>
c000de85:	42                   	inc    edx
c000de86:	eb eb                	jmp    c000de73 <zStrtok(char*, char const*)+0x2a>
c000de88:	31 c0                	xor    eax,eax
c000de8a:	eb 2a                	jmp    c000deb6 <zStrtok(char*, char const*)+0x6d>
c000de8c:	c7 05 c0 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c0,0x0
c000de96:	eb 1e                	jmp    c000deb6 <zStrtok(char*, char const*)+0x6d>
c000de98:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000de9b:	39 ce                	cmp    esi,ecx
c000de9d:	75 0a                	jne    c000dea9 <zStrtok(char*, char const*)+0x60>
c000de9f:	40                   	inc    eax
c000dea0:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000dea5:	89 d8                	mov    eax,ebx
c000dea7:	eb 0d                	jmp    c000deb6 <zStrtok(char*, char const*)+0x6d>
c000dea9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000deac:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000deb0:	89 15 c0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c0,edx
c000deb6:	5b                   	pop    ebx
c000deb7:	5e                   	pop    esi
c000deb8:	5f                   	pop    edi
c000deb9:	5d                   	pop    ebp
c000deba:	c3                   	ret    

c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000debb:	57                   	push   edi
c000debc:	56                   	push   esi
c000debd:	53                   	push   ebx
c000debe:	81 ec 08 01 00 00    	sub    esp,0x108
c000dec4:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000decb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000ded2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ded6:	53                   	push   ebx
c000ded7:	e8 74 27 ff ff       	call   c0000650 <strcpy>
c000dedc:	59                   	pop    ecx
c000dedd:	5e                   	pop    esi
c000dede:	68 a5 52 02 c0       	push   0xc00252a5
c000dee3:	53                   	push   ebx
c000dee4:	bb 01 00 00 00       	mov    ebx,0x1
c000dee9:	e8 5b ff ff ff       	call   c000de49 <zStrtok(char*, char const*)>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	85 c0                	test   eax,eax
c000def3:	74 3b                	je     c000df30 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000def5:	52                   	push   edx
c000def6:	50                   	push   eax
c000def7:	6a 01                	push   0x1
c000def9:	57                   	push   edi
c000defa:	e8 b9 fd ff ff       	call   c000dcb8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000deff:	59                   	pop    ecx
c000df00:	5e                   	pop    esi
c000df01:	89 c3                	mov    ebx,eax
c000df03:	68 a5 52 02 c0       	push   0xc00252a5
c000df08:	6a 00                	push   0x0
c000df0a:	e8 3a ff ff ff       	call   c000de49 <zStrtok(char*, char const*)>
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	85 c0                	test   eax,eax
c000df14:	89 c6                	mov    esi,eax
c000df16:	74 18                	je     c000df30 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df18:	52                   	push   edx
c000df19:	52                   	push   edx
c000df1a:	53                   	push   ebx
c000df1b:	57                   	push   edi
c000df1c:	e8 86 f5 ff ff       	call   c000d4a7 <CmEnterDirectory(Reghive_Tag*, int)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	83 f8 ff             	cmp    eax,0xffffffff
c000df27:	89 c3                	mov    ebx,eax
c000df29:	74 05                	je     c000df30 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df2b:	50                   	push   eax
c000df2c:	56                   	push   esi
c000df2d:	53                   	push   ebx
c000df2e:	eb c9                	jmp    c000def9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df30:	81 c4 00 01 00 00    	add    esp,0x100
c000df36:	89 d8                	mov    eax,ebx
c000df38:	5b                   	pop    ebx
c000df39:	5e                   	pop    esi
c000df3a:	5f                   	pop    edi
c000df3b:	c3                   	ret    

c000df3c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000df3c:	55                   	push   ebp
c000df3d:	57                   	push   edi
c000df3e:	56                   	push   esi
c000df3f:	53                   	push   ebx
c000df40:	83 ec 5c             	sub    esp,0x5c
c000df43:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000df47:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000df4b:	85 db                	test   ebx,ebx
c000df4d:	0f 8e 84 00 00 00    	jle    c000dfd7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000df53:	57                   	push   edi
c000df54:	31 ed                	xor    ebp,ebp
c000df56:	6a 32                	push   0x32
c000df58:	6a 00                	push   0x0
c000df5a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000df5e:	57                   	push   edi
c000df5f:	e8 8c 25 ff ff       	call   c00004f0 <memset>
c000df64:	83 c4 0c             	add    esp,0xc
c000df67:	57                   	push   edi
c000df68:	53                   	push   ebx
c000df69:	56                   	push   esi
c000df6a:	e8 31 fb ff ff       	call   c000daa0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000df6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000df7a:	7d 13                	jge    c000df8f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	45                   	inc    ebp
c000df80:	68 e3 5a 02 c0       	push   0xc0025ae3
c000df85:	e8 c4 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df8a:	83 c4 10             	add    esp,0x10
c000df8d:	eb e7                	jmp    c000df76 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000df8f:	51                   	push   ecx
c000df90:	57                   	push   edi
c000df91:	53                   	push   ebx
c000df92:	68 66 3f 02 c0       	push   0xc0023f66
c000df97:	e8 b2 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000dfa4:	75 1e                	jne    c000dfc4 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000dfa6:	52                   	push   edx
c000dfa7:	52                   	push   edx
c000dfa8:	53                   	push   ebx
c000dfa9:	56                   	push   esi
c000dfaa:	e8 f8 f4 ff ff       	call   c000d4a7 <CmEnterDirectory(Reghive_Tag*, int)>
c000dfaf:	83 c4 0c             	add    esp,0xc
c000dfb2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000dfb6:	8d 51 04             	lea    edx,[ecx+0x4]
c000dfb9:	52                   	push   edx
c000dfba:	50                   	push   eax
c000dfbb:	56                   	push   esi
c000dfbc:	e8 7b ff ff ff       	call   c000df3c <CmDisplayTree(Reghive_Tag*, int, int)>
c000dfc1:	83 c4 10             	add    esp,0x10
c000dfc4:	50                   	push   eax
c000dfc5:	50                   	push   eax
c000dfc6:	53                   	push   ebx
c000dfc7:	56                   	push   esi
c000dfc8:	e8 19 f5 ff ff       	call   c000d4e6 <CmGetNext(Reghive_Tag*, int)>
c000dfcd:	83 c4 10             	add    esp,0x10
c000dfd0:	89 c3                	mov    ebx,eax
c000dfd2:	e9 74 ff ff ff       	jmp    c000df4b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000dfd7:	83 c4 5c             	add    esp,0x5c
c000dfda:	5b                   	pop    ebx
c000dfdb:	5e                   	pop    esi
c000dfdc:	5f                   	pop    edi
c000dfdd:	5d                   	pop    ebp
c000dfde:	c3                   	ret    

c000dfdf <CmSplitFinalSlashInPlace(char*)>:
c000dfdf:	53                   	push   ebx
c000dfe0:	83 ec 14             	sub    esp,0x14
c000dfe3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfe7:	53                   	push   ebx
c000dfe8:	e8 93 25 ff ff       	call   c0000580 <strlen>
c000dfed:	83 c4 10             	add    esp,0x10
c000dff0:	48                   	dec    eax
c000dff1:	85 c0                	test   eax,eax
c000dff3:	74 15                	je     c000e00a <CmSplitFinalSlashInPlace(char*)+0x2b>
c000dff5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000dff9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000dffc:	75 09                	jne    c000e007 <CmSplitFinalSlashInPlace(char*)+0x28>
c000dffe:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e001:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e005:	eb 05                	jmp    c000e00c <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e007:	48                   	dec    eax
c000e008:	eb e7                	jmp    c000dff1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e00a:	31 c0                	xor    eax,eax
c000e00c:	83 c4 08             	add    esp,0x8
c000e00f:	5b                   	pop    ebx
c000e010:	c3                   	ret    
c000e011:	66 90                	xchg   ax,ax
c000e013:	90                   	nop

c000e014 <Krnl::handlePowerButton()>:
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	e8 68 27 00 00       	call   c0010784 <KeHandlePowerButton()>
c000e01c:	90                   	nop
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	c3                   	ret    
c000e021:	8d 76 00             	lea    esi,[esi+0x0]

c000e024 <Krnl::handleSleepButton()>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	e8 70 27 00 00       	call   c001079c <KeHandleSleepButton()>
c000e02c:	90                   	nop
c000e02d:	83 c4 0c             	add    esp,0xc
c000e030:	c3                   	ret    
c000e031:	90                   	nop

c000e032 <Computer::close(int, int, void*)>:
c000e032:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e037:	c3                   	ret    

c000e038 <KeFirstTask()>:
c000e038:	53                   	push   ebx
c000e039:	83 ec 14             	sub    esp,0x14
c000e03c:	fb                   	sti    
c000e03d:	68 70 3f 02 c0       	push   0xc0023f70
c000e042:	e8 64 f1 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e047:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e04e:	e8 b5 1a 00 00       	call   c000fb08 <malloc>
c000e053:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e05a:	89 c3                	mov    ebx,eax
c000e05c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000e061:	50                   	push   eax
c000e062:	68 89 3f 02 c0       	push   0xc0023f89
c000e067:	6a 01                	push   0x1
c000e069:	53                   	push   ebx
c000e06a:	e8 f1 8a 00 00       	call   c0016b60 <Process::Process(bool, char const*, Process*, char**)>
c000e06f:	83 c4 20             	add    esp,0x20
c000e072:	68 ff 00 00 00       	push   0xff
c000e077:	6a 00                	push   0x0
c000e079:	68 31 ee 00 c0       	push   0xc000ee31
c000e07e:	53                   	push   ebx
c000e07f:	e8 1c 8d 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c000e084:	8b 15 58 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa58
c000e08a:	6a 7a                	push   0x7a
c000e08c:	6a 00                	push   0x0
c000e08e:	68 24 77 01 c0       	push   0xc0017724
c000e093:	52                   	push   edx
c000e094:	e8 07 8d 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c000e099:	83 c4 14             	add    esp,0x14
c000e09c:	68 1c 40 02 c0       	push   0xc002401c
c000e0a1:	a3 10 fa 02 c0       	mov    ds:0xc002fa10,eax
c000e0a6:	e8 00 f1 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e0ab:	c6 05 d5 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0d5,0x1
c000e0b2:	e8 ef 27 00 00       	call   c00108a6 <KeInitRand()>
c000e0b7:	e8 46 9a 00 00       	call   c0017b02 <Vm::initialise8086()>
c000e0bc:	e8 4d 9d ff ff       	call   c0007e0e <Fs::initVFS()>
c000e0c1:	c7 04 24 11 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d11
c000e0c8:	e8 de f0 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e0cd:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e0d2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e0d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0da:	6a 00                	push   0x0
c000e0dc:	6a 00                	push   0x0
c000e0de:	6a 00                	push   0x0
c000e0e0:	50                   	push   eax
c000e0e1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e0e4:	83 c4 14             	add    esp,0x14
c000e0e7:	68 1c 40 02 c0       	push   0xc002401c
c000e0ec:	e8 ba f0 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e0f1:	e8 fd 94 ff ff       	call   c00075f3 <KeInitialiseSymlinks()>
c000e0f6:	e8 df 06 00 00       	call   c000e7da <KeLoadSystemEnv()>
c000e0fb:	e8 b4 26 00 00       	call   c00107b4 <KeSetupPowerManager()>
c000e100:	c7 04 24 40 40 02 c0 	mov    DWORD PTR [esp],0xc0024040
c000e107:	e8 9f f0 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e10c:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e111:	59                   	pop    ecx
c000e112:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e118:	53                   	push   ebx
c000e119:	e8 d0 b9 ff ff       	call   c0009aee <Device::loadDriversForAll()>
c000e11e:	c7 04 24 96 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f96
c000e125:	e8 81 f0 ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e12a:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c000e130:	58                   	pop    eax
c000e131:	5a                   	pop    edx
c000e132:	6a 01                	push   0x1
c000e134:	68 a7 3f 02 c0       	push   0xc0023fa7
c000e139:	e8 6c 83 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c000e13e:	59                   	pop    ecx
c000e13f:	5a                   	pop    edx
c000e140:	53                   	push   ebx
c000e141:	50                   	push   eax
c000e142:	e8 c4 85 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	6a 02                	push   0x2
c000e14f:	e8 b4 8f 00 00       	call   c0017108 <blockTask(TaskState)>
c000e154:	83 c4 10             	add    esp,0x10
c000e157:	eb f1                	jmp    c000e14a <KeFirstTask()+0x112>
c000e159:	90                   	nop

c000e15a <Computer::Computer()>:
c000e15a:	83 ec 0c             	sub    esp,0xc
c000e15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e161:	83 ec 08             	sub    esp,0x8
c000e164:	68 c3 3f 02 c0       	push   0xc0023fc3
c000e169:	50                   	push   eax
c000e16a:	e8 c5 b9 ff ff       	call   c0009b34 <Device::Device(char const*)>
c000e16f:	83 c4 10             	add    esp,0x10
c000e172:	ba dc 40 02 c0       	mov    edx,0xc00240dc
c000e177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e17b:	89 10                	mov    DWORD PTR [eax],edx
c000e17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e181:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e18f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e199:	90                   	nop
c000e19a:	83 c4 0c             	add    esp,0xc
c000e19d:	c3                   	ret    

c000e19e <KePrepareShutdown()>:
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	e8 73 ef ff ff       	call   c000d119 <KeExecuteAtexit()>
c000e1a6:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e1b4:	50                   	push   eax
c000e1b5:	e8 80 ba ff ff       	call   c0009c3a <Device::closeAll()>
c000e1ba:	83 c4 1c             	add    esp,0x1c
c000e1bd:	c3                   	ret    

c000e1be <KeShutdown()>:
c000e1be:	83 ec 0c             	sub    esp,0xc
c000e1c1:	e8 d8 ff ff ff       	call   c000e19e <KePrepareShutdown()>
c000e1c6:	a1 cc d0 02 c0       	mov    eax,ds:0xc002d0cc
c000e1cb:	85 c0                	test   eax,eax
c000e1cd:	74 02                	je     c000e1d1 <KeShutdown()+0x13>
c000e1cf:	ff d0                	call   eax
c000e1d1:	83 ec 0c             	sub    esp,0xc
c000e1d4:	68 60 40 02 c0       	push   0xc0024060
c000e1d9:	e8 70 1c 00 00       	call   c000fe4e <KePanic(char const*)>
c000e1de:	83 c4 1c             	add    esp,0x1c
c000e1e1:	c3                   	ret    

c000e1e2 <KeSleep()>:
c000e1e2:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000e1e7:	85 c0                	test   eax,eax
c000e1e9:	74 02                	je     c000e1ed <KeSleep()+0xb>
c000e1eb:	ff e0                	jmp    eax
c000e1ed:	c3                   	ret    

c000e1ee <KeRestart()>:
c000e1ee:	83 ec 0c             	sub    esp,0xc
c000e1f1:	e8 a8 ff ff ff       	call   c000e19e <KePrepareShutdown()>
c000e1f6:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000e1fb:	85 c0                	test   eax,eax
c000e1fd:	74 02                	je     c000e201 <KeRestart()+0x13>
c000e1ff:	ff d0                	call   eax
c000e201:	e4 64                	in     al,0x64
c000e203:	a8 02                	test   al,0x2
c000e205:	75 fa                	jne    c000e201 <KeRestart()+0x13>
c000e207:	b0 fe                	mov    al,0xfe
c000e209:	e6 64                	out    0x64,al
c000e20b:	83 c4 0c             	add    esp,0xc
c000e20e:	c3                   	ret    
c000e20f:	90                   	nop

c000e210 <Computer::open(int, int, void*)>:
c000e210:	56                   	push   esi
c000e211:	53                   	push   ebx
c000e212:	83 ec 04             	sub    esp,0x4
c000e215:	f6 05 24 f1 02 c0 04 	test   BYTE PTR ds:0xc002f124,0x4
c000e21c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e220:	0f 94 05 60 6e 02 c0 	sete   BYTE PTR ds:0xc0026e60
c000e227:	39 1d d0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0d0,ebx
c000e22d:	74 10                	je     c000e23f <Computer::open(int, int, void*)+0x2f>
c000e22f:	83 ec 0c             	sub    esp,0xc
c000e232:	68 84 40 02 c0       	push   0xc0024084
c000e237:	e8 12 1c 00 00       	call   c000fe4e <KePanic(char const*)>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	83 ec 0c             	sub    esp,0xc
c000e242:	68 cc 3f 02 c0       	push   0xc0023fcc
c000e247:	e8 5f ef ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e24c:	e8 36 b7 00 00       	call   c0019987 <HalEnableNMI()>
c000e251:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e258:	e8 ab 18 00 00       	call   c000fb08 <malloc>
c000e25d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e260:	89 c6                	mov    esi,eax
c000e262:	e8 0d c2 00 00       	call   c001a474 <CPU::CPU()>
c000e267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e271:	50                   	push   eax
c000e272:	6a 00                	push   0x0
c000e274:	6a 00                	push   0x0
c000e276:	56                   	push   esi
c000e277:	e8 da c3 00 00       	call   c001a656 <CPU::open(int, int, void*)>
c000e27c:	83 c4 20             	add    esp,0x20
c000e27f:	e8 28 a9 00 00       	call   c0018bac <HalDetectFeatures()>
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	68 e6 3f 02 c0       	push   0xc0023fe6
c000e28c:	e8 1a ef ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e291:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e298:	e8 6b 18 00 00       	call   c000fb08 <malloc>
c000e29d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2a0:	89 c6                	mov    esi,eax
c000e2a2:	e8 51 e5 ff ff       	call   c000c7f8 <ACPI::ACPI()>
c000e2a7:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e2ad:	5a                   	pop    edx
c000e2ae:	59                   	pop    ecx
c000e2af:	56                   	push   esi
c000e2b0:	53                   	push   ebx
c000e2b1:	e8 1c b7 ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000e2b6:	5e                   	pop    esi
c000e2b7:	58                   	pop    eax
c000e2b8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e2be:	50                   	push   eax
c000e2bf:	53                   	push   ebx
c000e2c0:	e8 0d b7 ff ff       	call   c00099d2 <Device::addChild(Device*)>
c000e2c5:	c7 04 24 b0 40 02 c0 	mov    DWORD PTR [esp],0xc00240b0
c000e2cc:	e8 da ee ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e2d1:	e8 f9 bd 00 00       	call   c001a0cf <HalInitialiseCoprocessor()>
c000e2d6:	c7 04 24 fe 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ffe
c000e2dd:	e8 c9 ee ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c000e2e2:	c7 04 24 38 e0 00 c0 	mov    DWORD PTR [esp],0xc000e038
c000e2e9:	e8 12 8c 00 00       	call   c0016f00 <setupMultitasking(void (*)())>
c000e2ee:	83 c4 14             	add    esp,0x14
c000e2f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2f6:	5b                   	pop    ebx
c000e2f7:	5e                   	pop    esi
c000e2f8:	c3                   	ret    

c000e2f9 <KeCalculateCRC32(unsigned char*, int)>:
c000e2f9:	53                   	push   ebx
c000e2fa:	83 c8 ff             	or     eax,0xffffffff
c000e2fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e301:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e305:	01 cb                	add    ebx,ecx
c000e307:	39 d9                	cmp    ecx,ebx
c000e309:	74 15                	je     c000e320 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e30b:	41                   	inc    ecx
c000e30c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e30f:	31 c2                	xor    edx,eax
c000e311:	c1 e8 08             	shr    eax,0x8
c000e314:	0f b6 d2             	movzx  edx,dl
c000e317:	33 04 95 60 68 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd97a0]
c000e31e:	eb e7                	jmp    c000e307 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e320:	5b                   	pop    ebx
c000e321:	f7 d0                	not    eax
c000e323:	c3                   	ret    

c000e324 <EnvVarContainer::getEnv(char const*)>:
c000e324:	57                   	push   edi
c000e325:	56                   	push   esi
c000e326:	53                   	push   ebx
c000e327:	31 db                	xor    ebx,ebx
c000e329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e32d:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e32f:	7e 2b                	jle    c000e35c <EnvVarContainer::getEnv(char const*)+0x38>
c000e331:	50                   	push   eax
c000e332:	50                   	push   eax
c000e333:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e336:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e33d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e340:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e344:	e8 37 24 ff ff       	call   c0000780 <strcmp>
c000e349:	83 c4 10             	add    esp,0x10
c000e34c:	85 c0                	test   eax,eax
c000e34e:	75 09                	jne    c000e359 <EnvVarContainer::getEnv(char const*)+0x35>
c000e350:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e353:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e357:	eb 05                	jmp    c000e35e <EnvVarContainer::getEnv(char const*)+0x3a>
c000e359:	43                   	inc    ebx
c000e35a:	eb d1                	jmp    c000e32d <EnvVarContainer::getEnv(char const*)+0x9>
c000e35c:	31 c0                	xor    eax,eax
c000e35e:	5b                   	pop    ebx
c000e35f:	5e                   	pop    esi
c000e360:	5f                   	pop    edi
c000e361:	c3                   	ret    

c000e362 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e362:	55                   	push   ebp
c000e363:	57                   	push   edi
c000e364:	56                   	push   esi
c000e365:	53                   	push   ebx
c000e366:	83 ec 28             	sub    esp,0x28
c000e369:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e36d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e371:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e375:	56                   	push   esi
c000e376:	e8 05 22 ff ff       	call   c0000580 <strlen>
c000e37b:	40                   	inc    eax
c000e37c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e37f:	e8 84 17 00 00       	call   c000fb08 <malloc>
c000e384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e387:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38b:	e8 f0 21 ff ff       	call   c0000580 <strlen>
c000e390:	40                   	inc    eax
c000e391:	89 04 24             	mov    DWORD PTR [esp],eax
c000e394:	e8 6f 17 00 00       	call   c000fb08 <malloc>
c000e399:	89 34 24             	mov    DWORD PTR [esp],esi
c000e39c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3a0:	e8 db 21 ff ff       	call   c0000580 <strlen>
c000e3a5:	83 c4 0c             	add    esp,0xc
c000e3a8:	40                   	inc    eax
c000e3a9:	50                   	push   eax
c000e3aa:	6a 00                	push   0x0
c000e3ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e3b0:	e8 3b 21 ff ff       	call   c00004f0 <memset>
c000e3b5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b8:	e8 c3 21 ff ff       	call   c0000580 <strlen>
c000e3bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e3c1:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3c9:	89 de                	mov    esi,ebx
c000e3cb:	e8 b0 21 ff ff       	call   c0000580 <strlen>
c000e3d0:	83 c4 0c             	add    esp,0xc
c000e3d3:	40                   	inc    eax
c000e3d4:	50                   	push   eax
c000e3d5:	6a 00                	push   0x0
c000e3d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3db:	e8 10 21 ff ff       	call   c00004f0 <memset>
c000e3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3e3:	e8 98 21 ff ff       	call   c0000580 <strlen>
c000e3e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ec:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3f4:	40                   	inc    eax
c000e3f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3f8:	c1 e0 03             	shl    eax,0x3
c000e3fb:	5a                   	pop    edx
c000e3fc:	59                   	pop    ecx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e401:	e8 ee 16 00 00       	call   c000faf4 <realloc>
c000e406:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e409:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e40d:	b9 08 00 00 00       	mov    ecx,0x8
c000e412:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e415:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e419:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e41b:	83 c4 2c             	add    esp,0x2c
c000e41e:	5b                   	pop    ebx
c000e41f:	5e                   	pop    esi
c000e420:	5f                   	pop    edi
c000e421:	5d                   	pop    ebp
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <EnvVarContainer::deleteEnv(char const*)>:
c000e424:	c3                   	ret    
c000e425:	90                   	nop

c000e426 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e426:	55                   	push   ebp
c000e427:	57                   	push   edi
c000e428:	56                   	push   esi
c000e429:	53                   	push   ebx
c000e42a:	81 ec 38 01 00 00    	sub    esp,0x138
c000e430:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e437:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e43e:	68 14 01 00 00       	push   0x114
c000e443:	e8 c0 16 00 00       	call   c000fb08 <malloc>
c000e448:	83 c4 0c             	add    esp,0xc
c000e44b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e44e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e455:	89 c3                	mov    ebx,eax
c000e457:	50                   	push   eax
c000e458:	e8 07 9d ff ff       	call   c0008164 <File::File(char const*, Process*)>
c000e45d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e460:	e8 e1 9f ff ff       	call   c0008446 <File::exists()>
c000e465:	83 c4 10             	add    esp,0x10
c000e468:	84 c0                	test   al,al
c000e46a:	75 31                	jne    c000e49d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e46c:	50                   	push   eax
c000e46d:	50                   	push   eax
c000e46e:	6a 12                	push   0x12
c000e470:	53                   	push   ebx
c000e471:	e8 0c 9d ff ff       	call   c0008182 <File::open(FileOpenMode)>
c000e476:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e478:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e47b:	89 34 24             	mov    DWORD PTR [esp],esi
c000e47e:	e8 fd 20 ff ff       	call   c0000580 <strlen>
c000e483:	5a                   	pop    edx
c000e484:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e488:	52                   	push   edx
c000e489:	31 d2                	xor    edx,edx
c000e48b:	56                   	push   esi
c000e48c:	52                   	push   edx
c000e48d:	50                   	push   eax
c000e48e:	53                   	push   ebx
c000e48f:	ff d7                	call   edi
c000e491:	83 c4 14             	add    esp,0x14
c000e494:	53                   	push   ebx
c000e495:	e8 46 9d ff ff       	call   c00081e0 <File::close()>
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	56                   	push   esi
c000e49e:	31 f6                	xor    esi,esi
c000e4a0:	68 00 01 00 00       	push   0x100
c000e4a5:	6a 00                	push   0x0
c000e4a7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e4ab:	50                   	push   eax
c000e4ac:	e8 3f 20 ff ff       	call   c00004f0 <memset>
c000e4b1:	5f                   	pop    edi
c000e4b2:	58                   	pop    eax
c000e4b3:	6a 01                	push   0x1
c000e4b5:	53                   	push   ebx
c000e4b6:	e8 c7 9c ff ff       	call   c0008182 <File::open(FileOpenMode)>
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e4c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e4ce:	83 ec 0c             	sub    esp,0xc
c000e4d1:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e4d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4d7:	52                   	push   edx
c000e4d8:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e4dc:	51                   	push   ecx
c000e4dd:	6a 00                	push   0x0
c000e4df:	6a 01                	push   0x1
c000e4e1:	53                   	push   ebx
c000e4e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e4e5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e4ea:	83 c4 20             	add    esp,0x20
c000e4ed:	85 c0                	test   eax,eax
c000e4ef:	89 c1                	mov    ecx,eax
c000e4f1:	0f 84 36 01 00 00    	je     c000e62d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e4f7:	83 f8 0d             	cmp    eax,0xd
c000e4fa:	0f 84 22 01 00 00    	je     c000e622 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e500:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e505:	0f 84 f0 00 00 00    	je     c000e5fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e50b:	83 f8 0a             	cmp    eax,0xa
c000e50e:	74 13                	je     c000e523 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e510:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e515:	74 0c                	je     c000e523 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e517:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e51d:	0f 8e f6 00 00 00    	jle    c000e619 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e523:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e527:	83 ec 0c             	sub    esp,0xc
c000e52a:	8d 78 01             	lea    edi,[eax+0x1]
c000e52d:	57                   	push   edi
c000e52e:	e8 d5 15 00 00       	call   c000fb08 <malloc>
c000e533:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e537:	8d 56 04             	lea    edx,[esi+0x4]
c000e53a:	89 14 24             	mov    DWORD PTR [esp],edx
c000e53d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e541:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e545:	e8 be 15 00 00       	call   c000fb08 <malloc>
c000e54a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e54e:	83 c4 0c             	add    esp,0xc
c000e551:	57                   	push   edi
c000e552:	6a 00                	push   0x0
c000e554:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e558:	e8 93 1f ff ff       	call   c00004f0 <memset>
c000e55d:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e561:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e565:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e569:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e56b:	83 c4 0c             	add    esp,0xc
c000e56e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e572:	52                   	push   edx
c000e573:	6a 00                	push   0x0
c000e575:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e579:	e8 72 1f ff ff       	call   c00004f0 <memset>
c000e57e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e582:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e586:	89 34 24             	mov    DWORD PTR [esp],esi
c000e589:	e8 f2 1f ff ff       	call   c0000580 <strlen>
c000e58e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e592:	89 c1                	mov    ecx,eax
c000e594:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e596:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e59f:	40                   	inc    eax
c000e5a0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e5a3:	85 d2                	test   edx,edx
c000e5a5:	75 0c                	jne    c000e5b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e5a7:	83 ec 0c             	sub    esp,0xc
c000e5aa:	6a 08                	push   0x8
c000e5ac:	e8 57 15 00 00       	call   c000fb08 <malloc>
c000e5b1:	eb 0c                	jmp    c000e5bf <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e5b3:	51                   	push   ecx
c000e5b4:	51                   	push   ecx
c000e5b5:	c1 e0 03             	shl    eax,0x3
c000e5b8:	50                   	push   eax
c000e5b9:	52                   	push   edx
c000e5ba:	e8 35 15 00 00       	call   c000faf4 <realloc>
c000e5bf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e5c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e5c5:	83 c4 10             	add    esp,0x10
c000e5c8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e5cb:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e5cf:	b9 08 00 00 00       	mov    ecx,0x8
c000e5d4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e5d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5da:	50                   	push   eax
c000e5db:	31 f6                	xor    esi,esi
c000e5dd:	68 00 01 00 00       	push   0x100
c000e5e2:	6a 00                	push   0x0
c000e5e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e5e8:	50                   	push   eax
c000e5e9:	e8 02 1f ff ff       	call   c00004f0 <memset>
c000e5ee:	83 c4 10             	add    esp,0x10
c000e5f1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5f9:	eb 27                	jmp    c000e622 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5fb:	83 f8 3d             	cmp    eax,0x3d
c000e5fe:	74 1e                	je     c000e61e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e600:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e606:	7f 07                	jg     c000e60f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e608:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e60c:	46                   	inc    esi
c000e60d:	eb 13                	jmp    c000e622 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e60f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e617:	eb 09                	jmp    c000e622 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e619:	83 f8 3d             	cmp    eax,0x3d
c000e61c:	75 ea                	jne    c000e608 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e61e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e622:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e627:	0f 85 99 fe ff ff    	jne    c000e4c6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e62d:	83 ec 0c             	sub    esp,0xc
c000e630:	53                   	push   ebx
c000e631:	e8 aa 9b ff ff       	call   c00081e0 <File::close()>
c000e636:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e63b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e63e:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e644:	5b                   	pop    ebx
c000e645:	5e                   	pop    esi
c000e646:	5f                   	pop    edi
c000e647:	5d                   	pop    ebp
c000e648:	c3                   	ret    
c000e649:	90                   	nop

c000e64a <EnvVarContainer::__loadSystem()>:
c000e64a:	83 ec 10             	sub    esp,0x10
c000e64d:	68 60 6c 02 c0       	push   0xc0026c60
c000e652:	68 00 41 02 c0       	push   0xc0024100
c000e657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e65b:	e8 c6 fd ff ff       	call   c000e426 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e660:	83 c4 1c             	add    esp,0x1c
c000e663:	c3                   	ret    

c000e664 <EnvVarContainer::__loadUser()>:
c000e664:	c3                   	ret    
c000e665:	90                   	nop

c000e666 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e66a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e678:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e67b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e686:	90                   	nop
c000e687:	c3                   	ret    

c000e688 <EnvVarContainer::~EnvVarContainer()>:
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e68f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e692:	85 c0                	test   eax,eax
c000e694:	74 1d                	je     c000e6b3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e69c:	85 c0                	test   eax,eax
c000e69e:	74 13                	je     c000e6b3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6a7:	83 ec 0c             	sub    esp,0xc
c000e6aa:	50                   	push   eax
c000e6ab:	e8 68 14 00 00       	call   c000fb18 <free>
c000e6b0:	83 c4 10             	add    esp,0x10
c000e6b3:	90                   	nop
c000e6b4:	83 c4 0c             	add    esp,0xc
c000e6b7:	c3                   	ret    

c000e6b8 <KeGetEnv(Process*, char const*)>:
c000e6b8:	53                   	push   ebx
c000e6b9:	83 ec 08             	sub    esp,0x8
c000e6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c0:	39 05 58 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa58,eax
c000e6c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e6ca:	74 04                	je     c000e6d0 <KeGetEnv(Process*, char const*)+0x18>
c000e6cc:	85 c0                	test   eax,eax
c000e6ce:	75 0b                	jne    c000e6db <KeGetEnv(Process*, char const*)+0x23>
c000e6d0:	a1 d8 d0 02 c0       	mov    eax,ds:0xc002d0d8
c000e6d5:	85 c0                	test   eax,eax
c000e6d7:	75 19                	jne    c000e6f2 <KeGetEnv(Process*, char const*)+0x3a>
c000e6d9:	eb 27                	jmp    c000e702 <KeGetEnv(Process*, char const*)+0x4a>
c000e6db:	52                   	push   edx
c000e6dc:	52                   	push   edx
c000e6dd:	53                   	push   ebx
c000e6de:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e6e4:	e8 3b fc ff ff       	call   c000e324 <EnvVarContainer::getEnv(char const*)>
c000e6e9:	83 c4 10             	add    esp,0x10
c000e6ec:	85 c0                	test   eax,eax
c000e6ee:	75 28                	jne    c000e718 <KeGetEnv(Process*, char const*)+0x60>
c000e6f0:	eb de                	jmp    c000e6d0 <KeGetEnv(Process*, char const*)+0x18>
c000e6f2:	52                   	push   edx
c000e6f3:	52                   	push   edx
c000e6f4:	53                   	push   ebx
c000e6f5:	50                   	push   eax
c000e6f6:	e8 29 fc ff ff       	call   c000e324 <EnvVarContainer::getEnv(char const*)>
c000e6fb:	83 c4 10             	add    esp,0x10
c000e6fe:	85 c0                	test   eax,eax
c000e700:	75 16                	jne    c000e718 <KeGetEnv(Process*, char const*)+0x60>
c000e702:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e706:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e70b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e70f:	83 c4 08             	add    esp,0x8
c000e712:	5b                   	pop    ebx
c000e713:	e9 0c fc ff ff       	jmp    c000e324 <EnvVarContainer::getEnv(char const*)>
c000e718:	83 c4 08             	add    esp,0x8
c000e71b:	5b                   	pop    ebx
c000e71c:	c3                   	ret    

c000e71d <KeSetEnvSystem(char const*, char const*)>:
c000e71d:	83 ec 10             	sub    esp,0x10
c000e720:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e728:	ff 35 dc d0 02 c0    	push   DWORD PTR ds:0xc002d0dc
c000e72e:	e8 2f fc ff ff       	call   c000e362 <EnvVarContainer::setEnv(char const*, char const*)>
c000e733:	83 c4 1c             	add    esp,0x1c
c000e736:	c3                   	ret    

c000e737 <KeSetEnvUser(char const*, char const*)>:
c000e737:	a1 d8 d0 02 c0       	mov    eax,ds:0xc002d0d8
c000e73c:	85 c0                	test   eax,eax
c000e73e:	74 15                	je     c000e755 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e740:	83 ec 10             	sub    esp,0x10
c000e743:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e747:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e74b:	50                   	push   eax
c000e74c:	e8 11 fc ff ff       	call   c000e362 <EnvVarContainer::setEnv(char const*, char const*)>
c000e751:	83 c4 1c             	add    esp,0x1c
c000e754:	c3                   	ret    
c000e755:	c3                   	ret    

c000e756 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75a:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e760:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e764:	e9 f9 fb ff ff       	jmp    c000e362 <EnvVarContainer::setEnv(char const*, char const*)>

c000e769 <KeDeleteEnvSystem(char const*)>:
c000e769:	c3                   	ret    

c000e76a <KeDeleteEnvUser(char const*)>:
c000e76a:	c3                   	ret    

c000e76b <KeDeleteEnvProcess(Process*, char const*)>:
c000e76b:	c3                   	ret    

c000e76c <KeNewProcessEnv(Process*)>:
c000e76c:	83 ec 28             	sub    esp,0x28
c000e76f:	6a 0c                	push   0xc
c000e771:	e8 92 13 00 00       	call   c000fb08 <malloc>
c000e776:	5a                   	pop    edx
c000e777:	59                   	pop    ecx
c000e778:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e77c:	50                   	push   eax
c000e77d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e781:	e8 e0 fe ff ff       	call   c000e666 <EnvVarContainer::EnvVarContainer(Process*)>
c000e786:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e78a:	83 c4 2c             	add    esp,0x2c
c000e78d:	c3                   	ret    

c000e78e <KeCopyProcessEnv(Process*, Process*)>:
c000e78e:	57                   	push   edi
c000e78f:	56                   	push   esi
c000e790:	53                   	push   ebx
c000e791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e795:	83 ec 0c             	sub    esp,0xc
c000e798:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e79e:	6a 0c                	push   0xc
c000e7a0:	e8 63 13 00 00       	call   c000fb08 <malloc>
c000e7a5:	89 c3                	mov    ebx,eax
c000e7a7:	58                   	pop    eax
c000e7a8:	5a                   	pop    edx
c000e7a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ad:	53                   	push   ebx
c000e7ae:	e8 b3 fe ff ff       	call   c000e666 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7b3:	8b 07                	mov    eax,DWORD PTR [edi]
c000e7b5:	89 03                	mov    DWORD PTR [ebx],eax
c000e7b7:	c1 e0 03             	shl    eax,0x3
c000e7ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7bd:	e8 46 13 00 00       	call   c000fb08 <malloc>
c000e7c2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e7c5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e7c7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e7ca:	89 c7                	mov    edi,eax
c000e7cc:	c1 e1 03             	shl    ecx,0x3
c000e7cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	89 d8                	mov    eax,ebx
c000e7d6:	5b                   	pop    ebx
c000e7d7:	5e                   	pop    esi
c000e7d8:	5f                   	pop    edi
c000e7d9:	c3                   	ret    

c000e7da <KeLoadSystemEnv()>:
c000e7da:	53                   	push   ebx
c000e7db:	83 ec 14             	sub    esp,0x14
c000e7de:	6a 0c                	push   0xc
c000e7e0:	e8 23 13 00 00       	call   c000fb08 <malloc>
c000e7e5:	89 c3                	mov    ebx,eax
c000e7e7:	58                   	pop    eax
c000e7e8:	5a                   	pop    edx
c000e7e9:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e7ef:	53                   	push   ebx
c000e7f0:	e8 71 fe ff ff       	call   c000e666 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7f8:	89 1d dc d0 02 c0    	mov    DWORD PTR ds:0xc002d0dc,ebx
c000e7fe:	e8 47 fe ff ff       	call   c000e64a <EnvVarContainer::__loadSystem()>
c000e803:	83 c4 18             	add    esp,0x18
c000e806:	5b                   	pop    ebx
c000e807:	c3                   	ret    

c000e808 <KeLoadUserEnv()>:
c000e808:	53                   	push   ebx
c000e809:	83 ec 14             	sub    esp,0x14
c000e80c:	6a 0c                	push   0xc
c000e80e:	e8 f5 12 00 00       	call   c000fb08 <malloc>
c000e813:	89 c3                	mov    ebx,eax
c000e815:	58                   	pop    eax
c000e816:	5a                   	pop    edx
c000e817:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e81d:	53                   	push   ebx
c000e81e:	e8 43 fe ff ff       	call   c000e666 <EnvVarContainer::EnvVarContainer(Process*)>
c000e823:	89 1d d8 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d8,ebx
c000e829:	83 c4 18             	add    esp,0x18
c000e82c:	5b                   	pop    ebx
c000e82d:	c3                   	ret    

c000e82e <KeFlushEnv()>:
c000e82e:	c3                   	ret    

c000e82f <KeGetProcessTotalEnvCount(Process*)>:
c000e82f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e833:	8b 15 d8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0d8
c000e839:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e83f:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e844:	8b 00                	mov    eax,DWORD PTR [eax]
c000e846:	03 01                	add    eax,DWORD PTR [ecx]
c000e848:	85 d2                	test   edx,edx
c000e84a:	74 02                	je     c000e84e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e84c:	03 02                	add    eax,DWORD PTR [edx]
c000e84e:	c3                   	ret    

c000e84f <KeGetProcessEnvPair(Process*, int)>:
c000e84f:	57                   	push   edi
c000e850:	56                   	push   esi
c000e851:	8b 35 d8 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d8
c000e857:	53                   	push   ebx
c000e858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e85c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e860:	85 f6                	test   esi,esi
c000e862:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e866:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e86c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e86e:	75 16                	jne    c000e886 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e870:	39 c2                	cmp    edx,eax
c000e872:	7c 16                	jl     c000e88a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e874:	8b 0d dc d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0dc
c000e87a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e87c:	01 c6                	add    esi,eax
c000e87e:	39 d6                	cmp    esi,edx
c000e880:	7e 3c                	jle    c000e8be <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e882:	29 c2                	sub    edx,eax
c000e884:	eb 04                	jmp    c000e88a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e886:	39 c2                	cmp    edx,eax
c000e888:	7d 05                	jge    c000e88f <KeGetProcessEnvPair(Process*, int)+0x40>
c000e88a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e88d:	eb 20                	jmp    c000e8af <KeGetProcessEnvPair(Process*, int)+0x60>
c000e88f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e891:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e894:	39 d1                	cmp    ecx,edx
c000e896:	7e 04                	jle    c000e89c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e898:	29 c2                	sub    edx,eax
c000e89a:	eb 10                	jmp    c000e8ac <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e89c:	8b 35 dc d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0dc
c000e8a2:	03 0e                	add    ecx,DWORD PTR [esi]
c000e8a4:	39 d1                	cmp    ecx,edx
c000e8a6:	7e 16                	jle    c000e8be <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e8a8:	29 c2                	sub    edx,eax
c000e8aa:	29 fa                	sub    edx,edi
c000e8ac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e8af:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e8b2:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8b4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8b7:	89 03                	mov    DWORD PTR [ebx],eax
c000e8b9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e8bc:	eb 1d                	jmp    c000e8db <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	68 22 41 02 c0       	push   0xc0024122
c000e8c6:	e8 83 15 00 00       	call   c000fe4e <KePanic(char const*)>
c000e8cb:	83 c4 10             	add    esp,0x10
c000e8ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e8d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e8db:	89 d8                	mov    eax,ebx
c000e8dd:	5b                   	pop    ebx
c000e8de:	5e                   	pop    esi
c000e8df:	5f                   	pop    edi
c000e8e0:	c2 04 00             	ret    0x4
c000e8e3:	90                   	nop

c000e8e4 <KeSetupInterrupts()>:
c000e8e4:	83 ec 10             	sub    esp,0x10
c000e8e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8ef:	90                   	nop
c000e8f0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8f8:	7f 5a                	jg     c000e954 <KeSetupInterrupts()+0x70>
c000e8fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e902:	66 90                	xchg   ax,ax
c000e904:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e909:	7f 41                	jg     c000e94c <KeSetupInterrupts()+0x68>
c000e90b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e90f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e91a:	01 d0                	add    eax,edx
c000e91c:	c7 04 85 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f20],0x0
c000e927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e92b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e936:	01 d0                	add    eax,edx
c000e938:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e943:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e948:	eb ba                	jmp    c000e904 <KeSetupInterrupts()+0x20>
c000e94a:	66 90                	xchg   ax,ax
c000e94c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e951:	eb 9d                	jmp    c000e8f0 <KeSetupInterrupts()+0xc>
c000e953:	90                   	nop
c000e954:	90                   	nop
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	c3                   	ret    
c000e959:	8d 76 00             	lea    esi,[esi+0x0]

c000e95c <int_handler>:
c000e95c:	83 ec 2c             	sub    esp,0x2c
c000e95f:	90                   	nop
c000e960:	a0 28 f1 02 c0       	mov    al,ds:0xc002f128
c000e965:	0f b6 c0             	movzx  eax,al
c000e968:	85 c0                	test   eax,eax
c000e96a:	74 04                	je     c000e970 <int_handler+0x14>
c000e96c:	fa                   	cli    
c000e96d:	f4                   	hlt    
c000e96e:	eb f0                	jmp    c000e960 <int_handler+0x4>
c000e970:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e974:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e977:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e97b:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e980:	7e 1a                	jle    c000e99c <int_handler+0x40>
c000e982:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e987:	7f 13                	jg     c000e99c <int_handler+0x40>
c000e989:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e98d:	83 e8 20             	sub    eax,0x20
c000e990:	83 ec 0c             	sub    esp,0xc
c000e993:	50                   	push   eax
c000e994:	e8 ad ba 00 00       	call   c001a446 <HalEndOfInterrupt(int)>
c000e999:	83 c4 10             	add    esp,0x10
c000e99c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9a0:	c1 e0 04             	shl    eax,0x4
c000e9a3:	05 e0 e0 02 c0       	add    eax,0xc002e0e0
c000e9a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b0:	c1 e0 04             	shl    eax,0x4
c000e9b3:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9bc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e9c4:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e9c9:	0f 8f ad 00 00 00    	jg     c000ea7c <int_handler+0x120>
c000e9cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9d3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9de:	01 d0                	add    eax,edx
c000e9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9e2:	85 c0                	test   eax,eax
c000e9e4:	0f 84 86 00 00 00    	je     c000ea70 <int_handler+0x114>
c000e9ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ee:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e9f1:	83 f8 60             	cmp    eax,0x60
c000e9f4:	75 46                	jne    c000ea3c <int_handler+0xe0>
c000e9f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea05:	01 d0                	add    eax,edx
c000ea07:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea18:	01 ca                	add    edx,ecx
c000ea1a:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea1c:	83 ec 08             	sub    esp,0x8
c000ea1f:	52                   	push   edx
c000ea20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea24:	ff d0                	call   eax
c000ea26:	83 c4 10             	add    esp,0x10
c000ea29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ea31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea39:	eb 4d                	jmp    c000ea88 <int_handler+0x12c>
c000ea3b:	90                   	nop
c000ea3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea40:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea4b:	01 d0                	add    eax,edx
c000ea4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea53:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea5e:	01 ca                	add    edx,ecx
c000ea60:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea62:	83 ec 08             	sub    esp,0x8
c000ea65:	52                   	push   edx
c000ea66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea6a:	ff d0                	call   eax
c000ea6c:	83 c4 10             	add    esp,0x10
c000ea6f:	90                   	nop
c000ea70:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ea75:	e9 4a ff ff ff       	jmp    c000e9c4 <int_handler+0x68>
c000ea7a:	66 90                	xchg   ax,ax
c000ea7c:	b8 00 00 00 00       	mov    eax,0x0
c000ea81:	ba 00 00 00 00       	mov    edx,0x0
c000ea86:	66 90                	xchg   ax,ax
c000ea88:	83 c4 2c             	add    esp,0x2c
c000ea8b:	c3                   	ret    

c000ea8c <KeDisplayProgramFault(char const*)>:
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	83 ec 0c             	sub    esp,0xc
c000ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea96:	e8 b3 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ea9b:	83 c4 10             	add    esp,0x10
c000ea9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eaa3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaa5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaa8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eaae:	85 c0                	test   eax,eax
c000eab0:	74 22                	je     c000ead4 <KeDisplayProgramFault(char const*)+0x48>
c000eab2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eab7:	8b 00                	mov    eax,DWORD PTR [eax]
c000eab9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eabc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eac2:	6a 04                	push   0x4
c000eac4:	6a 0f                	push   0xf
c000eac6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaca:	50                   	push   eax
c000eacb:	e8 46 3c 00 00       	call   c0012716 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ead0:	83 c4 10             	add    esp,0x10
c000ead3:	90                   	nop
c000ead4:	90                   	nop
c000ead5:	83 c4 0c             	add    esp,0xc
c000ead8:	c3                   	ret    
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]

c000eadc <KeGeneralProtectionFault(void*, void*)>:
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	68 3c 41 02 c0       	push   0xc002413c
c000eae7:	e8 62 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafa:	e8 37 af 00 00       	call   c0019a36 <HalHandleGeneralProtectionFault(void*, void*)>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	0f b6 c0             	movzx  eax,al
c000eb05:	85 c0                	test   eax,eax
c000eb07:	75 2f                	jne    c000eb38 <KeGeneralProtectionFault(void*, void*)+0x5c>
c000eb09:	83 ec 0c             	sub    esp,0xc
c000eb0c:	68 47 41 02 c0       	push   0xc0024147
c000eb11:	e8 76 ff ff ff       	call   c000ea8c <KeDisplayProgramFault(char const*)>
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb20:	e8 5d b0 00 00       	call   c0019b82 <HalDisplayDebugInfo(void*)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	6a 00                	push   0x0
c000eb2d:	e8 1a 8e 00 00       	call   c001794c <Thr::terminateFromIRQ(int)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	eb 05                	jmp    c000eb3c <KeGeneralProtectionFault(void*, void*)+0x60>
c000eb37:	90                   	nop
c000eb38:	90                   	nop
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	83 c4 0c             	add    esp,0xc
c000eb3f:	c3                   	ret    

c000eb40 <KePageFault(void*, void*)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	83 ec 0c             	sub    esp,0xc
c000eb46:	68 60 41 02 c0       	push   0xc0024160
c000eb4b:	e8 fe 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	83 ec 08             	sub    esp,0x8
c000eb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	e8 ae af 00 00       	call   c0019b11 <HalHandlePageFault(void*, void*)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	0f b6 c0             	movzx  eax,al
c000eb69:	85 c0                	test   eax,eax
c000eb6b:	75 2f                	jne    c000eb9c <KePageFault(void*, void*)+0x5c>
c000eb6d:	83 ec 0c             	sub    esp,0xc
c000eb70:	68 6d 41 02 c0       	push   0xc002416d
c000eb75:	e8 12 ff ff ff       	call   c000ea8c <KeDisplayProgramFault(char const*)>
c000eb7a:	83 c4 10             	add    esp,0x10
c000eb7d:	83 ec 0c             	sub    esp,0xc
c000eb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb84:	e8 f9 af 00 00       	call   c0019b82 <HalDisplayDebugInfo(void*)>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	83 ec 0c             	sub    esp,0xc
c000eb8f:	6a 00                	push   0x0
c000eb91:	e8 b6 8d 00 00       	call   c001794c <Thr::terminateFromIRQ(int)>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	eb 05                	jmp    c000eba0 <KePageFault(void*, void*)+0x60>
c000eb9b:	90                   	nop
c000eb9c:	90                   	nop
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eba0:	83 c4 0c             	add    esp,0xc
c000eba3:	c3                   	ret    

c000eba4 <KeNonMaskableInterrupt(void*, void*)>:
c000eba4:	83 ec 0c             	sub    esp,0xc
c000eba7:	e8 64 b3 00 00       	call   c0019f10 <HalReceivedNMI()>
c000ebac:	90                   	nop
c000ebad:	83 c4 0c             	add    esp,0xc
c000ebb0:	c3                   	ret    
c000ebb1:	8d 76 00             	lea    esi,[esi+0x0]

c000ebb4 <KeOtherFault(void*, void*)>:
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	83 ec 0c             	sub    esp,0xc
c000ebba:	68 78 41 02 c0       	push   0xc0024178
c000ebbf:	e8 c8 fe ff ff       	call   c000ea8c <KeDisplayProgramFault(char const*)>
c000ebc4:	83 c4 10             	add    esp,0x10
c000ebc7:	83 ec 0c             	sub    esp,0xc
c000ebca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebce:	e8 af af 00 00       	call   c0019b82 <HalDisplayDebugInfo(void*)>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	83 ec 0c             	sub    esp,0xc
c000ebd9:	6a 00                	push   0x0
c000ebdb:	e8 6c 8d 00 00       	call   c001794c <Thr::terminateFromIRQ(int)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	90                   	nop
c000ebe4:	83 c4 0c             	add    esp,0xc
c000ebe7:	c3                   	ret    

c000ebe8 <KeOpcodeFault(void*, void*)>:
c000ebe8:	55                   	push   ebp
c000ebe9:	89 e5                	mov    ebp,esp
c000ebeb:	83 ec 08             	sub    esp,0x8
c000ebee:	83 ec 08             	sub    esp,0x8
c000ebf1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ebf4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebf7:	e8 44 af 00 00       	call   c0019b40 <HalHandleOpcodeFault(void*, void*)>
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	0f b6 c0             	movzx  eax,al
c000ec02:	85 c0                	test   eax,eax
c000ec04:	75 2e                	jne    c000ec34 <KeOpcodeFault(void*, void*)+0x4c>
c000ec06:	83 ec 0c             	sub    esp,0xc
c000ec09:	68 a0 41 02 c0       	push   0xc00241a0
c000ec0e:	e8 79 fe ff ff       	call   c000ea8c <KeDisplayProgramFault(char const*)>
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	83 ec 0c             	sub    esp,0xc
c000ec19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec1c:	e8 61 af 00 00       	call   c0019b82 <HalDisplayDebugInfo(void*)>
c000ec21:	83 c4 10             	add    esp,0x10
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	6a 00                	push   0x0
c000ec29:	e8 1e 8d 00 00       	call   c001794c <Thr::terminateFromIRQ(int)>
c000ec2e:	83 c4 10             	add    esp,0x10
c000ec31:	eb 05                	jmp    c000ec38 <KeOpcodeFault(void*, void*)+0x50>
c000ec33:	90                   	nop
c000ec34:	90                   	nop
c000ec35:	8d 76 00             	lea    esi,[esi+0x0]
c000ec38:	c9                   	leave  
c000ec39:	c3                   	ret    
c000ec3a:	66 90                	xchg   ax,ax

c000ec3c <KeDoubleFault(void*, void*)>:
c000ec3c:	55                   	push   ebp
c000ec3d:	89 e5                	mov    ebp,esp
c000ec3f:	83 ec 08             	sub    esp,0x8
c000ec42:	83 ec 0c             	sub    esp,0xc
c000ec45:	68 ad 41 02 c0       	push   0xc00241ad
c000ec4a:	e8 ff 11 00 00       	call   c000fe4e <KePanic(char const*)>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	90                   	nop
c000ec53:	c9                   	leave  
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <GDTEntry::setBase(unsigned int)>:
c000ec56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ec5e:	89 c1                	mov    ecx,eax
c000ec60:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec64:	c1 e9 10             	shr    ecx,0x10
c000ec67:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ec6a:	c1 e8 18             	shr    eax,0x18
c000ec6d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ec70:	c3                   	ret    
c000ec71:	90                   	nop

c000ec72 <GDTEntry::setLimit(unsigned int)>:
c000ec72:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec7a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ec7d:	66 89 01             	mov    WORD PTR [ecx],ax
c000ec80:	c1 e8 10             	shr    eax,0x10
c000ec83:	83 e0 0f             	and    eax,0xf
c000ec86:	83 e2 f0             	and    edx,0xfffffff0
c000ec89:	09 d0                	or     eax,edx
c000ec8b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ec8e:	c3                   	ret    
c000ec8f:	90                   	nop

c000ec90 <GDT::GDT()>:
c000ec90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eca4:	90                   	nop
c000eca5:	c3                   	ret    

c000eca6 <GDT::addEntry(GDTEntry)>:
c000eca6:	53                   	push   ebx
c000eca7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ecb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000ecb5:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ecb9:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecbc:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ecc0:	c1 e0 03             	shl    eax,0x3
c000ecc3:	89 0a                	mov    DWORD PTR [edx],ecx
c000ecc5:	5b                   	pop    ebx
c000ecc6:	c3                   	ret    
c000ecc7:	90                   	nop

c000ecc8 <GDT::getNumberOfEntries()>:
c000ecc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eccc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecce:	c3                   	ret    
c000eccf:	90                   	nop

c000ecd0 <GDT::flush()>:
c000ecd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecd6:	83 c0 04             	add    eax,0x4
c000ecd9:	a3 e2 f0 02 c0       	mov    ds:0xc002f0e2,eax
c000ecde:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ece5:	66 89 15 e0 f0 02 c0 	mov    WORD PTR ds:0xc002f0e0,dx
c000ecec:	e9 69 16 ff ff       	jmp    c000035a <loadGDT>
c000ecf1:	90                   	nop

c000ecf2 <GDT::setup()>:
c000ecf2:	57                   	push   edi
c000ecf3:	56                   	push   esi
c000ecf4:	53                   	push   ebx
c000ecf5:	83 ec 30             	sub    esp,0x30
c000ecf8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecfc:	6a 00                	push   0x0
c000ecfe:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ed02:	56                   	push   esi
c000ed03:	e8 4e ff ff ff       	call   c000ec56 <GDTEntry::setBase(unsigned int)>
c000ed08:	6a 00                	push   0x0
c000ed0a:	56                   	push   esi
c000ed0b:	e8 62 ff ff ff       	call   c000ec72 <GDTEntry::setLimit(unsigned int)>
c000ed10:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ed18:	6a 00                	push   0x0
c000ed1a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ed1e:	56                   	push   esi
c000ed1f:	e8 32 ff ff ff       	call   c000ec56 <GDTEntry::setBase(unsigned int)>
c000ed24:	68 ff ff ff 00       	push   0xffffff
c000ed29:	56                   	push   esi
c000ed2a:	e8 43 ff ff ff       	call   c000ec72 <GDTEntry::setLimit(unsigned int)>
c000ed2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ed37:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed3c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ed40:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ed45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed49:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ed4d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ed51:	89 f8                	mov    eax,edi
c000ed53:	89 fa                	mov    edx,edi
c000ed55:	80 e4 f7             	and    ah,0xf7
c000ed58:	80 ce 60             	or     dh,0x60
c000ed5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ed5f:	89 c7                	mov    edi,eax
c000ed61:	80 cc 60             	or     ah,0x60
c000ed64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed68:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed70:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ed74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed78:	83 c4 20             	add    esp,0x20
c000ed7b:	6a 00                	push   0x0
c000ed7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed81:	50                   	push   eax
c000ed82:	e8 cf fe ff ff       	call   c000ec56 <GDTEntry::setBase(unsigned int)>
c000ed87:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ed8b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ed8f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ed93:	83 e0 3f             	and    eax,0x3f
c000ed96:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed9a:	6a 00                	push   0x0
c000ed9c:	8d 44 24 34          	lea    eax,[esp+0x34]
c000eda0:	50                   	push   eax
c000eda1:	e8 b0 fe ff ff       	call   c000ec56 <GDTEntry::setBase(unsigned int)>
c000eda6:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000edaa:	83 e0 3f             	and    eax,0x3f
c000edad:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000edb1:	83 c4 0c             	add    esp,0xc
c000edb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edbc:	53                   	push   ebx
c000edbd:	e8 e4 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000edc2:	83 c4 0c             	add    esp,0xc
c000edc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edcd:	53                   	push   ebx
c000edce:	e8 d3 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000edd3:	83 c4 0c             	add    esp,0xc
c000edd6:	57                   	push   edi
c000edd7:	56                   	push   esi
c000edd8:	53                   	push   ebx
c000edd9:	e8 c8 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000edde:	83 c4 0c             	add    esp,0xc
c000ede1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ede5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ede9:	53                   	push   ebx
c000edea:	e8 b7 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000edef:	83 c4 0c             	add    esp,0xc
c000edf2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000edf6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000edfa:	53                   	push   ebx
c000edfb:	e8 a6 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000ee00:	83 c4 0c             	add    esp,0xc
c000ee03:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0b:	53                   	push   ebx
c000ee0c:	e8 95 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000ee11:	83 c4 0c             	add    esp,0xc
c000ee14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1c:	53                   	push   ebx
c000ee1d:	e8 84 fe ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c000ee22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee25:	e8 a6 fe ff ff       	call   c000ecd0 <GDT::flush()>
c000ee2a:	83 c4 40             	add    esp,0x40
c000ee2d:	5b                   	pop    ebx
c000ee2e:	5e                   	pop    esi
c000ee2f:	5f                   	pop    edi
c000ee30:	c3                   	ret    

c000ee31 <idleFunction(void*)>:
c000ee31:	83 ec 0c             	sub    esp,0xc
c000ee34:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000ee3b:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000ee42:	75 01                	jne    c000ee45 <idleFunction(void*)+0x14>
c000ee44:	fb                   	sti    
c000ee45:	e8 61 b1 00 00       	call   c0019fab <HalSystemIdle()>
c000ee4a:	e8 97 33 01 00       	call   c00221e6 <idleCommon()>
c000ee4f:	eb f4                	jmp    c000ee45 <idleFunction(void*)+0x14>
c000ee51:	66 90                	xchg   ax,ax
c000ee53:	90                   	nop

c000ee54 <IDTEntry::IDTEntry(bool)>:
c000ee54:	53                   	push   ebx
c000ee55:	83 ec 04             	sub    esp,0x4
c000ee58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee5c:	88 04 24             	mov    BYTE PTR [esp],al
c000ee5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee63:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ee69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee6d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ee71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee75:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee78:	83 e2 f0             	and    edx,0xfffffff0
c000ee7b:	83 ca 0e             	or     edx,0xe
c000ee7e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee85:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee88:	83 e2 ef             	and    edx,0xffffffef
c000ee8b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee8e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ee92:	85 c0                	test   eax,eax
c000ee94:	74 06                	je     c000ee9c <IDTEntry::IDTEntry(bool)+0x48>
c000ee96:	b2 03                	mov    dl,0x3
c000ee98:	eb 06                	jmp    c000eea0 <IDTEntry::IDTEntry(bool)+0x4c>
c000ee9a:	66 90                	xchg   ax,ax
c000ee9c:	b2 00                	mov    dl,0x0
c000ee9e:	66 90                	xchg   ax,ax
c000eea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea4:	83 e2 03             	and    edx,0x3
c000eea7:	89 d3                	mov    ebx,edx
c000eea9:	c1 e3 05             	shl    ebx,0x5
c000eeac:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeaf:	83 e2 9f             	and    edx,0xffffff9f
c000eeb2:	88 d1                	mov    cl,dl
c000eeb4:	88 da                	mov    dl,bl
c000eeb6:	09 ca                	or     edx,ecx
c000eeb8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eec2:	83 ca 80             	or     edx,0xffffff80
c000eec5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eec8:	90                   	nop
c000eec9:	83 c4 04             	add    esp,0x4
c000eecc:	5b                   	pop    ebx
c000eecd:	c3                   	ret    

c000eece <IDTEntry::setOffset(unsigned int)>:
c000eece:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed6:	66 89 02             	mov    WORD PTR [edx],ax
c000eed9:	c1 e8 10             	shr    eax,0x10
c000eedc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eee0:	c3                   	ret    
c000eee1:	90                   	nop
c000eee2:	66 90                	xchg   ax,ax

c000eee4 <IDT::IDT()>:
c000eee4:	90                   	nop
c000eee5:	c3                   	ret    

c000eee6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeea:	83 c0 30             	add    eax,0x30
c000eeed:	c3                   	ret    

c000eeee <IDT::addEntry(IDTEntry, int)>:
c000eeee:	53                   	push   ebx
c000eeef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eef7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eefb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eeff:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef02:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef06:	5b                   	pop    ebx
c000ef07:	c3                   	ret    

c000ef08 <IDT::addEntry(int, void (*)(), bool)>:
c000ef08:	53                   	push   ebx
c000ef09:	83 ec 10             	sub    esp,0x10
c000ef0c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef11:	50                   	push   eax
c000ef12:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef16:	53                   	push   ebx
c000ef17:	e8 38 ff ff ff       	call   c000ee54 <IDTEntry::IDTEntry(bool)>
c000ef1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef20:	53                   	push   ebx
c000ef21:	e8 a8 ff ff ff       	call   c000eece <IDTEntry::setOffset(unsigned int)>
c000ef26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef36:	e8 b3 ff ff ff       	call   c000eeee <IDT::addEntry(IDTEntry, int)>
c000ef3b:	83 c4 30             	add    esp,0x30
c000ef3e:	5b                   	pop    ebx
c000ef3f:	c3                   	ret    

c000ef40 <IDT::flush()>:
c000ef40:	66 c7 05 e8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0e8,0x7ff
c000ef49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef4d:	a3 ea f0 02 c0       	mov    ds:0xc002f0ea,eax
c000ef52:	0f 01 1d e8 f0 02 c0 	lidtd  ds:0xc002f0e8
c000ef59:	c3                   	ret    

c000ef5a <IDT::setup()>:
c000ef5a:	57                   	push   edi
c000ef5b:	56                   	push   esi
c000ef5c:	53                   	push   ebx
c000ef5d:	83 ec 10             	sub    esp,0x10
c000ef60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ef64:	6a 00                	push   0x0
c000ef66:	68 c0 14 02 c0       	push   0xc00214c0
c000ef6b:	6a 00                	push   0x0
c000ef6d:	53                   	push   ebx
c000ef6e:	e8 95 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000ef73:	6a 00                	push   0x0
c000ef75:	68 d0 14 02 c0       	push   0xc00214d0
c000ef7a:	6a 01                	push   0x1
c000ef7c:	53                   	push   ebx
c000ef7d:	e8 86 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	6a 00                	push   0x0
c000ef87:	68 da 14 02 c0       	push   0xc00214da
c000ef8c:	6a 02                	push   0x2
c000ef8e:	53                   	push   ebx
c000ef8f:	e8 74 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000ef94:	6a 00                	push   0x0
c000ef96:	68 e4 14 02 c0       	push   0xc00214e4
c000ef9b:	6a 03                	push   0x3
c000ef9d:	53                   	push   ebx
c000ef9e:	e8 65 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000efa3:	83 c4 20             	add    esp,0x20
c000efa6:	6a 00                	push   0x0
c000efa8:	68 ee 14 02 c0       	push   0xc00214ee
c000efad:	6a 04                	push   0x4
c000efaf:	53                   	push   ebx
c000efb0:	e8 53 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000efb5:	6a 00                	push   0x0
c000efb7:	68 f8 14 02 c0       	push   0xc00214f8
c000efbc:	6a 05                	push   0x5
c000efbe:	53                   	push   ebx
c000efbf:	e8 44 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000efc4:	83 c4 20             	add    esp,0x20
c000efc7:	6a 00                	push   0x0
c000efc9:	68 02 15 02 c0       	push   0xc0021502
c000efce:	6a 06                	push   0x6
c000efd0:	53                   	push   ebx
c000efd1:	e8 32 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000efd6:	6a 00                	push   0x0
c000efd8:	68 0c 15 02 c0       	push   0xc002150c
c000efdd:	6a 07                	push   0x7
c000efdf:	53                   	push   ebx
c000efe0:	e8 23 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000efe5:	83 c4 20             	add    esp,0x20
c000efe8:	6a 00                	push   0x0
c000efea:	68 16 15 02 c0       	push   0xc0021516
c000efef:	6a 08                	push   0x8
c000eff1:	53                   	push   ebx
c000eff2:	e8 11 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000eff7:	6a 00                	push   0x0
c000eff9:	68 1e 15 02 c0       	push   0xc002151e
c000effe:	6a 09                	push   0x9
c000f000:	53                   	push   ebx
c000f001:	e8 02 ff ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f006:	83 c4 20             	add    esp,0x20
c000f009:	6a 00                	push   0x0
c000f00b:	68 28 15 02 c0       	push   0xc0021528
c000f010:	6a 0a                	push   0xa
c000f012:	53                   	push   ebx
c000f013:	e8 f0 fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f018:	6a 00                	push   0x0
c000f01a:	68 30 15 02 c0       	push   0xc0021530
c000f01f:	6a 0b                	push   0xb
c000f021:	53                   	push   ebx
c000f022:	e8 e1 fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f027:	83 c4 20             	add    esp,0x20
c000f02a:	6a 00                	push   0x0
c000f02c:	68 38 15 02 c0       	push   0xc0021538
c000f031:	6a 0c                	push   0xc
c000f033:	53                   	push   ebx
c000f034:	e8 cf fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f039:	6a 00                	push   0x0
c000f03b:	68 40 15 02 c0       	push   0xc0021540
c000f040:	6a 0d                	push   0xd
c000f042:	53                   	push   ebx
c000f043:	e8 c0 fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f048:	83 c4 20             	add    esp,0x20
c000f04b:	6a 00                	push   0x0
c000f04d:	68 5a 15 02 c0       	push   0xc002155a
c000f052:	6a 0e                	push   0xe
c000f054:	53                   	push   ebx
c000f055:	e8 ae fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f05a:	6a 00                	push   0x0
c000f05c:	68 62 15 02 c0       	push   0xc0021562
c000f061:	6a 0f                	push   0xf
c000f063:	53                   	push   ebx
c000f064:	e8 9f fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f069:	83 c4 20             	add    esp,0x20
c000f06c:	6a 00                	push   0x0
c000f06e:	68 6c 15 02 c0       	push   0xc002156c
c000f073:	6a 10                	push   0x10
c000f075:	53                   	push   ebx
c000f076:	e8 8d fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f07b:	6a 00                	push   0x0
c000f07d:	68 76 15 02 c0       	push   0xc0021576
c000f082:	6a 11                	push   0x11
c000f084:	53                   	push   ebx
c000f085:	e8 7e fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f08a:	83 c4 20             	add    esp,0x20
c000f08d:	6a 00                	push   0x0
c000f08f:	68 80 15 02 c0       	push   0xc0021580
c000f094:	6a 12                	push   0x12
c000f096:	53                   	push   ebx
c000f097:	e8 6c fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f09c:	6a 01                	push   0x1
c000f09e:	68 1a 16 02 c0       	push   0xc002161a
c000f0a3:	6a 60                	push   0x60
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 5d fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	83 c4 20             	add    esp,0x20
c000f0ae:	6a 00                	push   0x0
c000f0b0:	68 21 16 02 c0       	push   0xc0021621
c000f0b5:	6a 20                	push   0x20
c000f0b7:	53                   	push   ebx
c000f0b8:	e8 4b fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 0c 16 02 c0       	push   0xc002160c
c000f0c4:	6a 21                	push   0x21
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 3c fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	83 c4 20             	add    esp,0x20
c000f0cf:	6a 00                	push   0x0
c000f0d1:	68 13 16 02 c0       	push   0xc0021613
c000f0d6:	6a 22                	push   0x22
c000f0d8:	53                   	push   ebx
c000f0d9:	e8 2a fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 8a 15 02 c0       	push   0xc002158a
c000f0e5:	6a 23                	push   0x23
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 1b fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	83 c4 20             	add    esp,0x20
c000f0f0:	6a 00                	push   0x0
c000f0f2:	68 94 15 02 c0       	push   0xc0021594
c000f0f7:	6a 24                	push   0x24
c000f0f9:	53                   	push   ebx
c000f0fa:	e8 09 fe ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f0ff:	6a 00                	push   0x0
c000f101:	68 9e 15 02 c0       	push   0xc002159e
c000f106:	6a 25                	push   0x25
c000f108:	53                   	push   ebx
c000f109:	e8 fa fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	83 c4 20             	add    esp,0x20
c000f111:	6a 00                	push   0x0
c000f113:	68 a8 15 02 c0       	push   0xc00215a8
c000f118:	6a 26                	push   0x26
c000f11a:	53                   	push   ebx
c000f11b:	e8 e8 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f120:	6a 00                	push   0x0
c000f122:	68 b2 15 02 c0       	push   0xc00215b2
c000f127:	6a 27                	push   0x27
c000f129:	53                   	push   ebx
c000f12a:	e8 d9 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	83 c4 20             	add    esp,0x20
c000f132:	6a 00                	push   0x0
c000f134:	68 bc 15 02 c0       	push   0xc00215bc
c000f139:	6a 28                	push   0x28
c000f13b:	53                   	push   ebx
c000f13c:	e8 c7 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f141:	6a 00                	push   0x0
c000f143:	68 c6 15 02 c0       	push   0xc00215c6
c000f148:	6a 29                	push   0x29
c000f14a:	53                   	push   ebx
c000f14b:	e8 b8 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	83 c4 20             	add    esp,0x20
c000f153:	6a 00                	push   0x0
c000f155:	68 d0 15 02 c0       	push   0xc00215d0
c000f15a:	6a 2a                	push   0x2a
c000f15c:	53                   	push   ebx
c000f15d:	e8 a6 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f162:	6a 00                	push   0x0
c000f164:	68 da 15 02 c0       	push   0xc00215da
c000f169:	6a 2b                	push   0x2b
c000f16b:	53                   	push   ebx
c000f16c:	e8 97 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	83 c4 20             	add    esp,0x20
c000f174:	6a 00                	push   0x0
c000f176:	68 e4 15 02 c0       	push   0xc00215e4
c000f17b:	6a 2c                	push   0x2c
c000f17d:	53                   	push   ebx
c000f17e:	e8 85 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f183:	6a 00                	push   0x0
c000f185:	68 ee 15 02 c0       	push   0xc00215ee
c000f18a:	6a 2d                	push   0x2d
c000f18c:	53                   	push   ebx
c000f18d:	e8 76 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	83 c4 20             	add    esp,0x20
c000f195:	6a 00                	push   0x0
c000f197:	68 f8 15 02 c0       	push   0xc00215f8
c000f19c:	6a 2e                	push   0x2e
c000f19e:	53                   	push   ebx
c000f19f:	e8 64 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 02 16 02 c0       	push   0xc0021602
c000f1ab:	6a 2f                	push   0x2f
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 55 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	83 c4 20             	add    esp,0x20
c000f1b6:	6a 00                	push   0x0
c000f1b8:	68 24 17 02 c0       	push   0xc0021724
c000f1bd:	6a 30                	push   0x30
c000f1bf:	53                   	push   ebx
c000f1c0:	e8 43 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 2e 17 02 c0       	push   0xc002172e
c000f1cc:	6a 31                	push   0x31
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 34 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	83 c4 20             	add    esp,0x20
c000f1d7:	6a 00                	push   0x0
c000f1d9:	68 38 17 02 c0       	push   0xc0021738
c000f1de:	6a 32                	push   0x32
c000f1e0:	53                   	push   ebx
c000f1e1:	e8 22 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 42 17 02 c0       	push   0xc0021742
c000f1ed:	6a 33                	push   0x33
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 13 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	83 c4 20             	add    esp,0x20
c000f1f8:	6a 00                	push   0x0
c000f1fa:	68 4c 17 02 c0       	push   0xc002174c
c000f1ff:	6a 34                	push   0x34
c000f201:	53                   	push   ebx
c000f202:	e8 01 fd ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f207:	6a 00                	push   0x0
c000f209:	68 56 17 02 c0       	push   0xc0021756
c000f20e:	6a 35                	push   0x35
c000f210:	53                   	push   ebx
c000f211:	e8 f2 fc ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	83 c4 20             	add    esp,0x20
c000f219:	6a 00                	push   0x0
c000f21b:	68 60 17 02 c0       	push   0xc0021760
c000f220:	6a 36                	push   0x36
c000f222:	53                   	push   ebx
c000f223:	e8 e0 fc ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f228:	6a 00                	push   0x0
c000f22a:	68 6a 17 02 c0       	push   0xc002176a
c000f22f:	6a 37                	push   0x37
c000f231:	53                   	push   ebx
c000f232:	e8 d1 fc ff ff       	call   c000ef08 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	83 c4 1c             	add    esp,0x1c
c000f23a:	6a 03                	push   0x3
c000f23c:	6a 02                	push   0x2
c000f23e:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f244:	e8 55 48 00 00       	call   c0013a9e <VAS::allocatePages(int, int)>
c000f249:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f250:	89 c6                	mov    esi,eax
c000f252:	e8 b1 08 00 00       	call   c000fb08 <malloc>
c000f257:	81 c6 00 20 00 00    	add    esi,0x2000
c000f25d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f260:	89 c7                	mov    edi,eax
c000f262:	e8 f9 38 00 00       	call   c0012b60 <TSS::TSS()>
c000f267:	83 c4 0c             	add    esp,0xc
c000f26a:	68 16 15 02 c0       	push   0xc0021516
c000f26f:	56                   	push   esi
c000f270:	57                   	push   edi
c000f271:	e8 2e 39 00 00       	call   c0012ba4 <TSS::setup(unsigned long, unsigned long)>
c000f276:	89 c6                	mov    esi,eax
c000f278:	58                   	pop    eax
c000f279:	5a                   	pop    edx
c000f27a:	6a 00                	push   0x0
c000f27c:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f280:	50                   	push   eax
c000f281:	e8 ce fb ff ff       	call   c000ee54 <IDTEntry::IDTEntry(bool)>
c000f286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f28a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f28f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f296:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f29a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2a0:	80 ce 05             	or     dh,0x5
c000f2a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f2a7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2ae:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f2b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2b4:	e8 87 fc ff ff       	call   c000ef40 <IDT::flush()>
c000f2b9:	83 c4 20             	add    esp,0x20
c000f2bc:	5b                   	pop    ebx
c000f2bd:	5e                   	pop    esi
c000f2be:	5f                   	pop    edi
c000f2bf:	c3                   	ret    

c000f2c0 <CPU::current()>:
c000f2c0:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000f2c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f2cb:	c3                   	ret    

c000f2cc <operator new(unsigned long)>:
c000f2cc:	e9 37 08 00 00       	jmp    c000fb08 <malloc>

c000f2d1 <operator delete(void*)>:
c000f2d1:	e9 52 08 00 00       	jmp    c000fb28 <rfree>

c000f2d6 <disableIRQs()>:
c000f2d6:	fa                   	cli    
c000f2d7:	c3                   	ret    

c000f2d8 <enableIRQs()>:
c000f2d8:	fb                   	sti    
c000f2d9:	c3                   	ret    

c000f2da <lockScheduler()>:
c000f2da:	fa                   	cli    
c000f2db:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f2e1:	c3                   	ret    

c000f2e2 <unlockScheduler()>:
c000f2e2:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f2e9:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f2f0:	75 01                	jne    c000f2f3 <unlockScheduler()+0x11>
c000f2f2:	fb                   	sti    
c000f2f3:	c3                   	ret    

c000f2f4 <lockStuff()>:
c000f2f4:	fa                   	cli    
c000f2f5:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f2fb:	ff 05 2c fa 02 c0    	inc    DWORD PTR ds:0xc002fa2c
c000f301:	c3                   	ret    

c000f302 <unlockStuff()>:
c000f302:	83 ec 0c             	sub    esp,0xc
c000f305:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000f30a:	48                   	dec    eax
c000f30b:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000f310:	75 18                	jne    c000f32a <unlockStuff()+0x28>
c000f312:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c000f319:	74 0f                	je     c000f32a <unlockStuff()+0x28>
c000f31b:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000f325:	e8 1e 7d 00 00       	call   c0017048 <schedule()>
c000f32a:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f331:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f338:	75 01                	jne    c000f33b <unlockStuff()+0x39>
c000f33a:	fb                   	sti    
c000f33b:	83 c4 0c             	add    esp,0xc
c000f33e:	c3                   	ret    

c000f33f <Virt::getAKernelVAS()>:
c000f33f:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c000f344:	c3                   	ret    

c000f345 <__not_memcpy>:
c000f345:	57                   	push   edi
c000f346:	56                   	push   esi
c000f347:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f34b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f34f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f353:	89 c7                	mov    edi,eax
c000f355:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f357:	5e                   	pop    esi
c000f358:	5f                   	pop    edi
c000f359:	c3                   	ret    

c000f35a <KeFormatDate(char*, int, int, int, int, bool)>:
c000f35a:	55                   	push   ebp
c000f35b:	57                   	push   edi
c000f35c:	56                   	push   esi
c000f35d:	be e8 03 00 00       	mov    esi,0x3e8
c000f362:	53                   	push   ebx
c000f363:	bb 0a 00 00 00       	mov    ebx,0xa
c000f368:	81 ec ac 00 00 00    	sub    esp,0xac
c000f36e:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f373:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f37a:	89 c8                	mov    eax,ecx
c000f37c:	99                   	cdq    
c000f37d:	f7 fb                	idiv   ebx
c000f37f:	89 d5                	mov    ebp,edx
c000f381:	99                   	cdq    
c000f382:	f7 fb                	idiv   ebx
c000f384:	8d 42 30             	lea    eax,[edx+0x30]
c000f387:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f38b:	8d 45 30             	lea    eax,[ebp+0x30]
c000f38e:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f396:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f39a:	89 c8                	mov    eax,ecx
c000f39c:	99                   	cdq    
c000f39d:	f7 fe                	idiv   esi
c000f39f:	be 64 00 00 00       	mov    esi,0x64
c000f3a4:	99                   	cdq    
c000f3a5:	f7 fb                	idiv   ebx
c000f3a7:	8d 42 30             	lea    eax,[edx+0x30]
c000f3aa:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f3ae:	89 c8                	mov    eax,ecx
c000f3b0:	99                   	cdq    
c000f3b1:	f7 fe                	idiv   esi
c000f3b3:	99                   	cdq    
c000f3b4:	f7 fb                	idiv   ebx
c000f3b6:	31 db                	xor    ebx,ebx
c000f3b8:	8d 42 30             	lea    eax,[edx+0x30]
c000f3bb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f3bf:	0f be 8b 04 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0efc]
c000f3c6:	83 f9 59             	cmp    ecx,0x59
c000f3c9:	0f 84 1f 01 00 00    	je     c000f4ee <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f3cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f3d3:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f3da:	83 f9 4d             	cmp    ecx,0x4d
c000f3dd:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f3e5:	57                   	push   edi
c000f3e6:	57                   	push   edi
c000f3e7:	89 d7                	mov    edi,edx
c000f3e9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f3ed:	c1 ff 1f             	sar    edi,0x1f
c000f3f0:	57                   	push   edi
c000f3f1:	52                   	push   edx
c000f3f2:	e8 6d 04 00 00       	call   c000f864 <KeGetDigitsInNumber(long long)>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3fe:	48                   	dec    eax
c000f3ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f403:	75 1c                	jne    c000f421 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f405:	83 f9 44             	cmp    ecx,0x44
c000f408:	75 09                	jne    c000f413 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f40a:	80 3d 20 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f120,0x0
c000f411:	eb 0c                	jmp    c000f41f <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f413:	83 f9 4d             	cmp    ecx,0x4d
c000f416:	75 60                	jne    c000f478 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f418:	80 3d 21 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f121,0x0
c000f41f:	74 57                	je     c000f478 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f421:	89 d0                	mov    eax,edx
c000f423:	b9 0a 00 00 00       	mov    ecx,0xa
c000f428:	99                   	cdq    
c000f429:	f7 f9                	idiv   ecx
c000f42b:	89 d6                	mov    esi,edx
c000f42d:	99                   	cdq    
c000f42e:	f7 f9                	idiv   ecx
c000f430:	83 c2 30             	add    edx,0x30
c000f433:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f437:	8d 56 30             	lea    edx,[esi+0x30]
c000f43a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f43e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f443:	56                   	push   esi
c000f444:	56                   	push   esi
c000f445:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f449:	57                   	push   edi
c000f44a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f44e:	56                   	push   esi
c000f44f:	e8 1c 14 ff ff       	call   c0000870 <strcat>
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	83 fb 02             	cmp    ebx,0x2
c000f45a:	74 34                	je     c000f490 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f45c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f461:	a0 08 f1 02 c0       	mov    al,ds:0xc002f108
c000f466:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f46a:	51                   	push   ecx
c000f46b:	51                   	push   ecx
c000f46c:	57                   	push   edi
c000f46d:	56                   	push   esi
c000f46e:	e8 fd 13 ff ff       	call   c0000870 <strcat>
c000f473:	83 c4 10             	add    esp,0x10
c000f476:	eb 18                	jmp    c000f490 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f478:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f47d:	89 d0                	mov    eax,edx
c000f47f:	b9 0a 00 00 00       	mov    ecx,0xa
c000f484:	99                   	cdq    
c000f485:	f7 f9                	idiv   ecx
c000f487:	83 c2 30             	add    edx,0x30
c000f48a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f48e:	eb b3                	jmp    c000f443 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f490:	43                   	inc    ebx
c000f491:	83 fb 03             	cmp    ebx,0x3
c000f494:	0f 85 25 ff ff ff    	jne    c000f3bf <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f49a:	52                   	push   edx
c000f49b:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f4a2:	6a 00                	push   0x0
c000f4a4:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f4ab:	e8 40 10 ff ff       	call   c00004f0 <memset>
c000f4b0:	89 34 24             	mov    DWORD PTR [esp],esi
c000f4b3:	e8 c8 10 ff ff       	call   c0000580 <strlen>
c000f4b8:	83 c4 10             	add    esp,0x10
c000f4bb:	40                   	inc    eax
c000f4bc:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f4c3:	72 14                	jb     c000f4d9 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f4c5:	50                   	push   eax
c000f4c6:	50                   	push   eax
c000f4c7:	56                   	push   esi
c000f4c8:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f4cf:	e8 7c 11 ff ff       	call   c0000650 <strcpy>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	eb 58                	jmp    c000f531 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f4d9:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f4e0:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f4e7:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f4ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4ec:	eb 43                	jmp    c000f531 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f4ee:	85 ed                	test   ebp,ebp
c000f4f0:	74 2a                	je     c000f51c <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f4f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4f7:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4fb:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4ff:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f503:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f507:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f50b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f50f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f513:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f517:	e9 27 ff ff ff       	jmp    c000f443 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f51c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f520:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f524:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f528:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f52c:	e9 0d ff ff ff       	jmp    c000f43e <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f531:	81 c4 ac 00 00 00    	add    esp,0xac
c000f537:	5b                   	pop    ebx
c000f538:	5e                   	pop    esi
c000f539:	5f                   	pop    edi
c000f53a:	5d                   	pop    ebp
c000f53b:	c3                   	ret    

c000f53c <KeFormatShortDate(char*, int, int, int, int)>:
c000f53c:	83 ec 14             	sub    esp,0x14
c000f53f:	6a 00                	push   0x0
c000f541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f549:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f54d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f551:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f555:	e8 00 fe ff ff       	call   c000f35a <KeFormatDate(char*, int, int, int, int, bool)>
c000f55a:	83 c4 2c             	add    esp,0x2c
c000f55d:	c3                   	ret    

c000f55e <KeFormatLongDate(char*, int, int, int, int)>:
c000f55e:	83 ec 14             	sub    esp,0x14
c000f561:	6a 01                	push   0x1
c000f563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f56b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f577:	e8 de fd ff ff       	call   c000f35a <KeFormatDate(char*, int, int, int, int, bool)>
c000f57c:	83 c4 2c             	add    esp,0x2c
c000f57f:	c3                   	ret    

c000f580 <KeSetLocale(klocale_t)>:
c000f580:	57                   	push   edi
c000f581:	b9 09 00 00 00       	mov    ecx,0x9
c000f586:	56                   	push   esi
c000f587:	bf 00 f1 02 c0       	mov    edi,0xc002f100
c000f58c:	fc                   	cld    
c000f58d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f591:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f593:	5e                   	pop    esi
c000f594:	5f                   	pop    edi
c000f595:	c3                   	ret    

c000f596 <KeInitialiseLocale()>:
c000f596:	57                   	push   edi
c000f597:	56                   	push   esi
c000f598:	83 ec 3c             	sub    esp,0x3c
c000f59b:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f5a3:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f5ab:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f5b3:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f5bb:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f5c2:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f5ca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f5d2:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f5d9:	68 ba 41 02 c0       	push   0xc00241ba
c000f5de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f5e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f5e6:	50                   	push   eax
c000f5e7:	e8 64 10 ff ff       	call   c0000650 <strcpy>
c000f5ec:	83 ec 20             	sub    esp,0x20
c000f5ef:	b9 09 00 00 00       	mov    ecx,0x9
c000f5f4:	fc                   	cld    
c000f5f5:	89 e7                	mov    edi,esp
c000f5f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5f9:	e8 82 ff ff ff       	call   c000f580 <KeSetLocale(klocale_t)>
c000f5fe:	83 c4 64             	add    esp,0x64
c000f601:	5e                   	pop    esi
c000f602:	5f                   	pop    edi
c000f603:	c3                   	ret    

c000f604 <KeFormatCurrency(char*, int, long long, long long)>:
c000f604:	c3                   	ret    

c000f605 <KeFormatCurrency(char*, int, double)>:
c000f605:	c3                   	ret    

c000f606 <KeFormatNumber(char*, long long, long long)>:
c000f606:	c3                   	ret    

c000f607 <KeFormatNumber(char*, double)>:
c000f607:	c3                   	ret    

c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f608:	55                   	push   ebp
c000f609:	57                   	push   edi
c000f60a:	56                   	push   esi
c000f60b:	53                   	push   ebx
c000f60c:	83 ec 4c             	sub    esp,0x4c
c000f60f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f613:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f617:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f61b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f61f:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f627:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f62f:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f637:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f63f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f644:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f648:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f64c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f650:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f654:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f658:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f65c:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f661:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f665:	89 c2                	mov    edx,eax
c000f667:	c1 fa 1f             	sar    edx,0x1f
c000f66a:	52                   	push   edx
c000f66b:	50                   	push   eax
c000f66c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f670:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f674:	e8 9b 24 01 00       	call   c0021b14 <__udivdi3>
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f680:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f688:	80 f4 00             	xor    ah,0x0
c000f68b:	89 c7                	mov    edi,eax
c000f68d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f691:	80 f4 00             	xor    ah,0x0
c000f694:	89 c5                	mov    ebp,eax
c000f696:	89 e8                	mov    eax,ebp
c000f698:	09 f8                	or     eax,edi
c000f69a:	74 04                	je     c000f6a0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f69c:	eb be                	jmp    c000f65c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f69e:	66 90                	xchg   ax,ax
c000f6a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f6a7:	90                   	nop
c000f6a8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6ac:	89 c7                	mov    edi,eax
c000f6ae:	89 c5                	mov    ebp,eax
c000f6b0:	c1 fd 1f             	sar    ebp,0x1f
c000f6b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6bb:	55                   	push   ebp
c000f6bc:	57                   	push   edi
c000f6bd:	52                   	push   edx
c000f6be:	50                   	push   eax
c000f6bf:	e8 50 25 01 00       	call   c0021c14 <__umoddi3>
c000f6c4:	83 c4 10             	add    esp,0x10
c000f6c7:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f6cc:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f6d0:	01 c8                	add    eax,ecx
c000f6d2:	8a 10                	mov    dl,BYTE PTR [eax]
c000f6d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6d8:	88 10                	mov    BYTE PTR [eax],dl
c000f6da:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6de:	89 c2                	mov    edx,eax
c000f6e0:	c1 fa 1f             	sar    edx,0x1f
c000f6e3:	52                   	push   edx
c000f6e4:	50                   	push   eax
c000f6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6ed:	e8 22 24 01 00       	call   c0021b14 <__udivdi3>
c000f6f2:	83 c4 10             	add    esp,0x10
c000f6f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f701:	80 f4 00             	xor    ah,0x0
c000f704:	89 c3                	mov    ebx,eax
c000f706:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f70a:	80 f4 00             	xor    ah,0x0
c000f70d:	89 c6                	mov    esi,eax
c000f70f:	89 f0                	mov    eax,esi
c000f711:	09 d8                	or     eax,ebx
c000f713:	74 03                	je     c000f718 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f715:	eb 91                	jmp    c000f6a8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f717:	90                   	nop
c000f718:	90                   	nop
c000f719:	83 c4 4c             	add    esp,0x4c
c000f71c:	5b                   	pop    ebx
c000f71d:	5e                   	pop    esi
c000f71e:	5f                   	pop    edi
c000f71f:	5d                   	pop    ebp
c000f720:	c3                   	ret    
c000f721:	8d 76 00             	lea    esi,[esi+0x0]

c000f724 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f724:	55                   	push   ebp
c000f725:	57                   	push   edi
c000f726:	56                   	push   esi
c000f727:	53                   	push   ebx
c000f728:	83 ec 4c             	sub    esp,0x4c
c000f72b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f72f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f733:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f737:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f73b:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f743:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f74b:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f753:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f75b:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f760:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f764:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f768:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f76d:	79 1d                	jns    c000f78c <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f76f:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f773:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f778:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f77c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f780:	8d 50 01             	lea    edx,[eax+0x1]
c000f783:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f787:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f78a:	66 90                	xchg   ax,ax
c000f78c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f790:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f794:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f798:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f79c:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f7a1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7a5:	89 c2                	mov    edx,eax
c000f7a7:	c1 fa 1f             	sar    edx,0x1f
c000f7aa:	52                   	push   edx
c000f7ab:	50                   	push   eax
c000f7ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f7b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f7b4:	e8 5b 23 01 00       	call   c0021b14 <__udivdi3>
c000f7b9:	83 c4 10             	add    esp,0x10
c000f7bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f7c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f7c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c8:	80 f4 00             	xor    ah,0x0
c000f7cb:	89 c7                	mov    edi,eax
c000f7cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7d1:	80 f4 00             	xor    ah,0x0
c000f7d4:	89 c5                	mov    ebp,eax
c000f7d6:	89 e8                	mov    eax,ebp
c000f7d8:	09 f8                	or     eax,edi
c000f7da:	74 04                	je     c000f7e0 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f7dc:	eb be                	jmp    c000f79c <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f7de:	66 90                	xchg   ax,ax
c000f7e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7e7:	90                   	nop
c000f7e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7ec:	89 c7                	mov    edi,eax
c000f7ee:	89 c5                	mov    ebp,eax
c000f7f0:	c1 fd 1f             	sar    ebp,0x1f
c000f7f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7fb:	55                   	push   ebp
c000f7fc:	57                   	push   edi
c000f7fd:	52                   	push   edx
c000f7fe:	50                   	push   eax
c000f7ff:	e8 90 21 01 00       	call   c0021994 <__moddi3>
c000f804:	83 c4 10             	add    esp,0x10
c000f807:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f80c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f810:	01 c8                	add    eax,ecx
c000f812:	8a 10                	mov    dl,BYTE PTR [eax]
c000f814:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f818:	88 10                	mov    BYTE PTR [eax],dl
c000f81a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f81e:	89 c2                	mov    edx,eax
c000f820:	c1 fa 1f             	sar    edx,0x1f
c000f823:	52                   	push   edx
c000f824:	50                   	push   eax
c000f825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f82d:	e8 16 20 01 00       	call   c0021848 <__divdi3>
c000f832:	83 c4 10             	add    esp,0x10
c000f835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f839:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f83d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f841:	80 f4 00             	xor    ah,0x0
c000f844:	89 c3                	mov    ebx,eax
c000f846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f84a:	80 f4 00             	xor    ah,0x0
c000f84d:	89 c6                	mov    esi,eax
c000f84f:	89 f0                	mov    eax,esi
c000f851:	09 d8                	or     eax,ebx
c000f853:	74 03                	je     c000f858 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f855:	eb 91                	jmp    c000f7e8 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f857:	90                   	nop
c000f858:	90                   	nop
c000f859:	83 c4 4c             	add    esp,0x4c
c000f85c:	5b                   	pop    ebx
c000f85d:	5e                   	pop    esi
c000f85e:	5f                   	pop    edi
c000f85f:	5d                   	pop    ebp
c000f860:	c3                   	ret    
c000f861:	8d 76 00             	lea    esi,[esi+0x0]

c000f864 <KeGetDigitsInNumber(long long)>:
c000f864:	56                   	push   esi
c000f865:	53                   	push   ebx
c000f866:	83 ec 24             	sub    esp,0x24
c000f869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f86d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f881:	8d 76 00             	lea    esi,[esi+0x0]
c000f884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f888:	80 f4 00             	xor    ah,0x0
c000f88b:	89 c3                	mov    ebx,eax
c000f88d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f891:	80 f4 00             	xor    ah,0x0
c000f894:	89 c6                	mov    esi,eax
c000f896:	89 f0                	mov    eax,esi
c000f898:	09 d8                	or     eax,ebx
c000f89a:	74 28                	je     c000f8c4 <KeGetDigitsInNumber(long long)+0x60>
c000f89c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8a4:	6a 00                	push   0x0
c000f8a6:	6a 0a                	push   0xa
c000f8a8:	52                   	push   edx
c000f8a9:	50                   	push   eax
c000f8aa:	e8 99 1f 01 00       	call   c0021848 <__divdi3>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f8ba:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f8bf:	eb c3                	jmp    c000f884 <KeGetDigitsInNumber(long long)+0x20>
c000f8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8c8:	83 c4 24             	add    esp,0x24
c000f8cb:	5b                   	pop    ebx
c000f8cc:	5e                   	pop    esi
c000f8cd:	c3                   	ret    
c000f8ce:	66 90                	xchg   ax,ax

c000f8d0 <KeItoa(unsigned long long, char*)>:
c000f8d0:	83 ec 1c             	sub    esp,0x1c
c000f8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8e3:	6a 0a                	push   0xa
c000f8e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8f1:	e8 12 fd ff ff       	call   c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f8f6:	83 c4 10             	add    esp,0x10
c000f8f9:	90                   	nop
c000f8fa:	83 c4 1c             	add    esp,0x1c
c000f8fd:	c3                   	ret    
c000f8fe:	66 90                	xchg   ax,ax

c000f900 <KeItoa(long long, char*)>:
c000f900:	83 ec 1c             	sub    esp,0x1c
c000f903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f907:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f90b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f90f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f913:	6a 0a                	push   0xa
c000f915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f921:	e8 fe fd ff ff       	call   c000f724 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f926:	83 c4 10             	add    esp,0x10
c000f929:	90                   	nop
c000f92a:	83 c4 1c             	add    esp,0x1c
c000f92d:	c3                   	ret    
c000f92e:	66 90                	xchg   ax,ax

c000f930 <KeXtoa(unsigned long long, char*)>:
c000f930:	83 ec 1c             	sub    esp,0x1c
c000f933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f93b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f93f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f943:	6a 10                	push   0x10
c000f945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f949:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f94d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f951:	e8 b2 fc ff ff       	call   c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f956:	83 c4 10             	add    esp,0x10
c000f959:	90                   	nop
c000f95a:	83 c4 1c             	add    esp,0x1c
c000f95d:	c3                   	ret    

c000f95e <sbrk>:
c000f95e:	55                   	push   ebp
c000f95f:	57                   	push   edi
c000f960:	56                   	push   esi
c000f961:	53                   	push   ebx
c000f962:	83 ec 1c             	sub    esp,0x1c
c000f965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f969:	85 c0                	test   eax,eax
c000f96b:	74 66                	je     c000f9d3 <sbrk+0x75>
c000f96d:	78 6b                	js     c000f9da <sbrk+0x7c>
c000f96f:	8b 15 b0 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026cb0
c000f975:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f979:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f97f:	05 ff 0f 00 00       	add    eax,0xfff
c000f984:	0f 49 e8             	cmovns ebp,eax
c000f987:	c1 fd 0c             	sar    ebp,0xc
c000f98a:	bb 00 00 00 00       	mov    ebx,0x0
c000f98f:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000f995:	8b 3d b0 6c 02 c0    	mov    edi,DWORD PTR ds:0xc0026cb0
c000f99b:	e8 a8 06 00 00       	call   c0010048 <Phys::allocatePage()>
c000f9a0:	68 01 04 00 00       	push   0x401
c000f9a5:	57                   	push   edi
c000f9a6:	50                   	push   eax
c000f9a7:	56                   	push   esi
c000f9a8:	e8 e9 3f 00 00       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f9ad:	81 05 b0 6c 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026cb0,0x1000
c000f9b7:	83 c3 01             	add    ebx,0x1
c000f9ba:	83 c4 10             	add    esp,0x10
c000f9bd:	39 dd                	cmp    ebp,ebx
c000f9bf:	75 ce                	jne    c000f98f <sbrk+0x31>
c000f9c1:	0f 20 d8             	mov    eax,cr3
c000f9c4:	0f 22 d8             	mov    cr3,eax
c000f9c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cb:	83 c4 1c             	add    esp,0x1c
c000f9ce:	5b                   	pop    ebx
c000f9cf:	5e                   	pop    esi
c000f9d0:	5f                   	pop    edi
c000f9d1:	5d                   	pop    ebp
c000f9d2:	c3                   	ret    
c000f9d3:	a1 b0 6c 02 c0       	mov    eax,ds:0xc0026cb0
c000f9d8:	eb f1                	jmp    c000f9cb <sbrk+0x6d>
c000f9da:	83 ec 08             	sub    esp,0x8
c000f9dd:	50                   	push   eax
c000f9de:	68 c0 41 02 c0       	push   0xc00241c0
c000f9e3:	e8 66 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f9e8:	83 c4 10             	add    esp,0x10
c000f9eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f9f0:	eb d9                	jmp    c000f9cb <sbrk+0x6d>

c000f9f2 <sbrk_thunk>:
c000f9f2:	83 ec 0c             	sub    esp,0xc
c000f9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f9:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f9fe:	7f 10                	jg     c000fa10 <sbrk_thunk+0x1e>
c000fa00:	83 ec 0c             	sub    esp,0xc
c000fa03:	50                   	push   eax
c000fa04:	e8 55 ff ff ff       	call   c000f95e <sbrk>
c000fa09:	83 c4 10             	add    esp,0x10
c000fa0c:	83 c4 0c             	add    esp,0xc
c000fa0f:	c3                   	ret    
c000fa10:	83 ec 08             	sub    esp,0x8
c000fa13:	50                   	push   eax
c000fa14:	68 f0 41 02 c0       	push   0xc00241f0
c000fa19:	e8 30 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa26:	eb e4                	jmp    c000fa0c <sbrk_thunk+0x1a>

c000fa28 <mmap>:
c000fa28:	55                   	push   ebp
c000fa29:	57                   	push   edi
c000fa2a:	56                   	push   esi
c000fa2b:	53                   	push   ebx
c000fa2c:	83 ec 18             	sub    esp,0x18
c000fa2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa33:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fa39:	89 fb                	mov    ebx,edi
c000fa3b:	c1 eb 0c             	shr    ebx,0xc
c000fa3e:	53                   	push   ebx
c000fa3f:	e8 79 38 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c000fa44:	89 c5                	mov    ebp,eax
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	85 db                	test   ebx,ebx
c000fa4b:	7e 2f                	jle    c000fa7c <mmap+0x54>
c000fa4d:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fa53:	01 c7                	add    edi,eax
c000fa55:	89 c3                	mov    ebx,eax
c000fa57:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fa5d:	e8 e6 05 00 00       	call   c0010048 <Phys::allocatePage()>
c000fa62:	68 01 04 00 00       	push   0x401
c000fa67:	53                   	push   ebx
c000fa68:	50                   	push   eax
c000fa69:	56                   	push   esi
c000fa6a:	e8 27 3f 00 00       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa6f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	39 fb                	cmp    ebx,edi
c000fa7a:	75 db                	jne    c000fa57 <mmap+0x2f>
c000fa7c:	89 e8                	mov    eax,ebp
c000fa7e:	83 c4 0c             	add    esp,0xc
c000fa81:	5b                   	pop    ebx
c000fa82:	5e                   	pop    esi
c000fa83:	5f                   	pop    edi
c000fa84:	5d                   	pop    ebp
c000fa85:	c3                   	ret    

c000fa86 <munmap>:
c000fa86:	83 ec 18             	sub    esp,0x18
c000fa89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa8d:	e8 29 3b 00 00       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c000fa92:	b8 00 00 00 00       	mov    eax,0x0
c000fa97:	83 c4 1c             	add    esp,0x1c
c000fa9a:	c3                   	ret    

c000fa9b <liballoc_lock()>:
c000fa9b:	fa                   	cli    
c000fa9c:	83 05 30 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa30,0x1
c000faa3:	b8 00 00 00 00       	mov    eax,0x0
c000faa8:	c3                   	ret    

c000faa9 <liballoc_unlock()>:
c000faa9:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fab1:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000fab8:	75 01                	jne    c000fabb <liballoc_unlock()+0x12>
c000faba:	fb                   	sti    
c000fabb:	b8 00 00 00 00       	mov    eax,0x0
c000fac0:	c3                   	ret    

c000fac1 <liballoc_alloc(int)>:
c000fac1:	83 ec 10             	sub    esp,0x10
c000fac4:	6a 01                	push   0x1
c000fac6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000faca:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fad0:	e8 c9 3f 00 00       	call   c0013a9e <VAS::allocatePages(int, int)>
c000fad5:	83 c4 1c             	add    esp,0x1c
c000fad8:	c3                   	ret    

c000fad9 <liballoc_free(void*, int)>:
c000fad9:	83 ec 14             	sub    esp,0x14
c000fadc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fae0:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fae6:	e8 0d 3c 00 00       	call   c00136f8 <VAS::freeAllocatedPages(unsigned long)>
c000faeb:	b8 00 00 00 00       	mov    eax,0x0
c000faf0:	83 c4 1c             	add    esp,0x1c
c000faf3:	c3                   	ret    

c000faf4 <realloc>:
c000faf4:	83 ec 14             	sub    esp,0x14
c000faf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fafb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faff:	e8 81 1c ff ff       	call   c0001785 <dlrealloc>
c000fb04:	83 c4 1c             	add    esp,0x1c
c000fb07:	c3                   	ret    

c000fb08 <malloc>:
c000fb08:	83 ec 18             	sub    esp,0x18
c000fb0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb0f:	e8 34 17 ff ff       	call   c0001248 <dlmalloc>
c000fb14:	83 c4 1c             	add    esp,0x1c
c000fb17:	c3                   	ret    

c000fb18 <free>:
c000fb18:	83 ec 18             	sub    esp,0x18
c000fb1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb1f:	e8 62 12 ff ff       	call   c0000d86 <dlfree>
c000fb24:	83 c4 1c             	add    esp,0x1c
c000fb27:	c3                   	ret    

c000fb28 <rfree>:
c000fb28:	83 ec 18             	sub    esp,0x18
c000fb2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb2f:	e8 52 12 ff ff       	call   c0000d86 <dlfree>
c000fb34:	83 c4 1c             	add    esp,0x1c
c000fb37:	c3                   	ret    

c000fb38 <calloc>:
c000fb38:	56                   	push   esi
c000fb39:	53                   	push   ebx
c000fb3a:	83 ec 10             	sub    esp,0x10
c000fb3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fb41:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fb46:	53                   	push   ebx
c000fb47:	e8 bc ff ff ff       	call   c000fb08 <malloc>
c000fb4c:	89 c6                	mov    esi,eax
c000fb4e:	83 c4 0c             	add    esp,0xc
c000fb51:	53                   	push   ebx
c000fb52:	6a 00                	push   0x0
c000fb54:	50                   	push   eax
c000fb55:	e8 96 09 ff ff       	call   c00004f0 <memset>
c000fb5a:	89 f0                	mov    eax,esi
c000fb5c:	83 c4 14             	add    esp,0x14
c000fb5f:	5b                   	pop    ebx
c000fb60:	5e                   	pop    esi
c000fb61:	c3                   	ret    
c000fb62:	66 90                	xchg   ax,ax

c000fb64 <KeMailboxTryPost(Mailbox*, void*)>:
c000fb64:	83 ec 10             	sub    esp,0x10
c000fb67:	fa                   	cli    
c000fb68:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fb6d:	83 c0 01             	add    eax,0x1
c000fb70:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fb75:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb81:	85 c0                	test   eax,eax
c000fb83:	75 23                	jne    c000fba8 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fb85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb8d:	89 10                	mov    DWORD PTR [eax],edx
c000fb8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb96:	8d 50 01             	lea    edx,[eax+0x1]
c000fb99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fba0:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fba5:	8d 76 00             	lea    esi,[esi+0x0]
c000fba8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fbb0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	75 03                	jne    c000fbbc <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fbb9:	fb                   	sti    
c000fbba:	66 90                	xchg   ax,ax
c000fbbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	c3                   	ret    

c000fbc4 <KeMailboxTryGet(Mailbox*, void**)>:
c000fbc4:	83 ec 10             	sub    esp,0x10
c000fbc7:	fa                   	cli    
c000fbc8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fbcd:	83 c0 01             	add    eax,0x1
c000fbd0:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fbd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fbda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbe1:	83 f8 01             	cmp    eax,0x1
c000fbe4:	75 22                	jne    c000fc08 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fbe6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbea:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fbf0:	89 10                	mov    DWORD PTR [eax],edx
c000fbf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbf9:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc03:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc08:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc10:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc15:	85 c0                	test   eax,eax
c000fc17:	75 03                	jne    c000fc1c <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fc19:	fb                   	sti    
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc20:	83 c4 10             	add    esp,0x10
c000fc23:	c3                   	ret    

c000fc24 <KeMailboxCreate()>:
c000fc24:	83 ec 1c             	sub    esp,0x1c
c000fc27:	83 ec 0c             	sub    esp,0xc
c000fc2a:	6a 08                	push   0x8
c000fc2c:	e8 d7 fe ff ff       	call   c000fb08 <malloc>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fc42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fc4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc51:	83 c4 1c             	add    esp,0x1c
c000fc54:	c3                   	ret    
c000fc55:	8d 76 00             	lea    esi,[esi+0x0]

c000fc58 <KeMailboxPost(Mailbox*, void*)>:
c000fc58:	83 ec 1c             	sub    esp,0x1c
c000fc5b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc68:	e8 f7 fe ff ff       	call   c000fb64 <KeMailboxTryPost(Mailbox*, void*)>
c000fc6d:	83 c4 08             	add    esp,0x8
c000fc70:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc78:	83 f0 01             	xor    eax,0x1
c000fc7b:	0f b6 c0             	movzx  eax,al
c000fc7e:	85 c0                	test   eax,eax
c000fc80:	74 26                	je     c000fca8 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc82:	fa                   	cli    
c000fc83:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc88:	83 c0 01             	add    eax,0x1
c000fc8b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fc90:	e8 b3 73 00 00       	call   c0017048 <schedule()>
c000fc95:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc9d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 02                	jne    c000fca8 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fca6:	fb                   	sti    
c000fca7:	90                   	nop
c000fca8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fcad:	85 c0                	test   eax,eax
c000fcaf:	75 03                	jne    c000fcb4 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fcb1:	eb ad                	jmp    c000fc60 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fcb3:	90                   	nop
c000fcb4:	90                   	nop
c000fcb5:	83 c4 1c             	add    esp,0x1c
c000fcb8:	c3                   	ret    
c000fcb9:	8d 76 00             	lea    esi,[esi+0x0]

c000fcbc <KeMailboxGet(Mailbox*, void**)>:
c000fcbc:	83 ec 1c             	sub    esp,0x1c
c000fcbf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fcc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fccc:	e8 f3 fe ff ff       	call   c000fbc4 <KeMailboxTryGet(Mailbox*, void**)>
c000fcd1:	83 c4 08             	add    esp,0x8
c000fcd4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fcdc:	83 f0 01             	xor    eax,0x1
c000fcdf:	0f b6 c0             	movzx  eax,al
c000fce2:	85 c0                	test   eax,eax
c000fce4:	74 26                	je     c000fd0c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fce6:	fa                   	cli    
c000fce7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fcec:	83 c0 01             	add    eax,0x1
c000fcef:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fcf4:	e8 4f 73 00 00       	call   c0017048 <schedule()>
c000fcf9:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd01:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd06:	85 c0                	test   eax,eax
c000fd08:	75 02                	jne    c000fd0c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd0a:	fb                   	sti    
c000fd0b:	90                   	nop
c000fd0c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd11:	85 c0                	test   eax,eax
c000fd13:	75 03                	jne    c000fd18 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fd15:	eb ad                	jmp    c000fcc4 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fd17:	90                   	nop
c000fd18:	90                   	nop
c000fd19:	83 c4 1c             	add    esp,0x1c
c000fd1c:	c3                   	ret    
c000fd1d:	8d 76 00             	lea    esi,[esi+0x0]

c000fd20 <KeMailboxDestroy(Mailbox*)>:
c000fd20:	83 ec 0c             	sub    esp,0xc
c000fd23:	83 ec 0c             	sub    esp,0xc
c000fd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd2a:	e8 e9 fd ff ff       	call   c000fb18 <free>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	90                   	nop
c000fd33:	83 c4 0c             	add    esp,0xc
c000fd36:	c3                   	ret    

c000fd37 <KeEntryPoint>:
c000fd37:	57                   	push   edi
c000fd38:	bf f9 03 00 00       	mov    edi,0x3f9
c000fd3d:	56                   	push   esi
c000fd3e:	31 f6                	xor    esi,esi
c000fd40:	53                   	push   ebx
c000fd41:	89 fa                	mov    edx,edi
c000fd43:	83 ec 2c             	sub    esp,0x2c
c000fd46:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fd4b:	a3 24 f1 02 c0       	mov    ds:0xc002f124,eax
c000fd50:	89 f0                	mov    eax,esi
c000fd52:	ee                   	out    dx,al
c000fd53:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fd58:	b0 80                	mov    al,0x80
c000fd5a:	89 da                	mov    edx,ebx
c000fd5c:	ee                   	out    dx,al
c000fd5d:	b1 03                	mov    cl,0x3
c000fd5f:	ba f8 03 00 00       	mov    edx,0x3f8
c000fd64:	88 c8                	mov    al,cl
c000fd66:	ee                   	out    dx,al
c000fd67:	89 f0                	mov    eax,esi
c000fd69:	89 fa                	mov    edx,edi
c000fd6b:	ee                   	out    dx,al
c000fd6c:	88 c8                	mov    al,cl
c000fd6e:	89 da                	mov    edx,ebx
c000fd70:	ee                   	out    dx,al
c000fd71:	b0 c7                	mov    al,0xc7
c000fd73:	ba fa 03 00 00       	mov    edx,0x3fa
c000fd78:	ee                   	out    dx,al
c000fd79:	b0 0b                	mov    al,0xb
c000fd7b:	ba fc 03 00 00       	mov    edx,0x3fc
c000fd80:	ee                   	out    dx,al
c000fd81:	68 ff 41 02 c0       	push   0xc00241ff
c000fd86:	e8 c3 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd8b:	e8 ec d3 ff ff       	call   c000d17c <KeDisplaySplashScreen()>
c000fd90:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd95:	05 ff 0f 00 00       	add    eax,0xfff
c000fd9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fda2:	e8 32 04 00 00       	call   c00101d9 <Phys::physicalMemorySetup(unsigned int)>
c000fda7:	e8 e5 36 00 00       	call   c0013491 <Virt::virtualMemorySetup()>
c000fdac:	e8 15 d3 ff ff       	call   c000d0c6 <KeInitialiseAtexit()>
c000fdb1:	c7 04 24 16 42 02 c0 	mov    DWORD PTR [esp],0xc0024216
c000fdb8:	e8 91 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdbd:	58                   	pop    eax
c000fdbe:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fdc2:	53                   	push   ebx
c000fdc3:	e8 b0 39 00 00       	call   c0013778 <VAS::VAS()>
c000fdc8:	c7 04 24 26 42 02 c0 	mov    DWORD PTR [esp],0xc0024226
c000fdcf:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c000fdd5:	e8 74 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdda:	e8 4f 1f 01 00       	call   c0021d2e <_init>
c000fddf:	c7 04 24 3a 42 02 c0 	mov    DWORD PTR [esp],0xc002423a
c000fde6:	e8 63 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdeb:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000fdf2:	e8 11 fd ff ff       	call   c000fb08 <malloc>
c000fdf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdfa:	89 c6                	mov    esi,eax
c000fdfc:	e8 59 e3 ff ff       	call   c000e15a <Computer::Computer()>
c000fe01:	5a                   	pop    edx
c000fe02:	89 35 d0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d0,esi
c000fe08:	59                   	pop    ecx
c000fe09:	56                   	push   esi
c000fe0a:	68 49 42 02 c0       	push   0xc0024249
c000fe0f:	e8 3a 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fe14:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000fe19:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe1b:	53                   	push   ebx
c000fe1c:	6a 00                	push   0x0
c000fe1e:	6a 00                	push   0x0
c000fe20:	50                   	push   eax
c000fe21:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fe24:	83 c4 14             	add    esp,0x14
c000fe27:	53                   	push   ebx
c000fe28:	e8 01 3a 00 00       	call   c001382e <VAS::~VAS()>
c000fe2d:	83 c4 30             	add    esp,0x30
c000fe30:	5b                   	pop    ebx
c000fe31:	5e                   	pop    esi
c000fe32:	5f                   	pop    edi
c000fe33:	c3                   	ret    

c000fe34 <Mutex::Mutex()>:
c000fe34:	83 ec 0c             	sub    esp,0xc
c000fe37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3b:	83 ec 08             	sub    esp,0x8
c000fe3e:	6a 01                	push   0x1
c000fe40:	50                   	push   eax
c000fe41:	e8 4e 0c 00 00       	call   c0010a94 <Semaphore::Semaphore(int)>
c000fe46:	83 c4 10             	add    esp,0x10
c000fe49:	90                   	nop
c000fe4a:	83 c4 0c             	add    esp,0xc
c000fe4d:	c3                   	ret    

c000fe4e <KePanic(char const*)>:
c000fe4e:	c6 05 28 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f128,0x1
c000fe55:	e9 f9 a2 00 00       	jmp    c001a153 <HalPanic(char const*)>

c000fe5a <Phys::allocateDMA(unsigned long)>:
c000fe5a:	55                   	push   ebp
c000fe5b:	31 ed                	xor    ebp,ebp
c000fe5d:	57                   	push   edi
c000fe5e:	56                   	push   esi
c000fe5f:	31 f6                	xor    esi,esi
c000fe61:	53                   	push   ebx
c000fe62:	31 db                	xor    ebx,ebx
c000fe64:	83 ec 1c             	sub    esp,0x1c
c000fe67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe6b:	05 ff 0f 00 00       	add    eax,0xfff
c000fe70:	c1 e8 0c             	shr    eax,0xc
c000fe73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe77:	31 c0                	xor    eax,eax
c000fe79:	eb 1b                	jmp    c000fe96 <Phys::allocateDMA(unsigned long)+0x3c>
c000fe7b:	8d 78 01             	lea    edi,[eax+0x1]
c000fe7e:	85 c0                	test   eax,eax
c000fe80:	0f 44 eb             	cmove  ebp,ebx
c000fe83:	0f 44 f3             	cmove  esi,ebx
c000fe86:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fe8a:	74 37                	je     c000fec3 <Phys::allocateDMA(unsigned long)+0x69>
c000fe8c:	89 f8                	mov    eax,edi
c000fe8e:	83 c3 01             	add    ebx,0x1
c000fe91:	83 fb 0f             	cmp    ebx,0xf
c000fe94:	7f 13                	jg     c000fea9 <Phys::allocateDMA(unsigned long)+0x4f>
c000fe96:	80 bb 44 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ebc],0x0
c000fe9d:	74 dc                	je     c000fe7b <Phys::allocateDMA(unsigned long)+0x21>
c000fe9f:	31 c0                	xor    eax,eax
c000fea1:	83 c3 01             	add    ebx,0x1
c000fea4:	83 fb 0f             	cmp    ebx,0xf
c000fea7:	7e ed                	jle    c000fe96 <Phys::allocateDMA(unsigned long)+0x3c>
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	68 60 42 02 c0       	push   0xc0024260
c000feb1:	e8 98 ff ff ff       	call   c000fe4e <KePanic(char const*)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	31 c0                	xor    eax,eax
c000febb:	83 c4 1c             	add    esp,0x1c
c000febe:	5b                   	pop    ebx
c000febf:	5e                   	pop    esi
c000fec0:	5f                   	pop    edi
c000fec1:	5d                   	pop    ebp
c000fec2:	c3                   	ret    
c000fec3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fec7:	89 f2                	mov    edx,esi
c000fec9:	c1 fa 04             	sar    edx,0x4
c000fecc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fed0:	01 f1                	add    ecx,esi
c000fed2:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fed5:	83 e9 01             	sub    ecx,0x1
c000fed8:	0f 48 ca             	cmovs  ecx,edx
c000fedb:	c1 f9 04             	sar    ecx,0x4
c000fede:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fee2:	74 06                	je     c000feea <Phys::allocateDMA(unsigned long)+0x90>
c000fee4:	89 eb                	mov    ebx,ebp
c000fee6:	31 c0                	xor    eax,eax
c000fee8:	eb b7                	jmp    c000fea1 <Phys::allocateDMA(unsigned long)+0x47>
c000feea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feee:	85 d2                	test   edx,edx
c000fef0:	74 17                	je     c000ff09 <Phys::allocateDMA(unsigned long)+0xaf>
c000fef2:	8d 96 44 f1 02 c0    	lea    edx,[esi-0x3ffd0ebc]
c000fef8:	8d 84 06 45 f1 02 c0 	lea    eax,[esi+eax*1-0x3ffd0ebb]
c000feff:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ff02:	83 c2 01             	add    edx,0x1
c000ff05:	39 d0                	cmp    eax,edx
c000ff07:	75 f6                	jne    c000feff <Phys::allocateDMA(unsigned long)+0xa5>
c000ff09:	8b 15 3c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f13c
c000ff0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff17:	01 c2                	add    edx,eax
c000ff19:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c000ff1f:	85 c9                	test   ecx,ecx
c000ff21:	74 17                	je     c000ff3a <Phys::allocateDMA(unsigned long)+0xe0>
c000ff23:	83 ec 0c             	sub    esp,0xc
c000ff26:	68 60 42 02 c0       	push   0xc0024260
c000ff2b:	e8 1e ff ff ff       	call   c000fe4e <KePanic(char const*)>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	89 f8                	mov    eax,edi
c000ff35:	e9 54 ff ff ff       	jmp    c000fe8e <Phys::allocateDMA(unsigned long)+0x34>
c000ff3a:	c1 e6 0c             	shl    esi,0xc
c000ff3d:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ff43:	e9 73 ff ff ff       	jmp    c000febb <Phys::allocateDMA(unsigned long)+0x61>

c000ff48 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ff48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff4c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ff52:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c000ff57:	c1 ea 0c             	shr    edx,0xc
c000ff5a:	29 d0                	sub    eax,edx
c000ff5c:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c000ff61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff65:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ff6a:	c1 e8 0c             	shr    eax,0xc
c000ff6d:	85 d2                	test   edx,edx
c000ff6f:	74 11                	je     c000ff82 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ff71:	05 44 f1 02 c0       	add    eax,0xc002f144
c000ff76:	01 c2                	add    edx,eax
c000ff78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ff7b:	83 c0 01             	add    eax,0x1
c000ff7e:	39 d0                	cmp    eax,edx
c000ff80:	75 f6                	jne    c000ff78 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ff82:	c3                   	ret    

c000ff83 <Phys::setPageState(unsigned long, bool)>:
c000ff83:	57                   	push   edi
c000ff84:	56                   	push   esi
c000ff85:	8b 35 b4 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026cb4
c000ff8b:	53                   	push   ebx
c000ff8c:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ff91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff99:	89 ca                	mov    edx,ecx
c000ff9b:	83 e1 07             	and    ecx,0x7
c000ff9e:	c1 ea 03             	shr    edx,0x3
c000ffa1:	0f b6 c0             	movzx  eax,al
c000ffa4:	d3 c3                	rol    ebx,cl
c000ffa6:	01 d6                	add    esi,edx
c000ffa8:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ffab:	d3 e0                	shl    eax,cl
c000ffad:	21 fb                	and    ebx,edi
c000ffaf:	88 1e                	mov    BYTE PTR [esi],bl
c000ffb1:	8b 1d b4 6c 02 c0    	mov    ebx,DWORD PTR ds:0xc0026cb4
c000ffb7:	01 da                	add    edx,ebx
c000ffb9:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ffbb:	09 c8                	or     eax,ecx
c000ffbd:	88 02                	mov    BYTE PTR [edx],al
c000ffbf:	5b                   	pop    ebx
c000ffc0:	5e                   	pop    esi
c000ffc1:	5f                   	pop    edi
c000ffc2:	c3                   	ret    

c000ffc3 <Phys::getPageState(unsigned long)>:
c000ffc3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffc7:	8b 15 b4 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026cb4
c000ffcd:	89 c8                	mov    eax,ecx
c000ffcf:	83 e1 07             	and    ecx,0x7
c000ffd2:	c1 e8 03             	shr    eax,0x3
c000ffd5:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ffd9:	d3 f8                	sar    eax,cl
c000ffdb:	83 e0 01             	and    eax,0x1
c000ffde:	c3                   	ret    

c000ffdf <Phys::freePage(unsigned long)>:
c000ffdf:	53                   	push   ebx
c000ffe0:	83 ec 08             	sub    esp,0x8
c000ffe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ffed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fff3:	76 41                	jbe    c0010036 <Phys::freePage(unsigned long)+0x57>
c000fff5:	c1 e8 0c             	shr    eax,0xc
c000fff8:	50                   	push   eax
c000fff9:	89 c3                	mov    ebx,eax
c000fffb:	e8 c3 ff ff ff       	call   c000ffc3 <Phys::getPageState(unsigned long)>
c0010000:	5a                   	pop    edx
c0010001:	84 c0                	test   al,al
c0010003:	74 20                	je     c0010025 <Phys::freePage(unsigned long)+0x46>
c0010005:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c001000a:	83 ec 08             	sub    esp,0x8
c001000d:	6a 00                	push   0x0
c001000f:	53                   	push   ebx
c0010010:	83 e8 01             	sub    eax,0x1
c0010013:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0010018:	e8 66 ff ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 08             	add    esp,0x8
c0010023:	5b                   	pop    ebx
c0010024:	c3                   	ret    
c0010025:	c7 44 24 10 65 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024365
c001002d:	83 c4 08             	add    esp,0x8
c0010030:	5b                   	pop    ebx
c0010031:	e9 18 fe ff ff       	jmp    c000fe4e <KePanic(char const*)>
c0010036:	68 00 10 00 00       	push   0x1000
c001003b:	50                   	push   eax
c001003c:	e8 07 ff ff ff       	call   c000ff48 <Phys::freeDMA(unsigned long, unsigned long)>
c0010041:	59                   	pop    ecx
c0010042:	5b                   	pop    ebx
c0010043:	83 c4 08             	add    esp,0x8
c0010046:	5b                   	pop    ebx
c0010047:	c3                   	ret    

c0010048 <Phys::allocatePage()>:
c0010048:	56                   	push   esi
c0010049:	53                   	push   ebx
c001004a:	83 ec 14             	sub    esp,0x14
c001004d:	8b 35 30 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f130
c0010053:	89 f3                	mov    ebx,esi
c0010055:	eb 0a                	jmp    c0010061 <Phys::allocatePage()+0x19>
c0010057:	89 1d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,ebx
c001005d:	39 de                	cmp    esi,ebx
c001005f:	74 26                	je     c0010087 <Phys::allocatePage()+0x3f>
c0010061:	53                   	push   ebx
c0010062:	e8 5c ff ff ff       	call   c000ffc3 <Phys::getPageState(unsigned long)>
c0010067:	59                   	pop    ecx
c0010068:	84 c0                	test   al,al
c001006a:	74 67                	je     c00100d3 <Phys::allocatePage()+0x8b>
c001006c:	83 c3 01             	add    ebx,0x1
c001006f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010075:	75 e0                	jne    c0010057 <Phys::allocatePage()+0xf>
c0010077:	c7 05 30 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f130,0x0
c0010081:	31 db                	xor    ebx,ebx
c0010083:	39 de                	cmp    esi,ebx
c0010085:	75 da                	jne    c0010061 <Phys::allocatePage()+0x19>
c0010087:	a0 54 f1 02 c0       	mov    al,ds:0xc002f154
c001008c:	83 ec 0c             	sub    esp,0xc
c001008f:	83 f0 01             	xor    eax,0x1
c0010092:	a2 54 f1 02 c0       	mov    ds:0xc002f154,al
c0010097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001009c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001009f:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00100a5:	51                   	push   ecx
c00100a6:	e8 3f 44 00 00       	call   c00144ea <VAS::scanForEviction()>
c00100ab:	83 c4 10             	add    esp,0x10
c00100ae:	85 c0                	test   eax,eax
c00100b0:	75 48                	jne    c00100fa <Phys::allocatePage()+0xb2>
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	68 88 42 02 c0       	push   0xc0024288
c00100ba:	e8 8f fd ff ff       	call   c000fe4e <KePanic(char const*)>
c00100bf:	8b 1d 30 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f130
c00100c5:	83 c4 10             	add    esp,0x10
c00100c8:	53                   	push   ebx
c00100c9:	e8 f5 fe ff ff       	call   c000ffc3 <Phys::getPageState(unsigned long)>
c00100ce:	59                   	pop    ecx
c00100cf:	84 c0                	test   al,al
c00100d1:	75 99                	jne    c001006c <Phys::allocatePage()+0x24>
c00100d3:	6a 01                	push   0x1
c00100d5:	53                   	push   ebx
c00100d6:	e8 a8 fe ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c00100db:	8b 1d 3c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f13c
c00100e1:	5e                   	pop    esi
c00100e2:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c00100e7:	5a                   	pop    edx
c00100e8:	83 c3 01             	add    ebx,0x1
c00100eb:	89 1d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ebx
c00100f1:	c1 e0 0c             	shl    eax,0xc
c00100f4:	83 c4 14             	add    esp,0x14
c00100f7:	5b                   	pop    ebx
c00100f8:	5e                   	pop    esi
c00100f9:	c3                   	ret    
c00100fa:	8b 15 3c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f13c
c0010100:	83 ec 08             	sub    esp,0x8
c0010103:	6a 01                	push   0x1
c0010105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010109:	83 c2 01             	add    edx,0x1
c001010c:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c0010112:	89 c2                	mov    edx,eax
c0010114:	c1 ea 0c             	shr    edx,0xc
c0010117:	52                   	push   edx
c0010118:	e8 66 fe ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010124:	eb ce                	jmp    c00100f4 <Phys::allocatePage()+0xac>

c0010126 <Phys::allocateContiguousPages(int)>:
c0010126:	57                   	push   edi
c0010127:	56                   	push   esi
c0010128:	53                   	push   ebx
c0010129:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001012d:	fa                   	cli    
c001012e:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0010134:	83 ec 0c             	sub    esp,0xc
c0010137:	31 db                	xor    ebx,ebx
c0010139:	68 b8 42 02 c0       	push   0xc00242b8
c001013e:	83 c2 01             	add    edx,0x1
c0010141:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0010147:	e8 02 6e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	85 db                	test   ebx,ebx
c0010151:	75 11                	jne    c0010164 <Phys::allocateContiguousPages(int)+0x3e>
c0010153:	e8 f0 fe ff ff       	call   c0010048 <Phys::allocatePage()>
c0010158:	83 ff 01             	cmp    edi,0x1
c001015b:	89 c6                	mov    esi,eax
c001015d:	74 21                	je     c0010180 <Phys::allocateContiguousPages(int)+0x5a>
c001015f:	bb 01 00 00 00       	mov    ebx,0x1
c0010164:	e8 df fe ff ff       	call   c0010048 <Phys::allocatePage()>
c0010169:	89 da                	mov    edx,ebx
c001016b:	c1 e2 0c             	shl    edx,0xc
c001016e:	01 f2                	add    edx,esi
c0010170:	39 c2                	cmp    edx,eax
c0010172:	74 24                	je     c0010198 <Phys::allocateContiguousPages(int)+0x72>
c0010174:	83 ff 01             	cmp    edi,0x1
c0010177:	bb 01 00 00 00       	mov    ebx,0x1
c001017c:	89 c6                	mov    esi,eax
c001017e:	75 e4                	jne    c0010164 <Phys::allocateContiguousPages(int)+0x3e>
c0010180:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010188:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001018d:	85 c0                	test   eax,eax
c001018f:	75 01                	jne    c0010192 <Phys::allocateContiguousPages(int)+0x6c>
c0010191:	fb                   	sti    
c0010192:	5b                   	pop    ebx
c0010193:	89 f0                	mov    eax,esi
c0010195:	5e                   	pop    esi
c0010196:	5f                   	pop    edi
c0010197:	c3                   	ret    
c0010198:	83 c3 01             	add    ebx,0x1
c001019b:	39 fb                	cmp    ebx,edi
c001019d:	75 b0                	jne    c001014f <Phys::allocateContiguousPages(int)+0x29>
c001019f:	eb df                	jmp    c0010180 <Phys::allocateContiguousPages(int)+0x5a>

c00101a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00101a1:	56                   	push   esi
c00101a2:	53                   	push   ebx
c00101a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101a7:	39 1d 34 f1 02 c0    	cmp    DWORD PTR ds:0xc002f134,ebx
c00101ad:	73 06                	jae    c00101b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00101af:	89 1d 34 f1 02 c0    	mov    DWORD PTR ds:0xc002f134,ebx
c00101b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101b9:	c1 eb 0c             	shr    ebx,0xc
c00101bc:	c1 e8 0c             	shr    eax,0xc
c00101bf:	39 d8                	cmp    eax,ebx
c00101c1:	73 13                	jae    c00101d6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00101c3:	6a 00                	push   0x0
c00101c5:	50                   	push   eax
c00101c6:	8d 70 01             	lea    esi,[eax+0x1]
c00101c9:	e8 b5 fd ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c00101ce:	39 f3                	cmp    ebx,esi
c00101d0:	89 f0                	mov    eax,esi
c00101d2:	5a                   	pop    edx
c00101d3:	59                   	pop    ecx
c00101d4:	75 ed                	jne    c00101c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00101d6:	5b                   	pop    ebx
c00101d7:	5e                   	pop    esi
c00101d8:	c3                   	ret    

c00101d9 <Phys::physicalMemorySetup(unsigned int)>:
c00101d9:	55                   	push   ebp
c00101da:	57                   	push   edi
c00101db:	56                   	push   esi
c00101dc:	53                   	push   ebx
c00101dd:	31 db                	xor    ebx,ebx
c00101df:	83 ec 40             	sub    esp,0x40
c00101e2:	6a 10                	push   0x10
c00101e4:	6a 00                	push   0x0
c00101e6:	68 44 f1 02 c0       	push   0xc002f144
c00101eb:	e8 00 03 ff ff       	call   c00004f0 <memset>
c00101f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00101f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00101f9:	05 00 10 00 00       	add    eax,0x1000
c00101fe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010202:	5a                   	pop    edx
c0010203:	59                   	pop    ecx
c0010204:	50                   	push   eax
c0010205:	68 7b 43 02 c0       	push   0xc002437b
c001020a:	e8 3f 6d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001020f:	83 c4 10             	add    esp,0x10
c0010212:	83 ec 08             	sub    esp,0x8
c0010215:	6a 01                	push   0x1
c0010217:	53                   	push   ebx
c0010218:	83 c3 01             	add    ebx,0x1
c001021b:	e8 63 fd ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010229:	75 e7                	jne    c0010212 <Phys::physicalMemorySetup(unsigned int)+0x39>
c001022b:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010232:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010239:	c1 e0 08             	shl    eax,0x8
c001023c:	09 c2                	or     edx,eax
c001023e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010242:	0f 84 43 01 00 00    	je     c001038b <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0010248:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010250:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010255:	e9 82 00 00 00       	jmp    c00102dc <Phys::physicalMemorySetup(unsigned int)+0x103>
c001025a:	ba 00 00 08 00       	mov    edx,0x80000
c001025f:	89 c1                	mov    ecx,eax
c0010261:	39 f2                	cmp    edx,esi
c0010263:	19 f9                	sbb    ecx,edi
c0010265:	0f 82 c0 00 00 00    	jb     c001032b <Phys::physicalMemorySetup(unsigned int)+0x152>
c001026b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001026f:	89 c5                	mov    ebp,eax
c0010271:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010275:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010279:	19 cd                	sbb    ebp,ecx
c001027b:	0f 83 af 00 00 00    	jae    c0010330 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0010281:	89 d6                	mov    esi,edx
c0010283:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010288:	39 f2                	cmp    edx,esi
c001028a:	89 cf                	mov    edi,ecx
c001028c:	19 c8                	sbb    eax,ecx
c001028e:	73 07                	jae    c0010297 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0010290:	be 00 00 0a 00       	mov    esi,0xa0000
c0010295:	31 ff                	xor    edi,edi
c0010297:	89 f2                	mov    edx,esi
c0010299:	b8 ff 1f 00 00       	mov    eax,0x1fff
c001029e:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00102a4:	89 f9                	mov    ecx,edi
c00102a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00102aa:	83 d1 ff             	adc    ecx,0xffffffff
c00102ad:	39 d0                	cmp    eax,edx
c00102af:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00102b3:	b8 00 00 00 00       	mov    eax,0x0
c00102b8:	19 c8                	sbb    eax,ecx
c00102ba:	0f 82 9d 01 00 00    	jb     c001045d <Phys::physicalMemorySetup(unsigned int)+0x284>
c00102c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102c4:	83 c3 18             	add    ebx,0x18
c00102c7:	83 c6 01             	add    esi,0x1
c00102ca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00102ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d2:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00102d6:	0f 84 bf 00 00 00    	je     c001039b <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00102dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00102de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102e1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00102e4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00102e7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00102eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00102ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102f2:	01 f0                	add    eax,esi
c00102f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00102fc:	55                   	push   ebp
c00102fd:	11 fa                	adc    edx,edi
c00102ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010303:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010307:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001030b:	50                   	push   eax
c001030c:	56                   	push   esi
c001030d:	68 18 43 02 c0       	push   0xc0024318
c0010312:	e8 37 6c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001031b:	83 c4 10             	add    esp,0x10
c001031e:	09 f8                	or     eax,edi
c0010320:	75 79                	jne    c001039b <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010322:	83 fd 01             	cmp    ebp,0x1
c0010325:	0f 84 2f ff ff ff    	je     c001025a <Phys::physicalMemorySetup(unsigned int)+0x81>
c001032b:	83 fd 01             	cmp    ebp,0x1
c001032e:	75 90                	jne    c00102c0 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010330:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010334:	31 d2                	xor    edx,edx
c0010336:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001033a:	89 c8                	mov    eax,ecx
c001033c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010340:	19 d1                	sbb    ecx,edx
c0010342:	0f 82 78 ff ff ff    	jb     c00102c0 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010348:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c001034d:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0010351:	b9 00 00 00 00       	mov    ecx,0x0
c0010356:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c001035a:	0f 83 60 ff ff ff    	jae    c00102c0 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010360:	39 c6                	cmp    esi,eax
c0010362:	19 d7                	sbb    edi,edx
c0010364:	0f 83 ff 00 00 00    	jae    c0010469 <Phys::physicalMemorySetup(unsigned int)+0x290>
c001036a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001036e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010372:	29 c7                	sub    edi,eax
c0010374:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010378:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001037c:	19 d5                	sbb    ebp,edx
c001037e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010382:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010386:	e9 de 00 00 00       	jmp    c0010469 <Phys::physicalMemorySetup(unsigned int)+0x290>
c001038b:	83 ec 0c             	sub    esp,0xc
c001038e:	68 93 43 02 c0       	push   0xc0024393
c0010393:	e8 b6 fa ff ff       	call   c000fe4e <KePanic(char const*)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	83 ec 08             	sub    esp,0x8
c001039e:	bb 60 00 00 00       	mov    ebx,0x60
c00103a3:	6a 00                	push   0x0
c00103a5:	6a 06                	push   0x6
c00103a7:	e8 d7 fb ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c00103ac:	58                   	pop    eax
c00103ad:	5a                   	pop    edx
c00103ae:	6a 00                	push   0x0
c00103b0:	6a 07                	push   0x7
c00103b2:	e8 cc fb ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c00103b7:	8b 0d 40 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f140
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	83 c1 02             	add    ecx,0x2
c00103c3:	89 0d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,ecx
c00103c9:	83 ec 08             	sub    esp,0x8
c00103cc:	6a 00                	push   0x0
c00103ce:	53                   	push   ebx
c00103cf:	83 c3 01             	add    ebx,0x1
c00103d2:	e8 ac fb ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00103e0:	75 e7                	jne    c00103c9 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c00103e2:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c00103e7:	bb 40 01 00 00       	mov    ebx,0x140
c00103ec:	83 c0 20             	add    eax,0x20
c00103ef:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c00103f4:	eb 26                	jmp    c001041c <Phys::physicalMemorySetup(unsigned int)+0x243>
c00103f6:	83 ec 08             	sub    esp,0x8
c00103f9:	6a 00                	push   0x0
c00103fb:	53                   	push   ebx
c00103fc:	83 c3 01             	add    ebx,0x1
c00103ff:	e8 7f fb ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c0010404:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010409:	83 c4 10             	add    esp,0x10
c001040c:	83 c0 01             	add    eax,0x1
c001040f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0010415:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c001041a:	74 07                	je     c0010423 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c001041c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010421:	7e d3                	jle    c00103f6 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0010423:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010428:	3d ff 07 00 00       	cmp    eax,0x7ff
c001042d:	7f 26                	jg     c0010455 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c001042f:	83 ec 08             	sub    esp,0x8
c0010432:	6a 00                	push   0x0
c0010434:	53                   	push   ebx
c0010435:	83 c3 01             	add    ebx,0x1
c0010438:	e8 46 fb ff ff       	call   c000ff83 <Phys::setPageState(unsigned long, bool)>
c001043d:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	83 c0 01             	add    eax,0x1
c0010448:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001044e:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0010453:	75 d3                	jne    c0010428 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0010455:	83 c4 3c             	add    esp,0x3c
c0010458:	5b                   	pop    ebx
c0010459:	5e                   	pop    esi
c001045a:	5f                   	pop    edi
c001045b:	5d                   	pop    ebp
c001045c:	c3                   	ret    
c001045d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010461:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010469:	83 ec 04             	sub    esp,0x4
c001046c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010470:	56                   	push   esi
c0010471:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010475:	57                   	push   edi
c0010476:	68 3c 43 02 c0       	push   0xc002433c
c001047b:	e8 ce 6a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010480:	5d                   	pop    ebp
c0010481:	58                   	pop    eax
c0010482:	56                   	push   esi
c0010483:	57                   	push   edi
c0010484:	e8 18 fd ff ff       	call   c00101a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010489:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001048d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010491:	83 c4 0c             	add    esp,0xc
c0010494:	8b 35 40 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f140
c001049a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001049e:	01 f0                	add    eax,esi
c00104a0:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c00104a5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104ac:	52                   	push   edx
c00104ad:	50                   	push   eax
c00104ae:	68 a1 43 02 c0       	push   0xc00243a1
c00104b3:	e8 96 6a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	e9 00 fe ff ff       	jmp    c00102c0 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c00104c0 <Pipe::isAtty()>:
c00104c0:	31 c0                	xor    eax,eax
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <Pipe::~Pipe()>:
c00104c4:	83 ec 0c             	sub    esp,0xc
c00104c7:	ba 00 44 02 c0       	mov    edx,0xc0024400
c00104cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d0:	89 10                	mov    DWORD PTR [eax],edx
c00104d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	50                   	push   eax
c00104da:	e8 63 2b 00 00       	call   c0013042 <UnixFile::~UnixFile()>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	90                   	nop
c00104e3:	83 c4 0c             	add    esp,0xc
c00104e6:	c3                   	ret    
c00104e7:	90                   	nop

c00104e8 <Pipe::~Pipe()>:
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	83 ec 0c             	sub    esp,0xc
c00104ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f2:	e8 cd ff ff ff       	call   c00104c4 <Pipe::~Pipe()>
c00104f7:	83 c4 10             	add    esp,0x10
c00104fa:	83 ec 08             	sub    esp,0x8
c00104fd:	6a 20                	push   0x20
c00104ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010503:	e8 63 cd ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	83 c4 0c             	add    esp,0xc
c001050e:	c3                   	ret    
c001050f:	90                   	nop

c0010510 <Pipe::write(unsigned long long, void*, int*)>:
c0010510:	55                   	push   ebp
c0010511:	57                   	push   edi
c0010512:	56                   	push   esi
c0010513:	53                   	push   ebx
c0010514:	83 ec 1c             	sub    esp,0x1c
c0010517:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001051b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001051f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010523:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010526:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001052a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001052d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010530:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010534:	89 d8                	mov    eax,ebx
c0010536:	89 d6                	mov    esi,edx
c0010538:	89 d7                	mov    edi,edx
c001053a:	c1 ff 1f             	sar    edi,0x1f
c001053d:	03 34 24             	add    esi,DWORD PTR [esp]
c0010540:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010544:	c1 f8 1f             	sar    eax,0x1f
c0010547:	39 f3                	cmp    ebx,esi
c0010549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001054d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010551:	19 f8                	sbb    eax,edi
c0010553:	b8 01 00 00 00       	mov    eax,0x1
c0010558:	72 72                	jb     c00105cc <Pipe::write(unsigned long long, void*, int*)+0xbc>
c001055a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001055d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010561:	01 d0                	add    eax,edx
c0010563:	99                   	cdq    
c0010564:	f7 fb                	idiv   ebx
c0010566:	89 d8                	mov    eax,ebx
c0010568:	29 d0                	sub    eax,edx
c001056a:	89 d6                	mov    esi,edx
c001056c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001056f:	89 c3                	mov    ebx,eax
c0010571:	c1 fb 1f             	sar    ebx,0x1f
c0010574:	39 c2                	cmp    edx,eax
c0010576:	19 df                	sbb    edi,ebx
c0010578:	bb 00 00 00 00       	mov    ebx,0x0
c001057d:	72 04                	jb     c0010583 <Pipe::write(unsigned long long, void*, int*)+0x73>
c001057f:	89 d3                	mov    ebx,edx
c0010581:	29 c3                	sub    ebx,eax
c0010583:	89 d0                	mov    eax,edx
c0010585:	29 d8                	sub    eax,ebx
c0010587:	74 0d                	je     c0010596 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010589:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001058c:	89 c1                	mov    ecx,eax
c001058e:	01 f7                	add    edi,esi
c0010590:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010594:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010596:	85 db                	test   ebx,ebx
c0010598:	74 0d                	je     c00105a7 <Pipe::write(unsigned long long, void*, int*)+0x97>
c001059a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001059e:	89 d9                	mov    ecx,ebx
c00105a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00105a3:	89 c6                	mov    esi,eax
c00105a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105a7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00105aa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00105af:	75 10                	jne    c00105c1 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c00105b1:	83 ec 0c             	sub    esp,0xc
c00105b4:	68 bd 43 02 c0       	push   0xc00243bd
c00105b9:	e8 90 f8 ff ff       	call   c000fe4e <KePanic(char const*)>
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00105c5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00105c8:	89 08                	mov    DWORD PTR [eax],ecx
c00105ca:	31 c0                	xor    eax,eax
c00105cc:	83 c4 1c             	add    esp,0x1c
c00105cf:	5b                   	pop    ebx
c00105d0:	5e                   	pop    esi
c00105d1:	5f                   	pop    edi
c00105d2:	5d                   	pop    ebp
c00105d3:	c3                   	ret    

c00105d4 <Pipe::read(unsigned long long, void*, int*)>:
c00105d4:	55                   	push   ebp
c00105d5:	57                   	push   edi
c00105d6:	56                   	push   esi
c00105d7:	53                   	push   ebx
c00105d8:	83 ec 1c             	sub    esp,0x1c
c00105db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00105df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00105e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00105ea:	89 c8                	mov    eax,ecx
c00105ec:	99                   	cdq    
c00105ed:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00105f1:	74 27                	je     c001061a <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105f3:	39 f9                	cmp    ecx,edi
c00105f5:	89 d1                	mov    ecx,edx
c00105f7:	19 f1                	sbb    ecx,esi
c00105f9:	73 1f                	jae    c001061a <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105fb:	fa                   	cli    
c00105fc:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0010602:	e8 41 6a 00 00       	call   c0017048 <schedule()>
c0010607:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001060e:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0010615:	75 d0                	jne    c00105e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010617:	fb                   	sti    
c0010618:	eb cd                	jmp    c00105e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001061a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001061e:	39 f8                	cmp    eax,edi
c0010620:	89 d1                	mov    ecx,edx
c0010622:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010626:	19 f1                	sbb    ecx,esi
c0010628:	73 08                	jae    c0010632 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c001062a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001062e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010632:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010635:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010638:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001063c:	29 f7                	sub    edi,esi
c001063e:	89 f8                	mov    eax,edi
c0010640:	99                   	cdq    
c0010641:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010645:	89 d0                	mov    eax,edx
c0010647:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001064b:	19 c2                	sbb    edx,eax
c001064d:	89 f8                	mov    eax,edi
c001064f:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010654:	89 ea                	mov    edx,ebp
c0010656:	29 c2                	sub    edx,eax
c0010658:	85 c0                	test   eax,eax
c001065a:	74 0b                	je     c0010667 <Pipe::read(unsigned long long, void*, int*)+0x93>
c001065c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001065f:	89 c1                	mov    ecx,eax
c0010661:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010665:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010667:	85 d2                	test   edx,edx
c0010669:	74 0d                	je     c0010678 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c001066b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001066f:	89 d1                	mov    ecx,edx
c0010671:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010674:	89 c7                	mov    edi,eax
c0010676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010678:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001067b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001067e:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010681:	99                   	cdq    
c0010682:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010686:	89 f7                	mov    edi,esi
c0010688:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001068c:	c1 ff 1f             	sar    edi,0x1f
c001068f:	57                   	push   edi
c0010690:	56                   	push   esi
c0010691:	52                   	push   edx
c0010692:	50                   	push   eax
c0010693:	e8 7c 15 01 00       	call   c0021c14 <__umoddi3>
c0010698:	83 c4 10             	add    esp,0x10
c001069b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00106a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00106a3:	75 10                	jne    c00106b5 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c00106a5:	83 ec 0c             	sub    esp,0xc
c00106a8:	68 da 43 02 c0       	push   0xc00243da
c00106ad:	e8 9c f7 ff ff       	call   c000fe4e <KePanic(char const*)>
c00106b2:	83 c4 10             	add    esp,0x10
c00106b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00106b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106bd:	89 10                	mov    DWORD PTR [eax],edx
c00106bf:	83 c4 1c             	add    esp,0x1c
c00106c2:	31 c0                	xor    eax,eax
c00106c4:	5b                   	pop    ebx
c00106c5:	5e                   	pop    esi
c00106c6:	5f                   	pop    edi
c00106c7:	5d                   	pop    ebp
c00106c8:	c3                   	ret    
c00106c9:	90                   	nop

c00106ca <Pipe::Pipe(int)>:
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d1:	83 ec 08             	sub    esp,0x8
c00106d4:	6a 00                	push   0x0
c00106d6:	50                   	push   eax
c00106d7:	e8 80 27 00 00       	call   c0012e5c <UnixFile::UnixFile(int)>
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	ba 00 44 02 c0       	mov    edx,0xc0024400
c00106e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e8:	89 10                	mov    DWORD PTR [eax],edx
c00106ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00106f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00106f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010704:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001070b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070f:	83 ec 0c             	sub    esp,0xc
c0010712:	50                   	push   eax
c0010713:	e8 f0 f3 ff ff       	call   c000fb08 <malloc>
c0010718:	83 c4 10             	add    esp,0x10
c001071b:	89 c2                	mov    edx,eax
c001071d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010721:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010728:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001072c:	90                   	nop
c001072d:	83 c4 0c             	add    esp,0xc
c0010730:	c3                   	ret    

c0010731 <KePowerThread(void*)>:
c0010731:	83 ec 0c             	sub    esp,0xc
c0010734:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001073b:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0010742:	75 01                	jne    c0010745 <KePowerThread(void*)+0x14>
c0010744:	fb                   	sti    
c0010745:	50                   	push   eax
c0010746:	50                   	push   eax
c0010747:	6a 00                	push   0x0
c0010749:	6a 0a                	push   0xa
c001074b:	c6 05 60 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f160,0x0
c0010752:	e8 fd 6a 00 00       	call   c0017254 <sleep(unsigned long long)>
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	83 05 a4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1a4,0xa
c0010761:	eb e2                	jmp    c0010745 <KePowerThread(void*)+0x14>

c0010763 <KeChangePowerSettings(PowerSettings)>:
c0010763:	57                   	push   edi
c0010764:	b9 09 00 00 00       	mov    ecx,0x9
c0010769:	56                   	push   esi
c001076a:	bf 80 f1 02 c0       	mov    edi,0xc002f180
c001076f:	fc                   	cld    
c0010770:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010774:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010776:	5e                   	pop    esi
c0010777:	5f                   	pop    edi
c0010778:	c3                   	ret    

c0010779 <KeUserIOReceived()>:
c0010779:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c0010783:	c3                   	ret    

c0010784 <KeHandlePowerButton()>:
c0010784:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c0010789:	83 f8 02             	cmp    eax,0x2
c001078c:	75 05                	jne    c0010793 <KeHandlePowerButton()+0xf>
c001078e:	e9 2b da ff ff       	jmp    c000e1be <KeShutdown()>
c0010793:	48                   	dec    eax
c0010794:	75 05                	jne    c001079b <KeHandlePowerButton()+0x17>
c0010796:	e9 47 da ff ff       	jmp    c000e1e2 <KeSleep()>
c001079b:	c3                   	ret    

c001079c <KeHandleSleepButton()>:
c001079c:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00107a1:	83 f8 02             	cmp    eax,0x2
c00107a4:	75 05                	jne    c00107ab <KeHandleSleepButton()+0xf>
c00107a6:	e9 13 da ff ff       	jmp    c000e1be <KeShutdown()>
c00107ab:	48                   	dec    eax
c00107ac:	75 05                	jne    c00107b3 <KeHandleSleepButton()+0x17>
c00107ae:	e9 2f da ff ff       	jmp    c000e1e2 <KeSleep()>
c00107b3:	c3                   	ret    

c00107b4 <KeSetupPowerManager()>:
c00107b4:	83 ec 0c             	sub    esp,0xc
c00107b7:	68 f0 00 00 00       	push   0xf0
c00107bc:	6a 00                	push   0x0
c00107be:	68 31 07 01 c0       	push   0xc0010731
c00107c3:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00107c9:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c00107d3:	c6 05 60 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f160,0x0
c00107da:	e8 c1 65 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c00107df:	c7 05 80 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f180,0x2
c00107e9:	c7 05 84 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f184,0x1
c00107f3:	c7 05 88 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x3
c00107fd:	c7 05 8c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f18c,0x0
c0010807:	c7 05 98 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f198,0x0
c0010811:	c7 05 90 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f190,0x0
c001081b:	c7 05 9c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f19c,0x0
c0010825:	c7 05 94 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x3c
c001082f:	c7 05 a0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x3c
c0010839:	83 c4 1c             	add    esp,0x1c
c001083c:	c3                   	ret    

c001083d <KeRand()>:
c001083d:	69 05 a8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1a8,0x2875
c0010847:	69 0d ac f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1ac,0xa2e7b175
c0010851:	53                   	push   ebx
c0010852:	01 c1                	add    ecx,eax
c0010854:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010859:	f7 25 a8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1a8
c001085f:	01 ca                	add    edx,ecx
c0010861:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010866:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c001086b:	83 d2 00             	adc    edx,0x0
c001086e:	0f b7 da             	movzx  ebx,dx
c0010871:	89 1d ac f1 02 c0    	mov    DWORD PTR ds:0xc002f1ac,ebx
c0010877:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001087b:	5b                   	pop    ebx
c001087c:	c3                   	ret    

c001087d <KeSeedRand(unsigned int)>:
c001087d:	53                   	push   ebx
c001087e:	83 ec 08             	sub    esp,0x8
c0010881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010885:	e8 b9 9b 00 00       	call   c001a443 <HalGetRand()>
c001088a:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010894:	31 d8                	xor    eax,ebx
c0010896:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c001089b:	e8 9d ff ff ff       	call   c001083d <KeRand()>
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	eb 97                	jmp    c001083d <KeRand()>

c00108a6 <KeInitRand()>:
c00108a6:	83 ec 0c             	sub    esp,0xc
c00108a9:	e8 b9 99 00 00       	call   c001a267 <HalQueryPerformanceCounter()>
c00108ae:	0f 20 da             	mov    edx,cr3
c00108b1:	0f 22 da             	mov    cr3,edx
c00108b4:	0f 20 da             	mov    edx,cr3
c00108b7:	0f 22 da             	mov    cr3,edx
c00108ba:	0f 20 da             	mov    edx,cr3
c00108bd:	0f 22 da             	mov    cr3,edx
c00108c0:	0f 20 da             	mov    edx,cr3
c00108c3:	0f 22 da             	mov    cr3,edx
c00108c6:	83 ec 0c             	sub    esp,0xc
c00108c9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00108ce:	50                   	push   eax
c00108cf:	e8 a9 ff ff ff       	call   c001087d <KeSeedRand(unsigned int)>
c00108d4:	83 c4 1c             	add    esp,0x1c
c00108d7:	c3                   	ret    

c00108d8 <KeResolveCompatibilitySymbol(char*)>:
c00108d8:	83 ec 0c             	sub    esp,0xc
c00108db:	83 ec 08             	sub    esp,0x8
c00108de:	68 14 44 02 c0       	push   0xc0024414
c00108e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e7:	e8 94 fe fe ff       	call   c0000780 <strcmp>
c00108ec:	83 c4 10             	add    esp,0x10
c00108ef:	85 c0                	test   eax,eax
c00108f1:	0f 94 c0             	sete   al
c00108f4:	0f b6 c0             	movzx  eax,al
c00108f7:	85 c0                	test   eax,eax
c00108f9:	74 0d                	je     c0010908 <KeResolveCompatibilitySymbol(char*)+0x30>
c00108fb:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c0010900:	e9 8b 01 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010905:	8d 76 00             	lea    esi,[esi+0x0]
c0010908:	83 ec 08             	sub    esp,0x8
c001090b:	68 1d 44 02 c0       	push   0xc002441d
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	e8 67 fe fe ff       	call   c0000780 <strcmp>
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	85 c0                	test   eax,eax
c001091e:	0f 94 c0             	sete   al
c0010921:	0f b6 c0             	movzx  eax,al
c0010924:	85 c0                	test   eax,eax
c0010926:	74 0c                	je     c0010934 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010928:	b8 14 1b 02 c0       	mov    eax,0xc0021b14
c001092d:	e9 5e 01 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010932:	66 90                	xchg   ax,ax
c0010934:	83 ec 08             	sub    esp,0x8
c0010937:	68 27 44 02 c0       	push   0xc0024427
c001093c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010940:	e8 3b fe fe ff       	call   c0000780 <strcmp>
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	85 c0                	test   eax,eax
c001094a:	0f 94 c0             	sete   al
c001094d:	0f b6 c0             	movzx  eax,al
c0010950:	85 c0                	test   eax,eax
c0010952:	74 0c                	je     c0010960 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010954:	b8 48 18 02 c0       	mov    eax,0xc0021848
c0010959:	e9 32 01 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001095e:	66 90                	xchg   ax,ax
c0010960:	83 ec 08             	sub    esp,0x8
c0010963:	68 30 44 02 c0       	push   0xc0024430
c0010968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096c:	e8 0f fe fe ff       	call   c0000780 <strcmp>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	85 c0                	test   eax,eax
c0010976:	0f 94 c0             	sete   al
c0010979:	0f b6 c0             	movzx  eax,al
c001097c:	85 c0                	test   eax,eax
c001097e:	74 0c                	je     c001098c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010980:	b8 4e fe 00 c0       	mov    eax,0xc000fe4e
c0010985:	e9 06 01 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001098a:	66 90                	xchg   ax,ax
c001098c:	83 ec 08             	sub    esp,0x8
c001098f:	68 43 44 02 c0       	push   0xc0024443
c0010994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010998:	e8 e3 fd fe ff       	call   c0000780 <strcmp>
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	85 c0                	test   eax,eax
c00109a2:	0f 94 c0             	sete   al
c00109a5:	0f b6 c0             	movzx  eax,al
c00109a8:	85 c0                	test   eax,eax
c00109aa:	74 0c                	je     c00109b8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00109ac:	b8 ab d1 00 c0       	mov    eax,0xc000d1ab
c00109b1:	e9 da 00 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109b6:	66 90                	xchg   ax,ax
c00109b8:	83 ec 08             	sub    esp,0x8
c00109bb:	68 60 44 02 c0       	push   0xc0024460
c00109c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c4:	e8 b7 fd fe ff       	call   c0000780 <strcmp>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	85 c0                	test   eax,eax
c00109ce:	0f 94 c0             	sete   al
c00109d1:	0f b6 c0             	movzx  eax,al
c00109d4:	85 c0                	test   eax,eax
c00109d6:	74 0c                	je     c00109e4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00109d8:	b8 14 1c 02 c0       	mov    eax,0xc0021c14
c00109dd:	e9 ae 00 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109e2:	66 90                	xchg   ax,ax
c00109e4:	83 ec 08             	sub    esp,0x8
c00109e7:	68 6a 44 02 c0       	push   0xc002446a
c00109ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f0:	e8 8b fd fe ff       	call   c0000780 <strcmp>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	85 c0                	test   eax,eax
c00109fa:	0f 94 c0             	sete   al
c00109fd:	0f b6 c0             	movzx  eax,al
c0010a00:	85 c0                	test   eax,eax
c0010a02:	74 0c                	je     c0010a10 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010a04:	b8 94 19 02 c0       	mov    eax,0xc0021994
c0010a09:	e9 82 00 00 00       	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a0e:	66 90                	xchg   ax,ax
c0010a10:	83 ec 08             	sub    esp,0x8
c0010a13:	68 73 44 02 c0       	push   0xc0024473
c0010a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1c:	e8 5f fd fe ff       	call   c0000780 <strcmp>
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	85 c0                	test   eax,eax
c0010a26:	0f 94 c0             	sete   al
c0010a29:	0f b6 c0             	movzx  eax,al
c0010a2c:	85 c0                	test   eax,eax
c0010a2e:	74 08                	je     c0010a38 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010a30:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c0010a35:	eb 59                	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a37:	90                   	nop
c0010a38:	83 ec 08             	sub    esp,0x8
c0010a3b:	68 8b 44 02 c0       	push   0xc002448b
c0010a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a44:	e8 37 fd fe ff       	call   c0000780 <strcmp>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	85 c0                	test   eax,eax
c0010a4e:	0f 94 c0             	sete   al
c0010a51:	0f b6 c0             	movzx  eax,al
c0010a54:	85 c0                	test   eax,eax
c0010a56:	74 08                	je     c0010a60 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010a58:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c0010a5d:	eb 31                	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a5f:	90                   	nop
c0010a60:	83 ec 08             	sub    esp,0x8
c0010a63:	68 98 44 02 c0       	push   0xc0024498
c0010a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6c:	e8 0f fd fe ff       	call   c0000780 <strcmp>
c0010a71:	83 c4 10             	add    esp,0x10
c0010a74:	85 c0                	test   eax,eax
c0010a76:	0f 94 c0             	sete   al
c0010a79:	0f b6 c0             	movzx  eax,al
c0010a7c:	85 c0                	test   eax,eax
c0010a7e:	74 08                	je     c0010a88 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010a80:	b8 d5 d0 02 c0       	mov    eax,0xc002d0d5
c0010a85:	eb 09                	jmp    c0010a90 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a87:	90                   	nop
c0010a88:	b8 00 00 00 00       	mov    eax,0x0
c0010a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a90:	83 c4 0c             	add    esp,0xc
c0010a93:	c3                   	ret    

c0010a94 <Semaphore::Semaphore(int)>:
c0010a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a9c:	89 10                	mov    DWORD PTR [eax],edx
c0010a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010abf:	90                   	nop
c0010ac0:	c3                   	ret    
c0010ac1:	90                   	nop
c0010ac2:	66 90                	xchg   ax,ax

c0010ac4 <Semaphore::tryAcquire()>:
c0010ac4:	83 ec 0c             	sub    esp,0xc
c0010ac7:	fa                   	cli    
c0010ac8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010acd:	83 c0 01             	add    eax,0x1
c0010ad0:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010ad5:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010ada:	83 c0 01             	add    eax,0x1
c0010add:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0010aef:	39 c2                	cmp    edx,eax
c0010af1:	7d 59                	jge    c0010b4c <Semaphore::tryAcquire()+0x88>
c0010af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010afa:	8d 50 01             	lea    edx,[eax+0x1]
c0010afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b04:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010b09:	83 e8 01             	sub    eax,0x1
c0010b0c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010b11:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010b16:	85 c0                	test   eax,eax
c0010b18:	75 1a                	jne    c0010b34 <Semaphore::tryAcquire()+0x70>
c0010b1a:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010b1f:	85 c0                	test   eax,eax
c0010b21:	74 11                	je     c0010b34 <Semaphore::tryAcquire()+0x70>
c0010b23:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010b2d:	e8 16 65 00 00       	call   c0017048 <schedule()>
c0010b32:	66 90                	xchg   ax,ax
c0010b34:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010b3c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010b41:	85 c0                	test   eax,eax
c0010b43:	75 03                	jne    c0010b48 <Semaphore::tryAcquire()+0x84>
c0010b45:	fb                   	sti    
c0010b46:	66 90                	xchg   ax,ax
c0010b48:	b0 01                	mov    al,0x1
c0010b4a:	eb 48                	jmp    c0010b94 <Semaphore::tryAcquire()+0xd0>
c0010b4c:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010b51:	83 e8 01             	sub    eax,0x1
c0010b54:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010b59:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010b5e:	85 c0                	test   eax,eax
c0010b60:	75 1a                	jne    c0010b7c <Semaphore::tryAcquire()+0xb8>
c0010b62:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010b67:	85 c0                	test   eax,eax
c0010b69:	74 11                	je     c0010b7c <Semaphore::tryAcquire()+0xb8>
c0010b6b:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010b75:	e8 ce 64 00 00       	call   c0017048 <schedule()>
c0010b7a:	66 90                	xchg   ax,ax
c0010b7c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010b84:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010b89:	85 c0                	test   eax,eax
c0010b8b:	75 03                	jne    c0010b90 <Semaphore::tryAcquire()+0xcc>
c0010b8d:	fb                   	sti    
c0010b8e:	66 90                	xchg   ax,ax
c0010b90:	b0 00                	mov    al,0x0
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	83 c4 0c             	add    esp,0xc
c0010b97:	c3                   	ret    

c0010b98 <Semaphore::assertLocked(char const*)>:
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	fa                   	cli    
c0010b9c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010ba1:	83 c0 01             	add    eax,0x1
c0010ba4:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010ba9:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010bae:	83 c0 01             	add    eax,0x1
c0010bb1:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bba:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bc3:	39 c2                	cmp    edx,eax
c0010bc5:	7d 11                	jge    c0010bd8 <Semaphore::assertLocked(char const*)+0x40>
c0010bc7:	83 ec 0c             	sub    esp,0xc
c0010bca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bce:	e8 7b f2 ff ff       	call   c000fe4e <KePanic(char const*)>
c0010bd3:	83 c4 10             	add    esp,0x10
c0010bd6:	66 90                	xchg   ax,ax
c0010bd8:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010bdd:	83 e8 01             	sub    eax,0x1
c0010be0:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010be5:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010bea:	85 c0                	test   eax,eax
c0010bec:	75 1a                	jne    c0010c08 <Semaphore::assertLocked(char const*)+0x70>
c0010bee:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010bf3:	85 c0                	test   eax,eax
c0010bf5:	74 11                	je     c0010c08 <Semaphore::assertLocked(char const*)+0x70>
c0010bf7:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010c01:	e8 42 64 00 00       	call   c0017048 <schedule()>
c0010c06:	66 90                	xchg   ax,ax
c0010c08:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010c10:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010c15:	85 c0                	test   eax,eax
c0010c17:	75 03                	jne    c0010c1c <Semaphore::assertLocked(char const*)+0x84>
c0010c19:	fb                   	sti    
c0010c1a:	66 90                	xchg   ax,ax
c0010c1c:	90                   	nop
c0010c1d:	83 c4 0c             	add    esp,0xc
c0010c20:	c3                   	ret    
c0010c21:	90                   	nop
c0010c22:	66 90                	xchg   ax,ax

c0010c24 <Semaphore::acquire(int)>:
c0010c24:	83 ec 1c             	sub    esp,0x1c
c0010c27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010c2c:	0f 84 ae 00 00 00    	je     c0010ce0 <Semaphore::acquire(int)+0xbc>
c0010c32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c3a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010c3f:	90                   	nop
c0010c40:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010c45:	85 c0                	test   eax,eax
c0010c47:	0f 84 87 00 00 00    	je     c0010cd4 <Semaphore::acquire(int)+0xb0>
c0010c4d:	83 ec 0c             	sub    esp,0xc
c0010c50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c54:	e8 6b fe ff ff       	call   c0010ac4 <Semaphore::tryAcquire()>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	83 f0 01             	xor    eax,0x1
c0010c5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c63:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010c67:	83 f0 01             	xor    eax,0x1
c0010c6a:	0f b6 c0             	movzx  eax,al
c0010c6d:	85 c0                	test   eax,eax
c0010c6f:	75 5f                	jne    c0010cd0 <Semaphore::acquire(int)+0xac>
c0010c71:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010c76:	7f 34                	jg     c0010cac <Semaphore::acquire(int)+0x88>
c0010c78:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c7c:	89 d0                	mov    eax,edx
c0010c7e:	c1 e0 02             	shl    eax,0x2
c0010c81:	01 d0                	add    eax,edx
c0010c83:	d1 e0                	shl    eax,1
c0010c85:	89 c2                	mov    edx,eax
c0010c87:	c1 fa 1f             	sar    edx,0x1f
c0010c8a:	83 ec 08             	sub    esp,0x8
c0010c8d:	52                   	push   edx
c0010c8e:	50                   	push   eax
c0010c8f:	e8 a8 65 00 00       	call   c001723c <milliTenthSleep(unsigned long long)>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c9b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010c9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010ca7:	eb 97                	jmp    c0010c40 <Semaphore::acquire(int)+0x1c>
c0010ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cac:	83 ec 08             	sub    esp,0x8
c0010caf:	6a 00                	push   0x0
c0010cb1:	68 90 01 00 00       	push   0x190
c0010cb6:	e8 81 65 00 00       	call   c001723c <milliTenthSleep(unsigned long long)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010cc3:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010cc8:	e9 73 ff ff ff       	jmp    c0010c40 <Semaphore::acquire(int)+0x1c>
c0010ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0010cd0:	90                   	nop
c0010cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd8:	e9 fb 00 00 00       	jmp    c0010dd8 <Semaphore::acquire(int)+0x1b4>
c0010cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce0:	fa                   	cli    
c0010ce1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010ce6:	83 c0 01             	add    eax,0x1
c0010ce9:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010cee:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010cf3:	83 c0 01             	add    eax,0x1
c0010cf6:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d08:	39 c2                	cmp    edx,eax
c0010d0a:	7d 14                	jge    c0010d20 <Semaphore::acquire(int)+0xfc>
c0010d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d13:	8d 50 01             	lea    edx,[eax+0x1]
c0010d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d1a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d1d:	eb 6d                	jmp    c0010d8c <Semaphore::acquire(int)+0x168>
c0010d1f:	90                   	nop
c0010d20:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d27:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d35:	85 c0                	test   eax,eax
c0010d37:	75 13                	jne    c0010d4c <Semaphore::acquire(int)+0x128>
c0010d39:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d47:	eb 17                	jmp    c0010d60 <Semaphore::acquire(int)+0x13c>
c0010d49:	8d 76 00             	lea    esi,[esi+0x0]
c0010d4c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d55:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d58:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d65:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d6e:	83 ec 0c             	sub    esp,0xc
c0010d71:	68 a8 44 02 c0       	push   0xc00244a8
c0010d76:	e8 d3 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	83 ec 0c             	sub    esp,0xc
c0010d81:	6a 05                	push   0x5
c0010d83:	e8 80 63 00 00       	call   c0017108 <blockTask(TaskState)>
c0010d88:	83 c4 10             	add    esp,0x10
c0010d8b:	90                   	nop
c0010d8c:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d91:	83 e8 01             	sub    eax,0x1
c0010d94:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010d99:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d9e:	85 c0                	test   eax,eax
c0010da0:	75 1a                	jne    c0010dbc <Semaphore::acquire(int)+0x198>
c0010da2:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010da7:	85 c0                	test   eax,eax
c0010da9:	74 11                	je     c0010dbc <Semaphore::acquire(int)+0x198>
c0010dab:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010db5:	e8 8e 62 00 00       	call   c0017048 <schedule()>
c0010dba:	66 90                	xchg   ax,ax
c0010dbc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010dc4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010dc9:	85 c0                	test   eax,eax
c0010dcb:	75 03                	jne    c0010dd0 <Semaphore::acquire(int)+0x1ac>
c0010dcd:	fb                   	sti    
c0010dce:	66 90                	xchg   ax,ax
c0010dd0:	b8 00 00 00 00       	mov    eax,0x0
c0010dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd8:	83 c4 1c             	add    esp,0x1c
c0010ddb:	c3                   	ret    

c0010ddc <Semaphore::acquire()>:
c0010ddc:	83 ec 0c             	sub    esp,0xc
c0010ddf:	83 ec 08             	sub    esp,0x8
c0010de2:	6a 00                	push   0x0
c0010de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de8:	e8 37 fe ff ff       	call   c0010c24 <Semaphore::acquire(int)>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	90                   	nop
c0010df1:	83 c4 0c             	add    esp,0xc
c0010df4:	c3                   	ret    
c0010df5:	90                   	nop
c0010df6:	66 90                	xchg   ax,ax

c0010df8 <Semaphore::release()>:
c0010df8:	83 ec 1c             	sub    esp,0x1c
c0010dfb:	fa                   	cli    
c0010dfc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e01:	83 c0 01             	add    eax,0x1
c0010e04:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010e09:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e0e:	83 c0 01             	add    eax,0x1
c0010e11:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1d:	85 c0                	test   eax,eax
c0010e1f:	74 2b                	je     c0010e4c <Semaphore::release()+0x54>
c0010e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e41:	e8 5a 65 00 00       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0010e46:	83 c4 10             	add    esp,0x10
c0010e49:	eb 15                	jmp    c0010e60 <Semaphore::release()+0x68>
c0010e4b:	90                   	nop
c0010e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e53:	8d 50 ff             	lea    edx,[eax-0x1]
c0010e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010e60:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e65:	83 e8 01             	sub    eax,0x1
c0010e68:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e6d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e72:	85 c0                	test   eax,eax
c0010e74:	75 1a                	jne    c0010e90 <Semaphore::release()+0x98>
c0010e76:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010e7b:	85 c0                	test   eax,eax
c0010e7d:	74 11                	je     c0010e90 <Semaphore::release()+0x98>
c0010e7f:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010e89:	e8 ba 61 00 00       	call   c0017048 <schedule()>
c0010e8e:	66 90                	xchg   ax,ax
c0010e90:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010e98:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e9d:	85 c0                	test   eax,eax
c0010e9f:	75 03                	jne    c0010ea4 <Semaphore::release()+0xac>
c0010ea1:	fb                   	sti    
c0010ea2:	66 90                	xchg   ax,ax
c0010ea4:	90                   	nop
c0010ea5:	83 c4 1c             	add    esp,0x1c
c0010ea8:	c3                   	ret    

c0010ea9 <KiSigKill(int)>:
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	6a 00                	push   0x0
c0010eae:	6a 00                	push   0x0
c0010eb0:	6a ff                	push   0xffffffff
c0010eb2:	6a 01                	push   0x1
c0010eb4:	e8 99 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010eb9:	83 c4 1c             	add    esp,0x1c
c0010ebc:	c3                   	ret    

c0010ebd <KiDefaultSignalHandlerIgnore(int)>:
c0010ebd:	c3                   	ret    

c0010ebe <KiDefaultSignalHandlerPause(int)>:
c0010ebe:	57                   	push   edi
c0010ebf:	b9 07 00 00 00       	mov    ecx,0x7
c0010ec4:	56                   	push   esi
c0010ec5:	be 03 45 02 c0       	mov    esi,0xc0024503
c0010eca:	83 ec 24             	sub    esp,0x24
c0010ecd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ed1:	fc                   	cld    
c0010ed2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ed4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010ed8:	50                   	push   eax
c0010ed9:	6a 00                	push   0x0
c0010edb:	6a 00                	push   0x0
c0010edd:	6a 27                	push   0x27
c0010edf:	e8 6e 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ee4:	83 c4 34             	add    esp,0x34
c0010ee7:	5e                   	pop    esi
c0010ee8:	5f                   	pop    edi
c0010ee9:	c3                   	ret    

c0010eea <KiDefaultSignalHandlerResume(int)>:
c0010eea:	57                   	push   edi
c0010eeb:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010ef0:	56                   	push   esi
c0010ef1:	be 1f 45 02 c0       	mov    esi,0xc002451f
c0010ef6:	83 ec 24             	sub    esp,0x24
c0010ef9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010efd:	fc                   	cld    
c0010efe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f00:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f04:	50                   	push   eax
c0010f05:	6a 00                	push   0x0
c0010f07:	6a 00                	push   0x0
c0010f09:	6a 27                	push   0x27
c0010f0b:	e8 42 71 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f10:	83 c4 34             	add    esp,0x34
c0010f13:	5e                   	pop    esi
c0010f14:	5f                   	pop    edi
c0010f15:	c3                   	ret    

c0010f16 <KeDeinitSignals(SigHandlerBlock*)>:
c0010f16:	e9 fd eb ff ff       	jmp    c000fb18 <free>

c0010f1b <KeInitSignals()>:
c0010f1b:	53                   	push   ebx
c0010f1c:	83 ec 14             	sub    esp,0x14
c0010f1f:	68 c8 00 00 00       	push   0xc8
c0010f24:	e8 df eb ff ff       	call   c000fb08 <malloc>
c0010f29:	83 c4 0c             	add    esp,0xc
c0010f2c:	6a 04                	push   0x4
c0010f2e:	6a 00                	push   0x0
c0010f30:	50                   	push   eax
c0010f31:	89 c3                	mov    ebx,eax
c0010f33:	e8 b8 f5 fe ff       	call   c00004f0 <memset>
c0010f38:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010f3e:	83 c4 0c             	add    esp,0xc
c0010f41:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010f4b:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010f55:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f5c:	6a 20                	push   0x20
c0010f5e:	6a 00                	push   0x0
c0010f60:	50                   	push   eax
c0010f61:	e8 8a f5 fe ff       	call   c00004f0 <memset>
c0010f66:	83 c4 0c             	add    esp,0xc
c0010f69:	6a 44                	push   0x44
c0010f6b:	6a 00                	push   0x0
c0010f6d:	53                   	push   ebx
c0010f6e:	e8 7d f5 fe ff       	call   c00004f0 <memset>
c0010f73:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010f79:	83 c4 0c             	add    esp,0xc
c0010f7c:	6a 11                	push   0x11
c0010f7e:	6a 00                	push   0x0
c0010f80:	50                   	push   eax
c0010f81:	e8 6a f5 fe ff       	call   c00004f0 <memset>
c0010f86:	83 c4 18             	add    esp,0x18
c0010f89:	89 d8                	mov    eax,ebx
c0010f8b:	5b                   	pop    ebx
c0010f8c:	c3                   	ret    

c0010f8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f8d:	53                   	push   ebx
c0010f8e:	b8 01 00 00 00       	mov    eax,0x1
c0010f93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f9b:	83 f9 10             	cmp    ecx,0x10
c0010f9e:	7f 21                	jg     c0010fc1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010fa7:	89 03                	mov    DWORD PTR [ebx],eax
c0010fa9:	b8 01 00 00 00       	mov    eax,0x1
c0010fae:	d3 e0                	shl    eax,cl
c0010fb0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010fb4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010fb7:	31 c0                	xor    eax,eax
c0010fb9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010fc1:	5b                   	pop    ebx
c0010fc2:	c3                   	ret    

c0010fc3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fc3:	55                   	push   ebp
c0010fc4:	57                   	push   edi
c0010fc5:	bf 08 00 00 00       	mov    edi,0x8
c0010fca:	56                   	push   esi
c0010fcb:	53                   	push   ebx
c0010fcc:	83 ec 14             	sub    esp,0x14
c0010fcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010fd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010fd7:	68 3c 45 02 c0       	push   0xc002453c
c0010fdc:	e8 6d 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010fe1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ff1:	31 c9                	xor    ecx,ecx
c0010ff3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010ff7:	99                   	cdq    
c0010ff8:	f7 ff                	idiv   edi
c0010ffa:	8d 42 24             	lea    eax,[edx+0x24]
c0010ffd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011001:	85 f6                	test   esi,esi
c0011003:	75 1a                	jne    c001101f <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011005:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011009:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c001100d:	50                   	push   eax
c001100e:	50                   	push   eax
c001100f:	52                   	push   edx
c0011010:	68 52 45 02 c0       	push   0xc0024552
c0011015:	e8 34 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001101a:	83 c4 10             	add    esp,0x10
c001101d:	eb 1b                	jmp    c001103a <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c001101f:	41                   	inc    ecx
c0011020:	83 f9 08             	cmp    ecx,0x8
c0011023:	75 ce                	jne    c0010ff3 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	be 01 00 00 00       	mov    esi,0x1
c001102d:	68 73 45 02 c0       	push   0xc0024573
c0011032:	e8 17 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	83 c4 0c             	add    esp,0xc
c001103d:	89 f0                	mov    eax,esi
c001103f:	5b                   	pop    ebx
c0011040:	5e                   	pop    esi
c0011041:	5f                   	pop    edi
c0011042:	5d                   	pop    ebp
c0011043:	c3                   	ret    

c0011044 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011044:	55                   	push   ebp
c0011045:	57                   	push   edi
c0011046:	56                   	push   esi
c0011047:	53                   	push   ebx
c0011048:	83 ec 1c             	sub    esp,0x1c
c001104b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001104f:	85 db                	test   ebx,ebx
c0011051:	0f 84 e0 00 00 00    	je     c0011137 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011057:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001105e:	0f 84 d3 00 00 00    	je     c0011137 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011064:	31 c9                	xor    ecx,ecx
c0011066:	bf 08 00 00 00       	mov    edi,0x8
c001106b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011071:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011074:	99                   	cdq    
c0011075:	f7 ff                	idiv   edi
c0011077:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001107e:	85 ed                	test   ebp,ebp
c0011080:	0f 84 d2 00 00 00    	je     c0011158 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011086:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001108c:	89 e9                	mov    ecx,ebp
c001108e:	bf 01 00 00 00       	mov    edi,0x1
c0011093:	d3 e7                	shl    edi,cl
c0011095:	31 c9                	xor    ecx,ecx
c0011097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001109b:	b8 01 00 00 00       	mov    eax,0x1
c00110a0:	d3 e0                	shl    eax,cl
c00110a2:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00110a6:	74 0a                	je     c00110b2 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00110a8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110ac:	0f 85 85 00 00 00    	jne    c0011137 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00110b2:	41                   	inc    ecx
c00110b3:	83 f9 11             	cmp    ecx,0x11
c00110b6:	75 e3                	jne    c001109b <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00110b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110bc:	46                   	inc    esi
c00110bd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110c3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110ce:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110d5:	09 f8                	or     eax,edi
c00110d7:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110dd:	31 c0                	xor    eax,eax
c00110df:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00110e7:	74 09                	je     c00110f2 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00110e9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110f0:	eb 06                	jmp    c00110f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00110f2:	40                   	inc    eax
c00110f3:	83 f8 08             	cmp    eax,0x8
c00110f6:	75 e7                	jne    c00110df <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00110f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00110fc:	83 fd 09             	cmp    ebp,0x9
c00110ff:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011102:	89 2a                	mov    DWORD PTR [edx],ebp
c0011104:	75 14                	jne    c001111a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011106:	83 ec 0c             	sub    esp,0xc
c0011109:	68 84 45 02 c0       	push   0xc0024584
c001110e:	e8 3b 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011113:	b8 a9 0e 01 c0       	mov    eax,0xc0010ea9
c0011118:	eb 39                	jmp    c0011153 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c001111a:	83 f8 01             	cmp    eax,0x1
c001111d:	75 1c                	jne    c001113b <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c001111f:	83 ec 0c             	sub    esp,0xc
c0011122:	f7 d7                	not    edi
c0011124:	68 8e 45 02 c0       	push   0xc002458e
c0011129:	e8 20 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011137:	31 c0                	xor    eax,eax
c0011139:	eb 30                	jmp    c001116b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001113b:	85 c0                	test   eax,eax
c001113d:	75 2c                	jne    c001116b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	68 9b 45 02 c0       	push   0xc002459b
c0011147:	e8 02 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001114c:	8b 04 ad c0 6c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9340]
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	eb 13                	jmp    c001116b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011158:	41                   	inc    ecx
c0011159:	46                   	inc    esi
c001115a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011160:	83 f9 08             	cmp    ecx,0x8
c0011163:	0f 85 02 ff ff ff    	jne    c001106b <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011169:	eb cc                	jmp    c0011137 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001116b:	83 c4 1c             	add    esp,0x1c
c001116e:	5b                   	pop    ebx
c001116f:	5e                   	pop    esi
c0011170:	5f                   	pop    edi
c0011171:	5d                   	pop    ebp
c0011172:	c3                   	ret    

c0011173 <KiCheckSignalZ>:
c0011173:	80 3d d4 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d4,0x0
c001117a:	74 43                	je     c00111bf <KiCheckSignalZ+0x4c>
c001117c:	83 ec 24             	sub    esp,0x24
c001117f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011183:	50                   	push   eax
c0011184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011189:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001118c:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011192:	e8 ad fe ff ff       	call   c0011044 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	31 d2                	xor    edx,edx
c001119c:	85 c0                	test   eax,eax
c001119e:	74 19                	je     c00111b9 <KiCheckSignalZ+0x46>
c00111a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111a9:	89 02                	mov    DWORD PTR [edx],eax
c00111ab:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00111b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111b6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111b9:	89 d0                	mov    eax,edx
c00111bb:	83 c4 1c             	add    esp,0x1c
c00111be:	c3                   	ret    
c00111bf:	31 d2                	xor    edx,edx
c00111c1:	89 d0                	mov    eax,edx
c00111c3:	c3                   	ret    

c00111c4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111c4:	56                   	push   esi
c00111c5:	53                   	push   ebx
c00111c6:	bb 01 00 00 00       	mov    ebx,0x1
c00111cb:	52                   	push   edx
c00111cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111d4:	d3 e3                	shl    ebx,cl
c00111d6:	83 f9 10             	cmp    ecx,0x10
c00111d9:	7f 08                	jg     c00111e3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00111db:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00111e1:	75 10                	jne    c00111f3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00111e3:	83 ec 0c             	sub    esp,0xc
c00111e6:	68 be 45 02 c0       	push   0xc00245be
c00111eb:	e8 5e ec ff ff       	call   c000fe4e <KePanic(char const*)>
c00111f0:	83 c4 10             	add    esp,0x10
c00111f3:	f7 d3                	not    ebx
c00111f5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111fb:	58                   	pop    eax
c00111fc:	5b                   	pop    ebx
c00111fd:	5e                   	pop    esi
c00111fe:	c3                   	ret    

c00111ff <KiFinishSignalZ>:
c00111ff:	53                   	push   ebx
c0011200:	83 ec 08             	sub    esp,0x8
c0011203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011208:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001120c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001120f:	83 fa 08             	cmp    edx,0x8
c0011212:	75 0c                	jne    c0011220 <KiFinishSignalZ+0x21>
c0011214:	83 ec 0c             	sub    esp,0xc
c0011217:	50                   	push   eax
c0011218:	e8 83 61 00 00       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	50                   	push   eax
c0011221:	50                   	push   eax
c0011222:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001122a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001122d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011233:	e8 8c ff ff ff       	call   c00111c4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011238:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001123e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011245:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001124c:	83 c4 18             	add    esp,0x18
c001124f:	5b                   	pop    ebx
c0011250:	c3                   	ret    

c0011251 <SysSeekDir(regs*)>:
c0011251:	31 c0                	xor    eax,eax
c0011253:	31 d2                	xor    edx,edx
c0011255:	c3                   	ret    

c0011256 <SysTellDir(regs*)>:
c0011256:	31 c0                	xor    eax,eax
c0011258:	31 d2                	xor    edx,edx
c001125a:	c3                   	ret    

c001125b <SysVerify(regs*)>:
c001125b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125f:	31 d2                	xor    edx,edx
c0011261:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011264:	c3                   	ret    

c0011265 <SysGetArgc(regs*)>:
c0011265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001126a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001126d:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011273:	89 c2                	mov    edx,eax
c0011275:	c1 fa 1f             	sar    edx,0x1f
c0011278:	c3                   	ret    

c0011279 <SysTTYName(regs*)>:
c0011279:	b8 01 00 00 00       	mov    eax,0x1
c001127e:	31 d2                	xor    edx,edx
c0011280:	c3                   	ret    

c0011281 <SysFormatDisk(regs*)>:
c0011281:	56                   	push   esi
c0011282:	53                   	push   ebx
c0011283:	83 ec 04             	sub    esp,0x4
c0011286:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001128a:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0011290:	eb 2a                	jmp    c00112bc <SysFormatDisk(regs*)+0x3b>
c0011292:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001129b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001129d:	51                   	push   ecx
c001129e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112a1:	51                   	push   ecx
c00112a2:	50                   	push   eax
c00112a3:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00112aa:	50                   	push   eax
c00112ab:	53                   	push   ebx
c00112ac:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00112af:	83 c4 20             	add    esp,0x20
c00112b2:	83 f8 08             	cmp    eax,0x8
c00112b5:	89 c1                	mov    ecx,eax
c00112b7:	75 14                	jne    c00112cd <SysFormatDisk(regs*)+0x4c>
c00112b9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112bc:	85 db                	test   ebx,ebx
c00112be:	75 d2                	jne    c0011292 <SysFormatDisk(regs*)+0x11>
c00112c0:	b8 03 00 00 00       	mov    eax,0x3
c00112c5:	31 d2                	xor    edx,edx
c00112c7:	83 c4 04             	add    esp,0x4
c00112ca:	5b                   	pop    ebx
c00112cb:	5e                   	pop    esi
c00112cc:	c3                   	ret    
c00112cd:	85 c0                	test   eax,eax
c00112cf:	74 13                	je     c00112e4 <SysFormatDisk(regs*)+0x63>
c00112d1:	31 d2                	xor    edx,edx
c00112d3:	83 f9 09             	cmp    ecx,0x9
c00112d6:	b8 01 00 00 00       	mov    eax,0x1
c00112db:	74 ea                	je     c00112c7 <SysFormatDisk(regs*)+0x46>
c00112dd:	b8 02 00 00 00       	mov    eax,0x2
c00112e2:	eb e1                	jmp    c00112c5 <SysFormatDisk(regs*)+0x44>
c00112e4:	31 c0                	xor    eax,eax
c00112e6:	eb dd                	jmp    c00112c5 <SysFormatDisk(regs*)+0x44>

c00112e8 <SysSetDiskVolumeLabel(regs*)>:
c00112e8:	56                   	push   esi
c00112e9:	53                   	push   ebx
c00112ea:	83 ec 04             	sub    esp,0x4
c00112ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112f1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00112f4:	83 f8 19             	cmp    eax,0x19
c00112f7:	77 33                	ja     c001132c <SysSetDiskVolumeLabel(regs*)+0x44>
c00112f9:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c0011300:	85 c9                	test   ecx,ecx
c0011302:	74 28                	je     c001132c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011304:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011307:	85 db                	test   ebx,ebx
c0011309:	74 21                	je     c001132c <SysSetDiskVolumeLabel(regs*)+0x44>
c001130b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011311:	85 d2                	test   edx,edx
c0011313:	74 17                	je     c001132c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011315:	8b 32                	mov    esi,DWORD PTR [edx]
c0011317:	53                   	push   ebx
c0011318:	50                   	push   eax
c0011319:	51                   	push   ecx
c001131a:	52                   	push   edx
c001131b:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001131e:	83 c4 10             	add    esp,0x10
c0011321:	83 c4 04             	add    esp,0x4
c0011324:	5b                   	pop    ebx
c0011325:	5e                   	pop    esi
c0011326:	89 c2                	mov    edx,eax
c0011328:	c1 fa 1f             	sar    edx,0x1f
c001132b:	c3                   	ret    
c001132c:	83 c4 04             	add    esp,0x4
c001132f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011334:	5b                   	pop    ebx
c0011335:	ba ff ff ff ff       	mov    edx,0xffffffff
c001133a:	5e                   	pop    esi
c001133b:	c3                   	ret    

c001133c <SysGetDiskVolumeLabel(regs*)>:
c001133c:	57                   	push   edi
c001133d:	56                   	push   esi
c001133e:	53                   	push   ebx
c001133f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011343:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011346:	83 fa 19             	cmp    edx,0x19
c0011349:	77 3c                	ja     c0011387 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001134b:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c0011352:	85 c9                	test   ecx,ecx
c0011354:	74 31                	je     c0011387 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011356:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011359:	85 db                	test   ebx,ebx
c001135b:	74 2a                	je     c0011387 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001135d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011360:	85 f6                	test   esi,esi
c0011362:	74 23                	je     c0011387 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011364:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001136a:	85 c0                	test   eax,eax
c001136c:	74 19                	je     c0011387 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001136e:	83 ec 0c             	sub    esp,0xc
c0011371:	8b 38                	mov    edi,DWORD PTR [eax]
c0011373:	56                   	push   esi
c0011374:	53                   	push   ebx
c0011375:	52                   	push   edx
c0011376:	51                   	push   ecx
c0011377:	50                   	push   eax
c0011378:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001137b:	83 c4 20             	add    esp,0x20
c001137e:	5b                   	pop    ebx
c001137f:	5e                   	pop    esi
c0011380:	89 c2                	mov    edx,eax
c0011382:	c1 fa 1f             	sar    edx,0x1f
c0011385:	5f                   	pop    edi
c0011386:	c3                   	ret    
c0011387:	5b                   	pop    ebx
c0011388:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001138d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011392:	5e                   	pop    esi
c0011393:	5f                   	pop    edi
c0011394:	c3                   	ret    

c0011395 <SysRealpath(regs*)>:
c0011395:	53                   	push   ebx
c0011396:	83 ec 08             	sub    esp,0x8
c0011399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001139d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00113a0:	85 c9                	test   ecx,ecx
c00113a2:	74 36                	je     c00113da <SysRealpath(regs*)+0x45>
c00113a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113a7:	31 d2                	xor    edx,edx
c00113a9:	b8 01 00 00 00       	mov    eax,0x1
c00113ae:	85 db                	test   ebx,ebx
c00113b0:	75 05                	jne    c00113b7 <SysRealpath(regs*)+0x22>
c00113b2:	83 c4 08             	add    esp,0x8
c00113b5:	5b                   	pop    ebx
c00113b6:	c3                   	ret    
c00113b7:	6a 00                	push   0x0
c00113b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113c1:	05 0c 01 00 00       	add    eax,0x10c
c00113c6:	50                   	push   eax
c00113c7:	51                   	push   ecx
c00113c8:	53                   	push   ebx
c00113c9:	e8 6a 6a ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	31 d2                	xor    edx,edx
c00113d5:	83 c4 08             	add    esp,0x8
c00113d8:	5b                   	pop    ebx
c00113d9:	c3                   	ret    
c00113da:	b8 01 00 00 00       	mov    eax,0x1
c00113df:	31 d2                	xor    edx,edx
c00113e1:	eb f2                	jmp    c00113d5 <SysRealpath(regs*)+0x40>

c00113e3 <SysReadDir(regs*)>:
c00113e3:	53                   	push   ebx
c00113e4:	83 ec 18             	sub    esp,0x18
c00113e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00113ee:	83 f8 02             	cmp    eax,0x2
c00113f1:	76 4f                	jbe    c0011442 <SysReadDir(regs*)+0x5f>
c00113f3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00113fa:	77 52                	ja     c001144e <SysReadDir(regs*)+0x6b>
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	50                   	push   eax
c0011400:	e8 4c 1d 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	85 c0                	test   eax,eax
c001140a:	74 42                	je     c001144e <SysReadDir(regs*)+0x6b>
c001140c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001141b:	8b 10                	mov    edx,DWORD PTR [eax]
c001141d:	51                   	push   ecx
c001141e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011421:	51                   	push   ecx
c0011422:	6a 00                	push   0x0
c0011424:	68 10 01 00 00       	push   0x110
c0011429:	50                   	push   eax
c001142a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001142d:	83 c4 20             	add    esp,0x20
c0011430:	85 c0                	test   eax,eax
c0011432:	89 c1                	mov    ecx,eax
c0011434:	74 27                	je     c001145d <SysReadDir(regs*)+0x7a>
c0011436:	31 d2                	xor    edx,edx
c0011438:	83 f9 07             	cmp    ecx,0x7
c001143b:	b8 02 00 00 00       	mov    eax,0x2
c0011440:	75 16                	jne    c0011458 <SysReadDir(regs*)+0x75>
c0011442:	b8 01 00 00 00       	mov    eax,0x1
c0011447:	31 d2                	xor    edx,edx
c0011449:	83 c4 18             	add    esp,0x18
c001144c:	5b                   	pop    ebx
c001144d:	c3                   	ret    
c001144e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011453:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011458:	83 c4 18             	add    esp,0x18
c001145b:	5b                   	pop    ebx
c001145c:	c3                   	ret    
c001145d:	31 c0                	xor    eax,eax
c001145f:	31 d2                	xor    edx,edx
c0011461:	eb e6                	jmp    c0011449 <SysReadDir(regs*)+0x66>

c0011463 <SysIsATTY(regs*)>:
c0011463:	83 ec 0c             	sub    esp,0xc
c0011466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001146d:	83 f8 02             	cmp    eax,0x2
c0011470:	76 07                	jbe    c0011479 <SysIsATTY(regs*)+0x16>
c0011472:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011477:	75 26                	jne    c001149f <SysIsATTY(regs*)+0x3c>
c0011479:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001147e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011481:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011487:	85 c0                	test   eax,eax
c0011489:	74 24                	je     c00114af <SysIsATTY(regs*)+0x4c>
c001148b:	8b 10                	mov    edx,DWORD PTR [eax]
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	50                   	push   eax
c0011491:	ff 12                	call   DWORD PTR [edx]
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	31 d2                	xor    edx,edx
c0011498:	83 c4 0c             	add    esp,0xc
c001149b:	0f b6 c0             	movzx  eax,al
c001149e:	c3                   	ret    
c001149f:	83 ec 0c             	sub    esp,0xc
c00114a2:	50                   	push   eax
c00114a3:	e8 a9 1c 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	85 c0                	test   eax,eax
c00114ad:	75 dc                	jne    c001148b <SysIsATTY(regs*)+0x28>
c00114af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114b9:	83 c4 0c             	add    esp,0xc
c00114bc:	c3                   	ret    

c00114bd <SysSeek(regs*)>:
c00114bd:	53                   	push   ebx
c00114be:	83 ec 08             	sub    esp,0x8
c00114c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00114cb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00114d1:	77 39                	ja     c001150c <SysSeek(regs*)+0x4f>
c00114d3:	83 ec 0c             	sub    esp,0xc
c00114d6:	50                   	push   eax
c00114d7:	e8 75 1c 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	85 c0                	test   eax,eax
c00114e1:	74 29                	je     c001150c <SysSeek(regs*)+0x4f>
c00114e3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00114e6:	83 ec 04             	sub    esp,0x4
c00114e9:	31 db                	xor    ebx,ebx
c00114eb:	53                   	push   ebx
c00114ec:	51                   	push   ecx
c00114ed:	50                   	push   eax
c00114ee:	e8 4d 6d ff ff       	call   c0008240 <File::seek(unsigned long long)>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	85 c0                	test   eax,eax
c00114f8:	0f 95 c0             	setne  al
c00114fb:	31 d2                	xor    edx,edx
c00114fd:	0f b6 c0             	movzx  eax,al
c0011500:	f7 d8                	neg    eax
c0011502:	83 d2 00             	adc    edx,0x0
c0011505:	83 c4 08             	add    esp,0x8
c0011508:	5b                   	pop    ebx
c0011509:	f7 da                	neg    edx
c001150b:	c3                   	ret    
c001150c:	83 c4 08             	add    esp,0x8
c001150f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011514:	5b                   	pop    ebx
c0011515:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151a:	c3                   	ret    

c001151b <SysTell(regs*)>:
c001151b:	53                   	push   ebx
c001151c:	83 ec 08             	sub    esp,0x8
c001151f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011523:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011526:	83 f8 02             	cmp    eax,0x2
c0011529:	76 56                	jbe    c0011581 <SysTell(regs*)+0x66>
c001152b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011530:	76 19                	jbe    c001154b <SysTell(regs*)+0x30>
c0011532:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011535:	31 d2                	xor    edx,edx
c0011537:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001153d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011544:	83 c4 08             	add    esp,0x8
c0011547:	31 c0                	xor    eax,eax
c0011549:	5b                   	pop    ebx
c001154a:	c3                   	ret    
c001154b:	83 ec 0c             	sub    esp,0xc
c001154e:	50                   	push   eax
c001154f:	e8 fd 1b 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c0011554:	83 c4 10             	add    esp,0x10
c0011557:	85 c0                	test   eax,eax
c0011559:	74 26                	je     c0011581 <SysTell(regs*)+0x66>
c001155b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001155e:	83 ec 08             	sub    esp,0x8
c0011561:	52                   	push   edx
c0011562:	50                   	push   eax
c0011563:	e8 84 6d ff ff       	call   c00082ec <File::tell(unsigned long long*)>
c0011568:	83 c4 10             	add    esp,0x10
c001156b:	85 c0                	test   eax,eax
c001156d:	0f 95 c0             	setne  al
c0011570:	31 d2                	xor    edx,edx
c0011572:	0f b6 c0             	movzx  eax,al
c0011575:	f7 d8                	neg    eax
c0011577:	83 d2 00             	adc    edx,0x0
c001157a:	83 c4 08             	add    esp,0x8
c001157d:	5b                   	pop    ebx
c001157e:	f7 da                	neg    edx
c0011580:	c3                   	ret    
c0011581:	83 c4 08             	add    esp,0x8
c0011584:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011589:	5b                   	pop    ebx
c001158a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001158f:	c3                   	ret    

c0011590 <SysSize(regs*)>:
c0011590:	53                   	push   ebx
c0011591:	83 ec 18             	sub    esp,0x18
c0011594:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011598:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001159b:	83 f8 02             	cmp    eax,0x2
c001159e:	76 5b                	jbe    c00115fb <SysSize(regs*)+0x6b>
c00115a0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115a5:	76 19                	jbe    c00115c0 <SysSize(regs*)+0x30>
c00115a7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115aa:	31 d2                	xor    edx,edx
c00115ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b9:	83 c4 18             	add    esp,0x18
c00115bc:	31 c0                	xor    eax,eax
c00115be:	5b                   	pop    ebx
c00115bf:	c3                   	ret    
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	50                   	push   eax
c00115c4:	e8 88 1b 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	85 c0                	test   eax,eax
c00115ce:	74 2b                	je     c00115fb <SysSize(regs*)+0x6b>
c00115d0:	83 ec 04             	sub    esp,0x4
c00115d3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00115d7:	52                   	push   edx
c00115d8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115db:	52                   	push   edx
c00115dc:	50                   	push   eax
c00115dd:	e8 a2 6e ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c00115e2:	83 c4 10             	add    esp,0x10
c00115e5:	85 c0                	test   eax,eax
c00115e7:	0f 95 c0             	setne  al
c00115ea:	31 d2                	xor    edx,edx
c00115ec:	0f b6 c0             	movzx  eax,al
c00115ef:	f7 d8                	neg    eax
c00115f1:	83 d2 00             	adc    edx,0x0
c00115f4:	83 c4 18             	add    esp,0x18
c00115f7:	5b                   	pop    ebx
c00115f8:	f7 da                	neg    edx
c00115fa:	c3                   	ret    
c00115fb:	83 c4 18             	add    esp,0x18
c00115fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011603:	5b                   	pop    ebx
c0011604:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011609:	c3                   	ret    

c001160a <SysSizeFromFilename(regs*)>:
c001160a:	55                   	push   ebp
c001160b:	57                   	push   edi
c001160c:	56                   	push   esi
c001160d:	53                   	push   ebx
c001160e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011614:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001161b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001161e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011621:	85 f6                	test   esi,esi
c0011623:	89 f8                	mov    eax,edi
c0011625:	74 09                	je     c0011630 <SysSizeFromFilename(regs*)+0x26>
c0011627:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001162d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011630:	83 f8 02             	cmp    eax,0x2
c0011633:	0f 86 c9 00 00 00    	jbe    c0011702 <SysSizeFromFilename(regs*)+0xf8>
c0011639:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001163e:	76 1f                	jbe    c001165f <SysSizeFromFilename(regs*)+0x55>
c0011640:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011643:	31 d2                	xor    edx,edx
c0011645:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001164b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011652:	31 c0                	xor    eax,eax
c0011654:	81 c4 4c 02 00 00    	add    esp,0x24c
c001165a:	5b                   	pop    ebx
c001165b:	5e                   	pop    esi
c001165c:	5f                   	pop    edi
c001165d:	5d                   	pop    ebp
c001165e:	c3                   	ret    
c001165f:	83 ec 0c             	sub    esp,0xc
c0011662:	68 14 01 00 00       	push   0x114
c0011667:	e8 9c e4 ff ff       	call   c000fb08 <malloc>
c001166c:	6a 01                	push   0x1
c001166e:	89 c5                	mov    ebp,eax
c0011670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011675:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011678:	50                   	push   eax
c0011679:	57                   	push   edi
c001167a:	55                   	push   ebp
c001167b:	e8 e6 69 ff ff       	call   c0008066 <File::File(char const*, Process*, bool)>
c0011680:	83 c4 20             	add    esp,0x20
c0011683:	85 ed                	test   ebp,ebp
c0011685:	74 7b                	je     c0011702 <SysSizeFromFilename(regs*)+0xf8>
c0011687:	83 ec 04             	sub    esp,0x4
c001168a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001168e:	50                   	push   eax
c001168f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011692:	51                   	push   ecx
c0011693:	55                   	push   ebp
c0011694:	e8 eb 6d ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c0011699:	89 c3                	mov    ebx,eax
c001169b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001169e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	85 db                	test   ebx,ebx
c00116a9:	75 57                	jne    c0011702 <SysSizeFromFilename(regs*)+0xf8>
c00116ab:	6a 00                	push   0x0
c00116ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b5:	05 0c 01 00 00       	add    eax,0x10c
c00116ba:	50                   	push   eax
c00116bb:	57                   	push   edi
c00116bc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116c3:	53                   	push   ebx
c00116c4:	e8 6f 67 ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116c9:	58                   	pop    eax
c00116ca:	5a                   	pop    edx
c00116cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116cf:	50                   	push   eax
c00116d0:	53                   	push   ebx
c00116d1:	e8 e9 61 ff ff       	call   c00078bf <KeDereferenceSymlink(char const*, char*)>
c00116d6:	83 c4 10             	add    esp,0x10
c00116d9:	ba 00 00 00 00       	mov    edx,0x0
c00116de:	83 f8 01             	cmp    eax,0x1
c00116e1:	b8 00 00 00 00       	mov    eax,0x0
c00116e6:	74 2f                	je     c0011717 <SysSizeFromFilename(regs*)+0x10d>
c00116e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116ed:	74 3b                	je     c001172a <SysSizeFromFilename(regs*)+0x120>
c00116ef:	85 f6                	test   esi,esi
c00116f1:	0f 84 5d ff ff ff    	je     c0011654 <SysSizeFromFilename(regs*)+0x4a>
c00116f7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00116fd:	e9 52 ff ff ff       	jmp    c0011654 <SysSizeFromFilename(regs*)+0x4a>
c0011702:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011708:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001170d:	5b                   	pop    ebx
c001170e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011713:	5e                   	pop    esi
c0011714:	5f                   	pop    edi
c0011715:	5d                   	pop    ebp
c0011716:	c3                   	ret    
c0011717:	85 f6                	test   esi,esi
c0011719:	0f 84 35 ff ff ff    	je     c0011654 <SysSizeFromFilename(regs*)+0x4a>
c001171f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011725:	e9 2a ff ff ff       	jmp    c0011654 <SysSizeFromFilename(regs*)+0x4a>
c001172a:	85 f6                	test   esi,esi
c001172c:	0f 84 22 ff ff ff    	je     c0011654 <SysSizeFromFilename(regs*)+0x4a>
c0011732:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011738:	e9 17 ff ff ff       	jmp    c0011654 <SysSizeFromFilename(regs*)+0x4a>

c001173d <SysSizeFromFilenameNoSymlink(regs*)>:
c001173d:	55                   	push   ebp
c001173e:	57                   	push   edi
c001173f:	56                   	push   esi
c0011740:	53                   	push   ebx
c0011741:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011747:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001174e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011751:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011754:	85 f6                	test   esi,esi
c0011756:	89 f8                	mov    eax,edi
c0011758:	74 09                	je     c0011763 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001175a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011760:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011763:	83 f8 02             	cmp    eax,0x2
c0011766:	0f 86 c9 00 00 00    	jbe    c0011835 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001176c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011771:	76 1f                	jbe    c0011792 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011773:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011776:	31 d2                	xor    edx,edx
c0011778:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001177e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011785:	31 c0                	xor    eax,eax
c0011787:	81 c4 4c 02 00 00    	add    esp,0x24c
c001178d:	5b                   	pop    ebx
c001178e:	5e                   	pop    esi
c001178f:	5f                   	pop    edi
c0011790:	5d                   	pop    ebp
c0011791:	c3                   	ret    
c0011792:	83 ec 0c             	sub    esp,0xc
c0011795:	68 14 01 00 00       	push   0x114
c001179a:	e8 69 e3 ff ff       	call   c000fb08 <malloc>
c001179f:	6a 00                	push   0x0
c00117a1:	89 c5                	mov    ebp,eax
c00117a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117ab:	50                   	push   eax
c00117ac:	57                   	push   edi
c00117ad:	55                   	push   ebp
c00117ae:	e8 b3 68 ff ff       	call   c0008066 <File::File(char const*, Process*, bool)>
c00117b3:	83 c4 20             	add    esp,0x20
c00117b6:	85 ed                	test   ebp,ebp
c00117b8:	74 7b                	je     c0011835 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117ba:	83 ec 04             	sub    esp,0x4
c00117bd:	8d 44 24 13          	lea    eax,[esp+0x13]
c00117c1:	50                   	push   eax
c00117c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00117c5:	51                   	push   ecx
c00117c6:	55                   	push   ebp
c00117c7:	e8 b8 6c ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c00117cc:	89 c3                	mov    ebx,eax
c00117ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00117d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	85 db                	test   ebx,ebx
c00117dc:	75 57                	jne    c0011835 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117de:	6a 00                	push   0x0
c00117e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e8:	05 0c 01 00 00       	add    eax,0x10c
c00117ed:	50                   	push   eax
c00117ee:	57                   	push   edi
c00117ef:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00117f6:	53                   	push   ebx
c00117f7:	e8 3c 66 ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117fc:	58                   	pop    eax
c00117fd:	5a                   	pop    edx
c00117fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011802:	50                   	push   eax
c0011803:	53                   	push   ebx
c0011804:	e8 b6 60 ff ff       	call   c00078bf <KeDereferenceSymlink(char const*, char*)>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	ba 00 00 00 00       	mov    edx,0x0
c0011811:	83 f8 01             	cmp    eax,0x1
c0011814:	b8 00 00 00 00       	mov    eax,0x0
c0011819:	74 2f                	je     c001184a <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c001181b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011820:	74 3b                	je     c001185d <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011822:	85 f6                	test   esi,esi
c0011824:	0f 84 5d ff ff ff    	je     c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001182a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011830:	e9 52 ff ff ff       	jmp    c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011835:	81 c4 4c 02 00 00    	add    esp,0x24c
c001183b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011840:	5b                   	pop    ebx
c0011841:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011846:	5e                   	pop    esi
c0011847:	5f                   	pop    edi
c0011848:	5d                   	pop    ebp
c0011849:	c3                   	ret    
c001184a:	85 f6                	test   esi,esi
c001184c:	0f 84 35 ff ff ff    	je     c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011852:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011858:	e9 2a ff ff ff       	jmp    c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001185d:	85 f6                	test   esi,esi
c001185f:	0f 84 22 ff ff ff    	je     c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011865:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001186b:	e9 17 ff ff ff       	jmp    c0011787 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011870 <SysClose(regs*)>:
c0011870:	57                   	push   edi
c0011871:	56                   	push   esi
c0011872:	53                   	push   ebx
c0011873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011877:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001187a:	83 f8 02             	cmp    eax,0x2
c001187d:	76 44                	jbe    c00118c3 <SysClose(regs*)+0x53>
c001187f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011885:	31 f6                	xor    esi,esi
c0011887:	31 ff                	xor    edi,edi
c0011889:	83 fa 01             	cmp    edx,0x1
c001188c:	76 2d                	jbe    c00118bb <SysClose(regs*)+0x4b>
c001188e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011893:	77 2e                	ja     c00118c3 <SysClose(regs*)+0x53>
c0011895:	83 ec 0c             	sub    esp,0xc
c0011898:	50                   	push   eax
c0011899:	e8 b3 18 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	85 c0                	test   eax,eax
c00118a3:	89 c3                	mov    ebx,eax
c00118a5:	74 1c                	je     c00118c3 <SysClose(regs*)+0x53>
c00118a7:	83 ec 0c             	sub    esp,0xc
c00118aa:	50                   	push   eax
c00118ab:	e8 30 69 ff ff       	call   c00081e0 <File::close()>
c00118b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	5b                   	pop    ebx
c00118bc:	89 f0                	mov    eax,esi
c00118be:	89 fa                	mov    edx,edi
c00118c0:	5e                   	pop    esi
c00118c1:	5f                   	pop    edi
c00118c2:	c3                   	ret    
c00118c3:	5b                   	pop    ebx
c00118c4:	be ff ff ff ff       	mov    esi,0xffffffff
c00118c9:	89 f0                	mov    eax,esi
c00118cb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00118d0:	89 fa                	mov    edx,edi
c00118d2:	5e                   	pop    esi
c00118d3:	5f                   	pop    edi
c00118d4:	c3                   	ret    

c00118d5 <SysOpenDir(regs*)>:
c00118d5:	56                   	push   esi
c00118d6:	53                   	push   ebx
c00118d7:	83 ec 04             	sub    esp,0x4
c00118da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00118e1:	85 c9                	test   ecx,ecx
c00118e3:	74 5d                	je     c0011942 <SysOpenDir(regs*)+0x6d>
c00118e5:	83 ec 0c             	sub    esp,0xc
c00118e8:	68 14 01 00 00       	push   0x114
c00118ed:	e8 16 e2 ff ff       	call   c000fb08 <malloc>
c00118f2:	83 c4 0c             	add    esp,0xc
c00118f5:	89 c6                	mov    esi,eax
c00118f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118ff:	50                   	push   eax
c0011900:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011903:	52                   	push   edx
c0011904:	56                   	push   esi
c0011905:	e8 3a 6d ff ff       	call   c0008644 <Directory::Directory(char const*, Process*)>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	85 f6                	test   esi,esi
c001190f:	74 31                	je     c0011942 <SysOpenDir(regs*)+0x6d>
c0011911:	83 ec 0c             	sub    esp,0xc
c0011914:	56                   	push   esi
c0011915:	e8 f2 6d ff ff       	call   c000870c <Directory::open()>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	85 c0                	test   eax,eax
c001191f:	75 21                	jne    c0011942 <SysOpenDir(regs*)+0x6d>
c0011921:	83 ec 0c             	sub    esp,0xc
c0011924:	56                   	push   esi
c0011925:	e8 2a 15 00 00       	call   c0012e54 <UnixFile::getFileDescriptor()>
c001192a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	89 02                	mov    DWORD PTR [edx],eax
c0011932:	c1 f8 1f             	sar    eax,0x1f
c0011935:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011938:	83 c4 04             	add    esp,0x4
c001193b:	31 c0                	xor    eax,eax
c001193d:	5b                   	pop    ebx
c001193e:	31 d2                	xor    edx,edx
c0011940:	5e                   	pop    esi
c0011941:	c3                   	ret    
c0011942:	83 c4 04             	add    esp,0x4
c0011945:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001194a:	5b                   	pop    ebx
c001194b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011950:	5e                   	pop    esi
c0011951:	c3                   	ret    

c0011952 <SysMakeDir(regs*)>:
c0011952:	56                   	push   esi
c0011953:	53                   	push   ebx
c0011954:	83 ec 10             	sub    esp,0x10
c0011957:	68 14 01 00 00       	push   0x114
c001195c:	e8 a7 e1 ff ff       	call   c000fb08 <malloc>
c0011961:	83 c4 0c             	add    esp,0xc
c0011964:	89 c3                	mov    ebx,eax
c0011966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001196b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001196e:	50                   	push   eax
c001196f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011973:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011976:	52                   	push   edx
c0011977:	53                   	push   ebx
c0011978:	e8 c7 6c ff ff       	call   c0008644 <Directory::Directory(char const*, Process*)>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	85 db                	test   ebx,ebx
c0011982:	74 2c                	je     c00119b0 <SysMakeDir(regs*)+0x5e>
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	53                   	push   ebx
c0011988:	e8 5f 6f ff ff       	call   c00088ec <Directory::create()>
c001198d:	89 c6                	mov    esi,eax
c001198f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011994:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011997:	83 c4 10             	add    esp,0x10
c001199a:	31 c0                	xor    eax,eax
c001199c:	85 f6                	test   esi,esi
c001199e:	0f 95 c0             	setne  al
c00119a1:	31 d2                	xor    edx,edx
c00119a3:	f7 d8                	neg    eax
c00119a5:	83 d2 00             	adc    edx,0x0
c00119a8:	83 c4 04             	add    esp,0x4
c00119ab:	5b                   	pop    ebx
c00119ac:	f7 da                	neg    edx
c00119ae:	5e                   	pop    esi
c00119af:	c3                   	ret    
c00119b0:	83 c4 04             	add    esp,0x4
c00119b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119b8:	5b                   	pop    ebx
c00119b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119be:	5e                   	pop    esi
c00119bf:	c3                   	ret    

c00119c0 <SysCloseDir(regs*)>:
c00119c0:	53                   	push   ebx
c00119c1:	83 ec 08             	sub    esp,0x8
c00119c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119cb:	8d 50 fd             	lea    edx,[eax-0x3]
c00119ce:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00119d4:	77 2f                	ja     c0011a05 <SysCloseDir(regs*)+0x45>
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	50                   	push   eax
c00119da:	e8 72 17 00 00       	call   c0013151 <KeGetFileFromDescriptor(int)>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	85 c0                	test   eax,eax
c00119e4:	89 c3                	mov    ebx,eax
c00119e6:	74 1d                	je     c0011a05 <SysCloseDir(regs*)+0x45>
c00119e8:	83 ec 0c             	sub    esp,0xc
c00119eb:	50                   	push   eax
c00119ec:	e8 77 6d ff ff       	call   c0008768 <Directory::close()>
c00119f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	31 c0                	xor    eax,eax
c00119fe:	83 c4 08             	add    esp,0x8
c0011a01:	31 d2                	xor    edx,edx
c0011a03:	5b                   	pop    ebx
c0011a04:	c3                   	ret    
c0011a05:	83 c4 08             	add    esp,0x8
c0011a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a0d:	5b                   	pop    ebx
c0011a0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a13:	c3                   	ret    

c0011a14 <SysWait(regs*)>:
c0011a14:	83 ec 10             	sub    esp,0x10
c0011a17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a1b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a1e:	52                   	push   edx
c0011a1f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011a22:	51                   	push   ecx
c0011a23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a26:	50                   	push   eax
c0011a27:	e8 18 57 00 00       	call   c0017144 <waitTask(int, int*, int)>
c0011a2c:	83 c4 1c             	add    esp,0x1c
c0011a2f:	89 c2                	mov    edx,eax
c0011a31:	c1 fa 1f             	sar    edx,0x1f
c0011a34:	c3                   	ret    

c0011a35 <SysNotImpl(regs*)>:
c0011a35:	83 ec 18             	sub    esp,0x18
c0011a38:	68 cf 45 02 c0       	push   0xc00245cf
c0011a3d:	e8 0c e4 ff ff       	call   c000fe4e <KePanic(char const*)>
c0011a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a4c:	83 c4 1c             	add    esp,0x1c
c0011a4f:	c3                   	ret    

c0011a50 <SysPanic(regs*)>:
c0011a50:	83 ec 18             	sub    esp,0x18
c0011a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a57:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a5a:	50                   	push   eax
c0011a5b:	e8 ee e3 ff ff       	call   c000fe4e <KePanic(char const*)>
c0011a60:	b8 01 00 00 00       	mov    eax,0x1
c0011a65:	31 d2                	xor    edx,edx
c0011a67:	83 c4 1c             	add    esp,0x1c
c0011a6a:	c3                   	ret    

c0011a6b <SysRmdir(regs*)>:
c0011a6b:	56                   	push   esi
c0011a6c:	53                   	push   ebx
c0011a6d:	83 ec 10             	sub    esp,0x10
c0011a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a74:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a77:	68 14 01 00 00       	push   0x114
c0011a7c:	e8 87 e0 ff ff       	call   c000fb08 <malloc>
c0011a81:	6a 00                	push   0x0
c0011a83:	89 c3                	mov    ebx,eax
c0011a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a8d:	50                   	push   eax
c0011a8e:	56                   	push   esi
c0011a8f:	53                   	push   ebx
c0011a90:	e8 d1 65 ff ff       	call   c0008066 <File::File(char const*, Process*, bool)>
c0011a95:	83 c4 14             	add    esp,0x14
c0011a98:	53                   	push   ebx
c0011a99:	e8 b2 68 ff ff       	call   c0008350 <File::unlink()>
c0011a9e:	83 c4 10             	add    esp,0x10
c0011aa1:	85 db                	test   ebx,ebx
c0011aa3:	89 c6                	mov    esi,eax
c0011aa5:	74 0c                	je     c0011ab3 <SysRmdir(regs*)+0x48>
c0011aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aa9:	83 ec 0c             	sub    esp,0xc
c0011aac:	53                   	push   ebx
c0011aad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	31 c0                	xor    eax,eax
c0011ab5:	85 f6                	test   esi,esi
c0011ab7:	0f 95 c0             	setne  al
c0011aba:	31 d2                	xor    edx,edx
c0011abc:	f7 d8                	neg    eax
c0011abe:	83 d2 00             	adc    edx,0x0
c0011ac1:	83 c4 04             	add    esp,0x4
c0011ac4:	5b                   	pop    ebx
c0011ac5:	f7 da                	neg    edx
c0011ac7:	5e                   	pop    esi
c0011ac8:	c3                   	ret    

c0011ac9 <SysUnlink(regs*)>:
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	83 ec 10             	sub    esp,0x10
c0011ace:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ad2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ad5:	68 14 01 00 00       	push   0x114
c0011ada:	e8 29 e0 ff ff       	call   c000fb08 <malloc>
c0011adf:	6a 00                	push   0x0
c0011ae1:	89 c3                	mov    ebx,eax
c0011ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011aeb:	50                   	push   eax
c0011aec:	56                   	push   esi
c0011aed:	53                   	push   ebx
c0011aee:	e8 73 65 ff ff       	call   c0008066 <File::File(char const*, Process*, bool)>
c0011af3:	83 c4 14             	add    esp,0x14
c0011af6:	53                   	push   ebx
c0011af7:	e8 54 68 ff ff       	call   c0008350 <File::unlink()>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	85 db                	test   ebx,ebx
c0011b01:	89 c6                	mov    esi,eax
c0011b03:	74 0c                	je     c0011b11 <SysUnlink(regs*)+0x48>
c0011b05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b07:	83 ec 0c             	sub    esp,0xc
c0011b0a:	53                   	push   ebx
c0011b0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b0e:	83 c4 10             	add    esp,0x10
c0011b11:	31 c0                	xor    eax,eax
c0011b13:	85 f6                	test   esi,esi
c0011b15:	0f 95 c0             	setne  al
c0011b18:	31 d2                	xor    edx,edx
c0011b1a:	f7 d8                	neg    eax
c0011b1c:	83 d2 00             	adc    edx,0x0
c0011b1f:	83 c4 04             	add    esp,0x4
c0011b22:	5b                   	pop    ebx
c0011b23:	f7 da                	neg    edx
c0011b25:	5e                   	pop    esi
c0011b26:	c3                   	ret    

c0011b27 <SysGetArgv(regs*)>:
c0011b27:	83 ec 0c             	sub    esp,0xc
c0011b2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b2e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b31:	85 c0                	test   eax,eax
c0011b33:	78 2c                	js     c0011b61 <SysGetArgv(regs*)+0x3a>
c0011b35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b3b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b3e:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011b44:	7d 1b                	jge    c0011b61 <SysGetArgv(regs*)+0x3a>
c0011b46:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011b4d:	85 c0                	test   eax,eax
c0011b4f:	74 18                	je     c0011b69 <SysGetArgv(regs*)+0x42>
c0011b51:	83 ec 08             	sub    esp,0x8
c0011b54:	50                   	push   eax
c0011b55:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b58:	50                   	push   eax
c0011b59:	e8 f2 ea fe ff       	call   c0000650 <strcpy>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	31 c0                	xor    eax,eax
c0011b63:	31 d2                	xor    edx,edx
c0011b65:	83 c4 0c             	add    esp,0xc
c0011b68:	c3                   	ret    
c0011b69:	b8 01 00 00 00       	mov    eax,0x1
c0011b6e:	31 d2                	xor    edx,edx
c0011b70:	83 c4 0c             	add    esp,0xc
c0011b73:	c3                   	ret    

c0011b74 <SysUSleep(regs*)>:
c0011b74:	83 ec 1c             	sub    esp,0x1c
c0011b77:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b7b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011b7e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011b81:	6a 00                	push   0x0
c0011b83:	6a 64                	push   0x64
c0011b85:	52                   	push   edx
c0011b86:	50                   	push   eax
c0011b87:	e8 88 ff 00 00       	call   c0021b14 <__udivdi3>
c0011b8c:	83 c4 18             	add    esp,0x18
c0011b8f:	52                   	push   edx
c0011b90:	50                   	push   eax
c0011b91:	e8 a6 56 00 00       	call   c001723c <milliTenthSleep(unsigned long long)>
c0011b96:	31 c0                	xor    eax,eax
c0011b98:	31 d2                	xor    edx,edx
c0011b9a:	83 c4 1c             	add    esp,0x1c
c0011b9d:	c3                   	ret    

c0011b9e <SysSpawn(regs*)>:
c0011b9e:	56                   	push   esi
c0011b9f:	53                   	push   ebx
c0011ba0:	83 ec 04             	sub    esp,0x4
c0011ba3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ba7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011baa:	85 f6                	test   esi,esi
c0011bac:	75 0a                	jne    c0011bb8 <SysSpawn(regs*)+0x1a>
c0011bae:	83 c4 04             	add    esp,0x4
c0011bb1:	31 c0                	xor    eax,eax
c0011bb3:	5b                   	pop    ebx
c0011bb4:	31 d2                	xor    edx,edx
c0011bb6:	5e                   	pop    esi
c0011bb7:	c3                   	ret    
c0011bb8:	83 ec 0c             	sub    esp,0xc
c0011bbb:	68 c4 07 00 00       	push   0x7c4
c0011bc0:	e8 43 df ff ff       	call   c000fb08 <malloc>
c0011bc5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011bce:	89 c6                	mov    esi,eax
c0011bd0:	31 c0                	xor    eax,eax
c0011bd2:	85 c9                	test   ecx,ecx
c0011bd4:	74 08                	je     c0011bde <SysSpawn(regs*)+0x40>
c0011bd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bdb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bde:	52                   	push   edx
c0011bdf:	50                   	push   eax
c0011be0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011be3:	50                   	push   eax
c0011be4:	56                   	push   esi
c0011be5:	e8 3e 4d 00 00       	call   c0016928 <Process::Process(char const*, Process*, char**)>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011bf4:	75 b8                	jne    c0011bae <SysSpawn(regs*)+0x10>
c0011bf6:	83 ec 0c             	sub    esp,0xc
c0011bf9:	56                   	push   esi
c0011bfa:	e8 e1 52 00 00       	call   c0016ee0 <Process::createUserThread()>
c0011bff:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	83 c4 04             	add    esp,0x4
c0011c07:	5b                   	pop    ebx
c0011c08:	89 c2                	mov    edx,eax
c0011c0a:	c1 fa 1f             	sar    edx,0x1f
c0011c0d:	5e                   	pop    esi
c0011c0e:	c3                   	ret    

c0011c0f <SysGetEnv(regs*)>:
c0011c0f:	57                   	push   edi
c0011c10:	56                   	push   esi
c0011c11:	53                   	push   ebx
c0011c12:	83 ec 1c             	sub    esp,0x1c
c0011c15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c1e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011c21:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c24:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c27:	51                   	push   ecx
c0011c28:	e8 02 cc ff ff       	call   c000e82f <KeGetProcessTotalEnvCount(Process*)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	39 c7                	cmp    edi,eax
c0011c32:	7c 12                	jl     c0011c46 <SysGetEnv(regs*)+0x37>
c0011c34:	31 c0                	xor    eax,eax
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	85 f6                	test   esi,esi
c0011c3a:	74 03                	je     c0011c3f <SysGetEnv(regs*)+0x30>
c0011c3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c3f:	83 c4 10             	add    esp,0x10
c0011c42:	5b                   	pop    ebx
c0011c43:	5e                   	pop    esi
c0011c44:	5f                   	pop    edi
c0011c45:	c3                   	ret    
c0011c46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011c4a:	83 ec 04             	sub    esp,0x4
c0011c4d:	57                   	push   edi
c0011c4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c54:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011c57:	57                   	push   edi
c0011c58:	50                   	push   eax
c0011c59:	e8 f1 cb ff ff       	call   c000e84f <KeGetProcessEnvPair(Process*, int)>
c0011c5e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011c69:	83 c4 0c             	add    esp,0xc
c0011c6c:	85 d2                	test   edx,edx
c0011c6e:	75 23                	jne    c0011c93 <SysGetEnv(regs*)+0x84>
c0011c70:	83 ec 0c             	sub    esp,0xc
c0011c73:	50                   	push   eax
c0011c74:	e8 07 e9 fe ff       	call   c0000580 <strlen>
c0011c79:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c7c:	89 c3                	mov    ebx,eax
c0011c7e:	e8 fd e8 fe ff       	call   c0000580 <strlen>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011c8f:	5b                   	pop    ebx
c0011c90:	5e                   	pop    esi
c0011c91:	5f                   	pop    edi
c0011c92:	c3                   	ret    
c0011c93:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c96:	83 ec 08             	sub    esp,0x8
c0011c99:	50                   	push   eax
c0011c9a:	56                   	push   esi
c0011c9b:	e8 b0 e9 fe ff       	call   c0000650 <strcpy>
c0011ca0:	58                   	pop    eax
c0011ca1:	5a                   	pop    edx
c0011ca2:	68 e9 45 02 c0       	push   0xc00245e9
c0011ca7:	56                   	push   esi
c0011ca8:	e8 c3 eb fe ff       	call   c0000870 <strcat>
c0011cad:	59                   	pop    ecx
c0011cae:	5b                   	pop    ebx
c0011caf:	57                   	push   edi
c0011cb0:	56                   	push   esi
c0011cb1:	e8 ba eb fe ff       	call   c0000870 <strcat>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	31 c0                	xor    eax,eax
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	31 d2                	xor    edx,edx
c0011cc0:	5b                   	pop    ebx
c0011cc1:	5e                   	pop    esi
c0011cc2:	5f                   	pop    edi
c0011cc3:	c3                   	ret    

c0011cc4 <SysSetFatAttrib(regs*)>:
c0011cc4:	57                   	push   edi
c0011cc5:	56                   	push   esi
c0011cc6:	53                   	push   ebx
c0011cc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ccb:	83 ec 0c             	sub    esp,0xc
c0011cce:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011cd1:	68 14 01 00 00       	push   0x114
c0011cd6:	e8 2d de ff ff       	call   c000fb08 <malloc>
c0011cdb:	83 c4 0c             	add    esp,0xc
c0011cde:	89 c3                	mov    ebx,eax
c0011ce0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ce8:	50                   	push   eax
c0011ce9:	57                   	push   edi
c0011cea:	53                   	push   ebx
c0011ceb:	e8 74 64 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0011cf0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cf3:	83 c4 0c             	add    esp,0xc
c0011cf6:	0f b6 d4             	movzx  edx,ah
c0011cf9:	0f b6 c0             	movzx  eax,al
c0011cfc:	52                   	push   edx
c0011cfd:	50                   	push   eax
c0011cfe:	53                   	push   ebx
c0011cff:	e8 e6 66 ff ff       	call   c00083ea <File::chfatattr(unsigned char, unsigned char)>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	85 db                	test   ebx,ebx
c0011d09:	89 c6                	mov    esi,eax
c0011d0b:	74 0c                	je     c0011d19 <SysSetFatAttrib(regs*)+0x55>
c0011d0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d0f:	83 ec 0c             	sub    esp,0xc
c0011d12:	53                   	push   ebx
c0011d13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	5b                   	pop    ebx
c0011d1a:	31 c0                	xor    eax,eax
c0011d1c:	85 f6                	test   esi,esi
c0011d1e:	0f 95 c0             	setne  al
c0011d21:	31 d2                	xor    edx,edx
c0011d23:	5e                   	pop    esi
c0011d24:	f7 d8                	neg    eax
c0011d26:	83 d2 00             	adc    edx,0x0
c0011d29:	f7 da                	neg    edx
c0011d2b:	5f                   	pop    edi
c0011d2c:	c3                   	ret    

c0011d2d <SysShutdown(regs*)>:
c0011d2d:	83 ec 1c             	sub    esp,0x1c
c0011d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d34:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011d37:	85 c9                	test   ecx,ecx
c0011d39:	74 18                	je     c0011d53 <SysShutdown(regs*)+0x26>
c0011d3b:	83 f9 01             	cmp    ecx,0x1
c0011d3e:	74 26                	je     c0011d66 <SysShutdown(regs*)+0x39>
c0011d40:	83 f9 02             	cmp    ecx,0x2
c0011d43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4d:	74 24                	je     c0011d73 <SysShutdown(regs*)+0x46>
c0011d4f:	83 c4 1c             	add    esp,0x1c
c0011d52:	c3                   	ret    
c0011d53:	e8 66 c4 ff ff       	call   c000e1be <KeShutdown()>
c0011d58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d62:	83 c4 1c             	add    esp,0x1c
c0011d65:	c3                   	ret    
c0011d66:	e8 77 c4 ff ff       	call   c000e1e2 <KeSleep()>
c0011d6b:	31 c0                	xor    eax,eax
c0011d6d:	31 d2                	xor    edx,edx
c0011d6f:	83 c4 1c             	add    esp,0x1c
c0011d72:	c3                   	ret    
c0011d73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d7b:	e8 6e c4 ff ff       	call   c000e1ee <KeRestart()>
c0011d80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d88:	eb c5                	jmp    c0011d4f <SysShutdown(regs*)+0x22>

c0011d8a <SysPipe(regs*)>:
c0011d8a:	57                   	push   edi
c0011d8b:	56                   	push   esi
c0011d8c:	53                   	push   ebx
c0011d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d91:	83 ec 0c             	sub    esp,0xc
c0011d94:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011d97:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d9a:	6a 20                	push   0x20
c0011d9c:	e8 67 dd ff ff       	call   c000fb08 <malloc>
c0011da1:	89 c3                	mov    ebx,eax
c0011da3:	58                   	pop    eax
c0011da4:	5a                   	pop    edx
c0011da5:	68 00 50 00 00       	push   0x5000
c0011daa:	53                   	push   ebx
c0011dab:	e8 1a e9 ff ff       	call   c00106ca <Pipe::Pipe(int)>
c0011db0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011db3:	e8 9c 10 00 00       	call   c0012e54 <UnixFile::getFileDescriptor()>
c0011db8:	89 07                	mov    DWORD PTR [edi],eax
c0011dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011dbd:	e8 92 10 00 00       	call   c0012e54 <UnixFile::getFileDescriptor()>
c0011dc2:	83 c4 10             	add    esp,0x10
c0011dc5:	31 d2                	xor    edx,edx
c0011dc7:	89 06                	mov    DWORD PTR [esi],eax
c0011dc9:	31 c0                	xor    eax,eax
c0011dcb:	5b                   	pop    ebx
c0011dcc:	5e                   	pop    esi
c0011dcd:	5f                   	pop    edi
c0011dce:	c3                   	ret    

c0011dcf <SysGetUnixTime(regs*)>:
c0011dcf:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0011dd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011dda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dde:	e9 33 73 ff ff       	jmp    c0009116 <Clock::timeInSecondsLocal()>

c0011de3 <string_ends_with(char const*, char const*)>:
c0011de3:	57                   	push   edi
c0011de4:	56                   	push   esi
c0011de5:	53                   	push   ebx
c0011de6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dea:	83 ec 0c             	sub    esp,0xc
c0011ded:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011df1:	53                   	push   ebx
c0011df2:	e8 89 e7 fe ff       	call   c0000580 <strlen>
c0011df7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dfa:	89 c6                	mov    esi,eax
c0011dfc:	e8 7f e7 fe ff       	call   c0000580 <strlen>
c0011e01:	83 c4 10             	add    esp,0x10
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	39 c6                	cmp    esi,eax
c0011e08:	7d 06                	jge    c0011e10 <string_ends_with(char const*, char const*)+0x2d>
c0011e0a:	5b                   	pop    ebx
c0011e0b:	89 d0                	mov    eax,edx
c0011e0d:	5e                   	pop    esi
c0011e0e:	5f                   	pop    edi
c0011e0f:	c3                   	ret    
c0011e10:	83 ec 08             	sub    esp,0x8
c0011e13:	29 c6                	sub    esi,eax
c0011e15:	57                   	push   edi
c0011e16:	01 f3                	add    ebx,esi
c0011e18:	53                   	push   ebx
c0011e19:	e8 62 e9 fe ff       	call   c0000780 <strcmp>
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	31 d2                	xor    edx,edx
c0011e23:	5b                   	pop    ebx
c0011e24:	5e                   	pop    esi
c0011e25:	85 c0                	test   eax,eax
c0011e27:	5f                   	pop    edi
c0011e28:	0f 94 c2             	sete   dl
c0011e2b:	89 d0                	mov    eax,edx
c0011e2d:	c3                   	ret    

c0011e2e <SysOpen(regs*)>:
c0011e2e:	56                   	push   esi
c0011e2f:	53                   	push   ebx
c0011e30:	81 ec 04 01 00 00    	sub    esp,0x104
c0011e36:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011e3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e40:	85 c0                	test   eax,eax
c0011e42:	0f 84 c4 01 00 00    	je     c001200c <SysOpen(regs*)+0x1de>
c0011e48:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e4b:	85 c0                	test   eax,eax
c0011e4d:	0f 84 b9 01 00 00    	je     c001200c <SysOpen(regs*)+0x1de>
c0011e53:	6a 00                	push   0x0
c0011e55:	68 eb 45 02 c0       	push   0xc00245eb
c0011e5a:	50                   	push   eax
c0011e5b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011e5f:	56                   	push   esi
c0011e60:	e8 d3 5f ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e65:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e68:	e8 13 e7 fe ff       	call   c0000580 <strlen>
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	83 e8 01             	sub    eax,0x1
c0011e73:	74 29                	je     c0011e9e <SysOpen(regs*)+0x70>
c0011e75:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011e79:	83 fa 2e             	cmp    edx,0x2e
c0011e7c:	74 1c                	je     c0011e9a <SysOpen(regs*)+0x6c>
c0011e7e:	83 fa 3a             	cmp    edx,0x3a
c0011e81:	74 17                	je     c0011e9a <SysOpen(regs*)+0x6c>
c0011e83:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011e87:	83 e8 01             	sub    eax,0x1
c0011e8a:	74 12                	je     c0011e9e <SysOpen(regs*)+0x70>
c0011e8c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011e90:	83 fa 3a             	cmp    edx,0x3a
c0011e93:	74 05                	je     c0011e9a <SysOpen(regs*)+0x6c>
c0011e95:	83 fa 2e             	cmp    edx,0x2e
c0011e98:	75 e9                	jne    c0011e83 <SysOpen(regs*)+0x55>
c0011e9a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011e9e:	83 ec 08             	sub    esp,0x8
c0011ea1:	68 ef 45 02 c0       	push   0xc00245ef
c0011ea6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ea9:	50                   	push   eax
c0011eaa:	e8 34 ff ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	85 c0                	test   eax,eax
c0011eb4:	74 1d                	je     c0011ed3 <SysOpen(regs*)+0xa5>
c0011eb6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eb9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011ebf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ec6:	81 c4 04 01 00 00    	add    esp,0x104
c0011ecc:	31 c0                	xor    eax,eax
c0011ece:	5b                   	pop    ebx
c0011ecf:	31 d2                	xor    edx,edx
c0011ed1:	5e                   	pop    esi
c0011ed2:	c3                   	ret    
c0011ed3:	83 ec 08             	sub    esp,0x8
c0011ed6:	68 f4 45 02 c0       	push   0xc00245f4
c0011edb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ede:	50                   	push   eax
c0011edf:	e8 ff fe ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	85 c0                	test   eax,eax
c0011ee9:	75 cb                	jne    c0011eb6 <SysOpen(regs*)+0x88>
c0011eeb:	83 ec 08             	sub    esp,0x8
c0011eee:	68 f0 45 02 c0       	push   0xc00245f0
c0011ef3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ef6:	50                   	push   eax
c0011ef7:	e8 84 e8 fe ff       	call   c0000780 <strcmp>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	85 c0                	test   eax,eax
c0011f01:	74 b3                	je     c0011eb6 <SysOpen(regs*)+0x88>
c0011f03:	83 ec 08             	sub    esp,0x8
c0011f06:	68 ef 45 02 c0       	push   0xc00245ef
c0011f0b:	56                   	push   esi
c0011f0c:	e8 d2 fe ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011f11:	83 c4 10             	add    esp,0x10
c0011f14:	85 c0                	test   eax,eax
c0011f16:	75 9e                	jne    c0011eb6 <SysOpen(regs*)+0x88>
c0011f18:	83 ec 08             	sub    esp,0x8
c0011f1b:	68 f9 45 02 c0       	push   0xc00245f9
c0011f20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f23:	50                   	push   eax
c0011f24:	e8 ba fe ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	85 c0                	test   eax,eax
c0011f2e:	0f 85 eb 00 00 00    	jne    c001201f <SysOpen(regs*)+0x1f1>
c0011f34:	83 ec 08             	sub    esp,0x8
c0011f37:	68 fe 45 02 c0       	push   0xc00245fe
c0011f3c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f3f:	50                   	push   eax
c0011f40:	e8 9e fe ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	85 c0                	test   eax,eax
c0011f4a:	0f 85 cf 00 00 00    	jne    c001201f <SysOpen(regs*)+0x1f1>
c0011f50:	83 ec 08             	sub    esp,0x8
c0011f53:	68 fa 45 02 c0       	push   0xc00245fa
c0011f58:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f5b:	51                   	push   ecx
c0011f5c:	e8 1f e8 fe ff       	call   c0000780 <strcmp>
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	85 c0                	test   eax,eax
c0011f66:	0f 84 b3 00 00 00    	je     c001201f <SysOpen(regs*)+0x1f1>
c0011f6c:	83 ec 08             	sub    esp,0x8
c0011f6f:	68 f9 45 02 c0       	push   0xc00245f9
c0011f74:	56                   	push   esi
c0011f75:	e8 69 fe ff ff       	call   c0011de3 <string_ends_with(char const*, char const*)>
c0011f7a:	83 c4 10             	add    esp,0x10
c0011f7d:	85 c0                	test   eax,eax
c0011f7f:	0f 85 9a 00 00 00    	jne    c001201f <SysOpen(regs*)+0x1f1>
c0011f85:	83 ec 0c             	sub    esp,0xc
c0011f88:	68 14 01 00 00       	push   0x114
c0011f8d:	e8 76 db ff ff       	call   c000fb08 <malloc>
c0011f92:	83 c4 0c             	add    esp,0xc
c0011f95:	89 c6                	mov    esi,eax
c0011f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f9f:	50                   	push   eax
c0011fa0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fa3:	52                   	push   edx
c0011fa4:	56                   	push   esi
c0011fa5:	e8 ba 61 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	85 f6                	test   esi,esi
c0011faf:	74 5b                	je     c001200c <SysOpen(regs*)+0x1de>
c0011fb1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fb4:	0f b6 c2             	movzx  eax,dl
c0011fb7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011fba:	89 d0                	mov    eax,edx
c0011fbc:	83 e0 01             	and    eax,0x1
c0011fbf:	f6 c2 02             	test   dl,0x2
c0011fc2:	74 03                	je     c0011fc7 <SysOpen(regs*)+0x199>
c0011fc4:	83 c8 02             	or     eax,0x2
c0011fc7:	f6 c2 04             	test   dl,0x4
c0011fca:	74 03                	je     c0011fcf <SysOpen(regs*)+0x1a1>
c0011fcc:	83 c8 04             	or     eax,0x4
c0011fcf:	f6 c2 08             	test   dl,0x8
c0011fd2:	74 03                	je     c0011fd7 <SysOpen(regs*)+0x1a9>
c0011fd4:	83 c8 0a             	or     eax,0xa
c0011fd7:	80 e2 10             	and    dl,0x10
c0011fda:	74 03                	je     c0011fdf <SysOpen(regs*)+0x1b1>
c0011fdc:	83 c8 12             	or     eax,0x12
c0011fdf:	83 ec 08             	sub    esp,0x8
c0011fe2:	50                   	push   eax
c0011fe3:	56                   	push   esi
c0011fe4:	e8 99 61 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0011fe9:	83 c4 10             	add    esp,0x10
c0011fec:	85 c0                	test   eax,eax
c0011fee:	75 1c                	jne    c001200c <SysOpen(regs*)+0x1de>
c0011ff0:	83 ec 0c             	sub    esp,0xc
c0011ff3:	56                   	push   esi
c0011ff4:	e8 5b 0e 00 00       	call   c0012e54 <UnixFile::getFileDescriptor()>
c0011ff9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	89 02                	mov    DWORD PTR [edx],eax
c0012001:	c1 f8 1f             	sar    eax,0x1f
c0012004:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012007:	e9 ba fe ff ff       	jmp    c0011ec6 <SysOpen(regs*)+0x98>
c001200c:	81 c4 04 01 00 00    	add    esp,0x104
c0012012:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012017:	5b                   	pop    ebx
c0012018:	ba ff ff ff ff       	mov    edx,0xffffffff
c001201d:	5e                   	pop    esi
c001201e:	c3                   	ret    
c001201f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012022:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012028:	e9 92 fe ff ff       	jmp    c0011ebf <SysOpen(regs*)+0x91>

c001202d <KeSystemCall(regs*, void*)>:
c001202d:	53                   	push   ebx
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012035:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012038:	83 f8 48             	cmp    eax,0x48
c001203b:	77 29                	ja     c0012066 <KeSystemCall(regs*, void*)+0x39>
c001203d:	83 3c 85 20 6d 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd92e0],0x0
c0012045:	74 1f                	je     c0012066 <KeSystemCall(regs*, void*)+0x39>
c0012047:	51                   	push   ecx
c0012048:	51                   	push   ecx
c0012049:	50                   	push   eax
c001204a:	68 03 46 02 c0       	push   0xc0024603
c001204f:	e8 fa 4e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012054:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012057:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001205a:	ff 14 85 20 6d 02 c0 	call   DWORD PTR [eax*4-0x3ffd92e0]
c0012061:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012064:	eb 0d                	jmp    c0012073 <KeSystemCall(regs*, void*)+0x46>
c0012066:	52                   	push   edx
c0012067:	52                   	push   edx
c0012068:	50                   	push   eax
c0012069:	68 0b 46 02 c0       	push   0xc002460b
c001206e:	e8 db 4e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001207b:	83 c4 08             	add    esp,0x8
c001207e:	31 d2                	xor    edx,edx
c0012080:	5b                   	pop    ebx
c0012081:	c3                   	ret    

c0012082 <VgaText::isAtty()>:
c0012082:	b0 01                	mov    al,0x1
c0012084:	c3                   	ret    
c0012085:	90                   	nop

c0012086 <VgaText::~VgaText()>:
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	ba 88 46 02 c0       	mov    edx,0xc0024688
c001208e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012092:	89 10                	mov    DWORD PTR [eax],edx
c0012094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	50                   	push   eax
c001209c:	e8 a1 0f 00 00       	call   c0013042 <UnixFile::~UnixFile()>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	90                   	nop
c00120a5:	83 c4 0c             	add    esp,0xc
c00120a8:	c3                   	ret    
c00120a9:	90                   	nop

c00120aa <VgaText::~VgaText()>:
c00120aa:	83 ec 0c             	sub    esp,0xc
c00120ad:	83 ec 0c             	sub    esp,0xc
c00120b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120b4:	e8 cd ff ff ff       	call   c0012086 <VgaText::~VgaText()>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	83 ec 08             	sub    esp,0x8
c00120bf:	68 84 01 00 00       	push   0x184
c00120c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120c8:	e8 9e b1 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00120cd:	83 c4 10             	add    esp,0x10
c00120d0:	83 c4 0c             	add    esp,0xc
c00120d3:	c3                   	ret    

c00120d4 <VgaText::read(unsigned long long, void*, int*)>:
c00120d4:	83 ec 10             	sub    esp,0x10
c00120d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00120df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120e3:	e8 3d 84 ff ff       	call   c000a525 <readKeyboard(VgaText*, char*, unsigned long)>
c00120e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00120ec:	89 02                	mov    DWORD PTR [edx],eax
c00120ee:	31 c0                	xor    eax,eax
c00120f0:	83 c4 1c             	add    esp,0x1c
c00120f3:	c3                   	ret    

c00120f4 <setTerminalScrollLock(bool)>:
c00120f4:	c3                   	ret    

c00120f5 <doTerminalCycle()>:
c00120f5:	c3                   	ret    

c00120f6 <addToTerminalCycle(VgaText*)>:
c00120f6:	c3                   	ret    

c00120f7 <scrollTerminalScrollLock(int)>:
c00120f7:	c3                   	ret    

c00120f8 <VgaText::updateTitle()>:
c00120f8:	c3                   	ret    
c00120f9:	90                   	nop

c00120fa <VgaText::load()>:
c00120fa:	c3                   	ret    
c00120fb:	90                   	nop

c00120fc <VgaText::updateCursor()>:
c00120fc:	83 ec 14             	sub    esp,0x14
c00120ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012103:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012106:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012109:	e8 de 92 00 00       	call   c001b3ec <HalConsoleCursorUpdate(int, int)>
c001210e:	83 c4 1c             	add    esp,0x1c
c0012111:	c3                   	ret    

c0012112 <VgaText::doANSI_SGR(int)>:
c0012112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001211a:	85 d2                	test   edx,edx
c001211c:	75 0b                	jne    c0012129 <VgaText::doANSI_SGR(int)+0x17>
c001211e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012121:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012124:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012127:	eb 59                	jmp    c0012182 <VgaText::doANSI_SGR(int)+0x70>
c0012129:	83 fa 07             	cmp    edx,0x7
c001212c:	75 0b                	jne    c0012139 <VgaText::doANSI_SGR(int)+0x27>
c001212e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012131:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012134:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012137:	eb 49                	jmp    c0012182 <VgaText::doANSI_SGR(int)+0x70>
c0012139:	83 fa 1b             	cmp    edx,0x1b
c001213c:	74 e0                	je     c001211e <VgaText::doANSI_SGR(int)+0xc>
c001213e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012141:	83 f9 07             	cmp    ecx,0x7
c0012144:	77 09                	ja     c001214f <VgaText::doANSI_SGR(int)+0x3d>
c0012146:	8b 14 8d 80 6e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9180]
c001214d:	eb 20                	jmp    c001216f <VgaText::doANSI_SGR(int)+0x5d>
c001214f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012152:	83 f9 07             	cmp    ecx,0x7
c0012155:	77 09                	ja     c0012160 <VgaText::doANSI_SGR(int)+0x4e>
c0012157:	8b 14 8d 80 6e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9180]
c001215e:	eb 22                	jmp    c0012182 <VgaText::doANSI_SGR(int)+0x70>
c0012160:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012163:	83 f9 07             	cmp    ecx,0x7
c0012166:	77 0b                	ja     c0012173 <VgaText::doANSI_SGR(int)+0x61>
c0012168:	8b 14 95 38 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd92c8]
c001216f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012172:	c3                   	ret    
c0012173:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012176:	83 f9 07             	cmp    ecx,0x7
c0012179:	77 0a                	ja     c0012185 <VgaText::doANSI_SGR(int)+0x73>
c001217b:	8b 14 95 10 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd92f0]
c0012182:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012185:	c3                   	ret    

c0012186 <VgaText::setDefaultBgColour(VgaColour)>:
c0012186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001218a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001218e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012191:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012194:	c3                   	ret    
c0012195:	90                   	nop

c0012196 <VgaText::setDefaultFgColour(VgaColour)>:
c0012196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001219a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001219e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00121a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121a4:	c3                   	ret    
c00121a5:	90                   	nop

c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00121a6:	53                   	push   ebx
c00121a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121b3:	51                   	push   ecx
c00121b4:	e8 cd ff ff ff       	call   c0012186 <VgaText::setDefaultBgColour(VgaColour)>
c00121b9:	58                   	pop    eax
c00121ba:	5a                   	pop    edx
c00121bb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00121bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00121c3:	5b                   	pop    ebx
c00121c4:	eb d0                	jmp    c0012196 <VgaText::setDefaultFgColour(VgaColour)>

c00121c6 <VgaText::setTitleTextColour(VgaColour)>:
c00121c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121ce:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00121d1:	c3                   	ret    

c00121d2 <VgaText::setTitleColour(VgaColour)>:
c00121d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00121dd:	c3                   	ret    

c00121de <VgaText::setTitle(char*)>:
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00121e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00121e9:	83 e0 0f             	and    eax,0xf
c00121ec:	c1 e2 04             	shl    edx,0x4
c00121ef:	09 d0                	or     eax,edx
c00121f1:	c3                   	ret    

c00121f2 <VgaText::scrollScreen()>:
c00121f2:	55                   	push   ebp
c00121f3:	57                   	push   edi
c00121f4:	56                   	push   esi
c00121f5:	be 01 00 00 00       	mov    esi,0x1
c00121fa:	53                   	push   ebx
c00121fb:	83 ec 0c             	sub    esp,0xc
c00121fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012202:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012205:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001220b:	31 ff                	xor    edi,edi
c001220d:	01 e9                	add    ecx,ebp
c001220f:	8a 01                	mov    al,BYTE PTR [ecx]
c0012211:	83 fe 18             	cmp    esi,0x18
c0012214:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001221a:	75 20                	jne    c001223c <VgaText::scrollScreen()+0x4a>
c001221c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012222:	74 15                	je     c0012239 <VgaText::scrollScreen()+0x47>
c0012224:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012228:	50                   	push   eax
c0012229:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001222d:	50                   	push   eax
c001222e:	e8 ad ff ff ff       	call   c00121e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0012233:	5a                   	pop    edx
c0012234:	5a                   	pop    edx
c0012235:	88 01                	mov    BYTE PTR [ecx],al
c0012237:	eb 03                	jmp    c001223c <VgaText::scrollScreen()+0x4a>
c0012239:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001223c:	47                   	inc    edi
c001223d:	41                   	inc    ecx
c001223e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012244:	75 c9                	jne    c001220f <VgaText::scrollScreen()+0x1d>
c0012246:	46                   	inc    esi
c0012247:	83 fe 19             	cmp    esi,0x19
c001224a:	75 b9                	jne    c0012205 <VgaText::scrollScreen()+0x13>
c001224c:	39 1d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,ebx
c0012252:	75 1f                	jne    c0012273 <VgaText::scrollScreen()+0x81>
c0012254:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012258:	74 05                	je     c001225f <VgaText::scrollScreen()+0x6d>
c001225a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001225d:	eb 14                	jmp    c0012273 <VgaText::scrollScreen()+0x81>
c001225f:	50                   	push   eax
c0012260:	50                   	push   eax
c0012261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012265:	50                   	push   eax
c0012266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001226a:	50                   	push   eax
c001226b:	e8 10 90 00 00       	call   c001b280 <HalConsoleScroll(int, int)>
c0012270:	83 c4 10             	add    esp,0x10
c0012273:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012277:	83 c4 0c             	add    esp,0xc
c001227a:	5b                   	pop    ebx
c001227b:	5e                   	pop    esi
c001227c:	5f                   	pop    edi
c001227d:	5d                   	pop    ebp
c001227e:	e9 79 fe ff ff       	jmp    c00120fc <VgaText::updateCursor()>
c0012283:	90                   	nop

c0012284 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012284:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012289:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001228e:	c1 e0 08             	shl    eax,0x8
c0012291:	09 d0                	or     eax,edx
c0012293:	c3                   	ret    

c0012294 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012294:	55                   	push   ebp
c0012295:	57                   	push   edi
c0012296:	56                   	push   esi
c0012297:	53                   	push   ebx
c0012298:	83 ec 1c             	sub    esp,0x1c
c001229b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001229f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00122a3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00122a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00122ab:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00122ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00122ba:	85 ed                	test   ebp,ebp
c00122bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122c0:	75 14                	jne    c00122d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00122c2:	c7 44 24 30 1f 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc002461f
c00122ca:	83 c4 1c             	add    esp,0x1c
c00122cd:	5b                   	pop    ebx
c00122ce:	5e                   	pop    esi
c00122cf:	5f                   	pop    edi
c00122d0:	5d                   	pop    ebp
c00122d1:	e9 78 db ff ff       	jmp    c000fe4e <KePanic(char const*)>
c00122d6:	50                   	push   eax
c00122d7:	50                   	push   eax
c00122d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00122dd:	50                   	push   eax
c00122de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00122e3:	50                   	push   eax
c00122e4:	e8 f7 fe ff ff       	call   c00121e0 <VgaText::combineColours(unsigned char, unsigned char)>
c00122e9:	5a                   	pop    edx
c00122ea:	5a                   	pop    edx
c00122eb:	0f b6 c0             	movzx  eax,al
c00122ee:	0f be c9             	movsx  ecx,cl
c00122f1:	50                   	push   eax
c00122f2:	51                   	push   ecx
c00122f3:	e8 8c ff ff ff       	call   c0012284 <VgaText::combineCharAndColour(char, unsigned char)>
c00122f8:	6b d6 50             	imul   edx,esi,0x50
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	01 da                	add    edx,ebx
c0012300:	0f b7 d2             	movzx  edx,dx
c0012303:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012308:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c001230e:	75 28                	jne    c0012338 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012310:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012318:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001231c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012320:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012328:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001232c:	83 c4 1c             	add    esp,0x1c
c001232f:	5b                   	pop    ebx
c0012330:	5e                   	pop    esi
c0012331:	5f                   	pop    edi
c0012332:	5d                   	pop    ebp
c0012333:	e9 50 90 00 00       	jmp    c001b388 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012338:	83 c4 1c             	add    esp,0x1c
c001233b:	5b                   	pop    ebx
c001233c:	5e                   	pop    esi
c001233d:	5f                   	pop    edi
c001233e:	5d                   	pop    ebp
c001233f:	c3                   	ret    

c0012340 <VgaText::getCursorX()>:
c0012340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012344:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012347:	c3                   	ret    

c0012348 <VgaText::getCursorY()>:
c0012348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001234c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001234f:	c3                   	ret    

c0012350 <VgaText::setCursor(int, int)>:
c0012350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012358:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001235b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001235f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012362:	e9 95 fd ff ff       	jmp    c00120fc <VgaText::updateCursor()>

c0012367 <setActiveTerminal(VgaText*)>:
c0012367:	53                   	push   ebx
c0012368:	83 ec 08             	sub    esp,0x8
c001236b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001236f:	85 db                	test   ebx,ebx
c0012371:	75 11                	jne    c0012384 <setActiveTerminal(VgaText*)+0x1d>
c0012373:	c7 44 24 10 2f 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002462f
c001237b:	83 c4 08             	add    esp,0x8
c001237e:	5b                   	pop    ebx
c001237f:	e9 ca da ff ff       	jmp    c000fe4e <KePanic(char const*)>
c0012384:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0012389:	85 c0                	test   eax,eax
c001238b:	74 0c                	je     c0012399 <setActiveTerminal(VgaText*)+0x32>
c001238d:	83 ec 0c             	sub    esp,0xc
c0012390:	50                   	push   eax
c0012391:	e8 66 fd ff ff       	call   c00120fc <VgaText::updateCursor()>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	50                   	push   eax
c001239a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001239d:	89 1d b4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1b4,ebx
c00123a3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123a6:	53                   	push   ebx
c00123a7:	e8 a4 ff ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c00123ac:	83 c4 18             	add    esp,0x18
c00123af:	5b                   	pop    ebx
c00123b0:	c3                   	ret    
c00123b1:	90                   	nop

c00123b2 <VgaText::clearScreen()>:
c00123b2:	57                   	push   edi
c00123b3:	56                   	push   esi
c00123b4:	31 f6                	xor    esi,esi
c00123b6:	53                   	push   ebx
c00123b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123bb:	52                   	push   edx
c00123bc:	6a 00                	push   0x0
c00123be:	6a 00                	push   0x0
c00123c0:	53                   	push   ebx
c00123c1:	e8 8a ff ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c00123c6:	83 c4 10             	add    esp,0x10
c00123c9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00123d0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00123d3:	7e 20                	jle    c00123f5 <VgaText::clearScreen()+0x43>
c00123d5:	31 ff                	xor    edi,edi
c00123d7:	50                   	push   eax
c00123d8:	50                   	push   eax
c00123d9:	56                   	push   esi
c00123da:	57                   	push   edi
c00123db:	47                   	inc    edi
c00123dc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00123df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00123e2:	6a 20                	push   0x20
c00123e4:	53                   	push   ebx
c00123e5:	e8 aa fe ff ff       	call   c0012294 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00123ea:	83 c4 20             	add    esp,0x20
c00123ed:	83 ff 50             	cmp    edi,0x50
c00123f0:	75 e5                	jne    c00123d7 <VgaText::clearScreen()+0x25>
c00123f2:	46                   	inc    esi
c00123f3:	eb db                	jmp    c00123d0 <VgaText::clearScreen()+0x1e>
c00123f5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00123fc:	5b                   	pop    ebx
c00123fd:	5e                   	pop    esi
c00123fe:	5f                   	pop    edi
c00123ff:	c3                   	ret    

c0012400 <VgaText::setCursorX(int)>:
c0012400:	83 ec 10             	sub    esp,0x10
c0012403:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012407:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001240a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001240e:	50                   	push   eax
c001240f:	e8 3c ff ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c0012414:	83 c4 1c             	add    esp,0x1c
c0012417:	c3                   	ret    

c0012418 <VgaText::setCursorY(int)>:
c0012418:	83 ec 10             	sub    esp,0x10
c001241b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001241f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012423:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012426:	50                   	push   eax
c0012427:	e8 24 ff ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c001242c:	83 c4 1c             	add    esp,0x1c
c001242f:	c3                   	ret    

c0012430 <VgaText::incrementCursor(bool)>:
c0012430:	56                   	push   esi
c0012431:	53                   	push   ebx
c0012432:	51                   	push   ecx
c0012433:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012437:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001243b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001243e:	40                   	inc    eax
c001243f:	83 f8 50             	cmp    eax,0x50
c0012442:	74 05                	je     c0012449 <VgaText::incrementCursor(bool)+0x19>
c0012444:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012447:	eb 24                	jmp    c001246d <VgaText::incrementCursor(bool)+0x3d>
c0012449:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012450:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012453:	8d 50 01             	lea    edx,[eax+0x1]
c0012456:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012459:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001245c:	75 0f                	jne    c001246d <VgaText::incrementCursor(bool)+0x3d>
c001245e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	53                   	push   ebx
c0012465:	e8 88 fd ff ff       	call   c00121f2 <VgaText::scrollScreen()>
c001246a:	83 c4 10             	add    esp,0x10
c001246d:	89 f0                	mov    eax,esi
c001246f:	84 c0                	test   al,al
c0012471:	74 0c                	je     c001247f <VgaText::incrementCursor(bool)+0x4f>
c0012473:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012477:	5a                   	pop    edx
c0012478:	5b                   	pop    ebx
c0012479:	5e                   	pop    esi
c001247a:	e9 7d fc ff ff       	jmp    c00120fc <VgaText::updateCursor()>
c001247f:	58                   	pop    eax
c0012480:	5b                   	pop    ebx
c0012481:	5e                   	pop    esi
c0012482:	c3                   	ret    
c0012483:	90                   	nop

c0012484 <VgaText::decrementCursor(bool)>:
c0012484:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001248c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001248f:	85 c0                	test   eax,eax
c0012491:	74 04                	je     c0012497 <VgaText::decrementCursor(bool)+0x13>
c0012493:	48                   	dec    eax
c0012494:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012497:	84 c9                	test   cl,cl
c0012499:	74 09                	je     c00124a4 <VgaText::decrementCursor(bool)+0x20>
c001249b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001249f:	e9 58 fc ff ff       	jmp    c00120fc <VgaText::updateCursor()>
c00124a4:	c3                   	ret    
c00124a5:	90                   	nop

c00124a6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00124a6:	53                   	push   ebx
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00124af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00124bb:	83 f8 07             	cmp    eax,0x7
c00124be:	75 21                	jne    c00124e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00124c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124c8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00124d0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00124d8:	83 c4 08             	add    esp,0x8
c00124db:	5b                   	pop    ebx
c00124dc:	e9 26 65 ff ff       	jmp    c0008a07 <KeBeep(int, int, bool)>
c00124e1:	83 f8 0d             	cmp    eax,0xd
c00124e4:	75 09                	jne    c00124ef <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00124e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00124ed:	eb 2d                	jmp    c001251c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00124ef:	83 f8 0a             	cmp    eax,0xa
c00124f2:	75 31                	jne    c0012525 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00124f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00124fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00124fe:	8d 50 01             	lea    edx,[eax+0x1]
c0012501:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012504:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012507:	75 0f                	jne    c0012518 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012509:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001250c:	83 ec 0c             	sub    esp,0xc
c001250f:	53                   	push   ebx
c0012510:	e8 dd fc ff ff       	call   c00121f2 <VgaText::scrollScreen()>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001251c:	83 c4 08             	add    esp,0x8
c001251f:	5b                   	pop    ebx
c0012520:	e9 d7 fb ff ff       	jmp    c00120fc <VgaText::updateCursor()>
c0012525:	83 f8 08             	cmp    eax,0x8
c0012528:	75 25                	jne    c001254f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001252a:	50                   	push   eax
c001252b:	50                   	push   eax
c001252c:	6a 01                	push   0x1
c001252e:	53                   	push   ebx
c001252f:	e8 50 ff ff ff       	call   c0012484 <VgaText::decrementCursor(bool)>
c0012534:	5a                   	pop    edx
c0012535:	59                   	pop    ecx
c0012536:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012539:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001253c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001253f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012542:	6a 20                	push   0x20
c0012544:	53                   	push   ebx
c0012545:	e8 4a fd ff ff       	call   c0012294 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001254a:	83 c4 28             	add    esp,0x28
c001254d:	5b                   	pop    ebx
c001254e:	c3                   	ret    
c001254f:	83 ec 08             	sub    esp,0x8
c0012552:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012555:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012558:	51                   	push   ecx
c0012559:	52                   	push   edx
c001255a:	50                   	push   eax
c001255b:	53                   	push   ebx
c001255c:	e8 33 fd ff ff       	call   c0012294 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012561:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012565:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001256d:	83 c4 28             	add    esp,0x28
c0012570:	5b                   	pop    ebx
c0012571:	e9 ba fe ff ff       	jmp    c0012430 <VgaText::incrementCursor(bool)>

c0012576 <VgaText::putchar(char)>:
c0012576:	57                   	push   edi
c0012577:	56                   	push   esi
c0012578:	53                   	push   ebx
c0012579:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001257d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012581:	0f be c2             	movsx  eax,dl
c0012584:	83 f8 5b             	cmp    eax,0x5b
c0012587:	75 18                	jne    c00125a1 <VgaText::putchar(char)+0x2b>
c0012589:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001258d:	74 20                	je     c00125af <VgaText::putchar(char)+0x39>
c001258f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012595:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001259c:	e9 b8 00 00 00       	jmp    c0012659 <VgaText::putchar(char)+0xe3>
c00125a1:	83 f8 1b             	cmp    eax,0x1b
c00125a4:	75 09                	jne    c00125af <VgaText::putchar(char)+0x39>
c00125a6:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00125aa:	e9 aa 00 00 00       	jmp    c0012659 <VgaText::putchar(char)+0xe3>
c00125af:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00125b3:	89 f9                	mov    ecx,edi
c00125b5:	84 c9                	test   cl,cl
c00125b7:	0f 84 8c 00 00 00    	je     c0012649 <VgaText::putchar(char)+0xd3>
c00125bd:	8d 4a c0             	lea    ecx,[edx-0x40]
c00125c0:	80 f9 3e             	cmp    cl,0x3e
c00125c3:	77 70                	ja     c0012635 <VgaText::putchar(char)+0xbf>
c00125c5:	83 f8 6d             	cmp    eax,0x6d
c00125c8:	75 3f                	jne    c0012609 <VgaText::putchar(char)+0x93>
c00125ca:	31 f6                	xor    esi,esi
c00125cc:	31 d2                	xor    edx,edx
c00125ce:	31 c0                	xor    eax,eax
c00125d0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00125d3:	7e 25                	jle    c00125fa <VgaText::putchar(char)+0x84>
c00125d5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00125da:	83 fa 3b             	cmp    edx,0x3b
c00125dd:	75 0f                	jne    c00125ee <VgaText::putchar(char)+0x78>
c00125df:	50                   	push   eax
c00125e0:	53                   	push   ebx
c00125e1:	e8 2c fb ff ff       	call   c0012112 <VgaText::doANSI_SGR(int)>
c00125e6:	31 d2                	xor    edx,edx
c00125e8:	59                   	pop    ecx
c00125e9:	58                   	pop    eax
c00125ea:	31 c0                	xor    eax,eax
c00125ec:	eb 09                	jmp    c00125f7 <VgaText::putchar(char)+0x81>
c00125ee:	6b c0 0a             	imul   eax,eax,0xa
c00125f1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00125f5:	89 fa                	mov    edx,edi
c00125f7:	46                   	inc    esi
c00125f8:	eb d6                	jmp    c00125d0 <VgaText::putchar(char)+0x5a>
c00125fa:	84 d2                	test   dl,dl
c00125fc:	74 2f                	je     c001262d <VgaText::putchar(char)+0xb7>
c00125fe:	50                   	push   eax
c00125ff:	53                   	push   ebx
c0012600:	e8 0d fb ff ff       	call   c0012112 <VgaText::doANSI_SGR(int)>
c0012605:	58                   	pop    eax
c0012606:	5a                   	pop    edx
c0012607:	eb 24                	jmp    c001262d <VgaText::putchar(char)+0xb7>
c0012609:	83 f8 4a             	cmp    eax,0x4a
c001260c:	75 1f                	jne    c001262d <VgaText::putchar(char)+0xb7>
c001260e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012612:	75 19                	jne    c001262d <VgaText::putchar(char)+0xb7>
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	53                   	push   ebx
c0012618:	e8 95 fd ff ff       	call   c00123b2 <VgaText::clearScreen()>
c001261d:	83 c4 0c             	add    esp,0xc
c0012620:	6a 00                	push   0x0
c0012622:	6a 00                	push   0x0
c0012624:	53                   	push   ebx
c0012625:	e8 26 fd ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c001262a:	83 c4 10             	add    esp,0x10
c001262d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012633:	eb 24                	jmp    c0012659 <VgaText::putchar(char)+0xe3>
c0012635:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012638:	83 f8 0e             	cmp    eax,0xe
c001263b:	7f 1c                	jg     c0012659 <VgaText::putchar(char)+0xe3>
c001263d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012640:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012643:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0012647:	eb 10                	jmp    c0012659 <VgaText::putchar(char)+0xe3>
c0012649:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001264c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001264f:	50                   	push   eax
c0012650:	53                   	push   ebx
c0012651:	e8 50 fe ff ff       	call   c00124a6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	5b                   	pop    ebx
c001265a:	5e                   	pop    esi
c001265b:	5f                   	pop    edi
c001265c:	c3                   	ret    
c001265d:	90                   	nop

c001265e <VgaText::putx(unsigned int)>:
c001265e:	57                   	push   edi
c001265f:	b9 11 00 00 00       	mov    ecx,0x11
c0012664:	56                   	push   esi
c0012665:	be 3d 46 02 c0       	mov    esi,0xc002463d
c001266a:	53                   	push   ebx
c001266b:	83 ec 20             	sub    esp,0x20
c001266e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012672:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012676:	fc                   	cld    
c0012677:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012679:	be 08 00 00 00       	mov    esi,0x8
c001267e:	50                   	push   eax
c001267f:	50                   	push   eax
c0012680:	89 d8                	mov    eax,ebx
c0012682:	c1 e8 1c             	shr    eax,0x1c
c0012685:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001268a:	c1 e3 04             	shl    ebx,0x4
c001268d:	50                   	push   eax
c001268e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012692:	e8 df fe ff ff       	call   c0012576 <VgaText::putchar(char)>
c0012697:	83 c4 10             	add    esp,0x10
c001269a:	4e                   	dec    esi
c001269b:	75 e1                	jne    c001267e <VgaText::putx(unsigned int)+0x20>
c001269d:	83 c4 20             	add    esp,0x20
c00126a0:	5b                   	pop    ebx
c00126a1:	5e                   	pop    esi
c00126a2:	5f                   	pop    edi
c00126a3:	c3                   	ret    

c00126a4 <VgaText::puts(char const*)>:
c00126a4:	53                   	push   ebx
c00126a5:	83 ec 08             	sub    esp,0x8
c00126a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00126ac:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126af:	85 c0                	test   eax,eax
c00126b1:	74 12                	je     c00126c5 <VgaText::puts(char const*)+0x21>
c00126b3:	51                   	push   ecx
c00126b4:	43                   	inc    ebx
c00126b5:	51                   	push   ecx
c00126b6:	50                   	push   eax
c00126b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126bb:	e8 b6 fe ff ff       	call   c0012576 <VgaText::putchar(char)>
c00126c0:	83 c4 10             	add    esp,0x10
c00126c3:	eb e7                	jmp    c00126ac <VgaText::puts(char const*)+0x8>
c00126c5:	83 c4 08             	add    esp,0x8
c00126c8:	5b                   	pop    ebx
c00126c9:	c3                   	ret    

c00126ca <VgaText::write(unsigned long long, void*, int*)>:
c00126ca:	55                   	push   ebp
c00126cb:	57                   	push   edi
c00126cc:	56                   	push   esi
c00126cd:	53                   	push   ebx
c00126ce:	83 ec 0c             	sub    esp,0xc
c00126d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126d5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00126d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126dd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00126e4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00126e7:	39 eb                	cmp    ebx,ebp
c00126e9:	74 13                	je     c00126fe <VgaText::write(unsigned long long, void*, int*)+0x34>
c00126eb:	50                   	push   eax
c00126ec:	43                   	inc    ebx
c00126ed:	50                   	push   eax
c00126ee:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00126f2:	50                   	push   eax
c00126f3:	56                   	push   esi
c00126f4:	e8 7d fe ff ff       	call   c0012576 <VgaText::putchar(char)>
c00126f9:	83 c4 10             	add    esp,0x10
c00126fc:	eb e9                	jmp    c00126e7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00126fe:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012709:	89 38                	mov    DWORD PTR [eax],edi
c001270b:	83 c4 0c             	add    esp,0xc
c001270e:	31 c0                	xor    eax,eax
c0012710:	5b                   	pop    ebx
c0012711:	5e                   	pop    esi
c0012712:	5f                   	pop    edi
c0012713:	5d                   	pop    ebp
c0012714:	c3                   	ret    
c0012715:	90                   	nop

c0012716 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012716:	55                   	push   ebp
c0012717:	57                   	push   edi
c0012718:	56                   	push   esi
c0012719:	53                   	push   ebx
c001271a:	83 ec 1c             	sub    esp,0x1c
c001271d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012725:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012729:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001272d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012734:	85 db                	test   ebx,ebx
c0012736:	75 14                	jne    c001274c <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012738:	c7 44 24 30 4e 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc002464e
c0012740:	83 c4 1c             	add    esp,0x1c
c0012743:	5b                   	pop    ebx
c0012744:	5e                   	pop    esi
c0012745:	5f                   	pop    edi
c0012746:	5d                   	pop    ebp
c0012747:	e9 02 d7 ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001274c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012753:	50                   	push   eax
c0012754:	50                   	push   eax
c0012755:	89 e8                	mov    eax,ebp
c0012757:	0f b6 c0             	movzx  eax,al
c001275a:	50                   	push   eax
c001275b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012760:	50                   	push   eax
c0012761:	e8 7a fa ff ff       	call   c00121e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0012766:	83 c4 10             	add    esp,0x10
c0012769:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c001276d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012770:	0f b6 c0             	movzx  eax,al
c0012773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012777:	0f b7 c9             	movzx  ecx,cx
c001277a:	01 c9                	add    ecx,ecx
c001277c:	01 cb                	add    ebx,ecx
c001277e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012781:	85 c0                	test   eax,eax
c0012783:	0f 84 ef 00 00 00    	je     c0012878 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012789:	83 f8 0d             	cmp    eax,0xd
c001278c:	75 0c                	jne    c001279a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c001278e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012795:	e9 d8 00 00 00       	jmp    c0012872 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001279a:	83 f8 0a             	cmp    eax,0xa
c001279d:	75 44                	jne    c00127e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001279f:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00127a6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00127a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00127ac:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00127af:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00127b2:	75 0f                	jne    c00127c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00127b4:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00127b7:	83 ec 0c             	sub    esp,0xc
c00127ba:	57                   	push   edi
c00127bb:	e8 32 fa ff ff       	call   c00121f2 <VgaText::scrollScreen()>
c00127c0:	83 c4 10             	add    esp,0x10
c00127c3:	83 ec 0c             	sub    esp,0xc
c00127c6:	57                   	push   edi
c00127c7:	e8 30 f9 ff ff       	call   c00120fc <VgaText::updateCursor()>
c00127cc:	83 c4 10             	add    esp,0x10
c00127cf:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00127d3:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00127d6:	0f b7 db             	movzx  ebx,bx
c00127d9:	01 db                	add    ebx,ebx
c00127db:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00127de:	e9 8f 00 00 00       	jmp    c0012872 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127e3:	83 f8 08             	cmp    eax,0x8
c00127e6:	75 34                	jne    c001281c <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00127e8:	51                   	push   ecx
c00127e9:	51                   	push   ecx
c00127ea:	6a 01                	push   0x1
c00127ec:	57                   	push   edi
c00127ed:	e8 92 fc ff ff       	call   c0012484 <VgaText::decrementCursor(bool)>
c00127f2:	5b                   	pop    ebx
c00127f3:	58                   	pop    eax
c00127f4:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00127f7:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00127fa:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00127fd:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012800:	6a 20                	push   0x20
c0012802:	57                   	push   edi
c0012803:	e8 8c fa ff ff       	call   c0012294 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012808:	83 c4 20             	add    esp,0x20
c001280b:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001280f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012812:	0f b7 db             	movzx  ebx,bx
c0012815:	01 db                	add    ebx,ebx
c0012817:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001281a:	eb 56                	jmp    c0012872 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001281c:	52                   	push   edx
c001281d:	52                   	push   edx
c001281e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012822:	50                   	push   eax
c0012823:	e8 5c fa ff ff       	call   c0012284 <VgaText::combineCharAndColour(char, unsigned char)>
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	66 89 03             	mov    WORD PTR [ebx],ax
c001282e:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c0012834:	75 1a                	jne    c0012850 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012836:	83 ec 0c             	sub    esp,0xc
c0012839:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001283c:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001283f:	55                   	push   ebp
c0012840:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012844:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012847:	50                   	push   eax
c0012848:	e8 3b 8b 00 00       	call   c001b388 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001284d:	83 c4 20             	add    esp,0x20
c0012850:	50                   	push   eax
c0012851:	83 c3 02             	add    ebx,0x2
c0012854:	50                   	push   eax
c0012855:	6a 00                	push   0x0
c0012857:	57                   	push   edi
c0012858:	e8 d3 fb ff ff       	call   c0012430 <VgaText::incrementCursor(bool)>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012864:	75 0c                	jne    c0012872 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012866:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001286a:	0f b7 db             	movzx  ebx,bx
c001286d:	01 db                	add    ebx,ebx
c001286f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012872:	46                   	inc    esi
c0012873:	e9 06 ff ff ff       	jmp    c001277e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012878:	83 ec 0c             	sub    esp,0xc
c001287b:	57                   	push   edi
c001287c:	e8 7b f8 ff ff       	call   c00120fc <VgaText::updateCursor()>
c0012881:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012888:	83 c4 2c             	add    esp,0x2c
c001288b:	5b                   	pop    ebx
c001288c:	5e                   	pop    esi
c001288d:	5f                   	pop    edi
c001288e:	5d                   	pop    ebp
c001288f:	c3                   	ret    

c0012890 <VgaText::VgaText(char const*)>:
c0012890:	56                   	push   esi
c0012891:	53                   	push   ebx
c0012892:	83 ec 04             	sub    esp,0x4
c0012895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012899:	83 ec 08             	sub    esp,0x8
c001289c:	6a 00                	push   0x0
c001289e:	50                   	push   eax
c001289f:	e8 b8 05 00 00       	call   c0012e5c <UnixFile::UnixFile(int)>
c00128a4:	83 c4 10             	add    esp,0x10
c00128a7:	ba 88 46 02 c0       	mov    edx,0xc0024688
c00128ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b0:	89 10                	mov    DWORD PTR [eax],edx
c00128b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00128bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00128d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00128d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128dc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00128e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00128ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00128f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012904:	83 ec 0c             	sub    esp,0xc
c0012907:	68 5e 46 02 c0       	push   0xc002465e
c001290c:	e8 3d 46 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012918:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001291f:	83 ec 0c             	sub    esp,0xc
c0012922:	6a 01                	push   0x1
c0012924:	e8 94 09 00 00       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	89 c2                	mov    edx,eax
c001292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012932:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012935:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c001293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012942:	89 c6                	mov    esi,eax
c0012944:	e8 ff d6 ff ff       	call   c0010048 <Phys::allocatePage()>
c0012949:	68 05 0c 00 00       	push   0xc05
c001294e:	56                   	push   esi
c001294f:	50                   	push   eax
c0012950:	53                   	push   ebx
c0012951:	e8 40 10 00 00       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012960:	83 ec 04             	sub    esp,0x4
c0012963:	68 a0 0f 00 00       	push   0xfa0
c0012968:	6a 00                	push   0x0
c001296a:	50                   	push   eax
c001296b:	e8 80 db fe ff       	call   c00004f0 <memset>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	83 ec 04             	sub    esp,0x4
c0012976:	6a 00                	push   0x0
c0012978:	6a 07                	push   0x7
c001297a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001297e:	e8 23 f8 ff ff       	call   c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	83 ec 04             	sub    esp,0x4
c0012989:	6a 00                	push   0x0
c001298b:	6a 00                	push   0x0
c001298d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012991:	e8 ba f9 ff ff       	call   c0012350 <VgaText::setCursor(int, int)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	83 ec 0c             	sub    esp,0xc
c001299c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a0:	e8 0d fa ff ff       	call   c00123b2 <VgaText::clearScreen()>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00129b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b4:	05 82 00 00 00       	add    eax,0x82
c00129b9:	83 ec 04             	sub    esp,0x4
c00129bc:	68 80 00 00 00       	push   0x80
c00129c1:	6a 00                	push   0x0
c00129c3:	50                   	push   eax
c00129c4:	e8 27 db fe ff       	call   c00004f0 <memset>
c00129c9:	83 c4 10             	add    esp,0x10
c00129cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d0:	05 02 01 00 00       	add    eax,0x102
c00129d5:	83 ec 04             	sub    esp,0x4
c00129d8:	68 80 00 00 00       	push   0x80
c00129dd:	6a 00                	push   0x0
c00129df:	50                   	push   eax
c00129e0:	e8 0b db fe ff       	call   c00004f0 <memset>
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	90                   	nop
c00129e9:	83 c4 04             	add    esp,0x4
c00129ec:	5b                   	pop    ebx
c00129ed:	5e                   	pop    esi
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop

c00129f0 <VgaText::receiveKey(unsigned char)>:
c00129f0:	55                   	push   ebp
c00129f1:	57                   	push   edi
c00129f2:	56                   	push   esi
c00129f3:	53                   	push   ebx
c00129f4:	83 ec 2c             	sub    esp,0x2c
c00129f7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00129fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00129ff:	89 fd                	mov    ebp,edi
c0012a01:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012a07:	0f 84 48 01 00 00    	je     c0012b55 <VgaText::receiveKey(unsigned char)+0x165>
c0012a0d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012a13:	83 fd 08             	cmp    ebp,0x8
c0012a16:	75 6a                	jne    c0012a82 <VgaText::receiveKey(unsigned char)+0x92>
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	56                   	push   esi
c0012a1c:	e8 5f db fe ff       	call   c0000580 <strlen>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	85 c0                	test   eax,eax
c0012a26:	0f 84 ef 00 00 00    	je     c0012b1b <VgaText::receiveKey(unsigned char)+0x12b>
c0012a2c:	50                   	push   eax
c0012a2d:	50                   	push   eax
c0012a2e:	6a 08                	push   0x8
c0012a30:	53                   	push   ebx
c0012a31:	e8 40 fb ff ff       	call   c0012576 <VgaText::putchar(char)>
c0012a36:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a39:	e8 42 db fe ff       	call   c0000580 <strlen>
c0012a3e:	83 c4 10             	add    esp,0x10
c0012a41:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012a49:	83 fa 1f             	cmp    edx,0x1f
c0012a4c:	89 d0                	mov    eax,edx
c0012a4e:	7f 1c                	jg     c0012a6c <VgaText::receiveKey(unsigned char)+0x7c>
c0012a50:	83 e8 08             	sub    eax,0x8
c0012a53:	3c 02                	cmp    al,0x2
c0012a55:	76 15                	jbe    c0012a6c <VgaText::receiveKey(unsigned char)+0x7c>
c0012a57:	83 fa 0d             	cmp    edx,0xd
c0012a5a:	74 10                	je     c0012a6c <VgaText::receiveKey(unsigned char)+0x7c>
c0012a5c:	57                   	push   edi
c0012a5d:	57                   	push   edi
c0012a5e:	68 71 46 02 c0       	push   0xc0024671
c0012a63:	53                   	push   ebx
c0012a64:	e8 3b fc ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	83 ec 0c             	sub    esp,0xc
c0012a6f:	56                   	push   esi
c0012a70:	e8 0b db fe ff       	call   c0000580 <strlen>
c0012a75:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012a7d:	e9 96 00 00 00       	jmp    c0012b18 <VgaText::receiveKey(unsigned char)+0x128>
c0012a82:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	50                   	push   eax
c0012a8c:	e8 ef da fe ff       	call   c0000580 <strlen>
c0012a91:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a98:	e8 e3 da fe ff       	call   c0000580 <strlen>
c0012a9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012aa8:	3d 80 00 00 00       	cmp    eax,0x80
c0012aad:	0f 87 a2 00 00 00    	ja     c0012b55 <VgaText::receiveKey(unsigned char)+0x165>
c0012ab3:	8d 47 ff             	lea    eax,[edi-0x1]
c0012ab6:	3c 1e                	cmp    al,0x1e
c0012ab8:	77 35                	ja     c0012aef <VgaText::receiveKey(unsigned char)+0xff>
c0012aba:	8d 47 f7             	lea    eax,[edi-0x9]
c0012abd:	3c 01                	cmp    al,0x1
c0012abf:	76 2e                	jbe    c0012aef <VgaText::receiveKey(unsigned char)+0xff>
c0012ac1:	83 fd 0d             	cmp    ebp,0xd
c0012ac4:	74 29                	je     c0012aef <VgaText::receiveKey(unsigned char)+0xff>
c0012ac6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012ac9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012acc:	68 77 46 02 c0       	push   0xc0024677
c0012ad1:	53                   	push   ebx
c0012ad2:	e8 3f fc ff ff       	call   c0012716 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012ad7:	8d 47 40             	lea    eax,[edi+0x40]
c0012ada:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012add:	0f b6 c0             	movzx  eax,al
c0012ae0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012ae3:	50                   	push   eax
c0012ae4:	53                   	push   ebx
c0012ae5:	e8 bc f9 ff ff       	call   c00124a6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012aea:	83 c4 20             	add    esp,0x20
c0012aed:	eb 11                	jmp    c0012b00 <VgaText::receiveKey(unsigned char)+0x110>
c0012aef:	51                   	push   ecx
c0012af0:	89 f8                	mov    eax,edi
c0012af2:	51                   	push   ecx
c0012af3:	0f be c0             	movsx  eax,al
c0012af6:	50                   	push   eax
c0012af7:	53                   	push   ebx
c0012af8:	e8 79 fa ff ff       	call   c0012576 <VgaText::putchar(char)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012b05:	89 f8                	mov    eax,edi
c0012b07:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012b0b:	52                   	push   edx
c0012b0c:	52                   	push   edx
c0012b0d:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012b11:	50                   	push   eax
c0012b12:	56                   	push   esi
c0012b13:	e8 58 dd fe ff       	call   c0000870 <strcat>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012b22:	75 0f                	jne    c0012b33 <VgaText::receiveKey(unsigned char)+0x143>
c0012b24:	83 fd 1c             	cmp    ebp,0x1c
c0012b27:	77 2c                	ja     c0012b55 <VgaText::receiveKey(unsigned char)+0x165>
c0012b29:	b8 08 04 00 10       	mov    eax,0x10000408
c0012b2e:	0f a3 e8             	bt     eax,ebp
c0012b31:	73 22                	jae    c0012b55 <VgaText::receiveKey(unsigned char)+0x165>
c0012b33:	50                   	push   eax
c0012b34:	81 c3 02 01 00 00    	add    ebx,0x102
c0012b3a:	50                   	push   eax
c0012b3b:	56                   	push   esi
c0012b3c:	53                   	push   ebx
c0012b3d:	e8 2e dd fe ff       	call   c0000870 <strcat>
c0012b42:	83 c4 0c             	add    esp,0xc
c0012b45:	68 80 00 00 00       	push   0x80
c0012b4a:	6a 00                	push   0x0
c0012b4c:	56                   	push   esi
c0012b4d:	e8 9e d9 fe ff       	call   c00004f0 <memset>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	83 c4 2c             	add    esp,0x2c
c0012b58:	5b                   	pop    ebx
c0012b59:	5e                   	pop    esi
c0012b5a:	5f                   	pop    edi
c0012b5b:	5d                   	pop    ebp
c0012b5c:	c3                   	ret    
c0012b5d:	90                   	nop

c0012b5e <VgaText::doUpdate()>:
c0012b5e:	c3                   	ret    
c0012b5f:	90                   	nop

c0012b60 <TSS::TSS()>:
c0012b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b6b:	90                   	nop
c0012b6c:	c3                   	ret    
c0012b6d:	90                   	nop
c0012b6e:	66 90                	xchg   ax,ax

c0012b70 <TSS::setESP(unsigned long)>:
c0012b70:	55                   	push   ebp
c0012b71:	89 e5                	mov    ebp,esp
c0012b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b7f:	90                   	nop
c0012b80:	5d                   	pop    ebp
c0012b81:	c3                   	ret    
c0012b82:	66 90                	xchg   ax,ax

c0012b84 <TSS::flush()>:
c0012b84:	55                   	push   ebp
c0012b85:	89 e5                	mov    ebp,esp
c0012b87:	83 ec 10             	sub    esp,0x10
c0012b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b8f:	83 c8 03             	or     eax,0x3
c0012b92:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012b96:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012b9a:	66 89 d0             	mov    ax,dx
c0012b9d:	0f 00 d8             	ltr    ax
c0012ba0:	90                   	nop
c0012ba1:	c9                   	leave  
c0012ba2:	c3                   	ret    
c0012ba3:	90                   	nop

c0012ba4 <TSS::setup(unsigned long, unsigned long)>:
c0012ba4:	55                   	push   ebp
c0012ba5:	89 e5                	mov    ebp,esp
c0012ba7:	83 ec 18             	sub    esp,0x18
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	6a 68                	push   0x68
c0012baf:	e8 54 cf ff ff       	call   c000fb08 <malloc>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	89 c2                	mov    edx,eax
c0012bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bc5:	83 ec 08             	sub    esp,0x8
c0012bc8:	50                   	push   eax
c0012bc9:	68 9c 46 02 c0       	push   0xc002469c
c0012bce:	e8 7b 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bdc:	83 ec 04             	sub    esp,0x4
c0012bdf:	6a 68                	push   0x68
c0012be1:	6a 00                	push   0x0
c0012be3:	50                   	push   eax
c0012be4:	e8 07 d9 fe ff       	call   c00004f0 <memset>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bfe:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c16:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c22:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c2e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c3a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c46:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c52:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c5e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012c61:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c76:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012c7d:	83 ec 0c             	sub    esp,0xc
c0012c80:	68 b3 46 02 c0       	push   0xc00246b3
c0012c85:	e8 c4 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c93:	0f 20 da             	mov    edx,cr3
c0012c96:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012c99:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012c9c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012c9f:	83 ec 0c             	sub    esp,0xc
c0012ca2:	68 b6 46 02 c0       	push   0xc00246b6
c0012ca7:	e8 a2 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cac:	83 c4 10             	add    esp,0x10
c0012caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb5:	83 ec 08             	sub    esp,0x8
c0012cb8:	50                   	push   eax
c0012cb9:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012cbc:	50                   	push   eax
c0012cbd:	e8 94 bf ff ff       	call   c000ec56 <GDTEntry::setBase(unsigned int)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	83 ec 08             	sub    esp,0x8
c0012cc8:	6a 68                	push   0x68
c0012cca:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012ccd:	50                   	push   eax
c0012cce:	e8 9f bf ff ff       	call   c000ec72 <GDTEntry::setLimit(unsigned int)>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012cda:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012cdd:	83 e0 0f             	and    eax,0xf
c0012ce0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012ce3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012ce6:	83 c8 40             	or     eax,0x40
c0012ce9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012cec:	83 ec 0c             	sub    esp,0xc
c0012cef:	68 b9 46 02 c0       	push   0xc00246b9
c0012cf4:	e8 55 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cf9:	83 c4 10             	add    esp,0x10
c0012cfc:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012d01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d07:	83 ec 08             	sub    esp,0x8
c0012d0a:	50                   	push   eax
c0012d0b:	68 bc 46 02 c0       	push   0xc00246bc
c0012d10:	e8 39 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012d1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d23:	05 64 01 00 00       	add    eax,0x164
c0012d28:	83 ec 04             	sub    esp,0x4
c0012d2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012d2e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012d31:	50                   	push   eax
c0012d32:	e8 6f bf ff ff       	call   c000eca6 <GDT::addEntry(GDTEntry)>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	89 c2                	mov    edx,eax
c0012d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d3f:	89 10                	mov    DWORD PTR [eax],edx
c0012d41:	83 ec 0c             	sub    esp,0xc
c0012d44:	68 d1 46 02 c0       	push   0xc00246d1
c0012d49:	e8 00 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012d56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d5c:	05 64 01 00 00       	add    eax,0x164
c0012d61:	83 ec 0c             	sub    esp,0xc
c0012d64:	50                   	push   eax
c0012d65:	e8 66 bf ff ff       	call   c000ecd0 <GDT::flush()>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	83 ec 0c             	sub    esp,0xc
c0012d70:	68 d4 46 02 c0       	push   0xc00246d4
c0012d75:	e8 d4 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d82:	c9                   	leave  
c0012d83:	c3                   	ret    

c0012d84 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d8f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d94:	75 08                	jne    c0012d9e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012d96:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d9c:	eb 38                	jmp    c0012dd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012d9e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012da3:	75 17                	jne    c0012dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012daa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012dad:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012db3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012db9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012dbc:	89 c1                	mov    ecx,eax
c0012dbe:	83 e1 fd             	and    ecx,0xfffffffd
c0012dc1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012dc7:	74 cd                	je     c0012d96 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012dc9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012dce:	83 e0 ef             	and    eax,0xffffffef
c0012dd1:	83 f8 08             	cmp    eax,0x8
c0012dd4:	76 c0                	jbe    c0012d96 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012dd6:	31 c0                	xor    eax,eax
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <ReservedFilename::isAtty()>:
c0012dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dde:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012de1:	31 c0                	xor    eax,eax
c0012de3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012de9:	74 09                	je     c0012df4 <ReservedFilename::isAtty()+0x1a>
c0012deb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012df1:	0f 94 c0             	sete   al
c0012df4:	c3                   	ret    
c0012df5:	90                   	nop

c0012df6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012dfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e05:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e0a:	75 08                	jne    c0012e14 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012e0c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e12:	eb 3d                	jmp    c0012e51 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e14:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e19:	75 17                	jne    c0012e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e23:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012e29:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e2f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012e32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012e37:	75 04                	jne    c0012e3d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012e39:	89 0a                	mov    DWORD PTR [edx],ecx
c0012e3b:	eb 14                	jmp    c0012e51 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e3d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012e42:	74 c8                	je     c0012e0c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012e44:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012e49:	83 e0 ef             	and    eax,0xffffffef
c0012e4c:	83 f8 08             	cmp    eax,0x8
c0012e4f:	76 bb                	jbe    c0012e0c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012e51:	31 c0                	xor    eax,eax
c0012e53:	c3                   	ret    

c0012e54 <UnixFile::getFileDescriptor()>:
c0012e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e5b:	c3                   	ret    

c0012e5c <UnixFile::UnixFile(int)>:
c0012e5c:	53                   	push   ebx
c0012e5d:	83 ec 28             	sub    esp,0x28
c0012e60:	ba 24 47 02 c0       	mov    edx,0xc0024724
c0012e65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e69:	89 10                	mov    DWORD PTR [eax],edx
c0012e6b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012e73:	0f 8f 90 01 00 00    	jg     c0013009 <UnixFile::UnixFile(int)+0x1ad>
c0012e79:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0012e7e:	8d 50 01             	lea    edx,[eax+0x1]
c0012e81:	89 15 c0 6e 02 c0    	mov    DWORD PTR ds:0xc0026ec0,edx
c0012e87:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e8b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e8e:	83 ec 08             	sub    esp,0x8
c0012e91:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e95:	68 38 f2 02 c0       	push   0xc002f238
c0012e9a:	e8 af f3 00 00       	call   c002224e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012e9f:	83 c4 10             	add    esp,0x10
c0012ea2:	a0 34 f2 02 c0       	mov    al,ds:0xc002f234
c0012ea7:	83 f0 01             	xor    eax,0x1
c0012eaa:	0f b6 c0             	movzx  eax,al
c0012ead:	85 c0                	test   eax,eax
c0012eaf:	0f 84 55 01 00 00    	je     c001300a <UnixFile::UnixFile(int)+0x1ae>
c0012eb5:	c6 05 34 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f234,0x1
c0012ebc:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ecb:	e8 38 cc ff ff       	call   c000fb08 <malloc>
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	89 c3                	mov    ebx,eax
c0012ed5:	83 ec 08             	sub    esp,0x8
c0012ed8:	68 03 ff ff 0f       	push   0xfffff03
c0012edd:	53                   	push   ebx
c0012ede:	e8 2d 01 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	89 1d 2c f2 02 c0    	mov    DWORD PTR ds:0xc002f22c,ebx
c0012eec:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012ef4:	83 ec 0c             	sub    esp,0xc
c0012ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012efb:	e8 08 cc ff ff       	call   c000fb08 <malloc>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	89 c3                	mov    ebx,eax
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	68 01 ff ff 0f       	push   0xfffff01
c0012f0d:	53                   	push   ebx
c0012f0e:	e8 fd 00 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c0012f1c:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012f24:	83 ec 0c             	sub    esp,0xc
c0012f27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f2b:	e8 d8 cb ff ff       	call   c000fb08 <malloc>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	89 c3                	mov    ebx,eax
c0012f35:	83 ec 08             	sub    esp,0x8
c0012f38:	68 00 ff ff 0f       	push   0xfffff00
c0012f3d:	53                   	push   ebx
c0012f3e:	e8 cd 00 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	89 1d 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,ebx
c0012f4c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012f5b:	e8 a8 cb ff ff       	call   c000fb08 <malloc>
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	89 c3                	mov    ebx,eax
c0012f65:	83 ec 08             	sub    esp,0x8
c0012f68:	68 02 ff ff 0f       	push   0xfffff02
c0012f6d:	53                   	push   ebx
c0012f6e:	e8 9d 00 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012f73:	83 c4 10             	add    esp,0x10
c0012f76:	89 1d 28 f2 02 c0    	mov    DWORD PTR ds:0xc002f228,ebx
c0012f7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f84:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012f89:	7f 7f                	jg     c001300a <UnixFile::UnixFile(int)+0x1ae>
c0012f8b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012f93:	83 ec 0c             	sub    esp,0xc
c0012f96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f9a:	e8 69 cb ff ff       	call   c000fb08 <malloc>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	89 c3                	mov    ebx,eax
c0012fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fa8:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012fad:	83 ec 08             	sub    esp,0x8
c0012fb0:	50                   	push   eax
c0012fb1:	53                   	push   ebx
c0012fb2:	e8 59 00 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fbe:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c0012fc5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012fcd:	83 ec 0c             	sub    esp,0xc
c0012fd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fd4:	e8 2f cb ff ff       	call   c000fb08 <malloc>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	89 c3                	mov    ebx,eax
c0012fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe2:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012fe7:	83 ec 08             	sub    esp,0x8
c0012fea:	50                   	push   eax
c0012feb:	53                   	push   ebx
c0012fec:	e8 1f 00 00 00       	call   c0013010 <ReservedFilename::ReservedFilename(int)>
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ff8:	89 1c 85 c0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e40],ebx
c0012fff:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013004:	e9 7b ff ff ff       	jmp    c0012f84 <UnixFile::UnixFile(int)+0x128>
c0013009:	90                   	nop
c001300a:	83 c4 28             	add    esp,0x28
c001300d:	5b                   	pop    ebx
c001300e:	c3                   	ret    
c001300f:	90                   	nop

c0013010 <ReservedFilename::ReservedFilename(int)>:
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013017:	83 ec 08             	sub    esp,0x8
c001301a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301e:	50                   	push   eax
c001301f:	e8 38 fe ff ff       	call   c0012e5c <UnixFile::UnixFile(int)>
c0013024:	83 c4 10             	add    esp,0x10
c0013027:	ba 40 47 02 c0       	mov    edx,0xc0024740
c001302c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013030:	89 10                	mov    DWORD PTR [eax],edx
c0013032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013036:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001303a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001303d:	90                   	nop
c001303e:	83 c4 0c             	add    esp,0xc
c0013041:	c3                   	ret    

c0013042 <UnixFile::~UnixFile()>:
c0013042:	83 ec 1c             	sub    esp,0x1c
c0013045:	ba 24 47 02 c0       	mov    edx,0xc0024724
c001304a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001304e:	89 10                	mov    DWORD PTR [eax],edx
c0013050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013057:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001305c:	7f 76                	jg     c00130d4 <UnixFile::~UnixFile()+0x92>
c001305e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	68 38 f2 02 c0       	push   0xc002f238
c001306e:	e8 af f2 00 00       	call   c0022322 <LinkedList<UnixFile>::getFirstElement()>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	68 38 f2 02 c0       	push   0xc002f238
c0013082:	e8 a3 f2 00 00       	call   c002232a <LinkedList<UnixFile>::removeFirst()>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001308e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013092:	74 43                	je     c00130d7 <UnixFile::~UnixFile()+0x95>
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001309b:	68 38 f2 02 c0       	push   0xc002f238
c00130a0:	e8 a9 f1 00 00       	call   c002224e <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130ac:	8d 50 01             	lea    edx,[eax+0x1]
c00130af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130b3:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00130b8:	0f 94 c0             	sete   al
c00130bb:	0f b6 c0             	movzx  eax,al
c00130be:	85 c0                	test   eax,eax
c00130c0:	74 a4                	je     c0013066 <UnixFile::~UnixFile()+0x24>
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	68 d8 46 02 c0       	push   0xc00246d8
c00130ca:	e8 7f cd ff ff       	call   c000fe4e <KePanic(char const*)>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	eb 92                	jmp    c0013066 <UnixFile::~UnixFile()+0x24>
c00130d4:	90                   	nop
c00130d5:	eb 01                	jmp    c00130d8 <UnixFile::~UnixFile()+0x96>
c00130d7:	90                   	nop
c00130d8:	90                   	nop
c00130d9:	83 c4 1c             	add    esp,0x1c
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <UnixFile::~UnixFile()>:
c00130de:	83 ec 0c             	sub    esp,0xc
c00130e1:	83 ec 0c             	sub    esp,0xc
c00130e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e8:	e8 55 ff ff ff       	call   c0013042 <UnixFile::~UnixFile()>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	83 ec 08             	sub    esp,0x8
c00130f3:	6a 0c                	push   0xc
c00130f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f9:	e8 6d a1 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	83 c4 0c             	add    esp,0xc
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <ReservedFilename::~ReservedFilename()>:
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	ba 40 47 02 c0       	mov    edx,0xc0024740
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	89 10                	mov    DWORD PTR [eax],edx
c0013114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	50                   	push   eax
c001311c:	e8 21 ff ff ff       	call   c0013042 <UnixFile::~UnixFile()>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	90                   	nop
c0013125:	83 c4 0c             	add    esp,0xc
c0013128:	c3                   	ret    
c0013129:	90                   	nop

c001312a <ReservedFilename::~ReservedFilename()>:
c001312a:	83 ec 0c             	sub    esp,0xc
c001312d:	83 ec 0c             	sub    esp,0xc
c0013130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013134:	e8 cd ff ff ff       	call   c0013106 <ReservedFilename::~ReservedFilename()>
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	83 ec 08             	sub    esp,0x8
c001313f:	6a 0c                	push   0xc
c0013141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013145:	e8 21 a1 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001314a:	83 c4 10             	add    esp,0x10
c001314d:	83 c4 0c             	add    esp,0xc
c0013150:	c3                   	ret    

c0013151 <KeGetFileFromDescriptor(int)>:
c0013151:	53                   	push   ebx
c0013152:	83 ec 10             	sub    esp,0x10
c0013155:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013159:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001315f:	53                   	push   ebx
c0013160:	68 f8 46 02 c0       	push   0xc00246f8
c0013165:	e8 e4 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001316a:	83 c4 10             	add    esp,0x10
c001316d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013173:	7f 30                	jg     c00131a5 <KeGetFileFromDescriptor(int)+0x54>
c0013175:	83 ec 0c             	sub    esp,0xc
c0013178:	68 38 f2 02 c0       	push   0xc002f238
c001317d:	e8 a0 f1 00 00       	call   c0022322 <LinkedList<UnixFile>::getFirstElement()>
c0013182:	8d 50 ff             	lea    edx,[eax-0x1]
c0013185:	83 c4 10             	add    esp,0x10
c0013188:	83 fa fd             	cmp    edx,0xfffffffd
c001318b:	76 04                	jbe    c0013191 <KeGetFileFromDescriptor(int)+0x40>
c001318d:	31 c0                	xor    eax,eax
c001318f:	eb 6e                	jmp    c00131ff <KeGetFileFromDescriptor(int)+0xae>
c0013191:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013194:	74 69                	je     c00131ff <KeGetFileFromDescriptor(int)+0xae>
c0013196:	52                   	push   edx
c0013197:	52                   	push   edx
c0013198:	50                   	push   eax
c0013199:	68 38 f2 02 c0       	push   0xc002f238
c001319e:	e8 29 f2 00 00       	call   c00223cc <LinkedList<UnixFile>::getNext(UnixFile*)>
c00131a3:	eb dd                	jmp    c0013182 <KeGetFileFromDescriptor(int)+0x31>
c00131a5:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00131ab:	a1 2c f2 02 c0       	mov    eax,ds:0xc002f22c
c00131b0:	74 4d                	je     c00131ff <KeGetFileFromDescriptor(int)+0xae>
c00131b2:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00131b8:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c00131bd:	74 40                	je     c00131ff <KeGetFileFromDescriptor(int)+0xae>
c00131bf:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00131c5:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c00131ca:	74 33                	je     c00131ff <KeGetFileFromDescriptor(int)+0xae>
c00131cc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00131d2:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c00131d7:	74 26                	je     c00131ff <KeGetFileFromDescriptor(int)+0xae>
c00131d9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00131df:	83 f8 08             	cmp    eax,0x8
c00131e2:	77 09                	ja     c00131ed <KeGetFileFromDescriptor(int)+0x9c>
c00131e4:	8b 04 85 00 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e00]
c00131eb:	eb 12                	jmp    c00131ff <KeGetFileFromDescriptor(int)+0xae>
c00131ed:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00131f3:	83 fb 08             	cmp    ebx,0x8
c00131f6:	77 95                	ja     c001318d <KeGetFileFromDescriptor(int)+0x3c>
c00131f8:	8b 04 9d c0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e40]
c00131ff:	83 c4 08             	add    esp,0x8
c0013202:	5b                   	pop    ebx
c0013203:	c3                   	ret    

c0013204 <__static_initialization_and_destruction_0(int, int)>:
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001320c:	75 34                	jne    c0013242 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001320e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013216:	75 2a                	jne    c0013242 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	68 38 f2 02 c0       	push   0xc002f238
c0013220:	e8 e7 ef 00 00       	call   c002220c <LinkedList<UnixFile>::LinkedList()>
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	83 ec 04             	sub    esp,0x4
c001322b:	68 00 67 02 c0       	push   0xc0026700
c0013230:	68 38 f2 02 c0       	push   0xc002f238
c0013235:	68 0a 22 02 c0       	push   0xc002220a
c001323a:	e8 dc 9f ff ff       	call   c000d21b <__cxa_atexit>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	90                   	nop
c0013243:	83 c4 0c             	add    esp,0xc
c0013246:	c3                   	ret    

c0013247 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013247:	83 ec 0c             	sub    esp,0xc
c001324a:	83 ec 08             	sub    esp,0x8
c001324d:	68 ff ff 00 00       	push   0xffff
c0013252:	6a 01                	push   0x1
c0013254:	e8 ab ff ff ff       	call   c0013204 <__static_initialization_and_destruction_0(int, int)>
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	83 c4 0c             	add    esp,0xc
c001325f:	c3                   	ret    

c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013260:	53                   	push   ebx
c0013261:	8b 15 c8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ec8
c0013267:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001326b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001326f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013275:	89 d8                	mov    eax,ebx
c0013277:	d1 e8                	shr    eax,1
c0013279:	01 d0                	add    eax,edx
c001327b:	80 e3 01             	and    bl,0x1
c001327e:	8a 10                	mov    dl,BYTE PTR [eax]
c0013280:	75 09                	jne    c001328b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013282:	83 e2 f0             	and    edx,0xfffffff0
c0013285:	09 ca                	or     edx,ecx
c0013287:	88 10                	mov    BYTE PTR [eax],dl
c0013289:	5b                   	pop    ebx
c001328a:	c3                   	ret    
c001328b:	0f b6 c9             	movzx  ecx,cl
c001328e:	83 e2 0f             	and    edx,0xf
c0013291:	c1 e1 04             	shl    ecx,0x4
c0013294:	09 ca                	or     edx,ecx
c0013296:	88 10                	mov    BYTE PTR [eax],dl
c0013298:	5b                   	pop    ebx
c0013299:	c3                   	ret    

c001329a <Virt::getPageState(unsigned long)>:
c001329a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001329e:	8b 0d c8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ec8
c00132a4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00132aa:	89 d0                	mov    eax,edx
c00132ac:	d1 e8                	shr    eax,1
c00132ae:	80 e2 01             	and    dl,0x1
c00132b1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00132b4:	74 03                	je     c00132b9 <Virt::getPageState(unsigned long)+0x1f>
c00132b6:	c1 e8 04             	shr    eax,0x4
c00132b9:	83 e0 0f             	and    eax,0xf
c00132bc:	c3                   	ret    

c00132bd <Virt::allocateKernelVirtualPages(int)>:
c00132bd:	55                   	push   ebp
c00132be:	57                   	push   edi
c00132bf:	56                   	push   esi
c00132c0:	31 f6                	xor    esi,esi
c00132c2:	53                   	push   ebx
c00132c3:	31 db                	xor    ebx,ebx
c00132c5:	83 ec 1c             	sub    esp,0x1c
c00132c8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00132cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00132d1:	8b 2d c4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026ec4
c00132d7:	55                   	push   ebp
c00132d8:	e8 bd ff ff ff       	call   c001329a <Virt::getPageState(unsigned long)>
c00132dd:	5a                   	pop    edx
c00132de:	84 c0                	test   al,al
c00132e0:	75 3d                	jne    c001331f <Virt::allocateKernelVirtualPages(int)+0x62>
c00132e2:	85 db                	test   ebx,ebx
c00132e4:	0f 44 f5             	cmove  esi,ebp
c00132e7:	83 c3 01             	add    ebx,0x1
c00132ea:	39 fb                	cmp    ebx,edi
c00132ec:	74 5e                	je     c001334c <Virt::allocateKernelVirtualPages(int)+0x8f>
c00132ee:	83 c5 01             	add    ebp,0x1
c00132f1:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00132f7:	76 33                	jbe    c001332c <Virt::allocateKernelVirtualPages(int)+0x6f>
c00132f9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00132fe:	c7 05 c4 6e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026ec4,0xc8000
c0013308:	75 2a                	jne    c0013334 <Virt::allocateKernelVirtualPages(int)+0x77>
c001330a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001330f:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013314:	55                   	push   ebp
c0013315:	e8 80 ff ff ff       	call   c001329a <Virt::getPageState(unsigned long)>
c001331a:	5a                   	pop    edx
c001331b:	84 c0                	test   al,al
c001331d:	74 c3                	je     c00132e2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001331f:	83 c5 01             	add    ebp,0x1
c0013322:	31 db                	xor    ebx,ebx
c0013324:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001332a:	77 cd                	ja     c00132f9 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001332c:	89 2d c4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ec4,ebp
c0013332:	eb a3                	jmp    c00132d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	68 54 47 02 c0       	push   0xc0024754
c001333c:	e8 0d cb ff ff       	call   c000fe4e <KePanic(char const*)>
c0013341:	8b 2d c4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026ec4
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	eb 8b                	jmp    c00132d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001334c:	89 35 c4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ec4,esi
c0013352:	83 fb 01             	cmp    ebx,0x1
c0013355:	74 63                	je     c00133ba <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013357:	85 ff                	test   edi,edi
c0013359:	74 41                	je     c001339c <Virt::allocateKernelVirtualPages(int)+0xdf>
c001335b:	89 f0                	mov    eax,esi
c001335d:	31 db                	xor    ebx,ebx
c001335f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013362:	eb 16                	jmp    c001337a <Virt::allocateKernelVirtualPages(int)+0xbd>
c0013364:	6a 01                	push   0x1
c0013366:	83 c3 01             	add    ebx,0x1
c0013369:	50                   	push   eax
c001336a:	e8 f1 fe ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001336f:	39 fb                	cmp    ebx,edi
c0013371:	58                   	pop    eax
c0013372:	5a                   	pop    edx
c0013373:	74 27                	je     c001339c <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013375:	a1 c4 6e 02 c0       	mov    eax,ds:0xc0026ec4
c001337a:	8d 50 01             	lea    edx,[eax+0x1]
c001337d:	85 db                	test   ebx,ebx
c001337f:	89 15 c4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ec4,edx
c0013385:	74 22                	je     c00133a9 <Virt::allocateKernelVirtualPages(int)+0xec>
c0013387:	39 dd                	cmp    ebp,ebx
c0013389:	75 d9                	jne    c0013364 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001338b:	6a 03                	push   0x3
c001338d:	83 c3 01             	add    ebx,0x1
c0013390:	50                   	push   eax
c0013391:	e8 ca fe ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013396:	39 fb                	cmp    ebx,edi
c0013398:	59                   	pop    ecx
c0013399:	58                   	pop    eax
c001339a:	75 d9                	jne    c0013375 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001339c:	83 c4 1c             	add    esp,0x1c
c001339f:	89 f0                	mov    eax,esi
c00133a1:	5b                   	pop    ebx
c00133a2:	c1 e0 0c             	shl    eax,0xc
c00133a5:	5e                   	pop    esi
c00133a6:	5f                   	pop    edi
c00133a7:	5d                   	pop    ebp
c00133a8:	c3                   	ret    
c00133a9:	6a 02                	push   0x2
c00133ab:	bb 01 00 00 00       	mov    ebx,0x1
c00133b0:	50                   	push   eax
c00133b1:	e8 aa fe ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133b6:	58                   	pop    eax
c00133b7:	5a                   	pop    edx
c00133b8:	eb bb                	jmp    c0013375 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00133ba:	6a 04                	push   0x4
c00133bc:	56                   	push   esi
c00133bd:	8d 46 01             	lea    eax,[esi+0x1]
c00133c0:	a3 c4 6e 02 c0       	mov    ds:0xc0026ec4,eax
c00133c5:	e8 96 fe ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133ca:	89 f0                	mov    eax,esi
c00133cc:	59                   	pop    ecx
c00133cd:	c1 e0 0c             	shl    eax,0xc
c00133d0:	5b                   	pop    ebx
c00133d1:	83 c4 1c             	add    esp,0x1c
c00133d4:	5b                   	pop    ebx
c00133d5:	5e                   	pop    esi
c00133d6:	5f                   	pop    edi
c00133d7:	5d                   	pop    ebp
c00133d8:	c3                   	ret    

c00133d9 <Virt::freeSwapfilePage(unsigned long)>:
c00133d9:	53                   	push   ebx
c00133da:	8b 15 4c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f24c
c00133e0:	b8 01 00 00 00       	mov    eax,0x1
c00133e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133e9:	d3 e0                	shl    eax,cl
c00133eb:	89 cb                	mov    ebx,ecx
c00133ed:	c1 eb 05             	shr    ebx,0x5
c00133f0:	f7 d0                	not    eax
c00133f2:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00133f5:	21 c1                	and    ecx,eax
c00133f7:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00133fa:	5b                   	pop    ebx
c00133fb:	c3                   	ret    

c00133fc <Virt::swapIDToSector(unsigned long)>:
c00133fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013400:	8b 15 cc 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ecc
c0013406:	8b 0d d4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ed4
c001340c:	0f af c2             	imul   eax,edx
c001340f:	01 c8                	add    eax,ecx
c0013411:	c3                   	ret    

c0013412 <Virt::allocateSwapfilePage()>:
c0013412:	55                   	push   ebp
c0013413:	31 d2                	xor    edx,edx
c0013415:	57                   	push   edi
c0013416:	56                   	push   esi
c0013417:	53                   	push   ebx
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	8b 1d d0 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed0
c0013421:	8b 0d cc 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ecc
c0013427:	89 d8                	mov    eax,ebx
c0013429:	f7 f1                	div    ecx
c001342b:	39 cb                	cmp    ebx,ecx
c001342d:	72 2f                	jb     c001345e <Virt::allocateSwapfilePage()+0x4c>
c001342f:	8b 35 4c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f24c
c0013435:	8b 16                	mov    edx,DWORD PTR [esi]
c0013437:	f6 c2 01             	test   dl,0x1
c001343a:	74 3e                	je     c001347a <Virt::allocateSwapfilePage()+0x68>
c001343c:	31 c9                	xor    ecx,ecx
c001343e:	bf 01 00 00 00       	mov    edi,0x1
c0013443:	eb 12                	jmp    c0013457 <Virt::allocateSwapfilePage()+0x45>
c0013445:	89 ca                	mov    edx,ecx
c0013447:	89 fd                	mov    ebp,edi
c0013449:	c1 ea 05             	shr    edx,0x5
c001344c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001344f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013451:	d3 e5                	shl    ebp,cl
c0013453:	85 ea                	test   edx,ebp
c0013455:	74 2c                	je     c0013483 <Virt::allocateSwapfilePage()+0x71>
c0013457:	83 c1 01             	add    ecx,0x1
c001345a:	39 c8                	cmp    eax,ecx
c001345c:	77 e7                	ja     c0013445 <Virt::allocateSwapfilePage()+0x33>
c001345e:	83 ec 0c             	sub    esp,0xc
c0013461:	68 d7 4c 02 c0       	push   0xc0024cd7
c0013466:	e8 e3 c9 ff ff       	call   c000fe4e <KePanic(char const*)>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	31 c9                	xor    ecx,ecx
c0013470:	83 c4 0c             	add    esp,0xc
c0013473:	89 c8                	mov    eax,ecx
c0013475:	5b                   	pop    ebx
c0013476:	5e                   	pop    esi
c0013477:	5f                   	pop    edi
c0013478:	5d                   	pop    ebp
c0013479:	c3                   	ret    
c001347a:	89 f3                	mov    ebx,esi
c001347c:	bd 01 00 00 00       	mov    ebp,0x1
c0013481:	31 c9                	xor    ecx,ecx
c0013483:	09 ea                	or     edx,ebp
c0013485:	89 c8                	mov    eax,ecx
c0013487:	89 13                	mov    DWORD PTR [ebx],edx
c0013489:	83 c4 0c             	add    esp,0xc
c001348c:	5b                   	pop    ebx
c001348d:	5e                   	pop    esi
c001348e:	5f                   	pop    edi
c001348f:	5d                   	pop    ebp
c0013490:	c3                   	ret    

c0013491 <Virt::virtualMemorySetup()>:
c0013491:	53                   	push   ebx
c0013492:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013497:	6a 0f                	push   0xf
c0013499:	53                   	push   ebx
c001349a:	83 c3 01             	add    ebx,0x1
c001349d:	e8 be fd ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134a2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00134a8:	58                   	pop    eax
c00134a9:	5a                   	pop    edx
c00134aa:	75 eb                	jne    c0013497 <Virt::virtualMemorySetup()+0x6>
c00134ac:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00134b1:	6a 00                	push   0x0
c00134b3:	53                   	push   ebx
c00134b4:	83 c3 01             	add    ebx,0x1
c00134b7:	e8 a4 fd ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00134c2:	59                   	pop    ecx
c00134c3:	58                   	pop    eax
c00134c4:	75 eb                	jne    c00134b1 <Virt::virtualMemorySetup()+0x20>
c00134c6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00134cb:	6a 0f                	push   0xf
c00134cd:	53                   	push   ebx
c00134ce:	83 c3 01             	add    ebx,0x1
c00134d1:	e8 8a fd ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134d6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00134dc:	58                   	pop    eax
c00134dd:	5a                   	pop    edx
c00134de:	75 eb                	jne    c00134cb <Virt::virtualMemorySetup()+0x3a>
c00134e0:	5b                   	pop    ebx
c00134e1:	c3                   	ret    

c00134e2 <Virt::setupPageSwapping(int)>:
c00134e2:	53                   	push   ebx
c00134e3:	83 ec 0c             	sub    esp,0xc
c00134e6:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c00134eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00134ef:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00134f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00134f7:	53                   	push   ebx
c00134f8:	68 ee 4c 02 c0       	push   0xc0024cee
c00134fd:	50                   	push   eax
c00134fe:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013501:	c1 e3 0b             	shl    ebx,0xb
c0013504:	89 1d d0 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed0,ebx
c001350a:	c1 eb 08             	shr    ebx,0x8
c001350d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013510:	c6 05 d8 6e 02 c0 43 	mov    BYTE PTR ds:0xc0026ed8,0x43
c0013517:	c7 05 cc 6e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026ecc,0x8
c0013521:	a3 d4 6e 02 c0       	mov    ds:0xc0026ed4,eax
c0013526:	e8 dd c5 ff ff       	call   c000fb08 <malloc>
c001352b:	31 d2                	xor    edx,edx
c001352d:	83 c4 0c             	add    esp,0xc
c0013530:	a3 4c f2 02 c0       	mov    ds:0xc002f24c,eax
c0013535:	89 c1                	mov    ecx,eax
c0013537:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c001353c:	f7 35 cc 6e 02 c0    	div    DWORD PTR ds:0xc0026ecc
c0013542:	c1 e8 05             	shr    eax,0x5
c0013545:	50                   	push   eax
c0013546:	6a 00                	push   0x0
c0013548:	51                   	push   ecx
c0013549:	e8 a2 cf fe ff       	call   c00004f0 <memset>
c001354e:	83 c4 18             	add    esp,0x18
c0013551:	5b                   	pop    ebx
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <VAS::setCPUSpecific(unsigned long)>:
c0013554:	c3                   	ret    
c0013555:	90                   	nop

c0013556 <VAS::VAS(VAS*)>:
c0013556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001355a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001356c:	90                   	nop
c001356d:	c3                   	ret    

c001356e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001356e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013572:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013577:	89 c2                	mov    edx,eax
c0013579:	c1 ea 16             	shr    edx,0x16
c001357c:	c1 e8 0a             	shr    eax,0xa
c001357f:	83 f9 01             	cmp    ecx,0x1
c0013582:	19 c9                	sbb    ecx,ecx
c0013584:	25 fc 0f 00 00       	and    eax,0xffc
c0013589:	c1 e2 0c             	shl    edx,0xc
c001358c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013592:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013599:	01 d0                	add    eax,edx
c001359b:	c3                   	ret    

c001359c <VAS::getPageTableEntry(unsigned long)>:
c001359c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135a0:	89 ca                	mov    edx,ecx
c00135a2:	c1 ea 16             	shr    edx,0x16
c00135a5:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00135ab:	c1 e9 0a             	shr    ecx,0xa
c00135ae:	c1 e0 0c             	shl    eax,0xc
c00135b1:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00135b7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00135ba:	c3                   	ret    

c00135bb <Virt::freeKernelVirtualPages(unsigned long)>:
c00135bb:	55                   	push   ebp
c00135bc:	57                   	push   edi
c00135bd:	bf 01 00 00 00       	mov    edi,0x1
c00135c2:	56                   	push   esi
c00135c3:	53                   	push   ebx
c00135c4:	83 ec 1c             	sub    esp,0x1c
c00135c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00135cb:	c1 ee 0c             	shr    esi,0xc
c00135ce:	eb 48                	jmp    c0013618 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00135d0:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00135d5:	83 ec 08             	sub    esp,0x8
c00135d8:	55                   	push   ebp
c00135d9:	50                   	push   eax
c00135da:	e8 bd ff ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e4:	f6 c6 04             	test   dh,0x4
c00135e7:	75 70                	jne    c0013659 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00135e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135ef:	83 fb 04             	cmp    ebx,0x4
c00135f2:	0f 84 8a 00 00 00    	je     c0013682 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00135f8:	83 fb 02             	cmp    ebx,0x2
c00135fb:	0f 84 9a 00 00 00    	je     c001369b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013601:	83 fb 03             	cmp    ebx,0x3
c0013604:	0f 84 be 00 00 00    	je     c00136c8 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001360a:	83 fb 01             	cmp    ebx,0x1
c001360d:	0f 84 a2 00 00 00    	je     c00136b5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013613:	83 c6 01             	add    esi,0x1
c0013616:	31 ff                	xor    edi,edi
c0013618:	56                   	push   esi
c0013619:	89 f5                	mov    ebp,esi
c001361b:	e8 7a fc ff ff       	call   c001329a <Virt::getPageState(unsigned long)>
c0013620:	c1 e5 0c             	shl    ebp,0xc
c0013623:	5a                   	pop    edx
c0013624:	0f b6 d8             	movzx  ebx,al
c0013627:	85 db                	test   ebx,ebx
c0013629:	75 a5                	jne    c00135d0 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001362b:	83 ec 0c             	sub    esp,0xc
c001362e:	68 05 4d 02 c0       	push   0xc0024d05
c0013633:	e8 16 c8 ff ff       	call   c000fe4e <KePanic(char const*)>
c0013638:	5a                   	pop    edx
c0013639:	59                   	pop    ecx
c001363a:	55                   	push   ebp
c001363b:	8b 2d 50 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f250
c0013641:	55                   	push   ebp
c0013642:	e8 55 ff ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	8b 10                	mov    edx,DWORD PTR [eax]
c001364c:	f6 c6 04             	test   dh,0x4
c001364f:	75 08                	jne    c0013659 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013651:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013657:	eb ba                	jmp    c0013613 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001365d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013663:	83 ec 0c             	sub    esp,0xc
c0013666:	52                   	push   edx
c0013667:	e8 73 c9 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	83 fb 04             	cmp    ebx,0x4
c0013672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013676:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001367c:	0f 85 76 ff ff ff    	jne    c00135f8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013682:	83 e7 01             	and    edi,0x1
c0013685:	75 46                	jne    c00136cd <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013687:	c7 44 24 30 74 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024774
c001368f:	83 c4 1c             	add    esp,0x1c
c0013692:	5b                   	pop    ebx
c0013693:	5e                   	pop    esi
c0013694:	5f                   	pop    edi
c0013695:	5d                   	pop    ebp
c0013696:	e9 b3 c7 ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001369b:	83 e7 01             	and    edi,0x1
c001369e:	75 15                	jne    c00136b5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00136a0:	83 ec 0c             	sub    esp,0xc
c00136a3:	68 21 4d 02 c0       	push   0xc0024d21
c00136a8:	e8 a1 c7 ff ff       	call   c000fe4e <KePanic(char const*)>
c00136ad:	83 c4 10             	add    esp,0x10
c00136b0:	e9 5e ff ff ff       	jmp    c0013613 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136b5:	83 ec 08             	sub    esp,0x8
c00136b8:	6a 00                	push   0x0
c00136ba:	56                   	push   esi
c00136bb:	e8 a0 fb ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	e9 4b ff ff ff       	jmp    c0013613 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136c8:	83 e7 01             	and    edi,0x1
c00136cb:	75 16                	jne    c00136e3 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00136cd:	83 ec 08             	sub    esp,0x8
c00136d0:	6a 00                	push   0x0
c00136d2:	56                   	push   esi
c00136d3:	e8 88 fb ff ff       	call   c0013260 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	83 c4 1c             	add    esp,0x1c
c00136de:	5b                   	pop    ebx
c00136df:	5e                   	pop    esi
c00136e0:	5f                   	pop    edi
c00136e1:	5d                   	pop    ebp
c00136e2:	c3                   	ret    
c00136e3:	c7 44 24 30 3d 4d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024d3d
c00136eb:	83 c4 1c             	add    esp,0x1c
c00136ee:	5b                   	pop    ebx
c00136ef:	5e                   	pop    esi
c00136f0:	5f                   	pop    edi
c00136f1:	5d                   	pop    ebp
c00136f2:	e9 57 c7 ff ff       	jmp    c000fe4e <KePanic(char const*)>
c00136f7:	90                   	nop

c00136f8 <VAS::freeAllocatedPages(unsigned long)>:
c00136f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013700:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013704:	74 09                	je     c001370f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013706:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001370a:	e9 ac fe ff ff       	jmp    c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c001370f:	c7 44 24 04 98 47 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024798
c0013717:	e9 32 38 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c001371c <VAS::virtualToPhysical(unsigned long)>:
c001371c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013720:	50                   	push   eax
c0013721:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013725:	52                   	push   edx
c0013726:	e8 71 fe ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c001372b:	59                   	pop    ecx
c001372c:	5a                   	pop    edx
c001372d:	8b 00                	mov    eax,DWORD PTR [eax]
c001372f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013734:	c3                   	ret    
c0013735:	90                   	nop

c0013736 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013736:	55                   	push   ebp
c0013737:	57                   	push   edi
c0013738:	56                   	push   esi
c0013739:	53                   	push   ebx
c001373a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001373e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013742:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013746:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001374a:	85 db                	test   ebx,ebx
c001374c:	7e 24                	jle    c0013772 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001374e:	c1 e3 0c             	shl    ebx,0xc
c0013751:	01 f3                	add    ebx,esi
c0013753:	56                   	push   esi
c0013754:	81 c6 00 10 00 00    	add    esi,0x1000
c001375a:	55                   	push   ebp
c001375b:	e8 3c fe ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013760:	5a                   	pop    edx
c0013761:	59                   	pop    ecx
c0013762:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013764:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013768:	21 f9                	and    ecx,edi
c001376a:	09 d1                	or     ecx,edx
c001376c:	39 f3                	cmp    ebx,esi
c001376e:	89 08                	mov    DWORD PTR [eax],ecx
c0013770:	75 e1                	jne    c0013753 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013772:	5b                   	pop    ebx
c0013773:	5e                   	pop    esi
c0013774:	5f                   	pop    edi
c0013775:	5d                   	pop    ebp
c0013776:	c3                   	ret    
c0013777:	90                   	nop

c0013778 <VAS::VAS()>:
c0013778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001377c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013787:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001378e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013792:	a3 50 f2 02 c0       	mov    ds:0xc002f250,eax
c0013797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001379b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001379f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00137a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137aa:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00137b1:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c00137b6:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00137bb:	29 c2                	sub    edx,eax
c00137bd:	89 d0                	mov    eax,edx
c00137bf:	05 ff 0f 00 00       	add    eax,0xfff
c00137c4:	c1 e8 0c             	shr    eax,0xc
c00137c7:	89 c2                	mov    edx,eax
c00137c9:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00137ce:	6a 04                	push   0x4
c00137d0:	6a ff                	push   0xffffffff
c00137d2:	52                   	push   edx
c00137d3:	50                   	push   eax
c00137d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137d8:	e8 59 ff ff ff       	call   c0013736 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00137dd:	83 c4 14             	add    esp,0x14
c00137e0:	90                   	nop
c00137e1:	c3                   	ret    

c00137e2 <VAS::setToWriteCombining(unsigned long, int)>:
c00137e2:	a1 e4 fa 02 c0       	mov    eax,ds:0xc002fae4
c00137e7:	50                   	push   eax
c00137e8:	6a ff                	push   0xffffffff
c00137ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00137ee:	52                   	push   edx
c00137ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00137f3:	51                   	push   ecx
c00137f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137f8:	50                   	push   eax
c00137f9:	e8 38 ff ff ff       	call   c0013736 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00137fe:	83 c4 14             	add    esp,0x14
c0013801:	c3                   	ret    

c0013802 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013806:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013810:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013815:	83 f8 01             	cmp    eax,0x1
c0013818:	19 c0                	sbb    eax,eax
c001381a:	83 ca 03             	or     edx,0x3
c001381d:	83 e0 fc             	and    eax,0xfffffffc
c0013820:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013827:	0f 20 d8             	mov    eax,cr3
c001382a:	0f 22 d8             	mov    cr3,eax
c001382d:	c3                   	ret    

c001382e <VAS::~VAS()>:
c001382e:	83 ec 2c             	sub    esp,0x2c
c0013831:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013839:	fa                   	cli    
c001383a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001383f:	83 c0 01             	add    eax,0x1
c0013842:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0013847:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001384c:	8b 00                	mov    eax,DWORD PTR [eax]
c001384e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013851:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013857:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001385b:	6a 01                	push   0x1
c001385d:	50                   	push   eax
c001385e:	e8 9f ff ff ff       	call   c0013802 <VAS::mapOtherVASIn(bool, VAS*)>
c0013863:	83 c4 0c             	add    esp,0xc
c0013866:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001386e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013876:	0f 8f d8 00 00 00    	jg     c0013954 <VAS::~VAS()+0x126>
c001387c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013880:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013887:	c1 e2 02             	shl    edx,0x2
c001388a:	01 d0                	add    eax,edx
c001388c:	8b 00                	mov    eax,DWORD PTR [eax]
c001388e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013896:	83 e0 01             	and    eax,0x1
c0013899:	0f 84 ab 00 00 00    	je     c001394a <VAS::~VAS()+0x11c>
c001389f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00138a7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00138af:	7f 74                	jg     c0013925 <VAS::~VAS()+0xf7>
c00138b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138b5:	c1 e0 0a             	shl    eax,0xa
c00138b8:	89 c2                	mov    edx,eax
c00138ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138be:	01 d0                	add    eax,edx
c00138c0:	c1 e0 0c             	shl    eax,0xc
c00138c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00138cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138d1:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00138d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00138db:	6a 01                	push   0x1
c00138dd:	50                   	push   eax
c00138de:	e8 8b fc ff ff       	call   c001356e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00138e3:	83 c4 0c             	add    esp,0xc
c00138e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00138f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138f8:	25 01 04 00 00       	and    eax,0x401
c00138fd:	3d 01 04 00 00       	cmp    eax,0x401
c0013902:	75 1a                	jne    c001391e <VAS::~VAS()+0xf0>
c0013904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013908:	25 00 f0 ff ff       	and    eax,0xfffff000
c001390d:	83 ec 0c             	sub    esp,0xc
c0013910:	50                   	push   eax
c0013911:	e8 c9 c6 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c0013916:	83 c4 10             	add    esp,0x10
c0013919:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001391e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013923:	eb 82                	jmp    c00138a7 <VAS::~VAS()+0x79>
c0013925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013929:	25 00 04 00 00       	and    eax,0x400
c001392e:	74 1a                	je     c001394a <VAS::~VAS()+0x11c>
c0013930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013934:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013939:	83 ec 0c             	sub    esp,0xc
c001393c:	50                   	push   eax
c001393d:	e8 9d c6 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001394a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001394f:	e9 1a ff ff ff       	jmp    c001386e <VAS::~VAS()+0x40>
c0013954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013958:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001395b:	83 ec 0c             	sub    esp,0xc
c001395e:	50                   	push   eax
c001395f:	e8 57 fc ff ff       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c0013964:	83 c4 10             	add    esp,0x10
c0013967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001396b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	50                   	push   eax
c0013972:	e8 68 c6 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001397f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0013987:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001398c:	85 c0                	test   eax,eax
c001398e:	75 01                	jne    c0013991 <VAS::~VAS()+0x163>
c0013990:	fb                   	sti    
c0013991:	90                   	nop
c0013992:	83 c4 2c             	add    esp,0x2c
c0013995:	c3                   	ret    

c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013996:	55                   	push   ebp
c0013997:	57                   	push   edi
c0013998:	56                   	push   esi
c0013999:	53                   	push   ebx
c001399a:	83 ec 1c             	sub    esp,0x1c
c001399d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00139a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00139a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00139a9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00139af:	77 08                	ja     c00139b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00139b1:	0f 20 d8             	mov    eax,cr3
c00139b4:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00139b7:	75 43                	jne    c00139fc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00139b9:	89 d8                	mov    eax,ebx
c00139bb:	09 f8                	or     eax,edi
c00139bd:	a9 ff 0f 00 00       	test   eax,0xfff
c00139c2:	75 53                	jne    c0013a17 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00139c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00139c7:	89 de                	mov    esi,ebx
c00139c9:	c1 ee 16             	shr    esi,0x16
c00139cc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00139d3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00139d7:	74 50                	je     c0013a29 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00139d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139dd:	c1 eb 0a             	shr    ebx,0xa
c00139e0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00139e6:	c1 e6 0c             	shl    esi,0xc
c00139e9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00139ef:	09 c7                	or     edi,eax
c00139f1:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00139f4:	83 c4 1c             	add    esp,0x1c
c00139f7:	5b                   	pop    ebx
c00139f8:	5e                   	pop    esi
c00139f9:	5f                   	pop    edi
c00139fa:	5d                   	pop    ebp
c00139fb:	c3                   	ret    
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	68 bc 47 02 c0       	push   0xc00247bc
c0013a04:	e8 45 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a09:	89 d8                	mov    eax,ebx
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	09 f8                	or     eax,edi
c0013a10:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a15:	74 ad                	je     c00139c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013a17:	83 ec 0c             	sub    esp,0xc
c0013a1a:	68 24 48 02 c0       	push   0xc0024824
c0013a1f:	e8 2a c4 ff ff       	call   c000fe4e <KePanic(char const*)>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	eb 9b                	jmp    c00139c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013a29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a2d:	e8 16 c6 ff ff       	call   c0010048 <Phys::allocatePage()>
c0013a32:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a43:	6a 01                	push   0x1
c0013a45:	e8 73 f8 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0013a4a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a51:	6a 01                	push   0x1
c0013a53:	50                   	push   eax
c0013a54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a58:	52                   	push   edx
c0013a59:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a5d:	51                   	push   ecx
c0013a5e:	e8 2d 01 00 00       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013a63:	83 c4 1c             	add    esp,0x1c
c0013a66:	68 00 10 00 00       	push   0x1000
c0013a6b:	6a 00                	push   0x0
c0013a6d:	50                   	push   eax
c0013a6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a72:	e8 79 ca fe ff       	call   c00004f0 <memset>
c0013a77:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a7b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a7e:	e8 38 fb ff ff       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c0013a83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a8b:	83 c4 10             	add    esp,0x10
c0013a8e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013a91:	0d 07 04 00 00       	or     eax,0x407
c0013a96:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013a99:	e9 3b ff ff ff       	jmp    c00139d9 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013a9e <VAS::allocatePages(int, int)>:
c0013a9e:	55                   	push   ebp
c0013a9f:	57                   	push   edi
c0013aa0:	56                   	push   esi
c0013aa1:	53                   	push   ebx
c0013aa2:	83 ec 1c             	sub    esp,0x1c
c0013aa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013aa9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013aad:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013ab1:	75 75                	jne    c0013b28 <VAS::allocatePages(int, int)+0x8a>
c0013ab3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013aba:	85 c0                	test   eax,eax
c0013abc:	74 49                	je     c0013b07 <VAS::allocatePages(int, int)+0x69>
c0013abe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ac2:	89 d5                	mov    ebp,edx
c0013ac4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013ac8:	c1 e5 0c             	shl    ebp,0xc
c0013acb:	01 dd                	add    ebp,ebx
c0013acd:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013ad0:	81 cf 00 04 00 00    	or     edi,0x400
c0013ad6:	85 d2                	test   edx,edx
c0013ad8:	7e 1b                	jle    c0013af5 <VAS::allocatePages(int, int)+0x57>
c0013ada:	e8 69 c5 ff ff       	call   c0010048 <Phys::allocatePage()>
c0013adf:	57                   	push   edi
c0013ae0:	53                   	push   ebx
c0013ae1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ae7:	50                   	push   eax
c0013ae8:	56                   	push   esi
c0013ae9:	e8 a8 fe ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	39 dd                	cmp    ebp,ebx
c0013af3:	75 e5                	jne    c0013ada <VAS::allocatePages(int, int)+0x3c>
c0013af5:	0f 20 d8             	mov    eax,cr3
c0013af8:	0f 22 d8             	mov    cr3,eax
c0013afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013aff:	83 c4 1c             	add    esp,0x1c
c0013b02:	5b                   	pop    ebx
c0013b03:	5e                   	pop    esi
c0013b04:	5f                   	pop    edi
c0013b05:	5d                   	pop    ebp
c0013b06:	c3                   	ret    
c0013b07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013b0b:	83 ec 0c             	sub    esp,0xc
c0013b0e:	68 48 48 02 c0       	push   0xc0024848
c0013b13:	e8 36 c3 ff ff       	call   c000fe4e <KePanic(char const*)>
c0013b18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b1f:	83 c4 10             	add    esp,0x10
c0013b22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b26:	eb 96                	jmp    c0013abe <VAS::allocatePages(int, int)+0x20>
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	52                   	push   edx
c0013b2c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013b30:	e8 88 f7 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0013b35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013b41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b45:	77 38                	ja     c0013b7f <VAS::allocatePages(int, int)+0xe1>
c0013b47:	85 d2                	test   edx,edx
c0013b49:	7e aa                	jle    c0013af5 <VAS::allocatePages(int, int)+0x57>
c0013b4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b4f:	c1 e2 0c             	shl    edx,0xc
c0013b52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b56:	81 cf 00 04 00 00    	or     edi,0x400
c0013b5c:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013b5f:	e8 e4 c4 ff ff       	call   c0010048 <Phys::allocatePage()>
c0013b64:	57                   	push   edi
c0013b65:	53                   	push   ebx
c0013b66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b6c:	50                   	push   eax
c0013b6d:	56                   	push   esi
c0013b6e:	e8 23 fe ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	39 dd                	cmp    ebp,ebx
c0013b78:	75 e5                	jne    c0013b5f <VAS::allocatePages(int, int)+0xc1>
c0013b7a:	e9 76 ff ff ff       	jmp    c0013af5 <VAS::allocatePages(int, int)+0x57>
c0013b7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013b83:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c0013b88:	09 c1                	or     ecx,eax
c0013b8a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013b8e:	eb b7                	jmp    c0013b47 <VAS::allocatePages(int, int)+0xa9>

c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013b90:	55                   	push   ebp
c0013b91:	57                   	push   edi
c0013b92:	56                   	push   esi
c0013b93:	53                   	push   ebx
c0013b94:	83 ec 1c             	sub    esp,0x1c
c0013b97:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013b9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013b9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013ba3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013ba7:	85 db                	test   ebx,ebx
c0013ba9:	7e 2c                	jle    c0013bd7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013bab:	c1 e3 0c             	shl    ebx,0xc
c0013bae:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013bb1:	89 f3                	mov    ebx,esi
c0013bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bb7:	55                   	push   ebp
c0013bb8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013bbc:	29 f2                	sub    edx,esi
c0013bbe:	01 da                	add    edx,ebx
c0013bc0:	52                   	push   edx
c0013bc1:	53                   	push   ebx
c0013bc2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bc8:	57                   	push   edi
c0013bc9:	e8 c8 fd ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013bd5:	75 e0                	jne    c0013bb7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013bd7:	0f 20 d8             	mov    eax,cr3
c0013bda:	0f 22 d8             	mov    cr3,eax
c0013bdd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013be1:	83 c4 1c             	add    esp,0x1c
c0013be4:	5b                   	pop    ebx
c0013be5:	5e                   	pop    esi
c0013be6:	5f                   	pop    edi
c0013be7:	5d                   	pop    ebp
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013bea:	55                   	push   ebp
c0013beb:	57                   	push   edi
c0013bec:	56                   	push   esi
c0013bed:	53                   	push   ebx
c0013bee:	83 ec 1c             	sub    esp,0x1c
c0013bf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bf5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013bf9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013bfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c05:	09 d8                	or     eax,ebx
c0013c07:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c0c:	75 4b                	jne    c0013c59 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013c0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c11:	89 de                	mov    esi,ebx
c0013c13:	c1 ee 16             	shr    esi,0x16
c0013c16:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013c1d:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013c21:	74 48                	je     c0013c6b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013c23:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013c28:	c1 eb 0a             	shr    ebx,0xa
c0013c2b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013c2f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c33:	83 ff 01             	cmp    edi,0x1
c0013c36:	19 c0                	sbb    eax,eax
c0013c38:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c3e:	c1 e6 0c             	shl    esi,0xc
c0013c41:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013c46:	01 f3                	add    ebx,esi
c0013c48:	09 ca                	or     edx,ecx
c0013c4a:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013c51:	83 c4 1c             	add    esp,0x1c
c0013c54:	5b                   	pop    ebx
c0013c55:	5e                   	pop    esi
c0013c56:	5f                   	pop    edi
c0013c57:	5d                   	pop    ebp
c0013c58:	c3                   	ret    
c0013c59:	83 ec 0c             	sub    esp,0xc
c0013c5c:	68 74 48 02 c0       	push   0xc0024874
c0013c61:	e8 e8 c1 ff ff       	call   c000fe4e <KePanic(char const*)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	eb a3                	jmp    c0013c0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013c6b:	e8 d8 c3 ff ff       	call   c0010048 <Phys::allocatePage()>
c0013c70:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013c7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c81:	6a 01                	push   0x1
c0013c83:	e8 35 f6 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0013c88:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c8f:	6a 01                	push   0x1
c0013c91:	50                   	push   eax
c0013c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c96:	50                   	push   eax
c0013c97:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013c9b:	51                   	push   ecx
c0013c9c:	e8 ef fe ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ca1:	83 c4 1c             	add    esp,0x1c
c0013ca4:	68 00 10 00 00       	push   0x1000
c0013ca9:	6a 00                	push   0x0
c0013cab:	50                   	push   eax
c0013cac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cb0:	e8 3b c8 fe ff       	call   c00004f0 <memset>
c0013cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013cb9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013cbc:	e8 fa f8 ff ff       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c0013cc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ccb:	81 ca 07 04 00 00    	or     edx,0x407
c0013cd1:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013cd4:	e9 4a ff ff ff       	jmp    c0013c23 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013cd9:	90                   	nop

c0013cda <VAS::VAS(bool)>:
c0013cda:	53                   	push   ebx
c0013cdb:	83 ec 28             	sub    esp,0x28
c0013cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ce2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cf5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d04:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013d07:	e8 3c c3 ff ff       	call   c0010048 <Phys::allocatePage()>
c0013d0c:	89 c2                	mov    edx,eax
c0013d0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d12:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d15:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0013d1b:	83 ec 0c             	sub    esp,0xc
c0013d1e:	6a 01                	push   0x1
c0013d20:	e8 98 f5 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	89 c2                	mov    edx,eax
c0013d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d2e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	6a 03                	push   0x3
c0013d36:	6a 01                	push   0x1
c0013d38:	52                   	push   edx
c0013d39:	50                   	push   eax
c0013d3a:	53                   	push   ebx
c0013d3b:	e8 50 fe ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d40:	83 c4 20             	add    esp,0x20
c0013d43:	89 c2                	mov    edx,eax
c0013d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d4c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013d54:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013d5c:	7f 1d                	jg     c0013d7b <VAS::VAS(bool)+0xa1>
c0013d5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d69:	c1 e2 02             	shl    edx,0x2
c0013d6c:	01 d0                	add    eax,edx
c0013d6e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d74:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013d79:	eb d9                	jmp    c0013d54 <VAS::VAS(bool)+0x7a>
c0013d7b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013d83:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013d8b:	7f 59                	jg     c0013de6 <VAS::VAS(bool)+0x10c>
c0013d8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d91:	2d 00 02 00 00       	sub    eax,0x200
c0013d96:	c1 e0 0c             	shl    eax,0xc
c0013d99:	89 c2                	mov    edx,eax
c0013d9b:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c0013da0:	89 d1                	mov    ecx,edx
c0013da2:	09 c1                	or     ecx,eax
c0013da4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013da8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013daf:	c1 e2 02             	shl    edx,0x2
c0013db2:	01 d0                	add    eax,edx
c0013db4:	83 c9 05             	or     ecx,0x5
c0013db7:	89 ca                	mov    edx,ecx
c0013db9:	89 10                	mov    DWORD PTR [eax],edx
c0013dbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dbf:	2d 40 03 00 00       	sub    eax,0x340
c0013dc4:	83 f8 7f             	cmp    eax,0x7f
c0013dc7:	77 16                	ja     c0013ddf <VAS::VAS(bool)+0x105>
c0013dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dd0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dd4:	c1 e2 02             	shl    edx,0x2
c0013dd7:	01 d0                	add    eax,edx
c0013dd9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013ddf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013de4:	eb 9d                	jmp    c0013d83 <VAS::VAS(bool)+0xa9>
c0013de6:	8b 15 e8 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fae8
c0013dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013df3:	05 20 0c 00 00       	add    eax,0xc20
c0013df8:	81 ca 03 40 00 00    	or     edx,0x4003
c0013dfe:	89 10                	mov    DWORD PTR [eax],edx
c0013e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e04:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013e07:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c0013e0c:	09 c2                	or     edx,eax
c0013e0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e15:	05 fc 0f 00 00       	add    eax,0xffc
c0013e1a:	83 ca 03             	or     edx,0x3
c0013e1d:	89 10                	mov    DWORD PTR [eax],edx
c0013e1f:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0013e24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e2a:	83 ec 0c             	sub    esp,0xc
c0013e2d:	50                   	push   eax
c0013e2e:	e8 fd 5d ff ff       	call   c0009c30 <Device::getName()>
c0013e33:	83 c4 10             	add    esp,0x10
c0013e36:	83 ec 08             	sub    esp,0x8
c0013e39:	68 57 4d 02 c0       	push   0xc0024d57
c0013e3e:	50                   	push   eax
c0013e3f:	e8 3c c9 fe ff       	call   c0000780 <strcmp>
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	85 c0                	test   eax,eax
c0013e49:	0f 94 c0             	sete   al
c0013e4c:	0f b6 c0             	movzx  eax,al
c0013e4f:	85 c0                	test   eax,eax
c0013e51:	74 68                	je     c0013ebb <VAS::VAS(bool)+0x1e1>
c0013e53:	fa                   	cli    
c0013e54:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0013e59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e5f:	05 68 09 00 00       	add    eax,0x968
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	50                   	push   eax
c0013e68:	e8 79 b0 ff ff       	call   c000eee6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e75:	89 c3                	mov    ebx,eax
c0013e77:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0013e7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e82:	05 68 09 00 00       	add    eax,0x968
c0013e87:	83 ec 0c             	sub    esp,0xc
c0013e8a:	50                   	push   eax
c0013e8b:	e8 56 b0 ff ff       	call   c000eee6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e90:	83 c4 10             	add    esp,0x10
c0013e93:	83 ec 08             	sub    esp,0x8
c0013e96:	50                   	push   eax
c0013e97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e9b:	e8 fc f6 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ea5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eaa:	6a 11                	push   0x11
c0013eac:	53                   	push   ebx
c0013ead:	50                   	push   eax
c0013eae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013eb2:	e8 df fa ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	fb                   	sti    
c0013ebb:	90                   	nop
c0013ebc:	83 c4 28             	add    esp,0x28
c0013ebf:	5b                   	pop    ebx
c0013ec0:	c3                   	ret    
c0013ec1:	90                   	nop

c0013ec2 <VAS::evict(unsigned long)>:
c0013ec2:	55                   	push   ebp
c0013ec3:	57                   	push   edi
c0013ec4:	56                   	push   esi
c0013ec5:	53                   	push   ebx
c0013ec6:	83 ec 24             	sub    esp,0x24
c0013ec9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013ecd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013ed1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed5:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013eda:	50                   	push   eax
c0013edb:	68 65 4d 02 c0       	push   0xc0024d65
c0013ee0:	e8 69 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ee5:	e8 28 f5 ff ff       	call   c0013412 <Virt::allocateSwapfilePage()>
c0013eea:	83 c4 10             	add    esp,0x10
c0013eed:	89 c7                	mov    edi,eax
c0013eef:	a1 cc 6e 02 c0       	mov    eax,ds:0xc0026ecc
c0013ef4:	85 c0                	test   eax,eax
c0013ef6:	7e 40                	jle    c0013f38 <VAS::evict(unsigned long)+0x76>
c0013ef8:	89 ee                	mov    esi,ebp
c0013efa:	31 db                	xor    ebx,ebx
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	57                   	push   edi
c0013f00:	e8 f7 f4 ff ff       	call   c00133fc <Virt::swapIDToSector(unsigned long)>
c0013f05:	31 d2                	xor    edx,edx
c0013f07:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f0a:	81 c6 00 02 00 00    	add    esi,0x200
c0013f10:	6a 01                	push   0x1
c0013f12:	52                   	push   edx
c0013f13:	01 d8                	add    eax,ebx
c0013f15:	83 c3 01             	add    ebx,0x1
c0013f18:	50                   	push   eax
c0013f19:	0f be 05 d8 6e 02 c0 	movsx  eax,BYTE PTR ds:0xc0026ed8
c0013f20:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013f27:	50                   	push   eax
c0013f28:	e8 67 6b ff ff       	call   c000aa94 <LogicalDisk::write(unsigned long long, int, void*)>
c0013f2d:	83 c4 20             	add    esp,0x20
c0013f30:	39 1d cc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ecc,ebx
c0013f36:	7f c4                	jg     c0013efc <VAS::evict(unsigned long)+0x3a>
c0013f38:	c1 e7 0c             	shl    edi,0xc
c0013f3b:	83 ec 08             	sub    esp,0x8
c0013f3e:	55                   	push   ebp
c0013f3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f43:	50                   	push   eax
c0013f44:	e8 53 f6 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013f49:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f4b:	89 d3                	mov    ebx,edx
c0013f4d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013f53:	09 d7                	or     edi,edx
c0013f55:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013f5b:	89 38                	mov    DWORD PTR [eax],edi
c0013f5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f60:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0013f66:	83 c2 01             	add    edx,0x1
c0013f69:	89 15 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,edx
c0013f6f:	e8 6b c0 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c0013f74:	0f 20 d8             	mov    eax,cr3
c0013f77:	0f 22 d8             	mov    cr3,eax
c0013f7a:	8b 0d 48 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f248
c0013f80:	51                   	push   ecx
c0013f81:	55                   	push   ebp
c0013f82:	53                   	push   ebx
c0013f83:	68 98 48 02 c0       	push   0xc0024898
c0013f88:	e8 c1 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f8d:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c0013f92:	83 c4 18             	add    esp,0x18
c0013f95:	50                   	push   eax
c0013f96:	68 7a 4d 02 c0       	push   0xc0024d7a
c0013f9b:	8d 50 01             	lea    edx,[eax+0x1]
c0013f9e:	89 15 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,edx
c0013fa4:	e8 a5 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fa9:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013fae:	c7 44 24 40 8c 4d 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024d8c
c0013fb6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013fba:	83 c4 2c             	add    esp,0x2c
c0013fbd:	5b                   	pop    ebx
c0013fbe:	5e                   	pop    esi
c0013fbf:	5f                   	pop    edi
c0013fc0:	5d                   	pop    ebp
c0013fc1:	e9 88 2f ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0013fc6 <VAS::canLockPage(unsigned long)>:
c0013fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fca:	50                   	push   eax
c0013fcb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fcf:	52                   	push   edx
c0013fd0:	e8 c7 f5 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013fd5:	59                   	pop    ecx
c0013fd6:	5a                   	pop    edx
c0013fd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fd9:	c1 e8 0b             	shr    eax,0xb
c0013fdc:	83 e0 01             	and    eax,0x1
c0013fdf:	c3                   	ret    

c0013fe0 <VAS::unlockPage(unsigned long)>:
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fe7:	50                   	push   eax
c0013fe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013fec:	52                   	push   edx
c0013fed:	e8 aa f5 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0013ff2:	59                   	pop    ecx
c0013ff3:	5a                   	pop    edx
c0013ff4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ff6:	f6 c6 08             	test   dh,0x8
c0013ff9:	75 09                	jne    c0014004 <VAS::unlockPage(unsigned long)+0x24>
c0013ffb:	80 ce 08             	or     dh,0x8
c0013ffe:	89 10                	mov    DWORD PTR [eax],edx
c0014000:	83 c4 0c             	add    esp,0xc
c0014003:	c3                   	ret    
c0014004:	c7 44 24 10 cc 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248cc
c001400c:	83 c4 0c             	add    esp,0xc
c001400f:	e9 3a be ff ff       	jmp    c000fe4e <KePanic(char const*)>

c0014014 <VAS::canLockPages(unsigned long, int)>:
c0014014:	55                   	push   ebp
c0014015:	57                   	push   edi
c0014016:	56                   	push   esi
c0014017:	53                   	push   ebx
c0014018:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001401c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014020:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014024:	85 ff                	test   edi,edi
c0014026:	7e 23                	jle    c001404b <VAS::canLockPages(unsigned long, int)+0x37>
c0014028:	31 f6                	xor    esi,esi
c001402a:	eb 0d                	jmp    c0014039 <VAS::canLockPages(unsigned long, int)+0x25>
c001402c:	83 c6 01             	add    esi,0x1
c001402f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014035:	39 f7                	cmp    edi,esi
c0014037:	74 0d                	je     c0014046 <VAS::canLockPages(unsigned long, int)+0x32>
c0014039:	53                   	push   ebx
c001403a:	55                   	push   ebp
c001403b:	e8 86 ff ff ff       	call   c0013fc6 <VAS::canLockPage(unsigned long)>
c0014040:	5a                   	pop    edx
c0014041:	59                   	pop    ecx
c0014042:	84 c0                	test   al,al
c0014044:	75 e6                	jne    c001402c <VAS::canLockPages(unsigned long, int)+0x18>
c0014046:	5b                   	pop    ebx
c0014047:	5e                   	pop    esi
c0014048:	5f                   	pop    edi
c0014049:	5d                   	pop    ebp
c001404a:	c3                   	ret    
c001404b:	b0 01                	mov    al,0x1
c001404d:	eb f7                	jmp    c0014046 <VAS::canLockPages(unsigned long, int)+0x32>
c001404f:	90                   	nop

c0014050 <VAS::unlockPages(unsigned long, int)>:
c0014050:	55                   	push   ebp
c0014051:	57                   	push   edi
c0014052:	56                   	push   esi
c0014053:	53                   	push   ebx
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001405b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001405f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014063:	85 ff                	test   edi,edi
c0014065:	7e 1c                	jle    c0014083 <VAS::unlockPages(unsigned long, int)+0x33>
c0014067:	31 f6                	xor    esi,esi
c0014069:	83 ec 08             	sub    esp,0x8
c001406c:	83 c6 01             	add    esi,0x1
c001406f:	53                   	push   ebx
c0014070:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014076:	55                   	push   ebp
c0014077:	e8 64 ff ff ff       	call   c0013fe0 <VAS::unlockPage(unsigned long)>
c001407c:	83 c4 10             	add    esp,0x10
c001407f:	39 f7                	cmp    edi,esi
c0014081:	75 e6                	jne    c0014069 <VAS::unlockPages(unsigned long, int)+0x19>
c0014083:	83 c4 0c             	add    esp,0xc
c0014086:	5b                   	pop    ebx
c0014087:	5e                   	pop    esi
c0014088:	5f                   	pop    edi
c0014089:	5d                   	pop    ebp
c001408a:	c3                   	ret    
c001408b:	90                   	nop

c001408c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001408c:	55                   	push   ebp
c001408d:	57                   	push   edi
c001408e:	56                   	push   esi
c001408f:	53                   	push   ebx
c0014090:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014096:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c001409d:	89 f3                	mov    ebx,esi
c001409f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00140a5:	53                   	push   ebx
c00140a6:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c00140ad:	50                   	push   eax
c00140ae:	e8 e9 f4 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c00140b3:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c00140b9:	5a                   	pop    edx
c00140ba:	59                   	pop    ecx
c00140bb:	89 c5                	mov    ebp,eax
c00140bd:	0f 87 cb 00 00 00    	ja     c001418e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00140c3:	83 ec 08             	sub    esp,0x8
c00140c6:	56                   	push   esi
c00140c7:	68 fc 48 02 c0       	push   0xc00248fc
c00140cc:	e8 7d 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140d1:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c00140d6:	5e                   	pop    esi
c00140d7:	5f                   	pop    edi
c00140d8:	50                   	push   eax
c00140d9:	68 2c 49 02 c0       	push   0xc002492c
c00140de:	e8 6b 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140e3:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00140e9:	58                   	pop    eax
c00140ea:	5a                   	pop    edx
c00140eb:	51                   	push   ecx
c00140ec:	68 50 49 02 c0       	push   0xc0024950
c00140f1:	e8 58 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	85 db                	test   ebx,ebx
c00140fb:	74 5b                	je     c0014158 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00140fd:	85 ed                	test   ebp,ebp
c00140ff:	74 21                	je     c0014122 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0014101:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014104:	f7 c6 00 02 00 00    	test   esi,0x200
c001410a:	0f 85 c5 00 00 00    	jne    c00141d5 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0014110:	89 f0                	mov    eax,esi
c0014112:	25 01 04 00 00       	and    eax,0x401
c0014117:	3d 00 04 00 00       	cmp    eax,0x400
c001411c:	0f 84 39 01 00 00    	je     c001425b <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0014122:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0014127:	83 ec 08             	sub    esp,0x8
c001412a:	50                   	push   eax
c001412b:	68 44 4b 02 c0       	push   0xc0024b44
c0014130:	e8 19 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014135:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c001413b:	5a                   	pop    edx
c001413c:	59                   	pop    ecx
c001413d:	53                   	push   ebx
c001413e:	68 68 4b 02 c0       	push   0xc0024b68
c0014143:	e8 06 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	31 c0                	xor    eax,eax
c001414d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014153:	5b                   	pop    ebx
c0014154:	5e                   	pop    esi
c0014155:	5f                   	pop    edi
c0014156:	5d                   	pop    ebp
c0014157:	c3                   	ret    
c0014158:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c001415d:	83 ec 08             	sub    esp,0x8
c0014160:	50                   	push   eax
c0014161:	68 74 49 02 c0       	push   0xc0024974
c0014166:	e8 e3 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001416b:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0014171:	58                   	pop    eax
c0014172:	5a                   	pop    edx
c0014173:	51                   	push   ecx
c0014174:	68 98 49 02 c0       	push   0xc0024998
c0014179:	e8 d0 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	31 c0                	xor    eax,eax
c0014183:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014189:	5b                   	pop    ebx
c001418a:	5e                   	pop    esi
c001418b:	5f                   	pop    edi
c001418c:	5d                   	pop    ebp
c001418d:	c3                   	ret    
c001418e:	83 ec 0c             	sub    esp,0xc
c0014191:	68 a1 4d 02 c0       	push   0xc0024da1
c0014196:	e8 b3 bc ff ff       	call   c000fe4e <KePanic(char const*)>
c001419b:	5f                   	pop    edi
c001419c:	58                   	pop    eax
c001419d:	56                   	push   esi
c001419e:	68 fc 48 02 c0       	push   0xc00248fc
c00141a3:	e8 a6 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141a8:	8b 0d 0c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa0c
c00141ae:	58                   	pop    eax
c00141af:	5a                   	pop    edx
c00141b0:	51                   	push   ecx
c00141b1:	68 2c 49 02 c0       	push   0xc002492c
c00141b6:	e8 93 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141bb:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00141c0:	5e                   	pop    esi
c00141c1:	5f                   	pop    edi
c00141c2:	50                   	push   eax
c00141c3:	68 50 49 02 c0       	push   0xc0024950
c00141c8:	e8 81 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141cd:	83 c4 10             	add    esp,0x10
c00141d0:	e9 28 ff ff ff       	jmp    c00140fd <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00141d5:	83 ec 0c             	sub    esp,0xc
c00141d8:	68 bc 49 02 c0       	push   0xc00249bc
c00141dd:	e8 6c 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141e2:	e8 61 be ff ff       	call   c0010048 <Phys::allocatePage()>
c00141e7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00141ea:	83 ca 01             	or     edx,0x1
c00141ed:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00141f0:	0f 20 da             	mov    edx,cr3
c00141f3:	0f 22 da             	mov    cr3,edx
c00141f6:	ba 00 10 00 00       	mov    edx,0x1000
c00141fb:	89 de                	mov    esi,ebx
c00141fd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014201:	89 d1                	mov    ecx,edx
c0014203:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014205:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014208:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001420e:	09 c8                	or     eax,ecx
c0014210:	83 c8 02             	or     eax,0x2
c0014213:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014216:	0f 20 d8             	mov    eax,cr3
c0014219:	0f 22 d8             	mov    cr3,eax
c001421c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014220:	89 df                	mov    edi,ebx
c0014222:	89 d1                	mov    ecx,edx
c0014224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014226:	59                   	pop    ecx
c0014227:	8b 35 0c fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa0c
c001422d:	5b                   	pop    ebx
c001422e:	56                   	push   esi
c001422f:	68 dc 49 02 c0       	push   0xc00249dc
c0014234:	e8 15 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014239:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001423e:	5f                   	pop    edi
c001423f:	5d                   	pop    ebp
c0014240:	50                   	push   eax
c0014241:	68 00 4a 02 c0       	push   0xc0024a00
c0014246:	e8 03 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	b0 01                	mov    al,0x1
c0014250:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014256:	5b                   	pop    ebx
c0014257:	5e                   	pop    esi
c0014258:	5f                   	pop    edi
c0014259:	5d                   	pop    ebp
c001425a:	c3                   	ret    
c001425b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014260:	c1 ee 0c             	shr    esi,0xc
c0014263:	83 ec 08             	sub    esp,0x8
c0014266:	50                   	push   eax
c0014267:	68 24 4a 02 c0       	push   0xc0024a24
c001426c:	e8 dd 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014271:	e8 d2 bd ff ff       	call   c0010048 <Phys::allocatePage()>
c0014276:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001427c:	89 c7                	mov    edi,eax
c001427e:	58                   	pop    eax
c001427f:	5a                   	pop    edx
c0014280:	51                   	push   ecx
c0014281:	68 48 4a 02 c0       	push   0xc0024a48
c0014286:	e8 c3 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001428b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014297:	09 fa                	or     edx,edi
c0014299:	31 ff                	xor    edi,edi
c001429b:	81 ca 01 08 00 00    	or     edx,0x801
c00142a1:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00142a4:	89 dd                	mov    ebp,ebx
c00142a6:	a1 cc 6e 02 c0       	mov    eax,ds:0xc0026ecc
c00142ab:	85 c0                	test   eax,eax
c00142ad:	7e 61                	jle    c0014310 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c00142af:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00142b4:	83 ec 08             	sub    esp,0x8
c00142b7:	50                   	push   eax
c00142b8:	68 fc 4a 02 c0       	push   0xc0024afc
c00142bd:	e8 8c 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00142c5:	e8 32 f1 ff ff       	call   c00133fc <Virt::swapIDToSector(unsigned long)>
c00142ca:	31 d2                	xor    edx,edx
c00142cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00142cf:	81 c5 00 02 00 00    	add    ebp,0x200
c00142d5:	6a 01                	push   0x1
c00142d7:	52                   	push   edx
c00142d8:	01 f8                	add    eax,edi
c00142da:	83 c7 01             	add    edi,0x1
c00142dd:	50                   	push   eax
c00142de:	0f be 05 d8 6e 02 c0 	movsx  eax,BYTE PTR ds:0xc0026ed8
c00142e5:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00142ec:	50                   	push   eax
c00142ed:	e8 36 67 ff ff       	call   c000aa28 <LogicalDisk::read(unsigned long long, int, void*)>
c00142f2:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00142f7:	83 c4 18             	add    esp,0x18
c00142fa:	50                   	push   eax
c00142fb:	68 20 4b 02 c0       	push   0xc0024b20
c0014300:	e8 49 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	39 3d cc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ecc,edi
c001430e:	7f 9f                	jg     c00142af <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0014310:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014315:	83 ec 08             	sub    esp,0x8
c0014318:	50                   	push   eax
c0014319:	68 6c 4a 02 c0       	push   0xc0024a6c
c001431e:	e8 2b 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014323:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014328:	83 c4 0c             	add    esp,0xc
c001432b:	83 e8 01             	sub    eax,0x1
c001432e:	50                   	push   eax
c001432f:	53                   	push   ebx
c0014330:	68 b3 4d 02 c0       	push   0xc0024db3
c0014335:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c001433a:	e8 0f 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001433f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014342:	e8 92 f0 ff ff       	call   c00133d9 <Virt::freeSwapfilePage(unsigned long)>
c0014347:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001434d:	58                   	pop    eax
c001434e:	5a                   	pop    edx
c001434f:	51                   	push   ecx
c0014350:	68 90 4a 02 c0       	push   0xc0024a90
c0014355:	e8 f4 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001435a:	0f 20 d8             	mov    eax,cr3
c001435d:	0f 22 d8             	mov    cr3,eax
c0014360:	c7 04 24 c8 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dc8
c0014367:	e8 e2 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001436c:	8b 3d 0c fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa0c
c0014372:	5b                   	pop    ebx
c0014373:	5e                   	pop    esi
c0014374:	57                   	push   edi
c0014375:	68 b4 4a 02 c0       	push   0xc0024ab4
c001437a:	e8 cf 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001437f:	5d                   	pop    ebp
c0014380:	58                   	pop    eax
c0014381:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014386:	50                   	push   eax
c0014387:	68 d8 4a 02 c0       	push   0xc0024ad8
c001438c:	e8 bd 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014391:	83 c4 10             	add    esp,0x10
c0014394:	b0 01                	mov    al,0x1
c0014396:	e9 b2 fd ff ff       	jmp    c001414d <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c001439b:	90                   	nop

c001439c <VAS::lockPage(unsigned long)>:
c001439c:	56                   	push   esi
c001439d:	53                   	push   ebx
c001439e:	83 ec 04             	sub    esp,0x4
c00143a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143a9:	50                   	push   eax
c00143aa:	56                   	push   esi
c00143ab:	e8 ec f1 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c00143b0:	5a                   	pop    edx
c00143b1:	59                   	pop    ecx
c00143b2:	89 c3                	mov    ebx,eax
c00143b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00143b6:	a8 01                	test   al,0x1
c00143b8:	74 10                	je     c00143ca <VAS::lockPage(unsigned long)+0x2e>
c00143ba:	f6 c4 08             	test   ah,0x8
c00143bd:	74 28                	je     c00143e7 <VAS::lockPage(unsigned long)+0x4b>
c00143bf:	80 e4 f7             	and    ah,0xf7
c00143c2:	89 03                	mov    DWORD PTR [ebx],eax
c00143c4:	83 c4 04             	add    esp,0x4
c00143c7:	5b                   	pop    ebx
c00143c8:	5e                   	pop    esi
c00143c9:	c3                   	ret    
c00143ca:	83 ec 08             	sub    esp,0x8
c00143cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143d2:	50                   	push   eax
c00143d3:	56                   	push   esi
c00143d4:	e8 b3 fc ff ff       	call   c001408c <VAS::tryLoadBackOffDisk(unsigned long)>
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	84 c0                	test   al,al
c00143de:	74 19                	je     c00143f9 <VAS::lockPage(unsigned long)+0x5d>
c00143e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e2:	f6 c4 08             	test   ah,0x8
c00143e5:	75 d8                	jne    c00143bf <VAS::lockPage(unsigned long)+0x23>
c00143e7:	c7 44 24 10 cc 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248cc
c00143ef:	83 c4 04             	add    esp,0x4
c00143f2:	5b                   	pop    ebx
c00143f3:	5e                   	pop    esi
c00143f4:	e9 55 ba ff ff       	jmp    c000fe4e <KePanic(char const*)>
c00143f9:	83 ec 0c             	sub    esp,0xc
c00143fc:	68 8c 4b 02 c0       	push   0xc0024b8c
c0014401:	e8 48 ba ff ff       	call   c000fe4e <KePanic(char const*)>
c0014406:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014408:	83 c4 10             	add    esp,0x10
c001440b:	eb ad                	jmp    c00143ba <VAS::lockPage(unsigned long)+0x1e>
c001440d:	90                   	nop

c001440e <VAS::lockPages(unsigned long, int)>:
c001440e:	55                   	push   ebp
c001440f:	57                   	push   edi
c0014410:	56                   	push   esi
c0014411:	53                   	push   ebx
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014419:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001441d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014421:	85 ff                	test   edi,edi
c0014423:	7e 1c                	jle    c0014441 <VAS::lockPages(unsigned long, int)+0x33>
c0014425:	31 f6                	xor    esi,esi
c0014427:	83 ec 08             	sub    esp,0x8
c001442a:	83 c6 01             	add    esi,0x1
c001442d:	53                   	push   ebx
c001442e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014434:	55                   	push   ebp
c0014435:	e8 62 ff ff ff       	call   c001439c <VAS::lockPage(unsigned long)>
c001443a:	83 c4 10             	add    esp,0x10
c001443d:	39 f7                	cmp    edi,esi
c001443f:	75 e6                	jne    c0014427 <VAS::lockPages(unsigned long, int)+0x19>
c0014441:	83 c4 0c             	add    esp,0xc
c0014444:	5b                   	pop    ebx
c0014445:	5e                   	pop    esi
c0014446:	5f                   	pop    edi
c0014447:	5d                   	pop    ebp
c0014448:	c3                   	ret    
c0014449:	90                   	nop

c001444a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001444a:	55                   	push   ebp
c001444b:	57                   	push   edi
c001444c:	56                   	push   esi
c001444d:	53                   	push   ebx
c001444e:	83 ec 28             	sub    esp,0x28
c0014451:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014455:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014459:	50                   	push   eax
c001445a:	e8 5e ee ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c001445f:	83 c4 0c             	add    esp,0xc
c0014462:	6a 07                	push   0x7
c0014464:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014468:	52                   	push   edx
c0014469:	89 c5                	mov    ebp,eax
c001446b:	53                   	push   ebx
c001446c:	e8 2d f6 ff ff       	call   c0013a9e <VAS::allocatePages(int, int)>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014478:	89 c7                	mov    edi,eax
c001447a:	85 c9                	test   ecx,ecx
c001447c:	74 2f                	je     c00144ad <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001447e:	31 f6                	xor    esi,esi
c0014480:	e8 c3 bb ff ff       	call   c0010048 <Phys::allocatePage()>
c0014485:	83 c6 01             	add    esi,0x1
c0014488:	6a 03                	push   0x3
c001448a:	55                   	push   ebp
c001448b:	50                   	push   eax
c001448c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014490:	53                   	push   ebx
c0014491:	e8 00 f5 ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014496:	6a 07                	push   0x7
c0014498:	57                   	push   edi
c0014499:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001449d:	50                   	push   eax
c001449e:	53                   	push   ebx
c001449f:	e8 f2 f4 ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c00144a4:	83 c4 20             	add    esp,0x20
c00144a7:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c00144ab:	75 d3                	jne    c0014480 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00144ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00144b1:	89 28                	mov    DWORD PTR [eax],ebp
c00144b3:	83 c4 1c             	add    esp,0x1c
c00144b6:	89 f8                	mov    eax,edi
c00144b8:	5b                   	pop    ebx
c00144b9:	5e                   	pop    esi
c00144ba:	5f                   	pop    edi
c00144bb:	5d                   	pop    ebp
c00144bc:	c3                   	ret    
c00144bd:	90                   	nop

c00144be <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00144be:	53                   	push   ebx
c00144bf:	83 ec 14             	sub    esp,0x14
c00144c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144c6:	68 bc 4b 02 c0       	push   0xc0024bbc
c00144cb:	e8 7e 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144d0:	c7 04 24 1c 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c1c
c00144d7:	e8 72 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144dc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00144e0:	83 c4 18             	add    esp,0x18
c00144e3:	5b                   	pop    ebx
c00144e4:	e9 d2 f0 ff ff       	jmp    c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c00144e9:	90                   	nop

c00144ea <VAS::scanForEviction()>:
c00144ea:	57                   	push   edi
c00144eb:	56                   	push   esi
c00144ec:	31 f6                	xor    esi,esi
c00144ee:	53                   	push   ebx
c00144ef:	83 ec 18             	sub    esp,0x18
c00144f2:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00144f7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144fb:	50                   	push   eax
c00144fc:	68 98 4c 02 c0       	push   0xc0024c98
c0014501:	e8 48 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014506:	c7 04 24 cf 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dcf
c001450d:	e8 3c 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014512:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001451e:	75 0e                	jne    c001452e <VAS::scanForEviction()+0x44>
c0014520:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014523:	89 da                	mov    edx,ebx
c0014525:	c1 ea 16             	shr    edx,0x16
c0014528:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001452c:	74 5b                	je     c0014589 <VAS::scanForEviction()+0x9f>
c001452e:	83 ec 08             	sub    esp,0x8
c0014531:	53                   	push   ebx
c0014532:	57                   	push   edi
c0014533:	e8 64 f0 ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	8b 10                	mov    edx,DWORD PTR [eax]
c001453d:	89 d1                	mov    ecx,edx
c001453f:	c1 e9 0c             	shr    ecx,0xc
c0014542:	74 10                	je     c0014554 <VAS::scanForEviction()+0x6a>
c0014544:	89 d1                	mov    ecx,edx
c0014546:	81 e1 01 08 00 00    	and    ecx,0x801
c001454c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014552:	74 40                	je     c0014594 <VAS::scanForEviction()+0xaa>
c0014554:	81 c3 00 10 00 00    	add    ebx,0x1000
c001455a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014560:	76 2d                	jbe    c001458f <VAS::scanForEviction()+0xa5>
c0014562:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014569:	83 c6 01             	add    esi,0x1
c001456c:	83 fe 03             	cmp    esi,0x3
c001456f:	74 32                	je     c00145a3 <VAS::scanForEviction()+0xb9>
c0014571:	31 db                	xor    ebx,ebx
c0014573:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014579:	75 b3                	jne    c001452e <VAS::scanForEviction()+0x44>
c001457b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001457e:	89 da                	mov    edx,ebx
c0014580:	c1 ea 16             	shr    edx,0x16
c0014583:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014587:	75 a5                	jne    c001452e <VAS::scanForEviction()+0x44>
c0014589:	81 c3 00 00 40 00    	add    ebx,0x400000
c001458f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014592:	eb 84                	jmp    c0014518 <VAS::scanForEviction()+0x2e>
c0014594:	f6 c2 20             	test   dl,0x20
c0014597:	74 13                	je     c00145ac <VAS::scanForEviction()+0xc2>
c0014599:	83 e2 df             	and    edx,0xffffffdf
c001459c:	89 10                	mov    DWORD PTR [eax],edx
c001459e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00145a1:	eb b1                	jmp    c0014554 <VAS::scanForEviction()+0x6a>
c00145a3:	83 c4 10             	add    esp,0x10
c00145a6:	31 c0                	xor    eax,eax
c00145a8:	5b                   	pop    ebx
c00145a9:	5e                   	pop    esi
c00145aa:	5f                   	pop    edi
c00145ab:	c3                   	ret    
c00145ac:	89 d0                	mov    eax,edx
c00145ae:	83 ec 08             	sub    esp,0x8
c00145b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145ba:	53                   	push   ebx
c00145bb:	68 eb 4d 02 c0       	push   0xc0024deb
c00145c0:	e8 89 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145c5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00145c8:	58                   	pop    eax
c00145c9:	5a                   	pop    edx
c00145ca:	51                   	push   ecx
c00145cb:	57                   	push   edi
c00145cc:	e8 f1 f8 ff ff       	call   c0013ec2 <VAS::evict(unsigned long)>
c00145d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00145d4:	5b                   	pop    ebx
c00145d5:	5e                   	pop    esi
c00145d6:	50                   	push   eax
c00145d7:	68 ff 4d 02 c0       	push   0xc0024dff
c00145dc:	e8 6d 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145e1:	58                   	pop    eax
c00145e2:	5a                   	pop    edx
c00145e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145e7:	50                   	push   eax
c00145e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145ec:	68 12 4e 02 c0       	push   0xc0024e12
c00145f1:	e8 58 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145f6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00145f9:	81 c1 00 10 00 00    	add    ecx,0x1000
c00145ff:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014602:	8b 3d 30 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa30
c0014608:	5b                   	pop    ebx
c0014609:	5e                   	pop    esi
c001460a:	57                   	push   edi
c001460b:	68 b8 4c 02 c0       	push   0xc0024cb8
c0014610:	e8 39 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001461c:	83 c4 10             	add    esp,0x10
c001461f:	5b                   	pop    ebx
c0014620:	5e                   	pop    esi
c0014621:	5f                   	pop    edi
c0014622:	c3                   	ret    

c0014623 <mapVASFirstTime>:
c0014623:	55                   	push   ebp
c0014624:	57                   	push   edi
c0014625:	56                   	push   esi
c0014626:	53                   	push   ebx
c0014627:	83 ec 0c             	sub    esp,0xc
c001462a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001462f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014632:	83 fa 01             	cmp    edx,0x1
c0014635:	0f 84 cb 00 00 00    	je     c0014706 <mapVASFirstTime+0xe3>
c001463b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001463e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014643:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014648:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001464b:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014651:	c1 e5 15             	shl    ebp,0x15
c0014654:	29 eb                	sub    ebx,ebp
c0014656:	29 ef                	sub    edi,ebp
c0014658:	e8 eb b9 ff ff       	call   c0010048 <Phys::allocatePage()>
c001465d:	83 ec 0c             	sub    esp,0xc
c0014660:	68 03 04 00 00       	push   0x403
c0014665:	6a 01                	push   0x1
c0014667:	53                   	push   ebx
c0014668:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001466e:	50                   	push   eax
c001466f:	56                   	push   esi
c0014670:	e8 1b f5 ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014675:	83 c4 20             	add    esp,0x20
c0014678:	39 fb                	cmp    ebx,edi
c001467a:	75 dc                	jne    c0014658 <mapVASFirstTime+0x35>
c001467c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014681:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014686:	29 eb                	sub    ebx,ebp
c0014688:	29 ef                	sub    edi,ebp
c001468a:	e8 b9 b9 ff ff       	call   c0010048 <Phys::allocatePage()>
c001468f:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014693:	83 fa 01             	cmp    edx,0x1
c0014696:	19 d2                	sbb    edx,edx
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	83 e2 04             	and    edx,0x4
c001469e:	81 c2 03 04 00 00    	add    edx,0x403
c00146a4:	52                   	push   edx
c00146a5:	6a 01                	push   0x1
c00146a7:	53                   	push   ebx
c00146a8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00146ae:	50                   	push   eax
c00146af:	56                   	push   esi
c00146b0:	e8 db f4 ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146b5:	83 c4 20             	add    esp,0x20
c00146b8:	39 df                	cmp    edi,ebx
c00146ba:	75 ce                	jne    c001468a <mapVASFirstTime+0x67>
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c00146c4:	6a 04                	push   0x4
c00146c6:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00146cc:	6a ff                	push   0xffffffff
c00146ce:	c1 eb 0c             	shr    ebx,0xc
c00146d1:	53                   	push   ebx
c00146d2:	68 00 80 02 c0       	push   0xc0028000
c00146d7:	56                   	push   esi
c00146d8:	e8 59 f0 ff ff       	call   c0013736 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00146dd:	83 c4 14             	add    esp,0x14
c00146e0:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00146e5:	6a 04                	push   0x4
c00146e7:	6a ff                	push   0xffffffff
c00146e9:	53                   	push   ebx
c00146ea:	68 00 80 02 c0       	push   0xc0028000
c00146ef:	50                   	push   eax
c00146f0:	e8 41 f0 ff ff       	call   c0013736 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00146f5:	0f 20 d8             	mov    eax,cr3
c00146f8:	0f 22 d8             	mov    cr3,eax
c00146fb:	83 c4 20             	add    esp,0x20
c00146fe:	83 c4 0c             	add    esp,0xc
c0014701:	5b                   	pop    ebx
c0014702:	5e                   	pop    esi
c0014703:	5f                   	pop    edi
c0014704:	5d                   	pop    ebp
c0014705:	c3                   	ret    
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	68 1f 4e 02 c0       	push   0xc0024e1f
c001470e:	e8 3b 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	83 c4 0c             	add    esp,0xc
c0014719:	5b                   	pop    ebx
c001471a:	5e                   	pop    esi
c001471b:	5f                   	pop    edi
c001471c:	5d                   	pop    ebp
c001471d:	c3                   	ret    

c001471e <SysAlarm(regs*)>:
c001471e:	53                   	push   ebx
c001471f:	83 ec 10             	sub    esp,0x10
c0014722:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014726:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014729:	68 38 4e 02 c0       	push   0xc0024e38
c001472e:	e8 1b 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014733:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014736:	83 c4 0c             	add    esp,0xc
c0014739:	31 d2                	xor    edx,edx
c001473b:	52                   	push   edx
c001473c:	50                   	push   eax
c001473d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014743:	e8 e4 09 00 00       	call   c001512c <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014748:	83 c4 18             	add    esp,0x18
c001474b:	5b                   	pop    ebx
c001474c:	c3                   	ret    

c001474d <SysEject(regs*)>:
c001474d:	83 ec 0c             	sub    esp,0xc
c0014750:	83 ca ff             	or     edx,0xffffffff
c0014753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014757:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001475a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001475f:	83 e9 41             	sub    ecx,0x41
c0014762:	83 f9 19             	cmp    ecx,0x19
c0014765:	77 18                	ja     c001477f <SysEject(regs*)+0x32>
c0014767:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001476e:	85 c9                	test   ecx,ecx
c0014770:	74 0d                	je     c001477f <SysEject(regs*)+0x32>
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	51                   	push   ecx
c0014776:	e8 43 62 ff ff       	call   c000a9be <LogicalDisk::eject()>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	99                   	cdq    
c001477f:	83 c4 0c             	add    esp,0xc
c0014782:	c3                   	ret    

c0014783 <SysExit(regs*)>:
c0014783:	83 ec 18             	sub    esp,0x18
c0014786:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001478a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001478d:	e8 aa 30 00 00       	call   c001783c <terminateTask(int)>
c0014792:	83 c8 ff             	or     eax,0xffffffff
c0014795:	83 c4 1c             	add    esp,0x1c
c0014798:	89 c2                	mov    edx,eax
c001479a:	c3                   	ret    

c001479b <SysGetCwd(regs*)>:
c001479b:	83 ec 10             	sub    esp,0x10
c001479e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147a2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147a5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00147b0:	e8 2f 36 ff ff       	call   c0007de4 <Fs::getcwd(Process*, char*, int)>
c00147b5:	83 c4 1c             	add    esp,0x1c
c00147b8:	99                   	cdq    
c00147b9:	c3                   	ret    

c00147ba <SysGetPID(regs*)>:
c00147ba:	83 ec 14             	sub    esp,0x14
c00147bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147c5:	ff 30                	push   DWORD PTR [eax]
c00147c7:	68 4d 4e 02 c0       	push   0xc0024e4d
c00147cc:	e8 7d 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00147d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00147db:	83 c4 1c             	add    esp,0x1c
c00147de:	99                   	cdq    
c00147df:	c3                   	ret    

c00147e0 <SysGetRAMData(regs*)>:
c00147e0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00147e5:	03 05 3c f1 02 c0    	add    eax,DWORD PTR ds:0xc002f13c
c00147eb:	8b 0d 40 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f140
c00147f1:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00147f7:	99                   	cdq    
c00147f8:	f7 f9                	idiv   ecx
c00147fa:	c1 e0 18             	shl    eax,0x18
c00147fd:	09 c8                	or     eax,ecx
c00147ff:	99                   	cdq    
c0014800:	c3                   	ret    

c0014801 <SysGetVGAPtr(regs*)>:
c0014801:	55                   	push   ebp
c0014802:	57                   	push   edi
c0014803:	56                   	push   esi
c0014804:	53                   	push   ebx
c0014805:	83 ec 1c             	sub    esp,0x1c
c0014808:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001480c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001480f:	83 f8 ff             	cmp    eax,0xffffffff
c0014812:	74 23                	je     c0014837 <SysGetVGAPtr(regs*)+0x36>
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	50                   	push   eax
c0014818:	e8 d7 2a 00 00       	call   c00172f4 <Thr::processFromPID(int)>
c001481d:	31 d2                	xor    edx,edx
c001481f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	b8 01 00 00 00       	mov    eax,0x1
c001482b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014830:	75 11                	jne    c0014843 <SysGetVGAPtr(regs*)+0x42>
c0014832:	e9 95 00 00 00       	jmp    c00148cc <SysGetVGAPtr(regs*)+0xcb>
c0014837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014847:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001484b:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014851:	74 0c                	je     c001485f <SysGetVGAPtr(regs*)+0x5e>
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	55                   	push   ebp
c0014857:	e8 0b db ff ff       	call   c0012367 <setActiveTerminal(VgaText*)>
c001485c:	83 c4 10             	add    esp,0x10
c001485f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014862:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014867:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001486a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001486c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001486f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014872:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014878:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001487b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001487e:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014888:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001488b:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014892:	c1 e8 07             	shr    eax,0x7
c0014895:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001489b:	50                   	push   eax
c001489c:	50                   	push   eax
c001489d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148a0:	ff b0 a8 0f 00 00    	push   DWORD PTR [eax+0xfa8]
c00148a6:	68 5c 4e 02 c0       	push   0xc0024e5c
c00148ab:	e8 9e 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00148b0:	5a                   	pop    edx
c00148b1:	59                   	pop    ecx
c00148b2:	68 65 4e 02 c0       	push   0xc0024e65
c00148b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148ba:	05 ac 0f 00 00       	add    eax,0xfac
c00148bf:	50                   	push   eax
c00148c0:	e8 8b bd fe ff       	call   c0000650 <strcpy>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	31 c0                	xor    eax,eax
c00148ca:	31 d2                	xor    edx,edx
c00148cc:	83 c4 1c             	add    esp,0x1c
c00148cf:	5b                   	pop    ebx
c00148d0:	5e                   	pop    esi
c00148d1:	5f                   	pop    edi
c00148d2:	5d                   	pop    ebp
c00148d3:	c3                   	ret    

c00148d4 <SysKill(regs*)>:
c00148d4:	53                   	push   ebx
c00148d5:	83 ec 08             	sub    esp,0x8
c00148d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148dc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00148e0:	75 16                	jne    c00148f8 <SysKill(regs*)+0x24>
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	68 6f 4e 02 c0       	push   0xc0024e6f
c00148ea:	e8 5f b5 ff ff       	call   c000fe4e <KePanic(char const*)>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	e9 89 00 00 00       	jmp    c0014980 <SysKill(regs*)+0xac>
c00148f7:	90                   	nop
c00148f8:	83 ec 0c             	sub    esp,0xc
c00148fb:	68 4c fa 02 c0       	push   0xc002fa4c
c0014900:	e8 c3 d5 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014905:	8d 76 00             	lea    esi,[esi+0x0]
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	85 c0                	test   eax,eax
c001490d:	74 19                	je     c0014928 <SysKill(regs*)+0x54>
c001490f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014912:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014915:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014917:	74 33                	je     c001494c <SysKill(regs*)+0x78>
c0014919:	52                   	push   edx
c001491a:	52                   	push   edx
c001491b:	50                   	push   eax
c001491c:	68 4c fa 02 c0       	push   0xc002fa4c
c0014921:	e8 ae da 00 00       	call   c00223d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014926:	eb e0                	jmp    c0014908 <SysKill(regs*)+0x34>
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	68 40 fa 02 c0       	push   0xc002fa40
c0014930:	e8 93 d5 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014935:	8d 76 00             	lea    esi,[esi+0x0]
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	85 c0                	test   eax,eax
c001493d:	74 41                	je     c0014980 <SysKill(regs*)+0xac>
c001493f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014942:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014945:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014947:	75 27                	jne    c0014970 <SysKill(regs*)+0x9c>
c0014949:	8d 76 00             	lea    esi,[esi+0x0]
c001494c:	51                   	push   ecx
c001494d:	51                   	push   ecx
c001494e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014951:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014956:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014959:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001495f:	e8 5f c6 ff ff       	call   c0010fc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014964:	83 c4 10             	add    esp,0x10
c0014967:	31 c0                	xor    eax,eax
c0014969:	31 d2                	xor    edx,edx
c001496b:	eb 1b                	jmp    c0014988 <SysKill(regs*)+0xb4>
c001496d:	8d 76 00             	lea    esi,[esi+0x0]
c0014970:	52                   	push   edx
c0014971:	52                   	push   edx
c0014972:	50                   	push   eax
c0014973:	68 40 fa 02 c0       	push   0xc002fa40
c0014978:	e8 57 da 00 00       	call   c00223d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001497d:	eb b9                	jmp    c0014938 <SysKill(regs*)+0x64>
c001497f:	90                   	nop
c0014980:	83 c8 ff             	or     eax,0xffffffff
c0014983:	89 c2                	mov    edx,eax
c0014985:	8d 76 00             	lea    esi,[esi+0x0]
c0014988:	83 c4 08             	add    esp,0x8
c001498b:	5b                   	pop    ebx
c001498c:	c3                   	ret    

c001498d <SysLoadDLL(regs*)>:
c001498d:	56                   	push   esi
c001498e:	31 d2                	xor    edx,edx
c0014990:	53                   	push   ebx
c0014991:	b8 01 00 00 00       	mov    eax,0x1
c0014996:	51                   	push   ecx
c0014997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001499b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001499f:	0f 84 8c 00 00 00    	je     c0014a31 <SysLoadDLL(regs*)+0xa4>
c00149a5:	83 ec 0c             	sub    esp,0xc
c00149a8:	68 14 01 00 00       	push   0x114
c00149ad:	e8 56 b1 ff ff       	call   c000fb08 <malloc>
c00149b2:	83 c4 0c             	add    esp,0xc
c00149b5:	89 c3                	mov    ebx,eax
c00149b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149bc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149c2:	53                   	push   ebx
c00149c3:	e8 9c 37 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	31 d2                	xor    edx,edx
c00149cd:	85 db                	test   ebx,ebx
c00149cf:	b8 02 00 00 00       	mov    eax,0x2
c00149d4:	74 5b                	je     c0014a31 <SysLoadDLL(regs*)+0xa4>
c00149d6:	83 ec 0c             	sub    esp,0xc
c00149d9:	53                   	push   ebx
c00149da:	e8 67 3a ff ff       	call   c0008446 <File::exists()>
c00149df:	83 c4 10             	add    esp,0x10
c00149e2:	84 c0                	test   al,al
c00149e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149e6:	75 11                	jne    c00149f9 <SysLoadDLL(regs*)+0x6c>
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	53                   	push   ebx
c00149ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149ef:	83 c4 10             	add    esp,0x10
c00149f2:	b8 03 00 00 00       	mov    eax,0x3
c00149f7:	eb 36                	jmp    c0014a2f <SysLoadDLL(regs*)+0xa2>
c00149f9:	83 ec 0c             	sub    esp,0xc
c00149fc:	53                   	push   ebx
c00149fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a00:	58                   	pop    eax
c0014a01:	5a                   	pop    edx
c0014a02:	6a 00                	push   0x0
c0014a04:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a07:	e8 9e 1a 00 00       	call   c00164aa <Thr::loadDLL(char const*, bool)>
c0014a0c:	83 c4 10             	add    esp,0x10
c0014a0f:	31 d2                	xor    edx,edx
c0014a11:	89 c1                	mov    ecx,eax
c0014a13:	b8 04 00 00 00       	mov    eax,0x4
c0014a18:	85 c9                	test   ecx,ecx
c0014a1a:	74 15                	je     c0014a31 <SysLoadDLL(regs*)+0xa4>
c0014a1c:	53                   	push   ebx
c0014a1d:	53                   	push   ebx
c0014a1e:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c0014a24:	51                   	push   ecx
c0014a25:	e8 e1 1c 00 00       	call   c001670b <Thr::executeDLL(unsigned long, void*)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	31 c0                	xor    eax,eax
c0014a2f:	31 d2                	xor    edx,edx
c0014a31:	59                   	pop    ecx
c0014a32:	5b                   	pop    ebx
c0014a33:	5e                   	pop    esi
c0014a34:	c3                   	ret    

c0014a35 <SysPause(regs*)>:
c0014a35:	83 ec 18             	sub    esp,0x18
c0014a38:	6a 08                	push   0x8
c0014a3a:	e8 c9 26 00 00       	call   c0017108 <blockTask(TaskState)>
c0014a3f:	31 c0                	xor    eax,eax
c0014a41:	31 d2                	xor    edx,edx
c0014a43:	83 c4 1c             	add    esp,0x1c
c0014a46:	c3                   	ret    

c0014a47 <SysPthreadCreate(regs*)>:
c0014a47:	83 ec 18             	sub    esp,0x18
c0014a4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a4f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a52:	e8 89 24 00 00       	call   c0016ee0 <Process::createUserThread()>
c0014a57:	31 c0                	xor    eax,eax
c0014a59:	31 d2                	xor    edx,edx
c0014a5b:	83 c4 1c             	add    esp,0x1c
c0014a5e:	c3                   	ret    

c0014a5f <SysPthreadGetTID(regs*)>:
c0014a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a67:	99                   	cdq    
c0014a68:	c3                   	ret    

c0014a69 <SysInternalPthreadGetContext(regs*)>:
c0014a69:	31 c0                	xor    eax,eax
c0014a6b:	31 d2                	xor    edx,edx
c0014a6d:	c3                   	ret    

c0014a6e <SysInternalPthreadGetStartLocation(regs*)>:
c0014a6e:	31 c0                	xor    eax,eax
c0014a70:	31 d2                	xor    edx,edx
c0014a72:	c3                   	ret    

c0014a73 <SysPthreadJoin(regs*)>:
c0014a73:	31 c0                	xor    eax,eax
c0014a75:	31 d2                	xor    edx,edx
c0014a77:	c3                   	ret    

c0014a78 <SysPthreadExit(regs*)>:
c0014a78:	83 ec 18             	sub    esp,0x18
c0014a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a7f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a82:	e8 b5 2d 00 00       	call   c001783c <terminateTask(int)>
c0014a87:	83 c8 ff             	or     eax,0xffffffff
c0014a8a:	83 c4 1c             	add    esp,0x1c
c0014a8d:	89 c2                	mov    edx,eax
c0014a8f:	c3                   	ret    

c0014a90 <SysRead(regs*)>:
c0014a90:	57                   	push   edi
c0014a91:	56                   	push   esi
c0014a92:	53                   	push   ebx
c0014a93:	83 ec 10             	sub    esp,0x10
c0014a96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a9d:	83 f8 02             	cmp    eax,0x2
c0014aa0:	77 10                	ja     c0014ab2 <SysRead(regs*)+0x22>
c0014aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aa7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aaa:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014ab0:	eb 0e                	jmp    c0014ac0 <SysRead(regs*)+0x30>
c0014ab2:	83 ec 0c             	sub    esp,0xc
c0014ab5:	50                   	push   eax
c0014ab6:	e8 96 e6 ff ff       	call   c0013151 <KeGetFileFromDescriptor(int)>
c0014abb:	83 c4 10             	add    esp,0x10
c0014abe:	89 c1                	mov    ecx,eax
c0014ac0:	83 c8 ff             	or     eax,0xffffffff
c0014ac3:	85 c9                	test   ecx,ecx
c0014ac5:	89 c2                	mov    edx,eax
c0014ac7:	74 28                	je     c0014af1 <SysRead(regs*)+0x61>
c0014ac9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ad1:	83 ec 0c             	sub    esp,0xc
c0014ad4:	31 ff                	xor    edi,edi
c0014ad6:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014ada:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014adc:	52                   	push   edx
c0014add:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ae0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ae3:	57                   	push   edi
c0014ae4:	56                   	push   esi
c0014ae5:	51                   	push   ecx
c0014ae6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014aed:	83 c4 20             	add    esp,0x20
c0014af0:	99                   	cdq    
c0014af1:	83 c4 10             	add    esp,0x10
c0014af4:	5b                   	pop    ebx
c0014af5:	5e                   	pop    esi
c0014af6:	5f                   	pop    edi
c0014af7:	c3                   	ret    

c0014af8 <SysRegisterSignal(regs*)>:
c0014af8:	83 ec 18             	sub    esp,0x18
c0014afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aff:	6a 00                	push   0x0
c0014b01:	6a 00                	push   0x0
c0014b03:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b06:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b11:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014b17:	e8 71 c4 ff ff       	call   c0010f8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014b1c:	83 c4 2c             	add    esp,0x2c
c0014b1f:	99                   	cdq    
c0014b20:	c3                   	ret    

c0014b21 <SysRegistryGetTypeFromPath(regs*)>:
c0014b21:	53                   	push   ebx
c0014b22:	81 ec 40 01 00 00    	sub    esp,0x140
c0014b28:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014b2f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014b32:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b35:	e8 81 93 ff ff       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b3a:	83 c4 10             	add    esp,0x10
c0014b3d:	85 c0                	test   eax,eax
c0014b3f:	89 c1                	mov    ecx,eax
c0014b41:	74 15                	je     c0014b58 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014b43:	50                   	push   eax
c0014b44:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014b48:	50                   	push   eax
c0014b49:	51                   	push   ecx
c0014b4a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b4d:	e8 4e 8f ff ff       	call   c000daa0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	99                   	cdq    
c0014b56:	eb 05                	jmp    c0014b5d <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014b58:	83 c8 ff             	or     eax,0xffffffff
c0014b5b:	89 c2                	mov    edx,eax
c0014b5d:	81 c4 38 01 00 00    	add    esp,0x138
c0014b63:	5b                   	pop    ebx
c0014b64:	c3                   	ret    

c0014b65 <SysRegistryReadExtent(regs*)>:
c0014b65:	83 ec 1c             	sub    esp,0x1c
c0014b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b6c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014b6f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014b72:	85 c0                	test   eax,eax
c0014b74:	79 1f                	jns    c0014b95 <SysRegistryReadExtent(regs*)+0x30>
c0014b76:	52                   	push   edx
c0014b77:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014b7c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014b80:	52                   	push   edx
c0014b81:	50                   	push   eax
c0014b82:	51                   	push   ecx
c0014b83:	e8 0a 8e ff ff       	call   c000d992 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014b88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	eb 14                	jmp    c0014ba9 <SysRegistryReadExtent(regs*)+0x44>
c0014b95:	83 ec 04             	sub    esp,0x4
c0014b98:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014b9b:	50                   	push   eax
c0014b9c:	51                   	push   ecx
c0014b9d:	e8 8e 88 ff ff       	call   c000d430 <CmGetString(Reghive_Tag*, int, char*)>
c0014ba2:	83 c4 10             	add    esp,0x10
c0014ba5:	31 c0                	xor    eax,eax
c0014ba7:	31 d2                	xor    edx,edx
c0014ba9:	83 c4 1c             	add    esp,0x1c
c0014bac:	c3                   	ret    

c0014bad <SysRegistryPathToExtentLookup(regs*)>:
c0014bad:	83 ec 14             	sub    esp,0x14
c0014bb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bb4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014bb7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bba:	e8 fc 92 ff ff       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014bbf:	83 c4 1c             	add    esp,0x1c
c0014bc2:	99                   	cdq    
c0014bc3:	c3                   	ret    

c0014bc4 <SysRegistryEnterDirectory(regs*)>:
c0014bc4:	83 ec 14             	sub    esp,0x14
c0014bc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bcb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014bce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bd1:	e8 d1 88 ff ff       	call   c000d4a7 <CmEnterDirectory(Reghive_Tag*, int)>
c0014bd6:	83 c4 1c             	add    esp,0x1c
c0014bd9:	99                   	cdq    
c0014bda:	c3                   	ret    

c0014bdb <SysRegistryGetNext(regs*)>:
c0014bdb:	83 ec 14             	sub    esp,0x14
c0014bde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014be2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014be5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014be8:	e8 f9 88 ff ff       	call   c000d4e6 <CmGetNext(Reghive_Tag*, int)>
c0014bed:	83 c4 1c             	add    esp,0x1c
c0014bf0:	99                   	cdq    
c0014bf1:	c3                   	ret    

c0014bf2 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014bf2:	57                   	push   edi
c0014bf3:	56                   	push   esi
c0014bf4:	53                   	push   ebx
c0014bf5:	81 ec 34 01 00 00    	sub    esp,0x134
c0014bfb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c02:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014c06:	57                   	push   edi
c0014c07:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c0a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c0d:	e8 8e 8e ff ff       	call   c000daa0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014c12:	89 c3                	mov    ebx,eax
c0014c14:	58                   	pop    eax
c0014c15:	5a                   	pop    edx
c0014c16:	57                   	push   edi
c0014c17:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c1a:	e8 31 ba fe ff       	call   c0000650 <strcpy>
c0014c1f:	81 c4 40 01 00 00    	add    esp,0x140
c0014c25:	89 d8                	mov    eax,ebx
c0014c27:	5b                   	pop    ebx
c0014c28:	99                   	cdq    
c0014c29:	5e                   	pop    esi
c0014c2a:	5f                   	pop    edi
c0014c2b:	c3                   	ret    

c0014c2c <SysRegistryOpen(regs*)>:
c0014c2c:	83 ec 18             	sub    esp,0x18
c0014c2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c33:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c36:	e8 85 86 ff ff       	call   c000d2c0 <CmOpen(char const*)>
c0014c3b:	83 c4 1c             	add    esp,0x1c
c0014c3e:	99                   	cdq    
c0014c3f:	c3                   	ret    

c0014c40 <SysRegistryClose(regs*)>:
c0014c40:	83 ec 18             	sub    esp,0x18
c0014c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c47:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c4a:	e8 8f 87 ff ff       	call   c000d3de <CmClose(Reghive_Tag*)>
c0014c4f:	31 c0                	xor    eax,eax
c0014c51:	31 d2                	xor    edx,edx
c0014c53:	83 c4 1c             	add    esp,0x1c
c0014c56:	c3                   	ret    

c0014c57 <SysRegistryEasyReadString(regs*)>:
c0014c57:	57                   	push   edi
c0014c58:	56                   	push   esi
c0014c59:	53                   	push   ebx
c0014c5a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c5e:	83 ec 0c             	sub    esp,0xc
c0014c61:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c64:	e8 57 86 ff ff       	call   c000d2c0 <CmOpen(char const*)>
c0014c69:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014c6c:	5a                   	pop    edx
c0014c6d:	59                   	pop    ecx
c0014c6e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c71:	89 c3                	mov    ebx,eax
c0014c73:	50                   	push   eax
c0014c74:	e8 42 92 ff ff       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	89 c1                	mov    ecx,eax
c0014c7e:	b8 01 00 00 00       	mov    eax,0x1
c0014c83:	85 c9                	test   ecx,ecx
c0014c85:	7e 16                	jle    c0014c9d <SysRegistryEasyReadString(regs*)+0x46>
c0014c87:	50                   	push   eax
c0014c88:	57                   	push   edi
c0014c89:	51                   	push   ecx
c0014c8a:	53                   	push   ebx
c0014c8b:	e8 a0 87 ff ff       	call   c000d430 <CmGetString(Reghive_Tag*, int, char*)>
c0014c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c93:	e8 46 87 ff ff       	call   c000d3de <CmClose(Reghive_Tag*)>
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	31 c0                	xor    eax,eax
c0014c9d:	5b                   	pop    ebx
c0014c9e:	31 d2                	xor    edx,edx
c0014ca0:	5e                   	pop    esi
c0014ca1:	5f                   	pop    edi
c0014ca2:	c3                   	ret    

c0014ca3 <SysRegistryEasyReadInteger(regs*)>:
c0014ca3:	56                   	push   esi
c0014ca4:	53                   	push   ebx
c0014ca5:	83 ec 10             	sub    esp,0x10
c0014ca8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014cac:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014caf:	e8 0c 86 ff ff       	call   c000d2c0 <CmOpen(char const*)>
c0014cb4:	5a                   	pop    edx
c0014cb5:	59                   	pop    ecx
c0014cb6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014cb9:	89 c3                	mov    ebx,eax
c0014cbb:	50                   	push   eax
c0014cbc:	e8 fa 91 ff ff       	call   c000debb <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	89 c1                	mov    ecx,eax
c0014cc6:	b8 01 00 00 00       	mov    eax,0x1
c0014ccb:	85 c9                	test   ecx,ecx
c0014ccd:	7e 18                	jle    c0014ce7 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ccf:	50                   	push   eax
c0014cd0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014cd3:	51                   	push   ecx
c0014cd4:	53                   	push   ebx
c0014cd5:	e8 b8 8c ff ff       	call   c000d992 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014cda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cdd:	e8 fc 86 ff ff       	call   c000d3de <CmClose(Reghive_Tag*)>
c0014ce2:	83 c4 10             	add    esp,0x10
c0014ce5:	31 c0                	xor    eax,eax
c0014ce7:	59                   	pop    ecx
c0014ce8:	31 d2                	xor    edx,edx
c0014cea:	5b                   	pop    ebx
c0014ceb:	5e                   	pop    esi
c0014cec:	c3                   	ret    

c0014ced <SysSbrk(regs*)>:
c0014ced:	56                   	push   esi
c0014cee:	53                   	push   ebx
c0014cef:	50                   	push   eax
c0014cf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cf9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014cfc:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014cff:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014d05:	85 db                	test   ebx,ebx
c0014d07:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014d0a:	74 02                	je     c0014d0e <SysSbrk(regs*)+0x21>
c0014d0c:	79 06                	jns    c0014d14 <SysSbrk(regs*)+0x27>
c0014d0e:	89 f0                	mov    eax,esi
c0014d10:	31 d2                	xor    edx,edx
c0014d12:	eb 2a                	jmp    c0014d3e <SysSbrk(regs*)+0x51>
c0014d14:	83 c8 ff             	or     eax,0xffffffff
c0014d17:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014d1d:	89 c2                	mov    edx,eax
c0014d1f:	77 1d                	ja     c0014d3e <SysSbrk(regs*)+0x51>
c0014d21:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014d27:	50                   	push   eax
c0014d28:	68 07 0c 00 00       	push   0xc07
c0014d2d:	c1 ea 0c             	shr    edx,0xc
c0014d30:	52                   	push   edx
c0014d31:	51                   	push   ecx
c0014d32:	e8 67 ed ff ff       	call   c0013a9e <VAS::allocatePages(int, int)>
c0014d37:	89 f0                	mov    eax,esi
c0014d39:	31 d2                	xor    edx,edx
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	59                   	pop    ecx
c0014d3f:	5b                   	pop    ebx
c0014d40:	5e                   	pop    esi
c0014d41:	c3                   	ret    

c0014d42 <SysSetCwd(regs*)>:
c0014d42:	83 ec 14             	sub    esp,0x14
c0014d45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d49:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d51:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d54:	e8 8c 37 ff ff       	call   c00084e5 <Fs::setcwd(Process*, char*)>
c0014d59:	83 c4 1c             	add    esp,0x1c
c0014d5c:	99                   	cdq    
c0014d5d:	c3                   	ret    

c0014d5e <SysSetTime(regs*)>:
c0014d5e:	55                   	push   ebp
c0014d5f:	31 d2                	xor    edx,edx
c0014d61:	57                   	push   edi
c0014d62:	56                   	push   esi
c0014d63:	53                   	push   ebx
c0014d64:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014d69:	83 ec 30             	sub    esp,0x30
c0014d6c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014d70:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014d73:	89 f0                	mov    eax,esi
c0014d75:	f7 f3                	div    ebx
c0014d77:	89 d7                	mov    edi,edx
c0014d79:	31 d2                	xor    edx,edx
c0014d7b:	f7 f3                	div    ebx
c0014d7d:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014d82:	89 f0                	mov    eax,esi
c0014d84:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014d88:	31 d2                	xor    edx,edx
c0014d8a:	f7 f3                	div    ebx
c0014d8c:	bb 18 00 00 00       	mov    ebx,0x18
c0014d91:	31 d2                	xor    edx,edx
c0014d93:	f7 f3                	div    ebx
c0014d95:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014d98:	bb 0c 00 00 00       	mov    ebx,0xc
c0014d9d:	89 c6                	mov    esi,eax
c0014d9f:	c1 e8 05             	shr    eax,0x5
c0014da2:	83 e6 1f             	and    esi,0x1f
c0014da5:	46                   	inc    esi
c0014da6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014daa:	31 d2                	xor    edx,edx
c0014dac:	f7 f3                	div    ebx
c0014dae:	31 db                	xor    ebx,ebx
c0014db0:	57                   	push   edi
c0014db1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db9:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014dbd:	55                   	push   ebp
c0014dbe:	52                   	push   edx
c0014dbf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014dc3:	56                   	push   esi
c0014dc4:	68 90 4e 02 c0       	push   0xc0024e90
c0014dc9:	e8 80 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014dce:	83 c4 1c             	add    esp,0x1c
c0014dd1:	57                   	push   edi
c0014dd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dda:	55                   	push   ebp
c0014ddb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ddf:	52                   	push   edx
c0014de0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014de4:	56                   	push   esi
c0014de5:	68 b2 4e 02 c0       	push   0xc0024eb2
c0014dea:	e8 5f 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014def:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0014df4:	31 c9                	xor    ecx,ecx
c0014df6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014dfa:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014dfe:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014e02:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014e08:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014e0c:	89 f0                	mov    eax,esi
c0014e0e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014e12:	88 c1                	mov    cl,al
c0014e14:	89 e8                	mov    eax,ebp
c0014e16:	88 d5                	mov    ch,dl
c0014e18:	83 c4 1c             	add    esp,0x1c
c0014e1b:	c1 e0 10             	shl    eax,0x10
c0014e1e:	0f b7 d1             	movzx  edx,cx
c0014e21:	09 c2                	or     edx,eax
c0014e23:	89 f8                	mov    eax,edi
c0014e25:	c1 e0 10             	shl    eax,0x10
c0014e28:	89 d1                	mov    ecx,edx
c0014e2a:	89 da                	mov    edx,ebx
c0014e2c:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014e32:	09 c2                	or     edx,eax
c0014e34:	52                   	push   edx
c0014e35:	51                   	push   ecx
c0014e36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e3a:	e8 ef 46 ff ff       	call   c000952e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014e3f:	83 c4 3c             	add    esp,0x3c
c0014e42:	31 d2                	xor    edx,edx
c0014e44:	5b                   	pop    ebx
c0014e45:	5e                   	pop    esi
c0014e46:	83 f0 01             	xor    eax,0x1
c0014e49:	5f                   	pop    edi
c0014e4a:	0f b6 c0             	movzx  eax,al
c0014e4d:	5d                   	pop    ebp
c0014e4e:	c3                   	ret    

c0014e4f <SysSymlink(regs*)>:
c0014e4f:	56                   	push   esi
c0014e50:	83 c8 ff             	or     eax,0xffffffff
c0014e53:	53                   	push   ebx
c0014e54:	89 c2                	mov    edx,eax
c0014e56:	81 ec 34 02 00 00    	sub    esp,0x234
c0014e5c:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014e63:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014e67:	74 50                	je     c0014eb9 <SysSymlink(regs*)+0x6a>
c0014e69:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014e6c:	85 c9                	test   ecx,ecx
c0014e6e:	74 49                	je     c0014eb9 <SysSymlink(regs*)+0x6a>
c0014e70:	6a 01                	push   0x1
c0014e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e7a:	05 0c 01 00 00       	add    eax,0x10c
c0014e7f:	50                   	push   eax
c0014e80:	51                   	push   ecx
c0014e81:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014e85:	56                   	push   esi
c0014e86:	e8 ad 2f ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e8b:	6a 01                	push   0x1
c0014e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e95:	05 0c 01 00 00       	add    eax,0x10c
c0014e9a:	50                   	push   eax
c0014e9b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e9e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014ea5:	53                   	push   ebx
c0014ea6:	e8 8d 2f ff ff       	call   c0007e38 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014eab:	83 c4 18             	add    esp,0x18
c0014eae:	56                   	push   esi
c0014eaf:	53                   	push   ebx
c0014eb0:	e8 b1 2b ff ff       	call   c0007a66 <KeCreateSymlink(char const*, char const*)>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	99                   	cdq    
c0014eb9:	81 c4 34 02 00 00    	add    esp,0x234
c0014ebf:	5b                   	pop    ebx
c0014ec0:	5e                   	pop    esi
c0014ec1:	c3                   	ret    

c0014ec2 <SysTimezone(regs*)>:
c0014ec2:	83 ec 0c             	sub    esp,0xc
c0014ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ec9:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ecd:	75 17                	jne    c0014ee6 <SysTimezone(regs*)+0x24>
c0014ecf:	83 ec 0c             	sub    esp,0xc
c0014ed2:	68 d4 4e 02 c0       	push   0xc0024ed4
c0014ed7:	e8 72 20 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014edc:	83 c8 ff             	or     eax,0xffffffff
c0014edf:	83 c4 10             	add    esp,0x10
c0014ee2:	89 c2                	mov    edx,eax
c0014ee4:	eb 16                	jmp    c0014efc <SysTimezone(regs*)+0x3a>
c0014ee6:	83 ec 0c             	sub    esp,0xc
c0014ee9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014eec:	e8 f4 40 ff ff       	call   c0008fe5 <KeSetTimezone(int)>
c0014ef1:	31 d2                	xor    edx,edx
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	83 f0 01             	xor    eax,0x1
c0014ef9:	0f b6 c0             	movzx  eax,al
c0014efc:	83 c4 0c             	add    esp,0xc
c0014eff:	c3                   	ret    

c0014f00 <SysTruncate(regs*)>:
c0014f00:	55                   	push   ebp
c0014f01:	57                   	push   edi
c0014f02:	31 ff                	xor    edi,edi
c0014f04:	56                   	push   esi
c0014f05:	53                   	push   ebx
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f0d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014f10:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014f14:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014f17:	89 ce                	mov    esi,ecx
c0014f19:	0f 84 9a 00 00 00    	je     c0014fb9 <SysTruncate(regs*)+0xb9>
c0014f1f:	83 ec 0c             	sub    esp,0xc
c0014f22:	68 14 01 00 00       	push   0x114
c0014f27:	e8 dc ab ff ff       	call   c000fb08 <malloc>
c0014f2c:	83 c4 0c             	add    esp,0xc
c0014f2f:	89 c3                	mov    ebx,eax
c0014f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014f39:	55                   	push   ebp
c0014f3a:	53                   	push   ebx
c0014f3b:	e8 24 32 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0014f40:	83 c4 10             	add    esp,0x10
c0014f43:	31 d2                	xor    edx,edx
c0014f45:	85 db                	test   ebx,ebx
c0014f47:	b8 03 00 00 00       	mov    eax,0x3
c0014f4c:	0f 84 a2 00 00 00    	je     c0014ff4 <SysTruncate(regs*)+0xf4>
c0014f52:	51                   	push   ecx
c0014f53:	51                   	push   ecx
c0014f54:	6a 02                	push   0x2
c0014f56:	53                   	push   ebx
c0014f57:	e8 26 32 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	85 c0                	test   eax,eax
c0014f61:	74 13                	je     c0014f76 <SysTruncate(regs*)+0x76>
c0014f63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f65:	83 ec 0c             	sub    esp,0xc
c0014f68:	53                   	push   ebx
c0014f69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f6c:	83 c4 10             	add    esp,0x10
c0014f6f:	b8 04 00 00 00       	mov    eax,0x4
c0014f74:	eb 7c                	jmp    c0014ff2 <SysTruncate(regs*)+0xf2>
c0014f76:	52                   	push   edx
c0014f77:	57                   	push   edi
c0014f78:	56                   	push   esi
c0014f79:	53                   	push   ebx
c0014f7a:	e8 17 33 ff ff       	call   c0008296 <File::truncate(unsigned long long)>
c0014f7f:	83 c4 10             	add    esp,0x10
c0014f82:	85 c0                	test   eax,eax
c0014f84:	74 1b                	je     c0014fa1 <SysTruncate(regs*)+0xa1>
c0014f86:	83 ec 0c             	sub    esp,0xc
c0014f89:	53                   	push   ebx
c0014f8a:	e8 51 32 ff ff       	call   c00081e0 <File::close()>
c0014f8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f97:	83 c4 10             	add    esp,0x10
c0014f9a:	b8 05 00 00 00       	mov    eax,0x5
c0014f9f:	eb 51                	jmp    c0014ff2 <SysTruncate(regs*)+0xf2>
c0014fa1:	83 ec 0c             	sub    esp,0xc
c0014fa4:	53                   	push   ebx
c0014fa5:	e8 36 32 ff ff       	call   c00081e0 <File::close()>
c0014faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	31 c0                	xor    eax,eax
c0014fb7:	eb 39                	jmp    c0014ff2 <SysTruncate(regs*)+0xf2>
c0014fb9:	31 d2                	xor    edx,edx
c0014fbb:	83 fd 02             	cmp    ebp,0x2
c0014fbe:	b8 01 00 00 00       	mov    eax,0x1
c0014fc3:	7e 2f                	jle    c0014ff4 <SysTruncate(regs*)+0xf4>
c0014fc5:	83 ec 0c             	sub    esp,0xc
c0014fc8:	51                   	push   ecx
c0014fc9:	e8 83 e1 ff ff       	call   c0013151 <KeGetFileFromDescriptor(int)>
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	31 d2                	xor    edx,edx
c0014fd3:	89 c1                	mov    ecx,eax
c0014fd5:	b8 02 00 00 00       	mov    eax,0x2
c0014fda:	85 c9                	test   ecx,ecx
c0014fdc:	74 16                	je     c0014ff4 <SysTruncate(regs*)+0xf4>
c0014fde:	50                   	push   eax
c0014fdf:	57                   	push   edi
c0014fe0:	56                   	push   esi
c0014fe1:	51                   	push   ecx
c0014fe2:	e8 af 32 ff ff       	call   c0008296 <File::truncate(unsigned long long)>
c0014fe7:	83 c4 10             	add    esp,0x10
c0014fea:	85 c0                	test   eax,eax
c0014fec:	0f 95 c0             	setne  al
c0014fef:	0f b6 c0             	movzx  eax,al
c0014ff2:	31 d2                	xor    edx,edx
c0014ff4:	83 c4 0c             	add    esp,0xc
c0014ff7:	5b                   	pop    ebx
c0014ff8:	5e                   	pop    esi
c0014ff9:	5f                   	pop    edi
c0014ffa:	5d                   	pop    ebp
c0014ffb:	c3                   	ret    

c0014ffc <SysWrite(regs*)>:
c0014ffc:	57                   	push   edi
c0014ffd:	56                   	push   esi
c0014ffe:	53                   	push   ebx
c0014fff:	83 ec 10             	sub    esp,0x10
c0015002:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015006:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015009:	83 f8 02             	cmp    eax,0x2
c001500c:	77 10                	ja     c001501e <SysWrite(regs*)+0x22>
c001500e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015013:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015016:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001501c:	eb 0e                	jmp    c001502c <SysWrite(regs*)+0x30>
c001501e:	83 ec 0c             	sub    esp,0xc
c0015021:	50                   	push   eax
c0015022:	e8 2a e1 ff ff       	call   c0013151 <KeGetFileFromDescriptor(int)>
c0015027:	83 c4 10             	add    esp,0x10
c001502a:	89 c1                	mov    ecx,eax
c001502c:	83 c8 ff             	or     eax,0xffffffff
c001502f:	85 c9                	test   ecx,ecx
c0015031:	89 c2                	mov    edx,eax
c0015033:	74 28                	je     c001505d <SysWrite(regs*)+0x61>
c0015035:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001503d:	83 ec 0c             	sub    esp,0xc
c0015040:	31 ff                	xor    edi,edi
c0015042:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015046:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015048:	52                   	push   edx
c0015049:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001504c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001504f:	57                   	push   edi
c0015050:	56                   	push   esi
c0015051:	51                   	push   ecx
c0015052:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015055:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015059:	83 c4 20             	add    esp,0x20
c001505c:	99                   	cdq    
c001505d:	83 c4 10             	add    esp,0x10
c0015060:	5b                   	pop    ebx
c0015061:	5e                   	pop    esi
c0015062:	5f                   	pop    edi
c0015063:	c3                   	ret    

c0015064 <SysWsbe(regs*)>:
c0015064:	55                   	push   ebp
c0015065:	57                   	push   edi
c0015066:	56                   	push   esi
c0015067:	53                   	push   ebx
c0015068:	83 ec 3c             	sub    esp,0x3c
c001506b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001506f:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015076:	75 2d                	jne    c00150a5 <SysWsbe(regs*)+0x41>
c0015078:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001507f:	75 24                	jne    c00150a5 <SysWsbe(regs*)+0x41>
c0015081:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015088:	75 1b                	jne    c00150a5 <SysWsbe(regs*)+0x41>
c001508a:	6a 01                	push   0x1
c001508c:	6a 00                	push   0x0
c001508e:	68 f9 9e 00 c0       	push   0xc0009ef9
c0015093:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0015099:	e8 02 1d 00 00       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	31 c0                	xor    eax,eax
c00150a3:	eb 52                	jmp    c00150f7 <SysWsbe(regs*)+0x93>
c00150a5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00150a9:	be e9 4e 02 c0       	mov    esi,0xc0024ee9
c00150ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00150b3:	fc                   	cld    
c00150b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00150b6:	83 ec 0c             	sub    esp,0xc
c00150b9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00150bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150c5:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c00150cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00150cd:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00150d0:	57                   	push   edi
c00150d1:	e8 aa b4 fe ff       	call   c0000580 <strlen>
c00150d6:	5a                   	pop    edx
c00150d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00150db:	52                   	push   edx
c00150dc:	31 d2                	xor    edx,edx
c00150de:	57                   	push   edi
c00150df:	52                   	push   edx
c00150e0:	50                   	push   eax
c00150e1:	56                   	push   esi
c00150e2:	ff d5                	call   ebp
c00150e4:	83 c4 14             	add    esp,0x14
c00150e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00150ea:	e8 4d 27 00 00       	call   c001783c <terminateTask(int)>
c00150ef:	83 c4 10             	add    esp,0x10
c00150f2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00150f7:	83 c4 3c             	add    esp,0x3c
c00150fa:	31 d2                	xor    edx,edx
c00150fc:	5b                   	pop    ebx
c00150fd:	5e                   	pop    esi
c00150fe:	5f                   	pop    edi
c00150ff:	5d                   	pop    ebp
c0015100:	c3                   	ret    

c0015101 <SysYield(regs*)>:
c0015101:	83 ec 0c             	sub    esp,0xc
c0015104:	fa                   	cli    
c0015105:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001510b:	e8 38 1f 00 00       	call   c0017048 <schedule()>
c0015110:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0015117:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001511e:	75 01                	jne    c0015121 <SysYield(regs*)+0x20>
c0015120:	fb                   	sti    
c0015121:	31 c0                	xor    eax,eax
c0015123:	31 d2                	xor    edx,edx
c0015125:	83 c4 0c             	add    esp,0xc
c0015128:	c3                   	ret    
c0015129:	66 90                	xchg   ax,ax
c001512b:	90                   	nop

c001512c <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c001512c:	55                   	push   ebp
c001512d:	57                   	push   edi
c001512e:	56                   	push   esi
c001512f:	53                   	push   ebx
c0015130:	83 ec 2c             	sub    esp,0x2c
c0015133:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015137:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001513b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001513f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015143:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015147:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c001514a:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001514e:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015152:	c1 e0 08             	shl    eax,0x8
c0015155:	09 c6                	or     esi,eax
c0015157:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001515b:	c1 e0 10             	shl    eax,0x10
c001515e:	09 c6                	or     esi,eax
c0015160:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015164:	83 e0 7f             	and    eax,0x7f
c0015167:	c1 e0 18             	shl    eax,0x18
c001516a:	09 f0                	or     eax,esi
c001516c:	89 c5                	mov    ebp,eax
c001516e:	89 f8                	mov    eax,edi
c0015170:	80 f4 00             	xor    ah,0x0
c0015173:	89 c1                	mov    ecx,eax
c0015175:	89 e8                	mov    eax,ebp
c0015177:	80 f4 00             	xor    ah,0x0
c001517a:	89 c3                	mov    ebx,eax
c001517c:	89 d8                	mov    eax,ebx
c001517e:	09 c8                	or     eax,ecx
c0015180:	74 42                	je     c00151c4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015182:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015186:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015189:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001518d:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015191:	c1 e0 08             	shl    eax,0x8
c0015194:	09 c6                	or     esi,eax
c0015196:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001519a:	c1 e0 10             	shl    eax,0x10
c001519d:	09 c6                	or     esi,eax
c001519f:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00151a3:	83 e0 7f             	and    eax,0x7f
c00151a6:	c1 e0 18             	shl    eax,0x18
c00151a9:	09 f0                	or     eax,esi
c00151ab:	89 c3                	mov    ebx,eax
c00151ad:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00151b2:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00151b8:	29 c1                	sub    ecx,eax
c00151ba:	19 d3                	sbb    ebx,edx
c00151bc:	89 c8                	mov    eax,ecx
c00151be:	89 da                	mov    edx,ebx
c00151c0:	eb 0e                	jmp    c00151d0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c00151c2:	66 90                	xchg   ax,ax
c00151c4:	b8 00 00 00 00       	mov    eax,0x0
c00151c9:	ba 00 00 00 00       	mov    edx,0x0
c00151ce:	66 90                	xchg   ax,ax
c00151d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00151d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151dc:	80 f4 00             	xor    ah,0x0
c00151df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151e7:	80 f4 00             	xor    ah,0x0
c00151ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151ee:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00151f2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00151f6:	89 e8                	mov    eax,ebp
c00151f8:	09 f8                	or     eax,edi
c00151fa:	74 30                	je     c001522c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00151fc:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c0015202:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c0015208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001520c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015210:	01 c8                	add    eax,ecx
c0015212:	11 da                	adc    edx,ebx
c0015214:	89 c7                	mov    edi,eax
c0015216:	83 e7 ff             	and    edi,0xffffffff
c0015219:	89 3c 24             	mov    DWORD PTR [esp],edi
c001521c:	89 d0                	mov    eax,edx
c001521e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015227:	eb 13                	jmp    c001523c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015229:	8d 76 00             	lea    esi,[esi+0x0]
c001522c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015233:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001523b:	90                   	nop
c001523c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015240:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015243:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015247:	89 cf                	mov    edi,ecx
c0015249:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c001524c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001524f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015253:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0015258:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001525b:	83 e2 00             	and    edx,0x0
c001525e:	88 d1                	mov    cl,dl
c0015260:	88 da                	mov    dl,bl
c0015262:	09 ca                	or     edx,ecx
c0015264:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015267:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001526b:	c1 ea 08             	shr    edx,0x8
c001526e:	0f b6 da             	movzx  ebx,dl
c0015271:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015274:	83 e2 00             	and    edx,0x0
c0015277:	88 d1                	mov    cl,dl
c0015279:	88 da                	mov    dl,bl
c001527b:	09 ca                	or     edx,ecx
c001527d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015280:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015284:	c1 ea 10             	shr    edx,0x10
c0015287:	0f b6 da             	movzx  ebx,dl
c001528a:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c001528d:	83 e2 00             	and    edx,0x0
c0015290:	88 d1                	mov    cl,dl
c0015292:	88 da                	mov    dl,bl
c0015294:	09 ca                	or     edx,ecx
c0015296:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015299:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001529d:	c1 ea 18             	shr    edx,0x18
c00152a0:	83 e2 7f             	and    edx,0x7f
c00152a3:	89 d3                	mov    ebx,edx
c00152a5:	83 e3 7f             	and    ebx,0x7f
c00152a8:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c00152ab:	83 e2 80             	and    edx,0xffffff80
c00152ae:	88 d1                	mov    cl,dl
c00152b0:	88 da                	mov    dl,bl
c00152b2:	09 ca                	or     edx,ecx
c00152b4:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c00152b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152bf:	83 c4 2c             	add    esp,0x2c
c00152c2:	5b                   	pop    ebx
c00152c3:	5e                   	pop    esi
c00152c4:	5f                   	pop    edi
c00152c5:	5d                   	pop    ebp
c00152c6:	c3                   	ret    
c00152c7:	90                   	nop

c00152c8 <KeCheckAlarm(ThreadControlBlock*)>:
c00152c8:	55                   	push   ebp
c00152c9:	57                   	push   edi
c00152ca:	56                   	push   esi
c00152cb:	53                   	push   ebx
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00152d6:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c00152da:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c00152de:	c1 e5 08             	shl    ebp,0x8
c00152e1:	09 fd                	or     ebp,edi
c00152e3:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c00152e7:	c1 e7 10             	shl    edi,0x10
c00152ea:	09 ef                	or     edi,ebp
c00152ec:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00152f0:	83 e0 7f             	and    eax,0x7f
c00152f3:	c1 e0 18             	shl    eax,0x18
c00152f6:	09 f8                	or     eax,edi
c00152f8:	89 c1                	mov    ecx,eax
c00152fa:	89 d0                	mov    eax,edx
c00152fc:	80 f4 00             	xor    ah,0x0
c00152ff:	89 c3                	mov    ebx,eax
c0015301:	89 c8                	mov    eax,ecx
c0015303:	80 f4 00             	xor    ah,0x0
c0015306:	89 c6                	mov    esi,eax
c0015308:	89 f0                	mov    eax,esi
c001530a:	09 d8                	or     eax,ebx
c001530c:	0f 84 9e 00 00 00    	je     c00153b0 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015316:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015319:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c001531d:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0015321:	c1 e6 08             	shl    esi,0x8
c0015324:	09 de                	or     esi,ebx
c0015326:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c001532a:	c1 e3 10             	shl    ebx,0x10
c001532d:	09 f3                	or     ebx,esi
c001532f:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015333:	83 e0 7f             	and    eax,0x7f
c0015336:	c1 e0 18             	shl    eax,0x18
c0015339:	09 d8                	or     eax,ebx
c001533b:	89 c1                	mov    ecx,eax
c001533d:	89 cb                	mov    ebx,ecx
c001533f:	89 d1                	mov    ecx,edx
c0015341:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0015346:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001534c:	39 c8                	cmp    eax,ecx
c001534e:	89 d0                	mov    eax,edx
c0015350:	19 d8                	sbb    eax,ebx
c0015352:	72 5c                	jb     c00153b0 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015358:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001535f:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015362:	83 e2 00             	and    edx,0x0
c0015365:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015368:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001536b:	83 e2 00             	and    edx,0x0
c001536e:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015371:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015374:	83 e2 00             	and    edx,0x0
c0015377:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001537a:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001537d:	83 e2 80             	and    edx,0xffffff80
c0015380:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015383:	83 ec 0c             	sub    esp,0xc
c0015386:	68 15 4f 02 c0       	push   0xc0024f15
c001538b:	e8 be 1b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015397:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001539a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c00153a0:	83 ec 08             	sub    esp,0x8
c00153a3:	6a 0e                	push   0xe
c00153a5:	50                   	push   eax
c00153a6:	e8 18 bc ff ff       	call   c0010fc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	66 90                	xchg   ax,ax
c00153b0:	90                   	nop
c00153b1:	83 c4 0c             	add    esp,0xc
c00153b4:	5b                   	pop    ebx
c00153b5:	5e                   	pop    esi
c00153b6:	5f                   	pop    edi
c00153b7:	5d                   	pop    ebp
c00153b8:	c3                   	ret    

c00153b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00153b9:	55                   	push   ebp
c00153ba:	57                   	push   edi
c00153bb:	56                   	push   esi
c00153bc:	53                   	push   ebx
c00153bd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00153c3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00153ce:	74 3b                	je     c001540b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00153d0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00153d8:	74 31                	je     c001540b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00153da:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00153e2:	75 27                	jne    c001540b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00153e4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00153eb:	05 00 10 00 00       	add    eax,0x1000
c00153f0:	89 c2                	mov    edx,eax
c00153f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153f7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00153fe:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015404:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001540b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015412:	83 ec 0c             	sub    esp,0xc
c0015415:	6a 01                	push   0x1
c0015417:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001541d:	e8 9b de ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001542b:	89 c3                	mov    ebx,eax
c001542d:	0f 86 27 01 00 00    	jbe    c001555a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0015433:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001543b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015442:	c1 ee 0c             	shr    esi,0xc
c0015445:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015449:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015450:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015457:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001545b:	29 ef                	sub    edi,ebp
c001545d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015461:	0f 83 fa 00 00 00    	jae    c0015561 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015467:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001546d:	b8 00 10 00 00       	mov    eax,0x1000
c0015472:	0f 47 f8             	cmova  edi,eax
c0015475:	83 ec 0c             	sub    esp,0xc
c0015478:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001547f:	31 d2                	xor    edx,edx
c0015481:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015483:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015487:	50                   	push   eax
c0015488:	8d 74 24 30          	lea    esi,[esp+0x30]
c001548c:	56                   	push   esi
c001548d:	52                   	push   edx
c001548e:	57                   	push   edi
c001548f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015496:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015499:	83 c4 20             	add    esp,0x20
c001549c:	85 c0                	test   eax,eax
c001549e:	75 06                	jne    c00154a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00154a0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00154a4:	74 13                	je     c00154b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	53                   	push   ebx
c00154aa:	e8 0c e1 ff ff       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	31 c0                	xor    eax,eax
c00154b4:	e9 80 01 00 00       	jmp    c0015639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c00154b9:	fa                   	cli    
c00154ba:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00154c0:	e8 83 ab ff ff       	call   c0010048 <Phys::allocatePage()>
c00154c5:	6a 07                	push   0x7
c00154c7:	53                   	push   ebx
c00154c8:	50                   	push   eax
c00154c9:	89 c7                	mov    edi,eax
c00154cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154d3:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154d9:	e8 b8 e4 ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c00154de:	83 c4 0c             	add    esp,0xc
c00154e1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00154e8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154ee:	6a 00                	push   0x0
c00154f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154f8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154fe:	e8 ff e2 ff ff       	call   c0013802 <VAS::mapOtherVASIn(bool, VAS*)>
c0015503:	58                   	pop    eax
c0015504:	5a                   	pop    edx
c0015505:	68 07 0c 00 00       	push   0xc07
c001550a:	55                   	push   ebp
c001550b:	57                   	push   edi
c001550c:	89 df                	mov    edi,ebx
c001550e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015515:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001551b:	6a 00                	push   0x0
c001551d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015522:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015525:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001552b:	e8 ba e6 ff ff       	call   c0013bea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015530:	b9 00 10 00 00       	mov    ecx,0x1000
c0015535:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015537:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001553e:	83 c4 20             	add    esp,0x20
c0015541:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0015548:	75 01                	jne    c001554b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c001554a:	fb                   	sti    
c001554b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001554f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015555:	e9 ef fe ff ff       	jmp    c0015449 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001555a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015561:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015568:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001556e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015574:	0f 86 b1 00 00 00    	jbe    c001562b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c001557a:	fa                   	cli    
c001557b:	51                   	push   ecx
c001557c:	31 ff                	xor    edi,edi
c001557e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015585:	c1 ee 0c             	shr    esi,0xc
c0015588:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001558e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015594:	6a 00                	push   0x0
c0015596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001559e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155a4:	e8 59 e2 ff ff       	call   c0013802 <VAS::mapOtherVASIn(bool, VAS*)>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	e8 97 aa ff ff       	call   c0010048 <Phys::allocatePage()>
c00155b1:	47                   	inc    edi
c00155b2:	6a 07                	push   0x7
c00155b4:	53                   	push   ebx
c00155b5:	50                   	push   eax
c00155b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00155c0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00155c3:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c00155c9:	e8 c8 e3 ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c00155ce:	58                   	pop    eax
c00155cf:	5a                   	pop    edx
c00155d0:	68 07 0c 00 00       	push   0xc07
c00155d5:	55                   	push   ebp
c00155d6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00155dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155e0:	50                   	push   eax
c00155e1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00155e8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155ee:	6a 00                	push   0x0
c00155f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155f8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155fe:	e8 e7 e5 ff ff       	call   c0013bea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015603:	83 c4 1c             	add    esp,0x1c
c0015606:	68 00 10 00 00       	push   0x1000
c001560b:	6a 00                	push   0x0
c001560d:	53                   	push   ebx
c001560e:	e8 dd ae fe ff       	call   c00004f0 <memset>
c0015613:	83 c4 10             	add    esp,0x10
c0015616:	39 fe                	cmp    esi,edi
c0015618:	77 92                	ja     c00155ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c001561a:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0015621:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0015628:	75 01                	jne    c001562b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c001562a:	fb                   	sti    
c001562b:	83 ec 0c             	sub    esp,0xc
c001562e:	53                   	push   ebx
c001562f:	e8 87 df ff ff       	call   c00135bb <Virt::freeKernelVirtualPages(unsigned long)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	b0 01                	mov    al,0x1
c0015639:	81 c4 2c 10 00 00    	add    esp,0x102c
c001563f:	5b                   	pop    ebx
c0015640:	5e                   	pop    esi
c0015641:	5f                   	pop    edi
c0015642:	5d                   	pop    ebp
c0015643:	c3                   	ret    

c0015644 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015644:	55                   	push   ebp
c0015645:	57                   	push   edi
c0015646:	56                   	push   esi
c0015647:	53                   	push   ebx
c0015648:	83 ec 68             	sub    esp,0x68
c001564b:	68 14 01 00 00       	push   0x114
c0015650:	e8 b3 a4 ff ff       	call   c000fb08 <malloc>
c0015655:	83 c4 0c             	add    esp,0xc
c0015658:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001565c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015660:	89 c6                	mov    esi,eax
c0015662:	50                   	push   eax
c0015663:	e8 fc 2a ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0015668:	58                   	pop    eax
c0015669:	5a                   	pop    edx
c001566a:	6a 01                	push   0x1
c001566c:	56                   	push   esi
c001566d:	e8 10 2b ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0015672:	83 c4 10             	add    esp,0x10
c0015675:	85 c0                	test   eax,eax
c0015677:	0f 85 f6 01 00 00    	jne    c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c001567d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015685:	83 ec 0c             	sub    esp,0xc
c0015688:	6a 34                	push   0x34
c001568a:	e8 79 a4 ff ff       	call   c000fb08 <malloc>
c001568f:	89 c3                	mov    ebx,eax
c0015691:	58                   	pop    eax
c0015692:	8b 06                	mov    eax,DWORD PTR [esi]
c0015694:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015698:	57                   	push   edi
c0015699:	53                   	push   ebx
c001569a:	6a 00                	push   0x0
c001569c:	6a 34                	push   0x34
c001569e:	56                   	push   esi
c001569f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00156a2:	83 c4 20             	add    esp,0x20
c00156a5:	85 c0                	test   eax,eax
c00156a7:	0f 85 c6 01 00 00    	jne    c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00156ad:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00156b3:	0f 85 ba 01 00 00    	jne    c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00156b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00156bc:	85 c0                	test   eax,eax
c00156be:	0f 84 af 01 00 00    	je     c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00156c4:	31 d2                	xor    edx,edx
c00156c6:	55                   	push   ebp
c00156c7:	52                   	push   edx
c00156c8:	50                   	push   eax
c00156c9:	56                   	push   esi
c00156ca:	e8 71 2b ff ff       	call   c0008240 <File::seek(unsigned long long)>
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	85 c0                	test   eax,eax
c00156d4:	0f 85 99 01 00 00    	jne    c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00156da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156dd:	83 ec 0c             	sub    esp,0xc
c00156e0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00156e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00156e8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00156ec:	0f af c2             	imul   eax,edx
c00156ef:	50                   	push   eax
c00156f0:	e8 13 a4 ff ff       	call   c000fb08 <malloc>
c00156f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00156f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156fa:	31 ff                	xor    edi,edi
c00156fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015704:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015708:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001570c:	0f af c2             	imul   eax,edx
c001570f:	99                   	cdq    
c0015710:	52                   	push   edx
c0015711:	50                   	push   eax
c0015712:	56                   	push   esi
c0015713:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015716:	83 c4 20             	add    esp,0x20
c0015719:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c001571d:	0f b7 c7             	movzx  eax,di
c0015720:	0f 83 98 00 00 00    	jae    c00157be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17a>
c0015726:	52                   	push   edx
c0015727:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c001572b:	6b c0 28             	imul   eax,eax,0x28
c001572e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015732:	6b d2 28             	imul   edx,edx,0x28
c0015735:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015738:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001573c:	31 d2                	xor    edx,edx
c001573e:	52                   	push   edx
c001573f:	50                   	push   eax
c0015740:	56                   	push   esi
c0015741:	e8 fa 2a ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015746:	83 c4 0c             	add    esp,0xc
c0015749:	6a 20                	push   0x20
c001574b:	6a 00                	push   0x0
c001574d:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015751:	55                   	push   ebp
c0015752:	e8 99 ad fe ff       	call   c00004f0 <memset>
c0015757:	8b 06                	mov    eax,DWORD PTR [esi]
c0015759:	59                   	pop    ecx
c001575a:	8d 54 24 38          	lea    edx,[esp+0x38]
c001575e:	52                   	push   edx
c001575f:	55                   	push   ebp
c0015760:	6a 00                	push   0x0
c0015762:	6a 1f                	push   0x1f
c0015764:	56                   	push   esi
c0015765:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015768:	83 c4 18             	add    esp,0x18
c001576b:	55                   	push   ebp
c001576c:	68 26 4f 02 c0       	push   0xc0024f26
c0015771:	e8 0a b0 fe ff       	call   c0000780 <strcmp>
c0015776:	83 c4 10             	add    esp,0x10
c0015779:	85 c0                	test   eax,eax
c001577b:	75 27                	jne    c00157a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x160>
c001577d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015781:	83 ec 0c             	sub    esp,0xc
c0015784:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0015788:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001578e:	83 c8 80             	or     eax,0xffffff80
c0015791:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015797:	68 35 4f 02 c0       	push   0xc0024f35
c001579c:	e8 ad 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	55                   	push   ebp
c00157a5:	47                   	inc    edi
c00157a6:	55                   	push   ebp
c00157a7:	8d 44 24 38          	lea    eax,[esp+0x38]
c00157ab:	50                   	push   eax
c00157ac:	68 47 4f 02 c0       	push   0xc0024f47
c00157b1:	e8 98 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	e9 5b ff ff ff       	jmp    c0015719 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c00157be:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00157c1:	85 c0                	test   eax,eax
c00157c3:	0f 84 aa 00 00 00    	je     c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00157c9:	31 d2                	xor    edx,edx
c00157cb:	57                   	push   edi
c00157cc:	52                   	push   edx
c00157cd:	50                   	push   eax
c00157ce:	56                   	push   esi
c00157cf:	e8 6c 2a ff ff       	call   c0008240 <File::seek(unsigned long long)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	85 c0                	test   eax,eax
c00157d9:	0f 85 94 00 00 00    	jne    c0015873 <Thr::loadProgramIntoMemory(Process*, char const*)+0x22f>
c00157df:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00157e3:	83 ec 0c             	sub    esp,0xc
c00157e6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00157ea:	0f af c2             	imul   eax,edx
c00157ed:	50                   	push   eax
c00157ee:	e8 15 a3 ff ff       	call   c000fb08 <malloc>
c00157f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00157f7:	59                   	pop    ecx
c00157f8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00157fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00157fe:	50                   	push   eax
c00157ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015803:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015807:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001580b:	0f af c2             	imul   eax,edx
c001580e:	99                   	cdq    
c001580f:	52                   	push   edx
c0015810:	50                   	push   eax
c0015811:	56                   	push   esi
c0015812:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015815:	83 c4 20             	add    esp,0x20
c0015818:	31 c9                	xor    ecx,ecx
c001581a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015822:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0015826:	0f b7 e9             	movzx  ebp,cx
c0015829:	0f 83 89 00 00 00    	jae    c00158b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x274>
c001582f:	c1 e5 05             	shl    ebp,0x5
c0015832:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0015836:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001583a:	75 76                	jne    c00158b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x26e>
c001583c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0015846:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001584a:	52                   	push   edx
c001584b:	31 d2                	xor    edx,edx
c001584d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015850:	52                   	push   edx
c0015851:	50                   	push   eax
c0015852:	56                   	push   esi
c0015853:	e8 e8 29 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001585f:	85 c0                	test   eax,eax
c0015861:	74 17                	je     c001587a <Thr::loadProgramIntoMemory(Process*, char const*)+0x236>
c0015863:	83 ec 0c             	sub    esp,0xc
c0015866:	68 5e 4f 02 c0       	push   0xc0024f5e
c001586b:	e8 de 16 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	31 c0                	xor    eax,eax
c0015875:	e9 8e 00 00 00       	jmp    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0x2c4>
c001587a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001587e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015881:	83 ec 0c             	sub    esp,0xc
c0015884:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015887:	50                   	push   eax
c0015888:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001588c:	57                   	push   edi
c001588d:	56                   	push   esi
c001588e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015895:	e8 1f fb ff ff       	call   c00153b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001589a:	03 7c 24 34          	add    edi,DWORD PTR [esp+0x34]
c001589e:	83 c4 20             	add    esp,0x20
c00158a1:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00158a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158a9:	0f 43 7c 24 08       	cmovae edi,DWORD PTR [esp+0x8]
c00158ae:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00158b2:	41                   	inc    ecx
c00158b3:	e9 6a ff ff ff       	jmp    c0015822 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1de>
c00158b8:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00158c7:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c00158cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158d2:	89 b9 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edi
c00158d8:	05 00 10 00 00       	add    eax,0x1000
c00158dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00158e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158e4:	e8 2f a2 ff ff       	call   c000fb18 <free>
c00158e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158ec:	e8 27 a2 ff ff       	call   c000fb18 <free>
c00158f1:	58                   	pop    eax
c00158f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158f6:	e8 1d a2 ff ff       	call   c000fb18 <free>
c00158fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00158fe:	e8 dd 28 ff ff       	call   c00081e0 <File::close()>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	b0 01                	mov    al,0x1
c0015908:	83 c4 5c             	add    esp,0x5c
c001590b:	5b                   	pop    ebx
c001590c:	5e                   	pop    esi
c001590d:	5f                   	pop    edi
c001590e:	5d                   	pop    ebp
c001590f:	c3                   	ret    

c0015910 <Thr::runtimeReferenceHelper()>:
c0015910:	83 ec 18             	sub    esp,0x18
c0015913:	68 66 4f 02 c0       	push   0xc0024f66
c0015918:	e8 31 16 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001591d:	fa                   	cli    
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	eb fe                	jmp    c0015921 <Thr::runtimeReferenceHelper()+0x11>

c0015923 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015923:	57                   	push   edi
c0015924:	56                   	push   esi
c0015925:	53                   	push   ebx
c0015926:	31 db                	xor    ebx,ebx
c0015928:	39 1d 00 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa00,ebx
c001592e:	7e 3c                	jle    c001596c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015930:	8b 34 9d 80 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0680]
c0015937:	31 ff                	xor    edi,edi
c0015939:	39 3c 9d 80 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0780],edi
c0015940:	7e 27                	jle    c0015969 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015942:	50                   	push   eax
c0015943:	50                   	push   eax
c0015944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015948:	8b 06                	mov    eax,DWORD PTR [esi]
c001594a:	03 04 9d 00 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0700]
c0015951:	50                   	push   eax
c0015952:	e8 29 ae fe ff       	call   c0000780 <strcmp>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	85 c0                	test   eax,eax
c001595c:	75 05                	jne    c0015963 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001595e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015961:	eb 0b                	jmp    c001596e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015963:	83 c6 10             	add    esi,0x10
c0015966:	47                   	inc    edi
c0015967:	eb d0                	jmp    c0015939 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015969:	43                   	inc    ebx
c001596a:	eb bc                	jmp    c0015928 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001596c:	31 c0                	xor    eax,eax
c001596e:	5b                   	pop    ebx
c001596f:	5e                   	pop    esi
c0015970:	5f                   	pop    edi
c0015971:	c3                   	ret    

c0015972 <Thr::loadKernelSymbolTable(char const*)>:
c0015972:	55                   	push   ebp
c0015973:	57                   	push   edi
c0015974:	56                   	push   esi
c0015975:	53                   	push   ebx
c0015976:	83 ec 68             	sub    esp,0x68
c0015979:	68 14 01 00 00       	push   0x114
c001597e:	8b 35 58 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa58
c0015984:	e8 7f a1 ff ff       	call   c000fb08 <malloc>
c0015989:	83 c4 0c             	add    esp,0xc
c001598c:	56                   	push   esi
c001598d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015991:	89 c3                	mov    ebx,eax
c0015993:	50                   	push   eax
c0015994:	e8 cb 27 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0015999:	5e                   	pop    esi
c001599a:	5f                   	pop    edi
c001599b:	6a 01                	push   0x1
c001599d:	53                   	push   ebx
c001599e:	e8 df 27 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	85 c0                	test   eax,eax
c00159a8:	74 0a                	je     c00159b4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00159aa:	83 ec 0c             	sub    esp,0xc
c00159ad:	68 88 4f 02 c0       	push   0xc0024f88
c00159b2:	eb 34                	jmp    c00159e8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00159b4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	6a 34                	push   0x34
c00159c1:	e8 42 a1 ff ff       	call   c000fb08 <malloc>
c00159c6:	59                   	pop    ecx
c00159c7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00159cb:	89 c7                	mov    edi,eax
c00159cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159cf:	56                   	push   esi
c00159d0:	57                   	push   edi
c00159d1:	6a 00                	push   0x0
c00159d3:	6a 34                	push   0x34
c00159d5:	53                   	push   ebx
c00159d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159d9:	83 c4 20             	add    esp,0x20
c00159dc:	85 c0                	test   eax,eax
c00159de:	74 17                	je     c00159f7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	68 9f 4f 02 c0       	push   0xc0024f9f
c00159e8:	e8 61 a4 ff ff       	call   c000fe4e <KePanic(char const*)>
c00159ed:	83 c4 10             	add    esp,0x10
c00159f0:	31 c0                	xor    eax,eax
c00159f2:	e9 31 02 00 00       	jmp    c0015c28 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00159f7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00159fd:	75 e1                	jne    c00159e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159ff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015a02:	85 c0                	test   eax,eax
c0015a04:	74 da                	je     c00159e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a06:	52                   	push   edx
c0015a07:	31 d2                	xor    edx,edx
c0015a09:	52                   	push   edx
c0015a0a:	50                   	push   eax
c0015a0b:	53                   	push   ebx
c0015a0c:	e8 2f 28 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	85 c0                	test   eax,eax
c0015a16:	75 c8                	jne    c00159e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a18:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015a1c:	83 ec 0c             	sub    esp,0xc
c0015a1f:	31 ed                	xor    ebp,ebp
c0015a21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a25:	0f af c2             	imul   eax,edx
c0015a28:	50                   	push   eax
c0015a29:	e8 da a0 ff ff       	call   c000fb08 <malloc>
c0015a2e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a30:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a3b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015a3f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a43:	0f af c2             	imul   eax,edx
c0015a46:	99                   	cdq    
c0015a47:	52                   	push   edx
c0015a48:	50                   	push   eax
c0015a49:	53                   	push   ebx
c0015a4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a4d:	83 c4 20             	add    esp,0x20
c0015a50:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015a58:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015a60:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a70:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015a74:	0f b7 f5             	movzx  esi,bp
c0015a77:	0f 83 a7 00 00 00    	jae    c0015b24 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015a7d:	6b f6 28             	imul   esi,esi,0x28
c0015a80:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a84:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a8b:	50                   	push   eax
c0015a8c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015a90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a94:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a96:	6b c0 28             	imul   eax,eax,0x28
c0015a99:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015a9d:	89 d0                	mov    eax,edx
c0015a9f:	31 d2                	xor    edx,edx
c0015aa1:	52                   	push   edx
c0015aa2:	50                   	push   eax
c0015aa3:	53                   	push   ebx
c0015aa4:	e8 97 27 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015aa9:	83 c4 0c             	add    esp,0xc
c0015aac:	6a 20                	push   0x20
c0015aae:	6a 00                	push   0x0
c0015ab0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015ab4:	52                   	push   edx
c0015ab5:	e8 36 aa fe ff       	call   c00004f0 <memset>
c0015aba:	58                   	pop    eax
c0015abb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015abd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015ac1:	51                   	push   ecx
c0015ac2:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015ac6:	52                   	push   edx
c0015ac7:	6a 00                	push   0x0
c0015ac9:	6a 1f                	push   0x1f
c0015acb:	53                   	push   ebx
c0015acc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015acf:	83 c4 18             	add    esp,0x18
c0015ad2:	68 b6 4f 02 c0       	push   0xc0024fb6
c0015ad7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015adb:	52                   	push   edx
c0015adc:	e8 9f ac fe ff       	call   c0000780 <strcmp>
c0015ae1:	83 c4 10             	add    esp,0x10
c0015ae4:	85 c0                	test   eax,eax
c0015ae6:	75 0f                	jne    c0015af7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015ae8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015aeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015aef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015af3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015af7:	50                   	push   eax
c0015af8:	50                   	push   eax
c0015af9:	68 be 4f 02 c0       	push   0xc0024fbe
c0015afe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015b02:	50                   	push   eax
c0015b03:	e8 78 ac fe ff       	call   c0000780 <strcmp>
c0015b08:	83 c4 10             	add    esp,0x10
c0015b0b:	85 c0                	test   eax,eax
c0015b0d:	75 0f                	jne    c0015b1e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015b0f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b1e:	45                   	inc    ebp
c0015b1f:	e9 4c ff ff ff       	jmp    c0015a70 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015b24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015b29:	75 10                	jne    c0015b3b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015b2b:	83 ec 0c             	sub    esp,0xc
c0015b2e:	68 c6 4f 02 c0       	push   0xc0024fc6
c0015b33:	e8 16 a3 ff ff       	call   c000fe4e <KePanic(char const*)>
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015b40:	75 10                	jne    c0015b52 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	68 c6 4f 02 c0       	push   0xc0024fc6
c0015b4a:	e8 ff a2 ff ff       	call   c000fe4e <KePanic(char const*)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	50                   	push   eax
c0015b53:	31 d2                	xor    edx,edx
c0015b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b59:	52                   	push   edx
c0015b5a:	50                   	push   eax
c0015b5b:	53                   	push   ebx
c0015b5c:	e8 df 26 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015b61:	5a                   	pop    edx
c0015b62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b66:	e8 9d 9f ff ff       	call   c000fb08 <malloc>
c0015b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b6f:	31 c9                	xor    ecx,ecx
c0015b71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b77:	5e                   	pop    esi
c0015b78:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015b7c:	55                   	push   ebp
c0015b7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b81:	51                   	push   ecx
c0015b82:	52                   	push   edx
c0015b83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015b87:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015b8b:	53                   	push   ebx
c0015b8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b8f:	83 c4 14             	add    esp,0x14
c0015b92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015b96:	e8 6d 9f ff ff       	call   c000fb08 <malloc>
c0015b9b:	89 c6                	mov    esi,eax
c0015b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b9f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015ba2:	56                   	push   esi
c0015ba3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015ba7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bab:	51                   	push   ecx
c0015bac:	52                   	push   edx
c0015bad:	53                   	push   ebx
c0015bae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015bb5:	83 c4 1c             	add    esp,0x1c
c0015bb8:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c0015bbe:	c1 e8 04             	shr    eax,0x4
c0015bc1:	89 04 95 80 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0780],eax
c0015bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bcc:	31 d2                	xor    edx,edx
c0015bce:	52                   	push   edx
c0015bcf:	50                   	push   eax
c0015bd0:	53                   	push   ebx
c0015bd1:	e8 6a 26 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015bd6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015bd8:	31 d2                	xor    edx,edx
c0015bda:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015bdd:	56                   	push   esi
c0015bde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015be2:	52                   	push   edx
c0015be3:	50                   	push   eax
c0015be4:	53                   	push   ebx
c0015be5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015be8:	83 c4 14             	add    esp,0x14
c0015beb:	53                   	push   ebx
c0015bec:	e8 ef 25 ff ff       	call   c00081e0 <File::close()>
c0015bf1:	5d                   	pop    ebp
c0015bf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bf6:	e8 1d 9f ff ff       	call   c000fb18 <free>
c0015bfb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015bfe:	e8 15 9f ff ff       	call   c000fb18 <free>
c0015c03:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0015c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	89 34 85 00 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0700],esi
c0015c16:	8d 50 01             	lea    edx,[eax+0x1]
c0015c19:	89 0c 85 80 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0680],ecx
c0015c20:	b0 01                	mov    al,0x1
c0015c22:	89 15 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,edx
c0015c28:	83 c4 5c             	add    esp,0x5c
c0015c2b:	5b                   	pop    ebx
c0015c2c:	5e                   	pop    esi
c0015c2d:	5f                   	pop    edi
c0015c2e:	5d                   	pop    ebp
c0015c2f:	c3                   	ret    

c0015c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015c30:	55                   	push   ebp
c0015c31:	57                   	push   edi
c0015c32:	56                   	push   esi
c0015c33:	53                   	push   ebx
c0015c34:	81 ec 78 03 00 00    	sub    esp,0x378
c0015c3a:	8a 84 24 94 03 00 00 	mov    al,BYTE PTR [esp+0x394]
c0015c41:	8b 35 58 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa58
c0015c47:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c0015c4b:	68 14 01 00 00       	push   0x114
c0015c50:	e8 b3 9e ff ff       	call   c000fb08 <malloc>
c0015c55:	83 c4 0c             	add    esp,0xc
c0015c58:	56                   	push   esi
c0015c59:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0015c60:	50                   	push   eax
c0015c61:	89 c3                	mov    ebx,eax
c0015c63:	e8 fc 24 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0015c68:	5f                   	pop    edi
c0015c69:	5d                   	pop    ebp
c0015c6a:	6a 01                	push   0x1
c0015c6c:	53                   	push   ebx
c0015c6d:	e8 10 25 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	85 c0                	test   eax,eax
c0015c77:	0f 85 67 07 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015c7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0015c85:	83 ec 0c             	sub    esp,0xc
c0015c88:	6a 34                	push   0x34
c0015c8a:	e8 79 9e ff ff       	call   c000fb08 <malloc>
c0015c8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c95:	5e                   	pop    esi
c0015c96:	8d 74 24 64          	lea    esi,[esp+0x64]
c0015c9a:	56                   	push   esi
c0015c9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c9f:	6a 00                	push   0x0
c0015ca1:	6a 34                	push   0x34
c0015ca3:	53                   	push   ebx
c0015ca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ca7:	83 c4 20             	add    esp,0x20
c0015caa:	85 c0                	test   eax,eax
c0015cac:	0f 85 32 07 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cb6:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c0015cbc:	0f 85 22 07 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015cc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cc5:	85 c0                	test   eax,eax
c0015cc7:	0f 84 17 07 00 00    	je     c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015ccd:	31 d2                	xor    edx,edx
c0015ccf:	51                   	push   ecx
c0015cd0:	52                   	push   edx
c0015cd1:	50                   	push   eax
c0015cd2:	53                   	push   ebx
c0015cd3:	e8 68 25 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	85 c0                	test   eax,eax
c0015cdd:	0f 85 01 07 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce7:	83 ec 0c             	sub    esp,0xc
c0015cea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015ced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015cf1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015cf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cf9:	0f b7 51 2e          	movzx  edx,WORD PTR [ecx+0x2e]
c0015cfd:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c0015d01:	0f af c2             	imul   eax,edx
c0015d04:	50                   	push   eax
c0015d05:	e8 fe 9d ff ff       	call   c000fb08 <malloc>
c0015d0a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d1f:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c0015d23:	0f b7 52 2e          	movzx  edx,WORD PTR [edx+0x2e]
c0015d27:	0f af c2             	imul   eax,edx
c0015d2a:	99                   	cdq    
c0015d2b:	52                   	push   edx
c0015d2c:	50                   	push   eax
c0015d2d:	53                   	push   ebx
c0015d2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d35:	83 c4 20             	add    esp,0x20
c0015d38:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015d3b:	85 c0                	test   eax,eax
c0015d3d:	0f 84 a1 06 00 00    	je     c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d43:	52                   	push   edx
c0015d44:	31 d2                	xor    edx,edx
c0015d46:	52                   	push   edx
c0015d47:	50                   	push   eax
c0015d48:	53                   	push   ebx
c0015d49:	e8 f2 24 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	85 c0                	test   eax,eax
c0015d53:	0f 85 8b 06 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015d59:	83 ec 0c             	sub    esp,0xc
c0015d5c:	31 ed                	xor    ebp,ebp
c0015d5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015d62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d66:	0f b7 51 2a          	movzx  edx,WORD PTR [ecx+0x2a]
c0015d6a:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015d6e:	0f af c2             	imul   eax,edx
c0015d71:	50                   	push   eax
c0015d72:	e8 91 9d ff ff       	call   c000fb08 <malloc>
c0015d77:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d79:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d8c:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015d90:	0f b7 52 2a          	movzx  edx,WORD PTR [edx+0x2a]
c0015d94:	0f af c2             	imul   eax,edx
c0015d97:	99                   	cdq    
c0015d98:	52                   	push   edx
c0015d99:	50                   	push   eax
c0015d9a:	53                   	push   ebx
c0015d9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d9e:	83 c4 20             	add    esp,0x20
c0015da1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015da5:	0f b7 fd             	movzx  edi,bp
c0015da8:	66 3b 68 2c          	cmp    bp,WORD PTR [eax+0x2c]
c0015dac:	73 72                	jae    c0015e20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f0>
c0015dae:	c1 e7 05             	shl    edi,0x5
c0015db1:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
c0015db5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015db8:	75 63                	jne    c0015e1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ed>
c0015dba:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015dbd:	31 d2                	xor    edx,edx
c0015dbf:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015dc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dc6:	50                   	push   eax
c0015dc7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015dca:	52                   	push   edx
c0015dcb:	50                   	push   eax
c0015dcc:	53                   	push   ebx
c0015dcd:	e8 6e 24 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	85 c0                	test   eax,eax
c0015dd7:	0f 85 07 06 00 00    	jne    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c0015ddd:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	31 d2                	xor    edx,edx
c0015de9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015ded:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015def:	01 c6                	add    esi,eax
c0015df1:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015df8:	50                   	push   eax
c0015df9:	56                   	push   esi
c0015dfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dfe:	52                   	push   edx
c0015dff:	50                   	push   eax
c0015e00:	53                   	push   ebx
c0015e01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e04:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015e07:	83 c4 1c             	add    esp,0x1c
c0015e0a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015e0d:	50                   	push   eax
c0015e0e:	6a 00                	push   0x0
c0015e10:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
c0015e14:	56                   	push   esi
c0015e15:	e8 d6 a6 fe ff       	call   c00004f0 <memset>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	45                   	inc    ebp
c0015e1e:	eb 81                	jmp    c0015da1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x171>
c0015e20:	51                   	push   ecx
c0015e21:	68 00 01 00 00       	push   0x100
c0015e26:	6a 00                	push   0x0
c0015e28:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c0015e2c:	50                   	push   eax
c0015e2d:	e8 be a6 fe ff       	call   c00004f0 <memset>
c0015e32:	83 c4 0c             	add    esp,0xc
c0015e35:	68 00 01 00 00       	push   0x100
c0015e3a:	6a 00                	push   0x0
c0015e3c:	8d 84 24 6c 01 00 00 	lea    eax,[esp+0x16c]
c0015e43:	50                   	push   eax
c0015e44:	e8 a7 a6 fe ff       	call   c00004f0 <memset>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	66 c7 44 24 28 00 00 	mov    WORD PTR [esp+0x28],0x0
c0015e53:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015e5b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015e63:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0015e6b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e73:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e7f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0015e83:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015e88:	66 3b 48 30          	cmp    cx,WORD PTR [eax+0x30]
c0015e8c:	0f 83 12 01 00 00    	jae    c0015fa4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x374>
c0015e92:	6b ff 28             	imul   edi,edi,0x28
c0015e95:	03 7c 24 14          	add    edi,DWORD PTR [esp+0x14]
c0015e99:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015e9c:	50                   	push   eax
c0015e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015ea5:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c0015ea9:	8b 07                	mov    eax,DWORD PTR [edi]
c0015eab:	6b d2 28             	imul   edx,edx,0x28
c0015eae:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015eb2:	31 d2                	xor    edx,edx
c0015eb4:	52                   	push   edx
c0015eb5:	50                   	push   eax
c0015eb6:	53                   	push   ebx
c0015eb7:	e8 84 23 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015ebc:	83 c4 0c             	add    esp,0xc
c0015ebf:	6a 20                	push   0x20
c0015ec1:	6a 00                	push   0x0
c0015ec3:	8d ac 24 6c 02 00 00 	lea    ebp,[esp+0x26c]
c0015eca:	55                   	push   ebp
c0015ecb:	e8 20 a6 fe ff       	call   c00004f0 <memset>
c0015ed0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed2:	5a                   	pop    edx
c0015ed3:	8d 54 24 68          	lea    edx,[esp+0x68]
c0015ed7:	52                   	push   edx
c0015ed8:	55                   	push   ebp
c0015ed9:	6a 00                	push   0x0
c0015edb:	6a 1f                	push   0x1f
c0015edd:	53                   	push   ebx
c0015ede:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ee1:	83 c4 1c             	add    esp,0x1c
c0015ee4:	6a 09                	push   0x9
c0015ee6:	68 e0 4f 02 c0       	push   0xc0024fe0
c0015eeb:	55                   	push   ebp
c0015eec:	e8 8f a4 fe ff       	call   c0000380 <memcmp>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	85 c0                	test   eax,eax
c0015ef6:	75 1d                	jne    c0015f15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2e5>
c0015ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f00:	89 74 84 60          	mov    DWORD PTR [esp+eax*4+0x60],esi
c0015f04:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f07:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c0015f0e:	89 c8                	mov    eax,ecx
c0015f10:	40                   	inc    eax
c0015f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f15:	50                   	push   eax
c0015f16:	6a 09                	push   0x9
c0015f18:	68 ea 4f 02 c0       	push   0xc0024fea
c0015f1d:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015f24:	50                   	push   eax
c0015f25:	e8 56 a4 fe ff       	call   c0000380 <memcmp>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	85 c0                	test   eax,eax
c0015f2f:	75 1d                	jne    c0015f4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31e>
c0015f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f39:	89 74 84 60          	mov    DWORD PTR [esp+eax*4+0x60],esi
c0015f3d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f40:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c0015f47:	89 c8                	mov    eax,ecx
c0015f49:	40                   	inc    eax
c0015f4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f4e:	50                   	push   eax
c0015f4f:	50                   	push   eax
c0015f50:	68 b6 4f 02 c0       	push   0xc0024fb6
c0015f55:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015f5c:	50                   	push   eax
c0015f5d:	e8 1e a8 fe ff       	call   c0000780 <strcmp>
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	85 c0                	test   eax,eax
c0015f67:	75 0b                	jne    c0015f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x344>
c0015f69:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0015f6d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015f74:	50                   	push   eax
c0015f75:	50                   	push   eax
c0015f76:	68 be 4f 02 c0       	push   0xc0024fbe
c0015f7b:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015f82:	50                   	push   eax
c0015f83:	e8 f8 a7 fe ff       	call   c0000780 <strcmp>
c0015f88:	83 c4 10             	add    esp,0x10
c0015f8b:	85 c0                	test   eax,eax
c0015f8d:	75 0b                	jne    c0015f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x36a>
c0015f8f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015f93:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f9a:	66 ff 44 24 28       	inc    WORD PTR [esp+0x28]
c0015f9f:	e9 d7 fe ff ff       	jmp    c0015e7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x24b>
c0015fa4:	55                   	push   ebp
c0015fa5:	31 d2                	xor    edx,edx
c0015fa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fab:	52                   	push   edx
c0015fac:	50                   	push   eax
c0015fad:	53                   	push   ebx
c0015fae:	e8 8d 22 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015fb3:	58                   	pop    eax
c0015fb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015fb8:	e8 4b 9b ff ff       	call   c000fb08 <malloc>
c0015fbd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015fbf:	31 d2                	xor    edx,edx
c0015fc1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015fc5:	58                   	pop    eax
c0015fc6:	8d 74 24 64          	lea    esi,[esp+0x64]
c0015fca:	56                   	push   esi
c0015fcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0015fcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fd3:	52                   	push   edx
c0015fd4:	50                   	push   eax
c0015fd5:	53                   	push   ebx
c0015fd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fd9:	83 c4 14             	add    esp,0x14
c0015fdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fe0:	e8 23 9b ff ff       	call   c000fb08 <malloc>
c0015fe5:	31 d2                	xor    edx,edx
c0015fe7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015feb:	83 c4 0c             	add    esp,0xc
c0015fee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ff2:	52                   	push   edx
c0015ff3:	50                   	push   eax
c0015ff4:	53                   	push   ebx
c0015ff5:	e8 46 22 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0015ffa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ffc:	31 d2                	xor    edx,edx
c0015ffe:	89 34 24             	mov    DWORD PTR [esp],esi
c0016001:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0016005:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016009:	52                   	push   edx
c001600a:	50                   	push   eax
c001600b:	53                   	push   ebx
c001600c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001600f:	83 c4 20             	add    esp,0x20
c0016012:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c0016017:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001601f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016023:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016027:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c001602b:	0f 84 b7 03 00 00    	je     c00163e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b8>
c0016031:	8b 84 8c 60 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x160]
c0016038:	31 d2                	xor    edx,edx
c001603a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001603e:	c1 e8 03             	shr    eax,0x3
c0016041:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016045:	51                   	push   ecx
c0016046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001604a:	8b 44 84 64          	mov    eax,DWORD PTR [esp+eax*4+0x64]
c001604e:	52                   	push   edx
c001604f:	50                   	push   eax
c0016050:	53                   	push   ebx
c0016051:	e8 ea 21 ff ff       	call   c0008240 <File::seek(unsigned long long)>
c0016056:	5e                   	pop    esi
c0016057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001605b:	ff b4 84 6c 01 00 00 	push   DWORD PTR [esp+eax*4+0x16c]
c0016062:	e8 a1 9a ff ff       	call   c000fb08 <malloc>
c0016067:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016069:	31 d2                	xor    edx,edx
c001606b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001606f:	5f                   	pop    edi
c0016070:	8d 44 24 68          	lea    eax,[esp+0x68]
c0016074:	50                   	push   eax
c0016075:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001607d:	8b 84 84 74 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x174]
c0016084:	52                   	push   edx
c0016085:	50                   	push   eax
c0016086:	53                   	push   ebx
c0016087:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001608a:	83 c4 20             	add    esp,0x20
c001608d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016095:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0016099:	39 4c 24 2c          	cmp    DWORD PTR [esp+0x2c],ecx
c001609d:	0f 8d 29 03 00 00    	jge    c00163cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c00160a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00160a7:	83 ec 0c             	sub    esp,0xc
c00160aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160ae:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00160b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00160b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160b9:	8b 6c d0 04          	mov    ebp,DWORD PTR [eax+edx*8+0x4]
c00160bd:	89 e8                	mov    eax,ebp
c00160bf:	c1 e8 08             	shr    eax,0x8
c00160c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00160c6:	89 c7                	mov    edi,eax
c00160c8:	c1 e7 04             	shl    edi,0x4
c00160cb:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
c00160cf:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c00160d3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00160d6:	89 f8                	mov    eax,edi
c00160d8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160dc:	03 38                	add    edi,DWORD PTR [eax]
c00160de:	55                   	push   ebp
c00160df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00160e3:	56                   	push   esi
c00160e4:	57                   	push   edi
c00160e5:	68 f4 4f 02 c0       	push   0xc0024ff4
c00160ea:	e8 5f 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00160ef:	83 c4 20             	add    esp,0x20
c00160f2:	85 f6                	test   esi,esi
c00160f4:	c6 44 24 30 00       	mov    BYTE PTR [esp+0x30],0x0
c00160f9:	0f 85 8c 00 00 00    	jne    c001618b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00160ff:	83 ec 0c             	sub    esp,0xc
c0016102:	57                   	push   edi
c0016103:	e8 1b f8 ff ff       	call   c0015923 <Thr::getAddressOfKernelSymbol(char const*)>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	c6 44 24 30 01       	mov    BYTE PTR [esp+0x30],0x1
c0016110:	85 c0                	test   eax,eax
c0016112:	89 c6                	mov    esi,eax
c0016114:	75 75                	jne    c001618b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c0016116:	83 ec 0c             	sub    esp,0xc
c0016119:	57                   	push   edi
c001611a:	e8 b9 a7 ff ff       	call   c00108d8 <KeResolveCompatibilitySymbol(char*)>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	85 c0                	test   eax,eax
c0016124:	89 c6                	mov    esi,eax
c0016126:	75 63                	jne    c001618b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c0016128:	50                   	push   eax
c0016129:	50                   	push   eax
c001612a:	57                   	push   edi
c001612b:	68 27 50 02 c0       	push   0xc0025027
c0016130:	e8 19 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016135:	58                   	pop    eax
c0016136:	5a                   	pop    edx
c0016137:	68 41 50 02 c0       	push   0xc0025041
c001613c:	8d bc 24 6c 02 00 00 	lea    edi,[esp+0x26c]
c0016143:	57                   	push   edi
c0016144:	e8 07 a5 fe ff       	call   c0000650 <strcpy>
c0016149:	59                   	pop    ecx
c001614a:	58                   	pop    eax
c001614b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001614f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016153:	03 01                	add    eax,DWORD PTR [ecx]
c0016155:	50                   	push   eax
c0016156:	57                   	push   edi
c0016157:	e8 14 a7 fe ff       	call   c0000870 <strcat>
c001615c:	58                   	pop    eax
c001615d:	5a                   	pop    edx
c001615e:	68 e3 51 02 c0       	push   0xc00251e3
c0016163:	57                   	push   edi
c0016164:	e8 07 a7 fe ff       	call   c0000870 <strcat>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016171:	0f 84 0e 02 00 00    	je     c0016385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c0016177:	83 ec 0c             	sub    esp,0xc
c001617a:	57                   	push   edi
c001617b:	e8 ce 9c ff ff       	call   c000fe4e <KePanic(char const*)>
c0016180:	83 c4 10             	add    esp,0x10
c0016183:	8a 44 24 4b          	mov    al,BYTE PTR [esp+0x4b]
c0016187:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001618b:	89 e8                	mov    eax,ebp
c001618d:	0f b6 c0             	movzx  eax,al
c0016190:	83 f8 01             	cmp    eax,0x1
c0016193:	0f 85 e2 00 00 00    	jne    c001627b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0016199:	8b 94 24 84 03 00 00 	mov    edx,DWORD PTR [esp+0x384]
c00161a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00161a4:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c00161a8:	01 d7                	add    edi,edx
c00161aa:	81 fd 01 01 00 00    	cmp    ebp,0x101
c00161b0:	0f 94 c0             	sete   al
c00161b3:	81 fd 01 04 00 00    	cmp    ebp,0x401
c00161b9:	0f 94 c1             	sete   cl
c00161bc:	09 c8                	or     eax,ecx
c00161be:	80 7c 24 30 00       	cmp    BYTE PTR [esp+0x30],0x0
c00161c3:	0f b6 c0             	movzx  eax,al
c00161c6:	74 56                	je     c001621e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c00161c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	68 58 50 02 c0       	push   0xc0025058
c00161d4:	e8 75 0d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	8b 2f                	mov    ebp,DWORD PTR [edi]
c00161de:	01 f5                	add    ebp,esi
c00161e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161e4:	85 c0                	test   eax,eax
c00161e6:	75 19                	jne    c0016201 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d1>
c00161e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161ec:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c00161f0:	66 83 f8 0c          	cmp    ax,0xc
c00161f4:	76 05                	jbe    c00161fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cb>
c00161f6:	b8 0c 00 00 00       	mov    eax,0xc
c00161fb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00161ff:	76 6c                	jbe    c001626d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c0016201:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016206:	0f 84 79 01 00 00    	je     c0016385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	68 62 50 02 c0       	push   0xc0025062
c0016214:	e8 35 9c ff ff       	call   c000fe4e <KePanic(char const*)>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	eb 4f                	jmp    c001626d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c001621e:	8b 2f                	mov    ebp,DWORD PTR [edi]
c0016220:	01 d5                	add    ebp,edx
c0016222:	85 c0                	test   eax,eax
c0016224:	75 0e                	jne    c0016234 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x604>
c0016226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001622a:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c001622e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016232:	76 0e                	jbe    c0016242 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x612>
c0016234:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016238:	83 ec 0c             	sub    esp,0xc
c001623b:	68 7e 50 02 c0       	push   0xc002507e
c0016240:	eb 0e                	jmp    c0016250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x620>
c0016242:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016246:	83 ec 0c             	sub    esp,0xc
c0016249:	01 f5                	add    ebp,esi
c001624b:	68 87 50 02 c0       	push   0xc0025087
c0016250:	e8 f9 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016255:	8d 85 00 00 00 28    	lea    eax,[ebp+0x28000000]
c001625b:	83 c4 10             	add    esp,0x10
c001625e:	3d ff ff ff 00       	cmp    eax,0xffffff
c0016263:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016267:	77 04                	ja     c001626d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63d>
c0016269:	03 17                	add    edx,DWORD PTR [edi]
c001626b:	89 d5                	mov    ebp,edx
c001626d:	55                   	push   ebp
c001626e:	57                   	push   edi
c001626f:	ff 37                	push   DWORD PTR [edi]
c0016271:	68 90 50 02 c0       	push   0xc0025090
c0016276:	e9 bc 00 00 00       	jmp    c0016337 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x707>
c001627b:	83 f8 02             	cmp    eax,0x2
c001627e:	0f 85 d8 00 00 00    	jne    c001635c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72c>
c0016284:	8b bc 24 84 03 00 00 	mov    edi,DWORD PTR [esp+0x384]
c001628b:	2b 7c 24 1c          	sub    edi,DWORD PTR [esp+0x1c]
c001628f:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0016293:	81 fd 01 01 00 00    	cmp    ebp,0x101
c0016299:	74 23                	je     c00162be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68e>
c001629b:	81 fd 01 04 00 00    	cmp    ebp,0x401
c00162a1:	74 1b                	je     c00162be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68e>
c00162a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162a7:	0f b7 50 30          	movzx  edx,WORD PTR [eax+0x30]
c00162ab:	b8 0a 00 00 00       	mov    eax,0xa
c00162b0:	83 fa 0e             	cmp    edx,0xe
c00162b3:	77 03                	ja     c00162b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x688>
c00162b5:	8d 42 fc             	lea    eax,[edx-0x4]
c00162b8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00162bc:	76 45                	jbe    c0016303 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00162be:	55                   	push   ebp
c00162bf:	57                   	push   edi
c00162c0:	ff 37                	push   DWORD PTR [edi]
c00162c2:	68 01 51 02 c0       	push   0xc0025101
c00162c7:	e8 82 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00162cc:	58                   	pop    eax
c00162cd:	ff 37                	push   DWORD PTR [edi]
c00162cf:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c00162d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162da:	56                   	push   esi
c00162db:	68 cb 50 02 c0       	push   0xc00250cb
c00162e0:	e8 69 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00162e5:	83 c4 20             	add    esp,0x20
c00162e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00162ed:	0f 84 92 00 00 00    	je     c0016385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c00162f3:	83 ec 0c             	sub    esp,0xc
c00162f6:	68 3f 51 02 c0       	push   0xc002513f
c00162fb:	e8 4e 9b ff ff       	call   c000fe4e <KePanic(char const*)>
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	80 7c 24 30 00       	cmp    BYTE PTR [esp+0x30],0x0
c0016308:	8b 07                	mov    eax,DWORD PTR [edi]
c001630a:	74 13                	je     c001631f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ef>
c001630c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0016310:	2b ac 24 84 03 00 00 	sub    ebp,DWORD PTR [esp+0x384]
c0016317:	2b 6c 24 28          	sub    ebp,DWORD PTR [esp+0x28]
c001631b:	01 c5                	add    ebp,eax
c001631d:	eb 06                	jmp    c0016325 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f5>
c001631f:	89 c5                	mov    ebp,eax
c0016321:	2b 6c 24 28          	sub    ebp,DWORD PTR [esp+0x28]
c0016325:	01 f5                	add    ebp,esi
c0016327:	3d fe ff 0f 00       	cmp    eax,0xffffe
c001632c:	0f 46 e8             	cmovbe ebp,eax
c001632f:	55                   	push   ebp
c0016330:	57                   	push   edi
c0016331:	50                   	push   eax
c0016332:	68 5b 51 02 c0       	push   0xc002515b
c0016337:	e8 12 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001633c:	59                   	pop    ecx
c001633d:	ff 37                	push   DWORD PTR [edi]
c001633f:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c0016346:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001634a:	56                   	push   esi
c001634b:	68 cb 50 02 c0       	push   0xc00250cb
c0016350:	e8 f9 0b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016355:	83 c4 20             	add    esp,0x20
c0016358:	89 2f                	mov    DWORD PTR [edi],ebp
c001635a:	eb 67                	jmp    c00163c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001635c:	52                   	push   edx
c001635d:	52                   	push   edx
c001635e:	50                   	push   eax
c001635f:	68 98 51 02 c0       	push   0xc0025198
c0016364:	e8 e5 0b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016369:	83 c4 10             	add    esp,0x10
c001636c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016371:	74 12                	je     c0016385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x755>
c0016373:	83 ec 0c             	sub    esp,0xc
c0016376:	68 a3 51 02 c0       	push   0xc00251a3
c001637b:	e8 ce 9a ff ff       	call   c000fe4e <KePanic(char const*)>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	eb 3e                	jmp    c00163c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	53                   	push   ebx
c0016389:	e8 52 1e ff ff       	call   c00081e0 <File::close()>
c001638e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016393:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016396:	5b                   	pop    ebx
c0016397:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001639b:	e8 78 97 ff ff       	call   c000fb18 <free>
c00163a0:	5e                   	pop    esi
c00163a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00163a5:	e8 6e 97 ff ff       	call   c000fb18 <free>
c00163aa:	5f                   	pop    edi
c00163ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163af:	e8 64 97 ff ff       	call   c000fb18 <free>
c00163b4:	5d                   	pop    ebp
c00163b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163b9:	e8 5a 97 ff ff       	call   c000fb18 <free>
c00163be:	83 c4 10             	add    esp,0x10
c00163c1:	eb 21                	jmp    c00163e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7b4>
c00163c3:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00163c7:	e9 c9 fc ff ff       	jmp    c0016095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x465>
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00163d3:	e8 40 97 ff ff       	call   c000fb18 <free>
c00163d8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	e9 3f fc ff ff       	jmp    c0016023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3f3>
c00163e4:	31 c0                	xor    eax,eax
c00163e6:	eb 34                	jmp    c001641c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7ec>
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	53                   	push   ebx
c00163ec:	e8 ef 1d ff ff       	call   c00081e0 <File::close()>
c00163f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163f9:	58                   	pop    eax
c00163fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00163fe:	e8 15 97 ff ff       	call   c000fb18 <free>
c0016403:	5a                   	pop    edx
c0016404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016408:	e8 0b 97 ff ff       	call   c000fb18 <free>
c001640d:	59                   	pop    ecx
c001640e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016412:	e8 01 97 ff ff       	call   c000fb18 <free>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	b0 01                	mov    al,0x1
c001641c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0016422:	5b                   	pop    ebx
c0016423:	5e                   	pop    esi
c0016424:	5f                   	pop    edi
c0016425:	5d                   	pop    ebp
c0016426:	c3                   	ret    

c0016427 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016427:	56                   	push   esi
c0016428:	31 d2                	xor    edx,edx
c001642a:	53                   	push   ebx
c001642b:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c0016431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016435:	39 d3                	cmp    ebx,edx
c0016437:	7e 1b                	jle    c0016454 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016439:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c0016440:	39 c8                	cmp    eax,ecx
c0016442:	77 0d                	ja     c0016451 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016444:	8b 34 95 80 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d80]
c001644b:	01 c6                	add    esi,eax
c001644d:	39 ce                	cmp    esi,ecx
c001644f:	77 05                	ja     c0016456 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016451:	42                   	inc    edx
c0016452:	eb e1                	jmp    c0016435 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016454:	31 c0                	xor    eax,eax
c0016456:	5b                   	pop    ebx
c0016457:	5e                   	pop    esi
c0016458:	c3                   	ret    

c0016459 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016459:	53                   	push   ebx
c001645a:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c0016460:	31 c0                	xor    eax,eax
c0016462:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016466:	39 c3                	cmp    ebx,eax
c0016468:	7e 22                	jle    c001648c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001646a:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c0016471:	39 ca                	cmp    edx,ecx
c0016473:	77 14                	ja     c0016489 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016475:	03 14 85 80 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d80]
c001647c:	39 ca                	cmp    edx,ecx
c001647e:	76 09                	jbe    c0016489 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016480:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0016487:	eb 05                	jmp    c001648e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016489:	40                   	inc    eax
c001648a:	eb da                	jmp    c0016466 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001648c:	31 c0                	xor    eax,eax
c001648e:	5b                   	pop    ebx
c001648f:	c3                   	ret    

c0016490 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016490:	53                   	push   ebx
c0016491:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016495:	53                   	push   ebx
c0016496:	e8 8c ff ff ff       	call   c0016427 <Thr::getDriverBaseFromAddress(unsigned long)>
c001649b:	5a                   	pop    edx
c001649c:	31 d2                	xor    edx,edx
c001649e:	85 c0                	test   eax,eax
c00164a0:	74 04                	je     c00164a6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00164a2:	89 da                	mov    edx,ebx
c00164a4:	29 c2                	sub    edx,eax
c00164a6:	5b                   	pop    ebx
c00164a7:	89 d0                	mov    eax,edx
c00164a9:	c3                   	ret    

c00164aa <Thr::loadDLL(char const*, bool)>:
c00164aa:	55                   	push   ebp
c00164ab:	57                   	push   edi
c00164ac:	56                   	push   esi
c00164ad:	53                   	push   ebx
c00164ae:	81 ec 34 01 00 00    	sub    esp,0x134
c00164b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00164bb:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00164c2:	56                   	push   esi
c00164c3:	68 bb 51 02 c0       	push   0xc00251bb
c00164c8:	e8 81 0a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00164cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00164d4:	e8 2f 96 ff ff       	call   c000fb08 <malloc>
c00164d9:	83 c4 0c             	add    esp,0xc
c00164dc:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00164e2:	56                   	push   esi
c00164e3:	50                   	push   eax
c00164e4:	89 c3                	mov    ebx,eax
c00164e6:	e8 79 1c ff ff       	call   c0008164 <File::File(char const*, Process*)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	85 db                	test   ebx,ebx
c00164f0:	75 3c                	jne    c001652e <Thr::loadDLL(char const*, bool)+0x84>
c00164f2:	89 e8                	mov    eax,ebp
c00164f4:	84 c0                	test   al,al
c00164f6:	0f 84 02 02 00 00    	je     c00166fe <Thr::loadDLL(char const*, bool)+0x254>
c00164fc:	50                   	push   eax
c00164fd:	50                   	push   eax
c00164fe:	68 cc 51 02 c0       	push   0xc00251cc
c0016503:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0016507:	57                   	push   edi
c0016508:	e8 43 a1 fe ff       	call   c0000650 <strcpy>
c001650d:	58                   	pop    eax
c001650e:	5a                   	pop    edx
c001650f:	56                   	push   esi
c0016510:	57                   	push   edi
c0016511:	e8 5a a3 fe ff       	call   c0000870 <strcat>
c0016516:	59                   	pop    ecx
c0016517:	58                   	pop    eax
c0016518:	68 e3 51 02 c0       	push   0xc00251e3
c001651d:	57                   	push   edi
c001651e:	e8 4d a3 fe ff       	call   c0000870 <strcat>
c0016523:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016526:	e8 23 99 ff ff       	call   c000fe4e <KePanic(char const*)>
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	50                   	push   eax
c001652f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016533:	50                   	push   eax
c0016534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016538:	50                   	push   eax
c0016539:	53                   	push   ebx
c001653a:	e8 45 1f ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	85 db                	test   ebx,ebx
c0016544:	89 c7                	mov    edi,eax
c0016546:	74 0c                	je     c0016554 <Thr::loadDLL(char const*, bool)+0xaa>
c0016548:	8b 03                	mov    eax,DWORD PTR [ebx]
c001654a:	83 ec 0c             	sub    esp,0xc
c001654d:	53                   	push   ebx
c001654e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001655c:	50                   	push   eax
c001655d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016565:	57                   	push   edi
c0016566:	68 e5 51 02 c0       	push   0xc00251e5
c001656b:	e8 de 09 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016570:	83 c4 20             	add    esp,0x20
c0016573:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016578:	75 0a                	jne    c0016584 <Thr::loadDLL(char const*, bool)+0xda>
c001657a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001657e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016582:	75 3e                	jne    c00165c2 <Thr::loadDLL(char const*, bool)+0x118>
c0016584:	89 e8                	mov    eax,ebp
c0016586:	31 db                	xor    ebx,ebx
c0016588:	84 c0                	test   al,al
c001658a:	0f 84 6e 01 00 00    	je     c00166fe <Thr::loadDLL(char const*, bool)+0x254>
c0016590:	50                   	push   eax
c0016591:	50                   	push   eax
c0016592:	68 06 52 02 c0       	push   0xc0025206
c0016597:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001659b:	53                   	push   ebx
c001659c:	e8 af a0 fe ff       	call   c0000650 <strcpy>
c00165a1:	58                   	pop    eax
c00165a2:	5a                   	pop    edx
c00165a3:	56                   	push   esi
c00165a4:	53                   	push   ebx
c00165a5:	e8 c6 a2 fe ff       	call   c0000870 <strcat>
c00165aa:	59                   	pop    ecx
c00165ab:	5f                   	pop    edi
c00165ac:	68 e3 51 02 c0       	push   0xc00251e3
c00165b1:	53                   	push   ebx
c00165b2:	e8 b9 a2 fe ff       	call   c0000870 <strcat>
c00165b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ba:	e8 8f 98 ff ff       	call   c000fe4e <KePanic(char const*)>
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	53                   	push   ebx
c00165c3:	6a 03                	push   0x3
c00165c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00165cd:	05 ff 0f 00 00       	add    eax,0xfff
c00165d2:	83 d2 00             	adc    edx,0x0
c00165d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00165d9:	50                   	push   eax
c00165da:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00165e0:	e8 b9 d4 ff ff       	call   c0013a9e <VAS::allocatePages(int, int)>
c00165e5:	89 c3                	mov    ebx,eax
c00165e7:	58                   	pop    eax
c00165e8:	5a                   	pop    edx
c00165e9:	53                   	push   ebx
c00165ea:	68 86 43 02 c0       	push   0xc0024386
c00165ef:	e8 5a 09 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00165f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00165f7:	e8 84 9f fe ff       	call   c0000580 <strlen>
c00165fc:	8b 3d 60 f2 02 c0    	mov    edi,DWORD PTR ds:0xc002f260
c0016602:	40                   	inc    eax
c0016603:	89 04 24             	mov    DWORD PTR [esp],eax
c0016606:	e8 fd 94 ff ff       	call   c000fb08 <malloc>
c001660b:	59                   	pop    ecx
c001660c:	89 04 bd 80 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0980],eax
c0016613:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0016618:	5f                   	pop    edi
c0016619:	56                   	push   esi
c001661a:	ff 34 85 80 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0980]
c0016621:	e8 2a a0 fe ff       	call   c0000650 <strcpy>
c0016626:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c001662b:	89 1c 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],ebx
c0016632:	8d 50 01             	lea    edx,[eax+0x1]
c0016635:	89 15 60 f2 02 c0    	mov    DWORD PTR ds:0xc002f260,edx
c001663b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001663f:	83 c4 0c             	add    esp,0xc
c0016642:	6a 01                	push   0x1
c0016644:	53                   	push   ebx
c0016645:	56                   	push   esi
c0016646:	89 14 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],edx
c001664d:	e8 de f5 ff ff       	call   c0015c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	89 c7                	mov    edi,eax
c0016657:	89 f8                	mov    eax,edi
c0016659:	83 f0 01             	xor    eax,0x1
c001665c:	84 c0                	test   al,al
c001665e:	74 18                	je     c0016678 <Thr::loadDLL(char const*, bool)+0x1ce>
c0016660:	89 e8                	mov    eax,ebp
c0016662:	84 c0                	test   al,al
c0016664:	74 12                	je     c0016678 <Thr::loadDLL(char const*, bool)+0x1ce>
c0016666:	83 ec 0c             	sub    esp,0xc
c0016669:	68 1f 52 02 c0       	push   0xc002521f
c001666e:	e8 db 97 ff ff       	call   c000fe4e <KePanic(char const*)>
c0016673:	83 c4 10             	add    esp,0x10
c0016676:	eb 06                	jmp    c001667e <Thr::loadDLL(char const*, bool)+0x1d4>
c0016678:	89 f8                	mov    eax,edi
c001667a:	84 c0                	test   al,al
c001667c:	75 10                	jne    c001668e <Thr::loadDLL(char const*, bool)+0x1e4>
c001667e:	83 ec 0c             	sub    esp,0xc
c0016681:	68 3e 52 02 c0       	push   0xc002523e
c0016686:	e8 c3 97 ff ff       	call   c000fe4e <KePanic(char const*)>
c001668b:	83 c4 10             	add    esp,0x10
c001668e:	31 f6                	xor    esi,esi
c0016690:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016698:	05 ff 0f 00 00       	add    eax,0xfff
c001669d:	83 d2 00             	adc    edx,0x0
c00166a0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00166a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166a8:	c1 ea 0c             	shr    edx,0xc
c00166ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166af:	ba 00 00 00 00       	mov    edx,0x0
c00166b4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00166b8:	89 d0                	mov    eax,edx
c00166ba:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00166be:	73 32                	jae    c00166f2 <Thr::loadDLL(char const*, bool)+0x248>
c00166c0:	50                   	push   eax
c00166c1:	50                   	push   eax
c00166c2:	89 f0                	mov    eax,esi
c00166c4:	c1 e0 0c             	shl    eax,0xc
c00166c7:	01 d8                	add    eax,ebx
c00166c9:	50                   	push   eax
c00166ca:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00166d0:	e8 c7 ce ff ff       	call   c001359c <VAS::getPageTableEntry(unsigned long)>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00166da:	a8 60                	test   al,0x60
c00166dc:	75 11                	jne    c00166ef <Thr::loadDLL(char const*, bool)+0x245>
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00166e6:	50                   	push   eax
c00166e7:	e8 f3 98 ff ff       	call   c000ffdf <Phys::freePage(unsigned long)>
c00166ec:	83 c4 10             	add    esp,0x10
c00166ef:	46                   	inc    esi
c00166f0:	eb 9e                	jmp    c0016690 <Thr::loadDLL(char const*, bool)+0x1e6>
c00166f2:	89 f8                	mov    eax,edi
c00166f4:	84 c0                	test   al,al
c00166f6:	b8 00 00 00 00       	mov    eax,0x0
c00166fb:	0f 44 d8             	cmove  ebx,eax
c00166fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016704:	89 d8                	mov    eax,ebx
c0016706:	5b                   	pop    ebx
c0016707:	5e                   	pop    esi
c0016708:	5f                   	pop    edi
c0016709:	5d                   	pop    ebp
c001670a:	c3                   	ret    

c001670b <Thr::executeDLL(unsigned long, void*)>:
c001670b:	56                   	push   esi
c001670c:	53                   	push   ebx
c001670d:	52                   	push   edx
c001670e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016712:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016716:	85 db                	test   ebx,ebx
c0016718:	75 10                	jne    c001672a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001671a:	83 ec 0c             	sub    esp,0xc
c001671d:	68 5a 52 02 c0       	push   0xc002525a
c0016722:	e8 27 97 ff ff       	call   c000fe4e <KePanic(char const*)>
c0016727:	83 c4 10             	add    esp,0x10
c001672a:	50                   	push   eax
c001672b:	50                   	push   eax
c001672c:	53                   	push   ebx
c001672d:	68 84 52 02 c0       	push   0xc0025284
c0016732:	e8 17 08 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016737:	89 d8                	mov    eax,ebx
c0016739:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001673d:	83 c4 14             	add    esp,0x14
c0016740:	5b                   	pop    ebx
c0016741:	5e                   	pop    esi
c0016742:	ff e0                	jmp    eax

c0016744 <KeProcessExec(Process*, char const*)>:
c0016744:	56                   	push   esi
c0016745:	53                   	push   ebx
c0016746:	83 ec 04             	sub    esp,0x4
c0016749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001674d:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016753:	85 f6                	test   esi,esi
c0016755:	74 16                	je     c001676d <KeProcessExec(Process*, char const*)+0x29>
c0016757:	83 ec 0c             	sub    esp,0xc
c001675a:	56                   	push   esi
c001675b:	e8 ce d0 ff ff       	call   c001382e <VAS::~VAS()>
c0016760:	58                   	pop    eax
c0016761:	5a                   	pop    edx
c0016762:	6a 14                	push   0x14
c0016764:	56                   	push   esi
c0016765:	e8 01 6b ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001676a:	83 c4 10             	add    esp,0x10
c001676d:	83 ec 0c             	sub    esp,0xc
c0016770:	6a 14                	push   0x14
c0016772:	e8 91 93 ff ff       	call   c000fb08 <malloc>
c0016777:	89 c6                	mov    esi,eax
c0016779:	58                   	pop    eax
c001677a:	5a                   	pop    edx
c001677b:	6a 00                	push   0x0
c001677d:	56                   	push   esi
c001677e:	e8 57 d5 ff ff       	call   c0013cda <VAS::VAS(bool)>
c0016783:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016789:	59                   	pop    ecx
c001678a:	5e                   	pop    esi
c001678b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001678f:	50                   	push   eax
c0016790:	53                   	push   ebx
c0016791:	e8 ae ee ff ff       	call   c0015644 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016796:	83 c4 14             	add    esp,0x14
c0016799:	31 c0                	xor    eax,eax
c001679b:	5b                   	pop    ebx
c001679c:	5e                   	pop    esi
c001679d:	c3                   	ret    
c001679e:	66 90                	xchg   ax,ax

c00167a0 <userModeEntryPoint(void*)>:
c00167a0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00167a8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00167ad:	85 c0                	test   eax,eax
c00167af:	75 03                	jne    c00167b4 <userModeEntryPoint(void*)+0x14>
c00167b1:	fb                   	sti    
c00167b2:	66 90                	xchg   ax,ax
c00167b4:	fb                   	sti    
c00167b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167bd:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00167c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167c7:	e9 73 9a fe ff       	jmp    c000023f <goToUsermode>

c00167cc <changeTSS>:
c00167cc:	83 ec 14             	sub    esp,0x14
c00167cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00167d7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00167dc:	c1 e2 15             	shl    edx,0x15
c00167df:	29 d0                	sub    eax,edx
c00167e1:	50                   	push   eax
c00167e2:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c00167e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167ed:	05 68 11 00 00       	add    eax,0x1168
c00167f2:	50                   	push   eax
c00167f3:	e8 78 c3 ff ff       	call   c0012b70 <TSS::setESP(unsigned long)>
c00167f8:	83 c4 1c             	add    esp,0x1c
c00167fb:	c3                   	ret    

c00167fc <switchToThread(ThreadControlBlock*)>:
c00167fc:	57                   	push   edi
c00167fd:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c0016803:	56                   	push   esi
c0016804:	53                   	push   ebx
c0016805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016809:	85 c9                	test   ecx,ecx
c001680b:	0f 85 9b 00 00 00    	jne    c00168ac <switchToThread(ThreadControlBlock*)+0xb0>
c0016811:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016815:	81 fa ff 00 00 00    	cmp    edx,0xff
c001681b:	0f 84 87 00 00 00    	je     c00168a8 <switchToThread(ThreadControlBlock*)+0xac>
c0016821:	b8 00 04 00 00       	mov    eax,0x400
c0016826:	29 d0                	sub    eax,edx
c0016828:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001682b:	d1 f8                	sar    eax,1
c001682d:	01 d0                	add    eax,edx
c001682f:	90                   	nop
c0016830:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016833:	e8 2f 3a 00 00       	call   c001a267 <HalQueryPerformanceCounter()>
c0016838:	a3 70 fa 02 c0       	mov    ds:0xc002fa70,eax
c001683d:	89 c6                	mov    esi,eax
c001683f:	89 d7                	mov    edi,edx
c0016841:	2b 35 60 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa60
c0016847:	a3 60 fa 02 c0       	mov    ds:0xc002fa60,eax
c001684c:	1b 3d 64 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa64
c0016852:	89 35 68 fa 02 c0    	mov    DWORD PTR ds:0xc002fa68,esi
c0016858:	89 15 74 fa 02 c0    	mov    DWORD PTR ds:0xc002fa74,edx
c001685e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016864:	89 15 64 fa 02 c0    	mov    DWORD PTR ds:0xc002fa64,edx
c001686a:	89 3d 6c fa 02 c0    	mov    DWORD PTR ds:0xc002fa6c,edi
c0016870:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016873:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016876:	01 c6                	add    esi,eax
c0016878:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001687b:	11 d7                	adc    edi,edx
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016883:	53                   	push   ebx
c0016884:	e8 ee 99 fe ff       	call   c0000277 <switchToThreadASM>
c0016889:	0f 20 c0             	mov    eax,cr0
c001688c:	83 c8 08             	or     eax,0x8
c001688f:	0f 22 c0             	mov    cr0,eax
c0016892:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689e:	5b                   	pop    ebx
c001689f:	5e                   	pop    esi
c00168a0:	5f                   	pop    edi
c00168a1:	e9 22 ea ff ff       	jmp    c00152c8 <KeCheckAlarm(ThreadControlBlock*)>
c00168a6:	66 90                	xchg   ax,ax
c00168a8:	31 c0                	xor    eax,eax
c00168aa:	eb 84                	jmp    c0016830 <switchToThread(ThreadControlBlock*)+0x34>
c00168ac:	5b                   	pop    ebx
c00168ad:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	c3                   	ret    
c00168ba:	66 90                	xchg   ax,ax

c00168bc <Process::addArgs(char**)>:
c00168bc:	57                   	push   edi
c00168bd:	56                   	push   esi
c00168be:	53                   	push   ebx
c00168bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168c3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00168c7:	85 f6                	test   esi,esi
c00168c9:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00168d3:	74 4f                	je     c0016924 <Process::addArgs(char**)+0x68>
c00168d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00168d7:	85 c0                	test   eax,eax
c00168d9:	74 49                	je     c0016924 <Process::addArgs(char**)+0x68>
c00168db:	31 db                	xor    ebx,ebx
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	50                   	push   eax
c00168e4:	e8 97 9c fe ff       	call   c0000580 <strlen>
c00168e9:	83 c0 01             	add    eax,0x1
c00168ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00168ef:	e8 14 92 ff ff       	call   c000fb08 <malloc>
c00168f4:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c00168fb:	5a                   	pop    edx
c00168fc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00168ff:	83 c3 01             	add    ebx,0x1
c0016902:	59                   	pop    ecx
c0016903:	52                   	push   edx
c0016904:	50                   	push   eax
c0016905:	e8 46 9d fe ff       	call   c0000650 <strcpy>
c001690a:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	83 c1 01             	add    ecx,0x1
c0016916:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c001691c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001691f:	85 c0                	test   eax,eax
c0016921:	75 bd                	jne    c00168e0 <Process::addArgs(char**)+0x24>
c0016923:	90                   	nop
c0016924:	5b                   	pop    ebx
c0016925:	5e                   	pop    esi
c0016926:	5f                   	pop    edi
c0016927:	c3                   	ret    

c0016928 <Process::Process(char const*, Process*, char**)>:
c0016928:	56                   	push   esi
c0016929:	53                   	push   ebx
c001692a:	83 ec 14             	sub    esp,0x14
c001692d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016931:	05 0c 02 00 00       	add    eax,0x20c
c0016936:	bb 07 00 00 00       	mov    ebx,0x7
c001693b:	89 c6                	mov    esi,eax
c001693d:	8d 76 00             	lea    esi,[esi+0x0]
c0016940:	85 db                	test   ebx,ebx
c0016942:	78 14                	js     c0016958 <Process::Process(char const*, Process*, char**)+0x30>
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	56                   	push   esi
c0016948:	e8 93 ba 00 00       	call   c00223e0 <ThreadControlBlock::ThreadControlBlock()>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	83 c6 73             	add    esi,0x73
c0016953:	83 eb 01             	sub    ebx,0x1
c0016956:	eb e8                	jmp    c0016940 <Process::Process(char const*, Process*, char**)+0x18>
c0016958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016967:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016975:	e8 f2 7d ff ff       	call   c000e76c <KeNewProcessEnv(Process*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	89 c2                	mov    edx,eax
c001697f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016983:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016996:	a1 dc 6e 02 c0       	mov    eax,ds:0xc0026edc
c001699b:	8d 50 01             	lea    edx,[eax+0x1]
c001699e:	89 15 dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,edx
c00169a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a8:	89 02                	mov    DWORD PTR [edx],eax
c00169aa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169b9:	e8 4a 91 ff ff       	call   c000fb08 <malloc>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	89 c3                	mov    ebx,eax
c00169c3:	83 ec 08             	sub    esp,0x8
c00169c6:	6a 00                	push   0x0
c00169c8:	53                   	push   ebx
c00169c9:	e8 0c d3 ff ff       	call   c0013cda <VAS::VAS(bool)>
c00169ce:	83 c4 10             	add    esp,0x10
c00169d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00169db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169df:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00169e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00169f1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00169f7:	e8 1f a5 ff ff       	call   c0010f1b <KeInitSignals()>
c00169fc:	89 c2                	mov    edx,eax
c00169fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a02:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a0c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a12:	85 c0                	test   eax,eax
c0016a14:	74 42                	je     c0016a58 <Process::Process(char const*, Process*, char**)+0x130>
c0016a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a20:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a34:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a44:	05 0c 01 00 00       	add    eax,0x10c
c0016a49:	83 ec 08             	sub    esp,0x8
c0016a4c:	52                   	push   edx
c0016a4d:	50                   	push   eax
c0016a4e:	e8 fd 9b fe ff       	call   c0000650 <strcpy>
c0016a53:	83 c4 10             	add    esp,0x10
c0016a56:	eb 7c                	jmp    c0016ad4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016a58:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a67:	e8 9c 90 ff ff       	call   c000fb08 <malloc>
c0016a6c:	83 c4 10             	add    esp,0x10
c0016a6f:	89 c3                	mov    ebx,eax
c0016a71:	83 ec 08             	sub    esp,0x8
c0016a74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a78:	53                   	push   ebx
c0016a79:	e8 12 be ff ff       	call   c0012890 <VgaText::VgaText(char const*)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a85:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016a95:	83 ec 0c             	sub    esp,0xc
c0016a98:	50                   	push   eax
c0016a99:	e8 58 b6 ff ff       	call   c00120f6 <addToTerminalCycle(VgaText*)>
c0016a9e:	83 c4 10             	add    esp,0x10
c0016aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016aab:	83 ec 0c             	sub    esp,0xc
c0016aae:	50                   	push   eax
c0016aaf:	e8 b3 b8 ff ff       	call   c0012367 <setActiveTerminal(VgaText*)>
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abb:	05 0c 01 00 00       	add    eax,0x10c
c0016ac0:	83 ec 08             	sub    esp,0x8
c0016ac3:	68 a3 52 02 c0       	push   0xc00252a3
c0016ac8:	50                   	push   eax
c0016ac9:	e8 82 9b fe ff       	call   c0000650 <strcpy>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad8:	83 c0 0c             	add    eax,0xc
c0016adb:	83 ec 08             	sub    esp,0x8
c0016ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ae2:	50                   	push   eax
c0016ae3:	e8 68 9b fe ff       	call   c0000650 <strcpy>
c0016ae8:	83 c4 10             	add    esp,0x10
c0016aeb:	83 ec 08             	sub    esp,0x8
c0016aee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016af2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016af6:	e8 c1 fd ff ff       	call   c00168bc <Process::addArgs(char**)>
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b02:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b08:	83 e2 7f             	and    edx,0x7f
c0016b0b:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016b11:	83 ec 08             	sub    esp,0x8
c0016b14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b1c:	e8 23 eb ff ff       	call   c0015644 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016b21:	83 c4 10             	add    esp,0x10
c0016b24:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016b28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016b2c:	83 f0 01             	xor    eax,0x1
c0016b2f:	88 c2                	mov    dl,al
c0016b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b35:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b41:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016b46:	52                   	push   edx
c0016b47:	50                   	push   eax
c0016b48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b4c:	68 fc 52 02 c0       	push   0xc00252fc
c0016b51:	e8 f8 03 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016b56:	83 c4 10             	add    esp,0x10
c0016b59:	90                   	nop
c0016b5a:	83 c4 14             	add    esp,0x14
c0016b5d:	5b                   	pop    ebx
c0016b5e:	5e                   	pop    esi
c0016b5f:	c3                   	ret    

c0016b60 <Process::Process(bool, char const*, Process*, char**)>:
c0016b60:	56                   	push   esi
c0016b61:	53                   	push   ebx
c0016b62:	83 ec 24             	sub    esp,0x24
c0016b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b71:	05 0c 02 00 00       	add    eax,0x20c
c0016b76:	bb 07 00 00 00       	mov    ebx,0x7
c0016b7b:	89 c6                	mov    esi,eax
c0016b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b80:	85 db                	test   ebx,ebx
c0016b82:	78 14                	js     c0016b98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	56                   	push   esi
c0016b88:	e8 53 b8 00 00       	call   c00223e0 <ThreadControlBlock::ThreadControlBlock()>
c0016b8d:	83 c4 10             	add    esp,0x10
c0016b90:	83 c6 73             	add    esi,0x73
c0016b93:	83 eb 01             	sub    ebx,0x1
c0016b96:	eb e8                	jmp    c0016b80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba7:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016bae:	83 ec 0c             	sub    esp,0xc
c0016bb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bb5:	e8 b2 7b ff ff       	call   c000e76c <KeNewProcessEnv(Process*)>
c0016bba:	83 c4 10             	add    esp,0x10
c0016bbd:	89 c2                	mov    edx,eax
c0016bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc3:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bcd:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016bd6:	a1 dc 6e 02 c0       	mov    eax,ds:0xc0026edc
c0016bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0016bde:	89 15 dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,edx
c0016be4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016be8:	89 02                	mov    DWORD PTR [edx],eax
c0016bea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016bf9:	e8 0a 8f ff ff       	call   c000fb08 <malloc>
c0016bfe:	83 c4 10             	add    esp,0x10
c0016c01:	89 c3                	mov    ebx,eax
c0016c03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016c08:	83 ec 08             	sub    esp,0x8
c0016c0b:	50                   	push   eax
c0016c0c:	53                   	push   ebx
c0016c0d:	e8 c8 d0 ff ff       	call   c0013cda <VAS::VAS(bool)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c19:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c23:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016c35:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016c3b:	e8 db a2 ff ff       	call   c0010f1b <KeInitSignals()>
c0016c40:	89 c2                	mov    edx,eax
c0016c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c46:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c50:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c56:	85 c0                	test   eax,eax
c0016c58:	74 42                	je     c0016c9c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c5e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c64:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016c6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c6e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c78:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c88:	05 0c 01 00 00       	add    eax,0x10c
c0016c8d:	83 ec 08             	sub    esp,0x8
c0016c90:	52                   	push   edx
c0016c91:	50                   	push   eax
c0016c92:	e8 b9 99 fe ff       	call   c0000650 <strcpy>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	eb 7c                	jmp    c0016d18 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016c9c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016cab:	e8 58 8e ff ff       	call   c000fb08 <malloc>
c0016cb0:	83 c4 10             	add    esp,0x10
c0016cb3:	89 c3                	mov    ebx,eax
c0016cb5:	83 ec 08             	sub    esp,0x8
c0016cb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016cbc:	53                   	push   ebx
c0016cbd:	e8 ce bb ff ff       	call   c0012890 <VgaText::VgaText(char const*)>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cc9:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cd3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016cd9:	83 ec 0c             	sub    esp,0xc
c0016cdc:	50                   	push   eax
c0016cdd:	e8 14 b4 ff ff       	call   c00120f6 <addToTerminalCycle(VgaText*)>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ce9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016cef:	83 ec 0c             	sub    esp,0xc
c0016cf2:	50                   	push   eax
c0016cf3:	e8 6f b6 ff ff       	call   c0012367 <setActiveTerminal(VgaText*)>
c0016cf8:	83 c4 10             	add    esp,0x10
c0016cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cff:	05 0c 01 00 00       	add    eax,0x10c
c0016d04:	83 ec 08             	sub    esp,0x8
c0016d07:	68 a3 52 02 c0       	push   0xc00252a3
c0016d0c:	50                   	push   eax
c0016d0d:	e8 3e 99 fe ff       	call   c0000650 <strcpy>
c0016d12:	83 c4 10             	add    esp,0x10
c0016d15:	8d 76 00             	lea    esi,[esi+0x0]
c0016d18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d1c:	83 c0 0c             	add    eax,0xc
c0016d1f:	83 ec 08             	sub    esp,0x8
c0016d22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d26:	50                   	push   eax
c0016d27:	e8 24 99 fe ff       	call   c0000650 <strcpy>
c0016d2c:	83 c4 10             	add    esp,0x10
c0016d2f:	83 ec 08             	sub    esp,0x8
c0016d32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d3a:	e8 7d fb ff ff       	call   c00168bc <Process::addArgs(char**)>
c0016d3f:	83 c4 10             	add    esp,0x10
c0016d42:	90                   	nop
c0016d43:	83 c4 24             	add    esp,0x24
c0016d46:	5b                   	pop    ebx
c0016d47:	5e                   	pop    esi
c0016d48:	c3                   	ret    
c0016d49:	8d 76 00             	lea    esi,[esi+0x0]

c0016d4c <taskStartupFunction>:
c0016d4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d51:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016d54:	c3                   	ret    
c0016d55:	8d 76 00             	lea    esi,[esi+0x0]

c0016d58 <KeDisablePreemption()>:
c0016d58:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016d5d:	85 c0                	test   eax,eax
c0016d5f:	75 13                	jne    c0016d74 <KeDisablePreemption()+0x1c>
c0016d61:	8a 15 d4 d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0d4
c0016d67:	c6 05 d4 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0d4,0x0
c0016d6e:	88 15 08 fa 02 c0    	mov    BYTE PTR ds:0xc002fa08,dl
c0016d74:	83 c0 01             	add    eax,0x1
c0016d77:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016d7c:	c3                   	ret    
c0016d7d:	8d 76 00             	lea    esi,[esi+0x0]

c0016d80 <KeRestorePreemption()>:
c0016d80:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016d85:	83 e8 01             	sub    eax,0x1
c0016d88:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016d8d:	75 0d                	jne    c0016d9c <KeRestorePreemption()+0x1c>
c0016d8f:	a0 08 fa 02 c0       	mov    al,ds:0xc002fa08
c0016d94:	a2 d4 d0 02 c0       	mov    ds:0xc002d0d4,al
c0016d99:	8d 76 00             	lea    esi,[esi+0x0]
c0016d9c:	c3                   	ret    
c0016d9d:	90                   	nop
c0016d9e:	66 90                	xchg   ax,ax

c0016da0 <Process::createThread(void (*)(void*), void*, int)>:
c0016da0:	55                   	push   ebp
c0016da1:	31 c9                	xor    ecx,ecx
c0016da3:	57                   	push   edi
c0016da4:	56                   	push   esi
c0016da5:	53                   	push   ebx
c0016da6:	83 ec 0c             	sub    esp,0xc
c0016da9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016dad:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016db4:	89 f2                	mov    edx,esi
c0016db6:	66 90                	xchg   ax,ax
c0016db8:	0f b7 c2             	movzx  eax,dx
c0016dbb:	80 e2 01             	and    dl,0x1
c0016dbe:	74 18                	je     c0016dd8 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016dc0:	d1 f8                	sar    eax,1
c0016dc2:	83 c1 01             	add    ecx,0x1
c0016dc5:	83 f9 10             	cmp    ecx,0x10
c0016dc8:	89 c2                	mov    edx,eax
c0016dca:	75 ec                	jne    c0016db8 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016dcc:	83 c4 0c             	add    esp,0xc
c0016dcf:	31 db                	xor    ebx,ebx
c0016dd1:	89 d8                	mov    eax,ebx
c0016dd3:	5b                   	pop    ebx
c0016dd4:	5e                   	pop    esi
c0016dd5:	5f                   	pop    edi
c0016dd6:	5d                   	pop    ebp
c0016dd7:	c3                   	ret    
c0016dd8:	b8 01 00 00 00       	mov    eax,0x1
c0016ddd:	d3 e0                	shl    eax,cl
c0016ddf:	09 c6                	or     esi,eax
c0016de1:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016de8:	6b c1 73             	imul   eax,ecx,0x73
c0016deb:	01 d8                	add    eax,ebx
c0016ded:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016df4:	75 0a                	jne    c0016e00 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016df6:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016e00:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e06:	6b f9 73             	imul   edi,ecx,0x73
c0016e09:	83 ec 0c             	sub    esp,0xc
c0016e0c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016e0f:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016e12:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016e18:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016e1e:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016e24:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016e2b:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016e35:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016e3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e3f:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016e49:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016e50:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016e57:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016e5d:	89 ca                	mov    edx,ecx
c0016e5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016e63:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016e6a:	f7 da                	neg    edx
c0016e6c:	c1 e2 15             	shl    edx,0x15
c0016e6f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016e75:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016e7b:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016e7f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016e89:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016e8f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016e99:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016e9f:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016ea5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016eaf:	83 e2 80             	and    edx,0xffffff80
c0016eb2:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016eb8:	68 00 01 00 00       	push   0x100
c0016ebd:	e8 46 8c ff ff       	call   c000fb08 <malloc>
c0016ec2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016ec5:	58                   	pop    eax
c0016ec6:	5a                   	pop    edx
c0016ec7:	53                   	push   ebx
c0016ec8:	68 4c fa 02 c0       	push   0xc002fa4c
c0016ecd:	e8 ba b0 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ed2:	83 c4 10             	add    esp,0x10
c0016ed5:	89 d8                	mov    eax,ebx
c0016ed7:	83 c4 0c             	add    esp,0xc
c0016eda:	5b                   	pop    ebx
c0016edb:	5e                   	pop    esi
c0016edc:	5f                   	pop    edi
c0016edd:	5d                   	pop    ebp
c0016ede:	c3                   	ret    
c0016edf:	90                   	nop

c0016ee0 <Process::createUserThread()>:
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	68 80 00 00 00       	push   0x80
c0016ee8:	6a 00                	push   0x0
c0016eea:	68 a0 67 01 c0       	push   0xc00167a0
c0016eef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ef3:	50                   	push   eax
c0016ef4:	e8 a7 fe ff ff       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c0016ef9:	83 c4 1c             	add    esp,0x1c
c0016efc:	c3                   	ret    
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]

c0016f00 <setupMultitasking(void (*)())>:
c0016f00:	56                   	push   esi
c0016f01:	53                   	push   ebx
c0016f02:	83 ec 04             	sub    esp,0x4
c0016f05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f09:	eb 11                	jmp    c0016f1c <setupMultitasking(void (*)())+0x1c>
c0016f0b:	90                   	nop
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	68 4c fa 02 c0       	push   0xc002fa4c
c0016f14:	e8 b7 af 00 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	68 4c fa 02 c0       	push   0xc002fa4c
c0016f24:	e8 83 af 00 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f29:	83 c4 10             	add    esp,0x10
c0016f2c:	84 c0                	test   al,al
c0016f2e:	74 dc                	je     c0016f0c <setupMultitasking(void (*)())+0xc>
c0016f30:	83 ec 0c             	sub    esp,0xc
c0016f33:	68 c4 07 00 00       	push   0x7c4
c0016f38:	e8 cb 8b ff ff       	call   c000fb08 <malloc>
c0016f3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016f44:	6a 00                	push   0x0
c0016f46:	68 a7 52 02 c0       	push   0xc00252a7
c0016f4b:	6a 01                	push   0x1
c0016f4d:	50                   	push   eax
c0016f4e:	89 c3                	mov    ebx,eax
c0016f50:	e8 0b fc ff ff       	call   c0016b60 <Process::Process(bool, char const*, Process*, char**)>
c0016f55:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016f5b:	83 c4 14             	add    esp,0x14
c0016f5e:	89 1d 58 fa 02 c0    	mov    DWORD PTR ds:0xc002fa58,ebx
c0016f64:	50                   	push   eax
c0016f65:	e8 fd b3 ff ff       	call   c0012367 <setActiveTerminal(VgaText*)>
c0016f6a:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016f71:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016f7b:	83 c8 01             	or     eax,0x1
c0016f7e:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016f85:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016f8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016f8e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016f98:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016f9e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016fa8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016fae:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016fb8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016fc2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016fc8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016fce:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016fd8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016fe2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016fe9:	e8 1a 8b ff ff       	call   c000fb08 <malloc>
c0016fee:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016ff8:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016fff:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0017006:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c001700d:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0017014:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001701a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017020:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017026:	5a                   	pop    edx
c0017027:	59                   	pop    ecx
c0017028:	68 a3 52 02 c0       	push   0xc00252a3
c001702d:	50                   	push   eax
c001702e:	e8 1d 96 fe ff       	call   c0000650 <strcpy>
c0017033:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001703a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001703e:	83 c4 14             	add    esp,0x14
c0017041:	5b                   	pop    ebx
c0017042:	5e                   	pop    esi
c0017043:	e9 21 92 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017048 <schedule()>:
c0017048:	8b 15 2c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa2c
c001704e:	85 d2                	test   edx,edx
c0017050:	74 0e                	je     c0017060 <schedule()+0x18>
c0017052:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c001705c:	c3                   	ret    
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	53                   	push   ebx
c0017061:	83 ec 14             	sub    esp,0x14
c0017064:	68 4c fa 02 c0       	push   0xc002fa4c
c0017069:	e8 3e ae 00 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001706e:	83 c4 10             	add    esp,0x10
c0017071:	84 c0                	test   al,al
c0017073:	75 3f                	jne    c00170b4 <schedule()+0x6c>
c0017075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001707a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001707d:	83 fa 01             	cmp    edx,0x1
c0017080:	74 3a                	je     c00170bc <schedule()+0x74>
c0017082:	66 90                	xchg   ax,ax
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	68 4c fa 02 c0       	push   0xc002fa4c
c001708c:	e8 37 ae 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017091:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017098:	89 c3                	mov    ebx,eax
c001709a:	e8 31 ae 00 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001709f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00170a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170a9:	e8 4e f7 ff ff       	call   c00167fc <switchToThread(ThreadControlBlock*)>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	8d 76 00             	lea    esi,[esi+0x0]
c00170b4:	83 c4 08             	add    esp,0x8
c00170b7:	5b                   	pop    ebx
c00170b8:	c3                   	ret    
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]
c00170bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170c3:	83 ec 08             	sub    esp,0x8
c00170c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170cb:	50                   	push   eax
c00170cc:	68 4c fa 02 c0       	push   0xc002fa4c
c00170d1:	e8 b6 ae 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	eb a9                	jmp    c0017084 <schedule()+0x3c>
c00170db:	90                   	nop

c00170dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00170eb:	e8 58 ff ff ff       	call   c0017048 <schedule()>
c00170f0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00170f8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00170fd:	85 c0                	test   eax,eax
c00170ff:	75 03                	jne    c0017104 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0017101:	fb                   	sti    
c0017102:	66 90                	xchg   ax,ax
c0017104:	83 c4 0c             	add    esp,0xc
c0017107:	c3                   	ret    

c0017108 <blockTask(TaskState)>:
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	fa                   	cli    
c001710c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017111:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017115:	83 c0 01             	add    eax,0x1
c0017118:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001711d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017122:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017125:	e8 1e ff ff ff       	call   c0017048 <schedule()>
c001712a:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017132:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017138:	85 d2                	test   edx,edx
c001713a:	75 04                	jne    c0017140 <blockTask(TaskState)+0x38>
c001713c:	fb                   	sti    
c001713d:	8d 76 00             	lea    esi,[esi+0x0]
c0017140:	83 c4 0c             	add    esp,0xc
c0017143:	c3                   	ret    

c0017144 <waitTask(int, int*, int)>:
c0017144:	83 ec 18             	sub    esp,0x18
c0017147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001714c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017150:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017153:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001715c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001715f:	6a 07                	push   0x7
c0017161:	e8 a2 ff ff ff       	call   c0017108 <blockTask(TaskState)>
c0017166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017171:	85 d2                	test   edx,edx
c0017173:	74 0b                	je     c0017180 <waitTask(int, int*, int)+0x3c>
c0017175:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017178:	89 02                	mov    DWORD PTR [edx],eax
c001717a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001717f:	90                   	nop
c0017180:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017183:	83 c4 0c             	add    esp,0xc
c0017186:	c3                   	ret    
c0017187:	90                   	nop

c0017188 <milliTenthSleepUntil(unsigned long long)>:
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001718f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017193:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017199:	89 d1                	mov    ecx,edx
c001719b:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c00171a1:	73 05                	jae    c00171a8 <milliTenthSleepUntil(unsigned long long)+0x20>
c00171a3:	90                   	nop
c00171a4:	83 c4 0c             	add    esp,0xc
c00171a7:	c3                   	ret    
c00171a8:	fa                   	cli    
c00171a9:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00171af:	83 ec 08             	sub    esp,0x8
c00171b2:	83 c1 01             	add    ecx,0x1
c00171b5:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c00171bb:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c00171c1:	83 c1 01             	add    ecx,0x1
c00171c4:	89 0d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ecx
c00171ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00171d0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00171d3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00171d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171db:	50                   	push   eax
c00171dc:	68 40 fa 02 c0       	push   0xc002fa40
c00171e1:	e8 a6 ad 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00171e6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00171ed:	e8 16 ff ff ff       	call   c0017108 <blockTask(TaskState)>
c00171f2:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	83 e8 01             	sub    eax,0x1
c00171fd:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0017202:	85 c0                	test   eax,eax
c0017204:	75 0a                	jne    c0017210 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017206:	8b 15 28 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa28
c001720c:	85 d2                	test   edx,edx
c001720e:	75 18                	jne    c0017228 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017210:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017218:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001721d:	85 c0                	test   eax,eax
c001721f:	75 83                	jne    c00171a4 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017221:	fb                   	sti    
c0017222:	83 c4 0c             	add    esp,0xc
c0017225:	c3                   	ret    
c0017226:	66 90                	xchg   ax,ax
c0017228:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017232:	e8 11 fe ff ff       	call   c0017048 <schedule()>
c0017237:	eb d7                	jmp    c0017210 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017239:	8d 76 00             	lea    esi,[esi+0x0]

c001723c <milliTenthSleep(unsigned long long)>:
c001723c:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0017241:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017245:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001724b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001724f:	e9 34 ff ff ff       	jmp    c0017188 <milliTenthSleepUntil(unsigned long long)>

c0017254 <sleep(unsigned long long)>:
c0017254:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c001725c:	b8 10 27 00 00       	mov    eax,0x2710
c0017261:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017265:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017269:	01 ca                	add    edx,ecx
c001726b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001726f:	eb cb                	jmp    c001723c <milliTenthSleep(unsigned long long)>
c0017271:	8d 76 00             	lea    esi,[esi+0x0]

c0017274 <sleep(unsigned int)>:
c0017274:	83 ec 14             	sub    esp,0x14
c0017277:	b8 10 27 00 00       	mov    eax,0x2710
c001727c:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017280:	52                   	push   edx
c0017281:	50                   	push   eax
c0017282:	e8 b5 ff ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c0017287:	83 c4 1c             	add    esp,0x1c
c001728a:	c3                   	ret    
c001728b:	90                   	nop

c001728c <milliTenthSleep(unsigned int)>:
c001728c:	83 ec 14             	sub    esp,0x14
c001728f:	31 d2                	xor    edx,edx
c0017291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017295:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c001729b:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c00172a1:	52                   	push   edx
c00172a2:	50                   	push   eax
c00172a3:	e8 e0 fe ff ff       	call   c0017188 <milliTenthSleepUntil(unsigned long long)>
c00172a8:	83 c4 1c             	add    esp,0x1c
c00172ab:	c3                   	ret    

c00172ac <taskReturned>:
c00172ac:	83 ec 18             	sub    esp,0x18
c00172af:	68 30 53 02 c0       	push   0xc0025330
c00172b4:	e8 95 8b ff ff       	call   c000fe4e <KePanic(char const*)>
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	83 ec 0c             	sub    esp,0xc
c00172bf:	6a 02                	push   0x2
c00172c1:	e8 42 fe ff ff       	call   c0017108 <blockTask(TaskState)>
c00172c6:	fa                   	cli    
c00172c7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00172cc:	83 c0 01             	add    eax,0x1
c00172cf:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00172d4:	e8 6f fd ff ff       	call   c0017048 <schedule()>
c00172d9:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00172e1:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00172e7:	83 c4 10             	add    esp,0x10
c00172ea:	85 d2                	test   edx,edx
c00172ec:	75 ce                	jne    c00172bc <taskReturned+0x10>
c00172ee:	fb                   	sti    
c00172ef:	eb cb                	jmp    c00172bc <taskReturned+0x10>
c00172f1:	8d 76 00             	lea    esi,[esi+0x0]

c00172f4 <Thr::processFromPID(int)>:
c00172f4:	57                   	push   edi
c00172f5:	56                   	push   esi
c00172f6:	53                   	push   ebx
c00172f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00172fb:	fa                   	cli    
c00172fc:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017302:	83 ec 0c             	sub    esp,0xc
c0017305:	68 4c fa 02 c0       	push   0xc002fa4c
c001730a:	83 c1 01             	add    ecx,0x1
c001730d:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017313:	e8 b0 ab 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	89 c7                	mov    edi,eax
c001731d:	eb 15                	jmp    c0017334 <Thr::processFromPID(int)+0x40>
c001731f:	90                   	nop
c0017320:	83 ec 0c             	sub    esp,0xc
c0017323:	68 4c fa 02 c0       	push   0xc002fa4c
c0017328:	e8 9b ab 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001732d:	83 c4 10             	add    esp,0x10
c0017330:	39 f8                	cmp    eax,edi
c0017332:	74 50                	je     c0017384 <Thr::processFromPID(int)+0x90>
c0017334:	83 ec 0c             	sub    esp,0xc
c0017337:	68 4c fa 02 c0       	push   0xc002fa4c
c001733c:	e8 87 ab 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017341:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017348:	89 c3                	mov    ebx,eax
c001734a:	e8 81 ab 00 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001734f:	58                   	pop    eax
c0017350:	5a                   	pop    edx
c0017351:	53                   	push   ebx
c0017352:	68 4c fa 02 c0       	push   0xc002fa4c
c0017357:	e8 30 ac 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001735c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001735f:	83 c4 10             	add    esp,0x10
c0017362:	39 30                	cmp    DWORD PTR [eax],esi
c0017364:	75 ba                	jne    c0017320 <Thr::processFromPID(int)+0x2c>
c0017366:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001736e:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017374:	85 c9                	test   ecx,ecx
c0017376:	74 08                	je     c0017380 <Thr::processFromPID(int)+0x8c>
c0017378:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001737b:	90                   	nop
c001737c:	5b                   	pop    ebx
c001737d:	5e                   	pop    esi
c001737e:	5f                   	pop    edi
c001737f:	c3                   	ret    
c0017380:	fb                   	sti    
c0017381:	eb f5                	jmp    c0017378 <Thr::processFromPID(int)+0x84>
c0017383:	90                   	nop
c0017384:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001738c:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017392:	31 c0                	xor    eax,eax
c0017394:	85 d2                	test   edx,edx
c0017396:	75 e4                	jne    c001737c <Thr::processFromPID(int)+0x88>
c0017398:	fb                   	sti    
c0017399:	5b                   	pop    ebx
c001739a:	5e                   	pop    esi
c001739b:	5f                   	pop    edi
c001739c:	c3                   	ret    
c001739d:	8d 76 00             	lea    esi,[esi+0x0]

c00173a0 <unblockTask(ThreadControlBlock*)>:
c00173a0:	53                   	push   ebx
c00173a1:	83 ec 08             	sub    esp,0x8
c00173a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173a8:	fa                   	cli    
c00173a9:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00173af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173b2:	83 c2 01             	add    edx,0x1
c00173b5:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c00173bb:	85 c0                	test   eax,eax
c00173bd:	74 6d                	je     c001742c <unblockTask(ThreadControlBlock*)+0x8c>
c00173bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173c2:	83 f8 01             	cmp    eax,0x1
c00173c5:	74 39                	je     c0017400 <unblockTask(ThreadControlBlock*)+0x60>
c00173c7:	83 ec 0c             	sub    esp,0xc
c00173ca:	68 4c fa 02 c0       	push   0xc002fa4c
c00173cf:	e8 f4 aa 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	85 c0                	test   eax,eax
c00173d9:	75 1d                	jne    c00173f8 <unblockTask(ThreadControlBlock*)+0x58>
c00173db:	eb 63                	jmp    c0017440 <unblockTask(ThreadControlBlock*)+0xa0>
c00173dd:	8d 76 00             	lea    esi,[esi+0x0]
c00173e0:	83 ec 08             	sub    esp,0x8
c00173e3:	50                   	push   eax
c00173e4:	68 4c fa 02 c0       	push   0xc002fa4c
c00173e9:	e8 e6 af 00 00       	call   c00223d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00173ee:	83 c4 10             	add    esp,0x10
c00173f1:	85 c0                	test   eax,eax
c00173f3:	74 4b                	je     c0017440 <unblockTask(ThreadControlBlock*)+0xa0>
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	39 c3                	cmp    ebx,eax
c00173fa:	75 e4                	jne    c00173e0 <unblockTask(ThreadControlBlock*)+0x40>
c00173fc:	eb 12                	jmp    c0017410 <unblockTask(ThreadControlBlock*)+0x70>
c00173fe:	66 90                	xchg   ax,ax
c0017400:	83 ec 0c             	sub    esp,0xc
c0017403:	68 c5 52 02 c0       	push   0xc00252c5
c0017408:	e8 41 fb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017418:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001741d:	85 c0                	test   eax,eax
c001741f:	75 03                	jne    c0017424 <unblockTask(ThreadControlBlock*)+0x84>
c0017421:	fb                   	sti    
c0017422:	66 90                	xchg   ax,ax
c0017424:	83 c4 08             	add    esp,0x8
c0017427:	5b                   	pop    ebx
c0017428:	c3                   	ret    
c0017429:	8d 76 00             	lea    esi,[esi+0x0]
c001742c:	83 ec 0c             	sub    esp,0xc
c001742f:	68 ae 52 02 c0       	push   0xc00252ae
c0017434:	e8 15 fb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017439:	83 c4 10             	add    esp,0x10
c001743c:	eb d2                	jmp    c0017410 <unblockTask(ThreadControlBlock*)+0x70>
c001743e:	66 90                	xchg   ax,ax
c0017440:	83 ec 08             	sub    esp,0x8
c0017443:	53                   	push   ebx
c0017444:	68 4c fa 02 c0       	push   0xc002fa4c
c0017449:	e8 3e ab 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001744e:	83 c4 10             	add    esp,0x10
c0017451:	eb bd                	jmp    c0017410 <unblockTask(ThreadControlBlock*)+0x70>
c0017453:	90                   	nop

c0017454 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017454:	55                   	push   ebp
c0017455:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001745a:	57                   	push   edi
c001745b:	56                   	push   esi
c001745c:	53                   	push   ebx
c001745d:	83 ec 1c             	sub    esp,0x1c
c0017460:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017464:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017467:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001746a:	d3 c0                	rol    eax,cl
c001746c:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017473:	21 c8                	and    eax,ecx
c0017475:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c001747c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001747f:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017487:	0f 85 af 01 00 00    	jne    c001763c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001748d:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017493:	85 ed                	test   ebp,ebp
c0017495:	7e 29                	jle    c00174c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017497:	31 f6                	xor    esi,esi
c0017499:	8d 76 00             	lea    esi,[esi+0x0]
c001749c:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c00174a3:	83 ec 0c             	sub    esp,0xc
c00174a6:	83 c6 01             	add    esi,0x1
c00174a9:	57                   	push   edi
c00174aa:	e8 69 86 ff ff       	call   c000fb18 <free>
c00174af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174b2:	83 c4 10             	add    esp,0x10
c00174b5:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c00174bb:	7f df                	jg     c001749c <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c00174bd:	8d 76 00             	lea    esi,[esi+0x0]
c00174c0:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00174ca:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00174cd:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00174d3:	89 f7                	mov    edi,esi
c00174d5:	85 ed                	test   ebp,ebp
c00174d7:	74 1b                	je     c00174f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00174d9:	83 ec 0c             	sub    esp,0xc
c00174dc:	55                   	push   ebp
c00174dd:	e8 a6 71 ff ff       	call   c000e688 <EnvVarContainer::~EnvVarContainer()>
c00174e2:	59                   	pop    ecx
c00174e3:	5e                   	pop    esi
c00174e4:	6a 0c                	push   0xc
c00174e6:	55                   	push   ebp
c00174e7:	e8 7f 5d ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00174ec:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	89 f7                	mov    edi,esi
c00174f4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00174fa:	85 c0                	test   eax,eax
c00174fc:	0f 84 ae 00 00 00    	je     c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017502:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017505:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017509:	31 c9                	xor    ecx,ecx
c001750b:	eb 17                	jmp    c0017524 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001750d:	8d 76 00             	lea    esi,[esi+0x0]
c0017510:	83 c1 01             	add    ecx,0x1
c0017513:	83 f9 10             	cmp    ecx,0x10
c0017516:	0f 84 94 00 00 00    	je     c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001751c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017522:	66 90                	xchg   ax,ax
c0017524:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c001752b:	d3 fa                	sar    edx,cl
c001752d:	80 e2 01             	and    dl,0x1
c0017530:	74 de                	je     c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017532:	6b d1 73             	imul   edx,ecx,0x73
c0017535:	01 d0                	add    eax,edx
c0017537:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001753d:	83 fd 07             	cmp    ebp,0x7
c0017540:	75 ce                	jne    c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017542:	05 40 02 00 00       	add    eax,0x240
c0017547:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001754a:	83 fd ff             	cmp    ebp,0xffffffff
c001754d:	0f 8c f1 00 00 00    	jl     c0017644 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017553:	0f 84 af 01 00 00    	je     c0017708 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017559:	85 ed                	test   ebp,ebp
c001755b:	0f 84 93 01 00 00    	je     c00176f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0017561:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017563:	75 ab                	jne    c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017565:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017569:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001756f:	01 d0                	add    eax,edx
c0017571:	8d 76 00             	lea    esi,[esi+0x0]
c0017574:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017578:	83 ec 0c             	sub    esp,0xc
c001757b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017581:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017584:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001758a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017591:	50                   	push   eax
c0017592:	e8 09 fe ff ff       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001759d:	89 f7                	mov    edi,esi
c001759f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00175a3:	83 c1 01             	add    ecx,0x1
c00175a6:	83 f9 10             	cmp    ecx,0x10
c00175a9:	0f 85 6d ff ff ff    	jne    c001751c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00175af:	90                   	nop
c00175b0:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00175b6:	85 c0                	test   eax,eax
c00175b8:	74 62                	je     c001761c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00175ba:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00175c0:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00175c6:	74 54                	je     c001761c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	68 4c fa 02 c0       	push   0xc002fa4c
c00175d0:	e8 f3 a8 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175d5:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00175dc:	89 c7                	mov    edi,eax
c00175de:	e8 c9 a8 00 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	84 c0                	test   al,al
c00175e8:	0f 84 ce 00 00 00    	je     c00176bc <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00175ee:	66 90                	xchg   ax,ax
c00175f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175f3:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00175f9:	85 d2                	test   edx,edx
c00175fb:	74 0f                	je     c001760c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00175fd:	8b 02                	mov    eax,DWORD PTR [edx]
c00175ff:	83 ec 0c             	sub    esp,0xc
c0017602:	52                   	push   edx
c0017603:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017606:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017616:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017619:	8d 76 00             	lea    esi,[esi+0x0]
c001761c:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0017622:	85 db                	test   ebx,ebx
c0017624:	74 16                	je     c001763c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	53                   	push   ebx
c001762a:	e8 ff c1 ff ff       	call   c001382e <VAS::~VAS()>
c001762f:	58                   	pop    eax
c0017630:	5a                   	pop    edx
c0017631:	6a 14                	push   0x14
c0017633:	53                   	push   ebx
c0017634:	e8 32 5c ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	83 c4 1c             	add    esp,0x1c
c001763f:	5b                   	pop    ebx
c0017640:	5e                   	pop    esi
c0017641:	5f                   	pop    edi
c0017642:	5d                   	pop    ebp
c0017643:	c3                   	ret    
c0017644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017648:	83 ec 0c             	sub    esp,0xc
c001764b:	68 64 53 02 c0       	push   0xc0025364
c0017650:	e8 f9 87 ff ff       	call   c000fe4e <KePanic(char const*)>
c0017655:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	89 f7                	mov    edi,esi
c001765d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017661:	e9 aa fe ff ff       	jmp    c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017666:	66 90                	xchg   ax,ax
c0017668:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001766e:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017674:	75 1e                	jne    c0017694 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017676:	83 ec 0c             	sub    esp,0xc
c0017679:	68 cc 53 02 c0       	push   0xc00253cc
c001767e:	e8 cb f8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017683:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001768a:	e8 79 fa ff ff       	call   c0017108 <blockTask(TaskState)>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	66 90                	xchg   ax,ax
c0017694:	83 ec 08             	sub    esp,0x8
c0017697:	56                   	push   esi
c0017698:	68 4c fa 02 c0       	push   0xc002fa4c
c001769d:	e8 ea a8 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176a2:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00176a9:	e8 1a a8 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	39 f8                	cmp    eax,edi
c00176b3:	0f 84 37 ff ff ff    	je     c00175f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c00176b9:	8d 76 00             	lea    esi,[esi+0x0]
c00176bc:	83 ec 0c             	sub    esp,0xc
c00176bf:	68 4c fa 02 c0       	push   0xc002fa4c
c00176c4:	e8 ff a7 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176c9:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00176d0:	89 c6                	mov    esi,eax
c00176d2:	e8 f9 a7 00 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	39 f3                	cmp    ebx,esi
c00176dc:	74 b6                	je     c0017694 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00176de:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00176e1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00176e4:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00176ea:	75 a8                	jne    c0017694 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00176ec:	e9 77 ff ff ff       	jmp    c0017668 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00176f1:	8d 76 00             	lea    esi,[esi+0x0]
c00176f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	68 98 53 02 c0       	push   0xc0025398
c0017700:	e9 4b ff ff ff       	jmp    c0017650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0017705:	8d 76 00             	lea    esi,[esi+0x0]
c0017708:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001770c:	8b 36                	mov    esi,DWORD PTR [esi]
c001770e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017711:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017714:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c001771a:	01 d7                	add    edi,edx
c001771c:	89 f8                	mov    eax,edi
c001771e:	e9 51 fe ff ff       	jmp    c0017574 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c0017723:	90                   	nop

c0017724 <cleanerTaskFunction(void*)>:
c0017724:	53                   	push   ebx
c0017725:	83 ec 08             	sub    esp,0x8
c0017728:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017730:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017735:	85 c0                	test   eax,eax
c0017737:	75 03                	jne    c001773c <cleanerTaskFunction(void*)+0x18>
c0017739:	fb                   	sti    
c001773a:	66 90                	xchg   ax,ax
c001773c:	fa                   	cli    
c001773d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017742:	83 c0 01             	add    eax,0x1
c0017745:	80 3d 14 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa14,0x0
c001774c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017751:	0f 85 c9 00 00 00    	jne    c0017820 <cleanerTaskFunction(void*)+0xfc>
c0017757:	83 ec 0c             	sub    esp,0xc
c001775a:	6a 02                	push   0x2
c001775c:	e8 7b f9 ff ff       	call   c00170dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017761:	83 c4 10             	add    esp,0x10
c0017764:	c6 05 14 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa14,0x0
c001776b:	fa                   	cli    
c001776c:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017772:	8b 1d 2c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa2c
c0017778:	83 c1 01             	add    ecx,0x1
c001777b:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017781:	83 c3 01             	add    ebx,0x1
c0017784:	89 1d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ebx
c001778a:	fa                   	cli    
c001778b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017790:	83 c0 01             	add    eax,0x1
c0017793:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017798:	eb 2a                	jmp    c00177c4 <cleanerTaskFunction(void*)+0xa0>
c001779a:	66 90                	xchg   ax,ax
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	68 34 fa 02 c0       	push   0xc002fa34
c00177a4:	e8 1f a7 00 00       	call   c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00177a9:	c7 04 24 34 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa34
c00177b0:	89 c3                	mov    ebx,eax
c00177b2:	e8 19 a7 00 00       	call   c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00177b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177ba:	e8 95 fc ff ff       	call   c0017454 <cleanupTerminatedTask(ThreadControlBlock*)>
c00177bf:	83 c4 10             	add    esp,0x10
c00177c2:	66 90                	xchg   ax,ax
c00177c4:	83 ec 0c             	sub    esp,0xc
c00177c7:	68 34 fa 02 c0       	push   0xc002fa34
c00177cc:	e8 db a6 00 00       	call   c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	84 c0                	test   al,al
c00177d6:	74 c4                	je     c001779c <cleanerTaskFunction(void*)+0x78>
c00177d8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00177e0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00177e6:	85 d2                	test   edx,edx
c00177e8:	75 02                	jne    c00177ec <cleanerTaskFunction(void*)+0xc8>
c00177ea:	fb                   	sti    
c00177eb:	90                   	nop
c00177ec:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00177f1:	83 e8 01             	sub    eax,0x1
c00177f4:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00177f9:	0f 85 29 ff ff ff    	jne    c0017728 <cleanerTaskFunction(void*)+0x4>
c00177ff:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0017804:	85 c0                	test   eax,eax
c0017806:	0f 84 1c ff ff ff    	je     c0017728 <cleanerTaskFunction(void*)+0x4>
c001780c:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017816:	e8 2d f8 ff ff       	call   c0017048 <schedule()>
c001781b:	e9 08 ff ff ff       	jmp    c0017728 <cleanerTaskFunction(void*)+0x4>
c0017820:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017828:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001782d:	85 c0                	test   eax,eax
c001782f:	0f 85 2f ff ff ff    	jne    c0017764 <cleanerTaskFunction(void*)+0x40>
c0017835:	fb                   	sti    
c0017836:	e9 29 ff ff ff       	jmp    c0017764 <cleanerTaskFunction(void*)+0x40>
c001783b:	90                   	nop

c001783c <terminateTask(int)>:
c001783c:	83 ec 14             	sub    esp,0x14
c001783f:	fa                   	cli    
c0017840:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017845:	83 c0 01             	add    eax,0x1
c0017848:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001784d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017852:	83 c0 01             	add    eax,0x1
c0017855:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c001785a:	fa                   	cli    
c001785b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017860:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017864:	83 c0 01             	add    eax,0x1
c0017867:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001786c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017871:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017874:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017879:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001787c:	50                   	push   eax
c001787d:	68 34 fa 02 c0       	push   0xc002fa34
c0017882:	e8 05 a7 00 00       	call   c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017896:	a1 10 fa 02 c0       	mov    eax,ds:0xc002fa10
c001789b:	85 c0                	test   eax,eax
c001789d:	0f 84 81 00 00 00    	je     c0017924 <terminateTask(int)+0xe8>
c00178a3:	c6 05 14 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa14,0x1
c00178aa:	83 ec 0c             	sub    esp,0xc
c00178ad:	50                   	push   eax
c00178ae:	e8 ed fa ff ff       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	66 90                	xchg   ax,ax
c00178b8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00178c0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00178c5:	85 c0                	test   eax,eax
c00178c7:	75 03                	jne    c00178cc <terminateTask(int)+0x90>
c00178c9:	fb                   	sti    
c00178ca:	66 90                	xchg   ax,ax
c00178cc:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00178d1:	83 e8 01             	sub    eax,0x1
c00178d4:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00178d9:	75 09                	jne    c00178e4 <terminateTask(int)+0xa8>
c00178db:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c00178e2:	75 54                	jne    c0017938 <terminateTask(int)+0xfc>
c00178e4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00178ec:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00178f2:	85 c9                	test   ecx,ecx
c00178f4:	75 06                	jne    c00178fc <terminateTask(int)+0xc0>
c00178f6:	66 90                	xchg   ax,ax
c00178f8:	fb                   	sti    
c00178f9:	8d 76 00             	lea    esi,[esi+0x0]
c00178fc:	fa                   	cli    
c00178fd:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017902:	83 c0 01             	add    eax,0x1
c0017905:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001790a:	e8 39 f7 ff ff       	call   c0017048 <schedule()>
c001790f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017917:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001791d:	85 d2                	test   edx,edx
c001791f:	75 db                	jne    c00178fc <terminateTask(int)+0xc0>
c0017921:	eb d5                	jmp    c00178f8 <terminateTask(int)+0xbc>
c0017923:	90                   	nop
c0017924:	83 ec 0c             	sub    esp,0xc
c0017927:	68 dc 52 02 c0       	push   0xc00252dc
c001792c:	e8 1d f6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	eb 82                	jmp    c00178b8 <terminateTask(int)+0x7c>
c0017936:	66 90                	xchg   ax,ax
c0017938:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017942:	e8 01 f7 ff ff       	call   c0017048 <schedule()>
c0017947:	eb 9b                	jmp    c00178e4 <terminateTask(int)+0xa8>
c0017949:	8d 76 00             	lea    esi,[esi+0x0]

c001794c <Thr::terminateFromIRQ(int)>:
c001794c:	83 ec 18             	sub    esp,0x18
c001794f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017953:	50                   	push   eax
c0017954:	e8 e3 fe ff ff       	call   c001783c <terminateTask(int)>
c0017959:	8d 76 00             	lea    esi,[esi+0x0]

c001795c <__static_initialization_and_destruction_0(int, int)>:
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017964:	0f 85 8e 00 00 00    	jne    c00179f8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001796a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017972:	0f 85 80 00 00 00    	jne    c00179f8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017978:	83 ec 0c             	sub    esp,0xc
c001797b:	68 4c fa 02 c0       	push   0xc002fa4c
c0017980:	e8 a7 aa 00 00       	call   c002242c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	83 ec 04             	sub    esp,0x4
c001798b:	68 00 67 02 c0       	push   0xc0026700
c0017990:	68 4c fa 02 c0       	push   0xc002fa4c
c0017995:	68 dc 23 02 c0       	push   0xc00223dc
c001799a:	e8 7c 58 ff ff       	call   c000d21b <__cxa_atexit>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	68 40 fa 02 c0       	push   0xc002fa40
c00179aa:	e8 7d aa 00 00       	call   c002242c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00179af:	83 c4 10             	add    esp,0x10
c00179b2:	83 ec 04             	sub    esp,0x4
c00179b5:	68 00 67 02 c0       	push   0xc0026700
c00179ba:	68 40 fa 02 c0       	push   0xc002fa40
c00179bf:	68 dc 23 02 c0       	push   0xc00223dc
c00179c4:	e8 52 58 ff ff       	call   c000d21b <__cxa_atexit>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	68 34 fa 02 c0       	push   0xc002fa34
c00179d4:	e8 53 aa 00 00       	call   c002242c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	83 ec 04             	sub    esp,0x4
c00179df:	68 00 67 02 c0       	push   0xc0026700
c00179e4:	68 34 fa 02 c0       	push   0xc002fa34
c00179e9:	68 dc 23 02 c0       	push   0xc00223dc
c00179ee:	e8 28 58 ff ff       	call   c000d21b <__cxa_atexit>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	66 90                	xchg   ax,ax
c00179f8:	90                   	nop
c00179f9:	83 c4 0c             	add    esp,0xc
c00179fc:	c3                   	ret    
c00179fd:	8d 76 00             	lea    esi,[esi+0x0]

c0017a00 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	83 ec 08             	sub    esp,0x8
c0017a06:	68 ff ff 00 00       	push   0xffff
c0017a0b:	6a 01                	push   0x1
c0017a0d:	e8 4a ff ff ff       	call   c001795c <__static_initialization_and_destruction_0(int, int)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	83 c4 0c             	add    esp,0xc
c0017a18:	c3                   	ret    

c0017a19 <Vm::inbv(unsigned short)>:
c0017a19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a1d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017a22:	74 02                	je     c0017a26 <Vm::inbv(unsigned short)+0xd>
c0017a24:	ec                   	in     al,dx
c0017a25:	c3                   	ret    
c0017a26:	a0 90 fa 02 c0       	mov    al,ds:0xc002fa90
c0017a2b:	c3                   	ret    

c0017a2c <Vm::outbv(unsigned short, unsigned char)>:
c0017a2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a34:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017a39:	74 02                	je     c0017a3d <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017a3b:	ee                   	out    dx,al
c0017a3c:	c3                   	ret    
c0017a3d:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017a43:	88 81 a0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0560],al
c0017a49:	8d 51 01             	lea    edx,[ecx+0x1]
c0017a4c:	b8 1f 00 00 00       	mov    eax,0x1f
c0017a51:	83 fa 20             	cmp    edx,0x20
c0017a54:	0f 44 d0             	cmove  edx,eax
c0017a57:	89 15 90 fa 02 c0    	mov    DWORD PTR ds:0xc002fa90,edx
c0017a5d:	c3                   	ret    

c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>:
c0017a5e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017a63:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017a68:	c1 e0 04             	shl    eax,0x4
c0017a6b:	01 d0                	add    eax,edx
c0017a6d:	c3                   	ret    

c0017a6e <Vm::getSegment(unsigned int)>:
c0017a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a72:	c1 e8 10             	shr    eax,0x10
c0017a75:	c3                   	ret    

c0017a76 <Vm::getOffset(unsigned int)>:
c0017a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a7a:	c3                   	ret    

c0017a7b <Vm::mainloop2()>:
c0017a7b:	83 ec 18             	sub    esp,0x18
c0017a7e:	fa                   	cli    
c0017a7f:	6a 02                	push   0x2
c0017a81:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a86:	c6 05 89 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa89,0x1
c0017a8d:	83 c0 01             	add    eax,0x1
c0017a90:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017a95:	e8 42 f6 ff ff       	call   c00170dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a9f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017aa3:	52                   	push   edx
c0017aa4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017aa8:	52                   	push   edx
c0017aa9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017aad:	52                   	push   edx
c0017aae:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017ab2:	50                   	push   eax
c0017ab3:	e8 57 87 fe ff       	call   c000020f <goToVM86>
c0017ab8:	83 c4 2c             	add    esp,0x2c
c0017abb:	c3                   	ret    

c0017abc <Vm::mainVm8086Loop(void*)>:
c0017abc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ac4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017ac9:	85 c0                	test   eax,eax
c0017acb:	75 01                	jne    c0017ace <Vm::mainVm8086Loop(void*)+0x12>
c0017acd:	fb                   	sti    
c0017ace:	eb ab                	jmp    c0017a7b <Vm::mainloop2()>

c0017ad0 <Vm::mainloop3(unsigned long)>:
c0017ad0:	83 ec 18             	sub    esp,0x18
c0017ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ad7:	fa                   	cli    
c0017ad8:	6a 02                	push   0x2
c0017ada:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017ae0:	c6 05 88 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa88,0x1
c0017ae7:	a3 84 fa 02 c0       	mov    ds:0xc002fa84,eax
c0017aec:	83 c2 01             	add    edx,0x1
c0017aef:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017af5:	e8 e2 f5 ff ff       	call   c00170dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017afa:	83 c4 1c             	add    esp,0x1c
c0017afd:	e9 79 ff ff ff       	jmp    c0017a7b <Vm::mainloop2()>

c0017b02 <Vm::initialise8086()>:
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	68 80 00 00 00       	push   0x80
c0017b0a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017b0f:	6a 00                	push   0x0
c0017b11:	68 bc 7a 01 c0       	push   0xc0017abc
c0017b16:	50                   	push   eax
c0017b17:	e8 84 f2 ff ff       	call   c0016da0 <Process::createThread(void (*)(void*), void*, int)>
c0017b1c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017b23:	68 10 01 00 00       	push   0x110
c0017b28:	6a 00                	push   0x0
c0017b2a:	6a 00                	push   0x0
c0017b2c:	a3 8c fa 02 c0       	mov    ds:0xc002fa8c,eax
c0017b31:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017b36:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017b3c:	52                   	push   edx
c0017b3d:	e8 4e c0 ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b42:	83 c4 2c             	add    esp,0x2c
c0017b45:	c3                   	ret    

c0017b46 <Vm::resetConventionalMemory8086()>:
c0017b46:	c3                   	ret    

c0017b47 <Vm::finish8086()>:
c0017b47:	53                   	push   ebx
c0017b48:	83 ec 08             	sub    esp,0x8
c0017b4b:	eb 17                	jmp    c0017b64 <Vm::finish8086()+0x1d>
c0017b4d:	e8 f6 f4 ff ff       	call   c0017048 <schedule()>
c0017b52:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017b5a:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017b60:	85 c9                	test   ecx,ecx
c0017b62:	74 51                	je     c0017bb5 <Vm::finish8086()+0x6e>
c0017b64:	fa                   	cli    
c0017b65:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017b6b:	83 c3 01             	add    ebx,0x1
c0017b6e:	80 3d 88 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa88,0x0
c0017b75:	89 1d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ebx
c0017b7b:	74 d0                	je     c0017b4d <Vm::finish8086()+0x6>
c0017b7d:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017b82:	83 ec 0c             	sub    esp,0xc
c0017b85:	c6 05 88 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa88,0x0
c0017b8c:	8b 1d 84 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa84
c0017b92:	50                   	push   eax
c0017b93:	e8 08 f8 ff ff       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0017b98:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ba0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017ba6:	83 c4 10             	add    esp,0x10
c0017ba9:	85 d2                	test   edx,edx
c0017bab:	75 01                	jne    c0017bae <Vm::finish8086()+0x67>
c0017bad:	fb                   	sti    
c0017bae:	83 c4 08             	add    esp,0x8
c0017bb1:	89 d8                	mov    eax,ebx
c0017bb3:	5b                   	pop    ebx
c0017bb4:	c3                   	ret    
c0017bb5:	fb                   	sti    
c0017bb6:	eb ac                	jmp    c0017b64 <Vm::finish8086()+0x1d>

c0017bb8 <Vm::getOutput8086(unsigned char*)>:
c0017bb8:	57                   	push   edi
c0017bb9:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017bbf:	56                   	push   esi
c0017bc0:	be a0 fa 02 c0       	mov    esi,0xc002faa0
c0017bc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017bc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bcb:	5e                   	pop    esi
c0017bcc:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0017bd1:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017bdb:	5f                   	pop    edi
c0017bdc:	c3                   	ret    

c0017bdd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017bdd:	55                   	push   ebp
c0017bde:	57                   	push   edi
c0017bdf:	56                   	push   esi
c0017be0:	53                   	push   ebx
c0017be1:	83 ec 2c             	sub    esp,0x2c
c0017be4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017be8:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017bef:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017bf3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bfb:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017bff:	75 20                	jne    c0017c21 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017c01:	e9 c0 00 00 00       	jmp    c0017cc6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe9>
c0017c06:	e8 3d f4 ff ff       	call   c0017048 <schedule()>
c0017c0b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017c13:	8b 3d 30 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa30
c0017c19:	85 ff                	test   edi,edi
c0017c1b:	0f 84 9f 00 00 00    	je     c0017cc0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c0017c21:	fa                   	cli    
c0017c22:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017c27:	83 c0 01             	add    eax,0x1
c0017c2a:	80 3d 89 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa89,0x0
c0017c31:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017c36:	74 ce                	je     c0017c06 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x29>
c0017c38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c3c:	83 ec 04             	sub    esp,0x4
c0017c3f:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017c49:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017c4e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017c52:	0f b7 f6             	movzx  esi,si
c0017c55:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017c59:	0f b7 db             	movzx  ebx,bx
c0017c5c:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017c60:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017c64:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017c68:	6a 20                	push   0x20
c0017c6a:	6a 00                	push   0x0
c0017c6c:	68 a0 fa 02 c0       	push   0xc002faa0
c0017c71:	e8 7a 88 fe ff       	call   c00004f0 <memset>
c0017c76:	5a                   	pop    edx
c0017c77:	59                   	pop    ecx
c0017c78:	56                   	push   esi
c0017c79:	53                   	push   ebx
c0017c7a:	e8 df fd ff ff       	call   c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>
c0017c7f:	83 c4 10             	add    esp,0x10
c0017c82:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017c86:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017c8a:	89 c7                	mov    edi,eax
c0017c8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c8e:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017c95:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017c9d:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017ca3:	85 db                	test   ebx,ebx
c0017ca5:	75 01                	jne    c0017ca8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c0017ca7:	fb                   	sti    
c0017ca8:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017cad:	83 ec 0c             	sub    esp,0xc
c0017cb0:	50                   	push   eax
c0017cb1:	e8 ea f6 ff ff       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0017cb6:	83 c4 3c             	add    esp,0x3c
c0017cb9:	b0 01                	mov    al,0x1
c0017cbb:	5b                   	pop    ebx
c0017cbc:	5e                   	pop    esi
c0017cbd:	5f                   	pop    edi
c0017cbe:	5d                   	pop    ebp
c0017cbf:	c3                   	ret    
c0017cc0:	fb                   	sti    
c0017cc1:	e9 5b ff ff ff       	jmp    c0017c21 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017cc6:	83 ec 0c             	sub    esp,0xc
c0017cc9:	68 14 01 00 00       	push   0x114
c0017cce:	e8 35 7e ff ff       	call   c000fb08 <malloc>
c0017cd3:	83 c4 0c             	add    esp,0xc
c0017cd6:	89 c7                	mov    edi,eax
c0017cd8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017cdd:	50                   	push   eax
c0017cde:	68 f4 53 02 c0       	push   0xc00253f4
c0017ce3:	57                   	push   edi
c0017ce4:	e8 7b 04 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0017ce9:	58                   	pop    eax
c0017cea:	5a                   	pop    edx
c0017ceb:	6a 12                	push   0x12
c0017ced:	57                   	push   edi
c0017cee:	e8 8f 04 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0017cf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cf5:	59                   	pop    ecx
c0017cf6:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017cfa:	51                   	push   ecx
c0017cfb:	6a 00                	push   0x0
c0017cfd:	6a 00                	push   0x0
c0017cff:	68 00 00 11 00       	push   0x110000
c0017d04:	57                   	push   edi
c0017d05:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017d08:	83 c4 14             	add    esp,0x14
c0017d0b:	57                   	push   edi
c0017d0c:	e8 cf 04 ff ff       	call   c00081e0 <File::close()>
c0017d11:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017d23:	e9 f9 fe ff ff       	jmp    c0017c21 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>

c0017d28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017d28:	55                   	push   ebp
c0017d29:	57                   	push   edi
c0017d2a:	56                   	push   esi
c0017d2b:	53                   	push   ebx
c0017d2c:	83 ec 2c             	sub    esp,0x2c
c0017d2f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017d33:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017d3a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017d3e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017d42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d46:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017d4a:	0f 84 5a 01 00 00    	je     c0017eaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0017d50:	83 ec 08             	sub    esp,0x8
c0017d53:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017d57:	51                   	push   ecx
c0017d58:	68 58 54 02 c0       	push   0xc0025458
c0017d5d:	e8 ec f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	eb 1a                	jmp    c0017d81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017d67:	e8 dc f2 ff ff       	call   c0017048 <schedule()>
c0017d6c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017d74:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017d79:	85 c0                	test   eax,eax
c0017d7b:	0f 84 23 01 00 00    	je     c0017ea4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017d81:	fa                   	cli    
c0017d82:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017d88:	8a 1d 89 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002fa89
c0017d8e:	83 c2 01             	add    edx,0x1
c0017d91:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017d97:	84 db                	test   bl,bl
c0017d99:	74 cc                	je     c0017d67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017d9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d9f:	83 ec 04             	sub    esp,0x4
c0017da2:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017dac:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017db1:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017db5:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017db9:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017dbd:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017dc1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017dc5:	6a 20                	push   0x20
c0017dc7:	6a 00                	push   0x0
c0017dc9:	68 a0 fa 02 c0       	push   0xc002faa0
c0017dce:	e8 1d 87 fe ff       	call   c00004f0 <memset>
c0017dd3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017dda:	e8 29 7d ff ff       	call   c000fb08 <malloc>
c0017ddf:	83 c4 0c             	add    esp,0xc
c0017de2:	89 c7                	mov    edi,eax
c0017de4:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017de9:	50                   	push   eax
c0017dea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017dee:	50                   	push   eax
c0017def:	57                   	push   edi
c0017df0:	e8 6f 03 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	85 ff                	test   edi,edi
c0017dfa:	0f 84 63 01 00 00    	je     c0017f63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23b>
c0017e00:	83 ec 04             	sub    esp,0x4
c0017e03:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017e07:	50                   	push   eax
c0017e08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017e0c:	50                   	push   eax
c0017e0d:	57                   	push   edi
c0017e0e:	e8 71 06 ff ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c0017e13:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0017e18:	83 c4 10             	add    esp,0x10
c0017e1b:	89 e8                	mov    eax,ebp
c0017e1d:	84 c0                	test   al,al
c0017e1f:	0f 85 e7 00 00 00    	jne    c0017f0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e4>
c0017e25:	83 ec 08             	sub    esp,0x8
c0017e28:	6a 01                	push   0x1
c0017e2a:	57                   	push   edi
c0017e2b:	e8 52 03 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	85 c0                	test   eax,eax
c0017e35:	0f 85 ff 00 00 00    	jne    c0017f3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x212>
c0017e3b:	83 ec 08             	sub    esp,0x8
c0017e3e:	0f b7 f6             	movzx  esi,si
c0017e41:	56                   	push   esi
c0017e42:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0017e47:	50                   	push   eax
c0017e48:	e8 11 fc ff ff       	call   c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>
c0017e4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e4f:	5a                   	pop    edx
c0017e50:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017e54:	52                   	push   edx
c0017e55:	50                   	push   eax
c0017e56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017e5a:	56                   	push   esi
c0017e5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017e5f:	55                   	push   ebp
c0017e60:	57                   	push   edi
c0017e61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e64:	83 c4 14             	add    esp,0x14
c0017e67:	57                   	push   edi
c0017e68:	e8 73 03 ff ff       	call   c00081e0 <File::close()>
c0017e6d:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017e74:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017e7c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017e81:	83 c4 10             	add    esp,0x10
c0017e84:	85 c0                	test   eax,eax
c0017e86:	75 01                	jne    c0017e89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x161>
c0017e88:	fb                   	sti    
c0017e89:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017e8e:	83 ec 0c             	sub    esp,0xc
c0017e91:	50                   	push   eax
c0017e92:	e8 09 f5 ff ff       	call   c00173a0 <unblockTask(ThreadControlBlock*)>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	83 c4 2c             	add    esp,0x2c
c0017e9d:	88 d8                	mov    al,bl
c0017e9f:	5b                   	pop    ebx
c0017ea0:	5e                   	pop    esi
c0017ea1:	5f                   	pop    edi
c0017ea2:	5d                   	pop    ebp
c0017ea3:	c3                   	ret    
c0017ea4:	fb                   	sti    
c0017ea5:	e9 d7 fe ff ff       	jmp    c0017d81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017eaa:	83 ec 0c             	sub    esp,0xc
c0017ead:	68 14 01 00 00       	push   0x114
c0017eb2:	e8 51 7c ff ff       	call   c000fb08 <malloc>
c0017eb7:	83 c4 0c             	add    esp,0xc
c0017eba:	89 c3                	mov    ebx,eax
c0017ebc:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017ec1:	50                   	push   eax
c0017ec2:	68 f4 53 02 c0       	push   0xc00253f4
c0017ec7:	53                   	push   ebx
c0017ec8:	e8 97 02 ff ff       	call   c0008164 <File::File(char const*, Process*)>
c0017ecd:	58                   	pop    eax
c0017ece:	5a                   	pop    edx
c0017ecf:	6a 12                	push   0x12
c0017ed1:	53                   	push   ebx
c0017ed2:	e8 ab 02 ff ff       	call   c0008182 <File::open(FileOpenMode)>
c0017ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ed9:	59                   	pop    ecx
c0017eda:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017ede:	51                   	push   ecx
c0017edf:	6a 00                	push   0x0
c0017ee1:	6a 00                	push   0x0
c0017ee3:	68 00 00 11 00       	push   0x110000
c0017ee8:	53                   	push   ebx
c0017ee9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017eec:	83 c4 14             	add    esp,0x14
c0017eef:	53                   	push   ebx
c0017ef0:	e8 eb 02 ff ff       	call   c00081e0 <File::close()>
c0017ef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ef7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017efa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017f07:	e9 44 fe ff ff       	jmp    c0017d50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	68 23 54 02 c0       	push   0xc0025423
c0017f14:	e8 35 7f ff ff       	call   c000fe4e <KePanic(char const*)>
c0017f19:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017f21:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	85 c0                	test   eax,eax
c0017f2b:	75 01                	jne    c0017f2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017f2d:	fb                   	sti    
c0017f2e:	83 c4 2c             	add    esp,0x2c
c0017f31:	31 db                	xor    ebx,ebx
c0017f33:	88 d8                	mov    al,bl
c0017f35:	5b                   	pop    ebx
c0017f36:	5e                   	pop    esi
c0017f37:	5f                   	pop    edi
c0017f38:	5d                   	pop    ebp
c0017f39:	c3                   	ret    
c0017f3a:	83 ec 0c             	sub    esp,0xc
c0017f3d:	68 3c 54 02 c0       	push   0xc002543c
c0017f42:	e8 07 7f ff ff       	call   c000fe4e <KePanic(char const*)>
c0017f47:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017f4f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	85 c0                	test   eax,eax
c0017f59:	75 d3                	jne    c0017f2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017f5b:	fb                   	sti    
c0017f5c:	89 eb                	mov    ebx,ebp
c0017f5e:	e9 37 ff ff ff       	jmp    c0017e9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0017f63:	83 ec 0c             	sub    esp,0xc
c0017f66:	68 0f 54 02 c0       	push   0xc002540f
c0017f6b:	eb a7                	jmp    c0017f14 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ec>

c0017f6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017f6d:	57                   	push   edi
c0017f6e:	56                   	push   esi
c0017f6f:	53                   	push   ebx
c0017f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017f7c:	83 e8 06             	sub    eax,0x6
c0017f7f:	0f b7 c0             	movzx  eax,ax
c0017f82:	50                   	push   eax
c0017f83:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017f88:	50                   	push   eax
c0017f89:	e8 d0 fa ff ff       	call   c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>
c0017f8e:	5a                   	pop    edx
c0017f8f:	5e                   	pop    esi
c0017f90:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017f93:	8d 56 fa             	lea    edx,[esi-0x6]
c0017f96:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0017f99:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017f9f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017fa2:	8d 56 02             	lea    edx,[esi+0x2]
c0017fa5:	66 89 10             	mov    WORD PTR [eax],dx
c0017fa8:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017fac:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017fb0:	66 8b 79 40          	mov    di,WORD PTR [ecx+0x40]
c0017fb4:	8b 71 40             	mov    esi,DWORD PTR [ecx+0x40]
c0017fb7:	66 89 78 04          	mov    WORD PTR [eax+0x4],di
c0017fbb:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0017fc1:	89 f2                	mov    edx,esi
c0017fc3:	0f b6 d6             	movzx  edx,dh
c0017fc6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0017fca:	89 d7                	mov    edi,edx
c0017fcc:	74 36                	je     c0018004 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x97>
c0017fce:	c1 e7 08             	shl    edi,0x8
c0017fd1:	89 f2                	mov    edx,esi
c0017fd3:	0f b6 f2             	movzx  esi,dl
c0017fd6:	09 f7                	or     edi,esi
c0017fd8:	89 fa                	mov    edx,edi
c0017fda:	80 ce 02             	or     dh,0x2
c0017fdd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017fea:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017ff2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017ff5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0017ffd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018000:	5b                   	pop    ebx
c0018001:	5e                   	pop    esi
c0018002:	5f                   	pop    edi
c0018003:	c3                   	ret    
c0018004:	c1 e7 08             	shl    edi,0x8
c0018007:	89 f2                	mov    edx,esi
c0018009:	0f b6 f2             	movzx  esi,dl
c001800c:	09 f7                	or     edi,esi
c001800e:	89 fa                	mov    edx,edi
c0018010:	80 e6 fd             	and    dh,0xfd
c0018013:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018017:	eb c8                	jmp    c0017fe1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x74>

c0018019 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018019:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001801e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018023:	c1 e0 04             	shl    eax,0x4
c0018026:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018029:	c3                   	ret    

c001802a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001802a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001802f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018034:	c1 e0 04             	shl    eax,0x4
c0018037:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001803b:	c3                   	ret    

c001803c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001803c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018041:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018046:	c1 e0 04             	shl    eax,0x4
c0018049:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001804c:	c3                   	ret    

c001804d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001804d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018052:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018057:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001805b:	c1 e0 04             	shl    eax,0x4
c001805e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018061:	c3                   	ret    

c0018062 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018062:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018067:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001806c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018070:	c1 e0 04             	shl    eax,0x4
c0018073:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018077:	c3                   	ret    

c0018078 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018078:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001807d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018086:	c1 e0 04             	shl    eax,0x4
c0018089:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001808c:	c3                   	ret    

c001808d <Vm::faultHandler(regs*)>:
c001808d:	55                   	push   ebp
c001808e:	57                   	push   edi
c001808f:	56                   	push   esi
c0018090:	53                   	push   ebx
c0018091:	83 ec 1c             	sub    esp,0x1c
c0018094:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018098:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001809c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001809f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00180a4:	0f b7 c0             	movzx  eax,ax
c00180a7:	52                   	push   edx
c00180a8:	50                   	push   eax
c00180a9:	e8 b0 f9 ff ff       	call   c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>
c00180ae:	59                   	pop    ecx
c00180af:	5e                   	pop    esi
c00180b0:	89 c1                	mov    ecx,eax
c00180b2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00180b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180b9:	0f b7 e8             	movzx  ebp,ax
c00180bc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00180bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180c3:	0f b7 f8             	movzx  edi,ax
c00180c6:	55                   	push   ebp
c00180c7:	57                   	push   edi
c00180c8:	e8 91 f9 ff ff       	call   c0017a5e <Vm::realToLinear(unsigned short, unsigned short)>
c00180cd:	5a                   	pop    edx
c00180ce:	5e                   	pop    esi
c00180cf:	c6 44 24 04 06       	mov    BYTE PTR [esp+0x4],0x6
c00180d4:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c00180d9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00180de:	0f b6 31             	movzx  esi,BYTE PTR [ecx]
c00180e1:	8d 56 da             	lea    edx,[esi-0x26]
c00180e4:	0f b6 d2             	movzx  edx,dl
c00180e7:	81 fa d5 00 00 00    	cmp    edx,0xd5
c00180ed:	0f 87 00 04 00 00    	ja     c00184f3 <Vm::faultHandler(regs*)+0x466>
c00180f3:	ff 24 95 dc 54 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdab24]
c00180fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ff:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018103:	b0 01                	mov    al,0x1
c0018105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018108:	83 c5 01             	add    ebp,0x1
c001810b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c001810e:	83 c4 1c             	add    esp,0x1c
c0018111:	5b                   	pop    ebx
c0018112:	5e                   	pop    esi
c0018113:	5f                   	pop    edi
c0018114:	5d                   	pop    ebp
c0018115:	c3                   	ret    
c0018116:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c001811b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001811e:	83 c2 01             	add    edx,0x1
c0018121:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018124:	83 c1 01             	add    ecx,0x1
c0018127:	eb b5                	jmp    c00180de <Vm::faultHandler(regs*)+0x51>
c0018129:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c001812e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018131:	83 c6 01             	add    esi,0x1
c0018134:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0018137:	eb eb                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018139:	c6 44 24 04 05       	mov    BYTE PTR [esp+0x4],0x5
c001813e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018141:	83 c6 01             	add    esi,0x1
c0018144:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0018147:	eb db                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018149:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c001814e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018151:	83 c2 01             	add    edx,0x1
c0018154:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018157:	eb cb                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018159:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c001815e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018161:	83 c6 01             	add    esi,0x1
c0018164:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0018167:	eb bb                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018169:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c001816e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018171:	83 c2 01             	add    edx,0x1
c0018174:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018177:	eb ab                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018179:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001817e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018181:	83 c2 01             	add    edx,0x1
c0018184:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018187:	eb 9b                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018189:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c001818e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018191:	83 c6 01             	add    esi,0x1
c0018194:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0018197:	eb 8b                	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c0018199:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001819e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00181a1:	74 0d                	je     c00181b0 <Vm::faultHandler(regs*)+0x123>
c00181a3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00181aa:	0f 87 be 06 00 00    	ja     c001886e <Vm::faultHandler(regs*)+0x7e1>
c00181b0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	0f b7 f6             	movzx  esi,si
c00181ba:	50                   	push   eax
c00181bb:	e8 59 f8 ff ff       	call   c0017a19 <Vm::inbv(unsigned short)>
c00181c0:	83 c4 0c             	add    esp,0xc
c00181c3:	0f b6 c0             	movzx  eax,al
c00181c6:	50                   	push   eax
c00181c7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00181cb:	50                   	push   eax
c00181cc:	56                   	push   esi
c00181cd:	e8 7b fe ff ff       	call   c001804d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00181d2:	83 c4 10             	add    esp,0x10
c00181d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00181d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00181dc:	0f 84 0a 06 00 00    	je     c00187ec <Vm::faultHandler(regs*)+0x75f>
c00181e2:	83 e8 01             	sub    eax,0x1
c00181e5:	0f b7 c0             	movzx  eax,ax
c00181e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00181eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00181ee:	83 c0 01             	add    eax,0x1
c00181f1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00181f4:	83 c4 1c             	add    esp,0x1c
c00181f7:	b0 01                	mov    al,0x1
c00181f9:	5b                   	pop    ebx
c00181fa:	5e                   	pop    esi
c00181fb:	5f                   	pop    edi
c00181fc:	5d                   	pop    ebp
c00181fd:	c3                   	ret    
c00181fe:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018203:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018206:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018209:	0f 85 a0 04 00 00    	jne    c00186af <Vm::faultHandler(regs*)+0x622>
c001820f:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018214:	0f b7 c8             	movzx  ecx,ax
c0018217:	0f b7 f6             	movzx  esi,si
c001821a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001821d:	0f 84 69 05 00 00    	je     c001878c <Vm::faultHandler(regs*)+0x6ff>
c0018223:	ed                   	in     eax,dx
c0018224:	83 ec 04             	sub    esp,0x4
c0018227:	50                   	push   eax
c0018228:	51                   	push   ecx
c0018229:	56                   	push   esi
c001822a:	e8 49 fe ff ff       	call   c0018078 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001822f:	83 c4 10             	add    esp,0x10
c0018232:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018235:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018239:	0f 84 d1 05 00 00    	je     c0018810 <Vm::faultHandler(regs*)+0x783>
c001823f:	83 e8 04             	sub    eax,0x4
c0018242:	25 ff ff 00 00       	and    eax,0xffff
c0018247:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001824a:	eb 9f                	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c001824c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018251:	83 f8 06             	cmp    eax,0x6
c0018254:	0f 87 66 03 00 00    	ja     c00185c0 <Vm::faultHandler(regs*)+0x533>
c001825a:	ff 24 85 34 58 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda7cc]
c0018261:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018266:	83 f8 06             	cmp    eax,0x6
c0018269:	0f 87 f5 02 00 00    	ja     c0018564 <Vm::faultHandler(regs*)+0x4d7>
c001826f:	ff 24 85 50 58 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda7b0]
c0018276:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001827a:	83 ec 08             	sub    esp,0x8
c001827d:	50                   	push   eax
c001827e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018282:	50                   	push   eax
c0018283:	e8 a4 f7 ff ff       	call   c0017a2c <Vm::outbv(unsigned short, unsigned char)>
c0018288:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	83 c0 02             	add    eax,0x2
c0018291:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018294:	b0 01                	mov    al,0x1
c0018296:	e9 73 fe ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c001829b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001829f:	3d ee 00 00 00       	cmp    eax,0xee
c00182a4:	0f 84 62 04 00 00    	je     c001870c <Vm::faultHandler(regs*)+0x67f>
c00182aa:	83 ec 0c             	sub    esp,0xc
c00182ad:	55                   	push   ebp
c00182ae:	57                   	push   edi
c00182af:	51                   	push   ecx
c00182b0:	50                   	push   eax
c00182b1:	53                   	push   ebx
c00182b2:	e8 b6 fc ff ff       	call   c0017f6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00182b7:	83 c4 20             	add    esp,0x20
c00182ba:	b0 01                	mov    al,0x1
c00182bc:	e9 4d fe ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c00182c1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00182c5:	89 d1                	mov    ecx,edx
c00182c7:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00182ca:	c1 e1 08             	shl    ecx,0x8
c00182cd:	09 ca                	or     edx,ecx
c00182cf:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00182d2:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00182d6:	89 d1                	mov    ecx,edx
c00182d8:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00182dc:	c1 e1 08             	shl    ecx,0x8
c00182df:	09 ca                	or     edx,ecx
c00182e1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00182e4:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00182e8:	89 d1                	mov    ecx,edx
c00182ea:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00182ee:	c1 e1 08             	shl    ecx,0x8
c00182f1:	09 ca                	or     edx,ecx
c00182f3:	81 ca 00 02 02 00    	or     edx,0x20200
c00182f9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00182fc:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0018300:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018306:	d1 e8                	shr    eax,1
c0018308:	83 e0 01             	and    eax,0x1
c001830b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001830e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018311:	83 c0 06             	add    eax,0x6
c0018314:	25 ff ff 00 00       	and    eax,0xffff
c0018319:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001831c:	b0 01                	mov    al,0x1
c001831e:	e9 eb fd ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018323:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018326:	83 ec 0c             	sub    esp,0xc
c0018329:	b0 00                	mov    al,0x0
c001832b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001832e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018332:	50                   	push   eax
c0018333:	e8 e1 f6 ff ff       	call   c0017a19 <Vm::inbv(unsigned short)>
c0018338:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001833b:	83 c4 10             	add    esp,0x10
c001833e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018341:	83 c1 02             	add    ecx,0x2
c0018344:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018347:	0f b6 c0             	movzx  eax,al
c001834a:	09 c2                	or     edx,eax
c001834c:	b0 01                	mov    al,0x1
c001834e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018351:	e9 b8 fd ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018356:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001835b:	0f 85 8a 03 00 00    	jne    c00186eb <Vm::faultHandler(regs*)+0x65e>
c0018361:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018364:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c001836a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001836d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018371:	66 ed                	in     ax,dx
c0018373:	0f b7 c0             	movzx  eax,ax
c0018376:	09 f0                	or     eax,esi
c0018378:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001837b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001837e:	83 c0 02             	add    eax,0x2
c0018381:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018384:	83 c4 1c             	add    esp,0x1c
c0018387:	b0 01                	mov    al,0x1
c0018389:	5b                   	pop    ebx
c001838a:	5e                   	pop    esi
c001838b:	5f                   	pop    edi
c001838c:	5d                   	pop    ebp
c001838d:	c3                   	ret    
c001838e:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018393:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001839a:	0f 84 e3 02 00 00    	je     c0018683 <Vm::faultHandler(regs*)+0x5f6>
c00183a0:	83 ea 04             	sub    edx,0x4
c00183a3:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00183a9:	81 e2 ff ff 00 00    	and    edx,0xffff
c00183af:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00183b2:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c00183b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00183bb:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c00183bf:	0f 84 26 fe ff ff    	je     c00181eb <Vm::faultHandler(regs*)+0x15e>
c00183c5:	80 cd 02             	or     ch,0x2
c00183c8:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c00183cb:	e9 1b fe ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c00183d0:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00183d5:	0f 84 77 02 00 00    	je     c0018652 <Vm::faultHandler(regs*)+0x5c5>
c00183db:	8b 10                	mov    edx,DWORD PTR [eax]
c00183dd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00183e3:	81 ca 00 02 02 00    	or     edx,0x20200
c00183e9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00183ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00183ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00183f4:	c1 e8 09             	shr    eax,0x9
c00183f7:	83 e0 01             	and    eax,0x1
c00183fa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00183fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018400:	83 c0 04             	add    eax,0x4
c0018403:	25 ff ff 00 00       	and    eax,0xffff
c0018408:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001840b:	e9 db fd ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018410:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018414:	83 ec 08             	sub    esp,0x8
c0018417:	50                   	push   eax
c0018418:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001841c:	50                   	push   eax
c001841d:	e8 0a f6 ff ff       	call   c0017a2c <Vm::outbv(unsigned short, unsigned char)>
c0018422:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	b0 01                	mov    al,0x1
c001842a:	83 c2 01             	add    edx,0x1
c001842d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018430:	e9 d9 fc ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018435:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001843a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001843d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018440:	0f 84 b8 02 00 00    	je     c00186fe <Vm::faultHandler(regs*)+0x671>
c0018446:	ef                   	out    dx,eax
c0018447:	e9 9f fd ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c001844c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001844f:	83 c2 01             	add    edx,0x1
c0018452:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018455:	e9 ca fc ff ff       	jmp    c0018124 <Vm::faultHandler(regs*)+0x97>
c001845a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001845f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018463:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018466:	83 c0 01             	add    eax,0x1
c0018469:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001846c:	b0 01                	mov    al,0x1
c001846e:	e9 9b fc ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018473:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018476:	83 ec 0c             	sub    esp,0xc
c0018479:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001847d:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018483:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018486:	50                   	push   eax
c0018487:	e8 8d f5 ff ff       	call   c0017a19 <Vm::inbv(unsigned short)>
c001848c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018495:	83 c5 01             	add    ebp,0x1
c0018498:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c001849b:	0f b6 c0             	movzx  eax,al
c001849e:	09 c7                	or     edi,eax
c00184a0:	b0 01                	mov    al,0x1
c00184a2:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c00184a5:	e9 64 fc ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c00184aa:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00184af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00184b2:	0f 85 40 02 00 00    	jne    c00186f8 <Vm::faultHandler(regs*)+0x66b>
c00184b8:	66 ed                	in     ax,dx
c00184ba:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00184bd:	0f b7 c0             	movzx  eax,ax
c00184c0:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00184c6:	09 d0                	or     eax,edx
c00184c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00184cb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184ce:	b0 01                	mov    al,0x1
c00184d0:	83 c1 01             	add    ecx,0x1
c00184d3:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00184d6:	e9 33 fc ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c00184db:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00184e0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00184e3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00184e7:	0f 84 18 02 00 00    	je     c0018705 <Vm::faultHandler(regs*)+0x678>
c00184ed:	ef                   	out    dx,eax
c00184ee:	e9 88 fe ff ff       	jmp    c001837b <Vm::faultHandler(regs*)+0x2ee>
c00184f3:	89 f0                	mov    eax,esi
c00184f5:	0f b6 f0             	movzx  esi,al
c00184f8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00184fc:	50                   	push   eax
c00184fd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018501:	50                   	push   eax
c0018502:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018506:	50                   	push   eax
c0018507:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001850b:	50                   	push   eax
c001850c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018510:	50                   	push   eax
c0018511:	56                   	push   esi
c0018512:	56                   	push   esi
c0018513:	68 ac 54 02 c0       	push   0xc00254ac
c0018518:	e8 31 ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001851d:	83 c4 20             	add    esp,0x20
c0018520:	83 ec 0c             	sub    esp,0xc
c0018523:	6a 60                	push   0x60
c0018525:	e8 ef f4 ff ff       	call   c0017a19 <Vm::inbv(unsigned short)>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	0f b6 c0             	movzx  eax,al
c0018530:	83 f8 1c             	cmp    eax,0x1c
c0018533:	74 17                	je     c001854c <Vm::faultHandler(regs*)+0x4bf>
c0018535:	83 f8 5a             	cmp    eax,0x5a
c0018538:	75 e6                	jne    c0018520 <Vm::faultHandler(regs*)+0x493>
c001853a:	eb 10                	jmp    c001854c <Vm::faultHandler(regs*)+0x4bf>
c001853c:	83 ec 0c             	sub    esp,0xc
c001853f:	6a 60                	push   0x60
c0018541:	e8 d3 f4 ff ff       	call   c0017a19 <Vm::inbv(unsigned short)>
c0018546:	83 c4 10             	add    esp,0x10
c0018549:	0f b6 c0             	movzx  eax,al
c001854c:	83 f8 1c             	cmp    eax,0x1c
c001854f:	74 eb                	je     c001853c <Vm::faultHandler(regs*)+0x4af>
c0018551:	83 f8 5a             	cmp    eax,0x5a
c0018554:	74 e6                	je     c001853c <Vm::faultHandler(regs*)+0x4af>
c0018556:	31 c0                	xor    eax,eax
c0018558:	e9 b1 fb ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c001855d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001855f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018564:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018569:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001856c:	0f 85 a3 00 00 00    	jne    c0018615 <Vm::faultHandler(regs*)+0x588>
c0018572:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018575:	0f b7 c6             	movzx  eax,si
c0018578:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001857d:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018580:	81 e1 00 04 00 00    	and    ecx,0x400
c0018586:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001858b:	0f 84 2b 02 00 00    	je     c00187bc <Vm::faultHandler(regs*)+0x72f>
c0018591:	83 ec 08             	sub    esp,0x8
c0018594:	50                   	push   eax
c0018595:	52                   	push   edx
c0018596:	e8 a1 fa ff ff       	call   c001803c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	89 fa                	mov    edx,edi
c00185a0:	ef                   	out    dx,eax
c00185a1:	85 c9                	test   ecx,ecx
c00185a3:	0f 84 77 02 00 00    	je     c0018820 <Vm::faultHandler(regs*)+0x793>
c00185a9:	8d 46 fc             	lea    eax,[esi-0x4]
c00185ac:	25 ff ff 00 00       	and    eax,0xffff
c00185b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00185b4:	e9 32 fc ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c00185b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185bb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00185c0:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185c5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00185c8:	74 0b                	je     c00185d5 <Vm::faultHandler(regs*)+0x548>
c00185ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00185cf:	0f 87 68 02 00 00    	ja     c001883d <Vm::faultHandler(regs*)+0x7b0>
c00185d5:	83 ec 08             	sub    esp,0x8
c00185d8:	0f b7 c0             	movzx  eax,ax
c00185db:	50                   	push   eax
c00185dc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00185e1:	50                   	push   eax
c00185e2:	e8 32 fa ff ff       	call   c0018019 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00185e7:	5e                   	pop    esi
c00185e8:	5f                   	pop    edi
c00185e9:	0f b6 c0             	movzx  eax,al
c00185ec:	50                   	push   eax
c00185ed:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00185f1:	50                   	push   eax
c00185f2:	e8 35 f4 ff ff       	call   c0017a2c <Vm::outbv(unsigned short, unsigned char)>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00185fd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018601:	0f 84 da 01 00 00    	je     c00187e1 <Vm::faultHandler(regs*)+0x754>
c0018607:	83 e8 01             	sub    eax,0x1
c001860a:	0f b7 c0             	movzx  eax,ax
c001860d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018610:	e9 d6 fb ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018615:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001861b:	0f 86 51 ff ff ff    	jbe    c0018572 <Vm::faultHandler(regs*)+0x4e5>
c0018621:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018625:	50                   	push   eax
c0018626:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001862a:	50                   	push   eax
c001862b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001862f:	50                   	push   eax
c0018630:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018634:	50                   	push   eax
c0018635:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018639:	50                   	push   eax
c001863a:	6a 6f                	push   0x6f
c001863c:	6a 6f                	push   0x6f
c001863e:	68 7c 54 02 c0       	push   0xc002547c
c0018643:	e8 06 e9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018648:	83 c4 20             	add    esp,0x20
c001864b:	31 c0                	xor    eax,eax
c001864d:	e9 bc fa ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018652:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018655:	81 ca 00 02 02 00    	or     edx,0x20200
c001865b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001865e:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018661:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018667:	c1 e8 09             	shr    eax,0x9
c001866a:	83 e0 01             	and    eax,0x1
c001866d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018670:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018673:	83 c0 02             	add    eax,0x2
c0018676:	25 ff ff 00 00       	and    eax,0xffff
c001867b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001867e:	e9 68 fb ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018683:	83 ea 02             	sub    edx,0x2
c0018686:	81 e2 ff ff 00 00    	and    edx,0xffff
c001868c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001868f:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018693:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018699:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001869d:	0f 84 54 01 00 00    	je     c00187f7 <Vm::faultHandler(regs*)+0x76a>
c00186a3:	80 cd 02             	or     ch,0x2
c00186a6:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c00186aa:	e9 3c fb ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c00186af:	3d ff ff 00 00       	cmp    eax,0xffff
c00186b4:	0f 86 55 fb ff ff    	jbe    c001820f <Vm::faultHandler(regs*)+0x182>
c00186ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00186be:	50                   	push   eax
c00186bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00186c3:	50                   	push   eax
c00186c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00186c8:	50                   	push   eax
c00186c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00186cd:	50                   	push   eax
c00186ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00186d2:	50                   	push   eax
c00186d3:	6a 6d                	push   0x6d
c00186d5:	6a 6d                	push   0x6d
c00186d7:	68 7c 54 02 c0       	push   0xc002547c
c00186dc:	e8 6d e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00186e1:	83 c4 20             	add    esp,0x20
c00186e4:	31 c0                	xor    eax,eax
c00186e6:	e9 23 fa ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c00186eb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00186ef:	ed                   	in     eax,dx
c00186f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00186f3:	e9 83 fc ff ff       	jmp    c001837b <Vm::faultHandler(regs*)+0x2ee>
c00186f8:	ed                   	in     eax,dx
c00186f9:	e9 ca fd ff ff       	jmp    c00184c8 <Vm::faultHandler(regs*)+0x43b>
c00186fe:	66 ef                	out    dx,ax
c0018700:	e9 e6 fa ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018705:	66 ef                	out    dx,ax
c0018707:	e9 6f fc ff ff       	jmp    c001837b <Vm::faultHandler(regs*)+0x2ee>
c001870c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001870f:	83 ec 0c             	sub    esp,0xc
c0018712:	50                   	push   eax
c0018713:	e8 b8 f3 ff ff       	call   c0017ad0 <Vm::mainloop3(unsigned long)>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	b0 01                	mov    al,0x1
c001871d:	e9 ec f9 ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c0018722:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0018725:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001872a:	e9 35 fe ff ff       	jmp    c0018564 <Vm::faultHandler(regs*)+0x4d7>
c001872f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0018732:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018737:	e9 28 fe ff ff       	jmp    c0018564 <Vm::faultHandler(regs*)+0x4d7>
c001873c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001873f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018744:	e9 1b fe ff ff       	jmp    c0018564 <Vm::faultHandler(regs*)+0x4d7>
c0018749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001874d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018752:	e9 0d fe ff ff       	jmp    c0018564 <Vm::faultHandler(regs*)+0x4d7>
c0018757:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001875a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001875f:	e9 5c fe ff ff       	jmp    c00185c0 <Vm::faultHandler(regs*)+0x533>
c0018764:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0018767:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001876c:	e9 4f fe ff ff       	jmp    c00185c0 <Vm::faultHandler(regs*)+0x533>
c0018771:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018774:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018779:	e9 42 fe ff ff       	jmp    c00185c0 <Vm::faultHandler(regs*)+0x533>
c001877e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018782:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018787:	e9 34 fe ff ff       	jmp    c00185c0 <Vm::faultHandler(regs*)+0x533>
c001878c:	66 ed                	in     ax,dx
c001878e:	83 ec 04             	sub    esp,0x4
c0018791:	0f b7 c0             	movzx  eax,ax
c0018794:	50                   	push   eax
c0018795:	51                   	push   ecx
c0018796:	56                   	push   esi
c0018797:	e8 c6 f8 ff ff       	call   c0018062 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00187a2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00187a6:	0f 84 84 00 00 00    	je     c0018830 <Vm::faultHandler(regs*)+0x7a3>
c00187ac:	83 e8 02             	sub    eax,0x2
c00187af:	25 ff ff 00 00       	and    eax,0xffff
c00187b4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00187b7:	e9 2f fa ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c00187bc:	83 ec 08             	sub    esp,0x8
c00187bf:	50                   	push   eax
c00187c0:	52                   	push   edx
c00187c1:	e8 64 f8 ff ff       	call   c001802a <Vm::readWordFromReal(unsigned short, unsigned short)>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	89 fa                	mov    edx,edi
c00187cb:	66 ef                	out    dx,ax
c00187cd:	85 c9                	test   ecx,ecx
c00187cf:	74 32                	je     c0018803 <Vm::faultHandler(regs*)+0x776>
c00187d1:	8d 46 fe             	lea    eax,[esi-0x2]
c00187d4:	25 ff ff 00 00       	and    eax,0xffff
c00187d9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00187dc:	e9 0a fa ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c00187e1:	83 c0 01             	add    eax,0x1
c00187e4:	0f b7 c0             	movzx  eax,ax
c00187e7:	e9 21 fe ff ff       	jmp    c001860d <Vm::faultHandler(regs*)+0x580>
c00187ec:	83 c0 01             	add    eax,0x1
c00187ef:	0f b7 c0             	movzx  eax,ax
c00187f2:	e9 f1 f9 ff ff       	jmp    c00181e8 <Vm::faultHandler(regs*)+0x15b>
c00187f7:	80 e5 fd             	and    ch,0xfd
c00187fa:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c00187fe:	e9 e8 f9 ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018803:	8d 46 02             	lea    eax,[esi+0x2]
c0018806:	25 ff ff 00 00       	and    eax,0xffff
c001880b:	e9 fd fd ff ff       	jmp    c001860d <Vm::faultHandler(regs*)+0x580>
c0018810:	83 c0 04             	add    eax,0x4
c0018813:	25 ff ff 00 00       	and    eax,0xffff
c0018818:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001881b:	e9 cb f9 ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018820:	8d 46 04             	lea    eax,[esi+0x4]
c0018823:	25 ff ff 00 00       	and    eax,0xffff
c0018828:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001882b:	e9 bb f9 ff ff       	jmp    c00181eb <Vm::faultHandler(regs*)+0x15e>
c0018830:	83 c0 02             	add    eax,0x2
c0018833:	25 ff ff 00 00       	and    eax,0xffff
c0018838:	e9 ab f9 ff ff       	jmp    c00181e8 <Vm::faultHandler(regs*)+0x15b>
c001883d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018841:	50                   	push   eax
c0018842:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018846:	50                   	push   eax
c0018847:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001884b:	50                   	push   eax
c001884c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018850:	50                   	push   eax
c0018851:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018855:	50                   	push   eax
c0018856:	6a 6e                	push   0x6e
c0018858:	6a 6e                	push   0x6e
c001885a:	68 7c 54 02 c0       	push   0xc002547c
c001885f:	e8 ea e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018864:	83 c4 20             	add    esp,0x20
c0018867:	31 c0                	xor    eax,eax
c0018869:	e9 a0 f8 ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c001886e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018872:	50                   	push   eax
c0018873:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018877:	50                   	push   eax
c0018878:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001887c:	50                   	push   eax
c001887d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018881:	50                   	push   eax
c0018882:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018886:	50                   	push   eax
c0018887:	6a 6c                	push   0x6c
c0018889:	6a 6c                	push   0x6c
c001888b:	68 7c 54 02 c0       	push   0xc002547c
c0018890:	e8 b9 e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018895:	83 c4 20             	add    esp,0x20
c0018898:	31 c0                	xor    eax,eax
c001889a:	e9 6f f8 ff ff       	jmp    c001810e <Vm::faultHandler(regs*)+0x81>
c001889f:	90                   	nop

c00188a0 <noCopro(unsigned long)>:
c00188a0:	c3                   	ret    
c00188a1:	90                   	nop

c00188a2 <CPU::close(int, int, void*)>:
c00188a2:	31 c0                	xor    eax,eax
c00188a4:	c3                   	ret    

c00188a5 <x86ReadCMOS(unsigned char)>:
c00188a5:	83 ec 14             	sub    esp,0x14
c00188a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188ac:	88 04 24             	mov    BYTE PTR [esp],al
c00188af:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c00188b4:	0f b6 c0             	movzx  eax,al
c00188b7:	85 c0                	test   eax,eax
c00188b9:	74 04                	je     c00188bf <x86ReadCMOS(unsigned char)+0x1a>
c00188bb:	b2 00                	mov    dl,0x0
c00188bd:	eb 02                	jmp    c00188c1 <x86ReadCMOS(unsigned char)+0x1c>
c00188bf:	b2 80                	mov    dl,0x80
c00188c1:	8a 04 24             	mov    al,BYTE PTR [esp]
c00188c4:	09 d0                	or     eax,edx
c00188c6:	0f b6 c0             	movzx  eax,al
c00188c9:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00188d0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00188d4:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00188d8:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00188dd:	ee                   	out    dx,al
c00188de:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00188e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00188ea:	89 c2                	mov    edx,eax
c00188ec:	ec                   	in     al,dx
c00188ed:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00188f1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00188f5:	83 c4 14             	add    esp,0x14
c00188f8:	c3                   	ret    

c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>:
c00188f9:	83 ec 18             	sub    esp,0x18
c00188fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018900:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018904:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018908:	88 d0                	mov    al,dl
c001890a:	88 04 24             	mov    BYTE PTR [esp],al
c001890d:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c0018912:	0f b6 c0             	movzx  eax,al
c0018915:	85 c0                	test   eax,eax
c0018917:	74 04                	je     c001891d <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018919:	b2 00                	mov    dl,0x0
c001891b:	eb 02                	jmp    c001891f <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c001891d:	b2 80                	mov    dl,0x80
c001891f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018923:	09 d0                	or     eax,edx
c0018925:	0f b6 c0             	movzx  eax,al
c0018928:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c001892f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018933:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018937:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001893c:	ee                   	out    dx,al
c001893d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018941:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018948:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001894c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018950:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018955:	ee                   	out    dx,al
c0018956:	90                   	nop
c0018957:	83 c4 18             	add    esp,0x18
c001895a:	c3                   	ret    

c001895b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c001895b:	60                   	pusha  
c001895c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018960:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018964:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018968:	9c                   	pushf  
c0018969:	fa                   	cli    
c001896a:	0f 09                	wbinvd 
c001896c:	0f 30                	wrmsr  
c001896e:	9d                   	popf   
c001896f:	89 c2                	mov    edx,eax
c0018971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018975:	89 10                	mov    DWORD PTR [eax],edx
c0018977:	61                   	popa   
c0018978:	90                   	nop
c0018979:	c3                   	ret    

c001897a <AMD_K6_read_msr(unsigned int, REGS*)>:
c001897a:	60                   	pusha  
c001897b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001897f:	89 c1                	mov    ecx,eax
c0018981:	9c                   	pushf  
c0018982:	fa                   	cli    
c0018983:	0f 09                	wbinvd 
c0018985:	31 c0                	xor    eax,eax
c0018987:	31 d2                	xor    edx,edx
c0018989:	0f 32                	rdmsr  
c001898b:	9d                   	popf   
c001898c:	89 c2                	mov    edx,eax
c001898e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018992:	89 10                	mov    DWORD PTR [eax],edx
c0018994:	61                   	popa   
c0018995:	90                   	nop
c0018996:	c3                   	ret    

c0018997 <AMD_K6_writeback(int, int, int)>:
c0018997:	83 ec 20             	sub    esp,0x20
c001899a:	a1 34 f1 02 c0       	mov    eax,ds:0xc002f134
c001899f:	c1 e8 14             	shr    eax,0x14
c00189a2:	c1 e8 02             	shr    eax,0x2
c00189a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189a9:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c00189ae:	0f 85 9e 00 00 00    	jne    c0018a52 <AMD_K6_writeback(int, int, int)+0xbb>
c00189b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189bc:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00189c1:	75 19                	jne    c00189dc <AMD_K6_writeback(int, int, int)+0x45>
c00189c3:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00189c8:	7f 0a                	jg     c00189d4 <AMD_K6_writeback(int, int, int)+0x3d>
c00189ca:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00189d2:	eb 08                	jmp    c00189dc <AMD_K6_writeback(int, int, int)+0x45>
c00189d4:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00189dc:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00189e1:	7c 6e                	jl     c0018a51 <AMD_K6_writeback(int, int, int)+0xba>
c00189e3:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00189e8:	7e 09                	jle    c00189f3 <AMD_K6_writeback(int, int, int)+0x5c>
c00189ea:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00189ef:	74 36                	je     c0018a27 <AMD_K6_writeback(int, int, int)+0x90>
c00189f1:	eb 5e                	jmp    c0018a51 <AMD_K6_writeback(int, int, int)+0xba>
c00189f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00189f7:	50                   	push   eax
c00189f8:	68 82 00 00 c0       	push   0xc0000082
c00189fd:	e8 78 ff ff ff       	call   c001897a <AMD_K6_read_msr(unsigned int, REGS*)>
c0018a02:	83 c4 08             	add    esp,0x8
c0018a05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a09:	d1 e0                	shl    eax,1
c0018a0b:	83 e0 7f             	and    eax,0x7f
c0018a0e:	89 c2                	mov    edx,eax
c0018a10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a14:	50                   	push   eax
c0018a15:	6a 00                	push   0x0
c0018a17:	52                   	push   edx
c0018a18:	68 82 00 00 c0       	push   0xc0000082
c0018a1d:	e8 39 ff ff ff       	call   c001895b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018a22:	83 c4 10             	add    esp,0x10
c0018a25:	eb 2b                	jmp    c0018a52 <AMD_K6_writeback(int, int, int)+0xbb>
c0018a27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a2b:	50                   	push   eax
c0018a2c:	68 82 00 00 c0       	push   0xc0000082
c0018a31:	e8 44 ff ff ff       	call   c001897a <AMD_K6_read_msr(unsigned int, REGS*)>
c0018a36:	83 c4 08             	add    esp,0x8
c0018a39:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a3d:	50                   	push   eax
c0018a3e:	6a 00                	push   0x0
c0018a40:	6a 00                	push   0x0
c0018a42:	68 82 00 00 c0       	push   0xc0000082
c0018a47:	e8 0f ff ff ff       	call   c001895b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018a4c:	83 c4 10             	add    esp,0x10
c0018a4f:	eb 01                	jmp    c0018a52 <AMD_K6_writeback(int, int, int)+0xbb>
c0018a51:	90                   	nop
c0018a52:	90                   	nop
c0018a53:	83 c4 20             	add    esp,0x20
c0018a56:	c3                   	ret    

c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018a57:	56                   	push   esi
c0018a58:	53                   	push   ebx
c0018a59:	a1 80 71 02 c0       	mov    eax,ds:0xc0027180
c0018a5e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018a62:	75 32                	jne    c0018a96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018a64:	8b 15 e0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fae0
c0018a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a6e:	89 10                	mov    DWORD PTR [eax],edx
c0018a70:	8b 15 dc fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fadc
c0018a76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a7a:	89 10                	mov    DWORD PTR [eax],edx
c0018a7c:	8b 15 d8 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fad8
c0018a82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a86:	89 10                	mov    DWORD PTR [eax],edx
c0018a88:	8b 15 d4 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fad4
c0018a8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a92:	89 10                	mov    DWORD PTR [eax],edx
c0018a94:	eb 5c                	jmp    c0018af2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a9a:	ba 00 00 00 00       	mov    edx,0x0
c0018a9f:	89 d1                	mov    ecx,edx
c0018aa1:	0f a2                	cpuid  
c0018aa3:	89 c6                	mov    esi,eax
c0018aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aa9:	89 30                	mov    DWORD PTR [eax],esi
c0018aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018aaf:	89 18                	mov    DWORD PTR [eax],ebx
c0018ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ab5:	89 08                	mov    DWORD PTR [eax],ecx
c0018ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018abb:	89 10                	mov    DWORD PTR [eax],edx
c0018abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ac1:	a3 80 71 02 c0       	mov    ds:0xc0027180,eax
c0018ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0018acc:	a3 e0 fa 02 c0       	mov    ds:0xc002fae0,eax
c0018ad1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ad7:	a3 dc fa 02 c0       	mov    ds:0xc002fadc,eax
c0018adc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ae2:	a3 d8 fa 02 c0       	mov    ds:0xc002fad8,eax
c0018ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018aed:	a3 d4 fa 02 c0       	mov    ds:0xc002fad4,eax
c0018af2:	5b                   	pop    ebx
c0018af3:	5e                   	pop    esi
c0018af4:	c3                   	ret    

c0018af5 <cpuidCheckEDX(unsigned int)>:
c0018af5:	83 ec 10             	sub    esp,0x10
c0018af8:	89 e0                	mov    eax,esp
c0018afa:	50                   	push   eax
c0018afb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018aff:	50                   	push   eax
c0018b00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b04:	50                   	push   eax
c0018b05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b09:	50                   	push   eax
c0018b0a:	6a 01                	push   0x1
c0018b0c:	e8 46 ff ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b11:	83 c4 14             	add    esp,0x14
c0018b14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018b17:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018b1b:	0f 95 c0             	setne  al
c0018b1e:	83 c4 10             	add    esp,0x10
c0018b21:	c3                   	ret    

c0018b22 <cpuidCheckECX(unsigned int)>:
c0018b22:	83 ec 10             	sub    esp,0x10
c0018b25:	89 e0                	mov    eax,esp
c0018b27:	50                   	push   eax
c0018b28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b2c:	50                   	push   eax
c0018b2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b31:	50                   	push   eax
c0018b32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b36:	50                   	push   eax
c0018b37:	6a 01                	push   0x1
c0018b39:	e8 19 ff ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b3e:	83 c4 14             	add    esp,0x14
c0018b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b45:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018b49:	0f 95 c0             	setne  al
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	c3                   	ret    

c0018b50 <cpuidCheckExtendedEBX(unsigned int)>:
c0018b50:	83 ec 10             	sub    esp,0x10
c0018b53:	89 e0                	mov    eax,esp
c0018b55:	50                   	push   eax
c0018b56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b5a:	50                   	push   eax
c0018b5b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b5f:	50                   	push   eax
c0018b60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b64:	50                   	push   eax
c0018b65:	6a 07                	push   0x7
c0018b67:	e8 eb fe ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b6c:	83 c4 14             	add    esp,0x14
c0018b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b73:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018b77:	0f 95 c0             	setne  al
c0018b7a:	83 c4 10             	add    esp,0x10
c0018b7d:	c3                   	ret    

c0018b7e <cpuidCheckExtendedECX(unsigned int)>:
c0018b7e:	83 ec 10             	sub    esp,0x10
c0018b81:	89 e0                	mov    eax,esp
c0018b83:	50                   	push   eax
c0018b84:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b88:	50                   	push   eax
c0018b89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b8d:	50                   	push   eax
c0018b8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b92:	50                   	push   eax
c0018b93:	6a 07                	push   0x7
c0018b95:	e8 bd fe ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b9a:	83 c4 14             	add    esp,0x14
c0018b9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ba1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018ba5:	0f 95 c0             	setne  al
c0018ba8:	83 c4 10             	add    esp,0x10
c0018bab:	c3                   	ret    

c0018bac <HalDetectFeatures()>:
c0018bac:	57                   	push   edi
c0018bad:	56                   	push   esi
c0018bae:	53                   	push   ebx
c0018baf:	81 ec 90 00 00 00    	sub    esp,0x90
c0018bb5:	83 ec 04             	sub    esp,0x4
c0018bb8:	6a 08                	push   0x8
c0018bba:	6a 00                	push   0x0
c0018bbc:	68 0c fb 02 c0       	push   0xc002fb0c
c0018bc1:	e8 2a 79 fe ff       	call   c00004f0 <memset>
c0018bc6:	83 c4 10             	add    esp,0x10
c0018bc9:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018bce:	83 c8 04             	or     eax,0x4
c0018bd1:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018bd6:	e8 1e 76 fe ff       	call   c00001f9 <detectCPUID>
c0018bdb:	85 c0                	test   eax,eax
c0018bdd:	0f 95 c0             	setne  al
c0018be0:	83 e0 01             	and    eax,0x1
c0018be3:	83 e0 01             	and    eax,0x1
c0018be6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018be9:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018bee:	83 e0 fd             	and    eax,0xfffffffd
c0018bf1:	88 c2                	mov    dl,al
c0018bf3:	88 c8                	mov    al,cl
c0018bf5:	09 d0                	or     eax,edx
c0018bf7:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018bfc:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018c01:	83 e0 02             	and    eax,0x2
c0018c04:	0f b6 c0             	movzx  eax,al
c0018c07:	85 c0                	test   eax,eax
c0018c09:	0f 84 7f 02 00 00    	je     c0018e8e <HalDetectFeatures()+0x2e2>
c0018c0f:	83 ec 0c             	sub    esp,0xc
c0018c12:	6a 20                	push   0x20
c0018c14:	e8 dc fe ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018c19:	83 c4 10             	add    esp,0x10
c0018c1c:	83 e0 01             	and    eax,0x1
c0018c1f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018c26:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018c2b:	83 e0 f7             	and    eax,0xfffffff7
c0018c2e:	88 c2                	mov    dl,al
c0018c30:	88 c8                	mov    al,cl
c0018c32:	09 d0                	or     eax,edx
c0018c34:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018c39:	83 ec 0c             	sub    esp,0xc
c0018c3c:	68 00 00 00 04       	push   0x4000000
c0018c41:	e8 af fe ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018c46:	83 c4 10             	add    esp,0x10
c0018c49:	89 c1                	mov    ecx,eax
c0018c4b:	83 e1 01             	and    ecx,0x1
c0018c4e:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018c53:	83 e0 fe             	and    eax,0xfffffffe
c0018c56:	88 c2                	mov    dl,al
c0018c58:	88 c8                	mov    al,cl
c0018c5a:	09 d0                	or     eax,edx
c0018c5c:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018c61:	83 ec 0c             	sub    esp,0xc
c0018c64:	68 80 00 00 00       	push   0x80
c0018c69:	e8 87 fe ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018c6e:	83 c4 10             	add    esp,0x10
c0018c71:	89 c1                	mov    ecx,eax
c0018c73:	c1 e1 07             	shl    ecx,0x7
c0018c76:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018c7b:	83 e0 7f             	and    eax,0x7f
c0018c7e:	88 c2                	mov    dl,al
c0018c80:	88 c8                	mov    al,cl
c0018c82:	09 d0                	or     eax,edx
c0018c84:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018c89:	83 ec 0c             	sub    esp,0xc
c0018c8c:	68 00 00 80 00       	push   0x800000
c0018c91:	e8 5f fe ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018c96:	83 c4 10             	add    esp,0x10
c0018c99:	83 e0 01             	and    eax,0x1
c0018c9c:	89 c1                	mov    ecx,eax
c0018c9e:	c1 e1 05             	shl    ecx,0x5
c0018ca1:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ca6:	83 e0 df             	and    eax,0xffffffdf
c0018ca9:	88 c2                	mov    dl,al
c0018cab:	88 c8                	mov    al,cl
c0018cad:	09 d0                	or     eax,edx
c0018caf:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018cb4:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0018cb9:	83 e0 01             	and    eax,0x1
c0018cbc:	75 0c                	jne    c0018cca <HalDetectFeatures()+0x11e>
c0018cbe:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0018cc3:	25 00 04 00 00       	and    eax,0x400
c0018cc8:	74 0f                	je     c0018cd9 <HalDetectFeatures()+0x12d>
c0018cca:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ccf:	83 e0 fe             	and    eax,0xfffffffe
c0018cd2:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018cd7:	eb 28                	jmp    c0018d01 <HalDetectFeatures()+0x155>
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	68 00 02 00 00       	push   0x200
c0018ce1:	e8 0f fe ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018ce6:	83 c4 10             	add    esp,0x10
c0018ce9:	89 c1                	mov    ecx,eax
c0018ceb:	83 e1 01             	and    ecx,0x1
c0018cee:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018cf3:	83 e0 fe             	and    eax,0xfffffffe
c0018cf6:	88 c2                	mov    dl,al
c0018cf8:	88 c8                	mov    al,cl
c0018cfa:	09 d0                	or     eax,edx
c0018cfc:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018d01:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018d06:	83 e0 01             	and    eax,0x1
c0018d09:	0f b6 c0             	movzx  eax,al
c0018d0c:	85 c0                	test   eax,eax
c0018d0e:	74 1c                	je     c0018d2c <HalDetectFeatures()+0x180>
c0018d10:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018d15:	83 e0 08             	and    eax,0x8
c0018d18:	0f b6 c0             	movzx  eax,al
c0018d1b:	85 c0                	test   eax,eax
c0018d1d:	75 0d                	jne    c0018d2c <HalDetectFeatures()+0x180>
c0018d1f:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018d24:	83 e0 fe             	and    eax,0xfffffffe
c0018d27:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018d2c:	83 ec 0c             	sub    esp,0xc
c0018d2f:	68 6c 58 02 c0       	push   0xc002586c
c0018d34:	e8 15 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d39:	83 c4 10             	add    esp,0x10
c0018d3c:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018d41:	83 e0 fe             	and    eax,0xfffffffe
c0018d44:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018d49:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018d51:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018d59:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018d61:	85 c0                	test   eax,eax
c0018d63:	0f 84 ab 00 00 00    	je     c0018e14 <HalDetectFeatures()+0x268>
c0018d69:	83 ec 0c             	sub    esp,0xc
c0018d6c:	6a 01                	push   0x1
c0018d6e:	e8 af fd ff ff       	call   c0018b22 <cpuidCheckECX(unsigned int)>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	83 e0 01             	and    eax,0x1
c0018d79:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018d7c:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018d81:	83 e0 fd             	and    eax,0xfffffffd
c0018d84:	88 c2                	mov    dl,al
c0018d86:	88 c8                	mov    al,cl
c0018d88:	09 d0                	or     eax,edx
c0018d8a:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018d8f:	83 ec 0c             	sub    esp,0xc
c0018d92:	68 00 02 00 00       	push   0x200
c0018d97:	e8 86 fd ff ff       	call   c0018b22 <cpuidCheckECX(unsigned int)>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	83 e0 01             	and    eax,0x1
c0018da2:	89 c1                	mov    ecx,eax
c0018da4:	c1 e1 04             	shl    ecx,0x4
c0018da7:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018dac:	83 e0 ef             	and    eax,0xffffffef
c0018daf:	88 c2                	mov    dl,al
c0018db1:	88 c8                	mov    al,cl
c0018db3:	09 d0                	or     eax,edx
c0018db5:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018dba:	83 ec 0c             	sub    esp,0xc
c0018dbd:	68 00 00 08 00       	push   0x80000
c0018dc2:	e8 5b fd ff ff       	call   c0018b22 <cpuidCheckECX(unsigned int)>
c0018dc7:	83 c4 10             	add    esp,0x10
c0018dca:	83 e0 01             	and    eax,0x1
c0018dcd:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018dd4:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018dd9:	83 e0 fb             	and    eax,0xfffffffb
c0018ddc:	88 c2                	mov    dl,al
c0018dde:	88 c8                	mov    al,cl
c0018de0:	09 d0                	or     eax,edx
c0018de2:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018de7:	83 ec 0c             	sub    esp,0xc
c0018dea:	68 00 00 10 00       	push   0x100000
c0018def:	e8 2e fd ff ff       	call   c0018b22 <cpuidCheckECX(unsigned int)>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	83 e0 01             	and    eax,0x1
c0018dfa:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018e01:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018e06:	83 e0 f7             	and    eax,0xfffffff7
c0018e09:	88 c2                	mov    dl,al
c0018e0b:	88 c8                	mov    al,cl
c0018e0d:	09 d0                	or     eax,edx
c0018e0f:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e1b:	50                   	push   eax
c0018e1c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e20:	50                   	push   eax
c0018e21:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018e25:	50                   	push   eax
c0018e26:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018e2a:	50                   	push   eax
c0018e2b:	68 00 00 00 80       	push   0x80000000
c0018e30:	e8 22 fc ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e35:	83 c4 20             	add    esp,0x20
c0018e38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e3c:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018e41:	76 4b                	jbe    c0018e8e <HalDetectFeatures()+0x2e2>
c0018e43:	83 ec 0c             	sub    esp,0xc
c0018e46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e4a:	50                   	push   eax
c0018e4b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e4f:	50                   	push   eax
c0018e50:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018e54:	50                   	push   eax
c0018e55:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018e59:	50                   	push   eax
c0018e5a:	68 01 00 00 80       	push   0x80000001
c0018e5f:	e8 f3 fb ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e64:	83 c4 20             	add    esp,0x20
c0018e67:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018e6c:	83 e0 bf             	and    eax,0xffffffbf
c0018e6f:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018e74:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018e79:	83 e0 fd             	and    eax,0xfffffffd
c0018e7c:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018e81:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018e86:	83 e0 fe             	and    eax,0xfffffffe
c0018e89:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018e8e:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0018e93:	25 00 04 00 00       	and    eax,0x400
c0018e98:	74 1d                	je     c0018eb7 <HalDetectFeatures()+0x30b>
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	68 7e 58 02 c0       	push   0xc002587e
c0018ea2:	e8 a7 e0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018eaf:	83 e0 fb             	and    eax,0xfffffffb
c0018eb2:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018eb7:	c6 05 08 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb08,0x1
c0018ebe:	83 ec 04             	sub    esp,0x4
c0018ec1:	6a 0d                	push   0xd
c0018ec3:	6a 00                	push   0x0
c0018ec5:	68 f0 fa 02 c0       	push   0xc002faf0
c0018eca:	e8 21 76 fe ff       	call   c00004f0 <memset>
c0018ecf:	83 c4 10             	add    esp,0x10
c0018ed2:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ed7:	83 e0 02             	and    eax,0x2
c0018eda:	0f b6 c0             	movzx  eax,al
c0018edd:	85 c0                	test   eax,eax
c0018edf:	0f 84 16 08 00 00    	je     c00196fb <HalDetectFeatures()+0xb4f>
c0018ee5:	83 ec 0c             	sub    esp,0xc
c0018ee8:	6a 10                	push   0x10
c0018eea:	e8 06 fc ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018eef:	83 c4 10             	add    esp,0x10
c0018ef2:	83 e0 01             	and    eax,0x1
c0018ef5:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018efc:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018f01:	83 e0 f7             	and    eax,0xfffffff7
c0018f04:	88 c2                	mov    dl,al
c0018f06:	88 c8                	mov    al,cl
c0018f08:	09 d0                	or     eax,edx
c0018f0a:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018f0f:	83 ec 0c             	sub    esp,0xc
c0018f12:	6a 40                	push   0x40
c0018f14:	e8 dc fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018f19:	83 c4 10             	add    esp,0x10
c0018f1c:	83 e0 01             	and    eax,0x1
c0018f1f:	89 c1                	mov    ecx,eax
c0018f21:	c1 e1 04             	shl    ecx,0x4
c0018f24:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018f29:	83 e0 ef             	and    eax,0xffffffef
c0018f2c:	88 c2                	mov    dl,al
c0018f2e:	88 c8                	mov    al,cl
c0018f30:	09 d0                	or     eax,edx
c0018f32:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	6a 08                	push   0x8
c0018f3c:	e8 b4 fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	83 e0 01             	and    eax,0x1
c0018f47:	89 c1                	mov    ecx,eax
c0018f49:	c1 e1 05             	shl    ecx,0x5
c0018f4c:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018f51:	83 e0 df             	and    eax,0xffffffdf
c0018f54:	88 c2                	mov    dl,al
c0018f56:	88 c8                	mov    al,cl
c0018f58:	09 d0                	or     eax,edx
c0018f5a:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018f5f:	83 ec 0c             	sub    esp,0xc
c0018f62:	68 00 20 00 00       	push   0x2000
c0018f67:	e8 89 fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018f6c:	83 c4 10             	add    esp,0x10
c0018f6f:	83 e0 01             	and    eax,0x1
c0018f72:	89 c1                	mov    ecx,eax
c0018f74:	c1 e1 06             	shl    ecx,0x6
c0018f77:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018f7c:	83 e0 bf             	and    eax,0xffffffbf
c0018f7f:	88 c2                	mov    dl,al
c0018f81:	88 c8                	mov    al,cl
c0018f83:	09 d0                	or     eax,edx
c0018f85:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	68 00 00 01 00       	push   0x10000
c0018f92:	e8 5e fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018f97:	83 c4 10             	add    esp,0x10
c0018f9a:	89 c1                	mov    ecx,eax
c0018f9c:	c1 e1 07             	shl    ecx,0x7
c0018f9f:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0018fa4:	83 e0 7f             	and    eax,0x7f
c0018fa7:	88 c2                	mov    dl,al
c0018fa9:	88 c8                	mov    al,cl
c0018fab:	09 d0                	or     eax,edx
c0018fad:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0018fb2:	83 ec 0c             	sub    esp,0xc
c0018fb5:	6a 01                	push   0x1
c0018fb7:	e8 39 fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	83 e0 01             	and    eax,0x1
c0018fc2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018fc9:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0018fce:	83 e0 f7             	and    eax,0xfffffff7
c0018fd1:	88 c2                	mov    dl,al
c0018fd3:	88 c8                	mov    al,cl
c0018fd5:	09 d0                	or     eax,edx
c0018fd7:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	68 00 08 00 00       	push   0x800
c0018fe4:	e8 0c fb ff ff       	call   c0018af5 <cpuidCheckEDX(unsigned int)>
c0018fe9:	83 c4 10             	add    esp,0x10
c0018fec:	89 c1                	mov    ecx,eax
c0018fee:	83 e1 01             	and    ecx,0x1
c0018ff1:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0018ff6:	83 e0 fe             	and    eax,0xfffffffe
c0018ff9:	88 c2                	mov    dl,al
c0018ffb:	88 c8                	mov    al,cl
c0018ffd:	09 d0                	or     eax,edx
c0018fff:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019004:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019009:	83 e0 40             	and    eax,0x40
c001900c:	0f b6 c0             	movzx  eax,al
c001900f:	85 c0                	test   eax,eax
c0019011:	74 0a                	je     c001901d <HalDetectFeatures()+0x471>
c0019013:	c7 05 e8 fa 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fae8,0x100
c001901d:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019022:	83 e0 80             	and    eax,0xffffff80
c0019025:	0f b6 c0             	movzx  eax,al
c0019028:	85 c0                	test   eax,eax
c001902a:	74 0a                	je     c0019036 <HalDetectFeatures()+0x48a>
c001902c:	c7 05 e4 fa 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fae4,0x80
c0019036:	83 ec 0c             	sub    esp,0xc
c0019039:	8d 44 24 14          	lea    eax,[esp+0x14]
c001903d:	50                   	push   eax
c001903e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019042:	50                   	push   eax
c0019043:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019047:	50                   	push   eax
c0019048:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001904c:	50                   	push   eax
c001904d:	6a 00                	push   0x0
c001904f:	e8 03 fa ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019054:	83 c4 20             	add    esp,0x20
c0019057:	c7 44 24 48 f0 fa 02 c0 	mov    DWORD PTR [esp+0x48],0xc002faf0
c001905f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019063:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019067:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001906f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019073:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019077:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001907b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001907f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019083:	89 c6                	mov    esi,eax
c0019085:	89 d7                	mov    edi,edx
c0019087:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019089:	89 c8                	mov    eax,ecx
c001908b:	89 fa                	mov    edx,edi
c001908d:	89 f3                	mov    ebx,esi
c001908f:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019093:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019097:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001909b:	b8 f4 fa 02 c0       	mov    eax,0xc002faf4
c00190a0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00190a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190a8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00190ac:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00190b4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00190b8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00190bc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00190c0:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00190c4:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00190c8:	89 c6                	mov    esi,eax
c00190ca:	89 d7                	mov    edi,edx
c00190cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190ce:	89 c8                	mov    eax,ecx
c00190d0:	89 fa                	mov    edx,edi
c00190d2:	89 f3                	mov    ebx,esi
c00190d4:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00190d8:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00190dc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190e0:	b8 f8 fa 02 c0       	mov    eax,0xc002faf8
c00190e5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00190ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190f0:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00190f4:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00190fc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019103:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019107:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001910b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019112:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019116:	89 c6                	mov    esi,eax
c0019118:	89 d7                	mov    edi,edx
c001911a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001911c:	89 c8                	mov    eax,ecx
c001911e:	89 fa                	mov    edx,edi
c0019120:	89 f3                	mov    ebx,esi
c0019122:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019126:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001912a:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001912e:	83 ec 08             	sub    esp,0x8
c0019131:	68 8d 58 02 c0       	push   0xc002588d
c0019136:	68 f0 fa 02 c0       	push   0xc002faf0
c001913b:	e8 40 76 fe ff       	call   c0000780 <strcmp>
c0019140:	83 c4 10             	add    esp,0x10
c0019143:	85 c0                	test   eax,eax
c0019145:	74 19                	je     c0019160 <HalDetectFeatures()+0x5b4>
c0019147:	83 ec 08             	sub    esp,0x8
c001914a:	68 9a 58 02 c0       	push   0xc002589a
c001914f:	68 f0 fa 02 c0       	push   0xc002faf0
c0019154:	e8 27 76 fe ff       	call   c0000780 <strcmp>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	85 c0                	test   eax,eax
c001915e:	75 04                	jne    c0019164 <HalDetectFeatures()+0x5b8>
c0019160:	b0 01                	mov    al,0x1
c0019162:	eb 02                	jmp    c0019166 <HalDetectFeatures()+0x5ba>
c0019164:	b0 00                	mov    al,0x0
c0019166:	0f b6 c0             	movzx  eax,al
c0019169:	85 c0                	test   eax,eax
c001916b:	74 0f                	je     c001917c <HalDetectFeatures()+0x5d0>
c001916d:	c7 05 04 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x2
c0019177:	e9 0d 03 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c001917c:	83 ec 08             	sub    esp,0x8
c001917f:	68 a7 58 02 c0       	push   0xc00258a7
c0019184:	68 f0 fa 02 c0       	push   0xc002faf0
c0019189:	e8 f2 75 fe ff       	call   c0000780 <strcmp>
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	85 c0                	test   eax,eax
c0019193:	74 19                	je     c00191ae <HalDetectFeatures()+0x602>
c0019195:	83 ec 08             	sub    esp,0x8
c0019198:	68 b4 58 02 c0       	push   0xc00258b4
c001919d:	68 f0 fa 02 c0       	push   0xc002faf0
c00191a2:	e8 d9 75 fe ff       	call   c0000780 <strcmp>
c00191a7:	83 c4 10             	add    esp,0x10
c00191aa:	85 c0                	test   eax,eax
c00191ac:	75 04                	jne    c00191b2 <HalDetectFeatures()+0x606>
c00191ae:	b0 01                	mov    al,0x1
c00191b0:	eb 02                	jmp    c00191b4 <HalDetectFeatures()+0x608>
c00191b2:	b0 00                	mov    al,0x0
c00191b4:	0f b6 c0             	movzx  eax,al
c00191b7:	85 c0                	test   eax,eax
c00191b9:	74 0f                	je     c00191ca <HalDetectFeatures()+0x61e>
c00191bb:	c7 05 04 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x4
c00191c5:	e9 bf 02 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c00191ca:	83 ec 08             	sub    esp,0x8
c00191cd:	68 c1 58 02 c0       	push   0xc00258c1
c00191d2:	68 f0 fa 02 c0       	push   0xc002faf0
c00191d7:	e8 a4 75 fe ff       	call   c0000780 <strcmp>
c00191dc:	83 c4 10             	add    esp,0x10
c00191df:	85 c0                	test   eax,eax
c00191e1:	74 19                	je     c00191fc <HalDetectFeatures()+0x650>
c00191e3:	83 ec 08             	sub    esp,0x8
c00191e6:	68 ce 58 02 c0       	push   0xc00258ce
c00191eb:	68 f0 fa 02 c0       	push   0xc002faf0
c00191f0:	e8 8b 75 fe ff       	call   c0000780 <strcmp>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	85 c0                	test   eax,eax
c00191fa:	75 04                	jne    c0019200 <HalDetectFeatures()+0x654>
c00191fc:	b0 01                	mov    al,0x1
c00191fe:	eb 02                	jmp    c0019202 <HalDetectFeatures()+0x656>
c0019200:	b0 00                	mov    al,0x0
c0019202:	0f b6 c0             	movzx  eax,al
c0019205:	85 c0                	test   eax,eax
c0019207:	74 0f                	je     c0019218 <HalDetectFeatures()+0x66c>
c0019209:	c7 05 04 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x5
c0019213:	e9 71 02 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019218:	83 ec 08             	sub    esp,0x8
c001921b:	68 db 58 02 c0       	push   0xc00258db
c0019220:	68 f0 fa 02 c0       	push   0xc002faf0
c0019225:	e8 56 75 fe ff       	call   c0000780 <strcmp>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	85 c0                	test   eax,eax
c001922f:	0f 94 c0             	sete   al
c0019232:	0f b6 c0             	movzx  eax,al
c0019235:	85 c0                	test   eax,eax
c0019237:	74 0f                	je     c0019248 <HalDetectFeatures()+0x69c>
c0019239:	c7 05 04 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x1
c0019243:	e9 41 02 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019248:	83 ec 08             	sub    esp,0x8
c001924b:	68 e8 58 02 c0       	push   0xc00258e8
c0019250:	68 f0 fa 02 c0       	push   0xc002faf0
c0019255:	e8 26 75 fe ff       	call   c0000780 <strcmp>
c001925a:	83 c4 10             	add    esp,0x10
c001925d:	85 c0                	test   eax,eax
c001925f:	0f 94 c0             	sete   al
c0019262:	0f b6 c0             	movzx  eax,al
c0019265:	85 c0                	test   eax,eax
c0019267:	74 0f                	je     c0019278 <HalDetectFeatures()+0x6cc>
c0019269:	c7 05 04 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x3
c0019273:	e9 11 02 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019278:	83 ec 08             	sub    esp,0x8
c001927b:	68 a7 58 02 c0       	push   0xc00258a7
c0019280:	68 f0 fa 02 c0       	push   0xc002faf0
c0019285:	e8 f6 74 fe ff       	call   c0000780 <strcmp>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	85 c0                	test   eax,eax
c001928f:	0f 94 c0             	sete   al
c0019292:	0f b6 c0             	movzx  eax,al
c0019295:	85 c0                	test   eax,eax
c0019297:	74 0f                	je     c00192a8 <HalDetectFeatures()+0x6fc>
c0019299:	c7 05 04 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x6
c00192a3:	e9 e1 01 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c00192a8:	83 ec 08             	sub    esp,0x8
c00192ab:	68 f5 58 02 c0       	push   0xc00258f5
c00192b0:	68 f0 fa 02 c0       	push   0xc002faf0
c00192b5:	e8 c6 74 fe ff       	call   c0000780 <strcmp>
c00192ba:	83 c4 10             	add    esp,0x10
c00192bd:	85 c0                	test   eax,eax
c00192bf:	0f 94 c0             	sete   al
c00192c2:	0f b6 c0             	movzx  eax,al
c00192c5:	85 c0                	test   eax,eax
c00192c7:	74 0f                	je     c00192d8 <HalDetectFeatures()+0x72c>
c00192c9:	c7 05 04 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x7
c00192d3:	e9 b1 01 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c00192d8:	83 ec 08             	sub    esp,0x8
c00192db:	68 02 59 02 c0       	push   0xc0025902
c00192e0:	68 f0 fa 02 c0       	push   0xc002faf0
c00192e5:	e8 96 74 fe ff       	call   c0000780 <strcmp>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	85 c0                	test   eax,eax
c00192ef:	0f 94 c0             	sete   al
c00192f2:	0f b6 c0             	movzx  eax,al
c00192f5:	85 c0                	test   eax,eax
c00192f7:	74 0f                	je     c0019308 <HalDetectFeatures()+0x75c>
c00192f9:	c7 05 04 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x8
c0019303:	e9 81 01 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019308:	83 ec 08             	sub    esp,0x8
c001930b:	68 0f 59 02 c0       	push   0xc002590f
c0019310:	68 f0 fa 02 c0       	push   0xc002faf0
c0019315:	e8 66 74 fe ff       	call   c0000780 <strcmp>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	85 c0                	test   eax,eax
c001931f:	0f 94 c0             	sete   al
c0019322:	0f b6 c0             	movzx  eax,al
c0019325:	85 c0                	test   eax,eax
c0019327:	74 0f                	je     c0019338 <HalDetectFeatures()+0x78c>
c0019329:	c7 05 04 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x9
c0019333:	e9 51 01 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019338:	83 ec 08             	sub    esp,0x8
c001933b:	68 1c 59 02 c0       	push   0xc002591c
c0019340:	68 f0 fa 02 c0       	push   0xc002faf0
c0019345:	e8 36 74 fe ff       	call   c0000780 <strcmp>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	85 c0                	test   eax,eax
c001934f:	0f 94 c0             	sete   al
c0019352:	0f b6 c0             	movzx  eax,al
c0019355:	85 c0                	test   eax,eax
c0019357:	74 0f                	je     c0019368 <HalDetectFeatures()+0x7bc>
c0019359:	c7 05 04 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xa
c0019363:	e9 21 01 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019368:	83 ec 08             	sub    esp,0x8
c001936b:	68 29 59 02 c0       	push   0xc0025929
c0019370:	68 f0 fa 02 c0       	push   0xc002faf0
c0019375:	e8 06 74 fe ff       	call   c0000780 <strcmp>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	85 c0                	test   eax,eax
c001937f:	0f 94 c0             	sete   al
c0019382:	0f b6 c0             	movzx  eax,al
c0019385:	85 c0                	test   eax,eax
c0019387:	74 0f                	je     c0019398 <HalDetectFeatures()+0x7ec>
c0019389:	c7 05 04 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xb
c0019393:	e9 f1 00 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019398:	83 ec 08             	sub    esp,0x8
c001939b:	68 36 59 02 c0       	push   0xc0025936
c00193a0:	68 f0 fa 02 c0       	push   0xc002faf0
c00193a5:	e8 d6 73 fe ff       	call   c0000780 <strcmp>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	85 c0                	test   eax,eax
c00193af:	0f 94 c0             	sete   al
c00193b2:	0f b6 c0             	movzx  eax,al
c00193b5:	85 c0                	test   eax,eax
c00193b7:	74 0f                	je     c00193c8 <HalDetectFeatures()+0x81c>
c00193b9:	c7 05 04 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xc
c00193c3:	e9 c1 00 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c00193c8:	83 ec 08             	sub    esp,0x8
c00193cb:	68 43 59 02 c0       	push   0xc0025943
c00193d0:	68 f0 fa 02 c0       	push   0xc002faf0
c00193d5:	e8 a6 73 fe ff       	call   c0000780 <strcmp>
c00193da:	83 c4 10             	add    esp,0x10
c00193dd:	85 c0                	test   eax,eax
c00193df:	0f 94 c0             	sete   al
c00193e2:	0f b6 c0             	movzx  eax,al
c00193e5:	85 c0                	test   eax,eax
c00193e7:	74 0f                	je     c00193f8 <HalDetectFeatures()+0x84c>
c00193e9:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c00193f3:	e9 91 00 00 00       	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c00193f8:	83 ec 08             	sub    esp,0x8
c00193fb:	68 50 59 02 c0       	push   0xc0025950
c0019400:	68 f0 fa 02 c0       	push   0xc002faf0
c0019405:	e8 76 73 fe ff       	call   c0000780 <strcmp>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	85 c0                	test   eax,eax
c001940f:	0f 94 c0             	sete   al
c0019412:	0f b6 c0             	movzx  eax,al
c0019415:	85 c0                	test   eax,eax
c0019417:	74 0c                	je     c0019425 <HalDetectFeatures()+0x879>
c0019419:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c0019423:	eb 64                	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019425:	83 ec 08             	sub    esp,0x8
c0019428:	68 5d 59 02 c0       	push   0xc002595d
c001942d:	68 f0 fa 02 c0       	push   0xc002faf0
c0019432:	e8 49 73 fe ff       	call   c0000780 <strcmp>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	85 c0                	test   eax,eax
c001943c:	0f 94 c0             	sete   al
c001943f:	0f b6 c0             	movzx  eax,al
c0019442:	85 c0                	test   eax,eax
c0019444:	74 0c                	je     c0019452 <HalDetectFeatures()+0x8a6>
c0019446:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c0019450:	eb 37                	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c0019452:	83 ec 08             	sub    esp,0x8
c0019455:	68 6a 59 02 c0       	push   0xc002596a
c001945a:	68 f0 fa 02 c0       	push   0xc002faf0
c001945f:	e8 1c 73 fe ff       	call   c0000780 <strcmp>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	85 c0                	test   eax,eax
c0019469:	0f 94 c0             	sete   al
c001946c:	0f b6 c0             	movzx  eax,al
c001946f:	85 c0                	test   eax,eax
c0019471:	74 0c                	je     c001947f <HalDetectFeatures()+0x8d3>
c0019473:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c001947d:	eb 0a                	jmp    c0019489 <HalDetectFeatures()+0x8dd>
c001947f:	c7 05 04 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x0
c0019489:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001948d:	83 f8 06             	cmp    eax,0x6
c0019490:	0f 86 cc 00 00 00    	jbe    c0019562 <HalDetectFeatures()+0x9b6>
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	68 80 00 00 00       	push   0x80
c001949e:	e8 ad f6 ff ff       	call   c0018b50 <cpuidCheckExtendedEBX(unsigned int)>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	89 c1                	mov    ecx,eax
c00194a8:	83 e1 01             	and    ecx,0x1
c00194ab:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00194b0:	83 e0 fe             	and    eax,0xfffffffe
c00194b3:	88 c2                	mov    dl,al
c00194b5:	88 c8                	mov    al,cl
c00194b7:	09 d0                	or     eax,edx
c00194b9:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 00 00 10 00       	push   0x100000
c00194c6:	e8 85 f6 ff ff       	call   c0018b50 <cpuidCheckExtendedEBX(unsigned int)>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	83 e0 01             	and    eax,0x1
c00194d1:	89 c1                	mov    ecx,eax
c00194d3:	c1 e1 06             	shl    ecx,0x6
c00194d6:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00194db:	83 e0 bf             	and    eax,0xffffffbf
c00194de:	88 c2                	mov    dl,al
c00194e0:	88 c8                	mov    al,cl
c00194e2:	09 d0                	or     eax,edx
c00194e4:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00194e9:	83 ec 0c             	sub    esp,0xc
c00194ec:	68 00 00 04 00       	push   0x40000
c00194f1:	e8 5a f6 ff ff       	call   c0018b50 <cpuidCheckExtendedEBX(unsigned int)>
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	83 e0 01             	and    eax,0x1
c00194fc:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00194ff:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019504:	83 e0 fd             	and    eax,0xfffffffd
c0019507:	88 c2                	mov    dl,al
c0019509:	88 c8                	mov    al,cl
c001950b:	09 d0                	or     eax,edx
c001950d:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019512:	83 ec 0c             	sub    esp,0xc
c0019515:	6a 04                	push   0x4
c0019517:	e8 62 f6 ff ff       	call   c0018b7e <cpuidCheckExtendedECX(unsigned int)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	83 e0 01             	and    eax,0x1
c0019522:	89 c1                	mov    ecx,eax
c0019524:	c1 e1 05             	shl    ecx,0x5
c0019527:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001952c:	83 e0 df             	and    eax,0xffffffdf
c001952f:	88 c2                	mov    dl,al
c0019531:	88 c8                	mov    al,cl
c0019533:	09 d0                	or     eax,edx
c0019535:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	6a 20                	push   0x20
c001953f:	e8 3a f6 ff ff       	call   c0018b7e <cpuidCheckExtendedECX(unsigned int)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	83 e0 01             	and    eax,0x1
c001954a:	89 c1                	mov    ecx,eax
c001954c:	c1 e1 04             	shl    ecx,0x4
c001954f:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019554:	83 e0 ef             	and    eax,0xffffffef
c0019557:	88 c2                	mov    dl,al
c0019559:	88 c8                	mov    al,cl
c001955b:	09 d0                	or     eax,edx
c001955d:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019569:	50                   	push   eax
c001956a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001956e:	50                   	push   eax
c001956f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019573:	50                   	push   eax
c0019574:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019578:	50                   	push   eax
c0019579:	6a 01                	push   0x1
c001957b:	e8 d7 f4 ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019580:	83 c4 20             	add    esp,0x20
c0019583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019587:	83 e0 0f             	and    eax,0xf
c001958a:	a2 00 fb 02 c0       	mov    ds:0xc002fb00,al
c001958f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019593:	c1 e8 04             	shr    eax,0x4
c0019596:	83 e0 0f             	and    eax,0xf
c0019599:	a2 fe fa 02 c0       	mov    ds:0xc002fafe,al
c001959e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195a2:	c1 e8 08             	shr    eax,0x8
c00195a5:	83 e0 0f             	and    eax,0xf
c00195a8:	a2 fd fa 02 c0       	mov    ds:0xc002fafd,al
c00195ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b1:	c1 e8 0c             	shr    eax,0xc
c00195b4:	83 e0 03             	and    eax,0x3
c00195b7:	a2 ff fa 02 c0       	mov    ds:0xc002faff,al
c00195bc:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00195c1:	0f b6 c0             	movzx  eax,al
c00195c4:	83 f8 06             	cmp    eax,0x6
c00195c7:	74 0d                	je     c00195d6 <HalDetectFeatures()+0xa2a>
c00195c9:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00195ce:	0f b6 c0             	movzx  eax,al
c00195d1:	83 f8 0f             	cmp    eax,0xf
c00195d4:	75 18                	jne    c00195ee <HalDetectFeatures()+0xa42>
c00195d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195da:	c1 e8 10             	shr    eax,0x10
c00195dd:	c1 e0 04             	shl    eax,0x4
c00195e0:	88 c2                	mov    dl,al
c00195e2:	a0 fe fa 02 c0       	mov    al,ds:0xc002fafe
c00195e7:	09 d0                	or     eax,edx
c00195e9:	a2 fe fa 02 c0       	mov    ds:0xc002fafe,al
c00195ee:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00195f3:	0f b6 c0             	movzx  eax,al
c00195f6:	83 f8 0f             	cmp    eax,0xf
c00195f9:	75 15                	jne    c0019610 <HalDetectFeatures()+0xa64>
c00195fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195ff:	c1 e8 14             	shr    eax,0x14
c0019602:	88 c2                	mov    dl,al
c0019604:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c0019609:	01 d0                	add    eax,edx
c001960b:	a2 fd fa 02 c0       	mov    ds:0xc002fafd,al
c0019610:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019618:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019620:	85 c0                	test   eax,eax
c0019622:	74 2d                	je     c0019651 <HalDetectFeatures()+0xaa5>
c0019624:	83 ec 0c             	sub    esp,0xc
c0019627:	68 00 00 00 40       	push   0x40000000
c001962c:	e8 f1 f4 ff ff       	call   c0018b22 <cpuidCheckECX(unsigned int)>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	83 e0 01             	and    eax,0x1
c0019637:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001963e:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019643:	83 e0 fb             	and    eax,0xfffffffb
c0019646:	88 c2                	mov    dl,al
c0019648:	88 c8                	mov    al,cl
c001964a:	09 d0                	or     eax,edx
c001964c:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0019651:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019656:	83 c8 04             	or     eax,0x4
c0019659:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c001965e:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019663:	83 c8 08             	or     eax,0x8
c0019666:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c001966b:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019670:	83 c8 10             	or     eax,0x10
c0019673:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001967f:	50                   	push   eax
c0019680:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019684:	50                   	push   eax
c0019685:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019689:	50                   	push   eax
c001968a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001968e:	50                   	push   eax
c001968f:	68 00 00 00 80       	push   0x80000000
c0019694:	e8 be f3 ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019699:	83 c4 20             	add    esp,0x20
c001969c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196a0:	3d 00 00 00 80       	cmp    eax,0x80000000
c00196a5:	0f 86 96 01 00 00    	jbe    c0019841 <HalDetectFeatures()+0xc95>
c00196ab:	83 ec 0c             	sub    esp,0xc
c00196ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196b2:	50                   	push   eax
c00196b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196b7:	50                   	push   eax
c00196b8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00196bc:	50                   	push   eax
c00196bd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00196c1:	50                   	push   eax
c00196c2:	68 01 00 00 80       	push   0x80000001
c00196c7:	e8 8b f3 ff ff       	call   c0018a57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196cc:	83 c4 20             	add    esp,0x20
c00196cf:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00196d4:	83 e0 7f             	and    eax,0x7f
c00196d7:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00196dc:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00196e1:	83 e0 fb             	and    eax,0xfffffffb
c00196e4:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00196e9:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00196ee:	83 e0 fd             	and    eax,0xfffffffd
c00196f1:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00196f6:	e9 46 01 00 00       	jmp    c0019841 <HalDetectFeatures()+0xc95>
c00196fb:	83 ec 08             	sub    esp,0x8
c00196fe:	68 db 58 02 c0       	push   0xc00258db
c0019703:	68 f0 fa 02 c0       	push   0xc002faf0
c0019708:	e8 43 6f fe ff       	call   c0000650 <strcpy>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	c7 05 04 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x1
c001971a:	e8 a4 6a fe ff       	call   c00001c3 <is486>
c001971f:	85 c0                	test   eax,eax
c0019721:	0f 95 c0             	setne  al
c0019724:	0f b6 c0             	movzx  eax,al
c0019727:	85 c0                	test   eax,eax
c0019729:	0f 84 8d 00 00 00    	je     c00197bc <HalDetectFeatures()+0xc10>
c001972f:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019734:	83 c8 04             	or     eax,0x4
c0019737:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c001973c:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019741:	83 c8 08             	or     eax,0x8
c0019744:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019749:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001974e:	83 c8 10             	or     eax,0x10
c0019751:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019756:	0f 20 c0             	mov    eax,cr0
c0019759:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001975d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019761:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019768:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001976f:	83 e0 04             	and    eax,0x4
c0019772:	74 1e                	je     c0019792 <HalDetectFeatures()+0xbe6>
c0019774:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001977b:	83 e0 10             	and    eax,0x10
c001977e:	75 12                	jne    c0019792 <HalDetectFeatures()+0xbe6>
c0019780:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019785:	83 e0 f7             	and    eax,0xfffffff7
c0019788:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c001978d:	e9 af 00 00 00       	jmp    c0019841 <HalDetectFeatures()+0xc95>
c0019792:	e8 07 6a fe ff       	call   c000019e <hasLegacyFPU>
c0019797:	83 e0 01             	and    eax,0x1
c001979a:	83 e0 01             	and    eax,0x1
c001979d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00197a4:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00197a9:	83 e0 f7             	and    eax,0xfffffff7
c00197ac:	88 c2                	mov    dl,al
c00197ae:	88 c8                	mov    al,cl
c00197b0:	09 d0                	or     eax,edx
c00197b2:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00197b7:	e9 85 00 00 00       	jmp    c0019841 <HalDetectFeatures()+0xc95>
c00197bc:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00197c1:	83 e0 fb             	and    eax,0xfffffffb
c00197c4:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00197c9:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00197ce:	83 e0 f7             	and    eax,0xfffffff7
c00197d1:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00197d6:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00197db:	83 e0 ef             	and    eax,0xffffffef
c00197de:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00197e3:	0f 20 c0             	mov    eax,cr0
c00197e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00197ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197ee:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00197f5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00197fc:	83 e0 04             	and    eax,0x4
c00197ff:	74 1b                	je     c001981c <HalDetectFeatures()+0xc70>
c0019801:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019808:	83 e0 10             	and    eax,0x10
c001980b:	75 0f                	jne    c001981c <HalDetectFeatures()+0xc70>
c001980d:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019812:	83 e0 f7             	and    eax,0xfffffff7
c0019815:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c001981a:	eb 25                	jmp    c0019841 <HalDetectFeatures()+0xc95>
c001981c:	e8 7d 69 fe ff       	call   c000019e <hasLegacyFPU>
c0019821:	83 e0 01             	and    eax,0x1
c0019824:	83 e0 01             	and    eax,0x1
c0019827:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001982e:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019833:	83 e0 f7             	and    eax,0xfffffff7
c0019836:	88 c2                	mov    dl,al
c0019838:	88 c8                	mov    al,cl
c001983a:	09 d0                	or     eax,edx
c001983c:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019841:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019846:	83 e0 08             	and    eax,0x8
c0019849:	0f b6 c0             	movzx  eax,al
c001984c:	85 c0                	test   eax,eax
c001984e:	75 25                	jne    c0019875 <HalDetectFeatures()+0xcc9>
c0019850:	e8 49 69 fe ff       	call   c000019e <hasLegacyFPU>
c0019855:	83 e0 01             	and    eax,0x1
c0019858:	83 e0 01             	and    eax,0x1
c001985b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019862:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019867:	83 e0 f7             	and    eax,0xfffffff7
c001986a:	88 c2                	mov    dl,al
c001986c:	88 c8                	mov    al,cl
c001986e:	09 d0                	or     eax,edx
c0019870:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019875:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c001987a:	83 e0 08             	and    eax,0x8
c001987d:	0f b6 c0             	movzx  eax,al
c0019880:	85 c0                	test   eax,eax
c0019882:	74 0d                	je     c0019891 <HalDetectFeatures()+0xce5>
c0019884:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019889:	83 c8 10             	or     eax,0x10
c001988c:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019891:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019896:	83 e0 10             	and    eax,0x10
c0019899:	0f b6 c0             	movzx  eax,al
c001989c:	85 c0                	test   eax,eax
c001989e:	75 23                	jne    c00198c3 <HalDetectFeatures()+0xd17>
c00198a0:	e8 31 7f 00 00       	call   c00217d6 <x87Detect>
c00198a5:	83 e0 01             	and    eax,0x1
c00198a8:	83 e0 01             	and    eax,0x1
c00198ab:	89 c1                	mov    ecx,eax
c00198ad:	c1 e1 04             	shl    ecx,0x4
c00198b0:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c00198b5:	83 e0 ef             	and    eax,0xffffffef
c00198b8:	88 c2                	mov    dl,al
c00198ba:	88 c8                	mov    al,cl
c00198bc:	09 d0                	or     eax,edx
c00198be:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c00198c3:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c00198c8:	83 e0 01             	and    eax,0x1
c00198cb:	0f b6 c0             	movzx  eax,al
c00198ce:	85 c0                	test   eax,eax
c00198d0:	75 2d                	jne    c00198ff <HalDetectFeatures()+0xd53>
c00198d2:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c00198d7:	83 e0 02             	and    eax,0x2
c00198da:	0f b6 c0             	movzx  eax,al
c00198dd:	85 c0                	test   eax,eax
c00198df:	75 1e                	jne    c00198ff <HalDetectFeatures()+0xd53>
c00198e1:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c00198e6:	83 e0 04             	and    eax,0x4
c00198e9:	0f b6 c0             	movzx  eax,al
c00198ec:	85 c0                	test   eax,eax
c00198ee:	75 0f                	jne    c00198ff <HalDetectFeatures()+0xd53>
c00198f0:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c00198f5:	83 e0 08             	and    eax,0x8
c00198f8:	0f b6 c0             	movzx  eax,al
c00198fb:	85 c0                	test   eax,eax
c00198fd:	74 0d                	je     c001990c <HalDetectFeatures()+0xd60>
c00198ff:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019904:	83 c8 80             	or     eax,0xffffff80
c0019907:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c001990c:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019911:	83 e0 10             	and    eax,0x10
c0019914:	0f b6 c0             	movzx  eax,al
c0019917:	85 c0                	test   eax,eax
c0019919:	74 2f                	je     c001994a <HalDetectFeatures()+0xd9e>
c001991b:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019920:	83 e0 80             	and    eax,0xffffff80
c0019923:	0f b6 c0             	movzx  eax,al
c0019926:	85 c0                	test   eax,eax
c0019928:	75 20                	jne    c001994a <HalDetectFeatures()+0xd9e>
c001992a:	e8 61 7e 00 00       	call   c0021790 <sseDetect>
c001992f:	83 e0 01             	and    eax,0x1
c0019932:	89 c1                	mov    ecx,eax
c0019934:	c1 e1 07             	shl    ecx,0x7
c0019937:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001993c:	83 e0 7f             	and    eax,0x7f
c001993f:	88 c2                	mov    dl,al
c0019941:	88 c8                	mov    al,cl
c0019943:	09 d0                	or     eax,edx
c0019945:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c001994a:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001994f:	83 e0 80             	and    eax,0xffffff80
c0019952:	0f b6 c0             	movzx  eax,al
c0019955:	85 c0                	test   eax,eax
c0019957:	74 1c                	je     c0019975 <HalDetectFeatures()+0xdc9>
c0019959:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c001995e:	83 e0 20             	and    eax,0x20
c0019961:	0f b6 c0             	movzx  eax,al
c0019964:	85 c0                	test   eax,eax
c0019966:	75 0d                	jne    c0019975 <HalDetectFeatures()+0xdc9>
c0019968:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c001996d:	83 e0 df             	and    eax,0xffffffdf
c0019970:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0019975:	c6 05 08 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb08,0x0
c001997c:	90                   	nop
c001997d:	81 c4 90 00 00 00    	add    esp,0x90
c0019983:	5b                   	pop    ebx
c0019984:	5e                   	pop    esi
c0019985:	5f                   	pop    edi
c0019986:	c3                   	ret    

c0019987 <HalEnableNMI()>:
c0019987:	c6 05 ec fa 02 c0 01 	mov    BYTE PTR ds:0xc002faec,0x1
c001998e:	6a 10                	push   0x10
c0019990:	e8 10 ef ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c0019995:	83 c4 04             	add    esp,0x4
c0019998:	90                   	nop
c0019999:	c3                   	ret    

c001999a <HalDisableNMI()>:
c001999a:	c6 05 ec fa 02 c0 00 	mov    BYTE PTR ds:0xc002faec,0x0
c00199a1:	6a 10                	push   0x10
c00199a3:	e8 fd ee ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c00199a8:	83 c4 04             	add    esp,0x4
c00199ab:	90                   	nop
c00199ac:	c3                   	ret    

c00199ad <HalGetNMIState()>:
c00199ad:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c00199b2:	c3                   	ret    

c00199b3 <x86rdmsr(unsigned int)>:
c00199b3:	83 ec 1c             	sub    esp,0x1c
c00199b6:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c00199bb:	83 e0 08             	and    eax,0x8
c00199be:	0f b6 c0             	movzx  eax,al
c00199c1:	85 c0                	test   eax,eax
c00199c3:	75 10                	jne    c00199d5 <x86rdmsr(unsigned int)+0x22>
c00199c5:	83 ec 0c             	sub    esp,0xc
c00199c8:	68 76 59 02 c0       	push   0xc0025976
c00199cd:	e8 7c 64 ff ff       	call   c000fe4e <KePanic(char const*)>
c00199d2:	83 c4 10             	add    esp,0x10
c00199d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199d9:	89 c1                	mov    ecx,eax
c00199db:	0f 32                	rdmsr  
c00199dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00199e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00199ed:	83 c4 1c             	add    esp,0x1c
c00199f0:	c3                   	ret    

c00199f1 <x86wrmsr(unsigned int, unsigned long long)>:
c00199f1:	83 ec 1c             	sub    esp,0x1c
c00199f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00199f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a04:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a09:	83 e0 08             	and    eax,0x8
c0019a0c:	0f b6 c0             	movzx  eax,al
c0019a0f:	85 c0                	test   eax,eax
c0019a11:	75 10                	jne    c0019a23 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	68 7c 59 02 c0       	push   0xc002597c
c0019a1b:	e8 2e 64 ff ff       	call   c000fe4e <KePanic(char const*)>
c0019a20:	83 c4 10             	add    esp,0x10
c0019a23:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a2f:	0f 30                	wrmsr  
c0019a31:	90                   	nop
c0019a32:	83 c4 1c             	add    esp,0x1c
c0019a35:	c3                   	ret    

c0019a36 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019a36:	83 ec 0c             	sub    esp,0xc
c0019a39:	83 ec 0c             	sub    esp,0xc
c0019a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a40:	e8 48 e6 ff ff       	call   c001808d <Vm::faultHandler(regs*)>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	83 c4 0c             	add    esp,0xc
c0019a4b:	c3                   	ret    

c0019a4c <HalFindRSDP()>:
c0019a4c:	83 ec 1c             	sub    esp,0x1c
c0019a4f:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0019a54:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019a59:	7e 0c                	jle    c0019a67 <HalFindRSDP()+0x1b>
c0019a5b:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0019a60:	25 00 04 00 00       	and    eax,0x400
c0019a65:	74 1d                	je     c0019a84 <HalFindRSDP()+0x38>
c0019a67:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a6c:	83 e0 fb             	and    eax,0xfffffffb
c0019a6f:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019a74:	83 ec 0c             	sub    esp,0xc
c0019a77:	68 82 59 02 c0       	push   0xc0025982
c0019a7c:	e8 cd d4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a89:	83 e0 04             	and    eax,0x4
c0019a8c:	0f b6 c0             	movzx  eax,al
c0019a8f:	85 c0                	test   eax,eax
c0019a91:	75 17                	jne    c0019aaa <HalFindRSDP()+0x5e>
c0019a93:	83 ec 0c             	sub    esp,0xc
c0019a96:	68 91 59 02 c0       	push   0xc0025991
c0019a9b:	e8 ae d4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	b8 00 00 00 00       	mov    eax,0x0
c0019aa8:	eb 63                	jmp    c0019b0d <HalFindRSDP()+0xc1>
c0019aaa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019ab2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019aba:	77 2f                	ja     c0019aeb <HalFindRSDP()+0x9f>
c0019abc:	83 ec 04             	sub    esp,0x4
c0019abf:	6a 08                	push   0x8
c0019ac1:	68 9b 59 02 c0       	push   0xc002599b
c0019ac6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aca:	e8 b1 68 fe ff       	call   c0000380 <memcmp>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	85 c0                	test   eax,eax
c0019ad4:	0f 94 c0             	sete   al
c0019ad7:	0f b6 c0             	movzx  eax,al
c0019ada:	85 c0                	test   eax,eax
c0019adc:	74 06                	je     c0019ae4 <HalFindRSDP()+0x98>
c0019ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ae2:	eb 29                	jmp    c0019b0d <HalFindRSDP()+0xc1>
c0019ae4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019ae9:	eb c7                	jmp    c0019ab2 <HalFindRSDP()+0x66>
c0019aeb:	83 ec 0c             	sub    esp,0xc
c0019aee:	68 a4 59 02 c0       	push   0xc00259a4
c0019af3:	e8 56 d4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019af8:	83 c4 10             	add    esp,0x10
c0019afb:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019b00:	83 e0 fb             	and    eax,0xfffffffb
c0019b03:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019b08:	b8 00 00 00 00       	mov    eax,0x0
c0019b0d:	83 c4 1c             	add    esp,0x1c
c0019b10:	c3                   	ret    

c0019b11 <HalHandlePageFault(void*, void*)>:
c0019b11:	83 ec 1c             	sub    esp,0x1c
c0019b14:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b1e:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019b24:	0f 20 d2             	mov    edx,cr2
c0019b27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019b2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b2f:	83 ec 08             	sub    esp,0x8
c0019b32:	52                   	push   edx
c0019b33:	50                   	push   eax
c0019b34:	e8 53 a5 ff ff       	call   c001408c <VAS::tryLoadBackOffDisk(unsigned long)>
c0019b39:	83 c4 10             	add    esp,0x10
c0019b3c:	83 c4 1c             	add    esp,0x1c
c0019b3f:	c3                   	ret    

c0019b40 <HalHandleOpcodeFault(void*, void*)>:
c0019b40:	83 ec 1c             	sub    esp,0x1c
c0019b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b4b:	a0 08 fb 02 c0       	mov    al,ds:0xc002fb08
c0019b50:	0f b6 c0             	movzx  eax,al
c0019b53:	85 c0                	test   eax,eax
c0019b55:	74 25                	je     c0019b7c <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019b57:	83 ec 0c             	sub    esp,0xc
c0019b5a:	68 9c 5b 02 c0       	push   0xc0025b9c
c0019b5f:	e8 ea d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b6e:	8d 50 19             	lea    edx,[eax+0x19]
c0019b71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019b78:	b0 01                	mov    al,0x1
c0019b7a:	eb 02                	jmp    c0019b7e <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019b7c:	b0 00                	mov    al,0x0
c0019b7e:	83 c4 1c             	add    esp,0x1c
c0019b81:	c3                   	ret    

c0019b82 <HalDisplayDebugInfo(void*)>:
c0019b82:	83 ec 2c             	sub    esp,0x2c
c0019b85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b8d:	0f 20 c0             	mov    eax,cr0
c0019b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b94:	0f 20 d0             	mov    eax,cr2
c0019b97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b9b:	0f 20 d8             	mov    eax,cr3
c0019b9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019ba2:	0f 20 e0             	mov    eax,cr4
c0019ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ba9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bad:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019bb0:	83 ec 08             	sub    esp,0x8
c0019bb3:	50                   	push   eax
c0019bb4:	68 be 59 02 c0       	push   0xc00259be
c0019bb9:	e8 90 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019bc8:	83 ec 08             	sub    esp,0x8
c0019bcb:	50                   	push   eax
c0019bcc:	68 af 59 02 c0       	push   0xc00259af
c0019bd1:	e8 78 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019bd6:	83 c4 10             	add    esp,0x10
c0019bd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bdd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019be0:	83 ec 08             	sub    esp,0x8
c0019be3:	50                   	push   eax
c0019be4:	68 ba 59 02 c0       	push   0xc00259ba
c0019be9:	e8 60 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019bee:	83 c4 10             	add    esp,0x10
c0019bf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bf8:	83 ec 08             	sub    esp,0x8
c0019bfb:	50                   	push   eax
c0019bfc:	68 c9 59 02 c0       	push   0xc00259c9
c0019c01:	e8 48 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c06:	83 c4 10             	add    esp,0x10
c0019c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c0d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019c10:	83 ec 08             	sub    esp,0x8
c0019c13:	50                   	push   eax
c0019c14:	68 d4 59 02 c0       	push   0xc00259d4
c0019c19:	e8 30 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c1e:	83 c4 10             	add    esp,0x10
c0019c21:	83 ec 08             	sub    esp,0x8
c0019c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c28:	68 df 59 02 c0       	push   0xc00259df
c0019c2d:	e8 1c d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c32:	83 c4 10             	add    esp,0x10
c0019c35:	83 ec 08             	sub    esp,0x8
c0019c38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c3c:	68 ea 59 02 c0       	push   0xc00259ea
c0019c41:	e8 08 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c4d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019c50:	c1 e0 05             	shl    eax,0x5
c0019c53:	8d 90 e0 6e 02 c0    	lea    edx,[eax-0x3ffd9120]
c0019c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c5d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019c60:	83 ec 04             	sub    esp,0x4
c0019c63:	52                   	push   edx
c0019c64:	50                   	push   eax
c0019c65:	68 f5 59 02 c0       	push   0xc00259f5
c0019c6a:	e8 df d2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019c6f:	83 c4 10             	add    esp,0x10
c0019c72:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019c77:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c7d:	83 ec 0c             	sub    esp,0xc
c0019c80:	50                   	push   eax
c0019c81:	e8 e1 86 ff ff       	call   c0012367 <setActiveTerminal(VgaText*)>
c0019c86:	83 c4 10             	add    esp,0x10
c0019c89:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019c8e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019c94:	83 ec 08             	sub    esp,0x8
c0019c97:	68 04 5a 02 c0       	push   0xc0025a04
c0019c9c:	50                   	push   eax
c0019c9d:	e8 02 8a ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019ca2:	83 c4 10             	add    esp,0x10
c0019ca5:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019caa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019cb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cb4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019cb7:	83 ec 08             	sub    esp,0x8
c0019cba:	52                   	push   edx
c0019cbb:	50                   	push   eax
c0019cbc:	e8 9d 89 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019cc9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ccf:	83 ec 08             	sub    esp,0x8
c0019cd2:	68 12 5a 02 c0       	push   0xc0025a12
c0019cd7:	50                   	push   eax
c0019cd8:	e8 c7 89 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ce5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ceb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019cf0:	8b 12                	mov    edx,DWORD PTR [edx]
c0019cf2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019cf5:	83 c2 0c             	add    edx,0xc
c0019cf8:	83 ec 08             	sub    esp,0x8
c0019cfb:	52                   	push   edx
c0019cfc:	50                   	push   eax
c0019cfd:	e8 a2 89 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019d02:	83 c4 10             	add    esp,0x10
c0019d05:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d0a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d10:	83 ec 08             	sub    esp,0x8
c0019d13:	68 1b 5a 02 c0       	push   0xc0025a1b
c0019d18:	50                   	push   eax
c0019d19:	e8 86 89 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d26:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d30:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019d33:	83 ec 08             	sub    esp,0x8
c0019d36:	52                   	push   edx
c0019d37:	50                   	push   eax
c0019d38:	e8 21 89 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d45:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d4b:	83 ec 08             	sub    esp,0x8
c0019d4e:	68 23 5a 02 c0       	push   0xc0025a23
c0019d53:	50                   	push   eax
c0019d54:	e8 4b 89 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d61:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d6b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019d6e:	83 ec 08             	sub    esp,0x8
c0019d71:	52                   	push   edx
c0019d72:	50                   	push   eax
c0019d73:	e8 e6 88 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d80:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019d86:	83 ec 08             	sub    esp,0x8
c0019d89:	68 2b 5a 02 c0       	push   0xc0025a2b
c0019d8e:	50                   	push   eax
c0019d8f:	e8 10 89 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019d94:	83 c4 10             	add    esp,0x10
c0019d97:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019d9c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019da2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019da6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019da9:	83 ec 08             	sub    esp,0x8
c0019dac:	52                   	push   edx
c0019dad:	50                   	push   eax
c0019dae:	e8 ab 88 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019db3:	83 c4 10             	add    esp,0x10
c0019db6:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019dbb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019dc1:	83 ec 08             	sub    esp,0x8
c0019dc4:	68 33 5a 02 c0       	push   0xc0025a33
c0019dc9:	50                   	push   eax
c0019dca:	e8 d5 88 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019dd7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ddd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019de1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019de4:	83 ec 08             	sub    esp,0x8
c0019de7:	52                   	push   edx
c0019de8:	50                   	push   eax
c0019de9:	e8 70 88 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019dee:	83 c4 10             	add    esp,0x10
c0019df1:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019df6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019dfc:	83 ec 08             	sub    esp,0x8
c0019dff:	68 3b 5a 02 c0       	push   0xc0025a3b
c0019e04:	50                   	push   eax
c0019e05:	e8 9a 88 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019e0a:	83 c4 10             	add    esp,0x10
c0019e0d:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e12:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e1c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019e1f:	83 ec 08             	sub    esp,0x8
c0019e22:	52                   	push   edx
c0019e23:	50                   	push   eax
c0019e24:	e8 35 88 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019e29:	83 c4 10             	add    esp,0x10
c0019e2c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e31:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e37:	83 ec 08             	sub    esp,0x8
c0019e3a:	68 43 5a 02 c0       	push   0xc0025a43
c0019e3f:	50                   	push   eax
c0019e40:	e8 5f 88 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e4d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e57:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019e5a:	83 ec 08             	sub    esp,0x8
c0019e5d:	52                   	push   edx
c0019e5e:	50                   	push   eax
c0019e5f:	e8 fa 87 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e6c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e72:	83 ec 08             	sub    esp,0x8
c0019e75:	68 4b 5a 02 c0       	push   0xc0025a4b
c0019e7a:	50                   	push   eax
c0019e7b:	e8 24 88 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019e80:	83 c4 10             	add    esp,0x10
c0019e83:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e88:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e8e:	83 ec 08             	sub    esp,0x8
c0019e91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e95:	50                   	push   eax
c0019e96:	e8 c3 87 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ea3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ea9:	83 ec 08             	sub    esp,0x8
c0019eac:	68 54 5a 02 c0       	push   0xc0025a54
c0019eb1:	50                   	push   eax
c0019eb2:	e8 ed 87 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ebf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ec5:	83 ec 08             	sub    esp,0x8
c0019ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ecc:	50                   	push   eax
c0019ecd:	e8 8c 87 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019ed2:	83 c4 10             	add    esp,0x10
c0019ed5:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019eda:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ee0:	83 ec 08             	sub    esp,0x8
c0019ee3:	68 5c 5a 02 c0       	push   0xc0025a5c
c0019ee8:	50                   	push   eax
c0019ee9:	e8 b6 87 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ef6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019efc:	83 ec 08             	sub    esp,0x8
c0019eff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f03:	50                   	push   eax
c0019f04:	e8 55 87 ff ff       	call   c001265e <VgaText::putx(unsigned int)>
c0019f09:	83 c4 10             	add    esp,0x10
c0019f0c:	fa                   	cli    
c0019f0d:	f4                   	hlt    
c0019f0e:	eb fe                	jmp    c0019f0e <HalDisplayDebugInfo(void*)+0x38c>

c0019f10 <HalReceivedNMI()>:
c0019f10:	83 ec 1c             	sub    esp,0x1c
c0019f13:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019f1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f1e:	89 c2                	mov    edx,eax
c0019f20:	ec                   	in     al,dx
c0019f21:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019f25:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019f29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f2d:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019f34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f38:	89 c2                	mov    edx,eax
c0019f3a:	ec                   	in     al,dx
c0019f3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019f3f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019f43:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019f47:	83 ec 0c             	sub    esp,0xc
c0019f4a:	68 64 5a 02 c0       	push   0xc0025a64
c0019f4f:	e8 fa cf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019f5c:	83 e0 10             	and    eax,0x10
c0019f5f:	74 10                	je     c0019f71 <HalReceivedNMI()+0x61>
c0019f61:	83 ec 0c             	sub    esp,0xc
c0019f64:	68 75 5a 02 c0       	push   0xc0025a75
c0019f69:	e8 e0 5e ff ff       	call   c000fe4e <KePanic(char const*)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019f76:	83 e0 40             	and    eax,0x40
c0019f79:	74 10                	je     c0019f8b <HalReceivedNMI()+0x7b>
c0019f7b:	83 ec 0c             	sub    esp,0xc
c0019f7e:	68 82 5a 02 c0       	push   0xc0025a82
c0019f83:	e8 c6 5e ff ff       	call   c000fe4e <KePanic(char const*)>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019f8f:	0f be c0             	movsx  eax,al
c0019f92:	85 c0                	test   eax,eax
c0019f94:	79 10                	jns    c0019fa6 <HalReceivedNMI()+0x96>
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	68 8c 5a 02 c0       	push   0xc0025a8c
c0019f9e:	e8 ab 5e ff ff       	call   c000fe4e <KePanic(char const*)>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	90                   	nop
c0019fa7:	83 c4 1c             	add    esp,0x1c
c0019faa:	c3                   	ret    

c0019fab <HalSystemIdle()>:
c0019fab:	56                   	push   esi
c0019fac:	53                   	push   ebx
c0019fad:	83 ec 14             	sub    esp,0x14
c0019fb0:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019fb5:	83 e0 10             	and    eax,0x10
c0019fb8:	0f b6 c0             	movzx  eax,al
c0019fbb:	85 c0                	test   eax,eax
c0019fbd:	74 43                	je     c001a002 <HalSystemIdle()+0x57>
c0019fbf:	83 ec 0c             	sub    esp,0xc
c0019fc2:	68 e1 00 00 00       	push   0xe1
c0019fc7:	e8 e7 f9 ff ff       	call   c00199b3 <x86rdmsr(unsigned int)>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fdb:	83 e0 02             	and    eax,0x2
c0019fde:	89 c3                	mov    ebx,eax
c0019fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fe4:	83 e0 00             	and    eax,0x0
c0019fe7:	89 c6                	mov    esi,eax
c0019fe9:	83 ec 04             	sub    esp,0x4
c0019fec:	56                   	push   esi
c0019fed:	53                   	push   ebx
c0019fee:	68 e1 00 00 00       	push   0xe1
c0019ff3:	e8 f9 f9 ff ff       	call   c00199f1 <x86wrmsr(unsigned int, unsigned long long)>
c0019ff8:	83 c4 10             	add    esp,0x10
c0019ffb:	e8 94 61 fe ff       	call   c0000194 <doTPAUSE>
c001a000:	eb 01                	jmp    c001a003 <HalSystemIdle()+0x58>
c001a002:	f4                   	hlt    
c001a003:	90                   	nop
c001a004:	83 c4 14             	add    esp,0x14
c001a007:	5b                   	pop    ebx
c001a008:	5e                   	pop    esi
c001a009:	c3                   	ret    

c001a00a <i386SaveCoprocessor(void*)>:
c001a00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a00e:	83 c0 3f             	add    eax,0x3f
c001a011:	83 e0 c0             	and    eax,0xffffffc0
c001a014:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a018:	ff 25 d0 fa 02 c0    	jmp    DWORD PTR ds:0xc002fad0

c001a01e <i386LoadCoprocessor(void*)>:
c001a01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a022:	83 c0 3f             	add    eax,0x3f
c001a025:	83 e0 c0             	and    eax,0xffffffc0
c001a028:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a02c:	ff 25 cc fa 02 c0    	jmp    DWORD PTR ds:0xc002facc

c001a032 <x87EmulHandler(regs*, void*)>:
c001a032:	53                   	push   ebx
c001a033:	83 ec 08             	sub    esp,0x8
c001a036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a03b:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a03f:	74 10                	je     c001a051 <x87EmulHandler(regs*, void*)+0x1f>
c001a041:	83 ec 0c             	sub    esp,0xc
c001a044:	68 99 5a 02 c0       	push   0xc0025a99
c001a049:	e8 00 5e ff ff       	call   c000fe4e <KePanic(char const*)>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	0f 20 c0             	mov    eax,cr0
c001a054:	a8 08                	test   al,0x8
c001a056:	74 59                	je     c001a0b1 <x87EmulHandler(regs*, void*)+0x7f>
c001a058:	0f 06                	clts   
c001a05a:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001a05f:	85 c0                	test   eax,eax
c001a061:	74 0e                	je     c001a071 <x87EmulHandler(regs*, void*)+0x3f>
c001a063:	83 ec 0c             	sub    esp,0xc
c001a066:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a069:	e8 9c ff ff ff       	call   c001a00a <i386SaveCoprocessor(void*)>
c001a06e:	83 c4 10             	add    esp,0x10
c001a071:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a077:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a07b:	75 12                	jne    c001a08f <x87EmulHandler(regs*, void*)+0x5d>
c001a07d:	83 ec 0c             	sub    esp,0xc
c001a080:	68 40 02 00 00       	push   0x240
c001a085:	e8 7e 5a ff ff       	call   c000fb08 <malloc>
c001a08a:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a08d:	eb 10                	jmp    c001a09f <x87EmulHandler(regs*, void*)+0x6d>
c001a08f:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001a094:	83 ec 0c             	sub    esp,0xc
c001a097:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a09a:	e8 7f ff ff ff       	call   c001a01e <i386LoadCoprocessor(void*)>
c001a09f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0a4:	83 c4 10             	add    esp,0x10
c001a0a7:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001a0ac:	83 c4 08             	add    esp,0x8
c001a0af:	5b                   	pop    ebx
c001a0b0:	c3                   	ret    
c001a0b1:	83 ec 0c             	sub    esp,0xc
c001a0b4:	68 ad 5a 02 c0       	push   0xc0025aad
c001a0b9:	e8 90 ce fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a0be:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a0c6:	83 c4 18             	add    esp,0x18
c001a0c9:	5b                   	pop    ebx
c001a0ca:	e9 7d d8 ff ff       	jmp    c001794c <Thr::terminateFromIRQ(int)>

c001a0cf <HalInitialiseCoprocessor()>:
c001a0cf:	83 ec 10             	sub    esp,0x10
c001a0d2:	6a 00                	push   0x0
c001a0d4:	68 32 a0 01 c0       	push   0xc001a032
c001a0d9:	6a 07                	push   0x7
c001a0db:	c7 05 c8 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac8,0x0
c001a0e5:	e8 9d 06 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0ea:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	a8 80                	test   al,0x80
c001a0f4:	74 1c                	je     c001a112 <HalInitialiseCoprocessor()+0x43>
c001a0f6:	c7 05 d0 fa 02 c0 a8 17 02 c0 	mov    DWORD PTR ds:0xc002fad0,0xc00217a8
c001a100:	c7 05 cc fa 02 c0 b0 17 02 c0 	mov    DWORD PTR ds:0xc002facc,0xc00217b0
c001a10a:	83 c4 0c             	add    esp,0xc
c001a10d:	e9 a6 76 00 00       	jmp    c00217b8 <sseInit>
c001a112:	a8 10                	test   al,0x10
c001a114:	74 1c                	je     c001a132 <HalInitialiseCoprocessor()+0x63>
c001a116:	c7 05 d0 fa 02 c0 f7 17 02 c0 	mov    DWORD PTR ds:0xc002fad0,0xc00217f7
c001a120:	c7 05 cc fa 02 c0 fe 17 02 c0 	mov    DWORD PTR ds:0xc002facc,0xc00217fe
c001a12a:	83 c4 0c             	add    esp,0xc
c001a12d:	e9 d3 76 00 00       	jmp    c0021805 <x87Init>
c001a132:	c7 05 d0 fa 02 c0 a0 88 01 c0 	mov    DWORD PTR ds:0xc002fad0,0xc00188a0
c001a13c:	c7 05 cc fa 02 c0 a0 88 01 c0 	mov    DWORD PTR ds:0xc002facc,0xc00188a0
c001a146:	0f 20 c0             	mov    eax,cr0
c001a149:	83 c8 04             	or     eax,0x4
c001a14c:	0f 22 c0             	mov    cr0,eax
c001a14f:	83 c4 0c             	add    esp,0xc
c001a152:	c3                   	ret    

c001a153 <HalPanic(char const*)>:
c001a153:	53                   	push   ebx
c001a154:	83 ec 10             	sub    esp,0x10
c001a157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a15b:	fa                   	cli    
c001a15c:	53                   	push   ebx
c001a15d:	68 c3 5a 02 c0       	push   0xc0025ac3
c001a162:	e8 e7 cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a167:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001a16c:	83 c4 10             	add    esp,0x10
c001a16f:	85 c0                	test   eax,eax
c001a171:	74 09                	je     c001a17c <HalPanic(char const*)+0x29>
c001a173:	83 ec 0c             	sub    esp,0xc
c001a176:	53                   	push   ebx
c001a177:	ff d0                	call   eax
c001a179:	83 c4 10             	add    esp,0x10
c001a17c:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c001a181:	85 c0                	test   eax,eax
c001a183:	0f 84 dc 00 00 00    	je     c001a265 <HalPanic(char const*)+0x112>
c001a189:	52                   	push   edx
c001a18a:	6a 01                	push   0x1
c001a18c:	6a 0f                	push   0xf
c001a18e:	50                   	push   eax
c001a18f:	e8 12 80 ff ff       	call   c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a194:	59                   	pop    ecx
c001a195:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a19b:	e8 12 82 ff ff       	call   c00123b2 <VgaText::clearScreen()>
c001a1a0:	58                   	pop    eax
c001a1a1:	5a                   	pop    edx
c001a1a2:	68 76 46 02 c0       	push   0xc0024676
c001a1a7:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a1ad:	e8 2c 80 ff ff       	call   c00121de <VgaText::setTitle(char*)>
c001a1b2:	83 c4 0c             	add    esp,0xc
c001a1b5:	6a 01                	push   0x1
c001a1b7:	6a 0f                	push   0xf
c001a1b9:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a1bf:	e8 e2 7f ff ff       	call   c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a1c4:	59                   	pop    ecx
c001a1c5:	58                   	pop    eax
c001a1c6:	68 dc 5a 02 c0       	push   0xc0025adc
c001a1cb:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a1d1:	e8 ce 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a1d6:	83 c4 0c             	add    esp,0xc
c001a1d9:	6a 0f                	push   0xf
c001a1db:	6a 01                	push   0x1
c001a1dd:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a1e3:	e8 be 7f ff ff       	call   c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a1e8:	58                   	pop    eax
c001a1e9:	5a                   	pop    edx
c001a1ea:	68 e5 5a 02 c0       	push   0xc0025ae5
c001a1ef:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a1f5:	e8 aa 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a1fa:	83 c4 0c             	add    esp,0xc
c001a1fd:	6a 01                	push   0x1
c001a1ff:	6a 0f                	push   0xf
c001a201:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a207:	e8 9a 7f ff ff       	call   c00121a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a20c:	59                   	pop    ecx
c001a20d:	58                   	pop    eax
c001a20e:	68 29 5b 02 c0       	push   0xc0025b29
c001a213:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a219:	e8 86 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a21e:	58                   	pop    eax
c001a21f:	5a                   	pop    edx
c001a220:	68 f2 5a 02 c0       	push   0xc0025af2
c001a225:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a22b:	e8 74 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a230:	59                   	pop    ecx
c001a231:	58                   	pop    eax
c001a232:	68 2c 5b 02 c0       	push   0xc0025b2c
c001a237:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a23d:	e8 62 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a242:	58                   	pop    eax
c001a243:	5a                   	pop    edx
c001a244:	53                   	push   ebx
c001a245:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a24b:	e8 54 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a250:	59                   	pop    ecx
c001a251:	5b                   	pop    ebx
c001a252:	68 29 5b 02 c0       	push   0xc0025b29
c001a257:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a25d:	e8 42 84 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	eb fe                	jmp    c001a265 <HalPanic(char const*)+0x112>

c001a267 <HalQueryPerformanceCounter()>:
c001a267:	31 c0                	xor    eax,eax
c001a269:	31 d2                	xor    edx,edx
c001a26b:	f6 05 0e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0e,0x8
c001a272:	75 02                	jne    c001a276 <HalQueryPerformanceCounter()+0xf>
c001a274:	0f 31                	rdtsc  
c001a276:	c3                   	ret    

c001a277 <HalInitialise()>:
c001a277:	53                   	push   ebx
c001a278:	83 ec 08             	sub    esp,0x8
c001a27b:	c6 05 c0 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fac0,0x0
c001a282:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001a287:	83 e0 fe             	and    eax,0xfffffffe
c001a28a:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c001a28f:	e8 d8 07 00 00       	call   c001aa6c <picOpen()>
c001a294:	80 3d c0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fac0,0x0
c001a29b:	74 0a                	je     c001a2a7 <HalInitialise()+0x30>
c001a29d:	e8 1a 07 00 00       	call   c001a9bc <picDisable()>
c001a2a2:	e8 0b 6b 00 00       	call   c0020db2 <apicOpen()>
c001a2a7:	50                   	push   eax
c001a2a8:	bb 0f 00 00 00       	mov    ebx,0xf
c001a2ad:	6a 00                	push   0x0
c001a2af:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a2b4:	6a 00                	push   0x0
c001a2b6:	e8 cc 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2bb:	83 c4 0c             	add    esp,0xc
c001a2be:	6a 00                	push   0x0
c001a2c0:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a2c5:	6a 01                	push   0x1
c001a2c7:	e8 bb 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2cc:	83 c4 0c             	add    esp,0xc
c001a2cf:	6a 00                	push   0x0
c001a2d1:	68 a4 eb 00 c0       	push   0xc000eba4
c001a2d6:	6a 02                	push   0x2
c001a2d8:	e8 aa 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2dd:	83 c4 0c             	add    esp,0xc
c001a2e0:	6a 00                	push   0x0
c001a2e2:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a2e7:	6a 03                	push   0x3
c001a2e9:	e8 99 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2ee:	83 c4 0c             	add    esp,0xc
c001a2f1:	6a 00                	push   0x0
c001a2f3:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a2f8:	6a 04                	push   0x4
c001a2fa:	e8 88 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2ff:	83 c4 0c             	add    esp,0xc
c001a302:	6a 00                	push   0x0
c001a304:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a309:	6a 05                	push   0x5
c001a30b:	e8 77 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a310:	83 c4 0c             	add    esp,0xc
c001a313:	6a 00                	push   0x0
c001a315:	68 e8 eb 00 c0       	push   0xc000ebe8
c001a31a:	6a 06                	push   0x6
c001a31c:	e8 66 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a321:	83 c4 0c             	add    esp,0xc
c001a324:	6a 00                	push   0x0
c001a326:	68 3c ec 00 c0       	push   0xc000ec3c
c001a32b:	6a 08                	push   0x8
c001a32d:	e8 55 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a332:	83 c4 0c             	add    esp,0xc
c001a335:	6a 00                	push   0x0
c001a337:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a33c:	6a 09                	push   0x9
c001a33e:	e8 44 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a343:	83 c4 0c             	add    esp,0xc
c001a346:	6a 00                	push   0x0
c001a348:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a34d:	6a 0a                	push   0xa
c001a34f:	e8 33 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a354:	83 c4 0c             	add    esp,0xc
c001a357:	6a 00                	push   0x0
c001a359:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a35e:	6a 0b                	push   0xb
c001a360:	e8 22 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a365:	83 c4 0c             	add    esp,0xc
c001a368:	6a 00                	push   0x0
c001a36a:	68 dc ea 00 c0       	push   0xc000eadc
c001a36f:	6a 0d                	push   0xd
c001a371:	e8 11 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a376:	83 c4 0c             	add    esp,0xc
c001a379:	6a 00                	push   0x0
c001a37b:	68 40 eb 00 c0       	push   0xc000eb40
c001a380:	6a 0e                	push   0xe
c001a382:	e8 00 04 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	50                   	push   eax
c001a38b:	6a 00                	push   0x0
c001a38d:	68 b4 eb 00 c0       	push   0xc000ebb4
c001a392:	53                   	push   ebx
c001a393:	43                   	inc    ebx
c001a394:	e8 ee 03 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a399:	83 c4 10             	add    esp,0x10
c001a39c:	83 fb 1e             	cmp    ebx,0x1e
c001a39f:	75 e9                	jne    c001a38a <HalInitialise()+0x113>
c001a3a1:	50                   	push   eax
c001a3a2:	6a 00                	push   0x0
c001a3a4:	68 2d 20 01 c0       	push   0xc001202d
c001a3a9:	6a 60                	push   0x60
c001a3ab:	e8 d7 03 00 00       	call   c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a3b0:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001a3b5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a3bf:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a3c6:	e8 3d 57 ff ff       	call   c000fb08 <malloc>
c001a3cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3ce:	89 c3                	mov    ebx,eax
c001a3d0:	e8 ff 0d 00 00       	call   c001b1d4 <RTC::RTC()>
c001a3d5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a3df:	5a                   	pop    edx
c001a3e0:	59                   	pop    ecx
c001a3e1:	53                   	push   ebx
c001a3e2:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c001a3e8:	e8 e5 f5 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001a3ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3ef:	6a 00                	push   0x0
c001a3f1:	6a 00                	push   0x0
c001a3f3:	6a 00                	push   0x0
c001a3f5:	53                   	push   ebx
c001a3f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a3f9:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001a3fe:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a404:	83 c4 28             	add    esp,0x28
c001a407:	5b                   	pop    ebx
c001a408:	c3                   	ret    

c001a409 <HalMakeBeep(int)>:
c001a409:	53                   	push   ebx
c001a40a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a40e:	85 db                	test   ebx,ebx
c001a410:	75 07                	jne    c001a419 <HalMakeBeep(int)+0x10>
c001a412:	e4 61                	in     al,0x61
c001a414:	83 e0 fc             	and    eax,0xfffffffc
c001a417:	eb 26                	jmp    c001a43f <HalMakeBeep(int)+0x36>
c001a419:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a41e:	99                   	cdq    
c001a41f:	f7 fb                	idiv   ebx
c001a421:	89 c1                	mov    ecx,eax
c001a423:	b0 b6                	mov    al,0xb6
c001a425:	e6 43                	out    0x43,al
c001a427:	88 c8                	mov    al,cl
c001a429:	e6 42                	out    0x42,al
c001a42b:	89 c8                	mov    eax,ecx
c001a42d:	c1 e8 08             	shr    eax,0x8
c001a430:	e6 42                	out    0x42,al
c001a432:	e4 61                	in     al,0x61
c001a434:	89 c2                	mov    edx,eax
c001a436:	83 ca 03             	or     edx,0x3
c001a439:	38 d0                	cmp    al,dl
c001a43b:	74 04                	je     c001a441 <HalMakeBeep(int)+0x38>
c001a43d:	88 d0                	mov    al,dl
c001a43f:	e6 61                	out    0x61,al
c001a441:	5b                   	pop    ebx
c001a442:	c3                   	ret    

c001a443 <HalGetRand()>:
c001a443:	31 c0                	xor    eax,eax
c001a445:	c3                   	ret    

c001a446 <HalEndOfInterrupt(int)>:
c001a446:	80 3d c0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fac0,0x0
c001a44d:	74 1d                	je     c001a46c <HalEndOfInterrupt(int)+0x26>
c001a44f:	83 ec 18             	sub    esp,0x18
c001a452:	6a 1b                	push   0x1b
c001a454:	e8 5a f5 ff ff       	call   c00199b3 <x86rdmsr(unsigned int)>
c001a459:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a45e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a468:	83 c4 1c             	add    esp,0x1c
c001a46b:	c3                   	ret    
c001a46c:	e9 7f 07 00 00       	jmp    c001abf0 <picEOI(int)>

c001a471 <HalRestart()>:
c001a471:	c3                   	ret    

c001a472 <HalShutdown()>:
c001a472:	c3                   	ret    

c001a473 <HalSleep()>:
c001a473:	c3                   	ret    

c001a474 <CPU::CPU()>:
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a47b:	83 ec 08             	sub    esp,0x8
c001a47e:	68 ca 58 02 c0       	push   0xc00258ca
c001a483:	50                   	push   eax
c001a484:	e8 ab f6 fe ff       	call   c0009b34 <Device::Device(char const*)>
c001a489:	83 c4 10             	add    esp,0x10
c001a48c:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c001a491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a495:	89 10                	mov    DWORD PTR [eax],edx
c001a497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a9:	05 64 01 00 00       	add    eax,0x164
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	50                   	push   eax
c001a4b2:	e8 d9 47 ff ff       	call   c000ec90 <GDT::GDT()>
c001a4b7:	83 c4 10             	add    esp,0x10
c001a4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4be:	05 68 09 00 00       	add    eax,0x968
c001a4c3:	83 ec 0c             	sub    esp,0xc
c001a4c6:	50                   	push   eax
c001a4c7:	e8 18 4a ff ff       	call   c000eee4 <IDT::IDT()>
c001a4cc:	83 c4 10             	add    esp,0x10
c001a4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d3:	05 68 11 00 00       	add    eax,0x1168
c001a4d8:	83 ec 0c             	sub    esp,0xc
c001a4db:	50                   	push   eax
c001a4dc:	e8 7f 86 ff ff       	call   c0012b60 <TSS::TSS()>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4e8:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a4f2:	90                   	nop
c001a4f3:	83 c4 0c             	add    esp,0xc
c001a4f6:	c3                   	ret    
c001a4f7:	90                   	nop

c001a4f8 <CPU::setupSMEP()>:
c001a4f8:	0f 20 e0             	mov    eax,cr4
c001a4fb:	0d 00 00 10 00       	or     eax,0x100000
c001a500:	0f 22 e0             	mov    cr4,eax
c001a503:	c3                   	ret    

c001a504 <CPU::setupUMIP()>:
c001a504:	0f 20 e0             	mov    eax,cr4
c001a507:	80 cc 08             	or     ah,0x8
c001a50a:	0f 22 e0             	mov    cr4,eax
c001a50d:	c3                   	ret    

c001a50e <CPU::setupTSC()>:
c001a50e:	0f 20 e0             	mov    eax,cr4
c001a511:	83 c8 04             	or     eax,0x4
c001a514:	0f 22 e0             	mov    cr4,eax
c001a517:	c3                   	ret    

c001a518 <CPU::setupLargePages()>:
c001a518:	0f 20 e0             	mov    eax,cr4
c001a51b:	83 c8 10             	or     eax,0x10
c001a51e:	0f 22 e0             	mov    cr4,eax
c001a521:	c3                   	ret    

c001a522 <CPU::setupPAT()>:
c001a522:	f6 05 0c fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0c,0x8
c001a529:	74 28                	je     c001a553 <CPU::setupPAT()+0x31>
c001a52b:	53                   	push   ebx
c001a52c:	83 ec 14             	sub    esp,0x14
c001a52f:	68 77 02 00 00       	push   0x277
c001a534:	e8 7a f4 ff ff       	call   c00199b3 <x86rdmsr(unsigned int)>
c001a539:	83 c4 0c             	add    esp,0xc
c001a53c:	83 e2 f8             	and    edx,0xfffffff8
c001a53f:	83 ca 01             	or     edx,0x1
c001a542:	52                   	push   edx
c001a543:	50                   	push   eax
c001a544:	68 77 02 00 00       	push   0x277
c001a549:	e8 a3 f4 ff ff       	call   c00199f1 <x86wrmsr(unsigned int, unsigned long long)>
c001a54e:	83 c4 18             	add    esp,0x18
c001a551:	5b                   	pop    ebx
c001a552:	c3                   	ret    
c001a553:	c3                   	ret    

c001a554 <CPU::setupMTRR()>:
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <CPU::setupGlobalPages()>:
c001a556:	0f 20 e0             	mov    eax,cr4
c001a559:	0c 80                	or     al,0x80
c001a55b:	0f 22 e0             	mov    cr4,eax
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <CPU::allowUsermodeDataAccess()>:
c001a560:	f6 05 0f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0f,0x40
c001a567:	74 03                	je     c001a56c <CPU::allowUsermodeDataAccess()+0xc>
c001a569:	0f 01 cb             	stac   
c001a56c:	c3                   	ret    
c001a56d:	90                   	nop

c001a56e <CPU::prohibitUsermodeDataAccess()>:
c001a56e:	f6 05 0f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0f,0x40
c001a575:	74 03                	je     c001a57a <CPU::prohibitUsermodeDataAccess()+0xc>
c001a577:	0f 01 ca             	clac   
c001a57a:	c3                   	ret    
c001a57b:	90                   	nop

c001a57c <CPU::setupSMAP()>:
c001a57c:	0f 20 e0             	mov    eax,cr4
c001a57f:	0d 00 00 20 00       	or     eax,0x200000
c001a584:	0f 22 e0             	mov    cr4,eax
c001a587:	eb e5                	jmp    c001a56e <CPU::prohibitUsermodeDataAccess()>
c001a589:	90                   	nop

c001a58a <CPU::setupFeatures()>:
c001a58a:	53                   	push   ebx
c001a58b:	83 ec 08             	sub    esp,0x8
c001a58e:	f6 05 0f fb 02 c0 20 	test   BYTE PTR ds:0xc002fb0f,0x20
c001a595:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a599:	74 18                	je     c001a5b3 <CPU::setupFeatures()+0x29>
c001a59b:	83 ec 0c             	sub    esp,0xc
c001a59e:	68 37 5b 02 c0       	push   0xc0025b37
c001a5a3:	e8 a6 c9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a5a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5ab:	e8 54 ff ff ff       	call   c001a504 <CPU::setupUMIP()>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	f6 05 0e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0e,0x8
c001a5ba:	74 18                	je     c001a5d4 <CPU::setupFeatures()+0x4a>
c001a5bc:	83 ec 0c             	sub    esp,0xc
c001a5bf:	68 41 5b 02 c0       	push   0xc0025b41
c001a5c4:	e8 85 c9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a5c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5cc:	e8 3d ff ff ff       	call   c001a50e <CPU::setupTSC()>
c001a5d1:	83 c4 10             	add    esp,0x10
c001a5d4:	f6 05 0e fb 02 c0 20 	test   BYTE PTR ds:0xc002fb0e,0x20
c001a5db:	74 18                	je     c001a5f5 <CPU::setupFeatures()+0x6b>
c001a5dd:	83 ec 0c             	sub    esp,0xc
c001a5e0:	68 4a 5b 02 c0       	push   0xc0025b4a
c001a5e5:	e8 64 c9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a5ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5ed:	e8 26 ff ff ff       	call   c001a518 <CPU::setupLargePages()>
c001a5f2:	83 c4 10             	add    esp,0x10
c001a5f5:	f6 05 0e fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0e,0x40
c001a5fc:	74 18                	je     c001a616 <CPU::setupFeatures()+0x8c>
c001a5fe:	83 ec 0c             	sub    esp,0xc
c001a601:	68 53 5b 02 c0       	push   0xc0025b53
c001a606:	e8 43 c9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a60b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a60e:	e8 43 ff ff ff       	call   c001a556 <CPU::setupGlobalPages()>
c001a613:	83 c4 10             	add    esp,0x10
c001a616:	f6 05 0e fb 02 c0 80 	test   BYTE PTR ds:0xc002fb0e,0x80
c001a61d:	74 18                	je     c001a637 <CPU::setupFeatures()+0xad>
c001a61f:	83 ec 0c             	sub    esp,0xc
c001a622:	68 65 5b 02 c0       	push   0xc0025b65
c001a627:	e8 22 c9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a62c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a62f:	e8 ee fe ff ff       	call   c001a522 <CPU::setupPAT()>
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	f6 05 10 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb10,0x4
c001a63e:	74 11                	je     c001a651 <CPU::setupFeatures()+0xc7>
c001a640:	c7 44 24 10 6e 5b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025b6e
c001a648:	83 c4 08             	add    esp,0x8
c001a64b:	5b                   	pop    ebx
c001a64c:	e9 fd c8 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c001a651:	83 c4 08             	add    esp,0x8
c001a654:	5b                   	pop    ebx
c001a655:	c3                   	ret    

c001a656 <CPU::open(int, int, void*)>:
c001a656:	55                   	push   ebp
c001a657:	57                   	push   edi
c001a658:	56                   	push   esi
c001a659:	53                   	push   ebx
c001a65a:	83 ec 18             	sub    esp,0x18
c001a65d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a661:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a665:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a669:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a66f:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a675:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a67b:	50                   	push   eax
c001a67c:	e8 71 46 ff ff       	call   c000ecf2 <GDT::setup()>
c001a681:	83 c4 0c             	add    esp,0xc
c001a684:	6a 00                	push   0x0
c001a686:	68 ef be ad de       	push   0xdeadbeef
c001a68b:	55                   	push   ebp
c001a68c:	e8 13 85 ff ff       	call   c0012ba4 <TSS::setup(unsigned long, unsigned long)>
c001a691:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a694:	e8 eb 84 ff ff       	call   c0012b84 <TSS::flush()>
c001a699:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a69f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6a2:	e8 b3 48 ff ff       	call   c000ef5a <IDT::setup()>
c001a6a7:	b8 00 04 00 00       	mov    eax,0x400
c001a6ac:	0f 23 f8             	mov    dr7,eax
c001a6af:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a6b9:	e8 8a 59 ff ff       	call   c0010048 <Phys::allocatePage()>
c001a6be:	83 c4 10             	add    esp,0x10
c001a6c1:	85 f6                	test   esi,esi
c001a6c3:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a6c9:	89 38                	mov    DWORD PTR [eax],edi
c001a6cb:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a6d1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a6d4:	74 10                	je     c001a6e6 <CPU::open(int, int, void*)+0x90>
c001a6d6:	50                   	push   eax
c001a6d7:	50                   	push   eax
c001a6d8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a6de:	56                   	push   esi
c001a6df:	e8 70 8e ff ff       	call   c0013554 <VAS::setCPUSpecific(unsigned long)>
c001a6e4:	eb 0d                	jmp    c001a6f3 <CPU::open(int, int, void*)+0x9d>
c001a6e6:	83 ec 0c             	sub    esp,0xc
c001a6e9:	68 78 5b 02 c0       	push   0xc0025b78
c001a6ee:	e8 5b 57 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	83 ec 0c             	sub    esp,0xc
c001a6f9:	68 86 5b 02 c0       	push   0xc0025b86
c001a6fe:	e8 a8 2a ff ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001a703:	e8 6f fb ff ff       	call   c001a277 <HalInitialise()>
c001a708:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c001a70d:	83 e0 10             	and    eax,0x10
c001a710:	83 f8 01             	cmp    eax,0x1
c001a713:	19 c0                	sbb    eax,eax
c001a715:	83 e0 46             	and    eax,0x46
c001a718:	83 c0 1e             	add    eax,0x1e
c001a71b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a71e:	e8 4a 09 ff ff       	call   c000b06d <setupTimer(int)>
c001a723:	83 c4 10             	add    esp,0x10
c001a726:	f6 05 24 f1 02 c0 20 	test   BYTE PTR ds:0xc002f124,0x20
c001a72d:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a733:	74 0c                	je     c001a741 <CPU::open(int, int, void*)+0xeb>
c001a735:	83 ec 0c             	sub    esp,0xc
c001a738:	53                   	push   ebx
c001a739:	e8 4c fe ff ff       	call   c001a58a <CPU::setupFeatures()>
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	83 c4 0c             	add    esp,0xc
c001a744:	31 c0                	xor    eax,eax
c001a746:	5b                   	pop    ebx
c001a747:	5e                   	pop    esi
c001a748:	5f                   	pop    edi
c001a749:	5d                   	pop    ebp
c001a74a:	c3                   	ret    

c001a74b <convertLegacyIRQNumber(int)>:
c001a74b:	83 ec 0c             	sub    esp,0xc
c001a74e:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001a755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a759:	74 0c                	je     c001a767 <convertLegacyIRQNumber(int)+0x1c>
c001a75b:	83 f8 0f             	cmp    eax,0xf
c001a75e:	7f 0b                	jg     c001a76b <convertLegacyIRQNumber(int)+0x20>
c001a760:	0f b6 80 48 67 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd98b8]
c001a767:	83 c4 0c             	add    esp,0xc
c001a76a:	c3                   	ret    
c001a76b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a76f:	83 ec 0c             	sub    esp,0xc
c001a772:	68 ec 5b 02 c0       	push   0xc0025bec
c001a777:	e8 d2 56 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a783:	83 c4 0c             	add    esp,0xc
c001a786:	c3                   	ret    

c001a787 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a787:	56                   	push   esi
c001a788:	31 c0                	xor    eax,eax
c001a78a:	53                   	push   ebx
c001a78b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a78f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a793:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a797:	89 ca                	mov    edx,ecx
c001a799:	c1 e2 04             	shl    edx,0x4
c001a79c:	83 bc 82 e0 e0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f20],0x0
c001a7a4:	74 17                	je     c001a7bd <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a7a6:	83 c0 01             	add    eax,0x1
c001a7a9:	83 f8 04             	cmp    eax,0x4
c001a7ac:	75 ee                	jne    c001a79c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a7ae:	c7 44 24 0c 4d 5c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025c4d
c001a7b6:	5b                   	pop    ebx
c001a7b7:	5e                   	pop    esi
c001a7b8:	e9 91 56 ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001a7bd:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a7c0:	89 1c 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],ebx
c001a7c7:	5b                   	pop    ebx
c001a7c8:	89 34 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],esi
c001a7cf:	5e                   	pop    esi
c001a7d0:	c3                   	ret    

c001a7d1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a7d1:	55                   	push   ebp
c001a7d2:	57                   	push   edi
c001a7d3:	56                   	push   esi
c001a7d4:	53                   	push   ebx
c001a7d5:	83 ec 0c             	sub    esp,0xc
c001a7d8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a7dc:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001a7e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7e7:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a7ea:	74 57                	je     c001a843 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a7ec:	84 c0                	test   al,al
c001a7ee:	89 c7                	mov    edi,eax
c001a7f0:	74 1d                	je     c001a80f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a7f2:	83 fe 0f             	cmp    esi,0xf
c001a7f5:	0f 8f d9 00 00 00    	jg     c001a8d4 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001a7fb:	0f b6 b6 48 67 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd98b8]
c001a802:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001a80a:	d1 ef                	shr    edi,1
c001a80c:	83 e7 01             	and    edi,0x1
c001a80f:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001a814:	83 ec 08             	sub    esp,0x8
c001a817:	31 db                	xor    ebx,ebx
c001a819:	50                   	push   eax
c001a81a:	68 5a 5c 02 c0       	push   0xc0025c5a
c001a81f:	e8 2a c7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a824:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	85 c0                	test   eax,eax
c001a82e:	7f 59                	jg     c001a889 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001a830:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a833:	83 ec 0c             	sub    esp,0xc
c001a836:	68 71 5c 02 c0       	push   0xc0025c71
c001a83b:	e8 0e 56 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	89 e8                	mov    eax,ebp
c001a845:	31 d2                	xor    edx,edx
c001a847:	c1 e0 04             	shl    eax,0x4
c001a84a:	8b 8c 90 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f20]
c001a851:	85 c9                	test   ecx,ecx
c001a853:	0f 84 92 00 00 00    	je     c001a8eb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001a859:	83 c2 01             	add    edx,0x1
c001a85c:	83 fa 04             	cmp    edx,0x4
c001a85f:	75 e9                	jne    c001a84a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001a861:	83 ec 0c             	sub    esp,0xc
c001a864:	68 28 5c 02 c0       	push   0xc0025c28
c001a869:	e8 e0 55 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a86e:	83 c4 10             	add    esp,0x10
c001a871:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a876:	83 c4 0c             	add    esp,0xc
c001a879:	5b                   	pop    ebx
c001a87a:	5e                   	pop    esi
c001a87b:	5f                   	pop    edi
c001a87c:	5d                   	pop    ebp
c001a87d:	c3                   	ret    
c001a87e:	83 c3 01             	add    ebx,0x1
c001a881:	39 1d 60 04 03 c0    	cmp    DWORD PTR ds:0xc0030460,ebx
c001a887:	7e a7                	jle    c001a830 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001a889:	8b 2c 9d 80 04 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffcfb80]
c001a890:	83 ec 08             	sub    esp,0x8
c001a893:	56                   	push   esi
c001a894:	55                   	push   ebp
c001a895:	e8 a4 66 00 00       	call   c0020f3e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	84 c0                	test   al,al
c001a89f:	74 dd                	je     c001a87e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a8a1:	89 f8                	mov    eax,edi
c001a8a3:	83 ec 04             	sub    esp,0x4
c001a8a6:	8b 1c 9d 80 04 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfb80]
c001a8ad:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a8b0:	0f b6 f8             	movzx  edi,al
c001a8b3:	57                   	push   edi
c001a8b4:	89 e8                	mov    eax,ebp
c001a8b6:	6a 00                	push   0x0
c001a8b8:	0f b6 c0             	movzx  eax,al
c001a8bb:	50                   	push   eax
c001a8bc:	89 f0                	mov    eax,esi
c001a8be:	6a 00                	push   0x0
c001a8c0:	0f b6 c0             	movzx  eax,al
c001a8c3:	6a 00                	push   0x0
c001a8c5:	50                   	push   eax
c001a8c6:	53                   	push   ebx
c001a8c7:	e8 de 67 00 00       	call   c00210aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a8cc:	83 c4 20             	add    esp,0x20
c001a8cf:	e9 6f ff ff ff       	jmp    c001a843 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	31 ff                	xor    edi,edi
c001a8d9:	68 ec 5b 02 c0       	push   0xc0025bec
c001a8de:	e8 6b 55 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	e9 24 ff ff ff       	jmp    c001a80f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a8eb:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001a8ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a8f2:	89 14 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],edx
c001a8f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a8fd:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a904:	83 c4 0c             	add    esp,0xc
c001a907:	89 f0                	mov    eax,esi
c001a909:	5b                   	pop    ebx
c001a90a:	5e                   	pop    esi
c001a90b:	5f                   	pop    edi
c001a90c:	5d                   	pop    ebp
c001a90d:	c3                   	ret    

c001a90e <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a912:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a916:	c1 e0 04             	shl    eax,0x4
c001a919:	8d 50 10             	lea    edx,[eax+0x10]
c001a91c:	39 88 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ecx
c001a922:	74 08                	je     c001a92c <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a924:	83 c0 04             	add    eax,0x4
c001a927:	39 d0                	cmp    eax,edx
c001a929:	75 f1                	jne    c001a91c <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a92b:	c3                   	ret    
c001a92c:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001a936:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a940:	eb e2                	jmp    c001a924 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a942 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a942:	56                   	push   esi
c001a943:	53                   	push   ebx
c001a944:	83 ec 04             	sub    esp,0x4
c001a947:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a94c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a950:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a954:	74 09                	je     c001a95f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a956:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001a95d:	75 34                	jne    c001a993 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001a95f:	8d 43 20             	lea    eax,[ebx+0x20]
c001a962:	c1 e0 04             	shl    eax,0x4
c001a965:	8d 50 10             	lea    edx,[eax+0x10]
c001a968:	39 b0 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],esi
c001a96e:	74 0d                	je     c001a97d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001a970:	83 c0 04             	add    eax,0x4
c001a973:	39 d0                	cmp    eax,edx
c001a975:	75 f1                	jne    c001a968 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001a977:	83 c4 04             	add    esp,0x4
c001a97a:	5b                   	pop    ebx
c001a97b:	5e                   	pop    esi
c001a97c:	c3                   	ret    
c001a97d:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001a987:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a991:	eb dd                	jmp    c001a970 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001a993:	83 fb 0f             	cmp    ebx,0xf
c001a996:	7f 09                	jg     c001a9a1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001a998:	0f b6 9b 48 67 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd98b8]
c001a99f:	eb be                	jmp    c001a95f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a9a1:	83 ec 0c             	sub    esp,0xc
c001a9a4:	68 7e 5c 02 c0       	push   0xc0025c7e
c001a9a9:	e8 a0 54 ff ff       	call   c000fe4e <KePanic(char const*)>
c001a9ae:	83 c4 10             	add    esp,0x10
c001a9b1:	eb ac                	jmp    c001a95f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a9b3:	90                   	nop

c001a9b4 <picIoWait()>:
c001a9b4:	eb 00                	jmp    c001a9b6 <picIoWait()+0x2>
c001a9b6:	eb 00                	jmp    c001a9b8 <picIoWait()+0x4>
c001a9b8:	90                   	nop
c001a9b9:	c3                   	ret    
c001a9ba:	66 90                	xchg   ax,ax

c001a9bc <picDisable()>:
c001a9bc:	83 ec 10             	sub    esp,0x10
c001a9bf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a9c6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a9cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a9cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a9d4:	ee                   	out    dx,al
c001a9d5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a9dc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a9e1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a9e5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a9ea:	ee                   	out    dx,al
c001a9eb:	90                   	nop
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	c3                   	ret    

c001a9f0 <picGetIRQReg(int)>:
c001a9f0:	83 ec 10             	sub    esp,0x10
c001a9f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9f7:	0f b6 c0             	movzx  eax,al
c001a9fa:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001aa01:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001aa05:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aa09:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aa0e:	ee                   	out    dx,al
c001aa0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa13:	0f b6 c0             	movzx  eax,al
c001aa16:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001aa1d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001aa21:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001aa25:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001aa2a:	ee                   	out    dx,al
c001aa2b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001aa32:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001aa37:	89 c2                	mov    edx,eax
c001aa39:	ec                   	in     al,dx
c001aa3a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aa3e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aa42:	0f b6 c0             	movzx  eax,al
c001aa45:	c1 e0 08             	shl    eax,0x8
c001aa48:	89 c1                	mov    ecx,eax
c001aa4a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001aa51:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001aa56:	89 c2                	mov    edx,eax
c001aa58:	ec                   	in     al,dx
c001aa59:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa5d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001aa61:	0f b6 c0             	movzx  eax,al
c001aa64:	09 c8                	or     eax,ecx
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	c3                   	ret    
c001aa6a:	66 90                	xchg   ax,ax

c001aa6c <picOpen()>:
c001aa6c:	83 ec 50             	sub    esp,0x50
c001aa6f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001aa76:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001aa7b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa83:	ee                   	out    dx,al
c001aa84:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001aa8b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001aa90:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001aa94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa98:	ee                   	out    dx,al
c001aa99:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001aaa1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001aaa9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001aab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aab4:	89 c2                	mov    edx,eax
c001aab6:	ec                   	in     al,dx
c001aab7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001aabb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001aabf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001aac3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001aaca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aace:	89 c2                	mov    edx,eax
c001aad0:	ec                   	in     al,dx
c001aad1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001aad5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001aad9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001aadd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001aae4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001aae9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001aaed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aaf1:	ee                   	out    dx,al
c001aaf2:	e8 bd fe ff ff       	call   c001a9b4 <picIoWait()>
c001aaf7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001aafe:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001ab03:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ab07:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab0b:	ee                   	out    dx,al
c001ab0c:	e8 a3 fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab15:	0f b6 c0             	movzx  eax,al
c001ab18:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ab1f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ab23:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001ab27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab2b:	ee                   	out    dx,al
c001ab2c:	e8 83 fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab35:	0f b6 c0             	movzx  eax,al
c001ab38:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ab3f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ab43:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab4b:	ee                   	out    dx,al
c001ab4c:	e8 63 fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab51:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001ab58:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001ab5d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ab61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab65:	ee                   	out    dx,al
c001ab66:	e8 49 fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab6b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ab72:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001ab77:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ab7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab7f:	ee                   	out    dx,al
c001ab80:	e8 2f fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab85:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ab8c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ab91:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ab95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab99:	ee                   	out    dx,al
c001ab9a:	e8 15 fe ff ff       	call   c001a9b4 <picIoWait()>
c001ab9f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001aba6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001abab:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001abaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001abb3:	ee                   	out    dx,al
c001abb4:	e8 fb fd ff ff       	call   c001a9b4 <picIoWait()>
c001abb9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001abbe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001abc5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001abc9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001abcd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001abd1:	ee                   	out    dx,al
c001abd2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001abd7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001abde:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001abe2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001abe6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001abea:	ee                   	out    dx,al
c001abeb:	90                   	nop
c001abec:	83 c4 50             	add    esp,0x50
c001abef:	c3                   	ret    

c001abf0 <picEOI(int)>:
c001abf0:	83 ec 10             	sub    esp,0x10
c001abf3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001abf8:	75 1e                	jne    c001ac18 <picEOI(int)+0x28>
c001abfa:	6a 0b                	push   0xb
c001abfc:	e8 ef fd ff ff       	call   c001a9f0 <picGetIRQReg(int)>
c001ac01:	83 c4 04             	add    esp,0x4
c001ac04:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ac09:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001ac0e:	25 80 00 00 00       	and    eax,0x80
c001ac13:	74 73                	je     c001ac88 <picEOI(int)+0x98>
c001ac15:	8d 76 00             	lea    esi,[esi+0x0]
c001ac18:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001ac1d:	75 31                	jne    c001ac50 <picEOI(int)+0x60>
c001ac1f:	6a 0b                	push   0xb
c001ac21:	e8 ca fd ff ff       	call   c001a9f0 <picGetIRQReg(int)>
c001ac26:	83 c4 04             	add    esp,0x4
c001ac29:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001ac2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac32:	98                   	cwde   
c001ac33:	85 c0                	test   eax,eax
c001ac35:	78 19                	js     c001ac50 <picEOI(int)+0x60>
c001ac37:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001ac3e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001ac43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ac47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ac4c:	ee                   	out    dx,al
c001ac4d:	eb 3d                	jmp    c001ac8c <picEOI(int)+0x9c>
c001ac4f:	90                   	nop
c001ac50:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ac55:	7e 19                	jle    c001ac70 <picEOI(int)+0x80>
c001ac57:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ac5e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001ac63:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ac67:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ac6c:	ee                   	out    dx,al
c001ac6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac70:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ac77:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001ac7c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ac80:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ac85:	ee                   	out    dx,al
c001ac86:	eb 04                	jmp    c001ac8c <picEOI(int)+0x9c>
c001ac88:	90                   	nop
c001ac89:	8d 76 00             	lea    esi,[esi+0x0]
c001ac8c:	83 c4 10             	add    esp,0x10
c001ac8f:	c3                   	ret    

c001ac90 <RTC::open(int, int, void*)>:
c001ac90:	31 c0                	xor    eax,eax
c001ac92:	c3                   	ret    
c001ac93:	90                   	nop

c001ac94 <RTC::close(int, int, void*)>:
c001ac94:	31 c0                	xor    eax,eax
c001ac96:	c3                   	ret    
c001ac97:	90                   	nop

c001ac98 <RTC::timeInSecondsUTC()>:
c001ac98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac9c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aca2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aca8:	c3                   	ret    
c001aca9:	90                   	nop

c001acaa <RTC::timeInDatetimeUTC()>:
c001acaa:	53                   	push   ebx
c001acab:	83 ec 14             	sub    esp,0x14
c001acae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001acb6:	8b 10                	mov    edx,DWORD PTR [eax]
c001acb8:	50                   	push   eax
c001acb9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001acbc:	83 c4 0c             	add    esp,0xc
c001acbf:	52                   	push   edx
c001acc0:	50                   	push   eax
c001acc1:	53                   	push   ebx
c001acc2:	e8 29 e9 fe ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c001acc7:	89 d8                	mov    eax,ebx
c001acc9:	83 c4 14             	add    esp,0x14
c001accc:	5b                   	pop    ebx
c001accd:	c2 04 00             	ret    0x4

c001acd0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001acd0:	56                   	push   esi
c001acd1:	53                   	push   ebx
c001acd2:	83 ec 14             	sub    esp,0x14
c001acd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acdb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001acde:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ace2:	52                   	push   edx
c001ace3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ace7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aceb:	50                   	push   eax
c001acec:	e8 ff e8 fe ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c001acf1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001acf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001acfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad01:	89 f0                	mov    eax,esi
c001ad03:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad07:	83 c4 20             	add    esp,0x20
c001ad0a:	5b                   	pop    ebx
c001ad0b:	5e                   	pop    esi
c001ad0c:	ff e0                	jmp    eax

c001ad0e <RTC::~RTC()>:
c001ad0e:	83 ec 0c             	sub    esp,0xc
c001ad11:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c001ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1a:	89 10                	mov    DWORD PTR [eax],edx
c001ad1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad20:	83 ec 0c             	sub    esp,0xc
c001ad23:	50                   	push   eax
c001ad24:	e8 9f e3 fe ff       	call   c00090c8 <Clock::~Clock()>
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	90                   	nop
c001ad2d:	83 c4 0c             	add    esp,0xc
c001ad30:	c3                   	ret    
c001ad31:	90                   	nop

c001ad32 <RTC::~RTC()>:
c001ad32:	83 ec 0c             	sub    esp,0xc
c001ad35:	83 ec 0c             	sub    esp,0xc
c001ad38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3c:	e8 cd ff ff ff       	call   c001ad0e <RTC::~RTC()>
c001ad41:	83 c4 10             	add    esp,0x10
c001ad44:	83 ec 08             	sub    esp,0x8
c001ad47:	68 60 01 00 00       	push   0x160
c001ad4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad50:	e8 16 25 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 c4 0c             	add    esp,0xc
c001ad5b:	c3                   	ret    

c001ad5c <RTC::get_update_in_progress_flag()>:
c001ad5c:	83 ec 18             	sub    esp,0x18
c001ad5f:	6a 0a                	push   0xa
c001ad61:	e8 3f db ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ad66:	83 c4 1c             	add    esp,0x1c
c001ad69:	0f b6 c0             	movzx  eax,al
c001ad6c:	c1 e8 07             	shr    eax,0x7
c001ad6f:	c3                   	ret    

c001ad70 <RTC::completeRTCRefresh()>:
c001ad70:	55                   	push   ebp
c001ad71:	57                   	push   edi
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	83 ec 3c             	sub    esp,0x3c
c001ad77:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001ad7d:	83 ec 0c             	sub    esp,0xc
c001ad80:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ad84:	e8 d3 ff ff ff       	call   c001ad5c <RTC::get_update_in_progress_flag()>
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	84 c0                	test   al,al
c001ad8e:	74 0e                	je     c001ad9e <RTC::completeRTCRefresh()+0x2e>
c001ad90:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ad96:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001ad9c:	73 df                	jae    c001ad7d <RTC::completeRTCRefresh()+0xd>
c001ad9e:	83 ec 0c             	sub    esp,0xc
c001ada1:	6a 00                	push   0x0
c001ada3:	e8 fd da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ada8:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001adaf:	89 c7                	mov    edi,eax
c001adb1:	e8 ef da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001adb6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001adbd:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001adc1:	e8 df da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001adc6:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001adcd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001add1:	e8 cf da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001add6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001addd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ade1:	e8 bf da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ade6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001aded:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001adf1:	e8 af da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001adf6:	0f b6 c0             	movzx  eax,al
c001adf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ae0d:	e8 4a ff ff ff       	call   c001ad5c <RTC::get_update_in_progress_flag()>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	84 c0                	test   al,al
c001ae17:	74 0e                	je     c001ae27 <RTC::completeRTCRefresh()+0xb7>
c001ae19:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ae1f:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001ae25:	73 df                	jae    c001ae06 <RTC::completeRTCRefresh()+0x96>
c001ae27:	83 ec 0c             	sub    esp,0xc
c001ae2a:	6a 00                	push   0x0
c001ae2c:	e8 74 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae31:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ae38:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ae3c:	e8 64 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae41:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ae48:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ae4c:	e8 54 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae51:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ae58:	88 c3                	mov    bl,al
c001ae5a:	e8 46 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae5f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ae66:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ae6a:	e8 36 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae6f:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001ae76:	89 c6                	mov    esi,eax
c001ae78:	e8 28 da ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001ae7d:	89 f9                	mov    ecx,edi
c001ae7f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ae83:	83 c4 10             	add    esp,0x10
c001ae86:	0f b6 e8             	movzx  ebp,al
c001ae89:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ae8e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001ae92:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae96:	74 27                	je     c001aebf <RTC::completeRTCRefresh()+0x14f>
c001ae98:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001ae9c:	89 f0                	mov    eax,esi
c001ae9e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001aea2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001aea6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aeaa:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001aeae:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001aeb2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aeb6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aeba:	e9 41 ff ff ff       	jmp    c001ae00 <RTC::completeRTCRefresh()+0x90>
c001aebf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aec4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aec8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aecc:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001aed0:	75 c6                	jne    c001ae98 <RTC::completeRTCRefresh()+0x128>
c001aed2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001aed7:	89 f1                	mov    ecx,esi
c001aed9:	0f b6 fb             	movzx  edi,bl
c001aedc:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001aee0:	0f b6 c9             	movzx  ecx,cl
c001aee3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001aee7:	89 f1                	mov    ecx,esi
c001aee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aeed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aef1:	0f 94 c2             	sete   dl
c001aef4:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001aef8:	0f 94 c0             	sete   al
c001aefb:	21 d0                	and    eax,edx
c001aefd:	31 d2                	xor    edx,edx
c001aeff:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001af03:	0f 94 c2             	sete   dl
c001af06:	85 c2                	test   edx,eax
c001af08:	74 8e                	je     c001ae98 <RTC::completeRTCRefresh()+0x128>
c001af0a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001af0e:	75 88                	jne    c001ae98 <RTC::completeRTCRefresh()+0x128>
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	6a 0b                	push   0xb
c001af15:	e8 8b d9 ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	a8 04                	test   al,0x4
c001af1f:	75 7a                	jne    c001af9b <RTC::completeRTCRefresh()+0x22b>
c001af21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af25:	c1 ef 04             	shr    edi,0x4
c001af28:	83 e6 0f             	and    esi,0xf
c001af2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af2f:	c1 ed 04             	shr    ebp,0x4
c001af32:	6b ed 0a             	imul   ebp,ebp,0xa
c001af35:	c1 ea 04             	shr    edx,0x4
c001af38:	6b d2 0a             	imul   edx,edx,0xa
c001af3b:	83 e1 0f             	and    ecx,0xf
c001af3e:	01 d1                	add    ecx,edx
c001af40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af44:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001af48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001af4c:	c1 ea 04             	shr    edx,0x4
c001af4f:	6b d2 0a             	imul   edx,edx,0xa
c001af52:	83 e1 0f             	and    ecx,0xf
c001af55:	01 d1                	add    ecx,edx
c001af57:	89 fa                	mov    edx,edi
c001af59:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001af5d:	83 e2 07             	and    edx,0x7
c001af60:	89 d9                	mov    ecx,ebx
c001af62:	6b d2 0a             	imul   edx,edx,0xa
c001af65:	83 e1 0f             	and    ecx,0xf
c001af68:	83 e3 80             	and    ebx,0xffffff80
c001af6b:	01 d1                	add    ecx,edx
c001af6d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af71:	09 cb                	or     ebx,ecx
c001af73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af77:	c1 ea 04             	shr    edx,0x4
c001af7a:	6b d2 0a             	imul   edx,edx,0xa
c001af7d:	83 e1 0f             	and    ecx,0xf
c001af80:	01 d1                	add    ecx,edx
c001af82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af86:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001af8a:	c1 ea 04             	shr    edx,0x4
c001af8d:	6b d2 0a             	imul   edx,edx,0xa
c001af90:	01 d6                	add    esi,edx
c001af92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af96:	83 e2 0f             	and    edx,0xf
c001af99:	01 d5                	add    ebp,edx
c001af9b:	a8 02                	test   al,0x2
c001af9d:	75 15                	jne    c001afb4 <RTC::completeRTCRefresh()+0x244>
c001af9f:	f6 c3 80             	test   bl,0x80
c001afa2:	74 10                	je     c001afb4 <RTC::completeRTCRefresh()+0x244>
c001afa4:	83 e3 7f             	and    ebx,0x7f
c001afa7:	b9 18 00 00 00       	mov    ecx,0x18
c001afac:	8d 43 0c             	lea    eax,[ebx+0xc]
c001afaf:	99                   	cdq    
c001afb0:	f7 f9                	idiv   ecx
c001afb2:	88 d3                	mov    bl,dl
c001afb4:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001afba:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001afc0:	77 06                	ja     c001afc8 <RTC::completeRTCRefresh()+0x258>
c001afc2:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001afc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afcd:	31 c9                	xor    ecx,ecx
c001afcf:	31 d2                	xor    edx,edx
c001afd1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001afd5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001afd9:	89 cd                	mov    ebp,ecx
c001afdb:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001afdf:	c1 e7 10             	shl    edi,0x10
c001afe2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001afe8:	c1 e0 10             	shl    eax,0x10
c001afeb:	09 c5                	or     ebp,eax
c001afed:	89 e9                	mov    ecx,ebp
c001afef:	0f b7 c2             	movzx  eax,dx
c001aff2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001aff6:	09 f8                	or     eax,edi
c001aff8:	89 c2                	mov    edx,eax
c001affa:	50                   	push   eax
c001affb:	50                   	push   eax
c001affc:	88 d9                	mov    cl,bl
c001affe:	51                   	push   ecx
c001afff:	52                   	push   edx
c001b000:	e8 fb e1 fe ff       	call   c0009200 <KeDatetimeToSeconds(datetime_t)>
c001b005:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b009:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b00f:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b015:	83 c4 4c             	add    esp,0x4c
c001b018:	5b                   	pop    ebx
c001b019:	5e                   	pop    esi
c001b01a:	5f                   	pop    edi
c001b01b:	5d                   	pop    ebp
c001b01c:	c3                   	ret    
c001b01d:	90                   	nop

c001b01e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b01e:	55                   	push   ebp
c001b01f:	57                   	push   edi
c001b020:	56                   	push   esi
c001b021:	53                   	push   ebx
c001b022:	83 ec 34             	sub    esp,0x34
c001b025:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b029:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b02d:	6a 00                	push   0x0
c001b02f:	6a 00                	push   0x0
c001b031:	e8 c3 d8 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b036:	5d                   	pop    ebp
c001b037:	89 fb                	mov    ebx,edi
c001b039:	58                   	pop    eax
c001b03a:	6a 00                	push   0x0
c001b03c:	6a 02                	push   0x2
c001b03e:	e8 b6 d8 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b043:	89 f8                	mov    eax,edi
c001b045:	89 f9                	mov    ecx,edi
c001b047:	0f b6 c4             	movzx  eax,ah
c001b04a:	31 d2                	xor    edx,edx
c001b04c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b050:	c1 e9 10             	shr    ecx,0x10
c001b053:	89 f0                	mov    eax,esi
c001b055:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b059:	89 f0                	mov    eax,esi
c001b05b:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b05f:	0f b6 c4             	movzx  eax,ah
c001b062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b066:	89 f0                	mov    eax,esi
c001b068:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b06c:	c1 e8 10             	shr    eax,0x10
c001b06f:	b9 64 00 00 00       	mov    ecx,0x64
c001b074:	f7 f1                	div    ecx
c001b076:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b07d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b081:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b085:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b089:	e8 17 d8 ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	a8 04                	test   al,0x4
c001b093:	89 c5                	mov    ebp,eax
c001b095:	75 6e                	jne    c001b105 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b097:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b09b:	31 d2                	xor    edx,edx
c001b09d:	0f b6 c1             	movzx  eax,cl
c001b0a0:	b9 0a 00 00 00       	mov    ecx,0xa
c001b0a5:	f7 f1                	div    ecx
c001b0a7:	c1 e0 04             	shl    eax,0x4
c001b0aa:	09 d0                	or     eax,edx
c001b0ac:	31 d2                	xor    edx,edx
c001b0ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0b2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b0b7:	f7 f1                	div    ecx
c001b0b9:	c1 e0 04             	shl    eax,0x4
c001b0bc:	09 d0                	or     eax,edx
c001b0be:	31 d2                	xor    edx,edx
c001b0c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b0c4:	0f b6 c3             	movzx  eax,bl
c001b0c7:	f7 f1                	div    ecx
c001b0c9:	c1 e0 04             	shl    eax,0x4
c001b0cc:	09 d0                	or     eax,edx
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	89 c3                	mov    ebx,eax
c001b0d2:	89 f0                	mov    eax,esi
c001b0d4:	0f b6 c0             	movzx  eax,al
c001b0d7:	f7 f1                	div    ecx
c001b0d9:	c1 e0 04             	shl    eax,0x4
c001b0dc:	09 d0                	or     eax,edx
c001b0de:	31 d2                	xor    edx,edx
c001b0e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b0e9:	f7 f1                	div    ecx
c001b0eb:	c1 e0 04             	shl    eax,0x4
c001b0ee:	09 d0                	or     eax,edx
c001b0f0:	31 d2                	xor    edx,edx
c001b0f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0fa:	f7 f1                	div    ecx
c001b0fc:	c1 e0 04             	shl    eax,0x4
c001b0ff:	09 d0                	or     eax,edx
c001b101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b105:	83 e5 02             	and    ebp,0x2
c001b108:	75 1e                	jne    c001b128 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b10a:	0f b6 c3             	movzx  eax,bl
c001b10d:	83 f8 0b             	cmp    eax,0xb
c001b110:	76 10                	jbe    c001b122 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b112:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b115:	84 d2                	test   dl,dl
c001b117:	88 d3                	mov    bl,dl
c001b119:	75 02                	jne    c001b11d <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b11b:	b3 0c                	mov    bl,0xc
c001b11d:	83 cb 80             	or     ebx,0xffffff80
c001b120:	eb 06                	jmp    c001b128 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b122:	85 c0                	test   eax,eax
c001b124:	75 02                	jne    c001b128 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b126:	b3 0c                	mov    bl,0xc
c001b128:	50                   	push   eax
c001b129:	0f b6 db             	movzx  ebx,bl
c001b12c:	50                   	push   eax
c001b12d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b132:	52                   	push   edx
c001b133:	6a 00                	push   0x0
c001b135:	e8 bf d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b13a:	5a                   	pop    edx
c001b13b:	59                   	pop    ecx
c001b13c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b141:	50                   	push   eax
c001b142:	6a 02                	push   0x2
c001b144:	e8 b0 d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b149:	5e                   	pop    esi
c001b14a:	5f                   	pop    edi
c001b14b:	53                   	push   ebx
c001b14c:	6a 04                	push   0x4
c001b14e:	e8 a6 d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b153:	5d                   	pop    ebp
c001b154:	58                   	pop    eax
c001b155:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b15a:	52                   	push   edx
c001b15b:	6a 07                	push   0x7
c001b15d:	e8 97 d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b162:	58                   	pop    eax
c001b163:	5a                   	pop    edx
c001b164:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b169:	50                   	push   eax
c001b16a:	6a 08                	push   0x8
c001b16c:	e8 88 d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b171:	59                   	pop    ecx
c001b172:	5b                   	pop    ebx
c001b173:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b178:	55                   	push   ebp
c001b179:	6a 09                	push   0x9
c001b17b:	e8 79 d7 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b180:	5e                   	pop    esi
c001b181:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b185:	e8 e6 fb ff ff       	call   c001ad70 <RTC::completeRTCRefresh()>
c001b18a:	83 c4 3c             	add    esp,0x3c
c001b18d:	b0 01                	mov    al,0x1
c001b18f:	5b                   	pop    ebx
c001b190:	5e                   	pop    esi
c001b191:	5f                   	pop    edi
c001b192:	5d                   	pop    ebp
c001b193:	c3                   	ret    

c001b194 <rtcIRQHandler(regs*, void*)>:
c001b194:	53                   	push   ebx
c001b195:	83 ec 14             	sub    esp,0x14
c001b198:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b19c:	6a 0c                	push   0xc
c001b19e:	e8 02 d7 ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001b1a3:	83 c4 10             	add    esp,0x10
c001b1a6:	a8 80                	test   al,0x80
c001b1a8:	74 24                	je     c001b1ce <rtcIRQHandler(regs*, void*)+0x3a>
c001b1aa:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b1b1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b1b8:	66 ff 05 14 fb 02 c0 	inc    WORD PTR ds:0xc002fb14
c001b1bf:	75 0d                	jne    c001b1ce <rtcIRQHandler(regs*, void*)+0x3a>
c001b1c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b1c5:	83 c4 08             	add    esp,0x8
c001b1c8:	5b                   	pop    ebx
c001b1c9:	e9 a2 fb ff ff       	jmp    c001ad70 <RTC::completeRTCRefresh()>
c001b1ce:	83 c4 08             	add    esp,0x8
c001b1d1:	5b                   	pop    ebx
c001b1d2:	c3                   	ret    
c001b1d3:	90                   	nop

c001b1d4 <RTC::RTC()>:
c001b1d4:	83 ec 1c             	sub    esp,0x1c
c001b1d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1db:	83 ec 08             	sub    esp,0x8
c001b1de:	68 8b 5c 02 c0       	push   0xc0025c8b
c001b1e3:	50                   	push   eax
c001b1e4:	e8 a9 de fe ff       	call   c0009092 <Clock::Clock(char const*)>
c001b1e9:	83 c4 10             	add    esp,0x10
c001b1ec:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c001b1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1f5:	89 10                	mov    DWORD PTR [eax],edx
c001b1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1fb:	83 ec 0c             	sub    esp,0xc
c001b1fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b202:	6a 01                	push   0x1
c001b204:	68 94 b1 01 c0       	push   0xc001b194
c001b209:	6a 08                	push   0x8
c001b20b:	50                   	push   eax
c001b20c:	e8 6d e7 fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b211:	83 c4 20             	add    esp,0x20
c001b214:	89 c2                	mov    edx,eax
c001b216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b21a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b220:	fa                   	cli    
c001b221:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b226:	83 c0 01             	add    eax,0x1
c001b229:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001b22e:	83 ec 0c             	sub    esp,0xc
c001b231:	6a 0b                	push   0xb
c001b233:	e8 6d d6 ff ff       	call   c00188a5 <x86ReadCMOS(unsigned char)>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b23f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b243:	83 c8 10             	or     eax,0x10
c001b246:	0f b6 c0             	movzx  eax,al
c001b249:	83 ec 08             	sub    esp,0x8
c001b24c:	50                   	push   eax
c001b24d:	6a 0b                	push   0xb
c001b24f:	e8 a5 d6 ff ff       	call   c00188f9 <x86WriteCMOS(unsigned char, unsigned char)>
c001b254:	83 c4 10             	add    esp,0x10
c001b257:	83 ec 0c             	sub    esp,0xc
c001b25a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b25e:	e8 0d fb ff ff       	call   c001ad70 <RTC::completeRTCRefresh()>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001b26e:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b273:	85 c0                	test   eax,eax
c001b275:	75 01                	jne    c001b278 <RTC::RTC()+0xa4>
c001b277:	fb                   	sti    
c001b278:	90                   	nop
c001b279:	83 c4 1c             	add    esp,0x1c
c001b27c:	c3                   	ret    
c001b27d:	66 90                	xchg   ax,ax
c001b27f:	90                   	nop

c001b280 <HalConsoleScroll(int, int)>:
c001b280:	83 ec 10             	sub    esp,0x10
c001b283:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b28b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b293:	90                   	nop
c001b294:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b299:	0f 8f e1 00 00 00    	jg     c001b380 <HalConsoleScroll(int, int)+0x100>
c001b29f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b2a7:	90                   	nop
c001b2a8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b2b0:	0f 8f be 00 00 00    	jg     c001b374 <HalConsoleScroll(int, int)+0xf4>
c001b2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2ba:	89 d0                	mov    eax,edx
c001b2bc:	c1 e0 02             	shl    eax,0x2
c001b2bf:	01 d0                	add    eax,edx
c001b2c1:	c1 e0 05             	shl    eax,0x5
c001b2c4:	89 c2                	mov    edx,eax
c001b2c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2ca:	01 d0                	add    eax,edx
c001b2cc:	89 c2                	mov    edx,eax
c001b2ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b2d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2d9:	89 d0                	mov    eax,edx
c001b2db:	c1 e0 02             	shl    eax,0x2
c001b2de:	01 d0                	add    eax,edx
c001b2e0:	c1 e0 05             	shl    eax,0x5
c001b2e3:	89 c2                	mov    edx,eax
c001b2e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2e9:	01 d0                	add    eax,edx
c001b2eb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2f5:	01 d0                	add    eax,edx
c001b2f7:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b2f9:	88 10                	mov    BYTE PTR [eax],dl
c001b2fb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b300:	75 66                	jne    c001b368 <HalConsoleScroll(int, int)+0xe8>
c001b302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b306:	83 e0 01             	and    eax,0x1
c001b309:	74 39                	je     c001b344 <HalConsoleScroll(int, int)+0xc4>
c001b30b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b30f:	83 e0 0f             	and    eax,0xf
c001b312:	88 c2                	mov    dl,al
c001b314:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b318:	c1 e0 04             	shl    eax,0x4
c001b31b:	09 d0                	or     eax,edx
c001b31d:	88 c1                	mov    cl,al
c001b31f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b323:	89 d0                	mov    eax,edx
c001b325:	c1 e0 02             	shl    eax,0x2
c001b328:	01 d0                	add    eax,edx
c001b32a:	c1 e0 05             	shl    eax,0x5
c001b32d:	89 c2                	mov    edx,eax
c001b32f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b333:	01 d0                	add    eax,edx
c001b335:	89 c2                	mov    edx,eax
c001b337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b33b:	01 d0                	add    eax,edx
c001b33d:	88 ca                	mov    dl,cl
c001b33f:	88 10                	mov    BYTE PTR [eax],dl
c001b341:	eb 25                	jmp    c001b368 <HalConsoleScroll(int, int)+0xe8>
c001b343:	90                   	nop
c001b344:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b348:	89 d0                	mov    eax,edx
c001b34a:	c1 e0 02             	shl    eax,0x2
c001b34d:	01 d0                	add    eax,edx
c001b34f:	c1 e0 05             	shl    eax,0x5
c001b352:	89 c2                	mov    edx,eax
c001b354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b358:	01 d0                	add    eax,edx
c001b35a:	89 c2                	mov    edx,eax
c001b35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b360:	01 d0                	add    eax,edx
c001b362:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b365:	8d 76 00             	lea    esi,[esi+0x0]
c001b368:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b36d:	e9 36 ff ff ff       	jmp    c001b2a8 <HalConsoleScroll(int, int)+0x28>
c001b372:	66 90                	xchg   ax,ax
c001b374:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b379:	e9 16 ff ff ff       	jmp    c001b294 <HalConsoleScroll(int, int)+0x14>
c001b37e:	66 90                	xchg   ax,ax
c001b380:	90                   	nop
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	c3                   	ret    
c001b385:	8d 76 00             	lea    esi,[esi+0x0]

c001b388 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b388:	83 ec 14             	sub    esp,0x14
c001b38b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b38f:	88 04 24             	mov    BYTE PTR [esp],al
c001b392:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b395:	0f b6 c0             	movzx  eax,al
c001b398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b39c:	89 d1                	mov    ecx,edx
c001b39e:	83 e1 0f             	and    ecx,0xf
c001b3a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3a5:	c1 e2 04             	shl    edx,0x4
c001b3a8:	0f b6 d2             	movzx  edx,dl
c001b3ab:	09 ca                	or     edx,ecx
c001b3ad:	c1 e2 08             	shl    edx,0x8
c001b3b0:	09 d0                	or     eax,edx
c001b3b2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b3b7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b3bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3c3:	89 d0                	mov    eax,edx
c001b3c5:	c1 e0 02             	shl    eax,0x2
c001b3c8:	01 d0                	add    eax,edx
c001b3ca:	c1 e0 04             	shl    eax,0x4
c001b3cd:	89 c2                	mov    edx,eax
c001b3cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3d3:	01 d0                	add    eax,edx
c001b3d5:	d1 e0                	shl    eax,1
c001b3d7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3df:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b3e4:	66 89 10             	mov    WORD PTR [eax],dx
c001b3e7:	90                   	nop
c001b3e8:	83 c4 14             	add    esp,0x14
c001b3eb:	c3                   	ret    

c001b3ec <HalConsoleCursorUpdate(int, int)>:
c001b3ec:	83 ec 20             	sub    esp,0x20
c001b3ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3f3:	89 c2                	mov    edx,eax
c001b3f5:	c1 e2 02             	shl    edx,0x2
c001b3f8:	01 d0                	add    eax,edx
c001b3fa:	c1 e0 04             	shl    eax,0x4
c001b3fd:	89 c2                	mov    edx,eax
c001b3ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b403:	01 d0                	add    eax,edx
c001b405:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b40a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b411:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b416:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b41a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b41e:	ee                   	out    dx,al
c001b41f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b424:	0f b6 c0             	movzx  eax,al
c001b427:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b42e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b432:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b43a:	ee                   	out    dx,al
c001b43b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b442:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b447:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b44b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b44f:	ee                   	out    dx,al
c001b450:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b455:	c1 e8 08             	shr    eax,0x8
c001b458:	0f b6 c0             	movzx  eax,al
c001b45b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b462:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b466:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b46a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b46e:	ee                   	out    dx,al
c001b46f:	90                   	nop
c001b470:	83 c4 20             	add    esp,0x20
c001b473:	c3                   	ret    

c001b474 <FAT::getName()>:
c001b474:	b8 dc 5c 02 c0       	mov    eax,0xc0025cdc
c001b479:	c3                   	ret    
c001b47a:	66 90                	xchg   ax,ax

c001b47c <FAT::tell(void*, unsigned long long*)>:
c001b47c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b481:	75 09                	jne    c001b48c <FAT::tell(void*, unsigned long long*)+0x10>
c001b483:	b8 04 00 00 00       	mov    eax,0x4
c001b488:	c3                   	ret    
c001b489:	8d 76 00             	lea    esi,[esi+0x0]
c001b48c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b491:	75 09                	jne    c001b49c <FAT::tell(void*, unsigned long long*)+0x20>
c001b493:	b8 04 00 00 00       	mov    eax,0x4
c001b498:	c3                   	ret    
c001b499:	8d 76 00             	lea    esi,[esi+0x0]
c001b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b4a3:	ba 00 00 00 00       	mov    edx,0x0
c001b4a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b4ac:	89 01                	mov    DWORD PTR [ecx],eax
c001b4ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4b1:	b8 00 00 00 00       	mov    eax,0x0
c001b4b6:	c3                   	ret    
c001b4b7:	90                   	nop

c001b4b8 <FAT::stat(void*, unsigned long long*)>:
c001b4b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b4bd:	75 09                	jne    c001b4c8 <FAT::stat(void*, unsigned long long*)+0x10>
c001b4bf:	b8 04 00 00 00       	mov    eax,0x4
c001b4c4:	c3                   	ret    
c001b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b4cd:	75 09                	jne    c001b4d8 <FAT::stat(void*, unsigned long long*)+0x20>
c001b4cf:	b8 04 00 00 00       	mov    eax,0x4
c001b4d4:	c3                   	ret    
c001b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b4df:	ba 00 00 00 00       	mov    edx,0x0
c001b4e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b4e8:	89 01                	mov    DWORD PTR [ecx],eax
c001b4ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4ed:	b8 00 00 00 00       	mov    eax,0x0
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <FAT::~FAT()>:
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	ba 28 5d 02 c0       	mov    edx,0xc0025d28
c001b4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b500:	89 10                	mov    DWORD PTR [eax],edx
c001b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	50                   	push   eax
c001b50a:	e8 a3 c8 fe ff       	call   c0007db2 <Filesystem::~Filesystem()>
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	90                   	nop
c001b513:	83 c4 0c             	add    esp,0xc
c001b516:	c3                   	ret    
c001b517:	90                   	nop

c001b518 <FAT::~FAT()>:
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	83 ec 0c             	sub    esp,0xc
c001b51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b522:	e8 cd ff ff ff       	call   c001b4f4 <FAT::~FAT()>
c001b527:	83 c4 10             	add    esp,0x10
c001b52a:	83 ec 08             	sub    esp,0x8
c001b52d:	6a 08                	push   0x8
c001b52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b533:	e8 33 1d ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001b538:	83 c4 10             	add    esp,0x10
c001b53b:	83 c4 0c             	add    esp,0xc
c001b53e:	c3                   	ret    
c001b53f:	90                   	nop

c001b540 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b540:	83 ec 1c             	sub    esp,0x1c
c001b543:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b54a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b54f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b553:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b55a:	83 f8 ff             	cmp    eax,0xffffffff
c001b55d:	75 35                	jne    c001b594 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b55f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b563:	88 c2                	mov    dl,al
c001b565:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b56a:	01 d0                	add    eax,edx
c001b56c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b570:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b57a:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b581:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b586:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b58a:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b591:	eb 19                	jmp    c001b5ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b593:	90                   	nop
c001b594:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b598:	88 c2                	mov    dl,al
c001b59a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b59e:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b5a5:	01 d0                	add    eax,edx
c001b5a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b5ab:	90                   	nop
c001b5ac:	83 ec 04             	sub    esp,0x4
c001b5af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b5b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b5b7:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b5bb:	50                   	push   eax
c001b5bc:	e8 13 9c fe ff       	call   c00051d4 <f_getlabel>
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5cd:	75 09                	jne    c001b5d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b5cf:	b8 00 00 00 00       	mov    eax,0x0
c001b5d4:	eb 0a                	jmp    c001b5e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b5d6:	66 90                	xchg   ax,ax
c001b5d8:	b8 01 00 00 00       	mov    eax,0x1
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	83 c4 1c             	add    esp,0x1c
c001b5e3:	c3                   	ret    

c001b5e4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b5e4:	53                   	push   ebx
c001b5e5:	83 ec 58             	sub    esp,0x58
c001b5e8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b5f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b5f4:	b9 00 00 00 00       	mov    ecx,0x0
c001b5f9:	b8 3c 00 00 00       	mov    eax,0x3c
c001b5fe:	83 e0 f8             	and    eax,0xfffffff8
c001b601:	89 c3                	mov    ebx,eax
c001b603:	b8 00 00 00 00       	mov    eax,0x0
c001b608:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b60c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b610:	83 c0 08             	add    eax,0x8
c001b613:	39 d8                	cmp    eax,ebx
c001b615:	72 f1                	jb     c001b608 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b617:	01 c2                	add    edx,eax
c001b619:	89 0a                	mov    DWORD PTR [edx],ecx
c001b61b:	83 c2 04             	add    edx,0x4
c001b61e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b622:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b629:	83 f8 ff             	cmp    eax,0xffffffff
c001b62c:	75 36                	jne    c001b664 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001b62e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b632:	88 c2                	mov    dl,al
c001b634:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b639:	01 d0                	add    eax,edx
c001b63b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b63f:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b645:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b649:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b650:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b655:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b659:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b660:	eb 1a                	jmp    c001b67c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001b662:	66 90                	xchg   ax,ax
c001b664:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b668:	88 c2                	mov    dl,al
c001b66a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b66e:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b675:	01 d0                	add    eax,edx
c001b677:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b67b:	90                   	nop
c001b67c:	83 ec 08             	sub    esp,0x8
c001b67f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b683:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b687:	50                   	push   eax
c001b688:	e8 e3 51 fe ff       	call   c0000870 <strcat>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	83 ec 0c             	sub    esp,0xc
c001b693:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b697:	50                   	push   eax
c001b698:	e8 8b 9c fe ff       	call   c0005328 <f_setlabel>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b6a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b6a9:	75 09                	jne    c001b6b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001b6ab:	b8 00 00 00 00       	mov    eax,0x0
c001b6b0:	eb 0a                	jmp    c001b6bc <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001b6b2:	66 90                	xchg   ax,ax
c001b6b4:	b8 01 00 00 00       	mov    eax,0x1
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	83 c4 58             	add    esp,0x58
c001b6bf:	5b                   	pop    ebx
c001b6c0:	c3                   	ret    
c001b6c1:	90                   	nop
c001b6c2:	66 90                	xchg   ax,ax

c001b6c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b6c4:	83 ec 2c             	sub    esp,0x2c
c001b6c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b6cf:	83 ec 08             	sub    esp,0x8
c001b6d2:	68 00 5d 02 c0       	push   0xc0025d00
c001b6d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6db:	e8 a0 50 fe ff       	call   c0000780 <strcmp>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	85 c0                	test   eax,eax
c001b6e5:	0f 94 c0             	sete   al
c001b6e8:	0f b6 c0             	movzx  eax,al
c001b6eb:	85 c0                	test   eax,eax
c001b6ed:	74 0d                	je     c001b6fc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b6ef:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b6f7:	e9 c0 00 00 00       	jmp    c001b7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b6fc:	83 ec 08             	sub    esp,0x8
c001b6ff:	68 f2 5c 02 c0       	push   0xc0025cf2
c001b704:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b708:	e8 73 50 fe ff       	call   c0000780 <strcmp>
c001b70d:	83 c4 10             	add    esp,0x10
c001b710:	85 c0                	test   eax,eax
c001b712:	0f 94 c0             	sete   al
c001b715:	0f b6 c0             	movzx  eax,al
c001b718:	85 c0                	test   eax,eax
c001b71a:	74 10                	je     c001b72c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b71c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b724:	e9 93 00 00 00       	jmp    c001b7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b729:	8d 76 00             	lea    esi,[esi+0x0]
c001b72c:	83 ec 08             	sub    esp,0x8
c001b72f:	68 f8 5c 02 c0       	push   0xc0025cf8
c001b734:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b738:	e8 43 50 fe ff       	call   c0000780 <strcmp>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	85 c0                	test   eax,eax
c001b742:	0f 94 c0             	sete   al
c001b745:	0f b6 c0             	movzx  eax,al
c001b748:	85 c0                	test   eax,eax
c001b74a:	74 0c                	je     c001b758 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b74c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b754:	eb 66                	jmp    c001b7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b756:	66 90                	xchg   ax,ax
c001b758:	83 ec 08             	sub    esp,0x8
c001b75b:	68 1c 29 02 c0       	push   0xc002291c
c001b760:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b764:	e8 17 50 fe ff       	call   c0000780 <strcmp>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	85 c0                	test   eax,eax
c001b76e:	0f 94 c0             	sete   al
c001b771:	0f b6 c0             	movzx  eax,al
c001b774:	85 c0                	test   eax,eax
c001b776:	74 0c                	je     c001b784 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b778:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b780:	eb 3a                	jmp    c001b7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b782:	66 90                	xchg   ax,ax
c001b784:	83 ec 08             	sub    esp,0x8
c001b787:	68 fe 5c 02 c0       	push   0xc0025cfe
c001b78c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b790:	e8 eb 4f fe ff       	call   c0000780 <strcmp>
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	85 c0                	test   eax,eax
c001b79a:	0f 94 c0             	sete   al
c001b79d:	0f b6 c0             	movzx  eax,al
c001b7a0:	85 c0                	test   eax,eax
c001b7a2:	74 0c                	je     c001b7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b7a4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b7ac:	eb 0e                	jmp    c001b7bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	b8 08 00 00 00       	mov    eax,0x8
c001b7b5:	e9 ea 00 00 00       	jmp    c001b8a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b7ba:	66 90                	xchg   ax,ax
c001b7bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b7c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b7c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7cc:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b7d3:	83 f8 ff             	cmp    eax,0xffffffff
c001b7d6:	75 34                	jne    c001b80c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b7d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b7dc:	88 c2                	mov    dl,al
c001b7de:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b7e3:	01 d0                	add    eax,edx
c001b7e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b7e9:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b7ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7f3:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b7fa:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b7ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b803:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b80a:	eb 18                	jmp    c001b824 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b80c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b810:	88 c2                	mov    dl,al
c001b812:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b816:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b81d:	01 d0                	add    eax,edx
c001b81f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b823:	90                   	nop
c001b824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b828:	88 04 24             	mov    BYTE PTR [esp],al
c001b82b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b82f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b833:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b83b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b840:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	68 00 20 00 00       	push   0x2000
c001b850:	e8 b3 42 ff ff       	call   c000fb08 <malloc>
c001b855:	83 c4 10             	add    esp,0x10
c001b858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b85c:	68 00 20 00 00       	push   0x2000
c001b861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b865:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b869:	50                   	push   eax
c001b86a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b86e:	50                   	push   eax
c001b86f:	e8 b1 9d fe ff       	call   c0005625 <f_mkfs>
c001b874:	83 c4 10             	add    esp,0x10
c001b877:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b87b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b880:	75 0a                	jne    c001b88c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b882:	b8 00 00 00 00       	mov    eax,0x0
c001b887:	eb 1b                	jmp    c001b8a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b889:	8d 76 00             	lea    esi,[esi+0x0]
c001b88c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b891:	75 09                	jne    c001b89c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b893:	b8 09 00 00 00       	mov    eax,0x9
c001b898:	eb 0a                	jmp    c001b8a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b89a:	66 90                	xchg   ax,ax
c001b89c:	b8 01 00 00 00       	mov    eax,0x1
c001b8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a4:	83 c4 2c             	add    esp,0x2c
c001b8a7:	c3                   	ret    

c001b8a8 <FAT::tryMount(LogicalDisk*, int)>:
c001b8a8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b8ae:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b8b3:	83 f8 14             	cmp    eax,0x14
c001b8b6:	75 18                	jne    c001b8d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	68 04 5d 02 c0       	push   0xc0025d04
c001b8c0:	e8 89 45 ff ff       	call   c000fe4e <KePanic(char const*)>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	b0 00                	mov    al,0x0
c001b8ca:	e9 ed 01 00 00       	jmp    c001babc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b8cf:	90                   	nop
c001b8d0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b8d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8e3:	3d 00 02 00 00       	cmp    eax,0x200
c001b8e8:	74 0a                	je     c001b8f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b8ea:	b0 00                	mov    al,0x0
c001b8ec:	e9 cb 01 00 00       	jmp    c001babc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b8fc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b903:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b90a:	83 f8 ff             	cmp    eax,0xffffffff
c001b90d:	74 09                	je     c001b918 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b90f:	b0 01                	mov    al,0x1
c001b911:	e9 a6 01 00 00       	jmp    c001babc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b916:	66 90                	xchg   ax,ax
c001b918:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b922:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b92a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b931:	88 c2                	mov    dl,al
c001b933:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b938:	01 d0                	add    eax,edx
c001b93a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b941:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b947:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b94e:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b955:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b95a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b961:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	68 34 02 00 00       	push   0x234
c001b970:	e8 93 41 ff ff       	call   c000fb08 <malloc>
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b97f:	83 ec 04             	sub    esp,0x4
c001b982:	6a 00                	push   0x0
c001b984:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b98b:	50                   	push   eax
c001b98c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b993:	e8 87 84 fe ff       	call   c0003e1f <f_mount>
c001b998:	83 c4 10             	add    esp,0x10
c001b99b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b9a2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b9aa:	74 1c                	je     c001b9c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b9b6:	e8 6d 41 ff ff       	call   c000fb28 <rfree>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	b0 00                	mov    al,0x0
c001b9c0:	e9 f7 00 00 00       	jmp    c001babc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c8:	83 ec 04             	sub    esp,0x4
c001b9cb:	68 00 01 00 00       	push   0x100
c001b9d0:	6a 00                	push   0x0
c001b9d2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b9d9:	50                   	push   eax
c001b9da:	e8 11 4b fe ff       	call   c00004f0 <memset>
c001b9df:	83 c4 10             	add    esp,0x10
c001b9e2:	83 ec 08             	sub    esp,0x8
c001b9e5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b9ec:	50                   	push   eax
c001b9ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b9f4:	50                   	push   eax
c001b9f5:	e8 76 4e fe ff       	call   c0000870 <strcat>
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	83 ec 08             	sub    esp,0x8
c001ba00:	68 12 5d 02 c0       	push   0xc0025d12
c001ba05:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ba0c:	50                   	push   eax
c001ba0d:	e8 5e 4e fe ff       	call   c0000870 <strcat>
c001ba12:	83 c4 10             	add    esp,0x10
c001ba15:	83 ec 04             	sub    esp,0x4
c001ba18:	6a 01                	push   0x1
c001ba1a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001ba21:	50                   	push   eax
c001ba22:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba26:	50                   	push   eax
c001ba27:	e8 55 84 fe ff       	call   c0003e81 <f_open>
c001ba2c:	83 c4 10             	add    esp,0x10
c001ba2f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001ba36:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001ba3d:	85 c0                	test   eax,eax
c001ba3f:	74 0b                	je     c001ba4c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ba41:	78 31                	js     c001ba74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ba43:	83 e8 04             	sub    eax,0x4
c001ba46:	83 f8 01             	cmp    eax,0x1
c001ba49:	77 29                	ja     c001ba74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ba4b:	90                   	nop
c001ba4c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba5b:	50                   	push   eax
c001ba5c:	e8 d0 8b fe ff       	call   c0004631 <f_close>
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	90                   	nop
c001ba65:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001ba6d:	85 c0                	test   eax,eax
c001ba6f:	74 43                	je     c001bab4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001ba71:	eb 31                	jmp    c001baa4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ba73:	90                   	nop
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ba7e:	e8 a5 40 ff ff       	call   c000fb28 <rfree>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	83 ec 04             	sub    esp,0x4
c001ba89:	6a 00                	push   0x0
c001ba8b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ba92:	50                   	push   eax
c001ba93:	6a 00                	push   0x0
c001ba95:	e8 85 83 fe ff       	call   c0003e1f <f_mount>
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	b0 00                	mov    al,0x0
c001ba9f:	eb 1b                	jmp    c001babc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001baa1:	8d 76 00             	lea    esi,[esi+0x0]
c001baa4:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001baa9:	83 c0 01             	add    eax,0x1
c001baac:	a3 20 fb 02 c0       	mov    ds:0xc002fb20,eax
c001bab1:	8d 76 00             	lea    esi,[esi+0x0]
c001bab4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001babb:	90                   	nop
c001babc:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bac2:	c3                   	ret    
c001bac3:	90                   	nop

c001bac4 <FAT::allocateSwapfile(char const*, int)>:
c001bac4:	55                   	push   ebp
c001bac5:	57                   	push   edi
c001bac6:	56                   	push   esi
c001bac7:	53                   	push   ebx
c001bac8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bace:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bad9:	83 ec 0c             	sub    esp,0xc
c001badc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bae3:	e8 20 40 ff ff       	call   c000fb08 <malloc>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	89 c7                	mov    edi,eax
c001baed:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001baf2:	83 ec 04             	sub    esp,0x4
c001baf5:	50                   	push   eax
c001baf6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bafd:	57                   	push   edi
c001bafe:	e8 61 c6 fe ff       	call   c0008164 <File::File(char const*, Process*)>
c001bb03:	83 c4 10             	add    esp,0x10
c001bb06:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bb0d:	83 ec 04             	sub    esp,0x4
c001bb10:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bb14:	50                   	push   eax
c001bb15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb19:	50                   	push   eax
c001bb1a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb21:	e8 5e c9 fe ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bb30:	c1 e0 14             	shl    eax,0x14
c001bb33:	89 c7                	mov    edi,eax
c001bb35:	89 c5                	mov    ebp,eax
c001bb37:	c1 fd 1f             	sar    ebp,0x1f
c001bb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb42:	89 f9                	mov    ecx,edi
c001bb44:	31 c1                	xor    ecx,eax
c001bb46:	89 cb                	mov    ebx,ecx
c001bb48:	89 e9                	mov    ecx,ebp
c001bb4a:	31 d1                	xor    ecx,edx
c001bb4c:	89 ce                	mov    esi,ecx
c001bb4e:	89 f0                	mov    eax,esi
c001bb50:	09 d8                	or     eax,ebx
c001bb52:	0f 84 9c 00 00 00    	je     c001bbf4 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb62:	e8 e9 c7 fe ff       	call   c0008350 <File::unlink()>
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	83 ec 08             	sub    esp,0x8
c001bb6d:	6a 12                	push   0x12
c001bb6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb76:	e8 07 c6 fe ff       	call   c0008182 <File::open(FileOpenMode)>
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb85:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bb8b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bb92:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bb99:	c1 e0 14             	shl    eax,0x14
c001bb9c:	83 ec 04             	sub    esp,0x4
c001bb9f:	6a 01                	push   0x1
c001bba1:	50                   	push   eax
c001bba2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bba9:	e8 0a 99 fe ff       	call   c00054b8 <f_expand>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bbb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbba:	83 c0 10             	add    eax,0x10
c001bbbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbbf:	83 ec 0c             	sub    esp,0xc
c001bbc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bbc6:	52                   	push   edx
c001bbc7:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bbcb:	52                   	push   edx
c001bbcc:	6a 00                	push   0x0
c001bbce:	68 00 04 00 00       	push   0x400
c001bbd3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bbda:	ff d0                	call   eax
c001bbdc:	83 c4 20             	add    esp,0x20
c001bbdf:	83 ec 0c             	sub    esp,0xc
c001bbe2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bbe9:	e8 f2 c5 fe ff       	call   c00081e0 <File::close()>
c001bbee:	83 c4 10             	add    esp,0x10
c001bbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf4:	83 ec 08             	sub    esp,0x8
c001bbf7:	6a 01                	push   0x1
c001bbf9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc00:	e8 7d c5 fe ff       	call   c0008182 <File::open(FileOpenMode)>
c001bc05:	83 c4 10             	add    esp,0x10
c001bc08:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bc0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc11:	83 c0 0c             	add    eax,0xc
c001bc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bc1d:	52                   	push   edx
c001bc1e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bc22:	52                   	push   edx
c001bc23:	6a 00                	push   0x0
c001bc25:	6a 04                	push   0x4
c001bc27:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bc2e:	ff d0                	call   eax
c001bc30:	83 c4 20             	add    esp,0x20
c001bc33:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bc3a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bc40:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bc47:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bc4e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bc51:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc62:	e8 79 c5 fe ff       	call   c00081e0 <File::close()>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bc71:	ba 00 00 00 00       	mov    edx,0x0
c001bc76:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bc7c:	5b                   	pop    ebx
c001bc7d:	5e                   	pop    esi
c001bc7e:	5f                   	pop    edi
c001bc7f:	5d                   	pop    ebp
c001bc80:	c3                   	ret    
c001bc81:	90                   	nop
c001bc82:	66 90                	xchg   ax,ax

c001bc84 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bc84:	57                   	push   edi
c001bc85:	56                   	push   esi
c001bc86:	53                   	push   ebx
c001bc87:	81 ec 50 02 00 00    	sub    esp,0x250
c001bc8d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bc95:	74 0d                	je     c001bca4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bc97:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bc9f:	75 0f                	jne    c001bcb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bca1:	8d 76 00             	lea    esi,[esi+0x0]
c001bca4:	b8 04 00 00 00       	mov    eax,0x4
c001bca9:	e9 3a 01 00 00       	jmp    c001bde8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bcae:	66 90                	xchg   ax,ax
c001bcb0:	83 ec 08             	sub    esp,0x8
c001bcb3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bcba:	50                   	push   eax
c001bcbb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bcc2:	e8 36 8c fe ff       	call   c00048fd <f_readdir>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bcd1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001bcd8:	83 ec 0c             	sub    esp,0xc
c001bcdb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bce2:	83 c0 16             	add    eax,0x16
c001bce5:	50                   	push   eax
c001bce6:	e8 95 48 fe ff       	call   c0000580 <strlen>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	ba 00 00 00 00       	mov    edx,0x0
c001bcf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001bcfb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bd02:	0f b6 c0             	movzx  eax,al
c001bd05:	83 e0 10             	and    eax,0x10
c001bd08:	74 0a                	je     c001bd14 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bd0a:	b8 02 00 00 00       	mov    eax,0x2
c001bd0f:	eb 0b                	jmp    c001bd1c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bd11:	8d 76 00             	lea    esi,[esi+0x0]
c001bd14:	b8 01 00 00 00       	mov    eax,0x1
c001bd19:	8d 76 00             	lea    esi,[esi+0x0]
c001bd1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd20:	83 ec 08             	sub    esp,0x8
c001bd23:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bd2a:	83 c0 16             	add    eax,0x16
c001bd2d:	50                   	push   eax
c001bd2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd32:	83 c0 10             	add    eax,0x10
c001bd35:	50                   	push   eax
c001bd36:	e8 15 49 fe ff       	call   c0000650 <strcpy>
c001bd3b:	83 c4 10             	add    esp,0x10
c001bd3e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bd45:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bd4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd50:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bd57:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bd5e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bd65:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bd6c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bd73:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bd7a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bd81:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bd88:	89 c6                	mov    esi,eax
c001bd8a:	89 d7                	mov    edi,edx
c001bd8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bd8e:	89 c8                	mov    eax,ecx
c001bd90:	89 fa                	mov    edx,edi
c001bd92:	89 f3                	mov    ebx,esi
c001bd94:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bd9b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bda2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bda9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bdb0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bdb6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bdbd:	0f be c0             	movsx  eax,al
c001bdc0:	85 c0                	test   eax,eax
c001bdc2:	75 08                	jne    c001bdcc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bdc4:	b8 07 00 00 00       	mov    eax,0x7
c001bdc9:	eb 1d                	jmp    c001bde8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bdcb:	90                   	nop
c001bdcc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bdd3:	85 c0                	test   eax,eax
c001bdd5:	75 09                	jne    c001bde0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bdd7:	b8 00 00 00 00       	mov    eax,0x0
c001bddc:	eb 0a                	jmp    c001bde8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bdde:	66 90                	xchg   ax,ax
c001bde0:	b8 01 00 00 00       	mov    eax,0x1
c001bde5:	8d 76 00             	lea    esi,[esi+0x0]
c001bde8:	81 c4 50 02 00 00    	add    esp,0x250
c001bdee:	5b                   	pop    ebx
c001bdef:	5e                   	pop    esi
c001bdf0:	5f                   	pop    edi
c001bdf1:	c3                   	ret    
c001bdf2:	66 90                	xchg   ax,ax

c001bdf4 <FAT::read(void*, unsigned long, void*, int*)>:
c001bdf4:	83 ec 1c             	sub    esp,0x1c
c001bdf7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bdfc:	74 0a                	je     c001be08 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bdfe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001be03:	75 0b                	jne    c001be10 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001be05:	8d 76 00             	lea    esi,[esi+0x0]
c001be08:	b8 04 00 00 00       	mov    eax,0x4
c001be0d:	eb 41                	jmp    c001be50 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001be0f:	90                   	nop
c001be10:	8d 44 24 08          	lea    eax,[esp+0x8]
c001be14:	50                   	push   eax
c001be15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001be1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be21:	e8 1e 83 fe ff       	call   c0004144 <f_read>
c001be26:	83 c4 10             	add    esp,0x10
c001be29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be31:	89 c2                	mov    edx,eax
c001be33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be37:	89 10                	mov    DWORD PTR [eax],edx
c001be39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be3d:	85 c0                	test   eax,eax
c001be3f:	75 07                	jne    c001be48 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001be41:	b8 00 00 00 00       	mov    eax,0x0
c001be46:	eb 08                	jmp    c001be50 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001be48:	b8 01 00 00 00       	mov    eax,0x1
c001be4d:	8d 76 00             	lea    esi,[esi+0x0]
c001be50:	83 c4 1c             	add    esp,0x1c
c001be53:	c3                   	ret    

c001be54 <FAT::write(void*, unsigned long, void*, int*)>:
c001be54:	83 ec 1c             	sub    esp,0x1c
c001be57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001be5c:	74 0a                	je     c001be68 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001be5e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001be63:	75 0b                	jne    c001be70 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001be65:	8d 76 00             	lea    esi,[esi+0x0]
c001be68:	b8 04 00 00 00       	mov    eax,0x4
c001be6d:	eb 41                	jmp    c001beb0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001be6f:	90                   	nop
c001be70:	8d 44 24 08          	lea    eax,[esp+0x8]
c001be74:	50                   	push   eax
c001be75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001be7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be81:	e8 9f 84 fe ff       	call   c0004325 <f_write>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be91:	89 c2                	mov    edx,eax
c001be93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be97:	89 10                	mov    DWORD PTR [eax],edx
c001be99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be9d:	85 c0                	test   eax,eax
c001be9f:	75 07                	jne    c001bea8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bea1:	b8 00 00 00 00       	mov    eax,0x0
c001bea6:	eb 08                	jmp    c001beb0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bea8:	b8 01 00 00 00       	mov    eax,0x1
c001bead:	8d 76 00             	lea    esi,[esi+0x0]
c001beb0:	83 c4 1c             	add    esp,0x1c
c001beb3:	c3                   	ret    

c001beb4 <FAT::close(void*)>:
c001beb4:	83 ec 1c             	sub    esp,0x1c
c001beb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bebc:	75 0a                	jne    c001bec8 <FAT::close(void*)+0x14>
c001bebe:	b8 04 00 00 00       	mov    eax,0x4
c001bec3:	eb 3f                	jmp    c001bf04 <FAT::close(void*)+0x50>
c001bec5:	8d 76 00             	lea    esi,[esi+0x0]
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001becf:	e8 5d 87 fe ff       	call   c0004631 <f_close>
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bee2:	e8 31 3c ff ff       	call   c000fb18 <free>
c001bee7:	83 c4 10             	add    esp,0x10
c001beea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beee:	85 c0                	test   eax,eax
c001bef0:	75 0a                	jne    c001befc <FAT::close(void*)+0x48>
c001bef2:	b8 00 00 00 00       	mov    eax,0x0
c001bef7:	eb 0b                	jmp    c001bf04 <FAT::close(void*)+0x50>
c001bef9:	8d 76 00             	lea    esi,[esi+0x0]
c001befc:	b8 01 00 00 00       	mov    eax,0x1
c001bf01:	8d 76 00             	lea    esi,[esi+0x0]
c001bf04:	83 c4 1c             	add    esp,0x1c
c001bf07:	c3                   	ret    

c001bf08 <FAT::closeDir(void*)>:
c001bf08:	83 ec 1c             	sub    esp,0x1c
c001bf0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf10:	75 0a                	jne    c001bf1c <FAT::closeDir(void*)+0x14>
c001bf12:	b8 04 00 00 00       	mov    eax,0x4
c001bf17:	eb 3f                	jmp    c001bf58 <FAT::closeDir(void*)+0x50>
c001bf19:	8d 76 00             	lea    esi,[esi+0x0]
c001bf1c:	83 ec 0c             	sub    esp,0xc
c001bf1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf23:	e8 b3 89 fe ff       	call   c00048db <f_closedir>
c001bf28:	83 c4 10             	add    esp,0x10
c001bf2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2f:	83 ec 0c             	sub    esp,0xc
c001bf32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf36:	e8 dd 3b ff ff       	call   c000fb18 <free>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf42:	85 c0                	test   eax,eax
c001bf44:	75 0a                	jne    c001bf50 <FAT::closeDir(void*)+0x48>
c001bf46:	b8 00 00 00 00       	mov    eax,0x0
c001bf4b:	eb 0b                	jmp    c001bf58 <FAT::closeDir(void*)+0x50>
c001bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf50:	b8 01 00 00 00       	mov    eax,0x1
c001bf55:	8d 76 00             	lea    esi,[esi+0x0]
c001bf58:	83 c4 1c             	add    esp,0x1c
c001bf5b:	c3                   	ret    

c001bf5c <FAT::truncate(void*, unsigned long long)>:
c001bf5c:	83 ec 2c             	sub    esp,0x2c
c001bf5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bf6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf6f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bf74:	75 0a                	jne    c001bf80 <FAT::truncate(void*, unsigned long long)+0x24>
c001bf76:	b8 04 00 00 00       	mov    eax,0x4
c001bf7b:	eb 47                	jmp    c001bfc4 <FAT::truncate(void*, unsigned long long)+0x68>
c001bf7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bf87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bf93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf97:	83 ec 08             	sub    esp,0x8
c001bf9a:	50                   	push   eax
c001bf9b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bf9f:	e8 bc 86 fe ff       	call   c0004660 <f_lseek>
c001bfa4:	83 c4 10             	add    esp,0x10
c001bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfaf:	85 c0                	test   eax,eax
c001bfb1:	75 09                	jne    c001bfbc <FAT::truncate(void*, unsigned long long)+0x60>
c001bfb3:	b8 00 00 00 00       	mov    eax,0x0
c001bfb8:	eb 0a                	jmp    c001bfc4 <FAT::truncate(void*, unsigned long long)+0x68>
c001bfba:	66 90                	xchg   ax,ax
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	83 c4 2c             	add    esp,0x2c
c001bfc7:	c3                   	ret    

c001bfc8 <FAT::seek(void*, unsigned long long)>:
c001bfc8:	83 ec 2c             	sub    esp,0x2c
c001bfcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bfd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfdb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bfe0:	75 0a                	jne    c001bfec <FAT::seek(void*, unsigned long long)+0x24>
c001bfe2:	b8 04 00 00 00       	mov    eax,0x4
c001bfe7:	eb 33                	jmp    c001c01c <FAT::seek(void*, unsigned long long)+0x54>
c001bfe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bff0:	83 ec 08             	sub    esp,0x8
c001bff3:	50                   	push   eax
c001bff4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bff8:	e8 63 86 fe ff       	call   c0004660 <f_lseek>
c001bffd:	83 c4 10             	add    esp,0x10
c001c000:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c008:	85 c0                	test   eax,eax
c001c00a:	75 08                	jne    c001c014 <FAT::seek(void*, unsigned long long)+0x4c>
c001c00c:	b8 00 00 00 00       	mov    eax,0x0
c001c011:	eb 09                	jmp    c001c01c <FAT::seek(void*, unsigned long long)+0x54>
c001c013:	90                   	nop
c001c014:	b8 01 00 00 00       	mov    eax,0x1
c001c019:	8d 76 00             	lea    esi,[esi+0x0]
c001c01c:	83 c4 2c             	add    esp,0x2c
c001c01f:	c3                   	ret    

c001c020 <fatWrapperReadDisk>:
c001c020:	53                   	push   ebx
c001c021:	83 ec 18             	sub    esp,0x18
c001c024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c028:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c02c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c031:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c038:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c03c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c040:	ba 00 00 00 00       	mov    edx,0x0
c001c045:	83 ec 0c             	sub    esp,0xc
c001c048:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c04c:	53                   	push   ebx
c001c04d:	52                   	push   edx
c001c04e:	50                   	push   eax
c001c04f:	51                   	push   ecx
c001c050:	e8 d3 e9 fe ff       	call   c000aa28 <LogicalDisk::read(unsigned long long, int, void*)>
c001c055:	83 c4 20             	add    esp,0x20
c001c058:	83 c4 18             	add    esp,0x18
c001c05b:	5b                   	pop    ebx
c001c05c:	c3                   	ret    
c001c05d:	8d 76 00             	lea    esi,[esi+0x0]

c001c060 <fatWrapperWriteDisk>:
c001c060:	53                   	push   ebx
c001c061:	83 ec 18             	sub    esp,0x18
c001c064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c068:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c06c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c071:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c078:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c07c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c080:	ba 00 00 00 00       	mov    edx,0x0
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c08c:	53                   	push   ebx
c001c08d:	52                   	push   edx
c001c08e:	50                   	push   eax
c001c08f:	51                   	push   ecx
c001c090:	e8 ff e9 fe ff       	call   c000aa94 <LogicalDisk::write(unsigned long long, int, void*)>
c001c095:	83 c4 20             	add    esp,0x20
c001c098:	83 c4 18             	add    esp,0x18
c001c09b:	5b                   	pop    ebx
c001c09c:	c3                   	ret    
c001c09d:	8d 76 00             	lea    esi,[esi+0x0]

c001c0a0 <fatWrapperIoctl>:
c001c0a0:	53                   	push   ebx
c001c0a1:	83 ec 28             	sub    esp,0x28
c001c0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c0ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0b0:	88 d0                	mov    al,dl
c001c0b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0bb:	83 f8 02             	cmp    eax,0x2
c001c0be:	75 34                	jne    c001c0f4 <fatWrapperIoctl+0x54>
c001c0c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c0c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0cd:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c0d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c0da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c0e0:	89 c2                	mov    edx,eax
c001c0e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0e6:	66 89 10             	mov    WORD PTR [eax],dx
c001c0e9:	b8 00 00 00 00       	mov    eax,0x0
c001c0ee:	e9 c5 00 00 00       	jmp    c001c1b8 <fatWrapperIoctl+0x118>
c001c0f3:	90                   	nop
c001c0f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0f9:	83 f8 01             	cmp    eax,0x1
c001c0fc:	75 6a                	jne    c001c168 <fatWrapperIoctl+0xc8>
c001c0fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c106:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c10b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c112:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c118:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c11e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c124:	89 c8                	mov    eax,ecx
c001c126:	89 da                	mov    edx,ebx
c001c128:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c12c:	c1 e0 0a             	shl    eax,0xa
c001c12f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c134:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c13b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c141:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c147:	89 cb                	mov    ebx,ecx
c001c149:	c1 fb 1f             	sar    ebx,0x1f
c001c14c:	53                   	push   ebx
c001c14d:	51                   	push   ecx
c001c14e:	52                   	push   edx
c001c14f:	50                   	push   eax
c001c150:	e8 bf 59 00 00       	call   c0021b14 <__udivdi3>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	89 c2                	mov    edx,eax
c001c15a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c15e:	89 10                	mov    DWORD PTR [eax],edx
c001c160:	b8 00 00 00 00       	mov    eax,0x0
c001c165:	eb 51                	jmp    c001c1b8 <fatWrapperIoctl+0x118>
c001c167:	90                   	nop
c001c168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c16d:	85 c0                	test   eax,eax
c001c16f:	75 07                	jne    c001c178 <fatWrapperIoctl+0xd8>
c001c171:	b8 00 00 00 00       	mov    eax,0x0
c001c176:	eb 40                	jmp    c001c1b8 <fatWrapperIoctl+0x118>
c001c178:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c17d:	83 f8 03             	cmp    eax,0x3
c001c180:	75 1a                	jne    c001c19c <fatWrapperIoctl+0xfc>
c001c182:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c186:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c18a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c18e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c194:	b8 00 00 00 00       	mov    eax,0x0
c001c199:	eb 1d                	jmp    c001c1b8 <fatWrapperIoctl+0x118>
c001c19b:	90                   	nop
c001c19c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c1a1:	83 f8 04             	cmp    eax,0x4
c001c1a4:	75 0a                	jne    c001c1b0 <fatWrapperIoctl+0x110>
c001c1a6:	b8 00 00 00 00       	mov    eax,0x0
c001c1ab:	eb 0b                	jmp    c001c1b8 <fatWrapperIoctl+0x118>
c001c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b0:	b8 04 00 00 00       	mov    eax,0x4
c001c1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b8:	83 c4 28             	add    esp,0x28
c001c1bb:	5b                   	pop    ebx
c001c1bc:	c3                   	ret    
c001c1bd:	90                   	nop
c001c1be:	66 90                	xchg   ax,ax

c001c1c0 <FAT::FAT()>:
c001c1c0:	83 ec 1c             	sub    esp,0x1c
c001c1c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1c7:	83 ec 0c             	sub    esp,0xc
c001c1ca:	50                   	push   eax
c001c1cb:	e8 be bb fe ff       	call   c0007d8e <Filesystem::Filesystem()>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	ba 28 5d 02 c0       	mov    edx,0xc0025d28
c001c1d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1dc:	89 10                	mov    DWORD PTR [eax],edx
c001c1de:	c7 05 20 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb20,0x0
c001c1e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c1f5:	7f 19                	jg     c001c210 <FAT::FAT()+0x50>
c001c1f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1fb:	c7 04 85 40 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd04c0],0xffffffff
c001c206:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c20b:	eb e3                	jmp    c001c1f0 <FAT::FAT()+0x30>
c001c20d:	8d 76 00             	lea    esi,[esi+0x0]
c001c210:	90                   	nop
c001c211:	83 c4 1c             	add    esp,0x1c
c001c214:	c3                   	ret    
c001c215:	90                   	nop
c001c216:	66 90                	xchg   ax,ax

c001c218 <FAT::fixFilepath(char*)>:
c001c218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c21c:	8a 00                	mov    al,BYTE PTR [eax]
c001c21e:	0f be c0             	movsx  eax,al
c001c221:	83 f8 40             	cmp    eax,0x40
c001c224:	7e 2e                	jle    c001c254 <FAT::fixFilepath(char*)+0x3c>
c001c226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c22a:	8a 00                	mov    al,BYTE PTR [eax]
c001c22c:	83 e8 41             	sub    eax,0x41
c001c22f:	88 c2                	mov    dl,al
c001c231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c235:	88 10                	mov    BYTE PTR [eax],dl
c001c237:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c23b:	8a 00                	mov    al,BYTE PTR [eax]
c001c23d:	0f be c0             	movsx  eax,al
c001c240:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001c247:	83 c0 30             	add    eax,0x30
c001c24a:	88 c2                	mov    dl,al
c001c24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c250:	88 10                	mov    BYTE PTR [eax],dl
c001c252:	66 90                	xchg   ax,ax
c001c254:	90                   	nop
c001c255:	c3                   	ret    
c001c256:	66 90                	xchg   ax,ax

c001c258 <FAT::open(char const*, void**, FileOpenMode)>:
c001c258:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c25e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c266:	74 0c                	je     c001c274 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c268:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c270:	75 0e                	jne    c001c280 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c272:	66 90                	xchg   ax,ax
c001c274:	b8 04 00 00 00       	mov    eax,0x4
c001c279:	e9 46 01 00 00       	jmp    c001c3c4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c27e:	66 90                	xchg   ax,ax
c001c280:	83 ec 08             	sub    esp,0x8
c001c283:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c28a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c28e:	50                   	push   eax
c001c28f:	e8 bc 43 fe ff       	call   c0000650 <strcpy>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	83 ec 08             	sub    esp,0x8
c001c29a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c29e:	50                   	push   eax
c001c29f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c2a6:	e8 6d ff ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c2b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c2bd:	83 e0 01             	and    eax,0x1
c001c2c0:	74 12                	je     c001c2d4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c2c2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c2c9:	83 c8 01             	or     eax,0x1
c001c2cc:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c2d3:	90                   	nop
c001c2d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c2db:	83 e0 04             	and    eax,0x4
c001c2de:	74 24                	je     c001c304 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c2e0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c2e7:	83 c8 30             	or     eax,0x30
c001c2ea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c2f1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c2f8:	83 c8 02             	or     eax,0x2
c001c2fb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c302:	66 90                	xchg   ax,ax
c001c304:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c30b:	83 e0 02             	and    eax,0x2
c001c30e:	74 14                	je     c001c324 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c310:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c317:	83 c8 02             	or     eax,0x2
c001c31a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c321:	8d 76 00             	lea    esi,[esi+0x0]
c001c324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c32b:	83 e0 08             	and    eax,0x8
c001c32e:	74 14                	je     c001c344 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c330:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c337:	83 c8 04             	or     eax,0x4
c001c33a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c341:	8d 76 00             	lea    esi,[esi+0x0]
c001c344:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c34b:	83 e0 10             	and    eax,0x10
c001c34e:	74 14                	je     c001c364 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c350:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c357:	83 c8 08             	or     eax,0x8
c001c35a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c361:	8d 76 00             	lea    esi,[esi+0x0]
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	68 28 02 00 00       	push   0x228
c001c36c:	e8 97 37 ff ff       	call   c000fb08 <malloc>
c001c371:	83 c4 10             	add    esp,0x10
c001c374:	89 c2                	mov    edx,eax
c001c376:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c37d:	89 10                	mov    DWORD PTR [eax],edx
c001c37f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c387:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c38e:	8b 00                	mov    eax,DWORD PTR [eax]
c001c390:	83 ec 04             	sub    esp,0x4
c001c393:	52                   	push   edx
c001c394:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c398:	52                   	push   edx
c001c399:	50                   	push   eax
c001c39a:	e8 e2 7a fe ff       	call   c0003e81 <f_open>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c3a9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c3b1:	74 09                	je     c001c3bc <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c3b3:	b8 01 00 00 00       	mov    eax,0x1
c001c3b8:	eb 0a                	jmp    c001c3c4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c3ba:	66 90                	xchg   ax,ax
c001c3bc:	b8 00 00 00 00       	mov    eax,0x0
c001c3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c3ca:	c3                   	ret    
c001c3cb:	90                   	nop

c001c3cc <FAT::openDir(char const*, void**)>:
c001c3cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c3d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c3da:	74 0c                	je     c001c3e8 <FAT::openDir(char const*, void**)+0x1c>
c001c3dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c3e4:	75 0e                	jne    c001c3f4 <FAT::openDir(char const*, void**)+0x28>
c001c3e6:	66 90                	xchg   ax,ax
c001c3e8:	b8 04 00 00 00       	mov    eax,0x4
c001c3ed:	e9 82 00 00 00       	jmp    c001c474 <FAT::openDir(char const*, void**)+0xa8>
c001c3f2:	66 90                	xchg   ax,ax
c001c3f4:	83 ec 08             	sub    esp,0x8
c001c3f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c402:	50                   	push   eax
c001c403:	e8 48 42 fe ff       	call   c0000650 <strcpy>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	83 ec 08             	sub    esp,0x8
c001c40e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c412:	50                   	push   eax
c001c413:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c41a:	e8 f9 fd ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	83 ec 0c             	sub    esp,0xc
c001c425:	6a 30                	push   0x30
c001c427:	e8 dc 36 ff ff       	call   c000fb08 <malloc>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	89 c2                	mov    edx,eax
c001c431:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c438:	89 10                	mov    DWORD PTR [eax],edx
c001c43a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c441:	8b 00                	mov    eax,DWORD PTR [eax]
c001c443:	83 ec 08             	sub    esp,0x8
c001c446:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c44a:	52                   	push   edx
c001c44b:	50                   	push   eax
c001c44c:	e8 bf 83 fe ff       	call   c0004810 <f_opendir>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c45b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c463:	74 07                	je     c001c46c <FAT::openDir(char const*, void**)+0xa0>
c001c465:	b8 01 00 00 00       	mov    eax,0x1
c001c46a:	eb 08                	jmp    c001c474 <FAT::openDir(char const*, void**)+0xa8>
c001c46c:	b8 00 00 00 00       	mov    eax,0x0
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c47a:	c3                   	ret    
c001c47b:	90                   	nop

c001c47c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c47c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c482:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c48a:	75 0c                	jne    c001c498 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c48c:	b8 04 00 00 00       	mov    eax,0x4
c001c491:	e9 d6 00 00 00       	jmp    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c496:	66 90                	xchg   ax,ax
c001c498:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c4a0:	75 0a                	jne    c001c4ac <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c4a2:	b8 04 00 00 00       	mov    eax,0x4
c001c4a7:	e9 c0 00 00 00       	jmp    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c4ac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c4b4:	75 0a                	jne    c001c4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c4b6:	b8 04 00 00 00       	mov    eax,0x4
c001c4bb:	e9 ac 00 00 00       	jmp    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c4c0:	83 ec 08             	sub    esp,0x8
c001c4c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c4ca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c4d1:	50                   	push   eax
c001c4d2:	e8 79 41 fe ff       	call   c0000650 <strcpy>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	83 ec 08             	sub    esp,0x8
c001c4dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c4e4:	50                   	push   eax
c001c4e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c4ec:	e8 27 fd ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	83 ec 08             	sub    esp,0x8
c001c4f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c4fb:	50                   	push   eax
c001c4fc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c503:	50                   	push   eax
c001c504:	e8 86 84 fe ff       	call   c000498f <f_stat>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c513:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c51a:	85 c0                	test   eax,eax
c001c51c:	74 0a                	je     c001c528 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c51e:	83 f8 04             	cmp    eax,0x4
c001c521:	74 39                	je     c001c55c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c523:	eb 3f                	jmp    c001c564 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c525:	8d 76 00             	lea    esi,[esi+0x0]
c001c528:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c52c:	0f b6 c0             	movzx  eax,al
c001c52f:	83 e0 10             	and    eax,0x10
c001c532:	0f 95 c2             	setne  dl
c001c535:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c53c:	88 10                	mov    BYTE PTR [eax],dl
c001c53e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c542:	ba 00 00 00 00       	mov    edx,0x0
c001c547:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c54e:	89 01                	mov    DWORD PTR [ecx],eax
c001c550:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c553:	b8 00 00 00 00       	mov    eax,0x0
c001c558:	eb 12                	jmp    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c55a:	66 90                	xchg   ax,ax
c001c55c:	b8 02 00 00 00       	mov    eax,0x2
c001c561:	eb 09                	jmp    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c563:	90                   	nop
c001c564:	b8 01 00 00 00       	mov    eax,0x1
c001c569:	8d 76 00             	lea    esi,[esi+0x0]
c001c56c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c572:	c3                   	ret    
c001c573:	90                   	nop

c001c574 <FAT::unlink(char const*)>:
c001c574:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c57a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c582:	75 08                	jne    c001c58c <FAT::unlink(char const*)+0x18>
c001c584:	b8 04 00 00 00       	mov    eax,0x4
c001c589:	eb 61                	jmp    c001c5ec <FAT::unlink(char const*)+0x78>
c001c58b:	90                   	nop
c001c58c:	83 ec 08             	sub    esp,0x8
c001c58f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c596:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c59a:	50                   	push   eax
c001c59b:	e8 b0 40 fe ff       	call   c0000650 <strcpy>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	83 ec 08             	sub    esp,0x8
c001c5a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5aa:	50                   	push   eax
c001c5ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5b2:	e8 61 fc ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5c1:	50                   	push   eax
c001c5c2:	e8 3a 86 fe ff       	call   c0004c01 <f_unlink>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c5d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c5d8:	85 c0                	test   eax,eax
c001c5da:	75 08                	jne    c001c5e4 <FAT::unlink(char const*)+0x70>
c001c5dc:	b8 00 00 00 00       	mov    eax,0x0
c001c5e1:	eb 09                	jmp    c001c5ec <FAT::unlink(char const*)+0x78>
c001c5e3:	90                   	nop
c001c5e4:	b8 01 00 00 00       	mov    eax,0x1
c001c5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c5f2:	c3                   	ret    
c001c5f3:	90                   	nop

c001c5f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c5f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c5fa:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c601:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c608:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c60c:	88 d0                	mov    al,dl
c001c60e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c612:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c61a:	75 0c                	jne    c001c628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c61c:	b8 04 00 00 00       	mov    eax,0x4
c001c621:	e9 7e 01 00 00       	jmp    c001c7a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c626:	66 90                	xchg   ax,ax
c001c628:	83 ec 08             	sub    esp,0x8
c001c62b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c632:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c636:	50                   	push   eax
c001c637:	e8 14 40 fe ff       	call   c0000650 <strcpy>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	83 ec 08             	sub    esp,0x8
c001c642:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c646:	50                   	push   eax
c001c647:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c64e:	e8 c5 fb ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c65e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c666:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c66b:	83 e0 01             	and    eax,0x1
c001c66e:	74 14                	je     c001c684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001c670:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c677:	83 c8 01             	or     eax,0x1
c001c67a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c681:	8d 76 00             	lea    esi,[esi+0x0]
c001c684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c689:	83 e0 02             	and    eax,0x2
c001c68c:	74 12                	je     c001c6a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001c68e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c695:	83 c8 20             	or     eax,0x20
c001c698:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c69f:	90                   	nop
c001c6a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6a5:	83 e0 04             	and    eax,0x4
c001c6a8:	74 12                	je     c001c6bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001c6aa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c6b1:	83 c8 04             	or     eax,0x4
c001c6b4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c6bb:	90                   	nop
c001c6bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6c1:	83 e0 08             	and    eax,0x8
c001c6c4:	74 12                	je     c001c6d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c6c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c6cd:	83 c8 02             	or     eax,0x2
c001c6d0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c6d7:	90                   	nop
c001c6d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6dd:	83 e0 01             	and    eax,0x1
c001c6e0:	74 12                	je     c001c6f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001c6e2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c6e9:	83 c8 01             	or     eax,0x1
c001c6ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c6f3:	90                   	nop
c001c6f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6f9:	83 e0 02             	and    eax,0x2
c001c6fc:	74 12                	je     c001c710 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001c6fe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c705:	83 c8 20             	or     eax,0x20
c001c708:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c70f:	90                   	nop
c001c710:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c715:	83 e0 04             	and    eax,0x4
c001c718:	74 12                	je     c001c72c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001c71a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c721:	83 c8 04             	or     eax,0x4
c001c724:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c72b:	90                   	nop
c001c72c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c731:	83 e0 08             	and    eax,0x8
c001c734:	74 12                	je     c001c748 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001c736:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c73d:	83 c8 02             	or     eax,0x2
c001c740:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c747:	90                   	nop
c001c748:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c74f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c756:	09 d0                	or     eax,edx
c001c758:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c75f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c767:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c76f:	83 ec 04             	sub    esp,0x4
c001c772:	52                   	push   edx
c001c773:	50                   	push   eax
c001c774:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c778:	50                   	push   eax
c001c779:	e8 f6 88 fe ff       	call   c0005074 <f_chmod>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c788:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c78f:	85 c0                	test   eax,eax
c001c791:	75 09                	jne    c001c79c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001c793:	b8 00 00 00 00       	mov    eax,0x0
c001c798:	eb 0a                	jmp    c001c7a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	b8 01 00 00 00       	mov    eax,0x1
c001c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c7aa:	c3                   	ret    
c001c7ab:	90                   	nop

c001c7ac <FAT::rename(char const*, char const*)>:
c001c7ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c7b2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c7ba:	74 0c                	je     c001c7c8 <FAT::rename(char const*, char const*)+0x1c>
c001c7bc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c7c4:	75 0e                	jne    c001c7d4 <FAT::rename(char const*, char const*)+0x28>
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	b8 04 00 00 00       	mov    eax,0x4
c001c7cd:	e9 9e 00 00 00       	jmp    c001c870 <FAT::rename(char const*, char const*)+0xc4>
c001c7d2:	66 90                	xchg   ax,ax
c001c7d4:	83 ec 08             	sub    esp,0x8
c001c7d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c7e5:	50                   	push   eax
c001c7e6:	e8 65 3e fe ff       	call   c0000650 <strcpy>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	83 ec 08             	sub    esp,0x8
c001c7f1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c7f8:	50                   	push   eax
c001c7f9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c800:	e8 13 fa ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c805:	83 c4 10             	add    esp,0x10
c001c808:	83 ec 08             	sub    esp,0x8
c001c80b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c812:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c816:	50                   	push   eax
c001c817:	e8 34 3e fe ff       	call   c0000650 <strcpy>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	83 ec 08             	sub    esp,0x8
c001c822:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c826:	50                   	push   eax
c001c827:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c82e:	e8 e5 f9 ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c833:	83 c4 10             	add    esp,0x10
c001c836:	83 ec 08             	sub    esp,0x8
c001c839:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c83d:	50                   	push   eax
c001c83e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c845:	50                   	push   eax
c001c846:	e8 71 86 fe ff       	call   c0004ebc <f_rename>
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c855:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c85c:	85 c0                	test   eax,eax
c001c85e:	75 08                	jne    c001c868 <FAT::rename(char const*, char const*)+0xbc>
c001c860:	b8 00 00 00 00       	mov    eax,0x0
c001c865:	eb 09                	jmp    c001c870 <FAT::rename(char const*, char const*)+0xc4>
c001c867:	90                   	nop
c001c868:	b8 01 00 00 00       	mov    eax,0x1
c001c86d:	8d 76 00             	lea    esi,[esi+0x0]
c001c870:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <FAT::mkdir(char const*)>:
c001c878:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c87e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c886:	75 08                	jne    c001c890 <FAT::mkdir(char const*)+0x18>
c001c888:	b8 04 00 00 00       	mov    eax,0x4
c001c88d:	eb 61                	jmp    c001c8f0 <FAT::mkdir(char const*)+0x78>
c001c88f:	90                   	nop
c001c890:	83 ec 08             	sub    esp,0x8
c001c893:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c89a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c89e:	50                   	push   eax
c001c89f:	e8 ac 3d fe ff       	call   c0000650 <strcpy>
c001c8a4:	83 c4 10             	add    esp,0x10
c001c8a7:	83 ec 08             	sub    esp,0x8
c001c8aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8ae:	50                   	push   eax
c001c8af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8b6:	e8 5d f9 ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	83 ec 0c             	sub    esp,0xc
c001c8c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8c5:	50                   	push   eax
c001c8c6:	e8 56 84 fe ff       	call   c0004d21 <f_mkdir>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c8d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c8dc:	85 c0                	test   eax,eax
c001c8de:	75 08                	jne    c001c8e8 <FAT::mkdir(char const*)+0x70>
c001c8e0:	b8 00 00 00 00       	mov    eax,0x0
c001c8e5:	eb 09                	jmp    c001c8f0 <FAT::mkdir(char const*)+0x78>
c001c8e7:	90                   	nop
c001c8e8:	b8 01 00 00 00       	mov    eax,0x1
c001c8ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c8f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8f6:	c3                   	ret    
c001c8f7:	90                   	nop

c001c8f8 <FAT::exists(char const*)>:
c001c8f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c8fe:	83 ec 08             	sub    esp,0x8
c001c901:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c908:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c90c:	50                   	push   eax
c001c90d:	e8 3e 3d fe ff       	call   c0000650 <strcpy>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	83 ec 08             	sub    esp,0x8
c001c918:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c91c:	50                   	push   eax
c001c91d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c924:	e8 ef f8 ff ff       	call   c001c218 <FAT::fixFilepath(char*)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	83 ec 08             	sub    esp,0x8
c001c92f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c936:	50                   	push   eax
c001c937:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c93b:	50                   	push   eax
c001c93c:	e8 4e 80 fe ff       	call   c000498f <f_stat>
c001c941:	83 c4 10             	add    esp,0x10
c001c944:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c94b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c952:	85 c0                	test   eax,eax
c001c954:	75 06                	jne    c001c95c <FAT::exists(char const*)+0x64>
c001c956:	b0 01                	mov    al,0x1
c001c958:	eb 06                	jmp    c001c960 <FAT::exists(char const*)+0x68>
c001c95a:	66 90                	xchg   ax,ax
c001c95c:	b0 00                	mov    al,0x0
c001c95e:	66 90                	xchg   ax,ax
c001c960:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c966:	c3                   	ret    
c001c967:	90                   	nop

c001c968 <isoReadDiscSectorHelper>:
c001c968:	83 ec 2c             	sub    esp,0x2c
c001c96b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c96f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c973:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c978:	83 e8 41             	sub    eax,0x41
c001c97b:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c982:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c986:	ba 00 00 00 00       	mov    edx,0x0
c001c98b:	83 ec 0c             	sub    esp,0xc
c001c98e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c992:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c996:	52                   	push   edx
c001c997:	50                   	push   eax
c001c998:	51                   	push   ecx
c001c999:	e8 8a e0 fe ff       	call   c000aa28 <LogicalDisk::read(unsigned long long, int, void*)>
c001c99e:	83 c4 20             	add    esp,0x20
c001c9a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9a5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c9aa:	74 0c                	je     c001c9b8 <isoReadDiscSectorHelper+0x50>
c001c9ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c9b0:	c1 e0 0b             	shl    eax,0xb
c001c9b3:	eb 0b                	jmp    c001c9c0 <isoReadDiscSectorHelper+0x58>
c001c9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b8:	b8 00 00 00 00       	mov    eax,0x0
c001c9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9c0:	83 c4 2c             	add    esp,0x2c
c001c9c3:	c3                   	ret    

c001c9c4 <iso_kprintf>:
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	83 ec 08             	sub    esp,0x8
c001c9ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9ce:	68 00 5a 02 c0       	push   0xc0025a00
c001c9d3:	e8 76 a5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	90                   	nop
c001c9dc:	83 c4 0c             	add    esp,0xc
c001c9df:	c3                   	ret    

c001c9e0 <iso_kprintfd>:
c001c9e0:	83 ec 0c             	sub    esp,0xc
c001c9e3:	83 ec 08             	sub    esp,0x8
c001c9e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9ea:	68 5a 42 02 c0       	push   0xc002425a
c001c9ef:	e8 5a a5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	90                   	nop
c001c9f8:	83 c4 0c             	add    esp,0xc
c001c9fb:	c3                   	ret    

c001c9fc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c9fc:	b8 08 00 00 00       	mov    eax,0x8
c001ca01:	c3                   	ret    

c001ca02 <ISO9660::truncate(void*, unsigned long long)>:
c001ca02:	b8 01 00 00 00       	mov    eax,0x1
c001ca07:	c3                   	ret    

c001ca08 <ISO9660::getName()>:
c001ca08:	b8 8c 5d 02 c0       	mov    eax,0xc0025d8c
c001ca0d:	c3                   	ret    

c001ca0e <ISO9660::closeDir(void*)>:
c001ca0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca12:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca14:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ca17:	90                   	nop

c001ca18 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ca18:	b8 01 00 00 00       	mov    eax,0x1
c001ca1d:	c3                   	ret    

c001ca1e <ISO9660::unlink(char const*)>:
c001ca1e:	b8 01 00 00 00       	mov    eax,0x1
c001ca23:	c3                   	ret    

c001ca24 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ca24:	b8 03 00 00 00       	mov    eax,0x3
c001ca29:	c3                   	ret    

c001ca2a <ISO9660::rename(char const*, char const*)>:
c001ca2a:	b8 01 00 00 00       	mov    eax,0x1
c001ca2f:	c3                   	ret    

c001ca30 <ISO9660::mkdir(char const*)>:
c001ca30:	b8 01 00 00 00       	mov    eax,0x1
c001ca35:	c3                   	ret    

c001ca36 <ISO9660::~ISO9660()>:
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c001ca3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca42:	89 10                	mov    DWORD PTR [eax],edx
c001ca44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca48:	83 ec 0c             	sub    esp,0xc
c001ca4b:	50                   	push   eax
c001ca4c:	e8 61 b3 fe ff       	call   c0007db2 <Filesystem::~Filesystem()>
c001ca51:	83 c4 10             	add    esp,0x10
c001ca54:	90                   	nop
c001ca55:	83 c4 0c             	add    esp,0xc
c001ca58:	c3                   	ret    
c001ca59:	90                   	nop

c001ca5a <ISO9660::~ISO9660()>:
c001ca5a:	83 ec 0c             	sub    esp,0xc
c001ca5d:	83 ec 0c             	sub    esp,0xc
c001ca60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca64:	e8 cd ff ff ff       	call   c001ca36 <ISO9660::~ISO9660()>
c001ca69:	83 c4 10             	add    esp,0x10
c001ca6c:	83 ec 08             	sub    esp,0x8
c001ca6f:	6a 08                	push   0x8
c001ca71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca75:	e8 f1 07 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001ca7a:	83 c4 10             	add    esp,0x10
c001ca7d:	83 c4 0c             	add    esp,0xc
c001ca80:	c3                   	ret    
c001ca81:	90                   	nop

c001ca82 <ISO9660::exists(char const*)>:
c001ca82:	83 ec 18             	sub    esp,0x18
c001ca85:	68 a7 5d 02 c0       	push   0xc0025da7
c001ca8a:	e8 bf 33 ff ff       	call   c000fe4e <KePanic(char const*)>
c001ca8f:	31 c0                	xor    eax,eax
c001ca91:	83 c4 1c             	add    esp,0x1c
c001ca94:	c3                   	ret    
c001ca95:	90                   	nop

c001ca96 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca96:	56                   	push   esi
c001ca97:	53                   	push   ebx
c001ca98:	53                   	push   ebx
c001ca99:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001caa1:	85 db                	test   ebx,ebx
c001caa3:	0f 84 ca 00 00 00    	je     c001cb73 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001caa9:	85 f6                	test   esi,esi
c001caab:	0f 84 c2 00 00 00    	je     c001cb73 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cab1:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001cab6:	b8 03 00 00 00       	mov    eax,0x3
c001cabb:	0f 85 b7 00 00 00    	jne    c001cb78 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cac1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cac3:	38 0d 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,cl
c001cac9:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cad0:	74 1b                	je     c001caed <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001cad2:	85 c0                	test   eax,eax
c001cad4:	74 10                	je     c001cae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	68 c5 5d 02 c0       	push   0xc0025dc5
c001cade:	e8 6b 33 ff ff       	call   c000fe4e <KePanic(char const*)>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	8a 03                	mov    al,BYTE PTR [ebx]
c001cae8:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001caed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001caf0:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001caf7:	85 c0                	test   eax,eax
c001caf9:	74 09                	je     c001cb04 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001cafb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cb02:	74 48                	je     c001cb4c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	68 d5 5d 02 c0       	push   0xc0025dd5
c001cb0c:	e8 3d a4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cb11:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001cb1e:	85 c0                	test   eax,eax
c001cb20:	74 17                	je     c001cb39 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001cb22:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cb29:	83 ec 0c             	sub    esp,0xc
c001cb2c:	68 f5 5d 02 c0       	push   0xc0025df5
c001cb31:	e8 18 a4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cb36:	83 c4 10             	add    esp,0x10
c001cb39:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	50                   	push   eax
c001cb44:	e8 fe a0 fe ff       	call   c0006c47 <init_percd>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	51                   	push   ecx
c001cb4d:	83 c3 03             	add    ebx,0x3
c001cb50:	51                   	push   ecx
c001cb51:	6a 00                	push   0x0
c001cb53:	53                   	push   ebx
c001cb54:	e8 b1 9b fe ff       	call   c000670a <iso_open>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	89 c2                	mov    edx,eax
c001cb5e:	b8 01 00 00 00       	mov    eax,0x1
c001cb63:	83 fa ff             	cmp    edx,0xffffffff
c001cb66:	74 10                	je     c001cb78 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cb68:	83 c2 32             	add    edx,0x32
c001cb6b:	31 c0                	xor    eax,eax
c001cb6d:	01 d2                	add    edx,edx
c001cb6f:	89 16                	mov    DWORD PTR [esi],edx
c001cb71:	eb 05                	jmp    c001cb78 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cb73:	b8 04 00 00 00       	mov    eax,0x4
c001cb78:	5a                   	pop    edx
c001cb79:	5b                   	pop    ebx
c001cb7a:	5e                   	pop    esi
c001cb7b:	c3                   	ret    

c001cb7c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cb7c:	53                   	push   ebx
c001cb7d:	83 ec 08             	sub    esp,0x8
c001cb80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cb84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb88:	85 c0                	test   eax,eax
c001cb8a:	74 2d                	je     c001cbb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cb8c:	85 db                	test   ebx,ebx
c001cb8e:	74 29                	je     c001cbb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cb90:	52                   	push   edx
c001cb91:	b9 02 00 00 00       	mov    ecx,0x2
c001cb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb9a:	99                   	cdq    
c001cb9b:	f7 f9                	idiv   ecx
c001cb9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cba1:	83 e8 32             	sub    eax,0x32
c001cba4:	50                   	push   eax
c001cba5:	e8 08 9c fe ff       	call   c00067b2 <iso_read>
c001cbaa:	83 c4 10             	add    esp,0x10
c001cbad:	89 03                	mov    DWORD PTR [ebx],eax
c001cbaf:	09 d0                	or     eax,edx
c001cbb1:	0f 94 c0             	sete   al
c001cbb4:	0f b6 c0             	movzx  eax,al
c001cbb7:	eb 05                	jmp    c001cbbe <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cbb9:	b8 04 00 00 00       	mov    eax,0x4
c001cbbe:	83 c4 08             	add    esp,0x8
c001cbc1:	5b                   	pop    ebx
c001cbc2:	c3                   	ret    
c001cbc3:	90                   	nop

c001cbc4 <ISO9660::seek(void*, unsigned long long)>:
c001cbc4:	57                   	push   edi
c001cbc5:	b8 04 00 00 00       	mov    eax,0x4
c001cbca:	56                   	push   esi
c001cbcb:	51                   	push   ecx
c001cbcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbd0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cbd4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cbd8:	85 d2                	test   edx,edx
c001cbda:	74 26                	je     c001cc02 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cbdc:	89 d0                	mov    eax,edx
c001cbde:	b9 02 00 00 00       	mov    ecx,0x2
c001cbe3:	6a 00                	push   0x0
c001cbe5:	99                   	cdq    
c001cbe6:	f7 f9                	idiv   ecx
c001cbe8:	57                   	push   edi
c001cbe9:	56                   	push   esi
c001cbea:	83 e8 32             	sub    eax,0x32
c001cbed:	50                   	push   eax
c001cbee:	e8 d5 9c fe ff       	call   c00068c8 <iso_seek>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	31 f0                	xor    eax,esi
c001cbf8:	31 fa                	xor    edx,edi
c001cbfa:	09 d0                	or     eax,edx
c001cbfc:	0f 95 c0             	setne  al
c001cbff:	0f b6 c0             	movzx  eax,al
c001cc02:	5a                   	pop    edx
c001cc03:	5e                   	pop    esi
c001cc04:	5f                   	pop    edi
c001cc05:	c3                   	ret    

c001cc06 <ISO9660::tell(void*, unsigned long long*)>:
c001cc06:	53                   	push   ebx
c001cc07:	83 ec 08             	sub    esp,0x8
c001cc0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cc12:	85 c0                	test   eax,eax
c001cc14:	74 24                	je     c001cc3a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cc16:	85 db                	test   ebx,ebx
c001cc18:	74 20                	je     c001cc3a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cc1a:	b9 02 00 00 00       	mov    ecx,0x2
c001cc1f:	99                   	cdq    
c001cc20:	f7 f9                	idiv   ecx
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	83 e8 32             	sub    eax,0x32
c001cc28:	50                   	push   eax
c001cc29:	e8 1e 9d fe ff       	call   c000694c <iso_tell>
c001cc2e:	83 c4 10             	add    esp,0x10
c001cc31:	89 03                	mov    DWORD PTR [ebx],eax
c001cc33:	31 c0                	xor    eax,eax
c001cc35:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cc38:	eb 05                	jmp    c001cc3f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cc3a:	b8 04 00 00 00       	mov    eax,0x4
c001cc3f:	83 c4 08             	add    esp,0x8
c001cc42:	5b                   	pop    ebx
c001cc43:	c3                   	ret    

c001cc44 <ISO9660::stat(void*, unsigned long long*)>:
c001cc44:	56                   	push   esi
c001cc45:	53                   	push   ebx
c001cc46:	83 ec 10             	sub    esp,0x10
c001cc49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc4d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc51:	68 19 5e 02 c0       	push   0xc0025e19
c001cc56:	e8 f3 a2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cc5b:	83 c4 10             	add    esp,0x10
c001cc5e:	85 db                	test   ebx,ebx
c001cc60:	74 2a                	je     c001cc8c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cc62:	85 f6                	test   esi,esi
c001cc64:	74 26                	je     c001cc8c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cc66:	89 d8                	mov    eax,ebx
c001cc68:	b9 02 00 00 00       	mov    ecx,0x2
c001cc6d:	99                   	cdq    
c001cc6e:	83 ec 0c             	sub    esp,0xc
c001cc71:	f7 f9                	idiv   ecx
c001cc73:	83 e8 32             	sub    eax,0x32
c001cc76:	50                   	push   eax
c001cc77:	e8 01 9d fe ff       	call   c000697d <iso_total>
c001cc7c:	83 c4 10             	add    esp,0x10
c001cc7f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001cc86:	89 06                	mov    DWORD PTR [esi],eax
c001cc88:	31 c0                	xor    eax,eax
c001cc8a:	eb 05                	jmp    c001cc91 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001cc8c:	b8 04 00 00 00       	mov    eax,0x4
c001cc91:	5a                   	pop    edx
c001cc92:	5b                   	pop    ebx
c001cc93:	5e                   	pop    esi
c001cc94:	c3                   	ret    
c001cc95:	90                   	nop

c001cc96 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cc96:	55                   	push   ebp
c001cc97:	57                   	push   edi
c001cc98:	56                   	push   esi
c001cc99:	53                   	push   ebx
c001cc9a:	83 ec 18             	sub    esp,0x18
c001cc9d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cca1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cca5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cca9:	68 21 5e 02 c0       	push   0xc0025e21
c001ccae:	e8 9b a2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	85 ff                	test   edi,edi
c001ccb8:	0f 94 c0             	sete   al
c001ccbb:	85 f6                	test   esi,esi
c001ccbd:	0f 94 c2             	sete   dl
c001ccc0:	09 d0                	or     eax,edx
c001ccc2:	a8 01                	test   al,0x1
c001ccc4:	0f 85 dd 00 00 00    	jne    c001cda7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ccca:	85 db                	test   ebx,ebx
c001cccc:	0f 84 d5 00 00 00    	je     c001cda7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ccd2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ccd5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ccdb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cce2:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cce9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cceb:	38 0d 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,cl
c001ccf1:	74 1b                	je     c001cd0e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ccf3:	85 c0                	test   eax,eax
c001ccf5:	74 10                	je     c001cd07 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ccf7:	83 ec 0c             	sub    esp,0xc
c001ccfa:	68 c5 5d 02 c0       	push   0xc0025dc5
c001ccff:	e8 4a 31 ff ff       	call   c000fe4e <KePanic(char const*)>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	8a 03                	mov    al,BYTE PTR [ebx]
c001cd09:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001cd0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cd11:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001cd18:	85 c0                	test   eax,eax
c001cd1a:	74 09                	je     c001cd25 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001cd1c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cd23:	74 51                	je     c001cd76 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cd25:	83 ec 0c             	sub    esp,0xc
c001cd28:	68 29 5e 02 c0       	push   0xc0025e29
c001cd2d:	e8 1c a2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cd32:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001cd40:	74 21                	je     c001cd63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cd42:	83 ec 0c             	sub    esp,0xc
c001cd45:	68 49 5e 02 c0       	push   0xc0025e49
c001cd4a:	e8 ff a1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cd4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cd52:	83 c4 10             	add    esp,0x10
c001cd55:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001cd5c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cd63:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cd6a:	83 ec 0c             	sub    esp,0xc
c001cd6d:	50                   	push   eax
c001cd6e:	e8 d4 9e fe ff       	call   c0006c47 <init_percd>
c001cd73:	83 c4 10             	add    esp,0x10
c001cd76:	52                   	push   edx
c001cd77:	83 c3 03             	add    ebx,0x3
c001cd7a:	52                   	push   edx
c001cd7b:	6a 00                	push   0x0
c001cd7d:	53                   	push   ebx
c001cd7e:	e8 87 99 fe ff       	call   c000670a <iso_open>
c001cd83:	83 c4 10             	add    esp,0x10
c001cd86:	83 f8 ff             	cmp    eax,0xffffffff
c001cd89:	89 c5                	mov    ebp,eax
c001cd8b:	75 21                	jne    c001cdae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cd8d:	50                   	push   eax
c001cd8e:	50                   	push   eax
c001cd8f:	6a 01                	push   0x1
c001cd91:	53                   	push   ebx
c001cd92:	e8 73 99 fe ff       	call   c000670a <iso_open>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	ba 02 00 00 00       	mov    edx,0x2
c001cd9f:	40                   	inc    eax
c001cda0:	74 2b                	je     c001cdcd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cda2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cda5:	eb 24                	jmp    c001cdcb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cda7:	ba 04 00 00 00       	mov    edx,0x4
c001cdac:	eb 1f                	jmp    c001cdcd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cdae:	83 ec 0c             	sub    esp,0xc
c001cdb1:	50                   	push   eax
c001cdb2:	e8 c6 9b fe ff       	call   c000697d <iso_total>
c001cdb7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cdbe:	89 07                	mov    DWORD PTR [edi],eax
c001cdc0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdc3:	e8 cc 99 fe ff       	call   c0006794 <iso_close>
c001cdc8:	83 c4 10             	add    esp,0x10
c001cdcb:	31 d2                	xor    edx,edx
c001cdcd:	83 c4 0c             	add    esp,0xc
c001cdd0:	89 d0                	mov    eax,edx
c001cdd2:	5b                   	pop    ebx
c001cdd3:	5e                   	pop    esi
c001cdd4:	5f                   	pop    edi
c001cdd5:	5d                   	pop    ebp
c001cdd6:	c3                   	ret    
c001cdd7:	90                   	nop

c001cdd8 <ISO9660::close(void*)>:
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	b8 04 00 00 00       	mov    eax,0x4
c001cde0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cde4:	85 d2                	test   edx,edx
c001cde6:	74 1b                	je     c001ce03 <ISO9660::close(void*)+0x2b>
c001cde8:	89 d0                	mov    eax,edx
c001cdea:	b9 02 00 00 00       	mov    ecx,0x2
c001cdef:	99                   	cdq    
c001cdf0:	83 ec 0c             	sub    esp,0xc
c001cdf3:	f7 f9                	idiv   ecx
c001cdf5:	83 e8 32             	sub    eax,0x32
c001cdf8:	50                   	push   eax
c001cdf9:	e8 96 99 fe ff       	call   c0006794 <iso_close>
c001cdfe:	83 c4 10             	add    esp,0x10
c001ce01:	31 c0                	xor    eax,eax
c001ce03:	83 c4 0c             	add    esp,0xc
c001ce06:	c3                   	ret    
c001ce07:	90                   	nop

c001ce08 <ISO9660::openDir(char const*, void**)>:
c001ce08:	56                   	push   esi
c001ce09:	53                   	push   ebx
c001ce0a:	50                   	push   eax
c001ce0b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce0f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ce13:	85 db                	test   ebx,ebx
c001ce15:	0f 84 bd 00 00 00    	je     c001ced8 <ISO9660::openDir(char const*, void**)+0xd0>
c001ce1b:	85 f6                	test   esi,esi
c001ce1d:	0f 84 b5 00 00 00    	je     c001ced8 <ISO9660::openDir(char const*, void**)+0xd0>
c001ce23:	8a 13                	mov    dl,BYTE PTR [ebx]
c001ce25:	38 15 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,dl
c001ce2b:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001ce32:	74 1b                	je     c001ce4f <ISO9660::openDir(char const*, void**)+0x47>
c001ce34:	85 c0                	test   eax,eax
c001ce36:	74 10                	je     c001ce48 <ISO9660::openDir(char const*, void**)+0x40>
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	68 c5 5d 02 c0       	push   0xc0025dc5
c001ce40:	e8 09 30 ff ff       	call   c000fe4e <KePanic(char const*)>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	8a 03                	mov    al,BYTE PTR [ebx]
c001ce4a:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001ce4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ce52:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001ce59:	85 c0                	test   eax,eax
c001ce5b:	74 10                	je     c001ce6d <ISO9660::openDir(char const*, void**)+0x65>
c001ce5d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ce64:	74 1a                	je     c001ce80 <ISO9660::openDir(char const*, void**)+0x78>
c001ce66:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ce6d:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001ce74:	83 ec 0c             	sub    esp,0xc
c001ce77:	50                   	push   eax
c001ce78:	e8 ca 9d fe ff       	call   c0006c47 <init_percd>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	50                   	push   eax
c001ce81:	83 c3 03             	add    ebx,0x3
c001ce84:	50                   	push   eax
c001ce85:	6a 01                	push   0x1
c001ce87:	53                   	push   ebx
c001ce88:	e8 7d 98 fe ff       	call   c000670a <iso_open>
c001ce8d:	83 c4 10             	add    esp,0x10
c001ce90:	83 f8 ff             	cmp    eax,0xffffffff
c001ce93:	89 c3                	mov    ebx,eax
c001ce95:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001ce9a:	75 1c                	jne    c001ceb8 <ISO9660::openDir(char const*, void**)+0xb0>
c001ce9c:	53                   	push   ebx
c001ce9d:	53                   	push   ebx
c001ce9e:	68 6d 5e 02 c0       	push   0xc0025e6d
c001cea3:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cea9:	e8 f6 57 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001ceae:	83 c4 10             	add    esp,0x10
c001ceb1:	b8 01 00 00 00       	mov    eax,0x1
c001ceb6:	eb 25                	jmp    c001cedd <ISO9660::openDir(char const*, void**)+0xd5>
c001ceb8:	51                   	push   ecx
c001ceb9:	01 db                	add    ebx,ebx
c001cebb:	51                   	push   ecx
c001cebc:	83 c3 65             	add    ebx,0x65
c001cebf:	68 80 5e 02 c0       	push   0xc0025e80
c001cec4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001ceca:	e8 d5 57 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001cecf:	83 c4 10             	add    esp,0x10
c001ced2:	31 c0                	xor    eax,eax
c001ced4:	89 1e                	mov    DWORD PTR [esi],ebx
c001ced6:	eb 05                	jmp    c001cedd <ISO9660::openDir(char const*, void**)+0xd5>
c001ced8:	b8 04 00 00 00       	mov    eax,0x4
c001cedd:	5a                   	pop    edx
c001cede:	5b                   	pop    ebx
c001cedf:	5e                   	pop    esi
c001cee0:	c3                   	ret    
c001cee1:	90                   	nop

c001cee2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cee2:	55                   	push   ebp
c001cee3:	57                   	push   edi
c001cee4:	56                   	push   esi
c001cee5:	53                   	push   ebx
c001cee6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ceec:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001cef3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001cefa:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001cf01:	85 db                	test   ebx,ebx
c001cf03:	0f 84 e4 00 00 00    	je     c001cfed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cf09:	85 ed                	test   ebp,ebp
c001cf0b:	0f 84 dc 00 00 00    	je     c001cfed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	68 93 5e 02 c0       	push   0xc0025e93
c001cf19:	e8 30 a0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cf1e:	89 d8                	mov    eax,ebx
c001cf20:	b9 02 00 00 00       	mov    ecx,0x2
c001cf25:	99                   	cdq    
c001cf26:	f7 f9                	idiv   ecx
c001cf28:	83 e8 32             	sub    eax,0x32
c001cf2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf2e:	e8 9c 9a fe ff       	call   c00069cf <iso_readdir>
c001cf33:	83 c4 10             	add    esp,0x10
c001cf36:	85 c0                	test   eax,eax
c001cf38:	89 c3                	mov    ebx,eax
c001cf3a:	75 38                	jne    c001cf74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001cf3c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001cf41:	53                   	push   ebx
c001cf42:	53                   	push   ebx
c001cf43:	68 9e 5e 02 c0       	push   0xc0025e9e
c001cf48:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cf4e:	e8 51 57 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001cf53:	83 c4 0c             	add    esp,0xc
c001cf56:	68 10 01 00 00       	push   0x110
c001cf5b:	6a 00                	push   0x0
c001cf5d:	57                   	push   edi
c001cf5e:	e8 8d 35 fe ff       	call   c00004f0 <memset>
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	b8 01 00 00 00       	mov    eax,0x1
c001cf6b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001cf72:	eb 7e                	jmp    c001cff2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cf74:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001cf7a:	8d 70 08             	lea    esi,[eax+0x8]
c001cf7d:	83 ec 0c             	sub    esp,0xc
c001cf80:	56                   	push   esi
c001cf81:	e8 fa 35 fe ff       	call   c0000580 <strlen>
c001cf86:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cf8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001cf99:	75 0a                	jne    c001cfa5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001cf9b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001cf9e:	b8 02 00 00 00       	mov    eax,0x2
c001cfa3:	74 05                	je     c001cfaa <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001cfa5:	b8 01 00 00 00       	mov    eax,0x1
c001cfaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfae:	50                   	push   eax
c001cfaf:	50                   	push   eax
c001cfb0:	56                   	push   esi
c001cfb1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cfb5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cfb9:	50                   	push   eax
c001cfba:	e8 91 36 fe ff       	call   c0000650 <strcpy>
c001cfbf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cfc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cfc8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001cfcf:	5a                   	pop    edx
c001cfd0:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001cfd5:	59                   	pop    ecx
c001cfd6:	68 b1 5e 02 c0       	push   0xc0025eb1
c001cfdb:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001cfe1:	e8 be 56 ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	31 c0                	xor    eax,eax
c001cfeb:	eb 05                	jmp    c001cff2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cfed:	b8 04 00 00 00       	mov    eax,0x4
c001cff2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cff8:	5b                   	pop    ebx
c001cff9:	5e                   	pop    esi
c001cffa:	5f                   	pop    edi
c001cffb:	5d                   	pop    ebp
c001cffc:	c3                   	ret    

c001cffd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cffd:	57                   	push   edi
c001cffe:	56                   	push   esi
c001cfff:	53                   	push   ebx
c001d000:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d004:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d008:	39 35 24 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc24,esi
c001d00e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d012:	0f be cb             	movsx  ecx,bl
c001d015:	75 0b                	jne    c001d022 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d017:	0f be 05 84 71 02 c0 	movsx  eax,BYTE PTR ds:0xc0027184
c001d01e:	39 c8                	cmp    eax,ecx
c001d020:	74 47                	je     c001d069 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d022:	83 ec 0c             	sub    esp,0xc
c001d025:	31 d2                	xor    edx,edx
c001d027:	68 40 fc 02 c0       	push   0xc002fc40
c001d02c:	6a 01                	push   0x1
c001d02e:	52                   	push   edx
c001d02f:	56                   	push   esi
c001d030:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d037:	e8 ec d9 fe ff       	call   c000aa28 <LogicalDisk::read(unsigned long long, int, void*)>
c001d03c:	83 c4 20             	add    esp,0x20
c001d03f:	85 c0                	test   eax,eax
c001d041:	75 0e                	jne    c001d051 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d043:	89 35 24 fc 02 c0    	mov    DWORD PTR ds:0xc002fc24,esi
c001d049:	88 1d 84 71 02 c0    	mov    BYTE PTR ds:0xc0027184,bl
c001d04f:	eb 18                	jmp    c001d069 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d051:	50                   	push   eax
c001d052:	68 00 08 00 00       	push   0x800
c001d057:	6a 00                	push   0x0
c001d059:	57                   	push   edi
c001d05a:	e8 91 34 fe ff       	call   c00004f0 <memset>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	b8 01 00 00 00       	mov    eax,0x1
c001d067:	eb 0e                	jmp    c001d077 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d069:	be 40 fc 02 c0       	mov    esi,0xc002fc40
c001d06e:	b9 00 08 00 00       	mov    ecx,0x800
c001d073:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d075:	31 c0                	xor    eax,eax
c001d077:	5b                   	pop    ebx
c001d078:	5e                   	pop    esi
c001d079:	5f                   	pop    edi
c001d07a:	c3                   	ret    
c001d07b:	90                   	nop

c001d07c <ISO9660::tryMount(LogicalDisk*, int)>:
c001d07c:	53                   	push   ebx
c001d07d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d083:	c7 05 24 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc24,0xdeadbeef
c001d08d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d094:	8d 58 41             	lea    ebx,[eax+0x41]
c001d097:	0f be db             	movsx  ebx,bl
c001d09a:	53                   	push   ebx
c001d09b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d09f:	50                   	push   eax
c001d0a0:	6a 10                	push   0x10
c001d0a2:	e8 56 ff ff ff       	call   c001cffd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d0a7:	83 c4 10             	add    esp,0x10
c001d0aa:	31 d2                	xor    edx,edx
c001d0ac:	85 c0                	test   eax,eax
c001d0ae:	75 33                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0b0:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d0b5:	75 2c                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0b7:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d0bc:	75 25                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0be:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d0c3:	75 1e                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0c5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d0ca:	75 17                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0cc:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d0d1:	75 10                	jne    c001d0e3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d0d3:	83 ec 0c             	sub    esp,0xc
c001d0d6:	53                   	push   ebx
c001d0d7:	e8 6b 9b fe ff       	call   c0006c47 <init_percd>
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	40                   	inc    eax
c001d0e0:	0f 95 c2             	setne  dl
c001d0e3:	81 c4 08 08 00 00    	add    esp,0x808
c001d0e9:	88 d0                	mov    al,dl
c001d0eb:	5b                   	pop    ebx
c001d0ec:	c3                   	ret    
c001d0ed:	90                   	nop

c001d0ee <ISO9660::ISO9660()>:
c001d0ee:	83 ec 0c             	sub    esp,0xc
c001d0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f5:	83 ec 0c             	sub    esp,0xc
c001d0f8:	50                   	push   eax
c001d0f9:	e8 90 ac fe ff       	call   c0007d8e <Filesystem::Filesystem()>
c001d0fe:	83 c4 10             	add    esp,0x10
c001d101:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c001d106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d10a:	89 10                	mov    DWORD PTR [eax],edx
c001d10c:	e8 48 9c fe ff       	call   c0006d59 <fs_iso9660_init>
c001d111:	90                   	nop
c001d112:	83 c4 0c             	add    esp,0xc
c001d115:	c3                   	ret    

c001d116 <SoundCard::beginPlayback()>:
c001d116:	c7 44 24 04 30 5f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025f30
c001d11e:	e9 2b 2d ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001d123:	90                   	nop

c001d124 <SoundCard::stopPlayback()>:
c001d124:	c7 44 24 04 30 5f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025f30
c001d12c:	e9 1d 2d ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001d131:	90                   	nop

c001d132 <SoundCard::SoundCard(char const*)>:
c001d132:	83 ec 1c             	sub    esp,0x1c
c001d135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d139:	83 ec 08             	sub    esp,0x8
c001d13c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d140:	50                   	push   eax
c001d141:	e8 ee c9 fe ff       	call   c0009b34 <Device::Device(char const*)>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	ba 7c 5f 02 c0       	mov    edx,0xc0025f7c
c001d14e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d152:	89 10                	mov    DWORD PTR [eax],edx
c001d154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d158:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d15f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d163:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d16d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d171:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d17b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d17f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d18d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d197:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d19f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d1a4:	7f 1a                	jg     c001d1c0 <SoundCard::SoundCard(char const*)+0x8e>
c001d1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1ae:	83 c2 54             	add    edx,0x54
c001d1b1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d1b9:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d1be:	eb df                	jmp    c001d19f <SoundCard::SoundCard(char const*)+0x6d>
c001d1c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d1cb:	90                   	nop
c001d1cc:	83 c4 1c             	add    esp,0x1c
c001d1cf:	c3                   	ret    

c001d1d0 <SoundCard::~SoundCard()>:
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	ba 7c 5f 02 c0       	mov    edx,0xc0025f7c
c001d1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1dc:	89 10                	mov    DWORD PTR [eax],edx
c001d1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e2:	83 ec 0c             	sub    esp,0xc
c001d1e5:	50                   	push   eax
c001d1e6:	e8 e9 c6 fe ff       	call   c00098d4 <Device::~Device()>
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	90                   	nop
c001d1ef:	83 c4 0c             	add    esp,0xc
c001d1f2:	c3                   	ret    
c001d1f3:	90                   	nop

c001d1f4 <SoundCard::~SoundCard()>:
c001d1f4:	83 ec 0c             	sub    esp,0xc
c001d1f7:	83 ec 0c             	sub    esp,0xc
c001d1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1fe:	e8 cd ff ff ff       	call   c001d1d0 <SoundCard::~SoundCard()>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	83 ec 08             	sub    esp,0x8
c001d209:	68 e8 01 00 00       	push   0x1e8
c001d20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d212:	e8 54 00 ff ff       	call   c000d26b <operator delete(void*, unsigned long)>
c001d217:	83 c4 10             	add    esp,0x10
c001d21a:	83 c4 0c             	add    esp,0xc
c001d21d:	c3                   	ret    

c001d21e <SoundCard::configureRates(int, int, int)>:
c001d21e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d222:	31 c0                	xor    eax,eax
c001d224:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d22b:	75 20                	jne    c001d24d <SoundCard::configureRates(int, int, int)+0x2f>
c001d22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d231:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d23b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d245:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d24b:	b0 01                	mov    al,0x1
c001d24d:	c3                   	ret    

c001d24e <SoundCard::getSamples16(int, short*)>:
c001d24e:	55                   	push   ebp
c001d24f:	57                   	push   edi
c001d250:	31 ff                	xor    edi,edi
c001d252:	56                   	push   esi
c001d253:	53                   	push   ebx
c001d254:	31 db                	xor    ebx,ebx
c001d256:	83 ec 10             	sub    esp,0x10
c001d259:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d25d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d261:	8d 04 36             	lea    eax,[esi+esi*1]
c001d264:	50                   	push   eax
c001d265:	6a 00                	push   0x0
c001d267:	55                   	push   ebp
c001d268:	e8 83 32 fe ff       	call   c00004f0 <memset>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d274:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d27b:	85 c0                	test   eax,eax
c001d27d:	74 1a                	je     c001d299 <SoundCard::getSamples16(int, short*)+0x4b>
c001d27f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d283:	75 14                	jne    c001d299 <SoundCard::getSamples16(int, short*)+0x4b>
c001d285:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d289:	55                   	push   ebp
c001d28a:	56                   	push   esi
c001d28b:	50                   	push   eax
c001d28c:	e8 8f 03 00 00       	call   c001d620 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d291:	83 c4 10             	add    esp,0x10
c001d294:	39 c3                	cmp    ebx,eax
c001d296:	0f 4c d8             	cmovl  ebx,eax
c001d299:	47                   	inc    edi
c001d29a:	83 ff 20             	cmp    edi,0x20
c001d29d:	75 d1                	jne    c001d270 <SoundCard::getSamples16(int, short*)+0x22>
c001d29f:	83 c4 0c             	add    esp,0xc
c001d2a2:	89 d8                	mov    eax,ebx
c001d2a4:	5b                   	pop    ebx
c001d2a5:	5e                   	pop    esi
c001d2a6:	5f                   	pop    edi
c001d2a7:	5d                   	pop    ebp
c001d2a8:	c3                   	ret    
c001d2a9:	90                   	nop

c001d2aa <SoundCard::getSamples32(int, int*)>:
c001d2aa:	55                   	push   ebp
c001d2ab:	57                   	push   edi
c001d2ac:	31 ff                	xor    edi,edi
c001d2ae:	56                   	push   esi
c001d2af:	31 f6                	xor    esi,esi
c001d2b1:	53                   	push   ebx
c001d2b2:	83 ec 10             	sub    esp,0x10
c001d2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d2bd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d2c1:	c1 e0 02             	shl    eax,0x2
c001d2c4:	50                   	push   eax
c001d2c5:	6a 00                	push   0x0
c001d2c7:	55                   	push   ebp
c001d2c8:	e8 23 32 fe ff       	call   c00004f0 <memset>
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d2d7:	85 c0                	test   eax,eax
c001d2d9:	74 1a                	je     c001d2f5 <SoundCard::getSamples32(int, int*)+0x4b>
c001d2db:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d2df:	75 14                	jne    c001d2f5 <SoundCard::getSamples32(int, int*)+0x4b>
c001d2e1:	53                   	push   ebx
c001d2e2:	55                   	push   ebp
c001d2e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2e7:	50                   	push   eax
c001d2e8:	e8 03 04 00 00       	call   c001d6f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	39 c6                	cmp    esi,eax
c001d2f2:	0f 4c f0             	cmovl  esi,eax
c001d2f5:	47                   	inc    edi
c001d2f6:	83 ff 20             	cmp    edi,0x20
c001d2f9:	75 d5                	jne    c001d2d0 <SoundCard::getSamples32(int, int*)+0x26>
c001d2fb:	85 f6                	test   esi,esi
c001d2fd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d304:	75 0f                	jne    c001d315 <SoundCard::getSamples32(int, int*)+0x6b>
c001d306:	85 c0                	test   eax,eax
c001d308:	74 1b                	je     c001d325 <SoundCard::getSamples32(int, int*)+0x7b>
c001d30a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d30c:	83 ec 0c             	sub    esp,0xc
c001d30f:	53                   	push   ebx
c001d310:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d313:	eb 0d                	jmp    c001d322 <SoundCard::getSamples32(int, int*)+0x78>
c001d315:	85 c0                	test   eax,eax
c001d317:	75 0c                	jne    c001d325 <SoundCard::getSamples32(int, int*)+0x7b>
c001d319:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	53                   	push   ebx
c001d31f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d322:	83 c4 10             	add    esp,0x10
c001d325:	83 c4 0c             	add    esp,0xc
c001d328:	89 f0                	mov    eax,esi
c001d32a:	5b                   	pop    ebx
c001d32b:	5e                   	pop    esi
c001d32c:	5f                   	pop    edi
c001d32d:	5d                   	pop    ebp
c001d32e:	c3                   	ret    
c001d32f:	90                   	nop

c001d330 <SoundCard::addChannel(SoundPort*)>:
c001d330:	83 ec 0c             	sub    esp,0xc
c001d333:	31 c0                	xor    eax,eax
c001d335:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d339:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d341:	74 1b                	je     c001d35e <SoundCard::addChannel(SoundPort*)+0x2e>
c001d343:	40                   	inc    eax
c001d344:	83 f8 20             	cmp    eax,0x20
c001d347:	75 f0                	jne    c001d339 <SoundCard::addChannel(SoundPort*)+0x9>
c001d349:	83 ec 0c             	sub    esp,0xc
c001d34c:	68 55 5f 02 c0       	push   0xc0025f55
c001d351:	e8 f8 2a ff ff       	call   c000fe4e <KePanic(char const*)>
c001d356:	83 c4 10             	add    esp,0x10
c001d359:	83 c8 ff             	or     eax,0xffffffff
c001d35c:	eb 0b                	jmp    c001d369 <SoundCard::addChannel(SoundPort*)+0x39>
c001d35e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d362:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d369:	83 c4 0c             	add    esp,0xc
c001d36c:	c3                   	ret    
c001d36d:	90                   	nop

c001d36e <SoundCard::removeChannel(int)>:
c001d36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d376:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d381:	c3                   	ret    
c001d382:	66 90                	xchg   ax,ax

c001d384 <SoundPort::SoundPort(int, int, int, int)>:
c001d384:	83 ec 0c             	sub    esp,0xc
c001d387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d396:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3a2:	89 10                	mov    DWORD PTR [eax],edx
c001d3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d3ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d3ba:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d3bf:	75 13                	jne    c001d3d4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3c7:	05 a0 0f 00 00       	add    eax,0xfa0
c001d3cc:	d1 e0                	shl    eax,1
c001d3ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3d2:	66 90                	xchg   ax,ax
c001d3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d3f1:	c1 e0 02             	shl    eax,0x2
c001d3f4:	83 ec 0c             	sub    esp,0xc
c001d3f7:	50                   	push   eax
c001d3f8:	e8 0b 27 ff ff       	call   c000fb08 <malloc>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	89 c2                	mov    edx,eax
c001d402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d406:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d409:	90                   	nop
c001d40a:	83 c4 0c             	add    esp,0xc
c001d40d:	c3                   	ret    
c001d40e:	66 90                	xchg   ax,ax

c001d410 <SoundPort::~SoundPort()>:
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d417:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d41a:	85 c0                	test   eax,eax
c001d41c:	74 1e                	je     c001d43c <SoundPort::~SoundPort()+0x2c>
c001d41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d422:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	50                   	push   eax
c001d429:	e8 ea 26 ff ff       	call   c000fb18 <free>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d435:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d43c:	90                   	nop
c001d43d:	83 c4 0c             	add    esp,0xc
c001d440:	c3                   	ret    
c001d441:	90                   	nop
c001d442:	66 90                	xchg   ax,ax

c001d444 <SoundPort::unpause()>:
c001d444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d448:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d44c:	c3                   	ret    
c001d44d:	90                   	nop
c001d44e:	66 90                	xchg   ax,ax

c001d450 <SoundPort::pause()>:
c001d450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d454:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d458:	c3                   	ret    
c001d459:	90                   	nop
c001d45a:	66 90                	xchg   ax,ax

c001d45c <SoundPort::getBufferUsed()>:
c001d45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d460:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d463:	c3                   	ret    

c001d464 <SoundPort::getBufferSize()>:
c001d464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d468:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d46b:	c3                   	ret    

c001d46c <SoundPort::buffer8(signed char*, int)>:
c001d46c:	55                   	push   ebp
c001d46d:	57                   	push   edi
c001d46e:	56                   	push   esi
c001d46f:	53                   	push   ebx
c001d470:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d474:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d478:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d47b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d47e:	74 70                	je     c001d4f0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d480:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d484:	85 c9                	test   ecx,ecx
c001d486:	7e 68                	jle    c001d4f0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d488:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d48c:	8d 48 01             	lea    ecx,[eax+0x1]
c001d48f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d492:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d495:	89 f1                	mov    ecx,esi
c001d497:	c1 e1 18             	shl    ecx,0x18
c001d49a:	29 f1                	sub    ecx,esi
c001d49c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d49f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d4a2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d4a5:	74 51                	je     c001d4f8 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d4a7:	31 ff                	xor    edi,edi
c001d4a9:	eb 25                	jmp    c001d4d0 <SoundPort::buffer8(signed char*, int)+0x64>
c001d4ab:	90                   	nop
c001d4ac:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d4b1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d4b4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d4b7:	89 f3                	mov    ebx,esi
c001d4b9:	c1 e3 18             	shl    ebx,0x18
c001d4bc:	29 f3                	sub    ebx,esi
c001d4be:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d4c1:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d4c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d4c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d4ca:	74 1c                	je     c001d4e8 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d4cc:	89 c7                	mov    edi,eax
c001d4ce:	66 90                	xchg   ax,ax
c001d4d0:	8d 47 01             	lea    eax,[edi+0x1]
c001d4d3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d4d7:	75 d3                	jne    c001d4ac <SoundPort::buffer8(signed char*, int)+0x40>
c001d4d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d4e0:	5b                   	pop    ebx
c001d4e1:	5e                   	pop    esi
c001d4e2:	5f                   	pop    edi
c001d4e3:	5d                   	pop    ebp
c001d4e4:	c3                   	ret    
c001d4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d4e8:	5b                   	pop    ebx
c001d4e9:	8d 47 02             	lea    eax,[edi+0x2]
c001d4ec:	5e                   	pop    esi
c001d4ed:	5f                   	pop    edi
c001d4ee:	5d                   	pop    ebp
c001d4ef:	c3                   	ret    
c001d4f0:	5b                   	pop    ebx
c001d4f1:	31 c0                	xor    eax,eax
c001d4f3:	5e                   	pop    esi
c001d4f4:	5f                   	pop    edi
c001d4f5:	5d                   	pop    ebp
c001d4f6:	c3                   	ret    
c001d4f7:	90                   	nop
c001d4f8:	b8 01 00 00 00       	mov    eax,0x1
c001d4fd:	eb e1                	jmp    c001d4e0 <SoundPort::buffer8(signed char*, int)+0x74>
c001d4ff:	90                   	nop

c001d500 <SoundPort::buffer16(short*, int)>:
c001d500:	55                   	push   ebp
c001d501:	57                   	push   edi
c001d502:	56                   	push   esi
c001d503:	53                   	push   ebx
c001d504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d508:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d50c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d50f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d512:	74 70                	je     c001d584 <SoundPort::buffer16(short*, int)+0x84>
c001d514:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d518:	85 c9                	test   ecx,ecx
c001d51a:	7e 68                	jle    c001d584 <SoundPort::buffer16(short*, int)+0x84>
c001d51c:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d520:	8d 48 01             	lea    ecx,[eax+0x1]
c001d523:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d526:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d529:	89 f1                	mov    ecx,esi
c001d52b:	c1 e1 10             	shl    ecx,0x10
c001d52e:	29 f1                	sub    ecx,esi
c001d530:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d533:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d536:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d539:	74 51                	je     c001d58c <SoundPort::buffer16(short*, int)+0x8c>
c001d53b:	31 ff                	xor    edi,edi
c001d53d:	eb 25                	jmp    c001d564 <SoundPort::buffer16(short*, int)+0x64>
c001d53f:	90                   	nop
c001d540:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d545:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d548:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d54b:	89 f3                	mov    ebx,esi
c001d54d:	c1 e3 10             	shl    ebx,0x10
c001d550:	29 f3                	sub    ebx,esi
c001d552:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d555:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d558:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d55b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d55e:	74 1c                	je     c001d57c <SoundPort::buffer16(short*, int)+0x7c>
c001d560:	89 c7                	mov    edi,eax
c001d562:	66 90                	xchg   ax,ax
c001d564:	8d 47 01             	lea    eax,[edi+0x1]
c001d567:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d56b:	75 d3                	jne    c001d540 <SoundPort::buffer16(short*, int)+0x40>
c001d56d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d571:	8d 76 00             	lea    esi,[esi+0x0]
c001d574:	5b                   	pop    ebx
c001d575:	5e                   	pop    esi
c001d576:	5f                   	pop    edi
c001d577:	5d                   	pop    ebp
c001d578:	c3                   	ret    
c001d579:	8d 76 00             	lea    esi,[esi+0x0]
c001d57c:	5b                   	pop    ebx
c001d57d:	8d 47 02             	lea    eax,[edi+0x2]
c001d580:	5e                   	pop    esi
c001d581:	5f                   	pop    edi
c001d582:	5d                   	pop    ebp
c001d583:	c3                   	ret    
c001d584:	5b                   	pop    ebx
c001d585:	31 c0                	xor    eax,eax
c001d587:	5e                   	pop    esi
c001d588:	5f                   	pop    edi
c001d589:	5d                   	pop    ebp
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop
c001d58c:	b8 01 00 00 00       	mov    eax,0x1
c001d591:	eb e1                	jmp    c001d574 <SoundPort::buffer16(short*, int)+0x74>
c001d593:	90                   	nop

c001d594 <SoundPort::buffer32(int*, int)>:
c001d594:	55                   	push   ebp
c001d595:	57                   	push   edi
c001d596:	56                   	push   esi
c001d597:	53                   	push   ebx
c001d598:	83 ec 04             	sub    esp,0x4
c001d59b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d5a7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d5aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d5ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5b0:	74 5a                	je     c001d60c <SoundPort::buffer32(int*, int)+0x78>
c001d5b2:	85 c0                	test   eax,eax
c001d5b4:	7e 56                	jle    c001d60c <SoundPort::buffer32(int*, int)+0x78>
c001d5b6:	8d 71 01             	lea    esi,[ecx+0x1]
c001d5b9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d5bc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d5bf:	8b 37                	mov    esi,DWORD PTR [edi]
c001d5c1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d5c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d5c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d5ca:	74 4c                	je     c001d618 <SoundPort::buffer32(int*, int)+0x84>
c001d5cc:	31 f6                	xor    esi,esi
c001d5ce:	eb 1c                	jmp    c001d5ec <SoundPort::buffer32(int*, int)+0x58>
c001d5d0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d5d3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d5d6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d5d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d5dc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d5e0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d5e3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d5e6:	74 18                	je     c001d600 <SoundPort::buffer32(int*, int)+0x6c>
c001d5e8:	89 de                	mov    esi,ebx
c001d5ea:	66 90                	xchg   ax,ax
c001d5ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d5ef:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d5f2:	75 dc                	jne    c001d5d0 <SoundPort::buffer32(int*, int)+0x3c>
c001d5f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d5f7:	90                   	nop
c001d5f8:	83 c4 04             	add    esp,0x4
c001d5fb:	5b                   	pop    ebx
c001d5fc:	5e                   	pop    esi
c001d5fd:	5f                   	pop    edi
c001d5fe:	5d                   	pop    ebp
c001d5ff:	c3                   	ret    
c001d600:	8d 46 02             	lea    eax,[esi+0x2]
c001d603:	83 c4 04             	add    esp,0x4
c001d606:	5b                   	pop    ebx
c001d607:	5e                   	pop    esi
c001d608:	5f                   	pop    edi
c001d609:	5d                   	pop    ebp
c001d60a:	c3                   	ret    
c001d60b:	90                   	nop
c001d60c:	83 c4 04             	add    esp,0x4
c001d60f:	31 c0                	xor    eax,eax
c001d611:	5b                   	pop    ebx
c001d612:	5e                   	pop    esi
c001d613:	5f                   	pop    edi
c001d614:	5d                   	pop    ebp
c001d615:	c3                   	ret    
c001d616:	66 90                	xchg   ax,ax
c001d618:	b8 01 00 00 00       	mov    eax,0x1
c001d61d:	eb d9                	jmp    c001d5f8 <SoundPort::buffer32(int*, int)+0x64>
c001d61f:	90                   	nop

c001d620 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d620:	55                   	push   ebp
c001d621:	57                   	push   edi
c001d622:	56                   	push   esi
c001d623:	53                   	push   ebx
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d62b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d62f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d633:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d637:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d63d:	39 03                	cmp    DWORD PTR [ebx],eax
c001d63f:	74 13                	je     c001d654 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001d641:	83 ec 0c             	sub    esp,0xc
c001d644:	68 a8 5f 02 c0       	push   0xc0025fa8
c001d649:	e8 00 28 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	8d 76 00             	lea    esi,[esi+0x0]
c001d654:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d65a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d65d:	74 11                	je     c001d670 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	68 e7 5f 02 c0       	push   0xc0025fe7
c001d667:	e8 e2 27 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d66c:	83 c4 10             	add    esp,0x10
c001d66f:	90                   	nop
c001d670:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d676:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d679:	74 11                	je     c001d68c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001d67b:	83 ec 0c             	sub    esp,0xc
c001d67e:	68 e7 5f 02 c0       	push   0xc0025fe7
c001d683:	e8 c6 27 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d688:	83 c4 10             	add    esp,0x10
c001d68b:	90                   	nop
c001d68c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001d68f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001d693:	85 f6                	test   esi,esi
c001d695:	7e 2d                	jle    c001d6c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d697:	31 c0                	xor    eax,eax
c001d699:	8d 76 00             	lea    esi,[esi+0x0]
c001d69c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d69f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001d6a2:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001d6a8:	85 c9                	test   ecx,ecx
c001d6aa:	0f 49 d1             	cmovns edx,ecx
c001d6ad:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001d6b1:	c1 fa 0f             	sar    edx,0xf
c001d6b4:	01 d1                	add    ecx,edx
c001d6b6:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001d6ba:	83 c0 01             	add    eax,0x1
c001d6bd:	39 f0                	cmp    eax,esi
c001d6bf:	75 db                	jne    c001d69c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001d6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d6c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d6c7:	83 ec 04             	sub    esp,0x4
c001d6ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d6cd:	29 f0                	sub    eax,esi
c001d6cf:	c1 e0 02             	shl    eax,0x2
c001d6d2:	50                   	push   eax
c001d6d3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d6d6:	50                   	push   eax
c001d6d7:	52                   	push   edx
c001d6d8:	e8 f3 2c fe ff       	call   c00003d0 <memmove>
c001d6dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d6e0:	29 f0                	sub    eax,esi
c001d6e2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d6e5:	83 c4 1c             	add    esp,0x1c
c001d6e8:	89 f0                	mov    eax,esi
c001d6ea:	5b                   	pop    ebx
c001d6eb:	5e                   	pop    esi
c001d6ec:	5f                   	pop    edi
c001d6ed:	5d                   	pop    ebp
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d6f0:	55                   	push   ebp
c001d6f1:	57                   	push   edi
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	83 ec 0c             	sub    esp,0xc
c001d6f7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d6fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d6ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d703:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d707:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d70d:	39 03                	cmp    DWORD PTR [ebx],eax
c001d70f:	74 13                	je     c001d724 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001d711:	83 ec 0c             	sub    esp,0xc
c001d714:	68 c8 5f 02 c0       	push   0xc0025fc8
c001d719:	e8 30 27 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d71e:	83 c4 10             	add    esp,0x10
c001d721:	8d 76 00             	lea    esi,[esi+0x0]
c001d724:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d72a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d72d:	74 11                	je     c001d740 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001d72f:	83 ec 0c             	sub    esp,0xc
c001d732:	68 03 60 02 c0       	push   0xc0026003
c001d737:	e8 12 27 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d73c:	83 c4 10             	add    esp,0x10
c001d73f:	90                   	nop
c001d740:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d746:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d749:	74 11                	je     c001d75c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001d74b:	83 ec 0c             	sub    esp,0xc
c001d74e:	68 03 60 02 c0       	push   0xc0026003
c001d753:	e8 f6 26 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d758:	83 c4 10             	add    esp,0x10
c001d75b:	90                   	nop
c001d75c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001d75f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001d763:	85 ff                	test   edi,edi
c001d765:	7e 21                	jle    c001d788 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001d767:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d76e:	31 c0                	xor    eax,eax
c001d770:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d773:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001d776:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d779:	01 d5                	add    ebp,edx
c001d77b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001d77e:	83 c0 04             	add    eax,0x4
c001d781:	39 c1                	cmp    ecx,eax
c001d783:	75 eb                	jne    c001d770 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001d785:	8d 76 00             	lea    esi,[esi+0x0]
c001d788:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d78b:	83 ec 04             	sub    esp,0x4
c001d78e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d791:	29 f8                	sub    eax,edi
c001d793:	c1 e0 02             	shl    eax,0x2
c001d796:	50                   	push   eax
c001d797:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d79a:	50                   	push   eax
c001d79b:	52                   	push   edx
c001d79c:	e8 2f 2c fe ff       	call   c00003d0 <memmove>
c001d7a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d7a4:	29 f8                	sub    eax,edi
c001d7a6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d7a9:	83 c4 1c             	add    esp,0x1c
c001d7ac:	89 f8                	mov    eax,edi
c001d7ae:	5b                   	pop    ebx
c001d7af:	5e                   	pop    esi
c001d7b0:	5f                   	pop    edi
c001d7b1:	5d                   	pop    ebp
c001d7b2:	c3                   	ret    
c001d7b3:	90                   	nop

c001d7b4 <PCI::open(int, int, void*)>:
c001d7b4:	83 ec 18             	sub    esp,0x18
c001d7b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d7c5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d7c7:	50                   	push   eax
c001d7c8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d7cb:	31 c0                	xor    eax,eax
c001d7cd:	83 c4 1c             	add    esp,0x1c
c001d7d0:	c3                   	ret    
c001d7d1:	90                   	nop

c001d7d2 <PCI::close(int, int, void*)>:
c001d7d2:	31 c0                	xor    eax,eax
c001d7d4:	c3                   	ret    
c001d7d5:	90                   	nop

c001d7d6 <PCI::PCI()>:
c001d7d6:	83 ec 0c             	sub    esp,0xc
c001d7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7dd:	83 ec 08             	sub    esp,0x8
c001d7e0:	68 1f 60 02 c0       	push   0xc002601f
c001d7e5:	50                   	push   eax
c001d7e6:	e8 55 b1 fe ff       	call   c0008940 <Bus::Bus(char const*)>
c001d7eb:	83 c4 10             	add    esp,0x10
c001d7ee:	ba 2c 61 02 c0       	mov    edx,0xc002612c
c001d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f7:	89 10                	mov    DWORD PTR [eax],edx
c001d7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7fd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d80b:	a3 40 04 03 c0       	mov    ds:0xc0030440,eax
c001d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d814:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d81a:	0f b6 d0             	movzx  edx,al
c001d81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d821:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d832:	0f b6 d0             	movzx  edx,al
c001d835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d839:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d842:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d848:	8d 50 01             	lea    edx,[eax+0x1]
c001d84b:	88 d1                	mov    cl,dl
c001d84d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d851:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d857:	0f b6 d0             	movzx  edx,al
c001d85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d862:	83 c9 c0             	or     ecx,0xffffffc0
c001d865:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d869:	90                   	nop
c001d86a:	83 c4 0c             	add    esp,0xc
c001d86d:	c3                   	ret    

c001d86e <PCI::readBAR8(unsigned int, int)>:
c001d86e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d876:	f6 c2 01             	test   dl,0x1
c001d879:	74 07                	je     c001d882 <PCI::readBAR8(unsigned int, int)+0x14>
c001d87b:	83 e2 fc             	and    edx,0xfffffffc
c001d87e:	01 c2                	add    edx,eax
c001d880:	ec                   	in     al,dx
c001d881:	c3                   	ret    
c001d882:	83 e2 f0             	and    edx,0xfffffff0
c001d885:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d888:	c3                   	ret    
c001d889:	90                   	nop

c001d88a <PCI::readBAR16(unsigned int, int)>:
c001d88a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d88e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d892:	f6 c2 01             	test   dl,0x1
c001d895:	74 08                	je     c001d89f <PCI::readBAR16(unsigned int, int)+0x15>
c001d897:	83 e2 fc             	and    edx,0xfffffffc
c001d89a:	01 c2                	add    edx,eax
c001d89c:	66 ed                	in     ax,dx
c001d89e:	c3                   	ret    
c001d89f:	83 e2 f0             	and    edx,0xfffffff0
c001d8a2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d8a6:	c3                   	ret    
c001d8a7:	90                   	nop

c001d8a8 <PCI::readBAR32(unsigned int, int)>:
c001d8a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8b0:	f6 c2 01             	test   dl,0x1
c001d8b3:	74 07                	je     c001d8bc <PCI::readBAR32(unsigned int, int)+0x14>
c001d8b5:	83 e2 fc             	and    edx,0xfffffffc
c001d8b8:	01 c2                	add    edx,eax
c001d8ba:	ed                   	in     eax,dx
c001d8bb:	c3                   	ret    
c001d8bc:	83 e2 f0             	and    edx,0xfffffff0
c001d8bf:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d8c2:	c3                   	ret    
c001d8c3:	90                   	nop

c001d8c4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d8c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8d0:	f6 c2 01             	test   dl,0x1
c001d8d3:	74 07                	je     c001d8dc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d8d5:	83 e2 fc             	and    edx,0xfffffffc
c001d8d8:	01 ca                	add    edx,ecx
c001d8da:	ee                   	out    dx,al
c001d8db:	c3                   	ret    
c001d8dc:	83 e2 f0             	and    edx,0xfffffff0
c001d8df:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d8e2:	c3                   	ret    
c001d8e3:	90                   	nop

c001d8e4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8f0:	f6 c2 01             	test   dl,0x1
c001d8f3:	74 08                	je     c001d8fd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d8f5:	83 e2 fc             	and    edx,0xfffffffc
c001d8f8:	01 ca                	add    edx,ecx
c001d8fa:	66 ef                	out    dx,ax
c001d8fc:	c3                   	ret    
c001d8fd:	83 e2 f0             	and    edx,0xfffffff0
c001d900:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d904:	c3                   	ret    
c001d905:	90                   	nop

c001d906 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d90a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d90e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d912:	f6 c2 01             	test   dl,0x1
c001d915:	74 07                	je     c001d91e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d917:	83 e2 fc             	and    edx,0xfffffffc
c001d91a:	01 ca                	add    edx,ecx
c001d91c:	ef                   	out    dx,eax
c001d91d:	c3                   	ret    
c001d91e:	83 e2 f0             	and    edx,0xfffffff0
c001d921:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d924:	c3                   	ret    
c001d925:	90                   	nop

c001d926 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d926:	55                   	push   ebp
c001d927:	57                   	push   edi
c001d928:	56                   	push   esi
c001d929:	53                   	push   ebx
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d932:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d936:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d93a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d93e:	83 fe 07             	cmp    esi,0x7
c001d941:	76 10                	jbe    c001d953 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d943:	83 ec 0c             	sub    esp,0xc
c001d946:	68 27 60 02 c0       	push   0xc0026027
c001d94b:	e8 fe 24 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	0f b6 db             	movzx  ebx,bl
c001d956:	83 fb 0f             	cmp    ebx,0xf
c001d959:	76 10                	jbe    c001d96b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d95b:	83 ec 0c             	sub    esp,0xc
c001d95e:	68 57 60 02 c0       	push   0xc0026057
c001d963:	e8 e6 24 ff ff       	call   c000fe4e <KePanic(char const*)>
c001d968:	83 c4 10             	add    esp,0x10
c001d96b:	8d 04 36             	lea    eax,[esi+esi*1]
c001d96e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d973:	83 c8 f0             	or     eax,0xfffffff0
c001d976:	ee                   	out    dx,al
c001d977:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d97c:	89 e8                	mov    eax,ebp
c001d97e:	ee                   	out    dx,al
c001d97f:	89 f9                	mov    ecx,edi
c001d981:	89 d8                	mov    eax,ebx
c001d983:	0f b6 d9             	movzx  ebx,cl
c001d986:	83 c4 0c             	add    esp,0xc
c001d989:	c1 e0 08             	shl    eax,0x8
c001d98c:	83 e3 fc             	and    ebx,0xfffffffc
c001d98f:	09 d8                	or     eax,ebx
c001d991:	5b                   	pop    ebx
c001d992:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d997:	5e                   	pop    esi
c001d998:	5f                   	pop    edi
c001d999:	5d                   	pop    ebp
c001d99a:	c3                   	ret    
c001d99b:	90                   	nop

c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d99c:	57                   	push   edi
c001d99d:	56                   	push   esi
c001d99e:	53                   	push   ebx
c001d99f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9af:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d9b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9b9:	83 ff 01             	cmp    edi,0x1
c001d9bc:	75 3f                	jne    c001d9fd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d9be:	89 de                	mov    esi,ebx
c001d9c0:	0f b6 c0             	movzx  eax,al
c001d9c3:	c1 e0 10             	shl    eax,0x10
c001d9c6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d9cc:	0f b6 c9             	movzx  ecx,cl
c001d9cf:	09 f0                	or     eax,esi
c001d9d1:	c1 e1 08             	shl    ecx,0x8
c001d9d4:	0f b6 d2             	movzx  edx,dl
c001d9d7:	c1 e2 0b             	shl    edx,0xb
c001d9da:	09 c8                	or     eax,ecx
c001d9dc:	09 d0                	or     eax,edx
c001d9de:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9e3:	0d 00 00 00 80       	or     eax,0x80000000
c001d9e8:	ef                   	out    dx,eax
c001d9e9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9ee:	ed                   	in     eax,dx
c001d9ef:	83 e3 02             	and    ebx,0x2
c001d9f2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d9f9:	d3 e8                	shr    eax,cl
c001d9fb:	eb 44                	jmp    c001da41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d9fd:	83 ff 02             	cmp    edi,0x2
c001da00:	75 2d                	jne    c001da2f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001da02:	83 ec 0c             	sub    esp,0xc
c001da05:	0f b6 fb             	movzx  edi,bl
c001da08:	57                   	push   edi
c001da09:	0f b6 c9             	movzx  ecx,cl
c001da0c:	51                   	push   ecx
c001da0d:	0f b6 d2             	movzx  edx,dl
c001da10:	52                   	push   edx
c001da11:	0f b6 c0             	movzx  eax,al
c001da14:	50                   	push   eax
c001da15:	56                   	push   esi
c001da16:	e8 0b ff ff ff       	call   c001d926 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da1b:	89 c2                	mov    edx,eax
c001da1d:	ed                   	in     eax,dx
c001da1e:	83 e3 02             	and    ebx,0x2
c001da21:	83 c4 20             	add    esp,0x20
c001da24:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001da2b:	d3 e8                	shr    eax,cl
c001da2d:	eb 12                	jmp    c001da41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	68 87 60 02 c0       	push   0xc0026087
c001da37:	e8 12 24 ff ff       	call   c000fe4e <KePanic(char const*)>
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	31 c0                	xor    eax,eax
c001da41:	5b                   	pop    ebx
c001da42:	5e                   	pop    esi
c001da43:	5f                   	pop    edi
c001da44:	c3                   	ret    
c001da45:	90                   	nop

c001da46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001da46:	83 ec 18             	sub    esp,0x18
c001da49:	6a 00                	push   0x0
c001da4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da50:	50                   	push   eax
c001da51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da56:	50                   	push   eax
c001da57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da5c:	50                   	push   eax
c001da5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da61:	e8 36 ff ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da66:	83 c4 2c             	add    esp,0x2c
c001da69:	c3                   	ret    

c001da6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001da6a:	83 ec 18             	sub    esp,0x18
c001da6d:	6a 0e                	push   0xe
c001da6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da74:	50                   	push   eax
c001da75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da7a:	50                   	push   eax
c001da7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da80:	50                   	push   eax
c001da81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da85:	e8 12 ff ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da8a:	83 c4 2c             	add    esp,0x2c
c001da8d:	0f b6 c0             	movzx  eax,al
c001da90:	c3                   	ret    
c001da91:	90                   	nop

c001da92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001da92:	55                   	push   ebp
c001da93:	57                   	push   edi
c001da94:	56                   	push   esi
c001da95:	53                   	push   ebx
c001da96:	83 ec 18             	sub    esp,0x18
c001da99:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001da9e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001daa3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001daa8:	6a 0a                	push   0xa
c001daaa:	56                   	push   esi
c001daab:	55                   	push   ebp
c001daac:	57                   	push   edi
c001daad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dab1:	e8 e6 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dab6:	83 c4 14             	add    esp,0x14
c001dab9:	6a 0a                	push   0xa
c001dabb:	56                   	push   esi
c001dabc:	55                   	push   ebp
c001dabd:	57                   	push   edi
c001dabe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dac2:	89 c3                	mov    ebx,eax
c001dac4:	0f b6 db             	movzx  ebx,bl
c001dac7:	e8 d0 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dacc:	83 c4 2c             	add    esp,0x2c
c001dacf:	25 00 ff 00 00       	and    eax,0xff00
c001dad4:	09 d8                	or     eax,ebx
c001dad6:	5b                   	pop    ebx
c001dad7:	5e                   	pop    esi
c001dad8:	5f                   	pop    edi
c001dad9:	5d                   	pop    ebp
c001dada:	c3                   	ret    
c001dadb:	90                   	nop

c001dadc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dadc:	83 ec 18             	sub    esp,0x18
c001dadf:	6a 08                	push   0x8
c001dae1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dae6:	50                   	push   eax
c001dae7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001daec:	50                   	push   eax
c001daed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001daf2:	50                   	push   eax
c001daf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daf7:	e8 a0 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dafc:	83 c4 2c             	add    esp,0x2c
c001daff:	0f b6 c4             	movzx  eax,ah
c001db02:	c3                   	ret    
c001db03:	90                   	nop

c001db04 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001db04:	83 ec 18             	sub    esp,0x18
c001db07:	6a 08                	push   0x8
c001db09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db0e:	50                   	push   eax
c001db0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db14:	50                   	push   eax
c001db15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db1a:	50                   	push   eax
c001db1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db1f:	e8 78 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db24:	83 c4 2c             	add    esp,0x2c
c001db27:	c3                   	ret    

c001db28 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001db28:	83 ec 18             	sub    esp,0x18
c001db2b:	6a 3c                	push   0x3c
c001db2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db32:	50                   	push   eax
c001db33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db38:	50                   	push   eax
c001db39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db3e:	50                   	push   eax
c001db3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db43:	e8 54 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db48:	83 c4 2c             	add    esp,0x2c
c001db4b:	c3                   	ret    

c001db4c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001db4c:	83 ec 18             	sub    esp,0x18
c001db4f:	6a 18                	push   0x18
c001db51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db56:	50                   	push   eax
c001db57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db5c:	50                   	push   eax
c001db5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001db62:	50                   	push   eax
c001db63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db67:	e8 30 fe ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db6c:	83 c4 2c             	add    esp,0x2c
c001db6f:	0f b6 c4             	movzx  eax,ah
c001db72:	c3                   	ret    
c001db73:	90                   	nop

c001db74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db74:	55                   	push   ebp
c001db75:	57                   	push   edi
c001db76:	56                   	push   esi
c001db77:	53                   	push   ebx
c001db78:	83 ec 28             	sub    esp,0x28
c001db7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001db7f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001db84:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001db89:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001db8e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001db95:	8d 43 12             	lea    eax,[ebx+0x12]
c001db98:	83 c3 10             	add    ebx,0x10
c001db9b:	0f b6 c0             	movzx  eax,al
c001db9e:	0f b6 db             	movzx  ebx,bl
c001dba1:	50                   	push   eax
c001dba2:	51                   	push   ecx
c001dba3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dba7:	57                   	push   edi
c001dba8:	55                   	push   ebp
c001dba9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbad:	e8 ea fd ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbb2:	83 c4 14             	add    esp,0x14
c001dbb5:	53                   	push   ebx
c001dbb6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dbba:	51                   	push   ecx
c001dbbb:	89 c6                	mov    esi,eax
c001dbbd:	57                   	push   edi
c001dbbe:	55                   	push   ebp
c001dbbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbc3:	c1 e6 10             	shl    esi,0x10
c001dbc6:	e8 d1 fd ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbcb:	83 c4 3c             	add    esp,0x3c
c001dbce:	5b                   	pop    ebx
c001dbcf:	0f b7 c0             	movzx  eax,ax
c001dbd2:	09 f0                	or     eax,esi
c001dbd4:	5e                   	pop    esi
c001dbd5:	5f                   	pop    edi
c001dbd6:	5d                   	pop    ebp
c001dbd7:	c3                   	ret    

c001dbd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dbd8:	55                   	push   ebp
c001dbd9:	57                   	push   edi
c001dbda:	56                   	push   esi
c001dbdb:	53                   	push   ebx
c001dbdc:	83 ec 0c             	sub    esp,0xc
c001dbdf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001dbe3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dbe7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbeb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001dbef:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001dbf5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dbf9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dbfd:	83 f9 01             	cmp    ecx,0x1
c001dc00:	75 5d                	jne    c001dc5f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001dc02:	0f b6 c8             	movzx  ecx,al
c001dc05:	89 f0                	mov    eax,esi
c001dc07:	25 fc 00 00 00       	and    eax,0xfc
c001dc0c:	0f b6 d2             	movzx  edx,dl
c001dc0f:	c1 e1 10             	shl    ecx,0x10
c001dc12:	c1 e2 0b             	shl    edx,0xb
c001dc15:	09 c1                	or     ecx,eax
c001dc17:	89 f8                	mov    eax,edi
c001dc19:	0f b6 f8             	movzx  edi,al
c001dc1c:	c1 e7 08             	shl    edi,0x8
c001dc1f:	09 f9                	or     ecx,edi
c001dc21:	09 d1                	or     ecx,edx
c001dc23:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dc28:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001dc2e:	89 c8                	mov    eax,ecx
c001dc30:	ef                   	out    dx,eax
c001dc31:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dc36:	ed                   	in     eax,dx
c001dc37:	83 e6 02             	and    esi,0x2
c001dc3a:	0f b7 db             	movzx  ebx,bx
c001dc3d:	74 0a                	je     c001dc49 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001dc3f:	c1 e3 10             	shl    ebx,0x10
c001dc42:	0f b7 d0             	movzx  edx,ax
c001dc45:	09 d3                	or     ebx,edx
c001dc47:	eb 05                	jmp    c001dc4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001dc49:	66 31 c0             	xor    ax,ax
c001dc4c:	09 c3                	or     ebx,eax
c001dc4e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dc53:	89 c8                	mov    eax,ecx
c001dc55:	ef                   	out    dx,eax
c001dc56:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dc5b:	89 d8                	mov    eax,ebx
c001dc5d:	eb 41                	jmp    c001dca0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001dc5f:	83 f9 02             	cmp    ecx,0x2
c001dc62:	75 45                	jne    c001dca9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001dc64:	89 f1                	mov    ecx,esi
c001dc66:	83 ec 0c             	sub    esp,0xc
c001dc69:	0f b6 f1             	movzx  esi,cl
c001dc6c:	89 f9                	mov    ecx,edi
c001dc6e:	56                   	push   esi
c001dc6f:	0f b6 f9             	movzx  edi,cl
c001dc72:	57                   	push   edi
c001dc73:	0f b6 d2             	movzx  edx,dl
c001dc76:	52                   	push   edx
c001dc77:	0f b6 c0             	movzx  eax,al
c001dc7a:	50                   	push   eax
c001dc7b:	55                   	push   ebp
c001dc7c:	e8 a5 fc ff ff       	call   c001d926 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc81:	89 c2                	mov    edx,eax
c001dc83:	ed                   	in     eax,dx
c001dc84:	83 c4 20             	add    esp,0x20
c001dc87:	f6 c2 02             	test   dl,0x2
c001dc8a:	0f b7 db             	movzx  ebx,bx
c001dc8d:	74 0c                	je     c001dc9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001dc8f:	0f b7 c8             	movzx  ecx,ax
c001dc92:	89 d8                	mov    eax,ebx
c001dc94:	c1 e0 10             	shl    eax,0x10
c001dc97:	09 c8                	or     eax,ecx
c001dc99:	eb 05                	jmp    c001dca0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001dc9b:	66 31 c0             	xor    ax,ax
c001dc9e:	09 d8                	or     eax,ebx
c001dca0:	ef                   	out    dx,eax
c001dca1:	83 c4 0c             	add    esp,0xc
c001dca4:	5b                   	pop    ebx
c001dca5:	5e                   	pop    esi
c001dca6:	5f                   	pop    edi
c001dca7:	5d                   	pop    ebp
c001dca8:	c3                   	ret    
c001dca9:	c7 44 24 20 87 60 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026087
c001dcb1:	83 c4 0c             	add    esp,0xc
c001dcb4:	5b                   	pop    ebx
c001dcb5:	5e                   	pop    esi
c001dcb6:	5f                   	pop    edi
c001dcb7:	5d                   	pop    ebp
c001dcb8:	e9 91 21 ff ff       	jmp    c000fe4e <KePanic(char const*)>
c001dcbd:	90                   	nop

c001dcbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001dcbe:	55                   	push   ebp
c001dcbf:	57                   	push   edi
c001dcc0:	56                   	push   esi
c001dcc1:	53                   	push   ebx
c001dcc2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001dcc8:	80 3d 4c 04 03 c0 00 	cmp    BYTE PTR ds:0xc003044c,0x0
c001dccf:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001dcd6:	0f 85 bd 00 00 00    	jne    c001dd99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001dcdc:	83 ec 0c             	sub    esp,0xc
c001dcdf:	68 14 01 00 00       	push   0x114
c001dce4:	e8 1f 1e ff ff       	call   c000fb08 <malloc>
c001dce9:	83 c4 0c             	add    esp,0xc
c001dcec:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c001dcf2:	68 8d 60 02 c0       	push   0xc002608d
c001dcf7:	50                   	push   eax
c001dcf8:	89 c3                	mov    ebx,eax
c001dcfa:	e8 65 a4 fe ff       	call   c0008164 <File::File(char const*, Process*)>
c001dcff:	83 c4 10             	add    esp,0x10
c001dd02:	85 db                	test   ebx,ebx
c001dd04:	0f 84 6b 02 00 00    	je     c001df75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dd0a:	57                   	push   edi
c001dd0b:	57                   	push   edi
c001dd0c:	6a 01                	push   0x1
c001dd0e:	53                   	push   ebx
c001dd0f:	e8 6e a4 fe ff       	call   c0008182 <File::open(FileOpenMode)>
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	85 c0                	test   eax,eax
c001dd19:	0f 85 56 02 00 00    	jne    c001df75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dd1f:	52                   	push   edx
c001dd20:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001dd24:	50                   	push   eax
c001dd25:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dd29:	50                   	push   eax
c001dd2a:	53                   	push   ebx
c001dd2b:	e8 54 a7 fe ff       	call   c0008484 <File::stat(unsigned long long*, bool*)>
c001dd30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dd34:	40                   	inc    eax
c001dd35:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd38:	e8 cb 1d ff ff       	call   c000fb08 <malloc>
c001dd3d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001dd41:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001dd45:	59                   	pop    ecx
c001dd46:	a3 48 04 03 c0       	mov    ds:0xc0030448,eax
c001dd4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001dd4d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001dd51:	51                   	push   ecx
c001dd52:	50                   	push   eax
c001dd53:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dd57:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dd5b:	53                   	push   ebx
c001dd5c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dd5f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001dd63:	83 c4 20             	add    esp,0x20
c001dd66:	89 c8                	mov    eax,ecx
c001dd68:	99                   	cdq    
c001dd69:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001dd6d:	0f 85 02 02 00 00    	jne    c001df75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dd73:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001dd77:	0f 85 f8 01 00 00    	jne    c001df75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dd7d:	83 ec 0c             	sub    esp,0xc
c001dd80:	53                   	push   ebx
c001dd81:	e8 5a a4 fe ff       	call   c00081e0 <File::close()>
c001dd86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	c6 05 4c 04 03 c0 01 	mov    BYTE PTR ds:0xc003044c,0x1
c001dd94:	a3 44 04 03 c0       	mov    ds:0xc0030444,eax
c001dd99:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001dda1:	31 c9                	xor    ecx,ecx
c001dda3:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001ddaa:	8b 2d 44 04 03 c0    	mov    ebp,DWORD PTR ds:0xc0030444
c001ddb0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ddb7:	8b 15 48 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030448
c001ddbd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ddc2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001ddca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001ddcf:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dddb:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001dde3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dde7:	39 cd                	cmp    ebp,ecx
c001dde9:	0f 8e 86 01 00 00    	jle    c001df75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ddef:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001ddf2:	d4 40                	aam    0x40
c001ddf4:	d5 39                	aad    0x39
c001ddf6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ddfa:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001ddfe:	d4 40                	aam    0x40
c001de00:	d5 39                	aad    0x39
c001de02:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001de06:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001de0a:	d4 40                	aam    0x40
c001de0c:	d5 39                	aad    0x39
c001de0e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001de12:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001de16:	d4 40                	aam    0x40
c001de18:	d5 39                	aad    0x39
c001de1a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001de1e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001de22:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001de26:	3c 56                	cmp    al,0x56
c001de28:	74 47                	je     c001de71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001de2a:	d4 40                	aam    0x40
c001de2c:	d5 39                	aad    0x39
c001de2e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001de31:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001de35:	0f b6 db             	movzx  ebx,bl
c001de38:	c1 e3 04             	shl    ebx,0x4
c001de3b:	d4 40                	aam    0x40
c001de3d:	d5 39                	aad    0x39
c001de3f:	83 e8 30             	sub    eax,0x30
c001de42:	0f b6 c0             	movzx  eax,al
c001de45:	09 c3                	or     ebx,eax
c001de47:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001de4b:	c1 e3 04             	shl    ebx,0x4
c001de4e:	d4 40                	aam    0x40
c001de50:	d5 39                	aad    0x39
c001de52:	83 e8 30             	sub    eax,0x30
c001de55:	0f b6 c0             	movzx  eax,al
c001de58:	09 c3                	or     ebx,eax
c001de5a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001de5e:	c1 e3 04             	shl    ebx,0x4
c001de61:	d4 40                	aam    0x40
c001de63:	d5 39                	aad    0x39
c001de65:	83 e8 30             	sub    eax,0x30
c001de68:	0f b6 c0             	movzx  eax,al
c001de6b:	09 c3                	or     ebx,eax
c001de6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001de71:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001de75:	80 fb 58             	cmp    bl,0x58
c001de78:	74 49                	je     c001dec3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001de7a:	88 d8                	mov    al,bl
c001de7c:	d4 40                	aam    0x40
c001de7e:	d5 39                	aad    0x39
c001de80:	83 e8 30             	sub    eax,0x30
c001de83:	0f b6 f8             	movzx  edi,al
c001de86:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001de8a:	c1 e7 04             	shl    edi,0x4
c001de8d:	d4 40                	aam    0x40
c001de8f:	d5 39                	aad    0x39
c001de91:	83 e8 30             	sub    eax,0x30
c001de94:	0f b6 c0             	movzx  eax,al
c001de97:	09 c7                	or     edi,eax
c001de99:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001de9d:	c1 e7 04             	shl    edi,0x4
c001dea0:	d4 40                	aam    0x40
c001dea2:	d5 39                	aad    0x39
c001dea4:	83 e8 30             	sub    eax,0x30
c001dea7:	0f b6 c0             	movzx  eax,al
c001deaa:	09 c7                	or     edi,eax
c001deac:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001deb0:	c1 e7 04             	shl    edi,0x4
c001deb3:	d4 40                	aam    0x40
c001deb5:	d5 39                	aad    0x39
c001deb7:	83 e8 30             	sub    eax,0x30
c001deba:	0f b6 c0             	movzx  eax,al
c001debd:	09 c7                	or     edi,eax
c001debf:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001dec3:	8d 41 10             	lea    eax,[ecx+0x10]
c001dec6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001deca:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001dece:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ded2:	83 f9 0a             	cmp    ecx,0xa
c001ded5:	74 07                	je     c001dede <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001ded7:	47                   	inc    edi
c001ded8:	39 c5                	cmp    ebp,eax
c001deda:	75 16                	jne    c001def2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001dedc:	89 e8                	mov    eax,ebp
c001dede:	83 f9 0a             	cmp    ecx,0xa
c001dee1:	0f 94 c1             	sete   cl
c001dee4:	0f b6 c9             	movzx  ecx,cl
c001dee7:	01 c1                	add    ecx,eax
c001dee9:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001deee:	75 0f                	jne    c001deff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001def0:	eb 1c                	jmp    c001df0e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001def2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001def5:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001def9:	40                   	inc    eax
c001defa:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001defd:	eb cb                	jmp    c001deca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001deff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001df03:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001df08:	0f 85 d9 fe ff ff    	jne    c001dde7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001df0e:	80 fb 58             	cmp    bl,0x58
c001df11:	74 10                	je     c001df23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001df13:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001df18:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001df1d:	0f 85 c4 fe ff ff    	jne    c001dde7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001df23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df2b:	83 e8 30             	sub    eax,0x30
c001df2e:	c1 e0 04             	shl    eax,0x4
c001df31:	83 eb 30             	sub    ebx,0x30
c001df34:	09 d8                	or     eax,ebx
c001df36:	0f b6 c0             	movzx  eax,al
c001df39:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001df3d:	0f 85 a4 fe ff ff    	jne    c001dde7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001df43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df47:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001df4b:	83 e8 30             	sub    eax,0x30
c001df4e:	c1 e0 04             	shl    eax,0x4
c001df51:	83 eb 30             	sub    ebx,0x30
c001df54:	09 d8                	or     eax,ebx
c001df56:	0f b6 c0             	movzx  eax,al
c001df59:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001df5d:	0f 85 84 fe ff ff    	jne    c001dde7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001df63:	50                   	push   eax
c001df64:	50                   	push   eax
c001df65:	8d 44 24 48          	lea    eax,[esp+0x48]
c001df69:	50                   	push   eax
c001df6a:	56                   	push   esi
c001df6b:	e8 e0 26 fe ff       	call   c0000650 <strcpy>
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	eb 05                	jmp    c001df7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001df75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001df78:	31 f6                	xor    esi,esi
c001df7a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001df80:	89 f0                	mov    eax,esi
c001df82:	5b                   	pop    ebx
c001df83:	5e                   	pop    esi
c001df84:	5f                   	pop    edi
c001df85:	5d                   	pop    ebp
c001df86:	c3                   	ret    
c001df87:	90                   	nop

c001df88 <PCI::checkBus(unsigned char)>:
c001df88:	56                   	push   esi
c001df89:	53                   	push   ebx
c001df8a:	31 db                	xor    ebx,ebx
c001df8c:	51                   	push   ecx
c001df8d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001df92:	52                   	push   edx
c001df93:	53                   	push   ebx
c001df94:	43                   	inc    ebx
c001df95:	56                   	push   esi
c001df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df9a:	e8 6f 03 00 00       	call   c001e30e <PCI::checkDevice(unsigned char, unsigned char)>
c001df9f:	83 c4 10             	add    esp,0x10
c001dfa2:	83 fb 20             	cmp    ebx,0x20
c001dfa5:	75 eb                	jne    c001df92 <PCI::checkBus(unsigned char)+0xa>
c001dfa7:	58                   	pop    eax
c001dfa8:	5b                   	pop    ebx
c001dfa9:	5e                   	pop    esi
c001dfaa:	c3                   	ret    
c001dfab:	90                   	nop

c001dfac <PCI::foundDevice(PCIDeviceInfo)>:
c001dfac:	55                   	push   ebp
c001dfad:	57                   	push   edi
c001dfae:	56                   	push   esi
c001dfaf:	53                   	push   ebx
c001dfb0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001dfb6:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001dfbe:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001dfc5:	3d ff ff 00 00       	cmp    eax,0xffff
c001dfca:	0f 84 b6 01 00 00    	je     c001e186 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dfd0:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001dfd8:	66 81 fd 06 04       	cmp    bp,0x406
c001dfdd:	75 32                	jne    c001e011 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001dfdf:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001dfe7:	50                   	push   eax
c001dfe8:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001dff0:	50                   	push   eax
c001dff1:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dff9:	50                   	push   eax
c001dffa:	53                   	push   ebx
c001dffb:	e8 4c fb ff ff       	call   c001db4c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e000:	59                   	pop    ecx
c001e001:	5e                   	pop    esi
c001e002:	0f b6 c0             	movzx  eax,al
c001e005:	50                   	push   eax
c001e006:	53                   	push   ebx
c001e007:	e8 7c ff ff ff       	call   c001df88 <PCI::checkBus(unsigned char)>
c001e00c:	e9 15 01 00 00       	jmp    c001e126 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e011:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e019:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e01f:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e026:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e031:	85 c0                	test   eax,eax
c001e033:	74 34                	je     c001e069 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e035:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e038:	85 d2                	test   edx,edx
c001e03a:	74 29                	je     c001e065 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e03c:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e042:	31 cf                	xor    edi,ecx
c001e044:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e04a:	75 19                	jne    c001e065 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e04c:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e052:	75 11                	jne    c001e065 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e054:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e05b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e05f:	0f 84 21 01 00 00    	je     c001e186 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e065:	8b 00                	mov    eax,DWORD PTR [eax]
c001e067:	eb c8                	jmp    c001e031 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e069:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e06d:	be c0 60 02 c0       	mov    esi,0xc00260c0
c001e072:	b9 07 00 00 00       	mov    ecx,0x7
c001e077:	fc                   	cld    
c001e078:	31 d2                	xor    edx,edx
c001e07a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e07c:	b9 12 00 00 00       	mov    ecx,0x12
c001e081:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e088:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e091:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e099:	b9 0a 00 00 00       	mov    ecx,0xa
c001e09e:	f7 f1                	div    ecx
c001e0a0:	83 c0 30             	add    eax,0x30
c001e0a3:	83 c2 30             	add    edx,0x30
c001e0a6:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e0aa:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e0b2:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e0b6:	31 d2                	xor    edx,edx
c001e0b8:	f7 f1                	div    ecx
c001e0ba:	83 c0 30             	add    eax,0x30
c001e0bd:	83 c2 30             	add    edx,0x30
c001e0c0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e0c4:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e0c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e0cc:	50                   	push   eax
c001e0cd:	e8 d9 f0 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e0db:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e0e2:	75 47                	jne    c001e12b <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e0e4:	83 ec 0c             	sub    esp,0xc
c001e0e7:	68 64 01 00 00       	push   0x164
c001e0ec:	e8 17 1a ff ff       	call   c000fb08 <malloc>
c001e0f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0f4:	89 c5                	mov    ebp,eax
c001e0f6:	e8 37 11 00 00       	call   c001f232 <SATABus::SATABus()>
c001e0fb:	58                   	pop    eax
c001e0fc:	5a                   	pop    edx
c001e0fd:	55                   	push   ebp
c001e0fe:	53                   	push   ebx
c001e0ff:	e8 ce b8 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001e104:	83 ec 1c             	sub    esp,0x1c
c001e107:	b9 09 00 00 00       	mov    ecx,0x9
c001e10c:	89 e7                	mov    edi,esp
c001e10e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e110:	55                   	push   ebp
c001e111:	e8 02 b8 fe ff       	call   c0009918 <Device::preOpenPCI(PCIDeviceInfo)>
c001e116:	83 c4 30             	add    esp,0x30
c001e119:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e11c:	6a 00                	push   0x0
c001e11e:	6a 00                	push   0x0
c001e120:	6a 00                	push   0x0
c001e122:	55                   	push   ebp
c001e123:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	eb 5b                	jmp    c001e186 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e12b:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e131:	75 19                	jne    c001e14c <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e133:	83 ec 0c             	sub    esp,0xc
c001e136:	68 70 02 00 00       	push   0x270
c001e13b:	e8 c8 19 ff ff       	call   c000fb08 <malloc>
c001e140:	89 04 24             	mov    DWORD PTR [esp],eax
c001e143:	89 c5                	mov    ebp,eax
c001e145:	e8 94 02 00 00       	call   c001e3de <IDE::IDE()>
c001e14a:	eb af                	jmp    c001e0fb <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	68 58 01 00 00       	push   0x158
c001e154:	e8 af 19 ff ff       	call   c000fb08 <malloc>
c001e159:	89 c5                	mov    ebp,eax
c001e15b:	58                   	pop    eax
c001e15c:	5a                   	pop    edx
c001e15d:	68 a6 60 02 c0       	push   0xc00260a6
c001e162:	55                   	push   ebp
c001e163:	e8 1e bb fe ff       	call   c0009c86 <DriverlessDevice::DriverlessDevice(char const*)>
c001e168:	59                   	pop    ecx
c001e169:	5f                   	pop    edi
c001e16a:	55                   	push   ebp
c001e16b:	53                   	push   ebx
c001e16c:	e8 61 b8 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001e171:	83 ec 1c             	sub    esp,0x1c
c001e174:	b9 09 00 00 00       	mov    ecx,0x9
c001e179:	89 e7                	mov    edi,esp
c001e17b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e17d:	55                   	push   ebp
c001e17e:	e8 95 b7 fe ff       	call   c0009918 <Device::preOpenPCI(PCIDeviceInfo)>
c001e183:	83 c4 30             	add    esp,0x30
c001e186:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e18c:	5b                   	pop    ebx
c001e18d:	5e                   	pop    esi
c001e18e:	5f                   	pop    edi
c001e18f:	5d                   	pop    ebp
c001e190:	c3                   	ret    
c001e191:	90                   	nop

c001e192 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e192:	55                   	push   ebp
c001e193:	57                   	push   edi
c001e194:	56                   	push   esi
c001e195:	53                   	push   ebx
c001e196:	83 ec 68             	sub    esp,0x68
c001e199:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e1a0:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e1a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e1a8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e1af:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e1b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e1bf:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e1c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e1c8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e1cd:	6a 0c                	push   0xc
c001e1cf:	57                   	push   edi
c001e1d0:	53                   	push   ebx
c001e1d1:	56                   	push   esi
c001e1d2:	55                   	push   ebp
c001e1d3:	e8 c4 f7 ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1d8:	83 c4 20             	add    esp,0x20
c001e1db:	57                   	push   edi
c001e1dc:	53                   	push   ebx
c001e1dd:	56                   	push   esi
c001e1de:	55                   	push   ebp
c001e1df:	e8 ae f8 ff ff       	call   c001da92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e1e4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e1e9:	57                   	push   edi
c001e1ea:	53                   	push   ebx
c001e1eb:	56                   	push   esi
c001e1ec:	55                   	push   ebp
c001e1ed:	e8 36 f9 ff ff       	call   c001db28 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e1f2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e1f6:	83 c4 14             	add    esp,0x14
c001e1f9:	6a 3c                	push   0x3c
c001e1fb:	57                   	push   edi
c001e1fc:	53                   	push   ebx
c001e1fd:	56                   	push   esi
c001e1fe:	55                   	push   ebp
c001e1ff:	e8 98 f7 ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e204:	0f b6 c4             	movzx  eax,ah
c001e207:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e20b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e20f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e213:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001e218:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001e21e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e224:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e228:	83 c4 20             	add    esp,0x20
c001e22b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e230:	74 30                	je     c001e262 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e232:	31 c0                	xor    eax,eax
c001e234:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e238:	7e 28                	jle    c001e262 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e23a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e242:	39 cb                	cmp    ebx,ecx
c001e244:	75 19                	jne    c001e25f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e246:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e24e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e252:	75 0b                	jne    c001e25f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e254:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e25b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e25f:	40                   	inc    eax
c001e260:	eb d2                	jmp    c001e234 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e262:	31 d2                	xor    edx,edx
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	57                   	push   edi
c001e268:	53                   	push   ebx
c001e269:	56                   	push   esi
c001e26a:	52                   	push   edx
c001e26b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e26f:	55                   	push   ebp
c001e270:	e8 ff f8 ff ff       	call   c001db74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e275:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e279:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e27d:	42                   	inc    edx
c001e27e:	83 c4 20             	add    esp,0x20
c001e281:	83 fa 06             	cmp    edx,0x6
c001e284:	75 de                	jne    c001e264 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e286:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e291:	c1 e2 08             	shl    edx,0x8
c001e294:	0f b6 c4             	movzx  eax,ah
c001e297:	09 d0                	or     eax,edx
c001e299:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e29e:	6a 02                	push   0x2
c001e2a0:	57                   	push   edi
c001e2a1:	53                   	push   ebx
c001e2a2:	56                   	push   esi
c001e2a3:	55                   	push   ebp
c001e2a4:	e8 f3 f6 ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2a9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e2ae:	83 c4 20             	add    esp,0x20
c001e2b1:	57                   	push   edi
c001e2b2:	53                   	push   ebx
c001e2b3:	56                   	push   esi
c001e2b4:	55                   	push   ebp
c001e2b5:	e8 22 f8 ff ff       	call   c001dadc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e2ba:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e2be:	57                   	push   edi
c001e2bf:	53                   	push   ebx
c001e2c0:	56                   	push   esi
c001e2c1:	55                   	push   ebp
c001e2c2:	e8 7f f7 ff ff       	call   c001da46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e2c7:	b9 09 00 00 00       	mov    ecx,0x9
c001e2cc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e2d1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e2d5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e2d9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e2dd:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e2e1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e2e5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e2e9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e2ed:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e2f1:	83 ec 0c             	sub    esp,0xc
c001e2f4:	fc                   	cld    
c001e2f5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e2f9:	89 e7                	mov    edi,esp
c001e2fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e2fd:	55                   	push   ebp
c001e2fe:	e8 a9 fc ff ff       	call   c001dfac <PCI::foundDevice(PCIDeviceInfo)>
c001e303:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e309:	5b                   	pop    ebx
c001e30a:	5e                   	pop    esi
c001e30b:	5f                   	pop    edi
c001e30c:	5d                   	pop    ebp
c001e30d:	c3                   	ret    

c001e30e <PCI::checkDevice(unsigned char, unsigned char)>:
c001e30e:	55                   	push   ebp
c001e30f:	57                   	push   edi
c001e310:	56                   	push   esi
c001e311:	53                   	push   ebx
c001e312:	83 ec 0c             	sub    esp,0xc
c001e315:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e31a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e31f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e323:	6a 00                	push   0x0
c001e325:	56                   	push   esi
c001e326:	57                   	push   edi
c001e327:	55                   	push   ebp
c001e328:	e8 19 f7 ff ff       	call   c001da46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e32d:	6a 00                	push   0x0
c001e32f:	56                   	push   esi
c001e330:	57                   	push   edi
c001e331:	55                   	push   ebp
c001e332:	e8 5b fe ff ff       	call   c001e192 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e337:	83 c4 20             	add    esp,0x20
c001e33a:	6a 00                	push   0x0
c001e33c:	56                   	push   esi
c001e33d:	57                   	push   edi
c001e33e:	55                   	push   ebp
c001e33f:	e8 26 f7 ff ff       	call   c001da6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e344:	83 c4 10             	add    esp,0x10
c001e347:	a8 80                	test   al,0x80
c001e349:	74 2d                	je     c001e378 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e34b:	bb 01 00 00 00       	mov    ebx,0x1
c001e350:	53                   	push   ebx
c001e351:	56                   	push   esi
c001e352:	57                   	push   edi
c001e353:	55                   	push   ebp
c001e354:	e8 ed f6 ff ff       	call   c001da46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e359:	83 c4 10             	add    esp,0x10
c001e35c:	0f b7 c0             	movzx  eax,ax
c001e35f:	3d ff ff 00 00       	cmp    eax,0xffff
c001e364:	74 0c                	je     c001e372 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e366:	53                   	push   ebx
c001e367:	56                   	push   esi
c001e368:	57                   	push   edi
c001e369:	55                   	push   ebp
c001e36a:	e8 23 fe ff ff       	call   c001e192 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e36f:	83 c4 10             	add    esp,0x10
c001e372:	43                   	inc    ebx
c001e373:	83 fb 08             	cmp    ebx,0x8
c001e376:	75 d8                	jne    c001e350 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e378:	83 c4 0c             	add    esp,0xc
c001e37b:	5b                   	pop    ebx
c001e37c:	5e                   	pop    esi
c001e37d:	5f                   	pop    edi
c001e37e:	5d                   	pop    ebp
c001e37f:	c3                   	ret    

c001e380 <PCI::detect()>:
c001e380:	56                   	push   esi
c001e381:	53                   	push   ebx
c001e382:	53                   	push   ebx
c001e383:	31 db                	xor    ebx,ebx
c001e385:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e389:	6a 00                	push   0x0
c001e38b:	6a 00                	push   0x0
c001e38d:	6a 00                	push   0x0
c001e38f:	56                   	push   esi
c001e390:	e8 d5 f6 ff ff       	call   c001da6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e395:	83 c4 10             	add    esp,0x10
c001e398:	a8 80                	test   al,0x80
c001e39a:	75 21                	jne    c001e3bd <PCI::detect()+0x3d>
c001e39c:	51                   	push   ecx
c001e39d:	51                   	push   ecx
c001e39e:	6a 00                	push   0x0
c001e3a0:	56                   	push   esi
c001e3a1:	e8 e2 fb ff ff       	call   c001df88 <PCI::checkBus(unsigned char)>
c001e3a6:	83 c4 10             	add    esp,0x10
c001e3a9:	eb 2a                	jmp    c001e3d5 <PCI::detect()+0x55>
c001e3ab:	52                   	push   edx
c001e3ac:	52                   	push   edx
c001e3ad:	53                   	push   ebx
c001e3ae:	43                   	inc    ebx
c001e3af:	56                   	push   esi
c001e3b0:	e8 d3 fb ff ff       	call   c001df88 <PCI::checkBus(unsigned char)>
c001e3b5:	83 c4 10             	add    esp,0x10
c001e3b8:	83 fb 08             	cmp    ebx,0x8
c001e3bb:	74 18                	je     c001e3d5 <PCI::detect()+0x55>
c001e3bd:	53                   	push   ebx
c001e3be:	6a 00                	push   0x0
c001e3c0:	6a 00                	push   0x0
c001e3c2:	56                   	push   esi
c001e3c3:	e8 7e f6 ff ff       	call   c001da46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	0f b7 c0             	movzx  eax,ax
c001e3ce:	3d ff ff 00 00       	cmp    eax,0xffff
c001e3d3:	74 d6                	je     c001e3ab <PCI::detect()+0x2b>
c001e3d5:	58                   	pop    eax
c001e3d6:	5b                   	pop    ebx
c001e3d7:	5e                   	pop    esi
c001e3d8:	c3                   	ret    
c001e3d9:	90                   	nop

c001e3da <IDE::close(int, int, void*)>:
c001e3da:	83 c8 ff             	or     eax,0xffffffff
c001e3dd:	c3                   	ret    

c001e3de <IDE::IDE()>:
c001e3de:	83 ec 0c             	sub    esp,0xc
c001e3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e5:	83 ec 08             	sub    esp,0x8
c001e3e8:	68 50 61 02 c0       	push   0xc0026150
c001e3ed:	50                   	push   eax
c001e3ee:	e8 39 b9 fe ff       	call   c0009d2c <HardDiskController::HardDiskController(char const*)>
c001e3f3:	83 c4 10             	add    esp,0x10
c001e3f6:	ba 7c 62 02 c0       	mov    edx,0xc002627c
c001e3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ff:	89 10                	mov    DWORD PTR [eax],edx
c001e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e405:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e40c:	90                   	nop
c001e40d:	83 c4 0c             	add    esp,0xc
c001e410:	c3                   	ret    
c001e411:	90                   	nop

c001e412 <IDE::prepareInterrupt(unsigned char)>:
c001e412:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e417:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e41b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e423:	c3                   	ret    

c001e424 <selectDrive(unsigned char, unsigned char)>:
c001e424:	c3                   	ret    
c001e425:	90                   	nop

c001e426 <IDE::getBase(unsigned char)>:
c001e426:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e42f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e437:	c3                   	ret    

c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e438:	55                   	push   ebp
c001e439:	57                   	push   edi
c001e43a:	56                   	push   esi
c001e43b:	53                   	push   ebx
c001e43c:	83 ec 1c             	sub    esp,0x1c
c001e43f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e443:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e447:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e44b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e44f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e452:	80 f9 03             	cmp    cl,0x3
c001e455:	77 4f                	ja     c001e4a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e45b:	0f b6 f2             	movzx  esi,dl
c001e45e:	0f b6 db             	movzx  ebx,bl
c001e461:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e464:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e469:	80 ca 80             	or     dl,0x80
c001e46c:	52                   	push   edx
c001e46d:	6a 0c                	push   0xc
c001e46f:	56                   	push   esi
c001e470:	57                   	push   edi
c001e471:	e8 c2 ff ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e476:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e47b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e47f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e483:	ee                   	out    dx,al
c001e484:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e489:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e48d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e491:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e499:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e49d:	83 c4 2c             	add    esp,0x2c
c001e4a0:	5b                   	pop    ebx
c001e4a1:	5e                   	pop    esi
c001e4a2:	5f                   	pop    edi
c001e4a3:	5d                   	pop    ebp
c001e4a4:	eb 92                	jmp    c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4a6:	0f b6 cb             	movzx  ecx,bl
c001e4a9:	83 f9 07             	cmp    ecx,0x7
c001e4ac:	77 12                	ja     c001e4c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e4ae:	0f b6 d2             	movzx  edx,dl
c001e4b1:	0f b6 db             	movzx  ebx,bl
c001e4b4:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e4bc:	01 da                	add    edx,ebx
c001e4be:	eb 2f                	jmp    c001e4ef <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e4c0:	83 f9 0d             	cmp    ecx,0xd
c001e4c3:	77 13                	ja     c001e4d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e4c5:	0f b6 d2             	movzx  edx,dl
c001e4c8:	0f b6 db             	movzx  ebx,bl
c001e4cb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e4d2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e4d6:	eb 17                	jmp    c001e4ef <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e4d8:	83 f9 15             	cmp    ecx,0x15
c001e4db:	77 13                	ja     c001e4f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e4dd:	0f b6 d2             	movzx  edx,dl
c001e4e0:	0f b6 db             	movzx  ebx,bl
c001e4e3:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e4eb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e4ef:	ee                   	out    dx,al
c001e4f0:	83 c4 1c             	add    esp,0x1c
c001e4f3:	5b                   	pop    ebx
c001e4f4:	5e                   	pop    esi
c001e4f5:	5f                   	pop    edi
c001e4f6:	5d                   	pop    ebp
c001e4f7:	c3                   	ret    

c001e4f8 <IDE::read(unsigned char, unsigned char)>:
c001e4f8:	57                   	push   edi
c001e4f9:	56                   	push   esi
c001e4fa:	53                   	push   ebx
c001e4fb:	83 ec 10             	sub    esp,0x10
c001e4fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e502:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e506:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e50a:	8d 42 f8             	lea    eax,[edx-0x8]
c001e50d:	3c 03                	cmp    al,0x3
c001e50f:	77 48                	ja     c001e559 <IDE::read(unsigned char, unsigned char)+0x61>
c001e511:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e515:	0f b6 f1             	movzx  esi,cl
c001e518:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e51b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e520:	0c 80                	or     al,0x80
c001e522:	50                   	push   eax
c001e523:	6a 0c                	push   0xc
c001e525:	56                   	push   esi
c001e526:	53                   	push   ebx
c001e527:	e8 0c ff ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e52c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e530:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e535:	0f b6 d2             	movzx  edx,dl
c001e538:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e53c:	ec                   	in     al,dx
c001e53d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e541:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e546:	52                   	push   edx
c001e547:	6a 0c                	push   0xc
c001e549:	56                   	push   esi
c001e54a:	53                   	push   ebx
c001e54b:	e8 e8 fe ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e550:	83 c4 20             	add    esp,0x20
c001e553:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e557:	eb 4c                	jmp    c001e5a5 <IDE::read(unsigned char, unsigned char)+0xad>
c001e559:	0f b6 f2             	movzx  esi,dl
c001e55c:	83 fe 07             	cmp    esi,0x7
c001e55f:	77 12                	ja     c001e573 <IDE::read(unsigned char, unsigned char)+0x7b>
c001e561:	0f b6 c9             	movzx  ecx,cl
c001e564:	0f b6 d2             	movzx  edx,dl
c001e567:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e56f:	01 c2                	add    edx,eax
c001e571:	eb 31                	jmp    c001e5a4 <IDE::read(unsigned char, unsigned char)+0xac>
c001e573:	83 fe 0d             	cmp    esi,0xd
c001e576:	77 13                	ja     c001e58b <IDE::read(unsigned char, unsigned char)+0x93>
c001e578:	0f b6 c9             	movzx  ecx,cl
c001e57b:	0f b6 d2             	movzx  edx,dl
c001e57e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e585:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e589:	eb 19                	jmp    c001e5a4 <IDE::read(unsigned char, unsigned char)+0xac>
c001e58b:	31 c0                	xor    eax,eax
c001e58d:	83 fe 15             	cmp    esi,0x15
c001e590:	77 13                	ja     c001e5a5 <IDE::read(unsigned char, unsigned char)+0xad>
c001e592:	0f b6 c9             	movzx  ecx,cl
c001e595:	0f b6 d2             	movzx  edx,dl
c001e598:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e5a0:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e5a4:	ec                   	in     al,dx
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	5b                   	pop    ebx
c001e5a9:	5e                   	pop    esi
c001e5aa:	5f                   	pop    edi
c001e5ab:	c3                   	ret    

c001e5ac <IDE::waitInterrupt(unsigned char)>:
c001e5ac:	55                   	push   ebp
c001e5ad:	57                   	push   edi
c001e5ae:	56                   	push   esi
c001e5af:	53                   	push   ebx
c001e5b0:	31 db                	xor    ebx,ebx
c001e5b2:	83 ec 0c             	sub    esp,0xc
c001e5b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e5b9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e5be:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e5c6:	89 e8                	mov    eax,ebp
c001e5c8:	84 c0                	test   al,al
c001e5ca:	75 31                	jne    c001e5fd <IDE::waitInterrupt(unsigned char)+0x51>
c001e5cc:	52                   	push   edx
c001e5cd:	6a 0c                	push   0xc
c001e5cf:	56                   	push   esi
c001e5d0:	57                   	push   edi
c001e5d1:	e8 22 ff ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	a8 01                	test   al,0x1
c001e5db:	75 28                	jne    c001e605 <IDE::waitInterrupt(unsigned char)+0x59>
c001e5dd:	f6 c3 04             	test   bl,0x4
c001e5e0:	75 13                	jne    c001e5f5 <IDE::waitInterrupt(unsigned char)+0x49>
c001e5e2:	83 fb 32             	cmp    ebx,0x32
c001e5e5:	7e 0e                	jle    c001e5f5 <IDE::waitInterrupt(unsigned char)+0x49>
c001e5e7:	50                   	push   eax
c001e5e8:	50                   	push   eax
c001e5e9:	6a 00                	push   0x0
c001e5eb:	6a 64                	push   0x64
c001e5ed:	e8 4a 8c ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c001e5f2:	83 c4 10             	add    esp,0x10
c001e5f5:	83 fb 3c             	cmp    ebx,0x3c
c001e5f8:	74 0b                	je     c001e605 <IDE::waitInterrupt(unsigned char)+0x59>
c001e5fa:	43                   	inc    ebx
c001e5fb:	eb c1                	jmp    c001e5be <IDE::waitInterrupt(unsigned char)+0x12>
c001e5fd:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e605:	83 c4 0c             	add    esp,0xc
c001e608:	89 e8                	mov    eax,ebp
c001e60a:	5b                   	pop    ebx
c001e60b:	5e                   	pop    esi
c001e60c:	5f                   	pop    edi
c001e60d:	5d                   	pop    ebp
c001e60e:	c3                   	ret    

c001e60f <ideChannel0IRQHandler(regs*, void*)>:
c001e60f:	83 ec 10             	sub    esp,0x10
c001e612:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e616:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e61d:	6a 07                	push   0x7
c001e61f:	6a 00                	push   0x0
c001e621:	50                   	push   eax
c001e622:	e8 d1 fe ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001e627:	83 c4 1c             	add    esp,0x1c
c001e62a:	c3                   	ret    

c001e62b <ideChannel1IRQHandler(regs*, void*)>:
c001e62b:	83 ec 10             	sub    esp,0x10
c001e62e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e632:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e639:	6a 07                	push   0x7
c001e63b:	6a 01                	push   0x1
c001e63d:	50                   	push   eax
c001e63e:	e8 b5 fe ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001e643:	83 c4 1c             	add    esp,0x1c
c001e646:	c3                   	ret    
c001e647:	90                   	nop

c001e648 <IDE::enableIRQs(unsigned char, bool)>:
c001e648:	57                   	push   edi
c001e649:	b8 02 00 00 00       	mov    eax,0x2
c001e64e:	56                   	push   esi
c001e64f:	53                   	push   ebx
c001e650:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e655:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e659:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e65d:	74 02                	je     c001e661 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e65f:	31 c0                	xor    eax,eax
c001e661:	0f b6 db             	movzx  ebx,bl
c001e664:	bf 04 00 00 00       	mov    edi,0x4
c001e669:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e670:	50                   	push   eax
c001e671:	6a 0c                	push   0xc
c001e673:	53                   	push   ebx
c001e674:	56                   	push   esi
c001e675:	e8 be fd ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e67a:	83 c4 10             	add    esp,0x10
c001e67d:	50                   	push   eax
c001e67e:	6a 0c                	push   0xc
c001e680:	53                   	push   ebx
c001e681:	56                   	push   esi
c001e682:	e8 71 fe ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	4f                   	dec    edi
c001e68b:	75 f0                	jne    c001e67d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e68d:	5b                   	pop    ebx
c001e68e:	5e                   	pop    esi
c001e68f:	5f                   	pop    edi
c001e690:	c3                   	ret    
c001e691:	90                   	nop

c001e692 <IDE::open(int, int, void*)>:
c001e692:	55                   	push   ebp
c001e693:	57                   	push   edi
c001e694:	56                   	push   esi
c001e695:	53                   	push   ebx
c001e696:	83 ec 1c             	sub    esp,0x1c
c001e699:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e69d:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e6a4:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e6ad:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e6b6:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e6bd:	0f 85 80 02 00 00    	jne    c001e943 <IDE::open(int, int, void*)+0x2b1>
c001e6c3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e6c9:	a8 70                	test   al,0x70
c001e6cb:	75 44                	jne    c001e711 <IDE::open(int, int, void*)+0x7f>
c001e6cd:	ba 20 84 00 00       	mov    edx,0x8420
c001e6d2:	0f a3 c2             	bt     edx,eax
c001e6d5:	73 3a                	jae    c001e711 <IDE::open(int, int, void*)+0x7f>
c001e6d7:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e6dd:	83 ec 0c             	sub    esp,0xc
c001e6e0:	83 e0 fc             	and    eax,0xfffffffc
c001e6e3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e6ea:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e6f0:	83 e0 fc             	and    eax,0xfffffffc
c001e6f3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e6fa:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e700:	83 e0 fc             	and    eax,0xfffffffc
c001e703:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e70a:	68 d5 33 02 c0       	push   0xc00233d5
c001e70f:	eb 60                	jmp    c001e771 <IDE::open(int, int, void*)+0xdf>
c001e711:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e71b:	be 64 00 00 00       	mov    esi,0x64
c001e720:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e72a:	57                   	push   edi
c001e72b:	57                   	push   edi
c001e72c:	68 68 61 02 c0       	push   0xc0026168
c001e731:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e735:	57                   	push   edi
c001e736:	e8 15 1f fe ff       	call   c0000650 <strcpy>
c001e73b:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e742:	31 d2                	xor    edx,edx
c001e744:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e747:	89 c8                	mov    eax,ecx
c001e749:	f7 f6                	div    esi
c001e74b:	be 0a 00 00 00       	mov    esi,0xa
c001e750:	31 d2                	xor    edx,edx
c001e752:	83 c0 30             	add    eax,0x30
c001e755:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e759:	89 c8                	mov    eax,ecx
c001e75b:	f7 f6                	div    esi
c001e75d:	89 d1                	mov    ecx,edx
c001e75f:	31 d2                	xor    edx,edx
c001e761:	f7 f6                	div    esi
c001e763:	83 c1 30             	add    ecx,0x30
c001e766:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e76a:	83 c2 30             	add    edx,0x30
c001e76d:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e771:	e8 35 ea fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e776:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e77d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e782:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e789:	83 c4 10             	add    esp,0x10
c001e78c:	89 fa                	mov    edx,edi
c001e78e:	c1 e1 10             	shl    ecx,0x10
c001e791:	c1 e0 0b             	shl    eax,0xb
c001e794:	09 c1                	or     ecx,eax
c001e796:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e79d:	c1 e0 08             	shl    eax,0x8
c001e7a0:	09 c1                	or     ecx,eax
c001e7a2:	89 c8                	mov    eax,ecx
c001e7a4:	0d 08 00 00 80       	or     eax,0x80000008
c001e7a9:	ef                   	out    dx,eax
c001e7aa:	be fc 0c 00 00       	mov    esi,0xcfc
c001e7af:	89 f2                	mov    edx,esi
c001e7b1:	ed                   	in     eax,dx
c001e7b2:	c1 e8 10             	shr    eax,0x10
c001e7b5:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7ba:	0f 84 e1 00 00 00    	je     c001e8a1 <IDE::open(int, int, void*)+0x20f>
c001e7c0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e7c6:	89 fa                	mov    edx,edi
c001e7c8:	89 c8                	mov    eax,ecx
c001e7ca:	ef                   	out    dx,eax
c001e7cb:	b0 fe                	mov    al,0xfe
c001e7cd:	89 f2                	mov    edx,esi
c001e7cf:	ee                   	out    dx,al
c001e7d0:	89 c8                	mov    eax,ecx
c001e7d2:	89 fa                	mov    edx,edi
c001e7d4:	ef                   	out    dx,eax
c001e7d5:	89 f2                	mov    edx,esi
c001e7d7:	ed                   	in     eax,dx
c001e7d8:	3c fe                	cmp    al,0xfe
c001e7da:	0f 85 83 00 00 00    	jne    c001e863 <IDE::open(int, int, void*)+0x1d1>
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	68 0b 34 02 c0       	push   0xc002340b
c001e7e8:	e8 be e9 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e7ed:	c7 04 24 6e 61 02 c0 	mov    DWORD PTR [esp],0xc002616e
c001e7f4:	e8 55 87 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e7f9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e803:	c7 04 24 e8 36 02 c0 	mov    DWORD PTR [esp],0xc00236e8
c001e80a:	e8 9c e9 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e80f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e816:	89 fa                	mov    edx,edi
c001e818:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e81f:	c1 e1 10             	shl    ecx,0x10
c001e822:	c1 e0 08             	shl    eax,0x8
c001e825:	09 c1                	or     ecx,eax
c001e827:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e82e:	c1 e0 0b             	shl    eax,0xb
c001e831:	09 c1                	or     ecx,eax
c001e833:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e839:	89 c8                	mov    eax,ecx
c001e83b:	ef                   	out    dx,eax
c001e83c:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001e842:	89 f2                	mov    edx,esi
c001e844:	89 e8                	mov    eax,ebp
c001e846:	ee                   	out    dx,al
c001e847:	89 c8                	mov    eax,ecx
c001e849:	89 fa                	mov    edx,edi
c001e84b:	ef                   	out    dx,eax
c001e84c:	89 f2                	mov    edx,esi
c001e84e:	ed                   	in     eax,dx
c001e84f:	0f b6 c0             	movzx  eax,al
c001e852:	83 c4 10             	add    esp,0x10
c001e855:	39 e8                	cmp    eax,ebp
c001e857:	74 58                	je     c001e8b1 <IDE::open(int, int, void*)+0x21f>
c001e859:	83 ec 0c             	sub    esp,0xc
c001e85c:	68 83 61 02 c0       	push   0xc0026183
c001e861:	eb 46                	jmp    c001e8a9 <IDE::open(int, int, void*)+0x217>
c001e863:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e86c:	75 29                	jne    c001e897 <IDE::open(int, int, void*)+0x205>
c001e86e:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e875:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e87a:	74 05                	je     c001e881 <IDE::open(int, int, void*)+0x1ef>
c001e87c:	83 c0 80             	add    eax,0xffffff80
c001e87f:	75 16                	jne    c001e897 <IDE::open(int, int, void*)+0x205>
c001e881:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	68 4c 46 02 c0       	push   0xc002464c
c001e890:	e8 16 e9 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e895:	eb 17                	jmp    c001e8ae <IDE::open(int, int, void*)+0x21c>
c001e897:	83 ec 0c             	sub    esp,0xc
c001e89a:	68 8b 61 02 c0       	push   0xc002618b
c001e89f:	eb 08                	jmp    c001e8a9 <IDE::open(int, int, void*)+0x217>
c001e8a1:	83 ec 0c             	sub    esp,0xc
c001e8a4:	68 bc 61 02 c0       	push   0xc00261bc
c001e8a9:	e8 a0 15 ff ff       	call   c000fe4e <KePanic(char const*)>
c001e8ae:	83 c4 10             	add    esp,0x10
c001e8b1:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e8b8:	0f 84 bf 00 00 00    	je     c001e97d <IDE::open(int, int, void*)+0x2eb>
c001e8be:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	83 e0 fc             	and    eax,0xfffffffc
c001e8ca:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e8d1:	83 c0 08             	add    eax,0x8
c001e8d4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e8db:	68 e6 61 02 c0       	push   0xc00261e6
c001e8e0:	e8 69 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e8e5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e8ec:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e8f3:	50                   	push   eax
c001e8f4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e8fb:	50                   	push   eax
c001e8fc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e903:	50                   	push   eax
c001e904:	ff 35 40 04 03 c0    	push   DWORD PTR ds:0xc0030440
c001e90a:	e8 8d f0 ff ff       	call   c001d99c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e90f:	83 c4 18             	add    esp,0x18
c001e912:	83 c8 07             	or     eax,0x7
c001e915:	0f b7 c0             	movzx  eax,ax
c001e918:	50                   	push   eax
c001e919:	6a 04                	push   0x4
c001e91b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e922:	50                   	push   eax
c001e923:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e92a:	50                   	push   eax
c001e92b:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e932:	50                   	push   eax
c001e933:	ff 35 40 04 03 c0    	push   DWORD PTR ds:0xc0030440
c001e939:	e8 9a f2 ff ff       	call   c001dbd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e93e:	83 c4 20             	add    esp,0x20
c001e941:	eb 3a                	jmp    c001e97d <IDE::open(int, int, void*)+0x2eb>
c001e943:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e94a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e950:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e957:	05 06 02 00 00       	add    eax,0x206
c001e95c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e963:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e96a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e971:	05 06 02 00 00       	add    eax,0x206
c001e976:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e97d:	83 ec 0c             	sub    esp,0xc
c001e980:	68 80 3c 02 c0       	push   0xc0023c80
c001e985:	e8 21 e8 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001e98a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e990:	83 c4 10             	add    esp,0x10
c001e993:	89 c2                	mov    edx,eax
c001e995:	83 e2 0f             	and    edx,0xf
c001e998:	83 fa 08             	cmp    edx,0x8
c001e99b:	75 0a                	jne    c001e9a7 <IDE::open(int, int, void*)+0x315>
c001e99d:	83 e8 02             	sub    eax,0x2
c001e9a0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9a7:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e9ad:	89 c2                	mov    edx,eax
c001e9af:	83 e2 0f             	and    edx,0xf
c001e9b2:	83 fa 08             	cmp    edx,0x8
c001e9b5:	75 0a                	jne    c001e9c1 <IDE::open(int, int, void*)+0x32f>
c001e9b7:	83 e8 02             	sub    eax,0x2
c001e9ba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e9c1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e9c8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e9cf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9d2:	89 d0                	mov    eax,edx
c001e9d4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9d8:	8d 7a 01             	lea    edi,[edx+0x1]
c001e9db:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e9df:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e9e3:	83 e1 3f             	and    ecx,0x3f
c001e9e6:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e9ea:	89 f9                	mov    ecx,edi
c001e9ec:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e9f3:	8d 78 02             	lea    edi,[eax+0x2]
c001e9f6:	0f b6 c9             	movzx  ecx,cl
c001e9f9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e9fc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ea00:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea04:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ea08:	83 e2 3f             	and    edx,0x3f
c001ea0b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ea0f:	89 f9                	mov    ecx,edi
c001ea11:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ea17:	8d 78 03             	lea    edi,[eax+0x3]
c001ea1a:	0f b6 d1             	movzx  edx,cl
c001ea1d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea20:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ea24:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ea28:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ea2c:	83 e1 3f             	and    ecx,0x3f
c001ea2f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ea33:	89 fa                	mov    edx,edi
c001ea35:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ea3b:	8d 78 04             	lea    edi,[eax+0x4]
c001ea3e:	0f b6 ca             	movzx  ecx,dl
c001ea41:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ea44:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ea48:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea4c:	89 fa                	mov    edx,edi
c001ea4e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ea54:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ea58:	83 e2 3f             	and    edx,0x3f
c001ea5b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ea5f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ea66:	66 85 f6             	test   si,si
c001ea69:	74 24                	je     c001ea8f <IDE::open(int, int, void*)+0x3fd>
c001ea6b:	89 f9                	mov    ecx,edi
c001ea6d:	83 c0 05             	add    eax,0x5
c001ea70:	0f b6 d1             	movzx  edx,cl
c001ea73:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ea7a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ea7e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ea84:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ea88:	83 e0 3f             	and    eax,0x3f
c001ea8b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ea8f:	83 ec 0c             	sub    esp,0xc
c001ea92:	68 fe 61 02 c0       	push   0xc00261fe
c001ea97:	e8 0f e7 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ea9c:	58                   	pop    eax
c001ea9d:	5a                   	pop    edx
c001ea9e:	6a 00                	push   0x0
c001eaa0:	53                   	push   ebx
c001eaa1:	e8 6c f9 ff ff       	call   c001e412 <IDE::prepareInterrupt(unsigned char)>
c001eaa6:	59                   	pop    ecx
c001eaa7:	5e                   	pop    esi
c001eaa8:	6a 01                	push   0x1
c001eaaa:	53                   	push   ebx
c001eaab:	e8 62 f9 ff ff       	call   c001e412 <IDE::prepareInterrupt(unsigned char)>
c001eab0:	c7 04 24 80 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a80
c001eab7:	e8 ef e6 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eabc:	83 c4 0c             	add    esp,0xc
c001eabf:	6a 00                	push   0x0
c001eac1:	6a 00                	push   0x0
c001eac3:	53                   	push   ebx
c001eac4:	e8 7f fb ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001eac9:	83 c4 0c             	add    esp,0xc
c001eacc:	6a 00                	push   0x0
c001eace:	6a 01                	push   0x1
c001ead0:	53                   	push   ebx
c001ead1:	e8 72 fb ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001ead6:	c7 04 24 00 62 02 c0 	mov    DWORD PTR [esp],0xc0026200
c001eadd:	e8 c9 e6 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001eaec:	74 3c                	je     c001eb2a <IDE::open(int, int, void*)+0x498>
c001eaee:	83 ec 0c             	sub    esp,0xc
c001eaf1:	53                   	push   ebx
c001eaf2:	6a 01                	push   0x1
c001eaf4:	68 0f e6 01 c0       	push   0xc001e60f
c001eaf9:	6a 0e                	push   0xe
c001eafb:	53                   	push   ebx
c001eafc:	e8 7d ae fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb01:	83 c4 14             	add    esp,0x14
c001eb04:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eb0a:	53                   	push   ebx
c001eb0b:	6a 01                	push   0x1
c001eb0d:	68 2b e6 01 c0       	push   0xc001e62b
c001eb12:	6a 0f                	push   0xf
c001eb14:	53                   	push   ebx
c001eb15:	e8 64 ae fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb1a:	83 c4 14             	add    esp,0x14
c001eb1d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001eb23:	68 ee 38 02 c0       	push   0xc00238ee
c001eb28:	eb 40                	jmp    c001eb6a <IDE::open(int, int, void*)+0x4d8>
c001eb2a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	53                   	push   ebx
c001eb38:	6a 00                	push   0x0
c001eb3a:	68 0f e6 01 c0       	push   0xc001e60f
c001eb3f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001eb45:	53                   	push   ebx
c001eb46:	e8 33 ae fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb4b:	83 c4 14             	add    esp,0x14
c001eb4e:	53                   	push   ebx
c001eb4f:	6a 00                	push   0x0
c001eb51:	68 2b e6 01 c0       	push   0xc001e62b
c001eb56:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eb5c:	53                   	push   ebx
c001eb5d:	e8 1c ae fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb62:	83 c4 14             	add    esp,0x14
c001eb65:	68 3b 46 02 c0       	push   0xc002463b
c001eb6a:	e8 3c e6 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eb6f:	83 c4 10             	add    esp,0x10
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	68 02 62 02 c0       	push   0xc0026202
c001eb7a:	e8 2c e6 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eb7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eb81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb84:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eb87:	c7 04 24 55 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d55
c001eb8e:	e8 18 e6 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eb93:	83 c4 0c             	add    esp,0xc
c001eb96:	6a 07                	push   0x7
c001eb98:	6a 00                	push   0x0
c001eb9a:	53                   	push   ebx
c001eb9b:	e8 58 f9 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001eba0:	83 c4 0c             	add    esp,0xc
c001eba3:	6a 07                	push   0x7
c001eba5:	6a 01                	push   0x1
c001eba7:	53                   	push   ebx
c001eba8:	e8 4b f9 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ebad:	c7 04 24 f4 43 02 c0 	mov    DWORD PTR [esp],0xc00243f4
c001ebb4:	e8 f2 e5 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ebb9:	83 c4 0c             	add    esp,0xc
c001ebbc:	6a 01                	push   0x1
c001ebbe:	6a 00                	push   0x0
c001ebc0:	53                   	push   ebx
c001ebc1:	e8 82 fa ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001ebc6:	83 c4 0c             	add    esp,0xc
c001ebc9:	6a 01                	push   0x1
c001ebcb:	6a 01                	push   0x1
c001ebcd:	53                   	push   ebx
c001ebce:	e8 75 fa ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001ebd3:	c7 04 24 05 62 02 c0 	mov    DWORD PTR [esp],0xc0026205
c001ebda:	e8 cc e5 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ebdf:	83 c4 2c             	add    esp,0x2c
c001ebe2:	31 c0                	xor    eax,eax
c001ebe4:	5b                   	pop    ebx
c001ebe5:	5e                   	pop    esi
c001ebe6:	5f                   	pop    edi
c001ebe7:	5d                   	pop    ebp
c001ebe8:	c3                   	ret    
c001ebe9:	90                   	nop

c001ebea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ebea:	55                   	push   ebp
c001ebeb:	57                   	push   edi
c001ebec:	56                   	push   esi
c001ebed:	53                   	push   ebx
c001ebee:	83 ec 1c             	sub    esp,0x1c
c001ebf1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ebf5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ebf9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ebfd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ec01:	8d 42 f8             	lea    eax,[edx-0x8]
c001ec04:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ec08:	3c 03                	cmp    al,0x3
c001ec0a:	77 5a                	ja     c001ec66 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001ec0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec10:	0f b6 db             	movzx  ebx,bl
c001ec13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ec17:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ec1a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ec1f:	0c 80                	or     al,0x80
c001ec21:	50                   	push   eax
c001ec22:	6a 0c                	push   0xc
c001ec24:	53                   	push   ebx
c001ec25:	56                   	push   esi
c001ec26:	e8 0d f8 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec2f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ec34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ec38:	0f b6 d2             	movzx  edx,dl
c001ec3b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ec3f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ec41:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ec46:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ec4a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ec4e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ec5a:	83 c4 2c             	add    esp,0x2c
c001ec5d:	5b                   	pop    ebx
c001ec5e:	5e                   	pop    esi
c001ec5f:	5f                   	pop    edi
c001ec60:	5d                   	pop    ebp
c001ec61:	e9 d2 f7 ff ff       	jmp    c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec66:	0f b6 c2             	movzx  eax,dl
c001ec69:	83 f8 07             	cmp    eax,0x7
c001ec6c:	77 12                	ja     c001ec80 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ec6e:	0f b6 db             	movzx  ebx,bl
c001ec71:	0f b6 c2             	movzx  eax,dl
c001ec74:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ec7c:	01 c2                	add    edx,eax
c001ec7e:	eb 2f                	jmp    c001ecaf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ec80:	83 f8 0d             	cmp    eax,0xd
c001ec83:	77 13                	ja     c001ec98 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ec85:	0f b6 db             	movzx  ebx,bl
c001ec88:	0f b6 d2             	movzx  edx,dl
c001ec8b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ec92:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ec96:	eb 17                	jmp    c001ecaf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ec98:	83 f8 15             	cmp    eax,0x15
c001ec9b:	77 14                	ja     c001ecb1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ec9d:	0f b6 db             	movzx  ebx,bl
c001eca0:	0f b6 d2             	movzx  edx,dl
c001eca3:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ecab:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ecaf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ecb1:	83 c4 1c             	add    esp,0x1c
c001ecb4:	5b                   	pop    ebx
c001ecb5:	5e                   	pop    esi
c001ecb6:	5f                   	pop    edi
c001ecb7:	5d                   	pop    ebp
c001ecb8:	c3                   	ret    
c001ecb9:	90                   	nop

c001ecba <IDE::detect()>:
c001ecba:	55                   	push   ebp
c001ecbb:	57                   	push   edi
c001ecbc:	56                   	push   esi
c001ecbd:	53                   	push   ebx
c001ecbe:	81 ec 28 02 00 00    	sub    esp,0x228
c001ecc4:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001eccb:	68 07 62 02 c0       	push   0xc0026207
c001ecd0:	e8 d6 e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ecd5:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ecdb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ecdf:	83 c4 10             	add    esp,0x10
c001ece2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ece7:	0f 85 26 04 00 00    	jne    c001f113 <IDE::detect()+0x459>
c001eced:	83 ec 0c             	sub    esp,0xc
c001ecf0:	31 f6                	xor    esi,esi
c001ecf2:	68 0a 62 02 c0       	push   0xc002620a
c001ecf7:	31 ff                	xor    edi,edi
c001ecf9:	e8 ad e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	68 0d 62 02 c0       	push   0xc002620d
c001ed10:	e8 96 e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	31 ed                	xor    ebp,ebp
c001ed24:	68 10 62 02 c0       	push   0xc0026210
c001ed29:	e8 7d e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ed2e:	89 f8                	mov    eax,edi
c001ed30:	c1 e0 06             	shl    eax,0x6
c001ed33:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ed3b:	c7 04 24 13 62 02 c0 	mov    DWORD PTR [esp],0xc0026213
c001ed42:	e8 64 e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ed47:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ed4b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed53:	c1 e0 04             	shl    eax,0x4
c001ed56:	83 c8 a0             	or     eax,0xffffffa0
c001ed59:	0f b6 c0             	movzx  eax,al
c001ed5c:	50                   	push   eax
c001ed5d:	6a 06                	push   0x6
c001ed5f:	56                   	push   esi
c001ed60:	53                   	push   ebx
c001ed61:	e8 d2 f6 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed66:	83 c4 1c             	add    esp,0x1c
c001ed69:	6a 0c                	push   0xc
c001ed6b:	56                   	push   esi
c001ed6c:	53                   	push   ebx
c001ed6d:	e8 86 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ed72:	83 c4 0c             	add    esp,0xc
c001ed75:	6a 0c                	push   0xc
c001ed77:	56                   	push   esi
c001ed78:	53                   	push   ebx
c001ed79:	e8 7a f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ed7e:	83 c4 0c             	add    esp,0xc
c001ed81:	6a 0c                	push   0xc
c001ed83:	56                   	push   esi
c001ed84:	53                   	push   ebx
c001ed85:	e8 6e f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ed8a:	83 c4 0c             	add    esp,0xc
c001ed8d:	6a 0c                	push   0xc
c001ed8f:	56                   	push   esi
c001ed90:	53                   	push   ebx
c001ed91:	e8 62 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ed96:	c7 04 24 16 62 02 c0 	mov    DWORD PTR [esp],0xc0026216
c001ed9d:	e8 09 e4 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eda2:	68 ec 00 00 00       	push   0xec
c001eda7:	6a 07                	push   0x7
c001eda9:	56                   	push   esi
c001edaa:	53                   	push   ebx
c001edab:	e8 88 f6 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edb0:	83 c4 1c             	add    esp,0x1c
c001edb3:	6a 0c                	push   0xc
c001edb5:	56                   	push   esi
c001edb6:	53                   	push   ebx
c001edb7:	e8 3c f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001edbc:	83 c4 0c             	add    esp,0xc
c001edbf:	6a 0c                	push   0xc
c001edc1:	56                   	push   esi
c001edc2:	53                   	push   ebx
c001edc3:	e8 30 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001edc8:	83 c4 0c             	add    esp,0xc
c001edcb:	6a 0c                	push   0xc
c001edcd:	56                   	push   esi
c001edce:	53                   	push   ebx
c001edcf:	e8 24 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001edd4:	83 c4 0c             	add    esp,0xc
c001edd7:	6a 0c                	push   0xc
c001edd9:	56                   	push   esi
c001edda:	53                   	push   ebx
c001eddb:	e8 18 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ede0:	c7 04 24 19 62 02 c0 	mov    DWORD PTR [esp],0xc0026219
c001ede7:	e8 bf e3 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001edec:	83 c4 0c             	add    esp,0xc
c001edef:	6a 0c                	push   0xc
c001edf1:	56                   	push   esi
c001edf2:	53                   	push   ebx
c001edf3:	e8 00 f7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001edf8:	83 c4 10             	add    esp,0x10
c001edfb:	84 c0                	test   al,al
c001edfd:	75 1f                	jne    c001ee1e <IDE::detect()+0x164>
c001edff:	83 ec 0c             	sub    esp,0xc
c001ee02:	68 1c 62 02 c0       	push   0xc002621c
c001ee07:	e8 9f e3 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ee0c:	e9 e0 02 00 00       	jmp    c001f0f1 <IDE::detect()+0x437>
c001ee11:	a8 80                	test   al,0x80
c001ee13:	74 21                	je     c001ee36 <IDE::detect()+0x17c>
c001ee15:	45                   	inc    ebp
c001ee16:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ee1c:	7f 1e                	jg     c001ee3c <IDE::detect()+0x182>
c001ee1e:	50                   	push   eax
c001ee1f:	6a 0c                	push   0xc
c001ee21:	56                   	push   esi
c001ee22:	53                   	push   ebx
c001ee23:	e8 d0 f6 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ee28:	83 c4 10             	add    esp,0x10
c001ee2b:	a8 01                	test   al,0x1
c001ee2d:	74 e2                	je     c001ee11 <IDE::detect()+0x157>
c001ee2f:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001ee34:	eb 23                	jmp    c001ee59 <IDE::detect()+0x19f>
c001ee36:	a8 08                	test   al,0x8
c001ee38:	74 db                	je     c001ee15 <IDE::detect()+0x15b>
c001ee3a:	eb 18                	jmp    c001ee54 <IDE::detect()+0x19a>
c001ee3c:	50                   	push   eax
c001ee3d:	50                   	push   eax
c001ee3e:	6a 00                	push   0x0
c001ee40:	6a 32                	push   0x32
c001ee42:	e8 f5 83 ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ee50:	75 cc                	jne    c001ee1e <IDE::detect()+0x164>
c001ee52:	eb db                	jmp    c001ee2f <IDE::detect()+0x175>
c001ee54:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	68 1f 62 02 c0       	push   0xc002621f
c001ee61:	e8 45 e3 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ee6e:	74 56                	je     c001eec6 <IDE::detect()+0x20c>
c001ee70:	51                   	push   ecx
c001ee71:	6a 04                	push   0x4
c001ee73:	56                   	push   esi
c001ee74:	53                   	push   ebx
c001ee75:	e8 7e f6 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ee7a:	83 c4 0c             	add    esp,0xc
c001ee7d:	6a 05                	push   0x5
c001ee7f:	56                   	push   esi
c001ee80:	53                   	push   ebx
c001ee81:	89 c5                	mov    ebp,eax
c001ee83:	e8 70 f6 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ee88:	89 e9                	mov    ecx,ebp
c001ee8a:	83 c4 10             	add    esp,0x10
c001ee8d:	0f b6 e9             	movzx  ebp,cl
c001ee90:	83 fd 14             	cmp    ebp,0x14
c001ee93:	75 04                	jne    c001ee99 <IDE::detect()+0x1df>
c001ee95:	3c eb                	cmp    al,0xeb
c001ee97:	74 11                	je     c001eeaa <IDE::detect()+0x1f0>
c001ee99:	83 fd 69             	cmp    ebp,0x69
c001ee9c:	0f 85 52 02 00 00    	jne    c001f0f4 <IDE::detect()+0x43a>
c001eea2:	3c 96                	cmp    al,0x96
c001eea4:	0f 85 4a 02 00 00    	jne    c001f0f4 <IDE::detect()+0x43a>
c001eeaa:	68 a1 00 00 00       	push   0xa1
c001eeaf:	6a 07                	push   0x7
c001eeb1:	56                   	push   esi
c001eeb2:	53                   	push   ebx
c001eeb3:	e8 80 f5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeb8:	58                   	pop    eax
c001eeb9:	5a                   	pop    edx
c001eeba:	6a 00                	push   0x0
c001eebc:	6a 0a                	push   0xa
c001eebe:	e8 79 83 ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	89 fd                	mov    ebp,edi
c001eecb:	68 22 62 02 c0       	push   0xc0026222
c001eed0:	e8 d6 e2 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001eed5:	8d 54 24 20          	lea    edx,[esp+0x20]
c001eed9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001eee0:	c1 e5 06             	shl    ebp,0x6
c001eee3:	52                   	push   edx
c001eee4:	01 dd                	add    ebp,ebx
c001eee6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001eeea:	6a 00                	push   0x0
c001eeec:	56                   	push   esi
c001eeed:	53                   	push   ebx
c001eeee:	e8 f7 fc ff ff       	call   c001ebea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001eef3:	83 c4 14             	add    esp,0x14
c001eef6:	68 26 62 02 c0       	push   0xc0026226
c001eefb:	e8 ab e2 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ef00:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ef05:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001ef0c:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001ef13:	89 f0                	mov    eax,esi
c001ef15:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001ef1b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ef1f:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001ef25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef29:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001ef30:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001ef38:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001ef3f:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001ef47:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001ef4d:	c7 04 24 2a 62 02 c0 	mov    DWORD PTR [esp],0xc002622a
c001ef54:	e8 52 e2 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001ef63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef67:	74 09                	je     c001ef72 <IDE::detect()+0x2b8>
c001ef69:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001ef70:	eb 07                	jmp    c001ef79 <IDE::detect()+0x2bf>
c001ef72:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ef79:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ef7d:	89 f8                	mov    eax,edi
c001ef7f:	83 ec 0c             	sub    esp,0xc
c001ef82:	c1 e0 06             	shl    eax,0x6
c001ef85:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001ef88:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001ef8e:	68 2e 62 02 c0       	push   0xc002622e
c001ef93:	e8 13 e2 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001ef98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef9c:	89 e8                	mov    eax,ebp
c001ef9e:	83 c4 10             	add    esp,0x10
c001efa1:	8d 6a 28             	lea    ebp,[edx+0x28]
c001efa4:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001efa7:	83 c2 02             	add    edx,0x2
c001efaa:	83 c0 02             	add    eax,0x2
c001efad:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001efb3:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001efb6:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001efbc:	39 d5                	cmp    ebp,edx
c001efbe:	75 e4                	jne    c001efa4 <IDE::detect()+0x2ea>
c001efc0:	89 f8                	mov    eax,edi
c001efc2:	c1 e0 06             	shl    eax,0x6
c001efc5:	01 d8                	add    eax,ebx
c001efc7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001efce:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001efd5:	c1 ea 09             	shr    edx,0x9
c001efd8:	83 e2 01             	and    edx,0x1
c001efdb:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001efe2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001efe8:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001efec:	74 0c                	je     c001effa <IDE::detect()+0x340>
c001efee:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001eff7:	0f 95 c2             	setne  dl
c001effa:	89 fd                	mov    ebp,edi
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	c1 e5 06             	shl    ebp,0x6
c001f002:	01 dd                	add    ebp,ebx
c001f004:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f00a:	68 32 62 02 c0       	push   0xc0026232
c001f00f:	e8 97 e1 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f014:	83 c4 10             	add    esp,0x10
c001f017:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f01c:	75 66                	jne    c001f084 <IDE::detect()+0x3ca>
c001f01e:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f025:	0f 84 b8 00 00 00    	je     c001f0e3 <IDE::detect()+0x429>
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	68 36 62 02 c0       	push   0xc0026236
c001f033:	e8 73 e1 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f038:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f03f:	e8 c4 0a ff ff       	call   c000fb08 <malloc>
c001f044:	89 04 24             	mov    DWORD PTR [esp],eax
c001f047:	89 c5                	mov    ebp,eax
c001f049:	e8 44 05 00 00       	call   c001f592 <ATA::ATA()>
c001f04e:	c7 04 24 3a 62 02 c0 	mov    DWORD PTR [esp],0xc002623a
c001f055:	e8 51 e1 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f05a:	59                   	pop    ecx
c001f05b:	58                   	pop    eax
c001f05c:	55                   	push   ebp
c001f05d:	53                   	push   ebx
c001f05e:	e8 6f a9 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001f063:	c7 04 24 3f 62 02 c0 	mov    DWORD PTR [esp],0xc002623f
c001f06a:	e8 3c e1 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f06f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f072:	53                   	push   ebx
c001f073:	57                   	push   edi
c001f074:	6a 00                	push   0x0
c001f076:	55                   	push   ebp
c001f077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f07a:	83 c4 14             	add    esp,0x14
c001f07d:	68 44 62 02 c0       	push   0xc0026244
c001f082:	eb 57                	jmp    c001f0db <IDE::detect()+0x421>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	68 49 62 02 c0       	push   0xc0026249
c001f08c:	e8 1a e1 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f091:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f098:	e8 6b 0a ff ff       	call   c000fb08 <malloc>
c001f09d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0a0:	89 c5                	mov    ebp,eax
c001f0a2:	e8 b1 0c 00 00       	call   c001fd58 <ATAPI::ATAPI()>
c001f0a7:	c7 04 24 4f 62 02 c0 	mov    DWORD PTR [esp],0xc002624f
c001f0ae:	e8 f8 e0 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f0b3:	58                   	pop    eax
c001f0b4:	5a                   	pop    edx
c001f0b5:	55                   	push   ebp
c001f0b6:	53                   	push   ebx
c001f0b7:	e8 16 a9 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001f0bc:	c7 04 24 56 62 02 c0 	mov    DWORD PTR [esp],0xc0026256
c001f0c3:	e8 e3 e0 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f0c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f0cb:	53                   	push   ebx
c001f0cc:	57                   	push   edi
c001f0cd:	6a 00                	push   0x0
c001f0cf:	55                   	push   ebp
c001f0d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f0d3:	83 c4 14             	add    esp,0x14
c001f0d6:	68 5d 62 02 c0       	push   0xc002625d
c001f0db:	e8 cb e0 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f0e0:	83 c4 10             	add    esp,0x10
c001f0e3:	83 ec 0c             	sub    esp,0xc
c001f0e6:	47                   	inc    edi
c001f0e7:	68 64 62 02 c0       	push   0xc0026264
c001f0ec:	e8 ba e0 fe ff       	call   c000d1ab <KeSetBootMessage(char const*)>
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f0f8:	74 0c                	je     c001f106 <IDE::detect()+0x44c>
c001f0fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f101:	e9 19 fc ff ff       	jmp    c001ed1f <IDE::detect()+0x65>
c001f106:	4e                   	dec    esi
c001f107:	74 0a                	je     c001f113 <IDE::detect()+0x459>
c001f109:	be 01 00 00 00       	mov    esi,0x1
c001f10e:	e9 f5 fb ff ff       	jmp    c001ed08 <IDE::detect()+0x4e>
c001f113:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f119:	5b                   	pop    ebx
c001f11a:	5e                   	pop    esi
c001f11b:	5f                   	pop    edi
c001f11c:	5d                   	pop    ebp
c001f11d:	c3                   	ret    

c001f11e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f11e:	55                   	push   ebp
c001f11f:	57                   	push   edi
c001f120:	56                   	push   esi
c001f121:	53                   	push   ebx
c001f122:	83 ec 1c             	sub    esp,0x1c
c001f125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f129:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f12d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f135:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f139:	88 c3                	mov    bl,al
c001f13b:	25 ff 00 00 00       	and    eax,0xff
c001f140:	0f 84 88 00 00 00    	je     c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	89 c7                	mov    edi,eax
c001f14b:	68 68 62 02 c0       	push   0xc0026268
c001f150:	e8 f9 7d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	83 ff 01             	cmp    edi,0x1
c001f15b:	74 6b                	je     c001f1c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f15d:	83 ff 02             	cmp    edi,0x2
c001f160:	75 58                	jne    c001f1ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f162:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f167:	50                   	push   eax
c001f168:	6a 01                	push   0x1
c001f16a:	01 ff                	add    edi,edi
c001f16c:	09 fe                	or     esi,edi
c001f16e:	89 f0                	mov    eax,esi
c001f170:	0f b6 f0             	movzx  esi,al
c001f173:	c1 e6 06             	shl    esi,0x6
c001f176:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f17e:	50                   	push   eax
c001f17f:	55                   	push   ebp
c001f180:	e8 73 f3 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	a8 01                	test   al,0x1
c001f18a:	74 02                	je     c001f18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f18c:	b3 07                	mov    bl,0x7
c001f18e:	a8 02                	test   al,0x2
c001f190:	74 02                	je     c001f194 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f192:	b3 03                	mov    bl,0x3
c001f194:	a8 04                	test   al,0x4
c001f196:	74 02                	je     c001f19a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f198:	b3 14                	mov    bl,0x14
c001f19a:	a8 08                	test   al,0x8
c001f19c:	74 02                	je     c001f1a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f19e:	b3 03                	mov    bl,0x3
c001f1a0:	a8 10                	test   al,0x10
c001f1a2:	74 02                	je     c001f1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f1a4:	b3 15                	mov    bl,0x15
c001f1a6:	a8 20                	test   al,0x20
c001f1a8:	74 02                	je     c001f1ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f1aa:	b3 03                	mov    bl,0x3
c001f1ac:	a8 40                	test   al,0x40
c001f1ae:	74 02                	je     c001f1b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f1b0:	b3 16                	mov    bl,0x16
c001f1b2:	a8 80                	test   al,0x80
c001f1b4:	74 18                	je     c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f1b6:	b3 0d                	mov    bl,0xd
c001f1b8:	eb 14                	jmp    c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f1ba:	83 ff 03             	cmp    edi,0x3
c001f1bd:	74 0d                	je     c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f1bf:	83 ff 04             	cmp    edi,0x4
c001f1c2:	75 0a                	jne    c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f1c4:	b3 08                	mov    bl,0x8
c001f1c6:	eb 06                	jmp    c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f1c8:	b3 13                	mov    bl,0x13
c001f1ca:	eb 02                	jmp    c001f1ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f1cc:	b3 17                	mov    bl,0x17
c001f1ce:	83 c4 1c             	add    esp,0x1c
c001f1d1:	88 d8                	mov    al,bl
c001f1d3:	5b                   	pop    ebx
c001f1d4:	5e                   	pop    esi
c001f1d5:	5f                   	pop    edi
c001f1d6:	5d                   	pop    ebp
c001f1d7:	c3                   	ret    

c001f1d8 <IDE::polling(unsigned char, unsigned int)>:
c001f1d8:	57                   	push   edi
c001f1d9:	56                   	push   esi
c001f1da:	53                   	push   ebx
c001f1db:	bb 04 00 00 00       	mov    ebx,0x4
c001f1e0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f1e4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f1e9:	52                   	push   edx
c001f1ea:	6a 0c                	push   0xc
c001f1ec:	56                   	push   esi
c001f1ed:	57                   	push   edi
c001f1ee:	e8 05 f3 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001f1f3:	83 c4 10             	add    esp,0x10
c001f1f6:	4b                   	dec    ebx
c001f1f7:	75 f0                	jne    c001f1e9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f1f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f1fe:	50                   	push   eax
c001f1ff:	6a 0c                	push   0xc
c001f201:	56                   	push   esi
c001f202:	57                   	push   edi
c001f203:	e8 f0 f2 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001f208:	83 c4 10             	add    esp,0x10
c001f20b:	a8 01                	test   al,0x1
c001f20d:	75 17                	jne    c001f226 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f20f:	a8 20                	test   al,0x20
c001f211:	75 0f                	jne    c001f222 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f213:	4b                   	dec    ebx
c001f214:	74 10                	je     c001f226 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f216:	a8 80                	test   al,0x80
c001f218:	75 e4                	jne    c001f1fe <IDE::polling(unsigned char, unsigned int)+0x26>
c001f21a:	a8 08                	test   al,0x8
c001f21c:	74 e0                	je     c001f1fe <IDE::polling(unsigned char, unsigned int)+0x26>
c001f21e:	31 c0                	xor    eax,eax
c001f220:	eb 06                	jmp    c001f228 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f222:	b0 01                	mov    al,0x1
c001f224:	eb 02                	jmp    c001f228 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f226:	b0 02                	mov    al,0x2
c001f228:	5b                   	pop    ebx
c001f229:	5e                   	pop    esi
c001f22a:	5f                   	pop    edi
c001f22b:	c3                   	ret    

c001f22c <SATABus::close(int, int, void*)>:
c001f22c:	31 c0                	xor    eax,eax
c001f22e:	c3                   	ret    
c001f22f:	90                   	nop

c001f230 <SATABus::detect()>:
c001f230:	c3                   	ret    
c001f231:	90                   	nop

c001f232 <SATABus::SATABus()>:
c001f232:	83 ec 0c             	sub    esp,0xc
c001f235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f239:	83 ec 08             	sub    esp,0x8
c001f23c:	68 a0 62 02 c0       	push   0xc00262a0
c001f241:	50                   	push   eax
c001f242:	e8 e5 aa fe ff       	call   c0009d2c <HardDiskController::HardDiskController(char const*)>
c001f247:	83 c4 10             	add    esp,0x10
c001f24a:	ba cc 62 02 c0       	mov    edx,0xc00262cc
c001f24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f253:	89 10                	mov    DWORD PTR [eax],edx
c001f255:	83 ec 0c             	sub    esp,0xc
c001f258:	6a 50                	push   0x50
c001f25a:	e8 c7 0e ff ff       	call   c0010126 <Phys::allocateContiguousPages(int)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	89 c2                	mov    edx,eax
c001f264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f268:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f26e:	83 ec 0c             	sub    esp,0xc
c001f271:	6a 50                	push   0x50
c001f273:	e8 45 40 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c001f278:	83 c4 10             	add    esp,0x10
c001f27b:	89 c2                	mov    edx,eax
c001f27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f281:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f287:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c001f28c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f290:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f29a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f2a0:	83 ec 0c             	sub    esp,0xc
c001f2a3:	6a 03                	push   0x3
c001f2a5:	6a 50                	push   0x50
c001f2a7:	51                   	push   ecx
c001f2a8:	52                   	push   edx
c001f2a9:	50                   	push   eax
c001f2aa:	e8 e1 48 ff ff       	call   c0013b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f2af:	83 c4 20             	add    esp,0x20
c001f2b2:	90                   	nop
c001f2b3:	83 c4 0c             	add    esp,0xc
c001f2b6:	c3                   	ret    
c001f2b7:	90                   	nop

c001f2b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f2b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2bc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f2bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f2c2:	09 c2                	or     edx,eax
c001f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2d0:	31 c0                	xor    eax,eax
c001f2d2:	c1 e9 08             	shr    ecx,0x8
c001f2d5:	83 e1 0f             	and    ecx,0xf
c001f2d8:	39 c8                	cmp    eax,ecx
c001f2da:	74 0a                	je     c001f2e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f2dc:	f6 c2 01             	test   dl,0x1
c001f2df:	74 08                	je     c001f2e9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f2e1:	d1 ea                	shr    edx,1
c001f2e3:	40                   	inc    eax
c001f2e4:	eb f2                	jmp    c001f2d8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f2e6:	83 c8 ff             	or     eax,0xffffffff
c001f2e9:	c3                   	ret    

c001f2ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f2ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2ee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f2f1:	89 c2                	mov    edx,eax
c001f2f3:	c1 ea 08             	shr    edx,0x8
c001f2f6:	83 e2 0f             	and    edx,0xf
c001f2f9:	4a                   	dec    edx
c001f2fa:	75 32                	jne    c001f32e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2fc:	83 e0 0f             	and    eax,0xf
c001f2ff:	83 f8 03             	cmp    eax,0x3
c001f302:	75 2a                	jne    c001f32e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f304:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f307:	b8 02 00 00 00       	mov    eax,0x2
c001f30c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f312:	74 1c                	je     c001f330 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f314:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f31a:	b8 04 00 00 00       	mov    eax,0x4
c001f31f:	74 0f                	je     c001f330 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f321:	31 c0                	xor    eax,eax
c001f323:	83 fa 03             	cmp    edx,0x3
c001f326:	0f 94 c0             	sete   al
c001f329:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f32d:	c3                   	ret    
c001f32e:	31 c0                	xor    eax,eax
c001f330:	c3                   	ret    
c001f331:	90                   	nop

c001f332 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f332:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f336:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f339:	0f ba e2 0f          	bt     edx,0xf
c001f33d:	72 f7                	jb     c001f336 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f33f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f342:	83 ca 10             	or     edx,0x10
c001f345:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f348:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f34b:	83 ca 01             	or     edx,0x1
c001f34e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f351:	c3                   	ret    

c001f352 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f352:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f356:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f359:	83 e2 fe             	and    edx,0xfffffffe
c001f35c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f35f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f362:	83 e2 ef             	and    edx,0xffffffef
c001f365:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f368:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f36b:	0f ba e2 0e          	bt     edx,0xe
c001f36f:	72 f7                	jb     c001f368 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f371:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f374:	0f ba e2 0f          	bt     edx,0xf
c001f378:	72 ee                	jb     c001f368 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f37a:	c3                   	ret    
c001f37b:	90                   	nop

c001f37c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f37c:	55                   	push   ebp
c001f37d:	57                   	push   edi
c001f37e:	56                   	push   esi
c001f37f:	53                   	push   ebx
c001f380:	83 ec 1c             	sub    esp,0x1c
c001f383:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f387:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f38b:	53                   	push   ebx
c001f38c:	57                   	push   edi
c001f38d:	e8 c0 ff ff ff       	call   c001f352 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f392:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f396:	83 ec 0c             	sub    esp,0xc
c001f399:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f39f:	c1 e5 0a             	shl    ebp,0xa
c001f3a2:	01 e8                	add    eax,ebp
c001f3a4:	89 03                	mov    DWORD PTR [ebx],eax
c001f3a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3a8:	68 00 04 00 00       	push   0x400
c001f3ad:	6a 00                	push   0x0
c001f3af:	50                   	push   eax
c001f3b0:	e8 3b 11 fe ff       	call   c00004f0 <memset>
c001f3b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f3bb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f3bf:	83 c4 1c             	add    esp,0x1c
c001f3c2:	01 e8                	add    eax,ebp
c001f3c4:	89 03                	mov    DWORD PTR [ebx],eax
c001f3c6:	c1 e6 08             	shl    esi,0x8
c001f3c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f3d0:	81 c6 00 80 00 00    	add    esi,0x8000
c001f3d6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f3dc:	01 f0                	add    eax,esi
c001f3de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f3e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f3e4:	68 00 01 00 00       	push   0x100
c001f3e9:	6a 00                	push   0x0
c001f3eb:	50                   	push   eax
c001f3ec:	e8 ff 10 fe ff       	call   c00004f0 <memset>
c001f3f1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f3f7:	31 d2                	xor    edx,edx
c001f3f9:	01 f0                	add    eax,esi
c001f3fb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f3fe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f405:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f40b:	01 ee                	add    esi,ebp
c001f40d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	c1 e5 0d             	shl    ebp,0xd
c001f417:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f41d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f423:	83 c6 20             	add    esi,0x20
c001f426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f42a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f430:	01 e8                	add    eax,ebp
c001f432:	01 d0                	add    eax,edx
c001f434:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f437:	52                   	push   edx
c001f438:	68 00 01 00 00       	push   0x100
c001f43d:	6a 00                	push   0x0
c001f43f:	50                   	push   eax
c001f440:	e8 ab 10 fe ff       	call   c00004f0 <memset>
c001f445:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f44b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f452:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f456:	83 c4 10             	add    esp,0x10
c001f459:	01 e8                	add    eax,ebp
c001f45b:	01 d0                	add    eax,edx
c001f45d:	81 c2 00 01 00 00    	add    edx,0x100
c001f463:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f466:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f46c:	75 af                	jne    c001f41d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f46e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f475:	50                   	push   eax
c001f476:	50                   	push   eax
c001f477:	53                   	push   ebx
c001f478:	57                   	push   edi
c001f479:	e8 b4 fe ff ff       	call   c001f332 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f47e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f485:	83 c4 2c             	add    esp,0x2c
c001f488:	5b                   	pop    ebx
c001f489:	5e                   	pop    esi
c001f48a:	5f                   	pop    edi
c001f48b:	5d                   	pop    ebp
c001f48c:	c3                   	ret    
c001f48d:	90                   	nop

c001f48e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f48e:	55                   	push   ebp
c001f48f:	57                   	push   edi
c001f490:	56                   	push   esi
c001f491:	53                   	push   ebx
c001f492:	31 db                	xor    ebx,ebx
c001f494:	83 ec 0c             	sub    esp,0xc
c001f497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f49b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f49f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f4a2:	f7 c7 01 00 00 00    	test   edi,0x1
c001f4a8:	74 7a                	je     c001f524 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f4aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f4ae:	89 d8                	mov    eax,ebx
c001f4b0:	c1 e0 07             	shl    eax,0x7
c001f4b3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f4ba:	55                   	push   ebp
c001f4bb:	56                   	push   esi
c001f4bc:	e8 29 fe ff ff       	call   c001f2ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f4c1:	5a                   	pop    edx
c001f4c2:	59                   	pop    ecx
c001f4c3:	83 f8 01             	cmp    eax,0x1
c001f4c6:	75 21                	jne    c001f4e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f4c8:	50                   	push   eax
c001f4c9:	53                   	push   ebx
c001f4ca:	55                   	push   ebp
c001f4cb:	56                   	push   esi
c001f4cc:	e8 ab fe ff ff       	call   c001f37c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4d1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f4d8:	e8 2b 06 ff ff       	call   c000fb08 <malloc>
c001f4dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e0:	89 c5                	mov    ebp,eax
c001f4e2:	e8 37 0f 00 00       	call   c002041e <SATA::SATA()>
c001f4e7:	eb 24                	jmp    c001f50d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f4e9:	83 f8 04             	cmp    eax,0x4
c001f4ec:	75 36                	jne    c001f524 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f4ee:	51                   	push   ecx
c001f4ef:	53                   	push   ebx
c001f4f0:	55                   	push   ebp
c001f4f1:	56                   	push   esi
c001f4f2:	e8 85 fe ff ff       	call   c001f37c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4f7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4fe:	e8 05 06 ff ff       	call   c000fb08 <malloc>
c001f503:	89 04 24             	mov    DWORD PTR [esp],eax
c001f506:	89 c5                	mov    ebp,eax
c001f508:	e8 a7 12 00 00       	call   c00207b4 <SATAPI::SATAPI()>
c001f50d:	58                   	pop    eax
c001f50e:	5a                   	pop    edx
c001f50f:	55                   	push   ebp
c001f510:	56                   	push   esi
c001f511:	e8 bc a4 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c001f516:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f519:	56                   	push   esi
c001f51a:	6a 00                	push   0x0
c001f51c:	53                   	push   ebx
c001f51d:	55                   	push   ebp
c001f51e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f521:	83 c4 20             	add    esp,0x20
c001f524:	d1 ef                	shr    edi,1
c001f526:	43                   	inc    ebx
c001f527:	83 fb 20             	cmp    ebx,0x20
c001f52a:	0f 85 72 ff ff ff    	jne    c001f4a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f530:	83 c4 0c             	add    esp,0xc
c001f533:	5b                   	pop    ebx
c001f534:	5e                   	pop    esi
c001f535:	5f                   	pop    edi
c001f536:	5d                   	pop    ebp
c001f537:	c3                   	ret    

c001f538 <SATABus::open(int, int, void*)>:
c001f538:	53                   	push   ebx
c001f539:	83 ec 08             	sub    esp,0x8
c001f53c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f540:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f546:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f54c:	e8 07 78 ff ff       	call   c0016d58 <KeDisablePreemption()>
c001f551:	52                   	push   edx
c001f552:	52                   	push   edx
c001f553:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f559:	53                   	push   ebx
c001f55a:	e8 2f ff ff ff       	call   c001f48e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f55f:	e8 1c 78 ff ff       	call   c0016d80 <KeRestorePreemption()>
c001f564:	83 c4 18             	add    esp,0x18
c001f567:	31 c0                	xor    eax,eax
c001f569:	5b                   	pop    ebx
c001f56a:	c3                   	ret    
c001f56b:	90                   	nop

c001f56c <ATA::close(int, int, void*)>:
c001f56c:	83 ec 0c             	sub    esp,0xc
c001f56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f573:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f579:	85 c0                	test   eax,eax
c001f57b:	74 0c                	je     c001f589 <ATA::close(int, int, void*)+0x1d>
c001f57d:	8b 10                	mov    edx,DWORD PTR [eax]
c001f57f:	83 ec 0c             	sub    esp,0xc
c001f582:	50                   	push   eax
c001f583:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f586:	83 c4 10             	add    esp,0x10
c001f589:	31 c0                	xor    eax,eax
c001f58b:	83 c4 0c             	add    esp,0xc
c001f58e:	c3                   	ret    
c001f58f:	90                   	nop

c001f590 <ATA::powerSaving(PowerSavingLevel)>:
c001f590:	c3                   	ret    
c001f591:	90                   	nop

c001f592 <ATA::ATA()>:
c001f592:	83 ec 0c             	sub    esp,0xc
c001f595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f599:	83 ec 04             	sub    esp,0x4
c001f59c:	68 00 02 00 00       	push   0x200
c001f5a1:	68 4d 64 02 c0       	push   0xc002644d
c001f5a6:	50                   	push   eax
c001f5a7:	e8 0a a8 fe ff       	call   c0009db6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5ac:	83 c4 10             	add    esp,0x10
c001f5af:	ba b4 63 02 c0       	mov    edx,0xc00263b4
c001f5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b8:	89 10                	mov    DWORD PTR [eax],edx
c001f5ba:	90                   	nop
c001f5bb:	83 c4 0c             	add    esp,0xc
c001f5be:	c3                   	ret    
c001f5bf:	90                   	nop

c001f5c0 <ATA::flush(bool)>:
c001f5c0:	53                   	push   ebx
c001f5c1:	83 ec 08             	sub    esp,0x8
c001f5c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f5c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5cd:	83 f8 01             	cmp    eax,0x1
c001f5d0:	19 c0                	sbb    eax,eax
c001f5d2:	83 e0 fd             	and    eax,0xfffffffd
c001f5d5:	05 ea 00 00 00       	add    eax,0xea
c001f5da:	50                   	push   eax
c001f5db:	6a 07                	push   0x7
c001f5dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5e4:	50                   	push   eax
c001f5e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5eb:	e8 48 ee ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5f0:	83 c4 0c             	add    esp,0xc
c001f5f3:	6a 00                	push   0x0
c001f5f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5fc:	50                   	push   eax
c001f5fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f603:	e8 d0 fb ff ff       	call   c001f1d8 <IDE::polling(unsigned char, unsigned int)>
c001f608:	83 c4 18             	add    esp,0x18
c001f60b:	5b                   	pop    ebx
c001f60c:	c3                   	ret    
c001f60d:	90                   	nop

c001f60e <ATA::readyForCommand()>:
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	31 db                	xor    ebx,ebx
c001f612:	50                   	push   eax
c001f613:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f617:	50                   	push   eax
c001f618:	6a 0c                	push   0xc
c001f61a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f621:	50                   	push   eax
c001f622:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f628:	e8 cb ee ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001f62d:	83 c4 10             	add    esp,0x10
c001f630:	a8 88                	test   al,0x88
c001f632:	74 20                	je     c001f654 <ATA::readyForCommand()+0x46>
c001f634:	43                   	inc    ebx
c001f635:	83 fb 63             	cmp    ebx,0x63
c001f638:	7e dd                	jle    c001f617 <ATA::readyForCommand()+0x9>
c001f63a:	51                   	push   ecx
c001f63b:	51                   	push   ecx
c001f63c:	6a 00                	push   0x0
c001f63e:	6a 0a                	push   0xa
c001f640:	e8 f7 7b ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c001f645:	83 c4 10             	add    esp,0x10
c001f648:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f64e:	75 c7                	jne    c001f617 <ATA::readyForCommand()+0x9>
c001f650:	31 c0                	xor    eax,eax
c001f652:	eb 02                	jmp    c001f656 <ATA::readyForCommand()+0x48>
c001f654:	b0 01                	mov    al,0x1
c001f656:	5a                   	pop    edx
c001f657:	5b                   	pop    ebx
c001f658:	5e                   	pop    esi
c001f659:	c3                   	ret    

c001f65a <ATA::access(unsigned long long, int, void*, bool)>:
c001f65a:	55                   	push   ebp
c001f65b:	57                   	push   edi
c001f65c:	56                   	push   esi
c001f65d:	53                   	push   ebx
c001f65e:	83 ec 2c             	sub    esp,0x2c
c001f661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f665:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f669:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f66d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f671:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f675:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f679:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f67d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f683:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f687:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f68d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f691:	c1 e0 06             	shl    eax,0x6
c001f694:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f69c:	74 5b                	je     c001f6f9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001f69e:	89 fa                	mov    edx,edi
c001f6a0:	89 f0                	mov    eax,esi
c001f6a2:	c1 ea 1c             	shr    edx,0x1c
c001f6a5:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001f6a9:	89 d1                	mov    ecx,edx
c001f6ab:	09 c1                	or     ecx,eax
c001f6ad:	74 25                	je     c001f6d4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f6af:	31 ed                	xor    ebp,ebp
c001f6b1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f6b8:	89 fa                	mov    edx,edi
c001f6ba:	89 f0                	mov    eax,esi
c001f6bc:	0f ad d0             	shrd   eax,edx,cl
c001f6bf:	d3 ea                	shr    edx,cl
c001f6c1:	f6 c1 20             	test   cl,0x20
c001f6c4:	74 02                	je     c001f6c8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f6c6:	89 d0                	mov    eax,edx
c001f6c8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f6cc:	45                   	inc    ebp
c001f6cd:	83 fd 06             	cmp    ebp,0x6
c001f6d0:	75 df                	jne    c001f6b1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f6d2:	eb 71                	jmp    c001f745 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001f6d4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f6d9:	89 f0                	mov    eax,esi
c001f6db:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6e2:	0f ac f8 10          	shrd   eax,edi,0x10
c001f6e6:	bf 01 00 00 00       	mov    edi,0x1
c001f6eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6ef:	c1 ee 18             	shr    esi,0x18
c001f6f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6f7:	eb 53                	jmp    c001f74c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f6f9:	6a 00                	push   0x0
c001f6fb:	6a 3f                	push   0x3f
c001f6fd:	57                   	push   edi
c001f6fe:	56                   	push   esi
c001f6ff:	e8 10 25 00 00       	call   c0021c14 <__umoddi3>
c001f704:	83 c4 10             	add    esp,0x10
c001f707:	40                   	inc    eax
c001f708:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f70c:	6a 00                	push   0x0
c001f70e:	68 f0 03 00 00       	push   0x3f0
c001f713:	57                   	push   edi
c001f714:	56                   	push   esi
c001f715:	e8 fa 23 00 00       	call   c0021b14 <__udivdi3>
c001f71a:	83 c4 10             	add    esp,0x10
c001f71d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f722:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f729:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f72e:	6a 00                	push   0x0
c001f730:	6a 3f                	push   0x3f
c001f732:	57                   	push   edi
c001f733:	31 ff                	xor    edi,edi
c001f735:	56                   	push   esi
c001f736:	e8 d9 23 00 00       	call   c0021b14 <__udivdi3>
c001f73b:	83 c4 10             	add    esp,0x10
c001f73e:	83 e0 0f             	and    eax,0xf
c001f741:	89 c6                	mov    esi,eax
c001f743:	eb 07                	jmp    c001f74c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f745:	31 f6                	xor    esi,esi
c001f747:	bf 02 00 00 00       	mov    edi,0x2
c001f74c:	55                   	push   ebp
c001f74d:	6a 00                	push   0x0
c001f74f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f756:	50                   	push   eax
c001f757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f75b:	e8 e8 ee ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001f760:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f763:	e8 a6 fe ff ff       	call   c001f60e <ATA::readyForCommand()>
c001f768:	83 c4 10             	add    esp,0x10
c001f76b:	84 c0                	test   al,al
c001f76d:	75 0a                	jne    c001f779 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001f76f:	be 01 00 00 00       	mov    esi,0x1
c001f774:	e9 df 02 00 00       	jmp    c001fa58 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f779:	fa                   	cli    
c001f77a:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001f780:	f7 c7 03 00 00 00    	test   edi,0x3
c001f786:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f78c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f792:	75 0a                	jne    c001f79e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001f794:	c1 e0 04             	shl    eax,0x4
c001f797:	09 c6                	or     esi,eax
c001f799:	83 ce a0             	or     esi,0xffffffa0
c001f79c:	eb 08                	jmp    c001f7a6 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001f79e:	c1 e0 04             	shl    eax,0x4
c001f7a1:	09 c6                	or     esi,eax
c001f7a3:	83 ce e0             	or     esi,0xffffffe0
c001f7a6:	89 f0                	mov    eax,esi
c001f7a8:	0f b6 d2             	movzx  edx,dl
c001f7ab:	0f b6 f0             	movzx  esi,al
c001f7ae:	56                   	push   esi
c001f7af:	6a 06                	push   0x6
c001f7b1:	52                   	push   edx
c001f7b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7b8:	e8 7b ec ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7bd:	83 c4 10             	add    esp,0x10
c001f7c0:	6a 00                	push   0x0
c001f7c2:	6a 01                	push   0x1
c001f7c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7cb:	50                   	push   eax
c001f7cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7d2:	e8 61 ec ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d7:	89 f8                	mov    eax,edi
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	0f b6 f0             	movzx  esi,al
c001f7df:	83 fe 02             	cmp    esi,0x2
c001f7e2:	75 6e                	jne    c001f852 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f7e4:	6a 00                	push   0x0
c001f7e6:	6a 08                	push   0x8
c001f7e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7ef:	50                   	push   eax
c001f7f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7f6:	e8 3d ec ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7fb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f800:	50                   	push   eax
c001f801:	6a 09                	push   0x9
c001f803:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f80a:	50                   	push   eax
c001f80b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f811:	e8 22 ec ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f816:	83 c4 20             	add    esp,0x20
c001f819:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f81e:	50                   	push   eax
c001f81f:	6a 0a                	push   0xa
c001f821:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f828:	50                   	push   eax
c001f829:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f82f:	e8 04 ec ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f834:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f839:	50                   	push   eax
c001f83a:	6a 0b                	push   0xb
c001f83c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f843:	50                   	push   eax
c001f844:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f84a:	e8 e9 eb ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f84f:	83 c4 20             	add    esp,0x20
c001f852:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f857:	50                   	push   eax
c001f858:	6a 02                	push   0x2
c001f85a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f861:	50                   	push   eax
c001f862:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f868:	e8 cb eb ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f86d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f872:	50                   	push   eax
c001f873:	6a 03                	push   0x3
c001f875:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f87c:	50                   	push   eax
c001f87d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f883:	e8 b0 eb ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f888:	83 c4 20             	add    esp,0x20
c001f88b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f890:	50                   	push   eax
c001f891:	6a 04                	push   0x4
c001f893:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f89a:	50                   	push   eax
c001f89b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a1:	e8 92 eb ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8a6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f8ab:	50                   	push   eax
c001f8ac:	6a 05                	push   0x5
c001f8ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8b5:	50                   	push   eax
c001f8b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8bc:	e8 77 eb ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8c1:	83 c4 20             	add    esp,0x20
c001f8c4:	83 fe 02             	cmp    esi,0x2
c001f8c7:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001f8cc:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001f8d1:	85 c9                	test   ecx,ecx
c001f8d3:	74 07                	je     c001f8dc <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f8d5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8da:	75 45                	jne    c001f921 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001f8dc:	89 f8                	mov    eax,edi
c001f8de:	0f b6 f8             	movzx  edi,al
c001f8e1:	31 c0                	xor    eax,eax
c001f8e3:	4f                   	dec    edi
c001f8e4:	0f 94 c0             	sete   al
c001f8e7:	89 c6                	mov    esi,eax
c001f8e9:	75 0c                	jne    c001f8f7 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001f8eb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8f0:	b8 30 00 00 00       	mov    eax,0x30
c001f8f5:	75 2f                	jne    c001f926 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f8f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8fb:	83 f2 01             	xor    edx,0x1
c001f8fe:	85 c9                	test   ecx,ecx
c001f900:	74 09                	je     c001f90b <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001f902:	84 d2                	test   dl,dl
c001f904:	b8 24 00 00 00       	mov    eax,0x24
c001f909:	75 1b                	jne    c001f926 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f90b:	85 f6                	test   esi,esi
c001f90d:	0f 84 5c fe ff ff    	je     c001f76f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f913:	84 d2                	test   dl,dl
c001f915:	b8 20 00 00 00       	mov    eax,0x20
c001f91a:	75 0a                	jne    c001f926 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f91c:	e9 4e fe ff ff       	jmp    c001f76f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f921:	b8 34 00 00 00       	mov    eax,0x34
c001f926:	50                   	push   eax
c001f927:	6a 07                	push   0x7
c001f929:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f930:	50                   	push   eax
c001f931:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f937:	e8 fc ea ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f93c:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001f943:	83 c4 10             	add    esp,0x10
c001f946:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001f94d:	75 01                	jne    c001f950 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001f94f:	fb                   	sti    
c001f950:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f954:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001f959:	85 f6                	test   esi,esi
c001f95b:	0f 84 dd 00 00 00    	je     c001fa3e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f961:	57                   	push   edi
c001f962:	6a 01                	push   0x1
c001f964:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f96b:	50                   	push   eax
c001f96c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f972:	e8 61 f8 ff ff       	call   c001f1d8 <IDE::polling(unsigned char, unsigned int)>
c001f977:	83 c4 10             	add    esp,0x10
c001f97a:	0f b6 c0             	movzx  eax,al
c001f97d:	85 c0                	test   eax,eax
c001f97f:	74 23                	je     c001f9a4 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001f981:	50                   	push   eax
c001f982:	89 c6                	mov    esi,eax
c001f984:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f98b:	50                   	push   eax
c001f98c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f993:	50                   	push   eax
c001f994:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f99a:	e8 7f f7 ff ff       	call   c001f11e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f99f:	e9 b1 00 00 00       	jmp    c001fa55 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001f9a4:	85 ed                	test   ebp,ebp
c001f9a6:	74 49                	je     c001f9f1 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001f9a8:	fa                   	cli    
c001f9a9:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001f9af:	31 ff                	xor    edi,edi
c001f9b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f9b5:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001f9b9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001f9be:	51                   	push   ecx
c001f9bf:	51                   	push   ecx
c001f9c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9c7:	50                   	push   eax
c001f9c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9ce:	e8 53 ea ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c001f9d3:	89 c2                	mov    edx,eax
c001f9d5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001f9da:	66 ef                	out    dx,ax
c001f9dc:	47                   	inc    edi
c001f9dd:	83 c4 10             	add    esp,0x10
c001f9e0:	81 ff 00 01 00 00    	cmp    edi,0x100
c001f9e6:	75 c9                	jne    c001f9b1 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001f9e8:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001f9ef:	eb 35                	jmp    c001fa26 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001f9f1:	fa                   	cli    
c001f9f2:	52                   	push   edx
c001f9f3:	52                   	push   edx
c001f9f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9fb:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001fa01:	50                   	push   eax
c001fa02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa08:	e8 19 ea ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c001fa0d:	b9 00 01 00 00       	mov    ecx,0x100
c001fa12:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fa16:	89 c2                	mov    edx,eax
c001fa18:	fc                   	cld    
c001fa19:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fa1c:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001fa2d:	75 01                	jne    c001fa30 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001fa2f:	fb                   	sti    
c001fa30:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fa38:	4e                   	dec    esi
c001fa39:	e9 1b ff ff ff       	jmp    c001f959 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001fa3e:	31 f6                	xor    esi,esi
c001fa40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fa45:	74 11                	je     c001fa58 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fa47:	50                   	push   eax
c001fa48:	50                   	push   eax
c001fa49:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001fa4e:	50                   	push   eax
c001fa4f:	53                   	push   ebx
c001fa50:	e8 6b fb ff ff       	call   c001f5c0 <ATA::flush(bool)>
c001fa55:	83 c4 10             	add    esp,0x10
c001fa58:	83 c4 2c             	add    esp,0x2c
c001fa5b:	89 f0                	mov    eax,esi
c001fa5d:	5b                   	pop    ebx
c001fa5e:	5e                   	pop    esi
c001fa5f:	5f                   	pop    edi
c001fa60:	5d                   	pop    ebp
c001fa61:	c3                   	ret    

c001fa62 <ATA::read(unsigned long long, int, void*)>:
c001fa62:	57                   	push   edi
c001fa63:	b8 04 00 00 00       	mov    eax,0x4
c001fa68:	56                   	push   esi
c001fa69:	53                   	push   ebx
c001fa6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa76:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa7a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa7d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa83:	77 25                	ja     c001faaa <ATA::read(unsigned long long, int, void*)+0x48>
c001fa85:	85 f6                	test   esi,esi
c001fa87:	b8 06 00 00 00       	mov    eax,0x6
c001fa8c:	74 1c                	je     c001faaa <ATA::read(unsigned long long, int, void*)+0x48>
c001fa8e:	50                   	push   eax
c001fa8f:	50                   	push   eax
c001fa90:	6a 00                	push   0x0
c001fa92:	56                   	push   esi
c001fa93:	52                   	push   edx
c001fa94:	53                   	push   ebx
c001fa95:	51                   	push   ecx
c001fa96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa9a:	e8 bb fb ff ff       	call   c001f65a <ATA::access(unsigned long long, int, void*, bool)>
c001fa9f:	83 c4 20             	add    esp,0x20
c001faa2:	85 c0                	test   eax,eax
c001faa4:	0f 95 c0             	setne  al
c001faa7:	0f b6 c0             	movzx  eax,al
c001faaa:	5b                   	pop    ebx
c001faab:	5e                   	pop    esi
c001faac:	5f                   	pop    edi
c001faad:	c3                   	ret    

c001faae <ATA::write(unsigned long long, int, void*)>:
c001faae:	57                   	push   edi
c001faaf:	b8 04 00 00 00       	mov    eax,0x4
c001fab4:	56                   	push   esi
c001fab5:	53                   	push   ebx
c001fab6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001faba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fabe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fac2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fac6:	8d 7a ff             	lea    edi,[edx-0x1]
c001fac9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001facf:	77 25                	ja     c001faf6 <ATA::write(unsigned long long, int, void*)+0x48>
c001fad1:	85 f6                	test   esi,esi
c001fad3:	b8 06 00 00 00       	mov    eax,0x6
c001fad8:	74 1c                	je     c001faf6 <ATA::write(unsigned long long, int, void*)+0x48>
c001fada:	50                   	push   eax
c001fadb:	50                   	push   eax
c001fadc:	6a 01                	push   0x1
c001fade:	56                   	push   esi
c001fadf:	52                   	push   edx
c001fae0:	53                   	push   ebx
c001fae1:	51                   	push   ecx
c001fae2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fae6:	e8 6f fb ff ff       	call   c001f65a <ATA::access(unsigned long long, int, void*, bool)>
c001faeb:	83 c4 20             	add    esp,0x20
c001faee:	85 c0                	test   eax,eax
c001faf0:	0f 95 c0             	setne  al
c001faf3:	0f b6 c0             	movzx  eax,al
c001faf6:	5b                   	pop    ebx
c001faf7:	5e                   	pop    esi
c001faf8:	5f                   	pop    edi
c001faf9:	c3                   	ret    

c001fafa <ATA::detectCHS()>:
c001fafa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fafe:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fb04:	c1 e0 06             	shl    eax,0x6
c001fb07:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fb0d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fb17:	c7 44 24 04 f0 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc00262f0
c001fb1f:	e9 2a 03 ff ff       	jmp    c000fe4e <KePanic(char const*)>

c001fb24 <ATA::open(int, int, void*)>:
c001fb24:	53                   	push   ebx
c001fb25:	83 ec 08             	sub    esp,0x8
c001fb28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb34:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fb3a:	c1 e0 06             	shl    eax,0x6
c001fb3d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fb43:	01 d0                	add    eax,edx
c001fb45:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fb4c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb52:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb59:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb63:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb6a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb70:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb77:	75 0c                	jne    c001fb85 <ATA::open(int, int, void*)+0x61>
c001fb79:	83 ec 0c             	sub    esp,0xc
c001fb7c:	53                   	push   ebx
c001fb7d:	e8 78 ff ff ff       	call   c001fafa <ATA::detectCHS()>
c001fb82:	83 c4 10             	add    esp,0x10
c001fb85:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb8b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb91:	c1 e0 06             	shl    eax,0x6
c001fb94:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb9b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fba5:	d1 e8                	shr    eax,1
c001fba7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fbad:	6a 04                	push   0x4
c001fbaf:	6a 0c                	push   0xc
c001fbb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbb8:	50                   	push   eax
c001fbb9:	52                   	push   edx
c001fbba:	e8 79 e8 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbbf:	90                   	nop
c001fbc0:	90                   	nop
c001fbc1:	6a 00                	push   0x0
c001fbc3:	6a 0c                	push   0xc
c001fbc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbcc:	50                   	push   eax
c001fbcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbd3:	e8 60 e8 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbd8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fbde:	83 c4 20             	add    esp,0x20
c001fbe1:	c1 e0 06             	shl    eax,0x6
c001fbe4:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001fbea:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001fbf1:	0f 84 00 01 00 00    	je     c001fcf7 <ATA::open(int, int, void*)+0x1d3>
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	6a 08                	push   0x8
c001fbfc:	e8 25 05 ff ff       	call   c0010126 <Phys::allocateContiguousPages(int)>
c001fc01:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fc07:	c7 04 24 02 63 02 c0 	mov    DWORD PTR [esp],0xc0026302
c001fc0e:	e8 3b 73 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fc13:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001fc1a:	e8 9e 36 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c001fc1f:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fc25:	6a 03                	push   0x3
c001fc27:	50                   	push   eax
c001fc28:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fc2e:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001fc34:	e8 5d 3d ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fc39:	83 c4 20             	add    esp,0x20
c001fc3c:	e8 07 04 ff ff       	call   c0010048 <Phys::allocatePage()>
c001fc41:	83 ec 0c             	sub    esp,0xc
c001fc44:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001fc4a:	6a 01                	push   0x1
c001fc4c:	e8 6c 36 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c001fc51:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001fc57:	6a 03                	push   0x3
c001fc59:	50                   	push   eax
c001fc5a:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001fc60:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001fc66:	e8 2b 3d ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fc6b:	83 c4 14             	add    esp,0x14
c001fc6e:	68 3b 63 02 c0       	push   0xc002633b
c001fc73:	e8 d6 72 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fc78:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001fc7f:	50                   	push   eax
c001fc80:	6a 12                	push   0x12
c001fc82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc89:	50                   	push   eax
c001fc8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc90:	e8 a3 e7 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc95:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001fc9b:	83 c4 20             	add    esp,0x20
c001fc9e:	0f b6 c4             	movzx  eax,ah
c001fca1:	50                   	push   eax
c001fca2:	6a 13                	push   0x13
c001fca4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcab:	50                   	push   eax
c001fcac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcb2:	e8 81 e7 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcb7:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fcbe:	50                   	push   eax
c001fcbf:	6a 14                	push   0x14
c001fcc1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcc8:	50                   	push   eax
c001fcc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fccf:	e8 64 e7 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcd4:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001fcdb:	83 c4 20             	add    esp,0x20
c001fcde:	50                   	push   eax
c001fcdf:	6a 15                	push   0x15
c001fce1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fce8:	50                   	push   eax
c001fce9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcef:	e8 44 e7 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcf4:	83 c4 10             	add    esp,0x10
c001fcf7:	83 ec 0c             	sub    esp,0xc
c001fcfa:	53                   	push   ebx
c001fcfb:	e8 1e a1 fe ff       	call   c0009e1e <PhysicalDisk::startCache()>
c001fd00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd03:	e8 b6 af fe ff       	call   c000acbe <createPartitionsForDisk(PhysicalDisk*)>
c001fd08:	83 c4 18             	add    esp,0x18
c001fd0b:	31 c0                	xor    eax,eax
c001fd0d:	5b                   	pop    ebx
c001fd0e:	c3                   	ret    

c001fd0f <combineCharAndColour(char, unsigned char)>:
c001fd0f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fd14:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001fd1a:	c1 e0 08             	shl    eax,0x8
c001fd1d:	09 d0                	or     eax,edx
c001fd1f:	c3                   	ret    

c001fd20 <combineColours(unsigned char, unsigned char)>:
c001fd20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fd25:	c1 e0 04             	shl    eax,0x4
c001fd28:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001fd2c:	c3                   	ret    
c001fd2d:	90                   	nop

c001fd2e <ATAPI::write(unsigned long long, int, void*)>:
c001fd2e:	b8 03 00 00 00       	mov    eax,0x3
c001fd33:	c3                   	ret    

c001fd34 <ATAPI::close(int, int, void*)>:
c001fd34:	83 ec 0c             	sub    esp,0xc
c001fd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd41:	85 c0                	test   eax,eax
c001fd43:	74 0c                	je     c001fd51 <ATAPI::close(int, int, void*)+0x1d>
c001fd45:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd47:	83 ec 0c             	sub    esp,0xc
c001fd4a:	50                   	push   eax
c001fd4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd4e:	83 c4 10             	add    esp,0x10
c001fd51:	31 c0                	xor    eax,eax
c001fd53:	83 c4 0c             	add    esp,0xc
c001fd56:	c3                   	ret    
c001fd57:	90                   	nop

c001fd58 <ATAPI::ATAPI()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5f:	83 ec 04             	sub    esp,0x4
c001fd62:	68 00 08 00 00       	push   0x800
c001fd67:	68 ed 64 02 c0       	push   0xc00264ed
c001fd6c:	50                   	push   eax
c001fd6d:	e8 44 a0 fe ff       	call   c0009db6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd72:	83 c4 10             	add    esp,0x10
c001fd75:	ba fc 63 02 c0       	mov    edx,0xc00263fc
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	89 10                	mov    DWORD PTR [eax],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    
c001fd85:	90                   	nop

c001fd86 <ATAPI::readyForCommand()>:
c001fd86:	56                   	push   esi
c001fd87:	53                   	push   ebx
c001fd88:	31 db                	xor    ebx,ebx
c001fd8a:	50                   	push   eax
c001fd8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd8f:	50                   	push   eax
c001fd90:	6a 0c                	push   0xc
c001fd92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd99:	50                   	push   eax
c001fd9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fda0:	e8 53 e7 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001fda5:	83 c4 10             	add    esp,0x10
c001fda8:	a8 88                	test   al,0x88
c001fdaa:	74 26                	je     c001fdd2 <ATAPI::readyForCommand()+0x4c>
c001fdac:	43                   	inc    ebx
c001fdad:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fdb3:	7e da                	jle    c001fd8f <ATAPI::readyForCommand()+0x9>
c001fdb5:	51                   	push   ecx
c001fdb6:	51                   	push   ecx
c001fdb7:	6a 00                	push   0x0
c001fdb9:	68 5e 01 00 00       	push   0x15e
c001fdbe:	e8 79 74 ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fdcc:	75 c1                	jne    c001fd8f <ATAPI::readyForCommand()+0x9>
c001fdce:	31 c0                	xor    eax,eax
c001fdd0:	eb 02                	jmp    c001fdd4 <ATAPI::readyForCommand()+0x4e>
c001fdd2:	b0 01                	mov    al,0x1
c001fdd4:	5a                   	pop    edx
c001fdd5:	5b                   	pop    ebx
c001fdd6:	5e                   	pop    esi
c001fdd7:	c3                   	ret    

c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fdd8:	55                   	push   ebp
c001fdd9:	57                   	push   edi
c001fdda:	56                   	push   esi
c001fddb:	53                   	push   ebx
c001fddc:	83 ec 20             	sub    esp,0x20
c001fddf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fde3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fde7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fdeb:	6a 01                	push   0x1
c001fded:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdf4:	50                   	push   eax
c001fdf5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdfb:	e8 48 e8 ff ff       	call   c001e648 <IDE::enableIRQs(unsigned char, bool)>
c001fe00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe07:	59                   	pop    ecx
c001fe08:	5e                   	pop    esi
c001fe09:	50                   	push   eax
c001fe0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe10:	e8 fd e5 ff ff       	call   c001e412 <IDE::prepareInterrupt(unsigned char)>
c001fe15:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fe18:	e8 69 ff ff ff       	call   c001fd86 <ATAPI::readyForCommand()>
c001fe1d:	83 c4 10             	add    esp,0x10
c001fe20:	84 c0                	test   al,al
c001fe22:	75 0a                	jne    c001fe2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001fe24:	bb 01 00 00 00       	mov    ebx,0x1
c001fe29:	e9 5f 02 00 00       	jmp    c002008d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe2e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fe34:	c1 e0 04             	shl    eax,0x4
c001fe37:	0f b6 c0             	movzx  eax,al
c001fe3a:	50                   	push   eax
c001fe3b:	6a 06                	push   0x6
c001fe3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe44:	50                   	push   eax
c001fe45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe4b:	e8 e8 e5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe50:	6a 00                	push   0x0
c001fe52:	6a 01                	push   0x1
c001fe54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe5b:	50                   	push   eax
c001fe5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe62:	e8 d1 e5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe67:	83 c4 20             	add    esp,0x20
c001fe6a:	0f b6 c3             	movzx  eax,bl
c001fe6d:	50                   	push   eax
c001fe6e:	0f b6 df             	movzx  ebx,bh
c001fe71:	6a 04                	push   0x4
c001fe73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe7a:	50                   	push   eax
c001fe7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe81:	e8 b2 e5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe86:	53                   	push   ebx
c001fe87:	6a 05                	push   0x5
c001fe89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe90:	50                   	push   eax
c001fe91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe97:	e8 9c e5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe9c:	83 c4 20             	add    esp,0x20
c001fe9f:	68 a0 00 00 00       	push   0xa0
c001fea4:	6a 07                	push   0x7
c001fea6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fead:	50                   	push   eax
c001feae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001feb4:	e8 7f e5 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001feb9:	83 c4 0c             	add    esp,0xc
c001febc:	6a 01                	push   0x1
c001febe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fec5:	50                   	push   eax
c001fec6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fecc:	e8 07 f3 ff ff       	call   c001f1d8 <IDE::polling(unsigned char, unsigned int)>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	0f b6 d8             	movzx  ebx,al
c001fed7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001fedd:	85 db                	test   ebx,ebx
c001fedf:	74 20                	je     c001ff01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001fee1:	53                   	push   ebx
c001fee2:	0f b6 c0             	movzx  eax,al
c001fee5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001feec:	52                   	push   edx
c001feed:	50                   	push   eax
c001feee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fef4:	e8 25 f2 ff ff       	call   c001f11e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fef9:	83 c4 10             	add    esp,0x10
c001fefc:	e9 8c 01 00 00       	jmp    c002008d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff01:	52                   	push   edx
c001ff02:	0f b6 c0             	movzx  eax,al
c001ff05:	52                   	push   edx
c001ff06:	50                   	push   eax
c001ff07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff0d:	e8 14 e5 ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c001ff12:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ff16:	b9 06 00 00 00       	mov    ecx,0x6
c001ff1b:	89 c2                	mov    edx,eax
c001ff1d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ff20:	89 e8                	mov    eax,ebp
c001ff22:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	0f b6 c0             	movzx  eax,al
c001ff2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff30:	85 db                	test   ebx,ebx
c001ff32:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ff38:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ff3f:	0f 84 eb 00 00 00    	je     c0020030 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ff45:	55                   	push   ebp
c001ff46:	55                   	push   ebp
c001ff47:	52                   	push   edx
c001ff48:	50                   	push   eax
c001ff49:	e8 5e e6 ff ff       	call   c001e5ac <IDE::waitInterrupt(unsigned char)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	84 c0                	test   al,al
c001ff53:	0f 84 cb fe ff ff    	je     c001fe24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001ff59:	56                   	push   esi
c001ff5a:	56                   	push   esi
c001ff5b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff62:	50                   	push   eax
c001ff63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff69:	e8 a4 e4 ff ff       	call   c001e412 <IDE::prepareInterrupt(unsigned char)>
c001ff6e:	83 c4 0c             	add    esp,0xc
c001ff71:	6a 04                	push   0x4
c001ff73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff7a:	50                   	push   eax
c001ff7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff81:	e8 72 e5 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ff86:	83 c4 0c             	add    esp,0xc
c001ff89:	6a 05                	push   0x5
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff94:	50                   	push   eax
c001ff95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff9b:	e8 58 e5 ff ff       	call   c001e4f8 <IDE::read(unsigned char, unsigned char)>
c001ffa0:	83 c4 10             	add    esp,0x10
c001ffa3:	0f b6 e8             	movzx  ebp,al
c001ffa6:	89 f0                	mov    eax,esi
c001ffa8:	c1 e5 08             	shl    ebp,0x8
c001ffab:	0f b6 f0             	movzx  esi,al
c001ffae:	09 f5                	or     ebp,esi
c001ffb0:	31 f6                	xor    esi,esi
c001ffb2:	d1 fd                	sar    ebp,1
c001ffb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffb9:	74 5c                	je     c0020017 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001ffbb:	39 ee                	cmp    esi,ebp
c001ffbd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ffc3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ffca:	75 0d                	jne    c001ffd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001ffcc:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001ffcf:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001ffd3:	4b                   	dec    ebx
c001ffd4:	e9 57 ff ff ff       	jmp    c001ff30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001ffd9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ffdd:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001ffe1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001ffe6:	51                   	push   ecx
c001ffe7:	51                   	push   ecx
c001ffe8:	52                   	push   edx
c001ffe9:	50                   	push   eax
c001ffea:	e8 37 e4 ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c001ffef:	89 c2                	mov    edx,eax
c001fff1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001fff6:	66 ef                	out    dx,ax
c001fff8:	46                   	inc    esi
c001fff9:	83 c4 10             	add    esp,0x10
c001fffc:	eb bd                	jmp    c001ffbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001fffe:	51                   	push   ecx
c001ffff:	51                   	push   ecx
c0020000:	52                   	push   edx
c0020001:	50                   	push   eax
c0020002:	e8 1f e4 ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c0020007:	89 c2                	mov    edx,eax
c0020009:	66 ed                	in     ax,dx
c002000b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0020016:	46                   	inc    esi
c0020017:	39 ee                	cmp    esi,ebp
c0020019:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002001f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020026:	75 d6                	jne    c001fffe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0020028:	01 f6                	add    esi,esi
c002002a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002002e:	eb a3                	jmp    c001ffd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0020030:	51                   	push   ecx
c0020031:	51                   	push   ecx
c0020032:	52                   	push   edx
c0020033:	50                   	push   eax
c0020034:	e8 73 e5 ff ff       	call   c001e5ac <IDE::waitInterrupt(unsigned char)>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	84 c0                	test   al,al
c002003e:	0f 84 e0 fd ff ff    	je     c001fe24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020044:	52                   	push   edx
c0020045:	bb a0 86 01 00       	mov    ebx,0x186a0
c002004a:	52                   	push   edx
c002004b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020052:	50                   	push   eax
c0020053:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020059:	e8 b4 e3 ff ff       	call   c001e412 <IDE::prepareInterrupt(unsigned char)>
c002005e:	83 c4 10             	add    esp,0x10
c0020061:	50                   	push   eax
c0020062:	50                   	push   eax
c0020063:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002006a:	50                   	push   eax
c002006b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020071:	e8 b0 e3 ff ff       	call   c001e426 <IDE::getBase(unsigned char)>
c0020076:	8d 50 07             	lea    edx,[eax+0x7]
c0020079:	ec                   	in     al,dx
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	a8 88                	test   al,0x88
c002007f:	74 0a                	je     c002008b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020081:	4b                   	dec    ebx
c0020082:	75 dd                	jne    c0020061 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020084:	bb 02 00 00 00       	mov    ebx,0x2
c0020089:	eb 02                	jmp    c002008d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002008b:	31 db                	xor    ebx,ebx
c002008d:	83 c4 1c             	add    esp,0x1c
c0020090:	89 d8                	mov    eax,ebx
c0020092:	5b                   	pop    ebx
c0020093:	5e                   	pop    esi
c0020094:	5f                   	pop    edi
c0020095:	5d                   	pop    ebp
c0020096:	c3                   	ret    
c0020097:	90                   	nop

c0020098 <ATAPI::diskRemoved()>:
c0020098:	53                   	push   ebx
c0020099:	83 ec 14             	sub    esp,0x14
c002009c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00200a0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00200a7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00200ad:	e8 fc a8 fe ff       	call   c000a9ae <LogicalDisk::unmount()>
c00200b2:	58                   	pop    eax
c00200b3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00200b9:	e8 ce b2 fe ff       	call   c000b38c <VCache::writeWriteBuffer()>
c00200be:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00200c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00200c8:	83 c4 18             	add    esp,0x18
c00200cb:	5b                   	pop    ebx
c00200cc:	e9 ab b2 fe ff       	jmp    c000b37c <VCache::invalidateReadBuffer()>
c00200d1:	90                   	nop

c00200d2 <ATAPI::eject()>:
c00200d2:	57                   	push   edi
c00200d3:	b9 03 00 00 00       	mov    ecx,0x3
c00200d8:	53                   	push   ebx
c00200d9:	83 ec 14             	sub    esp,0x14
c00200dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00200e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200e4:	fc                   	cld    
c00200e5:	31 c0                	xor    eax,eax
c00200e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00200ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00200f3:	50                   	push   eax
c00200f4:	50                   	push   eax
c00200f5:	6a 00                	push   0x0
c00200f7:	6a 00                	push   0x0
c00200f9:	6a 00                	push   0x0
c00200fb:	6a 02                	push   0x2
c00200fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020101:	50                   	push   eax
c0020102:	53                   	push   ebx
c0020103:	e8 d0 fc ff ff       	call   c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020108:	83 c4 14             	add    esp,0x14
c002010b:	53                   	push   ebx
c002010c:	e8 87 ff ff ff       	call   c0020098 <ATAPI::diskRemoved()>
c0020111:	83 c4 24             	add    esp,0x24
c0020114:	31 c0                	xor    eax,eax
c0020116:	5b                   	pop    ebx
c0020117:	5f                   	pop    edi
c0020118:	c3                   	ret    
c0020119:	90                   	nop

c002011a <ATAPI::diskInserted()>:
c002011a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020125:	c3                   	ret    

c0020126 <ATAPI::detectMedia()>:
c0020126:	56                   	push   esi
c0020127:	53                   	push   ebx
c0020128:	83 ec 28             	sub    esp,0x28
c002012b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002012f:	6a 0c                	push   0xc
c0020131:	6a 00                	push   0x0
c0020133:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020137:	56                   	push   esi
c0020138:	e8 b3 03 fe ff       	call   c00004f0 <memset>
c002013d:	58                   	pop    eax
c002013e:	5a                   	pop    edx
c002013f:	6a 00                	push   0x0
c0020141:	6a 00                	push   0x0
c0020143:	6a 00                	push   0x0
c0020145:	6a 00                	push   0x0
c0020147:	56                   	push   esi
c0020148:	53                   	push   ebx
c0020149:	e8 8a fc ff ff       	call   c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002014e:	83 c4 1c             	add    esp,0x1c
c0020151:	6a 0c                	push   0xc
c0020153:	6a 00                	push   0x0
c0020155:	56                   	push   esi
c0020156:	e8 95 03 fe ff       	call   c00004f0 <memset>
c002015b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020160:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020165:	59                   	pop    ecx
c0020166:	58                   	pop    eax
c0020167:	6a 01                	push   0x1
c0020169:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002016d:	50                   	push   eax
c002016e:	6a 00                	push   0x0
c0020170:	6a 12                	push   0x12
c0020172:	56                   	push   esi
c0020173:	53                   	push   ebx
c0020174:	e8 5f fc ff ff       	call   c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020179:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002017d:	83 c4 20             	add    esp,0x20
c0020180:	83 e0 7f             	and    eax,0x7f
c0020183:	83 f8 70             	cmp    eax,0x70
c0020186:	74 15                	je     c002019d <ATAPI::detectMedia()+0x77>
c0020188:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002018f:	75 0c                	jne    c002019d <ATAPI::detectMedia()+0x77>
c0020191:	83 ec 0c             	sub    esp,0xc
c0020194:	53                   	push   ebx
c0020195:	e8 80 ff ff ff       	call   c002011a <ATAPI::diskInserted()>
c002019a:	83 c4 10             	add    esp,0x10
c002019d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00201a1:	83 e0 0f             	and    eax,0xf
c00201a4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00201a9:	0f b6 c0             	movzx  eax,al
c00201ac:	75 19                	jne    c00201c7 <ATAPI::detectMedia()+0xa1>
c00201ae:	83 f8 02             	cmp    eax,0x2
c00201b1:	75 14                	jne    c00201c7 <ATAPI::detectMedia()+0xa1>
c00201b3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201ba:	74 24                	je     c00201e0 <ATAPI::detectMedia()+0xba>
c00201bc:	83 ec 0c             	sub    esp,0xc
c00201bf:	53                   	push   ebx
c00201c0:	e8 d3 fe ff ff       	call   c0020098 <ATAPI::diskRemoved()>
c00201c5:	eb 16                	jmp    c00201dd <ATAPI::detectMedia()+0xb7>
c00201c7:	85 c0                	test   eax,eax
c00201c9:	75 15                	jne    c00201e0 <ATAPI::detectMedia()+0xba>
c00201cb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201d2:	75 0c                	jne    c00201e0 <ATAPI::detectMedia()+0xba>
c00201d4:	83 ec 0c             	sub    esp,0xc
c00201d7:	53                   	push   ebx
c00201d8:	e8 3d ff ff ff       	call   c002011a <ATAPI::diskInserted()>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	83 c4 24             	add    esp,0x24
c00201e3:	5b                   	pop    ebx
c00201e4:	5e                   	pop    esi
c00201e5:	c3                   	ret    

c00201e6 <ATAPI::open(int, int, void*)>:
c00201e6:	56                   	push   esi
c00201e7:	53                   	push   ebx
c00201e8:	50                   	push   eax
c00201e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00201ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00201f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201f5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00201fb:	c1 e0 06             	shl    eax,0x6
c00201fe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020204:	01 d0                	add    eax,edx
c0020206:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002020d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020213:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002021a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020224:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002022b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020231:	6a 04                	push   0x4
c0020233:	6a 0c                	push   0xc
c0020235:	51                   	push   ecx
c0020236:	52                   	push   edx
c0020237:	e8 fc e1 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002023c:	90                   	nop
c002023d:	90                   	nop
c002023e:	6a 00                	push   0x0
c0020240:	6a 0c                	push   0xc
c0020242:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020249:	50                   	push   eax
c002024a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020250:	e8 e3 e1 ff ff       	call   c001e438 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020255:	83 c4 14             	add    esp,0x14
c0020258:	68 78 01 00 00       	push   0x178
c002025d:	e8 a6 f8 fe ff       	call   c000fb08 <malloc>
c0020262:	83 c4 0c             	add    esp,0xc
c0020265:	6a 00                	push   0x0
c0020267:	68 ff ff ff 7f       	push   0x7fffffff
c002026c:	6a 00                	push   0x0
c002026e:	6a 00                	push   0x0
c0020270:	53                   	push   ebx
c0020271:	68 9f 65 02 c0       	push   0xc002659f
c0020276:	89 c6                	mov    esi,eax
c0020278:	50                   	push   eax
c0020279:	e8 6e a5 fe ff       	call   c000a7ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002027e:	83 c4 14             	add    esp,0x14
c0020281:	56                   	push   esi
c0020282:	e8 25 a6 fe ff       	call   c000a8ac <LogicalDisk::assignDriveLetter()>
c0020287:	5a                   	pop    edx
c0020288:	59                   	pop    ecx
c0020289:	0f be c0             	movsx  eax,al
c002028c:	50                   	push   eax
c002028d:	68 e4 63 02 c0       	push   0xc00263e4
c0020292:	e8 b7 6c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020297:	58                   	pop    eax
c0020298:	5a                   	pop    edx
c0020299:	56                   	push   esi
c002029a:	53                   	push   ebx
c002029b:	e8 32 97 fe ff       	call   c00099d2 <Device::addChild(Device*)>
c00202a0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00202a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202a9:	e8 70 9b fe ff       	call   c0009e1e <PhysicalDisk::startCache()>
c00202ae:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00202b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202b8:	e8 69 fe ff ff       	call   c0020126 <ATAPI::detectMedia()>
c00202bd:	83 c4 14             	add    esp,0x14
c00202c0:	31 c0                	xor    eax,eax
c00202c2:	5b                   	pop    ebx
c00202c3:	5e                   	pop    esi
c00202c4:	c3                   	ret    
c00202c5:	90                   	nop

c00202c6 <ATAPI::read(unsigned long long, int, void*)>:
c00202c6:	55                   	push   ebp
c00202c7:	57                   	push   edi
c00202c8:	56                   	push   esi
c00202c9:	53                   	push   ebx
c00202ca:	83 ec 1c             	sub    esp,0x1c
c00202cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00202d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00202d5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00202d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00202e0:	74 3c                	je     c002031e <ATAPI::read(unsigned long long, int, void*)+0x58>
c00202e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00202e6:	b9 03 00 00 00       	mov    ecx,0x3
c00202eb:	fc                   	cld    
c00202ec:	31 c0                	xor    eax,eax
c00202ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00202f0:	89 e8                	mov    eax,ebp
c00202f2:	0f ce                	bswap  esi
c00202f4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00202f8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00202fd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020301:	50                   	push   eax
c0020302:	50                   	push   eax
c0020303:	55                   	push   ebp
c0020304:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020308:	c1 e5 0b             	shl    ebp,0xb
c002030b:	6a 00                	push   0x0
c002030d:	55                   	push   ebp
c002030e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020312:	50                   	push   eax
c0020313:	53                   	push   ebx
c0020314:	e8 bf fa ff ff       	call   c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020319:	83 c4 20             	add    esp,0x20
c002031c:	eb 1a                	jmp    c0020338 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002031e:	83 ec 0c             	sub    esp,0xc
c0020321:	53                   	push   ebx
c0020322:	e8 ff fd ff ff       	call   c0020126 <ATAPI::detectMedia()>
c0020327:	83 c4 10             	add    esp,0x10
c002032a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020331:	75 af                	jne    c00202e2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020333:	b8 02 00 00 00       	mov    eax,0x2
c0020338:	83 c4 1c             	add    esp,0x1c
c002033b:	5b                   	pop    ebx
c002033c:	5e                   	pop    esi
c002033d:	5f                   	pop    edi
c002033e:	5d                   	pop    ebp
c002033f:	c3                   	ret    

c0020340 <SATA::close(int, int, void*)>:
c0020340:	83 ec 0c             	sub    esp,0xc
c0020343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020347:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002034d:	85 c0                	test   eax,eax
c002034f:	74 0c                	je     c002035d <SATA::close(int, int, void*)+0x1d>
c0020351:	8b 10                	mov    edx,DWORD PTR [eax]
c0020353:	83 ec 0c             	sub    esp,0xc
c0020356:	50                   	push   eax
c0020357:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002035a:	83 c4 10             	add    esp,0x10
c002035d:	31 c0                	xor    eax,eax
c002035f:	83 c4 0c             	add    esp,0xc
c0020362:	c3                   	ret    
c0020363:	90                   	nop

c0020364 <SATA::powerSaving(PowerSavingLevel)>:
c0020364:	c3                   	ret    
c0020365:	90                   	nop

c0020366 <SATA::open(int, int, void*)>:
c0020366:	56                   	push   esi
c0020367:	53                   	push   ebx
c0020368:	83 ec 10             	sub    esp,0x10
c002036b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002036f:	68 2c 64 02 c0       	push   0xc002642c
c0020374:	e8 d5 6b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020379:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002037d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020387:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020391:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020397:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002039b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00203a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00203ac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00203b2:	e8 91 fc fe ff       	call   c0010048 <Phys::allocatePage()>
c00203b7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00203bd:	89 c6                	mov    esi,eax
c00203bf:	e8 84 fc fe ff       	call   c0010048 <Phys::allocatePage()>
c00203c4:	81 c6 00 10 00 00    	add    esi,0x1000
c00203ca:	83 c4 10             	add    esp,0x10
c00203cd:	39 c6                	cmp    esi,eax
c00203cf:	74 10                	je     c00203e1 <SATA::open(int, int, void*)+0x7b>
c00203d1:	83 ec 0c             	sub    esp,0xc
c00203d4:	68 38 64 02 c0       	push   0xc0026438
c00203d9:	e8 70 fa fe ff       	call   c000fe4e <KePanic(char const*)>
c00203de:	83 c4 10             	add    esp,0x10
c00203e1:	83 ec 0c             	sub    esp,0xc
c00203e4:	6a 02                	push   0x2
c00203e6:	e8 d2 2e ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c00203eb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00203f1:	6a 03                	push   0x3
c00203f3:	50                   	push   eax
c00203f4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00203fa:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0020400:	e8 91 35 ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020405:	83 c4 14             	add    esp,0x14
c0020408:	53                   	push   ebx
c0020409:	e8 10 9a fe ff       	call   c0009e1e <PhysicalDisk::startCache()>
c002040e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020411:	e8 a8 a8 fe ff       	call   c000acbe <createPartitionsForDisk(PhysicalDisk*)>
c0020416:	83 c4 14             	add    esp,0x14
c0020419:	31 c0                	xor    eax,eax
c002041b:	5b                   	pop    ebx
c002041c:	5e                   	pop    esi
c002041d:	c3                   	ret    

c002041e <SATA::SATA()>:
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020425:	83 ec 04             	sub    esp,0x4
c0020428:	68 00 02 00 00       	push   0x200
c002042d:	68 4c 64 02 c0       	push   0xc002644c
c0020432:	50                   	push   eax
c0020433:	e8 7e 99 fe ff       	call   c0009db6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020438:	83 c4 10             	add    esp,0x10
c002043b:	ba bc 64 02 c0       	mov    edx,0xc00264bc
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	90                   	nop
c0020447:	83 c4 0c             	add    esp,0xc
c002044a:	c3                   	ret    
c002044b:	90                   	nop

c002044c <SATA::access(unsigned long long, int, void*, bool)>:
c002044c:	55                   	push   ebp
c002044d:	57                   	push   edi
c002044e:	56                   	push   esi
c002044f:	53                   	push   ebx
c0020450:	83 ec 2c             	sub    esp,0x2c
c0020453:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020457:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002045b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002045f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020463:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020467:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002046b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002046f:	fa                   	cli    
c0020470:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0020476:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002047b:	7e 10                	jle    c002048d <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002047d:	83 ec 0c             	sub    esp,0xc
c0020480:	68 5c 64 02 c0       	push   0xc002645c
c0020485:	e8 c4 f9 fe ff       	call   c000fe4e <KePanic(char const*)>
c002048a:	83 c4 10             	add    esp,0x10
c002048d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020493:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020499:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002049f:	89 e8                	mov    eax,ebp
c00204a1:	c1 e0 07             	shl    eax,0x7
c00204a4:	01 d0                	add    eax,edx
c00204a6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00204b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00204b3:	51                   	push   ecx
c00204b4:	c1 e0 07             	shl    eax,0x7
c00204b7:	51                   	push   ecx
c00204b8:	01 d0                	add    eax,edx
c00204ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00204be:	50                   	push   eax
c00204bf:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00204c5:	e8 ee ed ff ff       	call   c001f2b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00204ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00204ce:	83 c4 10             	add    esp,0x10
c00204d1:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c00204d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00204da:	0f 84 a6 01 00 00    	je     c0020686 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c00204e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00204e4:	c1 e0 09             	shl    eax,0x9
c00204e7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00204ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00204f0:	74 0e                	je     c0020500 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c00204f2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00204f8:	89 c1                	mov    ecx,eax
c00204fa:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00204fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020500:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020504:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002050a:	8d 45 02             	lea    eax,[ebp+0x2]
c002050d:	c1 e0 07             	shl    eax,0x7
c0020510:	01 d0                	add    eax,edx
c0020512:	8b 00                	mov    eax,DWORD PTR [eax]
c0020514:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002051a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020524:	c1 e1 05             	shl    ecx,0x5
c0020527:	01 c8                	add    eax,ecx
c0020529:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002052d:	83 e1 01             	and    ecx,0x1
c0020530:	89 ce                	mov    esi,ecx
c0020532:	8a 08                	mov    cl,BYTE PTR [eax]
c0020534:	c1 e6 06             	shl    esi,0x6
c0020537:	83 e1 bf             	and    ecx,0xffffffbf
c002053a:	09 f1                	or     ecx,esi
c002053c:	88 08                	mov    BYTE PTR [eax],cl
c002053e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020540:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020546:	81 c9 05 00 01 00    	or     ecx,0x10005
c002054c:	89 08                	mov    DWORD PTR [eax],ecx
c002054e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020554:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002055a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020560:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020563:	50                   	push   eax
c0020564:	68 90 00 00 00       	push   0x90
c0020569:	6a 00                	push   0x0
c002056b:	56                   	push   esi
c002056c:	e8 7f ff fd ff       	call   c00004f0 <memset>
c0020571:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020577:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002057d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020581:	83 c4 10             	add    esp,0x10
c0020584:	48                   	dec    eax
c0020585:	25 ff ff 3f 00       	and    eax,0x3fffff
c002058a:	89 c1                	mov    ecx,eax
c002058c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020592:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020597:	09 c8                	or     eax,ecx
c0020599:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002059f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00205a5:	83 c8 80             	or     eax,0xffffff80
c00205a8:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00205ae:	66 8b 06             	mov    ax,WORD PTR [esi]
c00205b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00205b5:	25 00 7f 00 00       	and    eax,0x7f00
c00205ba:	0d 27 80 ff ff       	or     eax,0xffff8027
c00205bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00205c4:	66 89 06             	mov    WORD PTR [esi],ax
c00205c7:	b0 35                	mov    al,0x35
c00205c9:	75 02                	jne    c00205cd <SATA::access(unsigned long long, int, void*, bool)+0x181>
c00205cb:	b0 25                	mov    al,0x25
c00205cd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00205d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205d4:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00205d8:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00205dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205e0:	c1 e8 10             	shr    eax,0x10
c00205e3:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00205e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205ea:	c1 e8 18             	shr    eax,0x18
c00205ed:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00205f0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00205f4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00205f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205fb:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00205fe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020602:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020606:	89 ee                	mov    esi,ebp
c0020608:	31 c0                	xor    eax,eax
c002060a:	c1 e6 07             	shl    esi,0x7
c002060d:	01 d6                	add    esi,edx
c002060f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020615:	80 e1 88             	and    cl,0x88
c0020618:	74 0a                	je     c0020624 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002061a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002061f:	74 0a                	je     c002062b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020621:	40                   	inc    eax
c0020622:	eb eb                	jmp    c002060f <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020624:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020629:	75 0a                	jne    c0020635 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002062b:	83 ec 0c             	sub    esp,0xc
c002062e:	68 95 64 02 c0       	push   0xc0026495
c0020633:	eb 34                	jmp    c0020669 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020635:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020639:	c1 e5 07             	shl    ebp,0x7
c002063c:	b8 01 00 00 00       	mov    eax,0x1
c0020641:	01 ea                	add    edx,ebp
c0020643:	d3 e0                	shl    eax,cl
c0020645:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002064b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020651:	85 c8                	test   eax,ecx
c0020653:	74 25                	je     c002067a <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020655:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002065b:	0f ba e1 1e          	bt     ecx,0x1e
c002065f:	73 ea                	jae    c002064b <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020661:	83 ec 0c             	sub    esp,0xc
c0020664:	68 a3 64 02 c0       	push   0xc00264a3
c0020669:	e8 e0 68 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c002066e:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	eb 13                	jmp    c002068d <SATA::access(unsigned long long, int, void*, bool)+0x241>
c002067a:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020680:	0f ba e0 1e          	bt     eax,0x1e
c0020684:	73 18                	jae    c002069e <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020686:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c002068d:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0020694:	75 01                	jne    c0020697 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020696:	fb                   	sti    
c0020697:	b8 01 00 00 00       	mov    eax,0x1
c002069c:	eb 2c                	jmp    c00206ca <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002069e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00206a3:	75 10                	jne    c00206b5 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c00206a5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00206ab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00206af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206b5:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00206bc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00206c1:	85 c0                	test   eax,eax
c00206c3:	75 03                	jne    c00206c8 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00206c5:	fb                   	sti    
c00206c6:	eb 02                	jmp    c00206ca <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00206c8:	31 c0                	xor    eax,eax
c00206ca:	83 c4 2c             	add    esp,0x2c
c00206cd:	5b                   	pop    ebx
c00206ce:	5e                   	pop    esi
c00206cf:	5f                   	pop    edi
c00206d0:	5d                   	pop    ebp
c00206d1:	c3                   	ret    

c00206d2 <SATA::read(unsigned long long, int, void*)>:
c00206d2:	57                   	push   edi
c00206d3:	b8 04 00 00 00       	mov    eax,0x4
c00206d8:	56                   	push   esi
c00206d9:	53                   	push   ebx
c00206da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00206de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00206e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00206e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00206ea:	8d 7a ff             	lea    edi,[edx-0x1]
c00206ed:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00206f3:	77 25                	ja     c002071a <SATA::read(unsigned long long, int, void*)+0x48>
c00206f5:	85 f6                	test   esi,esi
c00206f7:	b8 06 00 00 00       	mov    eax,0x6
c00206fc:	74 1c                	je     c002071a <SATA::read(unsigned long long, int, void*)+0x48>
c00206fe:	50                   	push   eax
c00206ff:	50                   	push   eax
c0020700:	6a 00                	push   0x0
c0020702:	56                   	push   esi
c0020703:	52                   	push   edx
c0020704:	53                   	push   ebx
c0020705:	51                   	push   ecx
c0020706:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002070a:	e8 3d fd ff ff       	call   c002044c <SATA::access(unsigned long long, int, void*, bool)>
c002070f:	83 c4 20             	add    esp,0x20
c0020712:	85 c0                	test   eax,eax
c0020714:	0f 95 c0             	setne  al
c0020717:	0f b6 c0             	movzx  eax,al
c002071a:	5b                   	pop    ebx
c002071b:	5e                   	pop    esi
c002071c:	5f                   	pop    edi
c002071d:	c3                   	ret    

c002071e <SATA::write(unsigned long long, int, void*)>:
c002071e:	55                   	push   ebp
c002071f:	b8 04 00 00 00       	mov    eax,0x4
c0020724:	57                   	push   edi
c0020725:	56                   	push   esi
c0020726:	53                   	push   ebx
c0020727:	83 ec 0c             	sub    esp,0xc
c002072a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002072e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020732:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020736:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002073a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002073d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020743:	77 3d                	ja     c0020782 <SATA::write(unsigned long long, int, void*)+0x64>
c0020745:	85 ed                	test   ebp,ebp
c0020747:	b8 06 00 00 00       	mov    eax,0x6
c002074c:	74 34                	je     c0020782 <SATA::write(unsigned long long, int, void*)+0x64>
c002074e:	c1 e3 09             	shl    ebx,0x9
c0020751:	01 eb                	add    ebx,ebp
c0020753:	50                   	push   eax
c0020754:	89 d6                	mov    esi,edx
c0020756:	50                   	push   eax
c0020757:	83 c6 01             	add    esi,0x1
c002075a:	6a 01                	push   0x1
c002075c:	89 cf                	mov    edi,ecx
c002075e:	55                   	push   ebp
c002075f:	83 d7 00             	adc    edi,0x0
c0020762:	6a 01                	push   0x1
c0020764:	81 c5 00 02 00 00    	add    ebp,0x200
c002076a:	51                   	push   ecx
c002076b:	52                   	push   edx
c002076c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020770:	e8 d7 fc ff ff       	call   c002044c <SATA::access(unsigned long long, int, void*, bool)>
c0020775:	83 c4 20             	add    esp,0x20
c0020778:	39 dd                	cmp    ebp,ebx
c002077a:	89 f2                	mov    edx,esi
c002077c:	89 f9                	mov    ecx,edi
c002077e:	75 d3                	jne    c0020753 <SATA::write(unsigned long long, int, void*)+0x35>
c0020780:	31 c0                	xor    eax,eax
c0020782:	83 c4 0c             	add    esp,0xc
c0020785:	5b                   	pop    ebx
c0020786:	5e                   	pop    esi
c0020787:	5f                   	pop    edi
c0020788:	5d                   	pop    ebp
c0020789:	c3                   	ret    

c002078a <SATAPI::write(unsigned long long, int, void*)>:
c002078a:	b8 03 00 00 00       	mov    eax,0x3
c002078f:	c3                   	ret    

c0020790 <SATAPI::close(int, int, void*)>:
c0020790:	83 ec 0c             	sub    esp,0xc
c0020793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020797:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002079d:	85 c0                	test   eax,eax
c002079f:	74 0c                	je     c00207ad <SATAPI::close(int, int, void*)+0x1d>
c00207a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00207a3:	83 ec 0c             	sub    esp,0xc
c00207a6:	50                   	push   eax
c00207a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00207aa:	83 c4 10             	add    esp,0x10
c00207ad:	31 c0                	xor    eax,eax
c00207af:	83 c4 0c             	add    esp,0xc
c00207b2:	c3                   	ret    
c00207b3:	90                   	nop

c00207b4 <SATAPI::SATAPI()>:
c00207b4:	83 ec 0c             	sub    esp,0xc
c00207b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207bb:	83 ec 04             	sub    esp,0x4
c00207be:	68 00 08 00 00       	push   0x800
c00207c3:	68 ec 64 02 c0       	push   0xc00264ec
c00207c8:	50                   	push   eax
c00207c9:	e8 e8 95 fe ff       	call   c0009db6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00207ce:	83 c4 10             	add    esp,0x10
c00207d1:	ba e0 65 02 c0       	mov    edx,0xc00265e0
c00207d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207da:	89 10                	mov    DWORD PTR [eax],edx
c00207dc:	90                   	nop
c00207dd:	83 c4 0c             	add    esp,0xc
c00207e0:	c3                   	ret    
c00207e1:	90                   	nop

c00207e2 <SATAPI::diskRemoved()>:
c00207e2:	c3                   	ret    
c00207e3:	90                   	nop

c00207e4 <SATAPI::diskInserted()>:
c00207e4:	83 ec 18             	sub    esp,0x18
c00207e7:	68 f8 64 02 c0       	push   0xc00264f8
c00207ec:	e8 5d 67 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00207f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00207fc:	83 c4 1c             	add    esp,0x1c
c00207ff:	c3                   	ret    

c0020800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020800:	55                   	push   ebp
c0020801:	57                   	push   edi
c0020802:	56                   	push   esi
c0020803:	53                   	push   ebx
c0020804:	83 ec 34             	sub    esp,0x34
c0020807:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002080b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002080f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020813:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020817:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002081b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020821:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002082b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020831:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020835:	83 c0 02             	add    eax,0x2
c0020838:	c1 e0 07             	shl    eax,0x7
c002083b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002083f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020843:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020847:	c1 e0 07             	shl    eax,0x7
c002084a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002084e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020852:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002085c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020860:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020866:	e8 4d ea ff ff       	call   c001f2b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002086b:	83 c4 10             	add    esp,0x10
c002086e:	89 c2                	mov    edx,eax
c0020870:	b8 01 00 00 00       	mov    eax,0x1
c0020875:	83 fa ff             	cmp    edx,0xffffffff
c0020878:	0f 84 63 02 00 00    	je     c0020ae1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002087e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020886:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002088c:	8b 00                	mov    eax,DWORD PTR [eax]
c002088e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020894:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002089a:	89 d1                	mov    ecx,edx
c002089c:	c1 e1 05             	shl    ecx,0x5
c002089f:	01 c8                	add    eax,ecx
c00208a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00208a3:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00208a9:	81 c9 25 00 01 00    	or     ecx,0x10025
c00208af:	89 08                	mov    DWORD PTR [eax],ecx
c00208b1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00208b7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00208bd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00208c3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00208c6:	50                   	push   eax
c00208c7:	68 90 00 00 00       	push   0x90
c00208cc:	6a 00                	push   0x0
c00208ce:	53                   	push   ebx
c00208cf:	e8 1c fc fd ff       	call   c00004f0 <memset>
c00208d4:	8d 7b 40             	lea    edi,[ebx+0x40]
c00208d7:	b9 0c 00 00 00       	mov    ecx,0xc
c00208dc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00208e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00208e2:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00208e8:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00208ec:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00208f0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00208f6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00208fa:	48                   	dec    eax
c00208fb:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020900:	89 c1                	mov    ecx,eax
c0020902:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020908:	25 00 00 c0 ff       	and    eax,0xffc00000
c002090d:	09 c8                	or     eax,ecx
c002090f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020915:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002091b:	83 c8 80             	or     eax,0xffffff80
c002091e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020924:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020927:	25 00 7f 00 00       	and    eax,0x7f00
c002092c:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020931:	66 89 03             	mov    WORD PTR [ebx],ax
c0020934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020938:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002093c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020940:	c1 e8 10             	shr    eax,0x10
c0020943:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002094a:	c1 e8 18             	shr    eax,0x18
c002094d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020950:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020954:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020957:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002095b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002095e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020962:	83 c4 10             	add    esp,0x10
c0020965:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020969:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002096d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020971:	31 c0                	xor    eax,eax
c0020973:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020979:	80 e1 88             	and    cl,0x88
c002097c:	74 0a                	je     c0020988 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002097e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020983:	74 0a                	je     c002098f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020985:	40                   	inc    eax
c0020986:	eb eb                	jmp    c0020973 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020988:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002098d:	75 43                	jne    c00209d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002098f:	83 ec 0c             	sub    esp,0xc
c0020992:	68 10 65 02 c0       	push   0xc0026510
c0020997:	e8 b2 65 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c002099c:	58                   	pop    eax
c002099d:	5a                   	pop    edx
c002099e:	68 25 65 02 c0       	push   0xc0026525
c00209a3:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c00209a9:	e8 f6 1c ff ff       	call   c00126a4 <VgaText::puts(char const*)>
c00209ae:	59                   	pop    ecx
c00209af:	5b                   	pop    ebx
c00209b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00209b4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00209ba:	e8 93 e9 ff ff       	call   c001f352 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00209bf:	5e                   	pop    esi
c00209c0:	5f                   	pop    edi
c00209c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00209c5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00209cb:	e8 62 e9 ff ff       	call   c001f332 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00209d0:	eb 48                	jmp    c0020a1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c00209d2:	b8 01 00 00 00       	mov    eax,0x1
c00209d7:	88 d1                	mov    cl,dl
c00209d9:	d3 e0                	shl    eax,cl
c00209db:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c00209e0:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00209e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00209ea:	89 c7                	mov    edi,eax
c00209ec:	c1 e3 07             	shl    ebx,0x7
c00209ef:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00209f3:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00209f9:	85 c7                	test   edi,eax
c00209fb:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020a01:	0f 84 a7 00 00 00    	je     c0020aae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020a07:	0f ba e0 1e          	bt     eax,0x1e
c0020a0b:	73 1a                	jae    c0020a27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020a0d:	83 ec 0c             	sub    esp,0xc
c0020a10:	68 37 65 02 c0       	push   0xc0026537
c0020a15:	e8 34 65 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020a1a:	83 c4 10             	add    esp,0x10
c0020a1d:	b8 01 00 00 00       	mov    eax,0x1
c0020a22:	e9 ba 00 00 00       	jmp    c0020ae1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020a27:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020a2d:	83 f8 0d             	cmp    eax,0xd
c0020a30:	77 0b                	ja     c0020a3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0020a32:	50                   	push   eax
c0020a33:	50                   	push   eax
c0020a34:	6a 00                	push   0x0
c0020a36:	68 c8 00 00 00       	push   0xc8
c0020a3b:	eb 2a                	jmp    c0020a67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020a3d:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0020a43:	83 f8 0d             	cmp    eax,0xd
c0020a46:	77 0b                	ja     c0020a53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020a48:	51                   	push   ecx
c0020a49:	51                   	push   ecx
c0020a4a:	6a 00                	push   0x0
c0020a4c:	68 58 02 00 00       	push   0x258
c0020a51:	eb 14                	jmp    c0020a67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020a53:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020a59:	83 f8 06             	cmp    eax,0x6
c0020a5c:	77 11                	ja     c0020a6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020a5e:	52                   	push   edx
c0020a5f:	52                   	push   edx
c0020a60:	6a 00                	push   0x0
c0020a62:	68 dc 05 00 00       	push   0x5dc
c0020a67:	e8 d0 67 ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c0020a6c:	83 c4 10             	add    esp,0x10
c0020a6f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020a73:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020a76:	75 06                	jne    c0020a7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020a78:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020a7c:	74 16                	je     c0020a94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020a7e:	83 fe 06             	cmp    esi,0x6
c0020a81:	77 11                	ja     c0020a94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020a83:	50                   	push   eax
c0020a84:	50                   	push   eax
c0020a85:	6a 00                	push   0x0
c0020a87:	68 c4 09 00 00       	push   0x9c4
c0020a8c:	e8 ab 67 ff ff       	call   c001723c <milliTenthSleep(unsigned long long)>
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	46                   	inc    esi
c0020a95:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020a9b:	0f 85 52 ff ff ff    	jne    c00209f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0020aa1:	83 ec 0c             	sub    esp,0xc
c0020aa4:	68 4a 65 02 c0       	push   0xc002654a
c0020aa9:	e9 67 ff ff ff       	jmp    c0020a15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020aae:	0f ba e0 1e          	bt     eax,0x1e
c0020ab2:	73 0d                	jae    c0020ac1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020ab4:	83 ec 0c             	sub    esp,0xc
c0020ab7:	68 5e 65 02 c0       	push   0xc002655e
c0020abc:	e9 54 ff ff ff       	jmp    c0020a15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020ac1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020ac6:	74 17                	je     c0020adf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020ac8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020acd:	74 10                	je     c0020adf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020acf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020ad5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020ad9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020add:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020adf:	31 c0                	xor    eax,eax
c0020ae1:	83 c4 2c             	add    esp,0x2c
c0020ae4:	5b                   	pop    ebx
c0020ae5:	5e                   	pop    esi
c0020ae6:	5f                   	pop    edi
c0020ae7:	5d                   	pop    ebp
c0020ae8:	c3                   	ret    
c0020ae9:	90                   	nop

c0020aea <SATAPI::eject()>:
c0020aea:	57                   	push   edi
c0020aeb:	b9 03 00 00 00       	mov    ecx,0x3
c0020af0:	83 ec 18             	sub    esp,0x18
c0020af3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020af7:	fc                   	cld    
c0020af8:	31 c0                	xor    eax,eax
c0020afa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020afc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020b01:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020b06:	50                   	push   eax
c0020b07:	6a 00                	push   0x0
c0020b09:	6a 00                	push   0x0
c0020b0b:	6a 00                	push   0x0
c0020b0d:	6a 00                	push   0x0
c0020b0f:	6a 02                	push   0x2
c0020b11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020b15:	50                   	push   eax
c0020b16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020b1a:	e8 e1 fc ff ff       	call   c0020800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020b1f:	83 c4 38             	add    esp,0x38
c0020b22:	31 c0                	xor    eax,eax
c0020b24:	5f                   	pop    edi
c0020b25:	c3                   	ret    

c0020b26 <SATAPI::detectMedia()>:
c0020b26:	53                   	push   ebx
c0020b27:	83 ec 14             	sub    esp,0x14
c0020b2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020b2e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020b34:	e8 53 a8 fe ff       	call   c000b38c <VCache::writeWriteBuffer()>
c0020b39:	59                   	pop    ecx
c0020b3a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020b40:	e8 37 a8 fe ff       	call   c000b37c <VCache::invalidateReadBuffer()>
c0020b45:	c7 04 24 73 65 02 c0 	mov    DWORD PTR [esp],0xc0026573
c0020b4c:	e8 fd 63 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020b51:	83 c4 10             	add    esp,0x10
c0020b54:	31 c0                	xor    eax,eax
c0020b56:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c0020b5d:	85 d2                	test   edx,edx
c0020b5f:	74 0f                	je     c0020b70 <SATAPI::detectMedia()+0x4a>
c0020b61:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020b67:	75 07                	jne    c0020b70 <SATAPI::detectMedia()+0x4a>
c0020b69:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020b70:	40                   	inc    eax
c0020b71:	83 f8 1a             	cmp    eax,0x1a
c0020b74:	75 e0                	jne    c0020b56 <SATAPI::detectMedia()+0x30>
c0020b76:	83 c4 08             	add    esp,0x8
c0020b79:	5b                   	pop    ebx
c0020b7a:	c3                   	ret    
c0020b7b:	90                   	nop

c0020b7c <SATAPI::open(int, int, void*)>:
c0020b7c:	56                   	push   esi
c0020b7d:	53                   	push   ebx
c0020b7e:	51                   	push   ecx
c0020b7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020b83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020b87:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020b91:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020b97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b9b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ba5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020baf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020bb6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020bbc:	e8 87 f4 fe ff       	call   c0010048 <Phys::allocatePage()>
c0020bc1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020bc7:	89 c6                	mov    esi,eax
c0020bc9:	e8 7a f4 fe ff       	call   c0010048 <Phys::allocatePage()>
c0020bce:	81 c6 00 10 00 00    	add    esi,0x1000
c0020bd4:	39 c6                	cmp    esi,eax
c0020bd6:	74 10                	je     c0020be8 <SATAPI::open(int, int, void*)+0x6c>
c0020bd8:	83 ec 0c             	sub    esp,0xc
c0020bdb:	68 88 65 02 c0       	push   0xc0026588
c0020be0:	e8 69 f2 fe ff       	call   c000fe4e <KePanic(char const*)>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	83 ec 0c             	sub    esp,0xc
c0020beb:	6a 02                	push   0x2
c0020bed:	e8 cb 26 ff ff       	call   c00132bd <Virt::allocateKernelVirtualPages(int)>
c0020bf2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020bf8:	6a 03                	push   0x3
c0020bfa:	50                   	push   eax
c0020bfb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020c01:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0020c07:	e8 8a 2d ff ff       	call   c0013996 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020c0c:	83 c4 14             	add    esp,0x14
c0020c0f:	68 78 01 00 00       	push   0x178
c0020c14:	e8 ef ee fe ff       	call   c000fb08 <malloc>
c0020c19:	83 c4 0c             	add    esp,0xc
c0020c1c:	6a 00                	push   0x0
c0020c1e:	68 ff ff ff 7f       	push   0x7fffffff
c0020c23:	6a 00                	push   0x0
c0020c25:	6a 00                	push   0x0
c0020c27:	53                   	push   ebx
c0020c28:	68 9e 65 02 c0       	push   0xc002659e
c0020c2d:	89 c6                	mov    esi,eax
c0020c2f:	50                   	push   eax
c0020c30:	e8 b7 9b fe ff       	call   c000a7ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020c35:	83 c4 14             	add    esp,0x14
c0020c38:	56                   	push   esi
c0020c39:	e8 6e 9c fe ff       	call   c000a8ac <LogicalDisk::assignDriveLetter()>
c0020c3e:	5a                   	pop    edx
c0020c3f:	59                   	pop    ecx
c0020c40:	0f be c0             	movsx  eax,al
c0020c43:	50                   	push   eax
c0020c44:	68 e4 63 02 c0       	push   0xc00263e4
c0020c49:	e8 00 63 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020c4e:	58                   	pop    eax
c0020c4f:	5a                   	pop    edx
c0020c50:	56                   	push   esi
c0020c51:	53                   	push   ebx
c0020c52:	e8 7b 8d fe ff       	call   c00099d2 <Device::addChild(Device*)>
c0020c57:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020c5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020c60:	e8 b9 91 fe ff       	call   c0009e1e <PhysicalDisk::startCache()>
c0020c65:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020c6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020c6f:	e8 b2 fe ff ff       	call   c0020b26 <SATAPI::detectMedia()>
c0020c74:	83 c4 14             	add    esp,0x14
c0020c77:	31 c0                	xor    eax,eax
c0020c79:	5b                   	pop    ebx
c0020c7a:	5e                   	pop    esi
c0020c7b:	c3                   	ret    

c0020c7c <SATAPI::read(unsigned long long, int, void*)>:
c0020c7c:	55                   	push   ebp
c0020c7d:	57                   	push   edi
c0020c7e:	56                   	push   esi
c0020c7f:	53                   	push   ebx
c0020c80:	83 ec 3c             	sub    esp,0x3c
c0020c83:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0020c87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c8b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020c8f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0020c93:	83 fd 04             	cmp    ebp,0x4
c0020c96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c9e:	7e 10                	jle    c0020cb0 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0020ca0:	83 ec 0c             	sub    esp,0xc
c0020ca3:	68 ac 65 02 c0       	push   0xc00265ac
c0020ca8:	e8 a1 f1 fe ff       	call   c000fe4e <KePanic(char const*)>
c0020cad:	83 c4 10             	add    esp,0x10
c0020cb0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020cb6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020cbc:	51                   	push   ecx
c0020cbd:	50                   	push   eax
c0020cbe:	83 c0 02             	add    eax,0x2
c0020cc1:	c1 e0 07             	shl    eax,0x7
c0020cc4:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020cca:	50                   	push   eax
c0020ccb:	52                   	push   edx
c0020ccc:	e8 ab e6 ff ff       	call   c001f37c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020cd1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020cd5:	b9 03 00 00 00       	mov    ecx,0x3
c0020cda:	fc                   	cld    
c0020cdb:	31 c0                	xor    eax,eax
c0020cdd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020cdf:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020ce4:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020ce9:	83 c4 0c             	add    esp,0xc
c0020cec:	6a 00                	push   0x0
c0020cee:	6a 00                	push   0x0
c0020cf0:	6a 00                	push   0x0
c0020cf2:	6a 00                	push   0x0
c0020cf4:	6a 02                	push   0x2
c0020cf6:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020cfa:	50                   	push   eax
c0020cfb:	53                   	push   ebx
c0020cfc:	e8 ff fa ff ff       	call   c0020800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020d01:	83 c4 20             	add    esp,0x20
c0020d04:	85 c0                	test   eax,eax
c0020d06:	89 c6                	mov    esi,eax
c0020d08:	75 46                	jne    c0020d50 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0020d0a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020d0e:	b9 03 00 00 00       	mov    ecx,0x3
c0020d13:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d19:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020d1e:	0f c8                	bswap  eax
c0020d20:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020d24:	89 e8                	mov    eax,ebp
c0020d26:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020d2a:	50                   	push   eax
c0020d2b:	55                   	push   ebp
c0020d2c:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020d30:	c1 e5 0b             	shl    ebp,0xb
c0020d33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d3b:	55                   	push   ebp
c0020d3c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020d40:	50                   	push   eax
c0020d41:	53                   	push   ebx
c0020d42:	e8 b9 fa ff ff       	call   c0020800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020d47:	83 c4 20             	add    esp,0x20
c0020d4a:	85 c0                	test   eax,eax
c0020d4c:	89 c6                	mov    esi,eax
c0020d4e:	74 0c                	je     c0020d5c <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0020d50:	83 ec 0c             	sub    esp,0xc
c0020d53:	53                   	push   ebx
c0020d54:	e8 cd fd ff ff       	call   c0020b26 <SATAPI::detectMedia()>
c0020d59:	83 c4 10             	add    esp,0x10
c0020d5c:	83 c4 3c             	add    esp,0x3c
c0020d5f:	89 f0                	mov    eax,esi
c0020d61:	5b                   	pop    ebx
c0020d62:	5e                   	pop    esi
c0020d63:	5f                   	pop    edi
c0020d64:	5d                   	pop    ebp
c0020d65:	c3                   	ret    

c0020d66 <IOAPIC::close(int, int, void*)>:
c0020d66:	b8 00 00 00 00       	mov    eax,0x0
c0020d6b:	c3                   	ret    

c0020d6c <apicGetBase()>:
c0020d6c:	55                   	push   ebp
c0020d6d:	89 e5                	mov    ebp,esp
c0020d6f:	83 ec 08             	sub    esp,0x8
c0020d72:	83 ec 0c             	sub    esp,0xc
c0020d75:	68 10 66 02 c0       	push   0xc0026610
c0020d7a:	e8 cf f0 fe ff       	call   c000fe4e <KePanic(char const*)>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	b8 00 00 00 00       	mov    eax,0x0
c0020d87:	c9                   	leave  
c0020d88:	c3                   	ret    
c0020d89:	90                   	nop

c0020d8a <IOAPIC::IOAPIC()>:
c0020d8a:	83 ec 0c             	sub    esp,0xc
c0020d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d91:	83 ec 08             	sub    esp,0x8
c0020d94:	68 1f 66 02 c0       	push   0xc002661f
c0020d99:	50                   	push   eax
c0020d9a:	e8 95 8d fe ff       	call   c0009b34 <Device::Device(char const*)>
c0020d9f:	83 c4 10             	add    esp,0x10
c0020da2:	ba 40 66 02 c0       	mov    edx,0xc0026640
c0020da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dab:	89 10                	mov    DWORD PTR [eax],edx
c0020dad:	90                   	nop
c0020dae:	83 c4 0c             	add    esp,0xc
c0020db1:	c3                   	ret    

c0020db2 <apicOpen()>:
c0020db2:	55                   	push   ebp
c0020db3:	89 e5                	mov    ebp,esp
c0020db5:	53                   	push   ebx
c0020db6:	83 ec 34             	sub    esp,0x34
c0020db9:	83 ec 0c             	sub    esp,0xc
c0020dbc:	68 27 66 02 c0       	push   0xc0026627
c0020dc1:	e8 88 61 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020dc6:	83 c4 10             	add    esp,0x10
c0020dc9:	a0 a0 04 03 c0       	mov    al,ds:0xc00304a0
c0020dce:	83 f0 01             	xor    eax,0x1
c0020dd1:	0f b6 c0             	movzx  eax,al
c0020dd4:	85 c0                	test   eax,eax
c0020dd6:	0f 84 a3 00 00 00    	je     c0020e7f <apicOpen()+0xcd>
c0020ddc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020de0:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0020de5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020de9:	0f b6 c0             	movzx  eax,al
c0020dec:	39 c2                	cmp    edx,eax
c0020dee:	0f 83 84 00 00 00    	jae    c0020e78 <apicOpen()+0xc6>
c0020df4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020dfb:	83 ec 0c             	sub    esp,0xc
c0020dfe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020e01:	e8 02 ed fe ff       	call   c000fb08 <malloc>
c0020e06:	83 c4 10             	add    esp,0x10
c0020e09:	89 c3                	mov    ebx,eax
c0020e0b:	83 ec 0c             	sub    esp,0xc
c0020e0e:	53                   	push   ebx
c0020e0f:	e8 76 ff ff ff       	call   c0020d8a <IOAPIC::IOAPIC()>
c0020e14:	83 c4 10             	add    esp,0x10
c0020e17:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020e1a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020e1e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020e21:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c0020e28:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c0020e2d:	83 c0 01             	add    eax,0x1
c0020e30:	a3 60 04 03 c0       	mov    ds:0xc0030460,eax
c0020e35:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0020e3a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020e40:	83 ec 08             	sub    esp,0x8
c0020e43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020e46:	50                   	push   eax
c0020e47:	e8 86 8b fe ff       	call   c00099d2 <Device::addChild(Device*)>
c0020e4c:	83 c4 10             	add    esp,0x10
c0020e4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e54:	83 c0 08             	add    eax,0x8
c0020e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e59:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020e5d:	6a 00                	push   0x0
c0020e5f:	6a 00                	push   0x0
c0020e61:	52                   	push   edx
c0020e62:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020e65:	ff d0                	call   eax
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020e6d:	83 c0 01             	add    eax,0x1
c0020e70:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020e73:	e9 68 ff ff ff       	jmp    c0020de0 <apicOpen()+0x2e>
c0020e78:	c6 05 a0 04 03 c0 01 	mov    BYTE PTR ds:0xc00304a0,0x1
c0020e7f:	e8 e8 fe ff ff       	call   c0020d6c <apicGetBase()>
c0020e84:	05 f0 00 00 00       	add    eax,0xf0
c0020e89:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020e8c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020e94:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020e9b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020ea2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020ea5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020ea8:	89 10                	mov    DWORD PTR [eax],edx
c0020eaa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020eb1:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0020eb6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020eb9:	7d 7c                	jge    c0020f37 <apicOpen()+0x185>
c0020ebb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020ebe:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0020ec5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020ec8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020ecb:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0020ed2:	c1 e8 08             	shr    eax,0x8
c0020ed5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020ed9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020edc:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0020ee3:	c1 e8 18             	shr    eax,0x18
c0020ee6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020ee9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020eed:	3d ff 00 00 00       	cmp    eax,0xff
c0020ef2:	75 3a                	jne    c0020f2e <apicOpen()+0x17c>
c0020ef4:	e8 73 fe ff ff       	call   c0020d6c <apicGetBase()>
c0020ef9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020efd:	83 fa 01             	cmp    edx,0x1
c0020f00:	75 07                	jne    c0020f09 <apicOpen()+0x157>
c0020f02:	ba 60 03 00 00       	mov    edx,0x360
c0020f07:	eb 05                	jmp    c0020f0e <apicOpen()+0x15c>
c0020f09:	ba 50 03 00 00       	mov    edx,0x350
c0020f0e:	01 d0                	add    eax,edx
c0020f10:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020f13:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f18:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020f1b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020f22:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020f26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020f29:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020f2c:	89 10                	mov    DWORD PTR [eax],edx
c0020f2e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020f32:	e9 7a ff ff ff       	jmp    c0020eb1 <apicOpen()+0xff>
c0020f37:	90                   	nop
c0020f38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020f3b:	c9                   	leave  
c0020f3c:	c3                   	ret    
c0020f3d:	90                   	nop

c0020f3e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020f3e:	55                   	push   ebp
c0020f3f:	89 e5                	mov    ebp,esp
c0020f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020f4a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020f4d:	72 1d                	jb     c0020f6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f52:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f5b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020f61:	01 d0                	add    eax,edx
c0020f63:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020f66:	73 04                	jae    c0020f6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020f68:	b0 01                	mov    al,0x1
c0020f6a:	eb 02                	jmp    c0020f6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020f6c:	b0 00                	mov    al,0x0
c0020f6e:	5d                   	pop    ebp
c0020f6f:	c3                   	ret    

c0020f70 <IOAPIC::read(int)>:
c0020f70:	55                   	push   ebp
c0020f71:	89 e5                	mov    ebp,esp
c0020f73:	83 ec 10             	sub    esp,0x10
c0020f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020f79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f7f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020f82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020f85:	0f b6 d0             	movzx  edx,al
c0020f88:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020f8b:	89 10                	mov    DWORD PTR [eax],edx
c0020f8d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020f90:	83 c0 10             	add    eax,0x10
c0020f93:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f95:	c9                   	leave  
c0020f96:	c3                   	ret    
c0020f97:	90                   	nop

c0020f98 <IOAPIC::open(int, int, void*)>:
c0020f98:	55                   	push   ebp
c0020f99:	89 e5                	mov    ebp,esp
c0020f9b:	57                   	push   edi
c0020f9c:	56                   	push   esi
c0020f9d:	53                   	push   ebx
c0020f9e:	83 ec 04             	sub    esp,0x4
c0020fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020fa7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fb0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020fb6:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0020fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fc9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020fcf:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0020fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fd9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fe2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020feb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020ff1:	0f b6 f0             	movzx  esi,al
c0020ff4:	89 d0                	mov    eax,edx
c0020ff6:	ba 00 00 00 00       	mov    edx,0x0
c0020ffb:	89 c7                	mov    edi,eax
c0020ffd:	83 e7 ff             	and    edi,0xffffffff
c0021000:	89 f9                	mov    ecx,edi
c0021002:	0f b6 da             	movzx  ebx,dl
c0021005:	89 c8                	mov    eax,ecx
c0021007:	89 da                	mov    edx,ebx
c0021009:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002100c:	8d 5e 08             	lea    ebx,[esi+0x8]
c002100f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021013:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021017:	83 e0 00             	and    eax,0x0
c002101a:	09 d0                	or     eax,edx
c002101c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021023:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021029:	8d 50 01             	lea    edx,[eax+0x1]
c002102c:	88 d1                	mov    cl,dl
c002102e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0021031:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0021037:	0f b6 d0             	movzx  edx,al
c002103a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002103d:	83 c2 08             	add    edx,0x8
c0021040:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021044:	0f b6 c9             	movzx  ecx,cl
c0021047:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002104d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021051:	6a 01                	push   0x1
c0021053:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021056:	e8 15 ff ff ff       	call   c0020f70 <IOAPIC::read(int)>
c002105b:	83 c4 08             	add    esp,0x8
c002105e:	c1 f8 10             	sar    eax,0x10
c0021061:	0f b6 c0             	movzx  eax,al
c0021064:	8d 50 01             	lea    edx,[eax+0x1]
c0021067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002106a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021070:	b8 00 00 00 00       	mov    eax,0x0
c0021075:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021078:	5b                   	pop    ebx
c0021079:	5e                   	pop    esi
c002107a:	5f                   	pop    edi
c002107b:	5d                   	pop    ebp
c002107c:	c3                   	ret    
c002107d:	90                   	nop

c002107e <IOAPIC::write(int, int)>:
c002107e:	55                   	push   ebp
c002107f:	89 e5                	mov    ebp,esp
c0021081:	83 ec 10             	sub    esp,0x10
c0021084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021087:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002108d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021090:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021093:	0f b6 d0             	movzx  edx,al
c0021096:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021099:	89 10                	mov    DWORD PTR [eax],edx
c002109b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002109e:	8d 50 10             	lea    edx,[eax+0x10]
c00210a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00210a4:	89 02                	mov    DWORD PTR [edx],eax
c00210a6:	90                   	nop
c00210a7:	c9                   	leave  
c00210a8:	c3                   	ret    
c00210a9:	90                   	nop

c00210aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00210aa:	55                   	push   ebp
c00210ab:	89 e5                	mov    ebp,esp
c00210ad:	53                   	push   ebx
c00210ae:	83 ec 2c             	sub    esp,0x2c
c00210b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00210b4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00210b7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00210ba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00210bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00210c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00210c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00210c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00210c9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00210cc:	88 d8                	mov    al,bl
c00210ce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00210d1:	88 c8                	mov    al,cl
c00210d3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00210d6:	88 d0                	mov    al,dl
c00210d8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00210db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00210df:	83 c0 08             	add    eax,0x8
c00210e2:	d1 e0                	shl    eax,1
c00210e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00210e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00210eb:	83 c0 08             	add    eax,0x8
c00210ee:	d1 e0                	shl    eax,1
c00210f0:	83 c0 01             	add    eax,0x1
c00210f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00210f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00210f9:	50                   	push   eax
c00210fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00210fd:	e8 6e fe ff ff       	call   c0020f70 <IOAPIC::read(int)>
c0021102:	83 c4 08             	add    esp,0x8
c0021105:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021108:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002110f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021112:	c1 e0 18             	shl    eax,0x18
c0021115:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021118:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002111b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002111e:	52                   	push   edx
c002111f:	50                   	push   eax
c0021120:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021123:	e8 56 ff ff ff       	call   c002107e <IOAPIC::write(int, int)>
c0021128:	83 c4 0c             	add    esp,0xc
c002112b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002112e:	50                   	push   eax
c002112f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021132:	e8 39 fe ff ff       	call   c0020f70 <IOAPIC::read(int)>
c0021137:	83 c4 08             	add    esp,0x8
c002113a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002113d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021144:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002114b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021152:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0021156:	85 c0                	test   eax,eax
c0021158:	74 09                	je     c0021163 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002115a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021161:	eb 07                	jmp    c002116a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0021163:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002116a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002116e:	85 c0                	test   eax,eax
c0021170:	74 09                	je     c002117b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0021172:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021179:	eb 07                	jmp    c0021182 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002117b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021182:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021189:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002118d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021190:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021193:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021196:	52                   	push   edx
c0021197:	50                   	push   eax
c0021198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002119b:	e8 de fe ff ff       	call   c002107e <IOAPIC::write(int, int)>
c00211a0:	83 c4 0c             	add    esp,0xc
c00211a3:	90                   	nop
c00211a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00211a7:	c9                   	leave  
c00211a8:	c3                   	ret    
c00211a9:	66 90                	xchg   ax,ax
c00211ab:	90                   	nop

c00211ac <APICTimer::close(int, int, void*)>:
c00211ac:	b8 00 00 00 00       	mov    eax,0x0
c00211b1:	c3                   	ret    
c00211b2:	66 90                	xchg   ax,ax

c00211b4 <apicTimerHandler(regs*, void*)>:
c00211b4:	83 ec 0c             	sub    esp,0xc
c00211b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00211bd:	b8 10 27 00 00       	mov    eax,0x2710
c00211c2:	ba 00 00 00 00       	mov    edx,0x0
c00211c7:	f7 f1                	div    ecx
c00211c9:	83 ec 0c             	sub    esp,0xc
c00211cc:	50                   	push   eax
c00211cd:	e8 d6 9e fe ff       	call   c000b0a8 <timerHandler(unsigned int)>
c00211d2:	83 c4 10             	add    esp,0x10
c00211d5:	90                   	nop
c00211d6:	83 c4 0c             	add    esp,0xc
c00211d9:	c3                   	ret    
c00211da:	66 90                	xchg   ax,ax

c00211dc <APICTimer::open(int, int, void*)>:
c00211dc:	83 ec 0c             	sub    esp,0xc
c00211df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00211e5:	83 c0 24             	add    eax,0x24
c00211e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ea:	83 ec 08             	sub    esp,0x8
c00211ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211f5:	ff d0                	call   eax
c00211f7:	83 c4 10             	add    esp,0x10
c00211fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021202:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021210:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002121a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	51                   	push   ecx
c0021224:	6a 01                	push   0x1
c0021226:	68 b4 11 02 c0       	push   0xc00211b4
c002122b:	52                   	push   edx
c002122c:	50                   	push   eax
c002122d:	e8 4c 87 fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021232:	83 c4 20             	add    esp,0x20
c0021235:	89 c2                	mov    edx,eax
c0021237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021241:	b8 00 00 00 00       	mov    eax,0x0
c0021246:	83 c4 0c             	add    esp,0xc
c0021249:	c3                   	ret    
c002124a:	66 90                	xchg   ax,ax

c002124c <APICTimer::write(int)>:
c002124c:	83 ec 0c             	sub    esp,0xc
c002124f:	83 ec 0c             	sub    esp,0xc
c0021252:	68 64 66 02 c0       	push   0xc0026664
c0021257:	e8 f2 eb fe ff       	call   c000fe4e <KePanic(char const*)>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021263:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021267:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002126d:	90                   	nop
c002126e:	83 c4 0c             	add    esp,0xc
c0021271:	c3                   	ret    
c0021272:	66 90                	xchg   ax,ax

c0021274 <APICTimer::APICTimer()>:
c0021274:	83 ec 0c             	sub    esp,0xc
c0021277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127b:	83 ec 08             	sub    esp,0x8
c002127e:	68 74 66 02 c0       	push   0xc0026674
c0021283:	50                   	push   eax
c0021284:	e8 53 9d fe ff       	call   c000afdc <Timer::Timer(char const*)>
c0021289:	83 c4 10             	add    esp,0x10
c002128c:	ba 88 66 02 c0       	mov    edx,0xc0026688
c0021291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021295:	89 10                	mov    DWORD PTR [eax],edx
c0021297:	90                   	nop
c0021298:	83 c4 0c             	add    esp,0xc
c002129b:	c3                   	ret    

c002129c <PIT::write(int)>:
c002129c:	83 ec 10             	sub    esp,0x10
c002129f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00212a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00212ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212b1:	a3 a4 04 03 c0       	mov    ds:0xc00304a4,eax
c00212b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00212bb:	89 c2                	mov    edx,eax
c00212bd:	c1 fa 1f             	sar    edx,0x1f
c00212c0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00212c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212c8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00212cf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00212d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00212d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00212dd:	ee                   	out    dx,al
c00212de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212e2:	0f b6 c0             	movzx  eax,al
c00212e5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00212ec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00212f0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00212f4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00212f9:	ee                   	out    dx,al
c00212fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212fe:	c1 f8 08             	sar    eax,0x8
c0021301:	0f b6 c0             	movzx  eax,al
c0021304:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002130b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002130f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021313:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021318:	ee                   	out    dx,al
c0021319:	90                   	nop
c002131a:	83 c4 10             	add    esp,0x10
c002131d:	c3                   	ret    
c002131e:	66 90                	xchg   ax,ax

c0021320 <pitHandler(regs*, void*)>:
c0021320:	83 ec 0c             	sub    esp,0xc
c0021323:	8b 0d a4 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304a4
c0021329:	b8 10 27 00 00       	mov    eax,0x2710
c002132e:	89 c2                	mov    edx,eax
c0021330:	c1 fa 1f             	sar    edx,0x1f
c0021333:	f7 f9                	idiv   ecx
c0021335:	83 ec 0c             	sub    esp,0xc
c0021338:	50                   	push   eax
c0021339:	e8 6a 9d fe ff       	call   c000b0a8 <timerHandler(unsigned int)>
c002133e:	83 c4 10             	add    esp,0x10
c0021341:	90                   	nop
c0021342:	83 c4 0c             	add    esp,0xc
c0021345:	c3                   	ret    
c0021346:	66 90                	xchg   ax,ax

c0021348 <PIT::open(int, int, void*)>:
c0021348:	83 ec 0c             	sub    esp,0xc
c002134b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021351:	83 c0 24             	add    eax,0x24
c0021354:	8b 00                	mov    eax,DWORD PTR [eax]
c0021356:	83 ec 08             	sub    esp,0x8
c0021359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002135d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021361:	ff d0                	call   eax
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136a:	83 ec 0c             	sub    esp,0xc
c002136d:	6a 00                	push   0x0
c002136f:	6a 01                	push   0x1
c0021371:	68 20 13 02 c0       	push   0xc0021320
c0021376:	6a 00                	push   0x0
c0021378:	50                   	push   eax
c0021379:	e8 00 86 fe ff       	call   c000997e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002137e:	83 c4 20             	add    esp,0x20
c0021381:	89 c2                	mov    edx,eax
c0021383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021387:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002138d:	b8 00 00 00 00       	mov    eax,0x0
c0021392:	83 c4 0c             	add    esp,0xc
c0021395:	c3                   	ret    
c0021396:	66 90                	xchg   ax,ax

c0021398 <PIT::close(int, int, void*)>:
c0021398:	83 ec 0c             	sub    esp,0xc
c002139b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002139f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00213a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ad:	6a 01                	push   0x1
c00213af:	68 20 13 02 c0       	push   0xc0021320
c00213b4:	6a 00                	push   0x0
c00213b6:	50                   	push   eax
c00213b7:	e8 f8 85 fe ff       	call   c00099b4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	b8 00 00 00 00       	mov    eax,0x0
c00213c4:	83 c4 0c             	add    esp,0xc
c00213c7:	c3                   	ret    

c00213c8 <PIT::PIT()>:
c00213c8:	83 ec 0c             	sub    esp,0xc
c00213cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cf:	83 ec 08             	sub    esp,0x8
c00213d2:	68 b0 66 02 c0       	push   0xc00266b0
c00213d7:	50                   	push   eax
c00213d8:	e8 ff 9b fe ff       	call   c000afdc <Timer::Timer(char const*)>
c00213dd:	83 c4 10             	add    esp,0x10
c00213e0:	ba d8 66 02 c0       	mov    edx,0xc00266d8
c00213e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e9:	89 10                	mov    DWORD PTR [eax],edx
c00213eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00213f5:	0f b6 d0             	movzx  edx,al
c00213f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213fc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021407:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002140d:	0f b6 d0             	movzx  edx,al
c0021410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021414:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021423:	8d 50 01             	lea    edx,[eax+0x1]
c0021426:	88 d1                	mov    cl,dl
c0021428:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002142c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021432:	0f b6 d0             	movzx  edx,al
c0021435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021439:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002143d:	83 e1 3f             	and    ecx,0x3f
c0021440:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021444:	90                   	nop
c0021445:	83 c4 0c             	add    esp,0xc
c0021448:	c3                   	ret    
c0021449:	66 90                	xchg   ax,ax
c002144b:	66 90                	xchg   ax,ax
c002144d:	66 90                	xchg   ax,ax
c002144f:	90                   	nop

c0021450 <avxDetect>:
c0021450:	b8 01 00 00 00       	mov    eax,0x1
c0021455:	0f a2                	cpuid  
c0021457:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002145d:	74 15                	je     c0021474 <avxDetect.noAVX>
c002145f:	b8 01 00 00 00       	mov    eax,0x1
c0021464:	0f a2                	cpuid  
c0021466:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002146c:	74 06                	je     c0021474 <avxDetect.noAVX>
c002146e:	b8 01 00 00 00       	mov    eax,0x1
c0021473:	c3                   	ret    

c0021474 <avxDetect.noAVX>:
c0021474:	b8 00 00 00 00       	mov    eax,0x0
c0021479:	c3                   	ret    

c002147a <avxSave>:
c002147a:	53                   	push   ebx
c002147b:	52                   	push   edx
c002147c:	31 c0                	xor    eax,eax
c002147e:	48                   	dec    eax
c002147f:	89 c2                	mov    edx,eax
c0021481:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021485:	0f ae 23             	xsave  [ebx]
c0021488:	5a                   	pop    edx
c0021489:	5b                   	pop    ebx
c002148a:	c3                   	ret    

c002148b <avxLoad>:
c002148b:	53                   	push   ebx
c002148c:	52                   	push   edx
c002148d:	31 c0                	xor    eax,eax
c002148f:	48                   	dec    eax
c0021490:	89 c2                	mov    edx,eax
c0021492:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021496:	0f ae 2b             	xrstor [ebx]
c0021499:	5a                   	pop    edx
c002149a:	5b                   	pop    ebx
c002149b:	c3                   	ret    

c002149c <avxInit>:
c002149c:	e8 17 03 00 00       	call   c00217b8 <sseInit>
c00214a1:	50                   	push   eax
c00214a2:	51                   	push   ecx
c00214a3:	0f 20 e0             	mov    eax,cr4
c00214a6:	0d 00 00 04 00       	or     eax,0x40000
c00214ab:	0f 22 e0             	mov    cr4,eax
c00214ae:	31 c9                	xor    ecx,ecx
c00214b0:	0f 01 d0             	xgetbv 
c00214b3:	0d 07 00 00 00       	or     eax,0x7
c00214b8:	0f 01 d1             	xsetbv 
c00214bb:	59                   	pop    ecx
c00214bc:	58                   	pop    eax
c00214bd:	c3                   	ret    

c00214be <avxClose>:
c00214be:	c3                   	ret    
c00214bf:	90                   	nop

c00214c0 <isr0>:
c00214c0:	fa                   	cli    
c00214c1:	68 00 00 00 00       	push   0x0
c00214c6:	68 00 00 00 00       	push   0x0
c00214cb:	e9 56 01 00 00       	jmp    c0021626 <int_common_stub>

c00214d0 <isr1>:
c00214d0:	fa                   	cli    
c00214d1:	6a 00                	push   0x0
c00214d3:	6a 01                	push   0x1
c00214d5:	e9 4c 01 00 00       	jmp    c0021626 <int_common_stub>

c00214da <isr2>:
c00214da:	fa                   	cli    
c00214db:	6a 00                	push   0x0
c00214dd:	6a 02                	push   0x2
c00214df:	e9 42 01 00 00       	jmp    c0021626 <int_common_stub>

c00214e4 <isr3>:
c00214e4:	fa                   	cli    
c00214e5:	6a 00                	push   0x0
c00214e7:	6a 03                	push   0x3
c00214e9:	e9 38 01 00 00       	jmp    c0021626 <int_common_stub>

c00214ee <isr4>:
c00214ee:	fa                   	cli    
c00214ef:	6a 00                	push   0x0
c00214f1:	6a 04                	push   0x4
c00214f3:	e9 2e 01 00 00       	jmp    c0021626 <int_common_stub>

c00214f8 <isr5>:
c00214f8:	fa                   	cli    
c00214f9:	6a 00                	push   0x0
c00214fb:	6a 05                	push   0x5
c00214fd:	e9 24 01 00 00       	jmp    c0021626 <int_common_stub>

c0021502 <isr6>:
c0021502:	fa                   	cli    
c0021503:	6a 00                	push   0x0
c0021505:	6a 06                	push   0x6
c0021507:	e9 1a 01 00 00       	jmp    c0021626 <int_common_stub>

c002150c <isr7>:
c002150c:	fa                   	cli    
c002150d:	6a 00                	push   0x0
c002150f:	6a 07                	push   0x7
c0021511:	e9 10 01 00 00       	jmp    c0021626 <int_common_stub>

c0021516 <isr8>:
c0021516:	fa                   	cli    
c0021517:	6a 08                	push   0x8
c0021519:	e9 08 01 00 00       	jmp    c0021626 <int_common_stub>

c002151e <isr9>:
c002151e:	fa                   	cli    
c002151f:	6a 00                	push   0x0
c0021521:	6a 09                	push   0x9
c0021523:	e9 fe 00 00 00       	jmp    c0021626 <int_common_stub>

c0021528 <isr10>:
c0021528:	fa                   	cli    
c0021529:	6a 0a                	push   0xa
c002152b:	e9 f6 00 00 00       	jmp    c0021626 <int_common_stub>

c0021530 <isr11>:
c0021530:	fa                   	cli    
c0021531:	6a 0b                	push   0xb
c0021533:	e9 ee 00 00 00       	jmp    c0021626 <int_common_stub>

c0021538 <isr12>:
c0021538:	fa                   	cli    
c0021539:	6a 0c                	push   0xc
c002153b:	e9 e6 00 00 00       	jmp    c0021626 <int_common_stub>

c0021540 <isr13>:
c0021540:	fa                   	cli    
c0021541:	6a 0d                	push   0xd
c0021543:	53                   	push   ebx
c0021544:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021548:	81 fb e5 16 02 c0    	cmp    ebx,0xc00216e5
c002154e:	5b                   	pop    ebx
c002154f:	0f 84 92 01 00 00    	je     c00216e7 <finishSignal2>
c0021555:	e9 cc 00 00 00       	jmp    c0021626 <int_common_stub>

c002155a <isr14>:
c002155a:	fa                   	cli    
c002155b:	6a 0e                	push   0xe
c002155d:	e9 c4 00 00 00       	jmp    c0021626 <int_common_stub>

c0021562 <isr15>:
c0021562:	fa                   	cli    
c0021563:	6a 00                	push   0x0
c0021565:	6a 0f                	push   0xf
c0021567:	e9 ba 00 00 00       	jmp    c0021626 <int_common_stub>

c002156c <isr16>:
c002156c:	fa                   	cli    
c002156d:	6a 00                	push   0x0
c002156f:	6a 10                	push   0x10
c0021571:	e9 b0 00 00 00       	jmp    c0021626 <int_common_stub>

c0021576 <isr17>:
c0021576:	fa                   	cli    
c0021577:	6a 00                	push   0x0
c0021579:	6a 11                	push   0x11
c002157b:	e9 a6 00 00 00       	jmp    c0021626 <int_common_stub>

c0021580 <isr18>:
c0021580:	fa                   	cli    
c0021581:	6a 00                	push   0x0
c0021583:	6a 12                	push   0x12
c0021585:	e9 9c 00 00 00       	jmp    c0021626 <int_common_stub>

c002158a <irq3>:
c002158a:	fa                   	cli    
c002158b:	6a 00                	push   0x0
c002158d:	6a 23                	push   0x23
c002158f:	e9 92 00 00 00       	jmp    c0021626 <int_common_stub>

c0021594 <irq4>:
c0021594:	fa                   	cli    
c0021595:	6a 00                	push   0x0
c0021597:	6a 24                	push   0x24
c0021599:	e9 88 00 00 00       	jmp    c0021626 <int_common_stub>

c002159e <irq5>:
c002159e:	fa                   	cli    
c002159f:	6a 00                	push   0x0
c00215a1:	6a 25                	push   0x25
c00215a3:	e9 7e 00 00 00       	jmp    c0021626 <int_common_stub>

c00215a8 <irq6>:
c00215a8:	fa                   	cli    
c00215a9:	6a 00                	push   0x0
c00215ab:	6a 26                	push   0x26
c00215ad:	e9 74 00 00 00       	jmp    c0021626 <int_common_stub>

c00215b2 <irq7>:
c00215b2:	fa                   	cli    
c00215b3:	6a 00                	push   0x0
c00215b5:	6a 27                	push   0x27
c00215b7:	e9 6a 00 00 00       	jmp    c0021626 <int_common_stub>

c00215bc <irq8>:
c00215bc:	fa                   	cli    
c00215bd:	6a 00                	push   0x0
c00215bf:	6a 28                	push   0x28
c00215c1:	e9 60 00 00 00       	jmp    c0021626 <int_common_stub>

c00215c6 <irq9>:
c00215c6:	fa                   	cli    
c00215c7:	6a 00                	push   0x0
c00215c9:	6a 29                	push   0x29
c00215cb:	e9 56 00 00 00       	jmp    c0021626 <int_common_stub>

c00215d0 <irq10>:
c00215d0:	fa                   	cli    
c00215d1:	6a 00                	push   0x0
c00215d3:	6a 2a                	push   0x2a
c00215d5:	e9 4c 00 00 00       	jmp    c0021626 <int_common_stub>

c00215da <irq11>:
c00215da:	fa                   	cli    
c00215db:	6a 00                	push   0x0
c00215dd:	6a 2b                	push   0x2b
c00215df:	e9 42 00 00 00       	jmp    c0021626 <int_common_stub>

c00215e4 <irq12>:
c00215e4:	fa                   	cli    
c00215e5:	6a 00                	push   0x0
c00215e7:	6a 2c                	push   0x2c
c00215e9:	e9 38 00 00 00       	jmp    c0021626 <int_common_stub>

c00215ee <irq13>:
c00215ee:	fa                   	cli    
c00215ef:	6a 00                	push   0x0
c00215f1:	6a 2d                	push   0x2d
c00215f3:	e9 2e 00 00 00       	jmp    c0021626 <int_common_stub>

c00215f8 <irq14>:
c00215f8:	fa                   	cli    
c00215f9:	6a 00                	push   0x0
c00215fb:	6a 2e                	push   0x2e
c00215fd:	e9 24 00 00 00       	jmp    c0021626 <int_common_stub>

c0021602 <irq15>:
c0021602:	fa                   	cli    
c0021603:	6a 00                	push   0x0
c0021605:	6a 2f                	push   0x2f
c0021607:	e9 1a 00 00 00       	jmp    c0021626 <int_common_stub>

c002160c <irq1>:
c002160c:	fa                   	cli    
c002160d:	6a 00                	push   0x0
c002160f:	6a 21                	push   0x21
c0021611:	eb 13                	jmp    c0021626 <int_common_stub>

c0021613 <irq2>:
c0021613:	fa                   	cli    
c0021614:	6a 00                	push   0x0
c0021616:	6a 22                	push   0x22
c0021618:	eb 0c                	jmp    c0021626 <int_common_stub>

c002161a <isr96>:
c002161a:	6a 00                	push   0x0
c002161c:	6a 60                	push   0x60
c002161e:	fb                   	sti    
c002161f:	eb 05                	jmp    c0021626 <int_common_stub>

c0021621 <irq0>:
c0021621:	fa                   	cli    
c0021622:	6a 00                	push   0x0
c0021624:	6a 20                	push   0x20

c0021626 <int_common_stub>:
c0021626:	60                   	pusha  
c0021627:	1e                   	push   ds
c0021628:	06                   	push   es
c0021629:	0f a0                	push   fs
c002162b:	0f a8                	push   gs
c002162d:	66 b8 10 00          	mov    ax,0x10
c0021631:	66 8e d8             	mov    ds,ax
c0021634:	66 8e c0             	mov    es,ax
c0021637:	66 8e e0             	mov    fs,ax
c002163a:	66 8e e8             	mov    gs,ax
c002163d:	54                   	push   esp
c002163e:	fc                   	cld    
c002163f:	e8 18 d3 fe ff       	call   c000e95c <int_handler>
c0021644:	81 c4 04 00 00 00    	add    esp,0x4
c002164a:	0f a9                	pop    gs
c002164c:	0f a1                	pop    fs
c002164e:	07                   	pop    es
c002164f:	1f                   	pop    ds
c0021650:	e8 1e fb fe ff       	call   c0011173 <KiCheckSignalZ>
c0021655:	85 c0                	test   eax,eax
c0021657:	75 08                	jne    c0021661 <doSignals>
c0021659:	61                   	popa   
c002165a:	81 c4 08 00 00 00    	add    esp,0x8
c0021660:	cf                   	iret   

c0021661 <doSignals>:
c0021661:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021666:	61                   	popa   
c0021667:	53                   	push   ebx
c0021668:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002166e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021671:	5b                   	pop    ebx
c0021672:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021677:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002167a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002167d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021680:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021683:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021686:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021689:	81 c4 08 00 00 00    	add    esp,0x8
c002168f:	5e                   	pop    esi
c0021690:	5b                   	pop    ebx
c0021691:	59                   	pop    ecx
c0021692:	5a                   	pop    edx
c0021693:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021696:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021699:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002169c:	52                   	push   edx
c002169d:	51                   	push   ecx
c002169e:	53                   	push   ebx
c002169f:	56                   	push   esi
c00216a0:	81 ec 08 00 00 00    	sub    esp,0x8
c00216a6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00216a9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00216ac:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00216af:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00216b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00216b5:	60                   	pusha  
c00216b6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00216bc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00216bf:	89 e3                	mov    ebx,esp
c00216c1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00216c4:	52                   	push   edx
c00216c5:	68 e5 16 02 c0       	push   0xc00216e5
c00216ca:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00216cd:	89 dc                	mov    esp,ebx
c00216cf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00216d2:	68 23 00 00 00       	push   0x23
c00216d7:	51                   	push   ecx
c00216d8:	68 02 02 00 00       	push   0x202
c00216dd:	68 1b 00 00 00       	push   0x1b
c00216e2:	ff 36                	push   DWORD PTR [esi]
c00216e4:	cf                   	iret   

c00216e5 <finishSignal>:
c00216e5:	cd 0f                	int    0xf

c00216e7 <finishSignal2>:
c00216e7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00216ed:	e8 0d fb fe ff       	call   c00111ff <KiFinishSignalZ>
c00216f2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00216f8:	68 23 00 00 00       	push   0x23
c00216fd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021700:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021703:	68 1b 00 00 00       	push   0x1b
c0021708:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002170b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002170e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021711:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021714:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021717:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002171a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002171d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021720:	cf                   	iret   
c0021721:	90                   	nop
c0021722:	90                   	nop
c0021723:	90                   	nop

c0021724 <irq16>:
c0021724:	fa                   	cli    
c0021725:	6a 00                	push   0x0
c0021727:	6a 30                	push   0x30
c0021729:	e9 f8 fe ff ff       	jmp    c0021626 <int_common_stub>

c002172e <irq17>:
c002172e:	fa                   	cli    
c002172f:	6a 00                	push   0x0
c0021731:	6a 31                	push   0x31
c0021733:	e9 ee fe ff ff       	jmp    c0021626 <int_common_stub>

c0021738 <irq18>:
c0021738:	fa                   	cli    
c0021739:	6a 00                	push   0x0
c002173b:	6a 32                	push   0x32
c002173d:	e9 e4 fe ff ff       	jmp    c0021626 <int_common_stub>

c0021742 <irq19>:
c0021742:	fa                   	cli    
c0021743:	6a 00                	push   0x0
c0021745:	6a 33                	push   0x33
c0021747:	e9 da fe ff ff       	jmp    c0021626 <int_common_stub>

c002174c <irq20>:
c002174c:	fa                   	cli    
c002174d:	6a 00                	push   0x0
c002174f:	6a 34                	push   0x34
c0021751:	e9 d0 fe ff ff       	jmp    c0021626 <int_common_stub>

c0021756 <irq21>:
c0021756:	fa                   	cli    
c0021757:	6a 00                	push   0x0
c0021759:	6a 35                	push   0x35
c002175b:	e9 c6 fe ff ff       	jmp    c0021626 <int_common_stub>

c0021760 <irq22>:
c0021760:	fa                   	cli    
c0021761:	6a 00                	push   0x0
c0021763:	6a 36                	push   0x36
c0021765:	e9 bc fe ff ff       	jmp    c0021626 <int_common_stub>

c002176a <irq23>:
c002176a:	fa                   	cli    
c002176b:	6a 00                	push   0x0
c002176d:	6a 37                	push   0x37
c002176f:	e9 b2 fe ff ff       	jmp    c0021626 <int_common_stub>
c0021774:	66 90                	xchg   ax,ax
c0021776:	66 90                	xchg   ax,ax
c0021778:	66 90                	xchg   ax,ax
c002177a:	66 90                	xchg   ax,ax
c002177c:	66 90                	xchg   ax,ax
c002177e:	66 90                	xchg   ax,ax

c0021780 <i386GetRDRAND>:
c0021780:	b9 64 00 00 00       	mov    ecx,0x64

c0021785 <retry>:
c0021785:	0f c7 f0             	rdrand eax
c0021788:	72 05                	jb     c002178f <retry.done>
c002178a:	e2 f9                	loop   c0021785 <retry>

c002178c <retry.fail>:
c002178c:	31 c0                	xor    eax,eax
c002178e:	c3                   	ret    

c002178f <retry.done>:
c002178f:	c3                   	ret    

c0021790 <sseDetect>:
c0021790:	b8 01 00 00 00       	mov    eax,0x1
c0021795:	0f a2                	cpuid  
c0021797:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002179d:	74 06                	je     c00217a5 <sseDetect.noSSE>
c002179f:	b8 01 00 00 00       	mov    eax,0x1
c00217a4:	c3                   	ret    

c00217a5 <sseDetect.noSSE>:
c00217a5:	31 c0                	xor    eax,eax
c00217a7:	c3                   	ret    

c00217a8 <sseSave>:
c00217a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217ac:	0f ae 00             	fxsave [eax]
c00217af:	c3                   	ret    

c00217b0 <sseLoad>:
c00217b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217b4:	0f ae 08             	fxrstor [eax]
c00217b7:	c3                   	ret    

c00217b8 <sseInit>:
c00217b8:	e8 48 00 00 00       	call   c0021805 <x87Init>
c00217bd:	0f 20 e0             	mov    eax,cr4
c00217c0:	66 0d 00 06          	or     ax,0x600
c00217c4:	0f 22 e0             	mov    cr4,eax
c00217c7:	c3                   	ret    

c00217c8 <sseClose>:
c00217c8:	c3                   	ret    
c00217c9:	66 90                	xchg   ax,ax
c00217cb:	66 90                	xchg   ax,ax
c00217cd:	66 90                	xchg   ax,ax
c00217cf:	90                   	nop

c00217d0 <value_37F>:
c00217d0:	7f 03                	jg     c00217d5 <value_37A+0x1>

c00217d2 <value_37E>:
c00217d2:	7e 03                	jle    c00217d7 <x87Detect+0x1>

c00217d4 <value_37A>:
c00217d4:	7a 03                	jp     c00217d9 <x87Detect+0x3>

c00217d6 <x87Detect>:
c00217d6:	53                   	push   ebx
c00217d7:	51                   	push   ecx
c00217d8:	52                   	push   edx
c00217d9:	b8 01 00 00 00       	mov    eax,0x1
c00217de:	0f a2                	cpuid  
c00217e0:	f7 c2 01 00 00 00    	test   edx,0x1
c00217e6:	74 06                	je     c00217ee <x87Detect.nox87>
c00217e8:	b8 01 00 00 00       	mov    eax,0x1
c00217ed:	c3                   	ret    

c00217ee <x87Detect.nox87>:
c00217ee:	b8 00 00 00 00       	mov    eax,0x0
c00217f3:	5a                   	pop    edx
c00217f4:	59                   	pop    ecx
c00217f5:	5b                   	pop    ebx
c00217f6:	c3                   	ret    

c00217f7 <x87Save>:
c00217f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217fb:	dd 30                	fnsave [eax]
c00217fd:	c3                   	ret    

c00217fe <x87Load>:
c00217fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021802:	dd 20                	frstor [eax]
c0021804:	c3                   	ret    

c0021805 <x87Init>:
c0021805:	0f 20 c0             	mov    eax,cr0
c0021808:	66 25 fb ff          	and    ax,0xfffb
c002180c:	66 0d 22 00          	or     ax,0x22
c0021810:	0f 22 c0             	mov    cr0,eax
c0021813:	db e3                	fninit 
c0021815:	0f 06                	clts   
c0021817:	d9 2d d4 17 02 c0    	fldcw  WORD PTR ds:0xc00217d4
c002181d:	c3                   	ret    

c002181e <x87Close>:
c002181e:	c3                   	ret    
c002181f:	90                   	nop

c0021820 <__do_global_ctors_aux>:
c0021820:	a1 d4 27 02 c0       	mov    eax,ds:0xc00227d4
c0021825:	83 f8 ff             	cmp    eax,0xffffffff
c0021828:	74 1a                	je     c0021844 <__do_global_ctors_aux+0x24>
c002182a:	55                   	push   ebp
c002182b:	89 e5                	mov    ebp,esp
c002182d:	53                   	push   ebx
c002182e:	52                   	push   edx
c002182f:	bb d4 27 02 c0       	mov    ebx,0xc00227d4
c0021834:	ff d0                	call   eax
c0021836:	83 eb 04             	sub    ebx,0x4
c0021839:	8b 03                	mov    eax,DWORD PTR [ebx]
c002183b:	83 f8 ff             	cmp    eax,0xffffffff
c002183e:	75 f4                	jne    c0021834 <__do_global_ctors_aux+0x14>
c0021840:	58                   	pop    eax
c0021841:	5b                   	pop    ebx
c0021842:	5d                   	pop    ebp
c0021843:	c3                   	ret    
c0021844:	c3                   	ret    
c0021845:	66 90                	xchg   ax,ax
c0021847:	90                   	nop

c0021848 <__divdi3>:
c0021848:	55                   	push   ebp
c0021849:	57                   	push   edi
c002184a:	56                   	push   esi
c002184b:	53                   	push   ebx
c002184c:	83 ec 1c             	sub    esp,0x1c
c002184f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021857:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002185a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002185e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021862:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021866:	85 db                	test   ebx,ebx
c0021868:	0f 88 8e 00 00 00    	js     c00218fc <__divdi3+0xb4>
c002186e:	89 dd                	mov    ebp,ebx
c0021870:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021878:	89 d3                	mov    ebx,edx
c002187a:	85 d2                	test   edx,edx
c002187c:	79 0d                	jns    c002188b <__divdi3+0x43>
c002187e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021882:	f7 d8                	neg    eax
c0021884:	83 d2 00             	adc    edx,0x0
c0021887:	f7 da                	neg    edx
c0021889:	89 d3                	mov    ebx,edx
c002188b:	89 c7                	mov    edi,eax
c002188d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021890:	85 db                	test   ebx,ebx
c0021892:	75 48                	jne    c00218dc <__divdi3+0x94>
c0021894:	39 ef                	cmp    edi,ebp
c0021896:	76 24                	jbe    c00218bc <__divdi3+0x74>
c0021898:	89 ea                	mov    edx,ebp
c002189a:	f7 f7                	div    edi
c002189c:	89 c1                	mov    ecx,eax
c002189e:	31 f6                	xor    esi,esi
c00218a0:	89 c8                	mov    eax,ecx
c00218a2:	89 f2                	mov    edx,esi
c00218a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218a8:	85 c9                	test   ecx,ecx
c00218aa:	74 07                	je     c00218b3 <__divdi3+0x6b>
c00218ac:	f7 d8                	neg    eax
c00218ae:	83 d2 00             	adc    edx,0x0
c00218b1:	f7 da                	neg    edx
c00218b3:	83 c4 1c             	add    esp,0x1c
c00218b6:	5b                   	pop    ebx
c00218b7:	5e                   	pop    esi
c00218b8:	5f                   	pop    edi
c00218b9:	5d                   	pop    ebp
c00218ba:	c3                   	ret    
c00218bb:	90                   	nop
c00218bc:	85 ff                	test   edi,edi
c00218be:	75 0b                	jne    c00218cb <__divdi3+0x83>
c00218c0:	b8 01 00 00 00       	mov    eax,0x1
c00218c5:	31 d2                	xor    edx,edx
c00218c7:	f7 f3                	div    ebx
c00218c9:	89 c7                	mov    edi,eax
c00218cb:	31 d2                	xor    edx,edx
c00218cd:	89 e8                	mov    eax,ebp
c00218cf:	f7 f7                	div    edi
c00218d1:	89 c6                	mov    esi,eax
c00218d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218d6:	f7 f7                	div    edi
c00218d8:	89 c1                	mov    ecx,eax
c00218da:	eb c4                	jmp    c00218a0 <__divdi3+0x58>
c00218dc:	39 eb                	cmp    ebx,ebp
c00218de:	77 3c                	ja     c002191c <__divdi3+0xd4>
c00218e0:	0f bd f3             	bsr    esi,ebx
c00218e3:	83 f6 1f             	xor    esi,0x1f
c00218e6:	75 40                	jne    c0021928 <__divdi3+0xe0>
c00218e8:	39 eb                	cmp    ebx,ebp
c00218ea:	72 09                	jb     c00218f5 <__divdi3+0xad>
c00218ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00218ef:	0f 87 97 00 00 00    	ja     c002198c <__divdi3+0x144>
c00218f5:	b9 01 00 00 00       	mov    ecx,0x1
c00218fa:	eb a4                	jmp    c00218a0 <__divdi3+0x58>
c00218fc:	f7 d9                	neg    ecx
c00218fe:	83 d3 00             	adc    ebx,0x0
c0021901:	f7 db                	neg    ebx
c0021903:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021906:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002190a:	89 dd                	mov    ebp,ebx
c002190c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021914:	e9 5f ff ff ff       	jmp    c0021878 <__divdi3+0x30>
c0021919:	8d 76 00             	lea    esi,[esi+0x0]
c002191c:	31 f6                	xor    esi,esi
c002191e:	31 c9                	xor    ecx,ecx
c0021920:	e9 7b ff ff ff       	jmp    c00218a0 <__divdi3+0x58>
c0021925:	8d 76 00             	lea    esi,[esi+0x0]
c0021928:	b8 20 00 00 00       	mov    eax,0x20
c002192d:	29 f0                	sub    eax,esi
c002192f:	89 f1                	mov    ecx,esi
c0021931:	d3 e3                	shl    ebx,cl
c0021933:	89 fa                	mov    edx,edi
c0021935:	88 c1                	mov    cl,al
c0021937:	d3 ea                	shr    edx,cl
c0021939:	09 da                	or     edx,ebx
c002193b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002193f:	89 f1                	mov    ecx,esi
c0021941:	d3 e7                	shl    edi,cl
c0021943:	89 eb                	mov    ebx,ebp
c0021945:	88 c1                	mov    cl,al
c0021947:	d3 eb                	shr    ebx,cl
c0021949:	89 f1                	mov    ecx,esi
c002194b:	d3 e5                	shl    ebp,cl
c002194d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021950:	88 c1                	mov    cl,al
c0021952:	d3 ea                	shr    edx,cl
c0021954:	09 d5                	or     ebp,edx
c0021956:	89 e8                	mov    eax,ebp
c0021958:	89 da                	mov    edx,ebx
c002195a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002195e:	89 d3                	mov    ebx,edx
c0021960:	89 c5                	mov    ebp,eax
c0021962:	f7 e7                	mul    edi
c0021964:	39 d3                	cmp    ebx,edx
c0021966:	72 18                	jb     c0021980 <__divdi3+0x138>
c0021968:	74 0a                	je     c0021974 <__divdi3+0x12c>
c002196a:	89 e9                	mov    ecx,ebp
c002196c:	31 f6                	xor    esi,esi
c002196e:	e9 2d ff ff ff       	jmp    c00218a0 <__divdi3+0x58>
c0021973:	90                   	nop
c0021974:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021977:	89 f1                	mov    ecx,esi
c0021979:	d3 e7                	shl    edi,cl
c002197b:	39 c7                	cmp    edi,eax
c002197d:	73 eb                	jae    c002196a <__divdi3+0x122>
c002197f:	90                   	nop
c0021980:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021983:	31 f6                	xor    esi,esi
c0021985:	e9 16 ff ff ff       	jmp    c00218a0 <__divdi3+0x58>
c002198a:	66 90                	xchg   ax,ax
c002198c:	31 c9                	xor    ecx,ecx
c002198e:	e9 0d ff ff ff       	jmp    c00218a0 <__divdi3+0x58>
c0021993:	90                   	nop

c0021994 <__moddi3>:
c0021994:	55                   	push   ebp
c0021995:	57                   	push   edi
c0021996:	56                   	push   esi
c0021997:	53                   	push   ebx
c0021998:	83 ec 2c             	sub    esp,0x2c
c002199b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002199f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00219a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00219a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00219ab:	85 db                	test   ebx,ebx
c00219ad:	0f 88 85 00 00 00    	js     c0021a38 <__moddi3+0xa4>
c00219b3:	89 de                	mov    esi,ebx
c00219b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00219bd:	89 d7                	mov    edi,edx
c00219bf:	85 d2                	test   edx,edx
c00219c1:	79 09                	jns    c00219cc <__moddi3+0x38>
c00219c3:	f7 d8                	neg    eax
c00219c5:	83 d2 00             	adc    edx,0x0
c00219c8:	f7 da                	neg    edx
c00219ca:	89 d7                	mov    edi,edx
c00219cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00219d0:	89 cd                	mov    ebp,ecx
c00219d2:	85 ff                	test   edi,edi
c00219d4:	75 52                	jne    c0021a28 <__moddi3+0x94>
c00219d6:	89 c3                	mov    ebx,eax
c00219d8:	39 f0                	cmp    eax,esi
c00219da:	76 24                	jbe    c0021a00 <__moddi3+0x6c>
c00219dc:	89 c8                	mov    eax,ecx
c00219de:	89 f2                	mov    edx,esi
c00219e0:	f7 f3                	div    ebx
c00219e2:	89 d6                	mov    esi,edx
c00219e4:	89 f0                	mov    eax,esi
c00219e6:	31 d2                	xor    edx,edx
c00219e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219ec:	85 c9                	test   ecx,ecx
c00219ee:	74 07                	je     c00219f7 <__moddi3+0x63>
c00219f0:	f7 d8                	neg    eax
c00219f2:	83 d2 00             	adc    edx,0x0
c00219f5:	f7 da                	neg    edx
c00219f7:	83 c4 2c             	add    esp,0x2c
c00219fa:	5b                   	pop    ebx
c00219fb:	5e                   	pop    esi
c00219fc:	5f                   	pop    edi
c00219fd:	5d                   	pop    ebp
c00219fe:	c3                   	ret    
c00219ff:	90                   	nop
c0021a00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021a04:	85 db                	test   ebx,ebx
c0021a06:	75 0d                	jne    c0021a15 <__moddi3+0x81>
c0021a08:	b8 01 00 00 00       	mov    eax,0x1
c0021a0d:	31 d2                	xor    edx,edx
c0021a0f:	f7 f7                	div    edi
c0021a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a15:	89 f0                	mov    eax,esi
c0021a17:	31 d2                	xor    edx,edx
c0021a19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021a1d:	f7 f7                	div    edi
c0021a1f:	89 e8                	mov    eax,ebp
c0021a21:	f7 f7                	div    edi
c0021a23:	89 d6                	mov    esi,edx
c0021a25:	eb bd                	jmp    c00219e4 <__moddi3+0x50>
c0021a27:	90                   	nop
c0021a28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021a2c:	39 f7                	cmp    edi,esi
c0021a2e:	76 20                	jbe    c0021a50 <__moddi3+0xbc>
c0021a30:	89 c8                	mov    eax,ecx
c0021a32:	89 f2                	mov    edx,esi
c0021a34:	eb b2                	jmp    c00219e8 <__moddi3+0x54>
c0021a36:	66 90                	xchg   ax,ax
c0021a38:	f7 d9                	neg    ecx
c0021a3a:	83 d3 00             	adc    ebx,0x0
c0021a3d:	f7 db                	neg    ebx
c0021a3f:	89 de                	mov    esi,ebx
c0021a41:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021a49:	e9 6f ff ff ff       	jmp    c00219bd <__moddi3+0x29>
c0021a4e:	66 90                	xchg   ax,ax
c0021a50:	0f bd c7             	bsr    eax,edi
c0021a53:	83 f0 1f             	xor    eax,0x1f
c0021a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a5a:	75 24                	jne    c0021a80 <__moddi3+0xec>
c0021a5c:	39 f7                	cmp    edi,esi
c0021a5e:	72 06                	jb     c0021a66 <__moddi3+0xd2>
c0021a60:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021a64:	77 0c                	ja     c0021a72 <__moddi3+0xde>
c0021a66:	89 e9                	mov    ecx,ebp
c0021a68:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021a6c:	19 fe                	sbb    esi,edi
c0021a6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021a72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a76:	89 f2                	mov    edx,esi
c0021a78:	e9 6b ff ff ff       	jmp    c00219e8 <__moddi3+0x54>
c0021a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0021a80:	b8 20 00 00 00       	mov    eax,0x20
c0021a85:	89 c2                	mov    edx,eax
c0021a87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021a8b:	29 da                	sub    edx,ebx
c0021a8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021a91:	88 d9                	mov    cl,bl
c0021a93:	d3 e7                	shl    edi,cl
c0021a95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a99:	88 d1                	mov    cl,dl
c0021a9b:	d3 e8                	shr    eax,cl
c0021a9d:	09 c7                	or     edi,eax
c0021a9f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021aa3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aa7:	89 d8                	mov    eax,ebx
c0021aa9:	88 d9                	mov    cl,bl
c0021aab:	d3 e7                	shl    edi,cl
c0021aad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ab1:	89 f3                	mov    ebx,esi
c0021ab3:	88 d1                	mov    cl,dl
c0021ab5:	d3 eb                	shr    ebx,cl
c0021ab7:	89 c7                	mov    edi,eax
c0021ab9:	88 c1                	mov    cl,al
c0021abb:	d3 e6                	shl    esi,cl
c0021abd:	89 e8                	mov    eax,ebp
c0021abf:	88 d1                	mov    cl,dl
c0021ac1:	d3 e8                	shr    eax,cl
c0021ac3:	09 f0                	or     eax,esi
c0021ac5:	89 f9                	mov    ecx,edi
c0021ac7:	d3 e5                	shl    ebp,cl
c0021ac9:	89 da                	mov    edx,ebx
c0021acb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021acf:	89 d3                	mov    ebx,edx
c0021ad1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ad5:	89 c6                	mov    esi,eax
c0021ad7:	89 d1                	mov    ecx,edx
c0021ad9:	39 d3                	cmp    ebx,edx
c0021adb:	72 27                	jb     c0021b04 <__moddi3+0x170>
c0021add:	74 21                	je     c0021b00 <__moddi3+0x16c>
c0021adf:	29 f5                	sub    ebp,esi
c0021ae1:	19 cb                	sbb    ebx,ecx
c0021ae3:	89 de                	mov    esi,ebx
c0021ae5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021ae9:	d3 e6                	shl    esi,cl
c0021aeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021aef:	89 f9                	mov    ecx,edi
c0021af1:	d3 ed                	shr    ebp,cl
c0021af3:	09 ee                	or     esi,ebp
c0021af5:	89 f0                	mov    eax,esi
c0021af7:	d3 eb                	shr    ebx,cl
c0021af9:	89 da                	mov    edx,ebx
c0021afb:	e9 e8 fe ff ff       	jmp    c00219e8 <__moddi3+0x54>
c0021b00:	39 c5                	cmp    ebp,eax
c0021b02:	73 db                	jae    c0021adf <__moddi3+0x14b>
c0021b04:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021b08:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021b0c:	89 d1                	mov    ecx,edx
c0021b0e:	89 c6                	mov    esi,eax
c0021b10:	eb cd                	jmp    c0021adf <__moddi3+0x14b>
c0021b12:	66 90                	xchg   ax,ax

c0021b14 <__udivdi3>:
c0021b14:	55                   	push   ebp
c0021b15:	57                   	push   edi
c0021b16:	56                   	push   esi
c0021b17:	53                   	push   ebx
c0021b18:	83 ec 1c             	sub    esp,0x1c
c0021b1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021b1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021b23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021b27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b2b:	85 d2                	test   edx,edx
c0021b2d:	75 41                	jne    c0021b70 <__udivdi3+0x5c>
c0021b2f:	39 f7                	cmp    edi,esi
c0021b31:	76 15                	jbe    c0021b48 <__udivdi3+0x34>
c0021b33:	89 e8                	mov    eax,ebp
c0021b35:	89 f2                	mov    edx,esi
c0021b37:	f7 f7                	div    edi
c0021b39:	31 db                	xor    ebx,ebx
c0021b3b:	89 da                	mov    edx,ebx
c0021b3d:	83 c4 1c             	add    esp,0x1c
c0021b40:	5b                   	pop    ebx
c0021b41:	5e                   	pop    esi
c0021b42:	5f                   	pop    edi
c0021b43:	5d                   	pop    ebp
c0021b44:	c3                   	ret    
c0021b45:	8d 76 00             	lea    esi,[esi+0x0]
c0021b48:	89 f9                	mov    ecx,edi
c0021b4a:	85 ff                	test   edi,edi
c0021b4c:	75 0b                	jne    c0021b59 <__udivdi3+0x45>
c0021b4e:	b8 01 00 00 00       	mov    eax,0x1
c0021b53:	31 d2                	xor    edx,edx
c0021b55:	f7 f7                	div    edi
c0021b57:	89 c1                	mov    ecx,eax
c0021b59:	31 d2                	xor    edx,edx
c0021b5b:	89 f0                	mov    eax,esi
c0021b5d:	f7 f1                	div    ecx
c0021b5f:	89 c3                	mov    ebx,eax
c0021b61:	89 e8                	mov    eax,ebp
c0021b63:	f7 f1                	div    ecx
c0021b65:	89 da                	mov    edx,ebx
c0021b67:	83 c4 1c             	add    esp,0x1c
c0021b6a:	5b                   	pop    ebx
c0021b6b:	5e                   	pop    esi
c0021b6c:	5f                   	pop    edi
c0021b6d:	5d                   	pop    ebp
c0021b6e:	c3                   	ret    
c0021b6f:	90                   	nop
c0021b70:	39 f2                	cmp    edx,esi
c0021b72:	77 1c                	ja     c0021b90 <__udivdi3+0x7c>
c0021b74:	0f bd da             	bsr    ebx,edx
c0021b77:	83 f3 1f             	xor    ebx,0x1f
c0021b7a:	75 24                	jne    c0021ba0 <__udivdi3+0x8c>
c0021b7c:	39 f2                	cmp    edx,esi
c0021b7e:	72 08                	jb     c0021b88 <__udivdi3+0x74>
c0021b80:	39 ef                	cmp    edi,ebp
c0021b82:	0f 87 84 00 00 00    	ja     c0021c0c <__udivdi3+0xf8>
c0021b88:	b8 01 00 00 00       	mov    eax,0x1
c0021b8d:	eb ac                	jmp    c0021b3b <__udivdi3+0x27>
c0021b8f:	90                   	nop
c0021b90:	31 db                	xor    ebx,ebx
c0021b92:	31 c0                	xor    eax,eax
c0021b94:	89 da                	mov    edx,ebx
c0021b96:	83 c4 1c             	add    esp,0x1c
c0021b99:	5b                   	pop    ebx
c0021b9a:	5e                   	pop    esi
c0021b9b:	5f                   	pop    edi
c0021b9c:	5d                   	pop    ebp
c0021b9d:	c3                   	ret    
c0021b9e:	66 90                	xchg   ax,ax
c0021ba0:	b8 20 00 00 00       	mov    eax,0x20
c0021ba5:	29 d8                	sub    eax,ebx
c0021ba7:	88 d9                	mov    cl,bl
c0021ba9:	d3 e2                	shl    edx,cl
c0021bab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021baf:	89 fa                	mov    edx,edi
c0021bb1:	88 c1                	mov    cl,al
c0021bb3:	d3 ea                	shr    edx,cl
c0021bb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021bb9:	09 d1                	or     ecx,edx
c0021bbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021bbf:	88 d9                	mov    cl,bl
c0021bc1:	d3 e7                	shl    edi,cl
c0021bc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021bc7:	89 f7                	mov    edi,esi
c0021bc9:	88 c1                	mov    cl,al
c0021bcb:	d3 ef                	shr    edi,cl
c0021bcd:	88 d9                	mov    cl,bl
c0021bcf:	d3 e6                	shl    esi,cl
c0021bd1:	89 ea                	mov    edx,ebp
c0021bd3:	88 c1                	mov    cl,al
c0021bd5:	d3 ea                	shr    edx,cl
c0021bd7:	09 d6                	or     esi,edx
c0021bd9:	89 f0                	mov    eax,esi
c0021bdb:	89 fa                	mov    edx,edi
c0021bdd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021be1:	89 d7                	mov    edi,edx
c0021be3:	89 c6                	mov    esi,eax
c0021be5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021be9:	39 d7                	cmp    edi,edx
c0021beb:	72 13                	jb     c0021c00 <__udivdi3+0xec>
c0021bed:	74 09                	je     c0021bf8 <__udivdi3+0xe4>
c0021bef:	89 f0                	mov    eax,esi
c0021bf1:	31 db                	xor    ebx,ebx
c0021bf3:	e9 43 ff ff ff       	jmp    c0021b3b <__udivdi3+0x27>
c0021bf8:	88 d9                	mov    cl,bl
c0021bfa:	d3 e5                	shl    ebp,cl
c0021bfc:	39 c5                	cmp    ebp,eax
c0021bfe:	73 ef                	jae    c0021bef <__udivdi3+0xdb>
c0021c00:	8d 46 ff             	lea    eax,[esi-0x1]
c0021c03:	31 db                	xor    ebx,ebx
c0021c05:	e9 31 ff ff ff       	jmp    c0021b3b <__udivdi3+0x27>
c0021c0a:	66 90                	xchg   ax,ax
c0021c0c:	31 c0                	xor    eax,eax
c0021c0e:	e9 28 ff ff ff       	jmp    c0021b3b <__udivdi3+0x27>
c0021c13:	90                   	nop

c0021c14 <__umoddi3>:
c0021c14:	55                   	push   ebp
c0021c15:	57                   	push   edi
c0021c16:	56                   	push   esi
c0021c17:	53                   	push   ebx
c0021c18:	83 ec 1c             	sub    esp,0x1c
c0021c1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021c1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021c23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021c27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021c2b:	89 da                	mov    edx,ebx
c0021c2d:	85 c0                	test   eax,eax
c0021c2f:	75 37                	jne    c0021c68 <__umoddi3+0x54>
c0021c31:	39 df                	cmp    edi,ebx
c0021c33:	76 13                	jbe    c0021c48 <__umoddi3+0x34>
c0021c35:	89 f0                	mov    eax,esi
c0021c37:	f7 f7                	div    edi
c0021c39:	89 d0                	mov    eax,edx
c0021c3b:	31 d2                	xor    edx,edx
c0021c3d:	83 c4 1c             	add    esp,0x1c
c0021c40:	5b                   	pop    ebx
c0021c41:	5e                   	pop    esi
c0021c42:	5f                   	pop    edi
c0021c43:	5d                   	pop    ebp
c0021c44:	c3                   	ret    
c0021c45:	8d 76 00             	lea    esi,[esi+0x0]
c0021c48:	89 fd                	mov    ebp,edi
c0021c4a:	85 ff                	test   edi,edi
c0021c4c:	75 0b                	jne    c0021c59 <__umoddi3+0x45>
c0021c4e:	b8 01 00 00 00       	mov    eax,0x1
c0021c53:	31 d2                	xor    edx,edx
c0021c55:	f7 f7                	div    edi
c0021c57:	89 c5                	mov    ebp,eax
c0021c59:	89 d8                	mov    eax,ebx
c0021c5b:	31 d2                	xor    edx,edx
c0021c5d:	f7 f5                	div    ebp
c0021c5f:	89 f0                	mov    eax,esi
c0021c61:	f7 f5                	div    ebp
c0021c63:	89 d0                	mov    eax,edx
c0021c65:	eb d4                	jmp    c0021c3b <__umoddi3+0x27>
c0021c67:	90                   	nop
c0021c68:	89 f1                	mov    ecx,esi
c0021c6a:	39 d8                	cmp    eax,ebx
c0021c6c:	76 0a                	jbe    c0021c78 <__umoddi3+0x64>
c0021c6e:	89 f0                	mov    eax,esi
c0021c70:	83 c4 1c             	add    esp,0x1c
c0021c73:	5b                   	pop    ebx
c0021c74:	5e                   	pop    esi
c0021c75:	5f                   	pop    edi
c0021c76:	5d                   	pop    ebp
c0021c77:	c3                   	ret    
c0021c78:	0f bd e8             	bsr    ebp,eax
c0021c7b:	83 f5 1f             	xor    ebp,0x1f
c0021c7e:	75 1c                	jne    c0021c9c <__umoddi3+0x88>
c0021c80:	39 d8                	cmp    eax,ebx
c0021c82:	72 04                	jb     c0021c88 <__umoddi3+0x74>
c0021c84:	39 f7                	cmp    edi,esi
c0021c86:	77 08                	ja     c0021c90 <__umoddi3+0x7c>
c0021c88:	89 da                	mov    edx,ebx
c0021c8a:	29 fe                	sub    esi,edi
c0021c8c:	19 c2                	sbb    edx,eax
c0021c8e:	89 f1                	mov    ecx,esi
c0021c90:	89 c8                	mov    eax,ecx
c0021c92:	83 c4 1c             	add    esp,0x1c
c0021c95:	5b                   	pop    ebx
c0021c96:	5e                   	pop    esi
c0021c97:	5f                   	pop    edi
c0021c98:	5d                   	pop    ebp
c0021c99:	c3                   	ret    
c0021c9a:	66 90                	xchg   ax,ax
c0021c9c:	ba 20 00 00 00       	mov    edx,0x20
c0021ca1:	29 ea                	sub    edx,ebp
c0021ca3:	89 e9                	mov    ecx,ebp
c0021ca5:	d3 e0                	shl    eax,cl
c0021ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021cab:	89 f8                	mov    eax,edi
c0021cad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021cb1:	88 d1                	mov    cl,dl
c0021cb3:	d3 e8                	shr    eax,cl
c0021cb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021cb9:	09 c1                	or     ecx,eax
c0021cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021cbf:	89 e9                	mov    ecx,ebp
c0021cc1:	d3 e7                	shl    edi,cl
c0021cc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021cc7:	89 d8                	mov    eax,ebx
c0021cc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ccd:	88 d1                	mov    cl,dl
c0021ccf:	d3 e8                	shr    eax,cl
c0021cd1:	89 c7                	mov    edi,eax
c0021cd3:	89 e9                	mov    ecx,ebp
c0021cd5:	d3 e3                	shl    ebx,cl
c0021cd7:	89 f0                	mov    eax,esi
c0021cd9:	88 d1                	mov    cl,dl
c0021cdb:	d3 e8                	shr    eax,cl
c0021cdd:	09 d8                	or     eax,ebx
c0021cdf:	89 e9                	mov    ecx,ebp
c0021ce1:	d3 e6                	shl    esi,cl
c0021ce3:	89 f3                	mov    ebx,esi
c0021ce5:	89 fa                	mov    edx,edi
c0021ce7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021ceb:	89 d1                	mov    ecx,edx
c0021ced:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021cf1:	89 c6                	mov    esi,eax
c0021cf3:	89 d7                	mov    edi,edx
c0021cf5:	39 d1                	cmp    ecx,edx
c0021cf7:	72 27                	jb     c0021d20 <__umoddi3+0x10c>
c0021cf9:	74 21                	je     c0021d1c <__umoddi3+0x108>
c0021cfb:	89 ca                	mov    edx,ecx
c0021cfd:	29 f3                	sub    ebx,esi
c0021cff:	19 fa                	sbb    edx,edi
c0021d01:	89 d0                	mov    eax,edx
c0021d03:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021d07:	d3 e0                	shl    eax,cl
c0021d09:	89 e9                	mov    ecx,ebp
c0021d0b:	d3 eb                	shr    ebx,cl
c0021d0d:	09 d8                	or     eax,ebx
c0021d0f:	d3 ea                	shr    edx,cl
c0021d11:	83 c4 1c             	add    esp,0x1c
c0021d14:	5b                   	pop    ebx
c0021d15:	5e                   	pop    esi
c0021d16:	5f                   	pop    edi
c0021d17:	5d                   	pop    ebp
c0021d18:	c3                   	ret    
c0021d19:	8d 76 00             	lea    esi,[esi+0x0]
c0021d1c:	39 c3                	cmp    ebx,eax
c0021d1e:	73 db                	jae    c0021cfb <__umoddi3+0xe7>
c0021d20:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021d24:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021d28:	89 d7                	mov    edi,edx
c0021d2a:	89 c6                	mov    esi,eax
c0021d2c:	eb cd                	jmp    c0021cfb <__umoddi3+0xe7>

Disassembly of section .init:

c0021d2e <_init>:
c0021d2e:	55                   	push   ebp
c0021d2f:	89 e5                	mov    ebp,esp
c0021d31:	e8 be e3 fd ff       	call   c00000f4 <frame_dummy>
c0021d36:	e8 e5 fa ff ff       	call   c0021820 <__do_global_ctors_aux>
c0021d3b:	5d                   	pop    ebp
c0021d3c:	c3                   	ret    

Disassembly of section .fini:

c0021d3d <_fini>:
c0021d3d:	55                   	push   ebp
c0021d3e:	89 e5                	mov    ebp,esp
c0021d40:	e8 3f e3 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021d45:	5d                   	pop    ebp
c0021d46:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021d48 <DriverlessDevice::~DriverlessDevice()>:
c0021d48:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c0021d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d51:	89 10                	mov    DWORD PTR [eax],edx
c0021d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d57:	50                   	push   eax
c0021d58:	e8 77 7b fe ff       	call   c00098d4 <Device::~Device()>
c0021d5d:	83 c4 04             	add    esp,0x4
c0021d60:	90                   	nop
c0021d61:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021d62 <DriverlessDevice::~DriverlessDevice()>:
c0021d62:	83 ec 0c             	sub    esp,0xc
c0021d65:	83 ec 0c             	sub    esp,0xc
c0021d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d6c:	e8 d7 ff ff ff       	call   c0021d48 <DriverlessDevice::~DriverlessDevice()>
c0021d71:	83 c4 10             	add    esp,0x10
c0021d74:	83 ec 08             	sub    esp,0x8
c0021d77:	68 58 01 00 00       	push   0x158
c0021d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d80:	e8 e6 b4 fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0021d85:	83 c4 10             	add    esp,0x10
c0021d88:	83 c4 0c             	add    esp,0xc
c0021d8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021d8c <LinkedList<Device>::addElement(Device*)>:
c0021d8c:	83 ec 0c             	sub    esp,0xc
c0021d8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021d94:	75 10                	jne    c0021da6 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021d96:	83 ec 0c             	sub    esp,0xc
c0021d99:	68 30 37 02 c0       	push   0xc0023730
c0021d9e:	e8 ab e0 fe ff       	call   c000fe4e <KePanic(char const*)>
c0021da3:	83 c4 10             	add    esp,0x10
c0021da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dac:	85 c0                	test   eax,eax
c0021dae:	74 3a                	je     c0021dea <LinkedList<Device>::addElement(Device*)+0x5e>
c0021db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021db7:	85 c0                	test   eax,eax
c0021db9:	74 2f                	je     c0021dea <LinkedList<Device>::addElement(Device*)+0x5e>
c0021dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dc6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dd4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dde:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021de8:	eb 68                	jmp    c0021e52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0021df0:	85 c0                	test   eax,eax
c0021df2:	75 4e                	jne    c0021e42 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dfb:	85 c0                	test   eax,eax
c0021dfd:	75 43                	jne    c0021e42 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e07:	89 10                	mov    DWORD PTR [eax],edx
c0021e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e1b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e2c:	85 c0                	test   eax,eax
c0021e2e:	74 22                	je     c0021e52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021e30:	83 ec 0c             	sub    esp,0xc
c0021e33:	68 52 37 02 c0       	push   0xc0023752
c0021e38:	e8 11 e0 fe ff       	call   c000fe4e <KePanic(char const*)>
c0021e3d:	83 c4 10             	add    esp,0x10
c0021e40:	eb 10                	jmp    c0021e52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	68 5c 37 02 c0       	push   0xc002375c
c0021e4a:	e8 ff df fe ff       	call   c000fe4e <KePanic(char const*)>
c0021e4f:	83 c4 10             	add    esp,0x10
c0021e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e59:	8d 50 01             	lea    edx,[eax+0x1]
c0021e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e63:	90                   	nop
c0021e64:	83 c4 0c             	add    esp,0xc
c0021e67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021e68 <LinkedList<Device>::LinkedList()>:
c0021e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ea1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ea8:	90                   	nop
c0021ea9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021eac <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eb2:	85 c0                	test   eax,eax
c0021eb4:	75 0e                	jne    c0021ec4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ebd:	85 c0                	test   eax,eax
c0021ebf:	75 03                	jne    c0021ec4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021ec1:	b0 01                	mov    al,0x1
c0021ec3:	c3                   	ret    
c0021ec4:	b0 00                	mov    al,0x0
c0021ec6:	90                   	nop
c0021ec7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021ec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ece:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021ed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021ed0:	83 ec 0c             	sub    esp,0xc
c0021ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ed9:	85 c0                	test   eax,eax
c0021edb:	75 17                	jne    c0021ef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021edd:	83 ec 0c             	sub    esp,0xc
c0021ee0:	68 cc 39 02 c0       	push   0xc00239cc
c0021ee5:	e8 64 df fe ff       	call   c000fe4e <KePanic(char const*)>
c0021eea:	83 c4 10             	add    esp,0x10
c0021eed:	e9 96 00 00 00       	jmp    c0021f88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021ef2:	66 90                	xchg   ax,ax
c0021ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021efb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021efe:	85 c0                	test   eax,eax
c0021f00:	0f 95 c0             	setne  al
c0021f03:	0f b6 c0             	movzx  eax,al
c0021f06:	85 c0                	test   eax,eax
c0021f08:	74 12                	je     c0021f1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021f0a:	83 ec 0c             	sub    esp,0xc
c0021f0d:	68 17 3a 02 c0       	push   0xc0023a17
c0021f12:	e8 37 df fe ff       	call   c000fe4e <KePanic(char const*)>
c0021f17:	83 c4 10             	add    esp,0x10
c0021f1a:	66 90                	xchg   ax,ax
c0021f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021f25:	85 c0                	test   eax,eax
c0021f27:	0f 94 c0             	sete   al
c0021f2a:	0f b6 c0             	movzx  eax,al
c0021f2d:	85 c0                	test   eax,eax
c0021f2f:	74 33                	je     c0021f64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f4d:	83 f8 01             	cmp    eax,0x1
c0021f50:	74 22                	je     c0021f74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021f52:	83 ec 0c             	sub    esp,0xc
c0021f55:	68 f0 39 02 c0       	push   0xc00239f0
c0021f5a:	e8 ef de fe ff       	call   c000fe4e <KePanic(char const*)>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	eb 10                	jmp    c0021f74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f6a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f71:	89 10                	mov    DWORD PTR [eax],edx
c0021f73:	90                   	nop
c0021f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f7b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f85:	8d 76 00             	lea    esi,[esi+0x0]
c0021f88:	83 c4 0c             	add    esp,0xc
c0021f8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021f8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021f8c:	83 ec 0c             	sub    esp,0xc
c0021f8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021f94:	75 12                	jne    c0021fa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021f96:	83 ec 0c             	sub    esp,0xc
c0021f99:	68 30 37 02 c0       	push   0xc0023730
c0021f9e:	e8 ab de fe ff       	call   c000fe4e <KePanic(char const*)>
c0021fa3:	83 c4 10             	add    esp,0x10
c0021fa6:	66 90                	xchg   ax,ax
c0021fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fae:	85 c0                	test   eax,eax
c0021fb0:	74 36                	je     c0021fe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fb9:	85 c0                	test   eax,eax
c0021fbb:	74 2b                	je     c0021fe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fc8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fdd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021fe4:	eb 6a                	jmp    c0022050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021fe6:	66 90                	xchg   ax,ax
c0021fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fee:	85 c0                	test   eax,eax
c0021ff0:	75 4e                	jne    c0022040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ff9:	85 c0                	test   eax,eax
c0021ffb:	75 43                	jne    c0022040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022001:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022005:	89 10                	mov    DWORD PTR [eax],edx
c0022007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002200f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022019:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022024:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022027:	85 c0                	test   eax,eax
c0022029:	74 25                	je     c0022050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002202b:	83 ec 0c             	sub    esp,0xc
c002202e:	68 52 37 02 c0       	push   0xc0023752
c0022033:	e8 16 de fe ff       	call   c000fe4e <KePanic(char const*)>
c0022038:	83 c4 10             	add    esp,0x10
c002203b:	eb 13                	jmp    c0022050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002203d:	8d 76 00             	lea    esi,[esi+0x0]
c0022040:	83 ec 0c             	sub    esp,0xc
c0022043:	68 5c 37 02 c0       	push   0xc002375c
c0022048:	e8 01 de fe ff       	call   c000fe4e <KePanic(char const*)>
c002204d:	83 c4 10             	add    esp,0x10
c0022050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022054:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022057:	8d 50 01             	lea    edx,[eax+0x1]
c002205a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022061:	90                   	nop
c0022062:	83 c4 0c             	add    esp,0xc
c0022065:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022068 <ACPI::~ACPI()>:
c0022068:	83 ec 0c             	sub    esp,0xc
c002206b:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c0022070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022074:	89 10                	mov    DWORD PTR [eax],edx
c0022076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	50                   	push   eax
c002207e:	e8 51 78 fe ff       	call   c00098d4 <Device::~Device()>
c0022083:	83 c4 10             	add    esp,0x10
c0022086:	90                   	nop
c0022087:	83 c4 0c             	add    esp,0xc
c002208a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002208c <ACPI::~ACPI()>:
c002208c:	83 ec 0c             	sub    esp,0xc
c002208f:	83 ec 0c             	sub    esp,0xc
c0022092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022096:	e8 cd ff ff ff       	call   c0022068 <ACPI::~ACPI()>
c002209b:	83 c4 10             	add    esp,0x10
c002209e:	83 ec 08             	sub    esp,0x8
c00220a1:	68 64 12 00 00       	push   0x1264
c00220a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220aa:	e8 bc b1 fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00220af:	83 c4 10             	add    esp,0x10
c00220b2:	83 c4 0c             	add    esp,0xc
c00220b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00220b8 <LinkedList<Device>::~LinkedList()>:
c00220b8:	90                   	nop
c00220b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00220bc <LinkedList<Device>::isEmpty()>:
c00220bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00220c2:	85 c0                	test   eax,eax
c00220c4:	75 0e                	jne    c00220d4 <LinkedList<Device>::isEmpty()+0x18>
c00220c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220cd:	85 c0                	test   eax,eax
c00220cf:	75 03                	jne    c00220d4 <LinkedList<Device>::isEmpty()+0x18>
c00220d1:	b0 01                	mov    al,0x1
c00220d3:	c3                   	ret    
c00220d4:	b0 00                	mov    al,0x0
c00220d6:	90                   	nop
c00220d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00220d8 <LinkedList<Device>::getFirstElement()>:
c00220d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00220de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00220e0 <LinkedList<Device>::removeFirst()>:
c00220e0:	83 ec 0c             	sub    esp,0xc
c00220e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220e9:	85 c0                	test   eax,eax
c00220eb:	75 17                	jne    c0022104 <LinkedList<Device>::removeFirst()+0x24>
c00220ed:	83 ec 0c             	sub    esp,0xc
c00220f0:	68 cc 39 02 c0       	push   0xc00239cc
c00220f5:	e8 54 dd fe ff       	call   c000fe4e <KePanic(char const*)>
c00220fa:	83 c4 10             	add    esp,0x10
c00220fd:	e9 92 00 00 00       	jmp    c0022194 <LinkedList<Device>::removeFirst()+0xb4>
c0022102:	66 90                	xchg   ax,ax
c0022104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002210b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022111:	85 c0                	test   eax,eax
c0022113:	74 13                	je     c0022128 <LinkedList<Device>::removeFirst()+0x48>
c0022115:	83 ec 0c             	sub    esp,0xc
c0022118:	68 17 3a 02 c0       	push   0xc0023a17
c002211d:	e8 2c dd fe ff       	call   c000fe4e <KePanic(char const*)>
c0022122:	83 c4 10             	add    esp,0x10
c0022125:	8d 76 00             	lea    esi,[esi+0x0]
c0022128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212c:	8b 00                	mov    eax,DWORD PTR [eax]
c002212e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022134:	85 c0                	test   eax,eax
c0022136:	75 34                	jne    c002216c <LinkedList<Device>::removeFirst()+0x8c>
c0022138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002214d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022151:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022154:	83 f8 01             	cmp    eax,0x1
c0022157:	74 27                	je     c0022180 <LinkedList<Device>::removeFirst()+0xa0>
c0022159:	83 ec 0c             	sub    esp,0xc
c002215c:	68 f0 39 02 c0       	push   0xc00239f0
c0022161:	e8 e8 dc fe ff       	call   c000fe4e <KePanic(char const*)>
c0022166:	83 c4 10             	add    esp,0x10
c0022169:	eb 15                	jmp    c0022180 <LinkedList<Device>::removeFirst()+0xa0>
c002216b:	90                   	nop
c002216c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022170:	8b 00                	mov    eax,DWORD PTR [eax]
c0022172:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217c:	89 10                	mov    DWORD PTR [eax],edx
c002217e:	66 90                	xchg   ax,ax
c0022180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022187:	8d 50 ff             	lea    edx,[eax-0x1]
c002218a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022191:	8d 76 00             	lea    esi,[esi+0x0]
c0022194:	83 c4 0c             	add    esp,0xc
c0022197:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022198 <Computer::~Computer()>:
c0022198:	83 ec 0c             	sub    esp,0xc
c002219b:	ba dc 40 02 c0       	mov    edx,0xc00240dc
c00221a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a4:	89 10                	mov    DWORD PTR [eax],edx
c00221a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221aa:	83 ec 0c             	sub    esp,0xc
c00221ad:	50                   	push   eax
c00221ae:	e8 21 77 fe ff       	call   c00098d4 <Device::~Device()>
c00221b3:	83 c4 10             	add    esp,0x10
c00221b6:	90                   	nop
c00221b7:	83 c4 0c             	add    esp,0xc
c00221ba:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00221bc <Computer::~Computer()>:
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	83 ec 0c             	sub    esp,0xc
c00221c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221c6:	e8 cd ff ff ff       	call   c0022198 <Computer::~Computer()>
c00221cb:	83 c4 10             	add    esp,0x10
c00221ce:	83 ec 08             	sub    esp,0x8
c00221d1:	68 6c 01 00 00       	push   0x16c
c00221d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221da:	e8 8c b0 fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00221df:	83 c4 10             	add    esp,0x10
c00221e2:	83 c4 0c             	add    esp,0xc
c00221e5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00221e6 <idleCommon()>:
c00221e6:	83 ec 0c             	sub    esp,0xc
c00221e9:	fa                   	cli    
c00221ea:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00221f0:	e8 53 4e ff ff       	call   c0017048 <schedule()>
c00221f5:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00221fc:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0022203:	75 01                	jne    c0022206 <idleCommon()+0x20>
c0022205:	fb                   	sti    
c0022206:	83 c4 0c             	add    esp,0xc
c0022209:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002220a <LinkedList<UnixFile>::~LinkedList()>:
c002220a:	90                   	nop
c002220b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002220c <LinkedList<UnixFile>::LinkedList()>:
c002220c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022210:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022225:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002222c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022245:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002224c:	90                   	nop
c002224d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002224e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002224e:	83 ec 0c             	sub    esp,0xc
c0022251:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022256:	75 10                	jne    c0022268 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	68 30 37 02 c0       	push   0xc0023730
c0022260:	e8 e9 db fe ff       	call   c000fe4e <KePanic(char const*)>
c0022265:	83 c4 10             	add    esp,0x10
c0022268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226c:	8b 00                	mov    eax,DWORD PTR [eax]
c002226e:	85 c0                	test   eax,eax
c0022270:	74 34                	je     c00222a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022279:	85 c0                	test   eax,eax
c002227b:	74 29                	je     c00222a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002227d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022281:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022284:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022288:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002228b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022293:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002229d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00222a4:	eb 65                	jmp    c002230b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ac:	85 c0                	test   eax,eax
c00222ae:	75 4b                	jne    c00222fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00222b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b7:	85 c0                	test   eax,eax
c00222b9:	75 40                	jne    c00222fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00222bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222c3:	89 10                	mov    DWORD PTR [eax],edx
c00222c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00222de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222e5:	85 c0                	test   eax,eax
c00222e7:	74 22                	je     c002230b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00222e9:	83 ec 0c             	sub    esp,0xc
c00222ec:	68 52 37 02 c0       	push   0xc0023752
c00222f1:	e8 58 db fe ff       	call   c000fe4e <KePanic(char const*)>
c00222f6:	83 c4 10             	add    esp,0x10
c00222f9:	eb 10                	jmp    c002230b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00222fb:	83 ec 0c             	sub    esp,0xc
c00222fe:	68 5c 37 02 c0       	push   0xc002375c
c0022303:	e8 46 db fe ff       	call   c000fe4e <KePanic(char const*)>
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022312:	8d 50 01             	lea    edx,[eax+0x1]
c0022315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022319:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002231c:	90                   	nop
c002231d:	83 c4 0c             	add    esp,0xc
c0022320:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022322 <LinkedList<UnixFile>::getFirstElement()>:
c0022322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022326:	8b 00                	mov    eax,DWORD PTR [eax]
c0022328:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002232a <LinkedList<UnixFile>::removeFirst()>:
c002232a:	83 ec 0c             	sub    esp,0xc
c002232d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022331:	8b 00                	mov    eax,DWORD PTR [eax]
c0022333:	85 c0                	test   eax,eax
c0022335:	75 12                	jne    c0022349 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022337:	83 ec 0c             	sub    esp,0xc
c002233a:	68 cc 39 02 c0       	push   0xc00239cc
c002233f:	e8 0a db fe ff       	call   c000fe4e <KePanic(char const*)>
c0022344:	83 c4 10             	add    esp,0x10
c0022347:	eb 7e                	jmp    c00223c7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022350:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022353:	85 c0                	test   eax,eax
c0022355:	74 10                	je     c0022367 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022357:	83 ec 0c             	sub    esp,0xc
c002235a:	68 17 3a 02 c0       	push   0xc0023a17
c002235f:	e8 ea da fe ff       	call   c000fe4e <KePanic(char const*)>
c0022364:	83 c4 10             	add    esp,0x10
c0022367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236b:	8b 00                	mov    eax,DWORD PTR [eax]
c002236d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022370:	85 c0                	test   eax,eax
c0022372:	75 33                	jne    c00223a7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002237e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022382:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022390:	83 f8 01             	cmp    eax,0x1
c0022393:	74 21                	je     c00223b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022395:	83 ec 0c             	sub    esp,0xc
c0022398:	68 f0 39 02 c0       	push   0xc00239f0
c002239d:	e8 ac da fe ff       	call   c000fe4e <KePanic(char const*)>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	eb 0f                	jmp    c00223b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00223a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00223b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b4:	89 10                	mov    DWORD PTR [eax],edx
c00223b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223bd:	8d 50 ff             	lea    edx,[eax-0x1]
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223c7:	83 c4 0c             	add    esp,0xc
c00223ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00223cc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00223cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00223d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00223d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00223db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00223dc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00223dc:	90                   	nop
c00223dd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00223e0 <ThreadControlBlock::ThreadControlBlock()>:
c00223e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00223eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00223f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022405:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002240c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022410:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002241f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022423:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022427:	90                   	nop
c0022428:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002242c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002242c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022430:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022445:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002244c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022465:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002246c:	90                   	nop
c002246d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002246e <CPU::~CPU()>:
c002246e:	83 ec 0c             	sub    esp,0xc
c0022471:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c0022476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247a:	89 10                	mov    DWORD PTR [eax],edx
c002247c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022480:	83 ec 0c             	sub    esp,0xc
c0022483:	50                   	push   eax
c0022484:	e8 4b 74 fe ff       	call   c00098d4 <Device::~Device()>
c0022489:	83 c4 10             	add    esp,0x10
c002248c:	90                   	nop
c002248d:	83 c4 0c             	add    esp,0xc
c0022490:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022492 <CPU::~CPU()>:
c0022492:	83 ec 0c             	sub    esp,0xc
c0022495:	83 ec 0c             	sub    esp,0xc
c0022498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002249c:	e8 cd ff ff ff       	call   c002246e <CPU::~CPU()>
c00224a1:	83 c4 10             	add    esp,0x10
c00224a4:	83 ec 08             	sub    esp,0x8
c00224a7:	68 78 11 00 00       	push   0x1178
c00224ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224b0:	e8 b6 ad fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00224b5:	83 c4 10             	add    esp,0x10
c00224b8:	83 c4 0c             	add    esp,0xc
c00224bb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00224bc <PCI::~PCI()>:
c00224bc:	83 ec 0c             	sub    esp,0xc
c00224bf:	ba 2c 61 02 c0       	mov    edx,0xc002612c
c00224c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c8:	89 10                	mov    DWORD PTR [eax],edx
c00224ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ce:	83 ec 0c             	sub    esp,0xc
c00224d1:	50                   	push   eax
c00224d2:	e8 a1 64 fe ff       	call   c0008978 <Bus::~Bus()>
c00224d7:	83 c4 10             	add    esp,0x10
c00224da:	90                   	nop
c00224db:	83 c4 0c             	add    esp,0xc
c00224de:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00224e0 <PCI::~PCI()>:
c00224e0:	83 ec 0c             	sub    esp,0xc
c00224e3:	83 ec 0c             	sub    esp,0xc
c00224e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224ea:	e8 cd ff ff ff       	call   c00224bc <PCI::~PCI()>
c00224ef:	83 c4 10             	add    esp,0x10
c00224f2:	83 ec 08             	sub    esp,0x8
c00224f5:	68 5c 01 00 00       	push   0x15c
c00224fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224fe:	e8 68 ad fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0022503:	83 c4 10             	add    esp,0x10
c0022506:	83 c4 0c             	add    esp,0xc
c0022509:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002250a <IDE::~IDE()>:
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	ba 7c 62 02 c0       	mov    edx,0xc002627c
c0022512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022516:	89 10                	mov    DWORD PTR [eax],edx
c0022518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	50                   	push   eax
c0022520:	e8 3f 78 fe ff       	call   c0009d64 <HardDiskController::~HardDiskController()>
c0022525:	83 c4 10             	add    esp,0x10
c0022528:	90                   	nop
c0022529:	83 c4 0c             	add    esp,0xc
c002252c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002252e <IDE::~IDE()>:
c002252e:	83 ec 0c             	sub    esp,0xc
c0022531:	83 ec 0c             	sub    esp,0xc
c0022534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022538:	e8 cd ff ff ff       	call   c002250a <IDE::~IDE()>
c002253d:	83 c4 10             	add    esp,0x10
c0022540:	83 ec 08             	sub    esp,0x8
c0022543:	68 70 02 00 00       	push   0x270
c0022548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002254c:	e8 1a ad fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0022551:	83 c4 10             	add    esp,0x10
c0022554:	83 c4 0c             	add    esp,0xc
c0022557:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022558 <SATABus::~SATABus()>:
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	ba cc 62 02 c0       	mov    edx,0xc00262cc
c0022560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022564:	89 10                	mov    DWORD PTR [eax],edx
c0022566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002256a:	83 ec 0c             	sub    esp,0xc
c002256d:	50                   	push   eax
c002256e:	e8 f1 77 fe ff       	call   c0009d64 <HardDiskController::~HardDiskController()>
c0022573:	83 c4 10             	add    esp,0x10
c0022576:	90                   	nop
c0022577:	83 c4 0c             	add    esp,0xc
c002257a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002257c <SATABus::~SATABus()>:
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	83 ec 0c             	sub    esp,0xc
c0022582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022586:	e8 cd ff ff ff       	call   c0022558 <SATABus::~SATABus()>
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	83 ec 08             	sub    esp,0x8
c0022591:	68 64 01 00 00       	push   0x164
c0022596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002259a:	e8 cc ac fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c002259f:	83 c4 10             	add    esp,0x10
c00225a2:	83 c4 0c             	add    esp,0xc
c00225a5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00225a6 <ATA::~ATA()>:
c00225a6:	83 ec 0c             	sub    esp,0xc
c00225a9:	ba b4 63 02 c0       	mov    edx,0xc00263b4
c00225ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b2:	89 10                	mov    DWORD PTR [eax],edx
c00225b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b8:	83 ec 0c             	sub    esp,0xc
c00225bb:	50                   	push   eax
c00225bc:	e8 85 78 fe ff       	call   c0009e46 <PhysicalDisk::~PhysicalDisk()>
c00225c1:	83 c4 10             	add    esp,0x10
c00225c4:	90                   	nop
c00225c5:	83 c4 0c             	add    esp,0xc
c00225c8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00225ca <ATA::~ATA()>:
c00225ca:	83 ec 0c             	sub    esp,0xc
c00225cd:	83 ec 0c             	sub    esp,0xc
c00225d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225d4:	e8 cd ff ff ff       	call   c00225a6 <ATA::~ATA()>
c00225d9:	83 c4 10             	add    esp,0x10
c00225dc:	83 ec 08             	sub    esp,0x8
c00225df:	68 8c 01 00 00       	push   0x18c
c00225e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e8:	e8 7e ac fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00225ed:	83 c4 10             	add    esp,0x10
c00225f0:	83 c4 0c             	add    esp,0xc
c00225f3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00225f4 <ATAPI::~ATAPI()>:
c00225f4:	83 ec 0c             	sub    esp,0xc
c00225f7:	ba fc 63 02 c0       	mov    edx,0xc00263fc
c00225fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022600:	89 10                	mov    DWORD PTR [eax],edx
c0022602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022606:	83 ec 0c             	sub    esp,0xc
c0022609:	50                   	push   eax
c002260a:	e8 37 78 fe ff       	call   c0009e46 <PhysicalDisk::~PhysicalDisk()>
c002260f:	83 c4 10             	add    esp,0x10
c0022612:	90                   	nop
c0022613:	83 c4 0c             	add    esp,0xc
c0022616:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022618 <ATAPI::~ATAPI()>:
c0022618:	83 ec 0c             	sub    esp,0xc
c002261b:	83 ec 0c             	sub    esp,0xc
c002261e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022622:	e8 cd ff ff ff       	call   c00225f4 <ATAPI::~ATAPI()>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	83 ec 08             	sub    esp,0x8
c002262d:	68 84 01 00 00       	push   0x184
c0022632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022636:	e8 30 ac fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c002263b:	83 c4 10             	add    esp,0x10
c002263e:	83 c4 0c             	add    esp,0xc
c0022641:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022642 <SATA::~SATA()>:
c0022642:	83 ec 0c             	sub    esp,0xc
c0022645:	ba bc 64 02 c0       	mov    edx,0xc00264bc
c002264a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002264e:	89 10                	mov    DWORD PTR [eax],edx
c0022650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022654:	83 ec 0c             	sub    esp,0xc
c0022657:	50                   	push   eax
c0022658:	e8 e9 77 fe ff       	call   c0009e46 <PhysicalDisk::~PhysicalDisk()>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	90                   	nop
c0022661:	83 c4 0c             	add    esp,0xc
c0022664:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022666 <SATA::~SATA()>:
c0022666:	83 ec 0c             	sub    esp,0xc
c0022669:	83 ec 0c             	sub    esp,0xc
c002266c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022670:	e8 cd ff ff ff       	call   c0022642 <SATA::~SATA()>
c0022675:	83 c4 10             	add    esp,0x10
c0022678:	83 ec 08             	sub    esp,0x8
c002267b:	68 7c 01 00 00       	push   0x17c
c0022680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022684:	e8 e2 ab fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0022689:	83 c4 10             	add    esp,0x10
c002268c:	83 c4 0c             	add    esp,0xc
c002268f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022690 <SATAPI::~SATAPI()>:
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	ba e0 65 02 c0       	mov    edx,0xc00265e0
c0022698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002269c:	89 10                	mov    DWORD PTR [eax],edx
c002269e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a2:	83 ec 0c             	sub    esp,0xc
c00226a5:	50                   	push   eax
c00226a6:	e8 9b 77 fe ff       	call   c0009e46 <PhysicalDisk::~PhysicalDisk()>
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	90                   	nop
c00226af:	83 c4 0c             	add    esp,0xc
c00226b2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00226b4 <SATAPI::~SATAPI()>:
c00226b4:	83 ec 0c             	sub    esp,0xc
c00226b7:	83 ec 0c             	sub    esp,0xc
c00226ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226be:	e8 cd ff ff ff       	call   c0022690 <SATAPI::~SATAPI()>
c00226c3:	83 c4 10             	add    esp,0x10
c00226c6:	83 ec 08             	sub    esp,0x8
c00226c9:	68 84 01 00 00       	push   0x184
c00226ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d2:	e8 94 ab fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00226d7:	83 c4 10             	add    esp,0x10
c00226da:	83 c4 0c             	add    esp,0xc
c00226dd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00226de <IOAPIC::~IOAPIC()>:
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	ba 40 66 02 c0       	mov    edx,0xc0026640
c00226e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ea:	89 10                	mov    DWORD PTR [eax],edx
c00226ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f0:	83 ec 0c             	sub    esp,0xc
c00226f3:	50                   	push   eax
c00226f4:	e8 db 71 fe ff       	call   c00098d4 <Device::~Device()>
c00226f9:	83 c4 10             	add    esp,0x10
c00226fc:	90                   	nop
c00226fd:	83 c4 0c             	add    esp,0xc
c0022700:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022702 <IOAPIC::~IOAPIC()>:
c0022702:	83 ec 0c             	sub    esp,0xc
c0022705:	83 ec 0c             	sub    esp,0xc
c0022708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002270c:	e8 cd ff ff ff       	call   c00226de <IOAPIC::~IOAPIC()>
c0022711:	83 c4 10             	add    esp,0x10
c0022714:	83 ec 08             	sub    esp,0x8
c0022717:	68 68 01 00 00       	push   0x168
c002271c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022720:	e8 46 ab fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0022725:	83 c4 10             	add    esp,0x10
c0022728:	83 c4 0c             	add    esp,0xc
c002272b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002272c <APICTimer::~APICTimer()>:
c002272c:	83 ec 0c             	sub    esp,0xc
c002272f:	ba 88 66 02 c0       	mov    edx,0xc0026688
c0022734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022738:	89 10                	mov    DWORD PTR [eax],edx
c002273a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002273e:	83 ec 0c             	sub    esp,0xc
c0022741:	50                   	push   eax
c0022742:	e8 cd 88 fe ff       	call   c000b014 <Timer::~Timer()>
c0022747:	83 c4 10             	add    esp,0x10
c002274a:	90                   	nop
c002274b:	83 c4 0c             	add    esp,0xc
c002274e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022750 <APICTimer::~APICTimer()>:
c0022750:	83 ec 0c             	sub    esp,0xc
c0022753:	83 ec 0c             	sub    esp,0xc
c0022756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002275a:	e8 cd ff ff ff       	call   c002272c <APICTimer::~APICTimer()>
c002275f:	83 c4 10             	add    esp,0x10
c0022762:	83 ec 08             	sub    esp,0x8
c0022765:	68 60 01 00 00       	push   0x160
c002276a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002276e:	e8 f8 aa fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c0022773:	83 c4 10             	add    esp,0x10
c0022776:	83 c4 0c             	add    esp,0xc
c0022779:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002277c <PIT::~PIT()>:
c002277c:	83 ec 0c             	sub    esp,0xc
c002277f:	ba d8 66 02 c0       	mov    edx,0xc00266d8
c0022784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022788:	89 10                	mov    DWORD PTR [eax],edx
c002278a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278e:	83 ec 0c             	sub    esp,0xc
c0022791:	50                   	push   eax
c0022792:	e8 7d 88 fe ff       	call   c000b014 <Timer::~Timer()>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	90                   	nop
c002279b:	83 c4 0c             	add    esp,0xc
c002279e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00227a0 <PIT::~PIT()>:
c00227a0:	83 ec 0c             	sub    esp,0xc
c00227a3:	83 ec 0c             	sub    esp,0xc
c00227a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227aa:	e8 cd ff ff ff       	call   c002277c <PIT::~PIT()>
c00227af:	83 c4 10             	add    esp,0x10
c00227b2:	83 ec 08             	sub    esp,0x8
c00227b5:	68 5c 01 00 00       	push   0x15c
c00227ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227be:	e8 a8 aa fe ff       	call   c000d26b <operator delete(void*, unsigned long)>
c00227c3:	83 c4 10             	add    esp,0x10
c00227c6:	83 c4 0c             	add    esp,0xc
c00227c9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be c7 44 02 c0       	mov    esi,0xc00244c7
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be e3 44 02 c0       	mov    esi,0xc00244e3
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
