
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 57 07 01 00       	call   c0010777 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 10 03 c0       	mov    eax,0xc0031048
c0000025:	3d 48 10 03 c0       	cmp    eax,0xc0031048
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 10 03 c0       	push   0xc0031048
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 10 03 c0       	mov    eax,0xc0031048
c0000051:	2d 48 10 03 c0       	sub    eax,0xc0031048
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 10 03 c0       	push   0xc0031048
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 03 c0 00 	cmp    BYTE PTR ds:0xc00330c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c4 a5 02 c0       	mov    ebx,0xc002a5c4
c0000097:	81 eb c0 a5 02 c0    	sub    ebx,0xc002a5c0
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c0 a5 02 c0       	mov    esi,0xc002a5c0
c00000a6:	a1 c4 30 03 c0       	mov    eax,ds:0xc00330c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 03 c0       	mov    ds:0xc00330c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 03 c0       	mov    eax,ds:0xc00330c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 10 03 c0       	push   0xc0031048
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 03 c0 01 	mov    BYTE PTR ds:0xc00330c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 03 c0       	push   0xc00330c8
c0000108:	68 48 10 03 c0       	push   0xc0031048
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 eb 68 01 00       	call   c0016b98 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 29 4d 01 00       	call   c0014fee <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c9 68 01 00       	call   c0016b98 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 2a 6e 01 00       	call   c0017118 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 8d 73 01 00       	call   c0017684 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 71 03 c0 	lgdtd  ds:0xc0037118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 02 f9 00 00       	jmp    c000fc81 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 30 03 c0       	mov    ds:0xc00330e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 30 03 c0    	mov    DWORD PTR ds:0xc00330e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 30 03 c0    	mov    ebx,DWORD PTR ds:0xc00330e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 a5 02 c0 02 	test   BYTE PTR [edx-0x3ffd5a20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 a5 02 c0 01 	test   BYTE PTR [edx-0x3ffd5a20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 a5 02 c0 08 	test   BYTE PTR [edx-0x3ffd5a20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 a5 02 c0 08 	test   BYTE PTR [edx-0x3ffd5a20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 a5 02 c0 04 	test   BYTE PTR [ecx-0x3ffd5a20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 a5 02 c0 01 	test   BYTE PTR [edx-0x3ffd5a20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 31 03 c0    	mov    DWORD PTR ds:0xc0033100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccefc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffccefc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 31 03 c0    	mov    DWORD PTR ds:0xc0033100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 31 03 c0    	cmp    DWORD PTR ds:0xc003312c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 31 03 c0    	mov    ecx,DWORD PTR ds:0xc003313c
c0000e2a:	c7 42 0c 34 31 03 c0 	mov    DWORD PTR [edx+0xc],0xc0033134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 31 03 c0 02 	test   BYTE PTR ds:0xc0033100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 34 03 c0    	dec    DWORD PTR ds:0xc0033450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 34 03 c0    	sub    DWORD PTR ds:0xc0033464,eax
c0000e8e:	e8 2f f5 00 00       	call   c00103c2 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 3c f4 00 00       	call   c0010364 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 17 f3 00 00       	call   c001032e <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 12 f3 00 00       	call   c0010364 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 08 f2 00 00       	call   c001032e <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 23 f1 00 00       	call   c001032e <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 0d f1 00 00       	call   c001032e <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 31 03 c0    	mov    edi,DWORD PTR ds:0xc0033100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 31 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffccefc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 31 03 c0 	mov    DWORD PTR [edx*4-0x3ffccefc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 31 03 c0 	lea    edx,[eax*8-0x3ffccecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033140
c0001313:	81 fb 34 31 03 c0    	cmp    ebx,0xc0033134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 31 03 c0       	cmp    eax,0xc0033134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 31 03 c0    	cmp    DWORD PTR ds:0xc0033130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 31 03 c0       	mov    ds:0xc003313c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 31 03 c0       	mov    ds:0xc0033140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 31 03 c0       	mov    ds:0xc0033130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 31 03 c0 	mov    DWORD PTR [eax+0x8],0xc0033134
c000136a:	c7 40 0c 34 31 03 c0 	mov    DWORD PTR [eax+0xc],0xc0033134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 31 03 c0       	mov    ds:0xc0033140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 31 03 c0 	mov    DWORD PTR [eax+0x8],0xc0033134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 30 03 c0 	lea    ebp,[edx*4-0x3ffccf08]
c00013b3:	8b 14 95 00 31 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffccf00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 31 03 c0 	lea    ecx,[edx*4-0x3ffccf00]
c00013ce:	8b 14 95 00 31 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffccf00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 34 03 c0 	or     DWORD PTR [edi*4-0x3ffccbcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 31 03 c0 	lea    eax,[eax*8-0x3ffccecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,ecx
c0001488:	89 0d 40 31 03 c0    	mov    DWORD PTR ds:0xc0033140,ecx
c000148e:	c7 41 08 34 31 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0033134
c0001495:	c7 41 0c 34 31 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0033134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 31 03 c0 	lea    edx,[ecx*8-0x3ffcced4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 34 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffccbcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 34 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffccbcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 31 03 c0 	lea    edx,[eax*4-0x3ffcced4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 34 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccbcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,edi
c000155b:	89 3d 40 31 03 c0    	mov    DWORD PTR ds:0xc0033140,edi
c0001561:	c7 47 08 34 31 03 c0 	mov    DWORD PTR [edi+0x8],0xc0033134
c0001568:	c7 47 0c 34 31 03 c0 	mov    DWORD PTR [edi+0xc],0xc0033134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 31 03 c0    	mov    DWORD PTR ds:0xc0033130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 31 03 c0       	mov    eax,ds:0xc003312c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 31 03 c0       	mov    edx,0xc0033100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 31 03 c0       	mov    eax,0xc0033100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 34 03 c0    	mov    ebx,DWORD PTR ds:0xc0033454
c00016b6:	c7 05 54 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 34 03 c0    	mov    DWORD PTR ds:0xc0033454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 31 03 c0    	cmp    DWORD PTR ds:0xc003312c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 34 03 c0    	push   DWORD PTR ds:0xc003345c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 34 03 c0       	mov    eax,ds:0xc003345c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 31 03 c0 00 	cmp    DWORD PTR ds:0xc003312c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 31 03 c0       	mov    eax,ds:0xc003312c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 31 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccefc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 31 03 c0       	mov    eax,0xc0033134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 34 03 c0       	cmp    eax,0xc003342c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 34 03 c0       	mov    eax,ds:0xc0033468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 e4 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd591c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 31 03 c0       	mov    eax,ds:0xc0033100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 31 03 c0       	mov    ds:0xc0033100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 34 03 c0    	mov    DWORD PTR ds:0xc0033444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 34 03 c0    	mov    DWORD PTR ds:0xc0033448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 34 03 c0    	mov    DWORD PTR ds:0xc003344c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 34 03 c0    	mov    DWORD PTR ds:0xc0033454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 a9 d5 01 00       	jmp    c001f564 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 d3 d5 01 00       	jmp    c001f5a4 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 f4 d5 01 00       	jmp    c001f5e4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 40 a8 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd57c0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 40 a8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd57c0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba a4 ec 02 c0       	mov    edx,0xc002eca4
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba fc a6 02 c0       	mov    edx,0xc002a6fc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 34 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccb60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 34 03 c0    	mov    ax,ds:0xc0033480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 34 03 c0    	mov    ds:0xc0033480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 02 a7 02 c0       	mov    eax,0xc002a702
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf c0 a7 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd5840]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 0b a7 02 c0       	mov    eax,0xc002a70b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 40 a8 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd57c0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 34 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffccb60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 34 03 c0 	mov    DWORD PTR [edx*4-0x3ffccb60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 90 a7 02 c0       	mov    eax,0xc002a790
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 34 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccb60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 80 a7 02 c0       	mov    ebx,0xc002a780
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 60 a7 02 c0       	mov    eax,0xc002a760
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 70 a7 02 c0       	mov    eax,0xc002a770
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 12 a7 02 c0       	mov    edx,0xc002a712
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 1e a7 02 c0       	mov    edx,0xc002a71e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 32 a7 02 c0       	mov    edx,0xc002a732
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 01 a6 00 00       	call   c0010444 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 f9 a5 00 00       	call   c0010454 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 60 ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ab60
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 60 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab60
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 60 a9 02 c0       	mov    eax,0xc002a960
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 a0 a8 02 c0       	mov    eax,0xc002a8a0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 60 a8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd57a0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 60 ac 02 c0       	push   0xc002ac60
c0006327:	e8 dc 9b 01 00       	call   c001ff08 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 30 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccfe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 30 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccf80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 6e ac 02 c0       	push   0xc002ac6e
c000635f:	e8 a4 9b 01 00       	call   c001ff08 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 35 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffcca30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 30 03 c0 	movsx  eax,BYTE PTR ds:0xc0033060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 0d 9b 01 00       	call   c001feac <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 30 03 c0       	mov    eax,0xc0033080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 30 03 c0       	mov    eax,0xc0033020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 30 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccf80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 7d ac 02 c0       	push   0xc002ac7d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 3e 03 c0       	mov    ecx,0xc0033e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 35 03 c0 00 	cmp    DWORD PTR [edi-0x3ffccac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 35 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffccac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 35 03 c0    	mov    DWORD PTR [edi-0x3ffccabc],esi
c000675b:	c7 87 48 35 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffccab8],0x0
c0006765:	89 87 40 35 03 c0    	mov    DWORD PTR [edi-0x3ffccac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 35 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcca30],0x0
c000677d:	89 87 4c 35 03 c0    	mov    DWORD PTR [edi-0x3ffccab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 35 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 35 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffccac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 35 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffcca30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 35 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffccab8]
c00067f6:	8b 9d 4c 35 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffccab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 35 03 c0    	add    eax,DWORD PTR [ebp-0x3ffccac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 30 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffccfe0]
c000688d:	8b 85 48 35 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffccab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 35 03 c0    	add    DWORD PTR [ebp-0x3ffccab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 35 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffccac0],0x0
c00068ef:	8d 8d 40 35 03 c0    	lea    ecx,[ebp-0x3ffccac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 35 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffccab4]
c000692c:	05 40 35 03 c0       	add    eax,0xc0033540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 35 03 c0    	mov    eax,DWORD PTR [edx-0x3ffccab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 35 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffccac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 35 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcca30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 35 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffccab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 35 03 c0 00 	cmp    DWORD PTR [edx-0x3ffccac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 35 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcca30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 35 03 c0    	mov    eax,DWORD PTR [edx-0x3ffccab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 35 03 c0 00 	cmp    DWORD PTR [eax-0x3ffccac0],0x0
c00069ec:	8d b8 40 35 03 c0    	lea    edi,[eax-0x3ffccac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 80 ac 02 c0       	push   0xc002ac80
c0006a0f:	e8 f4 94 01 00       	call   c001ff08 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 02 95 01 00       	call   c001ff24 <iso_kprintfd>
c0006a22:	c7 04 24 85 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac85
c0006a29:	e8 da 94 01 00       	call   c001ff08 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 35 03 c0    	push   DWORD PTR [ebx-0x3ffccac0]
c0006a35:	e8 ea 94 01 00       	call   c001ff24 <iso_kprintfd>
c0006a3a:	c7 04 24 8b ac 02 c0 	mov    DWORD PTR [esp],0xc002ac8b
c0006a41:	e8 c2 94 01 00       	call   c001ff08 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 35 03 c0    	push   DWORD PTR [ebx-0x3ffccabc]
c0006a4d:	e8 d2 94 01 00       	call   c001ff24 <iso_kprintfd>
c0006a52:	c7 04 24 91 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac91
c0006a59:	e8 aa 94 01 00       	call   c001ff08 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 35 03 c0    	push   DWORD PTR [ebx-0x3ffcca30]
c0006a65:	e8 ba 94 01 00       	call   c001ff24 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 30 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccf80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 35 03 c0    	mov    edi,DWORD PTR [edx-0x3ffccab8]
c0006acb:	81 c2 40 35 03 c0    	add    edx,0xc0033540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 30 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccf80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 35 03 c0    	lea    ebp,[edi-0x3ffccaa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 35 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffccaa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 7d ac 02 c0       	push   0xc002ac7d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 35 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffccaad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 35 03 c0    	mov    DWORD PTR [ebx-0x3ffccab0],eax
c0006c0a:	89 93 54 35 03 c0    	mov    DWORD PTR [ebx-0x3ffccaac],edx
c0006c10:	81 c3 40 35 03 c0    	add    ebx,0xc0033540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 35 03 c0    	lea    eax,[edi-0x3ffccab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 9a ac 02 c0       	push   0xc002ac9a
c0006c32:	e8 d1 92 01 00       	call   c001ff08 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 30 03 c0       	mov    ds:0xc0033060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033eb4,0x0
c0006c67:	a1 ac 3e 03 c0       	mov    eax,ds:0xc0033eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 30 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccf80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 a5 ac 02 c0       	push   0xc002aca5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 30 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffccf80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 3e 03 c0       	mov    ds:0xc0033eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 3e 03 c0       	mov    eax,ds:0xc0033eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 30 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffccf80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ac ac 02 c0       	push   0xc002acac
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 30 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffccf80]
c0006d05:	bf 80 3e 03 c0       	mov    edi,0xc0033e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 3e 03 c0       	mov    eax,0xc0033e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 3e 03 c0       	mov    ds:0xc0033ea8,eax
c0006d28:	b8 8a 3e 03 c0       	mov    eax,0xc0033e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 3e 03 c0       	mov    ds:0xc0033ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 b3 ac 02 c0       	push   0xc002acb3
c0006d49:	e8 ba 91 01 00       	call   c001ff08 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 be ac 02 c0       	push   0xc002acbe
c0006d64:	e8 9f 91 01 00       	call   c001ff08 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 35 03 c0       	push   0xc0033540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 35 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0033540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 b1 96 00 00       	call   c0010444 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 3e 03 c0       	mov    ds:0xc0033eb0,eax
c0006d9f:	e8 a0 96 00 00       	call   c0010444 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 35 03 c0       	mov    ds:0xc0033520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 8b 96 00 00       	call   c0010444 <malloc>
c0006db9:	89 04 9d 80 30 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccf80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 72 96 00 00       	call   c0010444 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 30 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccfe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffccf80]
c0006dff:	e8 50 96 00 00       	call   c0010454 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffccfe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 42 96 00 00       	call   c0010454 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 3e 03 c0       	mov    eax,ds:0xc0033eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 28 96 00 00       	call   c0010454 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 35 03 c0       	mov    eax,ds:0xc0033520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 13 96 00 00       	call   c0010454 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 35 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 65 70 00 00       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 c1 6f 00 00       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 08 ad 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd52f8]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 d0 ac 02 c0       	push   0xc002acd0
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 58 ae 02 c0       	push   0xc002ae58
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 6c ae 02 c0       	push   0xc002ae6c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 76 ae 02 c0       	push   0xc002ae76
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 80 ae 02 c0       	push   0xc002ae80
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 c4 af 02 c0       	push   0xc002afc4
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 8a ae 02 c0       	push   0xc002ae8a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 e4 af 02 c0       	push   0xc002afe4
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 9f ae 02 c0       	push   0xc002ae9f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 b9 ae 02 c0       	push   0xc002aeb9
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 60 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfaa0]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 0c b0 02 c0       	push   0xc002b00c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 c4 af 02 c0       	push   0xc002afc4
c0007218:	e8 7b 96 00 00       	call   c0010898 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 54 b0 02 c0       	push   0xc002b054
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 54 b0 02 c0       	push   0xc002b054
c0007247:	e8 4c 96 00 00       	call   c0010898 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 c4 ae 02 c0       	push   0xc002aec4
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 c4 ae 02 c0       	push   0xc002aec4
c0007273:	e8 20 96 00 00       	call   c0010898 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 e1 ae 02 c0       	push   0xc002aee1
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 e1 ae 02 c0       	push   0xc002aee1
c000729f:	e8 f4 95 00 00       	call   c0010898 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 74 b0 02 c0       	push   0xc002b074
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 74 b0 02 c0       	push   0xc002b074
c00072cb:	e8 c8 95 00 00       	call   c0010898 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 98 b0 02 c0       	push   0xc002b098
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 98 b0 02 c0       	push   0xc002b098
c00072f7:	e8 9c 95 00 00       	call   c0010898 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 fd ae 02 c0       	push   0xc002aefd
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 fd ae 02 c0       	push   0xc002aefd
c0007323:	e8 70 95 00 00       	call   c0010898 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 19 af 02 c0       	push   0xc002af19
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 19 af 02 c0       	push   0xc002af19
c000734f:	e8 44 95 00 00       	call   c0010898 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 b8 b0 02 c0       	push   0xc002b0b8
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 b8 b0 02 c0       	push   0xc002b0b8
c000737b:	e8 18 95 00 00       	call   c0010898 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 dc b0 02 c0       	push   0xc002b0dc
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 dc b0 02 c0       	push   0xc002b0dc
c00073a7:	e8 ec 94 00 00       	call   c0010898 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <Hardware::getHumanReadableName()>:
c00073b4:	83 ec 18             	sub    esp,0x18
c00073b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00073bd:	50                   	push   eax
c00073be:	ff 12                	call   DWORD PTR [edx]
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	85 c0                	test   eax,eax
c00073c5:	74 0d                	je     c00073d4 <Hardware::getHumanReadableName()+0x20>
c00073c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00073cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00073cf:	83 c4 0c             	add    esp,0xc
c00073d2:	ff e0                	jmp    eax
c00073d4:	b8 fb b0 02 c0       	mov    eax,0xc002b0fb
c00073d9:	83 c4 0c             	add    esp,0xc
c00073dc:	c3                   	ret    
c00073dd:	8d 76 00             	lea    esi,[esi+0x0]

c00073e0 <KeGetRootDevice()>:
c00073e0:	a1 b8 3e 03 c0       	mov    eax,ds:0xc0033eb8
c00073e5:	c3                   	ret    
c00073e6:	66 90                	xchg   ax,ax

c00073e8 <Hardware::registerIRQ(int)>:
c00073e8:	56                   	push   esi
c00073e9:	31 c9                	xor    ecx,ecx
c00073eb:	53                   	push   ebx
c00073ec:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00073f0:	0f b6 56 3c          	movzx  edx,BYTE PTR [esi+0x3c]
c00073f4:	89 d3                	mov    ebx,edx
c00073f6:	66 90                	xchg   ax,ax
c00073f8:	89 d0                	mov    eax,edx
c00073fa:	d3 f8                	sar    eax,cl
c00073fc:	a8 01                	test   al,0x1
c00073fe:	74 0c                	je     c000740c <Hardware::registerIRQ(int)+0x24>
c0007400:	83 c1 01             	add    ecx,0x1
c0007403:	83 f9 04             	cmp    ecx,0x4
c0007406:	75 f0                	jne    c00073f8 <Hardware::registerIRQ(int)+0x10>
c0007408:	5b                   	pop    ebx
c0007409:	5e                   	pop    esi
c000740a:	c3                   	ret    
c000740b:	90                   	nop
c000740c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007410:	89 44 8e 2c          	mov    DWORD PTR [esi+ecx*4+0x2c],eax
c0007414:	b8 01 00 00 00       	mov    eax,0x1
c0007419:	d3 e0                	shl    eax,cl
c000741b:	09 d8                	or     eax,ebx
c000741d:	88 46 3c             	mov    BYTE PTR [esi+0x3c],al
c0007420:	5b                   	pop    ebx
c0007421:	5e                   	pop    esi
c0007422:	c3                   	ret    
c0007423:	90                   	nop

c0007424 <Hardware::deregisterIRQ(int)>:
c0007424:	57                   	push   edi
c0007425:	31 c9                	xor    ecx,ecx
c0007427:	56                   	push   esi
c0007428:	be 01 00 00 00       	mov    esi,0x1
c000742d:	53                   	push   ebx
c000742e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007432:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007436:	66 90                	xchg   ax,ax
c0007438:	39 5c 8a 2c          	cmp    DWORD PTR [edx+ecx*4+0x2c],ebx
c000743c:	75 12                	jne    c0007450 <Hardware::deregisterIRQ(int)+0x2c>
c000743e:	0f b6 7a 3c          	movzx  edi,BYTE PTR [edx+0x3c]
c0007442:	89 f0                	mov    eax,esi
c0007444:	d3 e0                	shl    eax,cl
c0007446:	f7 d0                	not    eax
c0007448:	21 f8                	and    eax,edi
c000744a:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c000744d:	8d 76 00             	lea    esi,[esi+0x0]
c0007450:	83 c1 01             	add    ecx,0x1
c0007453:	83 f9 04             	cmp    ecx,0x4
c0007456:	75 e0                	jne    c0007438 <Hardware::deregisterIRQ(int)+0x14>
c0007458:	5b                   	pop    ebx
c0007459:	5e                   	pop    esi
c000745a:	5f                   	pop    edi
c000745b:	c3                   	ret    

c000745c <Hardware::~Hardware()>:
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	ba 2c b3 02 c0       	mov    edx,0xc002b32c
c0007464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007468:	89 10                	mov    DWORD PTR [eax],edx
c000746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746e:	83 c0 74             	add    eax,0x74
c0007471:	83 ec 0c             	sub    esp,0xc
c0007474:	50                   	push   eax
c0007475:	e8 aa 13 02 00       	call   c0028824 <std::vector<Hardware*>::~vector()>
c000747a:	83 c4 10             	add    esp,0x10
c000747d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007481:	83 c0 18             	add    eax,0x18
c0007484:	83 ec 0c             	sub    esp,0xc
c0007487:	50                   	push   eax
c0007488:	e8 63 13 02 00       	call   c00287f0 <std::vector<DevicePortRange>::~vector()>
c000748d:	83 c4 10             	add    esp,0x10
c0007490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007494:	83 c0 04             	add    eax,0x4
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	50                   	push   eax
c000749b:	e8 1c 13 02 00       	call   c00287bc <std::vector<DeviceMemoryRange>::~vector()>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	90                   	nop
c00074a4:	83 c4 0c             	add    esp,0xc
c00074a7:	c3                   	ret    

c00074a8 <Hardware::~Hardware()>:
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074b2:	e8 a5 ff ff ff       	call   c000745c <Hardware::~Hardware()>
c00074b7:	83 c4 10             	add    esp,0x10
c00074ba:	83 ec 08             	sub    esp,0x8
c00074bd:	68 88 00 00 00       	push   0x88
c00074c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074c6:	e8 71 6b 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c00074cb:	83 c4 10             	add    esp,0x10
c00074ce:	83 c4 0c             	add    esp,0xc
c00074d1:	c3                   	ret    
c00074d2:	66 90                	xchg   ax,ax

c00074d4 <Hardware::Hardware()>:
c00074d4:	83 ec 0c             	sub    esp,0xc
c00074d7:	ba 2c b3 02 c0       	mov    edx,0xc002b32c
c00074dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e0:	89 10                	mov    DWORD PTR [eax],edx
c00074e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e6:	83 c0 04             	add    eax,0x4
c00074e9:	83 ec 0c             	sub    esp,0xc
c00074ec:	50                   	push   eax
c00074ed:	e8 b6 13 02 00       	call   c00288a8 <std::vector<DeviceMemoryRange>::vector()>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f9:	83 c0 18             	add    eax,0x18
c00074fc:	83 ec 0c             	sub    esp,0xc
c00074ff:	50                   	push   eax
c0007500:	e8 1f 14 02 00       	call   c0028924 <std::vector<DevicePortRange>::vector()>
c0007505:	83 c4 10             	add    esp,0x10
c0007508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750c:	83 c0 74             	add    eax,0x74
c000750f:	83 ec 0c             	sub    esp,0xc
c0007512:	50                   	push   eax
c0007513:	e8 88 14 02 00       	call   c00289a0 <std::vector<Hardware*>::vector()>
c0007518:	83 c4 10             	add    esp,0x10
c000751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751f:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0007523:	90                   	nop
c0007524:	83 c4 0c             	add    esp,0xc
c0007527:	c3                   	ret    

c0007528 <KeGetChildOfRootWithName(char const*)>:
c0007528:	55                   	push   ebp
c0007529:	57                   	push   edi
c000752a:	56                   	push   esi
c000752b:	53                   	push   ebx
c000752c:	83 ec 2c             	sub    esp,0x2c
c000752f:	e8 ac fe ff ff       	call   c00073e0 <KeGetRootDevice()>
c0007534:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007538:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c000753c:	83 ec 08             	sub    esp,0x8
c000753f:	8d 68 74             	lea    ebp,[eax+0x74]
c0007542:	55                   	push   ebp
c0007543:	53                   	push   ebx
c0007544:	e8 43 15 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c0007549:	8d 74 24 24          	lea    esi,[esp+0x24]
c000754d:	83 ec 0c             	sub    esp,0xc
c0007550:	55                   	push   ebp
c0007551:	56                   	push   esi
c0007552:	e8 59 15 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c0007557:	83 c4 1c             	add    esp,0x1c
c000755a:	eb 3c                	jmp    c0007598 <KeGetChildOfRootWithName(char const*)+0x70>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	53                   	push   ebx
c0007560:	e8 2f 12 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0007565:	89 c5                	mov    ebp,eax
c0007567:	8b 00                	mov    eax,DWORD PTR [eax]
c0007569:	8b 10                	mov    edx,DWORD PTR [eax]
c000756b:	89 04 24             	mov    DWORD PTR [esp],eax
c000756e:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007571:	5a                   	pop    edx
c0007572:	59                   	pop    ecx
c0007573:	57                   	push   edi
c0007574:	50                   	push   eax
c0007575:	e8 06 92 ff ff       	call   c0000780 <strcmp>
c000757a:	83 c4 10             	add    esp,0x10
c000757d:	85 c0                	test   eax,eax
c000757f:	74 47                	je     c00075c8 <KeGetChildOfRootWithName(char const*)+0xa0>
c0007581:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007585:	83 ec 08             	sub    esp,0x8
c0007588:	53                   	push   ebx
c0007589:	55                   	push   ebp
c000758a:	e8 45 15 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c000758f:	55                   	push   ebp
c0007590:	e8 d7 11 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007595:	83 c4 10             	add    esp,0x10
c0007598:	83 ec 08             	sub    esp,0x8
c000759b:	56                   	push   esi
c000759c:	53                   	push   ebx
c000759d:	e8 de 11 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075a2:	83 c4 10             	add    esp,0x10
c00075a5:	84 c0                	test   al,al
c00075a7:	75 b3                	jne    c000755c <KeGetChildOfRootWithName(char const*)+0x34>
c00075a9:	83 ec 0c             	sub    esp,0xc
c00075ac:	56                   	push   esi
c00075ad:	e8 ba 11 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00075b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075b5:	e8 b2 11 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00075ba:	83 c4 10             	add    esp,0x10
c00075bd:	31 c0                	xor    eax,eax
c00075bf:	83 c4 2c             	add    esp,0x2c
c00075c2:	5b                   	pop    ebx
c00075c3:	5e                   	pop    esi
c00075c4:	5f                   	pop    edi
c00075c5:	5d                   	pop    ebp
c00075c6:	c3                   	ret    
c00075c7:	90                   	nop
c00075c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00075cb:	83 ec 0c             	sub    esp,0xc
c00075ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075d2:	56                   	push   esi
c00075d3:	e8 94 11 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00075d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075db:	e8 8c 11 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075e7:	83 c4 2c             	add    esp,0x2c
c00075ea:	5b                   	pop    ebx
c00075eb:	5e                   	pop    esi
c00075ec:	5f                   	pop    edi
c00075ed:	5d                   	pop    ebp
c00075ee:	c3                   	ret    
c00075ef:	90                   	nop

c00075f0 <KeGetPCIDevice()>:
c00075f0:	83 ec 18             	sub    esp,0x18
c00075f3:	68 0a b1 02 c0       	push   0xc002b10a
c00075f8:	e8 2b ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c00075fd:	83 c4 1c             	add    esp,0x1c
c0007600:	c3                   	ret    
c0007601:	8d 76 00             	lea    esi,[esi+0x0]

c0007604 <KeGetACPIDevice()>:
c0007604:	83 ec 18             	sub    esp,0x18
c0007607:	68 12 b1 02 c0       	push   0xc002b112
c000760c:	e8 17 ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c0007611:	83 c4 1c             	add    esp,0x1c
c0007614:	c3                   	ret    
c0007615:	8d 76 00             	lea    esi,[esi+0x0]

c0007618 <KeGetISAPnPDevice()>:
c0007618:	83 ec 18             	sub    esp,0x18
c000761b:	68 17 b1 02 c0       	push   0xc002b117
c0007620:	e8 03 ff ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c0007625:	83 c4 1c             	add    esp,0x1c
c0007628:	c3                   	ret    
c0007629:	8d 76 00             	lea    esi,[esi+0x0]

c000762c <KeGetISADevice()>:
c000762c:	83 ec 18             	sub    esp,0x18
c000762f:	68 2d b1 02 c0       	push   0xc002b12d
c0007634:	e8 ef fe ff ff       	call   c0007528 <KeGetChildOfRootWithName(char const*)>
c0007639:	83 c4 1c             	add    esp,0x1c
c000763c:	c3                   	ret    
c000763d:	90                   	nop
c000763e:	66 90                	xchg   ax,ax

c0007640 <Hardware::printRecursively(int)>:
c0007640:	55                   	push   ebp
c0007641:	57                   	push   edi
c0007642:	56                   	push   esi
c0007643:	53                   	push   ebx
c0007644:	83 ec 7c             	sub    esp,0x7c
c0007647:	8b b4 24 94 00 00 00 	mov    esi,DWORD PTR [esp+0x94]
c000764e:	85 f6                	test   esi,esi
c0007650:	7e 1a                	jle    c000766c <Hardware::printRecursively(int)+0x2c>
c0007652:	31 db                	xor    ebx,ebx
c0007654:	83 ec 0c             	sub    esp,0xc
c0007657:	83 c3 01             	add    ebx,0x1
c000765a:	68 52 d7 02 c0       	push   0xc002d752
c000765f:	e8 02 f9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	39 de                	cmp    esi,ebx
c0007669:	75 e9                	jne    c0007654 <Hardware::printRecursively(int)+0x14>
c000766b:	90                   	nop
c000766c:	31 c0                	xor    eax,eax
c000766e:	66 90                	xchg   ax,ax
c0007670:	8b 90 80 b1 02 c0    	mov    edx,DWORD PTR [eax-0x3ffd4e80]
c0007676:	89 54 04 10          	mov    DWORD PTR [esp+eax*1+0x10],edx
c000767a:	83 c0 04             	add    eax,0x4
c000767d:	83 f8 60             	cmp    eax,0x60
c0007680:	72 ee                	jb     c0007670 <Hardware::printRecursively(int)+0x30>
c0007682:	83 ec 0c             	sub    esp,0xc
c0007685:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
c000768c:	8b 8c 24 9c 00 00 00 	mov    ecx,DWORD PTR [esp+0x9c]
c0007693:	8b 00                	mov    eax,DWORD PTR [eax]
c0007695:	51                   	push   ecx
c0007696:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007699:	5f                   	pop    edi
c000769a:	8b ac 24 9c 00 00 00 	mov    ebp,DWORD PTR [esp+0x9c]
c00076a1:	89 c3                	mov    ebx,eax
c00076a3:	8b 84 24 9c 00 00 00 	mov    eax,DWORD PTR [esp+0x9c]
c00076aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00076ac:	55                   	push   ebp
c00076ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00076b0:	83 c4 0c             	add    esp,0xc
c00076b3:	53                   	push   ebx
c00076b4:	8d 04 40             	lea    eax,[eax+eax*2]
c00076b7:	8d 44 84 18          	lea    eax,[esp+eax*4+0x18]
c00076bb:	50                   	push   eax
c00076bc:	68 35 b1 02 c0       	push   0xc002b135
c00076c1:	e8 a0 f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00076c6:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c00076cd:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c00076d1:	8d 78 74             	lea    edi,[eax+0x74]
c00076d4:	58                   	pop    eax
c00076d5:	5a                   	pop    edx
c00076d6:	57                   	push   edi
c00076d7:	53                   	push   ebx
c00076d8:	e8 af 13 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c00076dd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00076e1:	83 ec 0c             	sub    esp,0xc
c00076e4:	57                   	push   edi
c00076e5:	55                   	push   ebp
c00076e6:	e8 c5 13 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c00076eb:	83 c4 1c             	add    esp,0x1c
c00076ee:	66 90                	xchg   ax,ax
c00076f0:	83 ec 08             	sub    esp,0x8
c00076f3:	55                   	push   ebp
c00076f4:	53                   	push   ebx
c00076f5:	e8 86 10 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076fa:	83 c4 10             	add    esp,0x10
c00076fd:	84 c0                	test   al,al
c00076ff:	74 2f                	je     c0007730 <Hardware::printRecursively(int)+0xf0>
c0007701:	83 ec 0c             	sub    esp,0xc
c0007704:	53                   	push   ebx
c0007705:	e8 8a 10 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c000770a:	5a                   	pop    edx
c000770b:	8d 56 01             	lea    edx,[esi+0x1]
c000770e:	59                   	pop    ecx
c000770f:	52                   	push   edx
c0007710:	8b 38                	mov    edi,DWORD PTR [eax]
c0007712:	57                   	push   edi
c0007713:	e8 28 ff ff ff       	call   c0007640 <Hardware::printRecursively(int)>
c0007718:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000771c:	58                   	pop    eax
c000771d:	5a                   	pop    edx
c000771e:	53                   	push   ebx
c000771f:	57                   	push   edi
c0007720:	e8 af 13 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0007725:	57                   	push   edi
c0007726:	e8 41 10 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c000772b:	83 c4 10             	add    esp,0x10
c000772e:	eb c0                	jmp    c00076f0 <Hardware::printRecursively(int)+0xb0>
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	55                   	push   ebp
c0007734:	e8 33 10 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007739:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000773c:	e8 2b 10 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007741:	81 c4 8c 00 00 00    	add    esp,0x8c
c0007747:	5b                   	pop    ebx
c0007748:	5e                   	pop    esi
c0007749:	5f                   	pop    edi
c000774a:	5d                   	pop    ebp
c000774b:	c3                   	ret    

c000774c <KePrintDeviceTree()>:
c000774c:	83 ec 18             	sub    esp,0x18
c000774f:	68 e0 b1 02 c0       	push   0xc002b1e0
c0007754:	e8 0d f8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007759:	8b 0d b8 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eb8
c000775f:	58                   	pop    eax
c0007760:	5a                   	pop    edx
c0007761:	6a 00                	push   0x0
c0007763:	51                   	push   ecx
c0007764:	e8 d7 fe ff ff       	call   c0007640 <Hardware::printRecursively(int)>
c0007769:	c7 04 24 1c b2 02 c0 	mov    DWORD PTR [esp],0xc002b21c
c0007770:	e8 f1 f7 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007775:	83 c4 1c             	add    esp,0x1c
c0007778:	c3                   	ret    
c0007779:	90                   	nop
c000777a:	66 90                	xchg   ax,ax

c000777c <Hardware::detectRecursively()>:
c000777c:	57                   	push   edi
c000777d:	56                   	push   esi
c000777e:	53                   	push   ebx
c000777f:	83 ec 1c             	sub    esp,0x1c
c0007782:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007786:	68 3c b1 02 c0       	push   0xc002b13c
c000778b:	e8 d6 f7 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007790:	8b 06                	mov    eax,DWORD PTR [esi]
c0007792:	89 34 24             	mov    DWORD PTR [esp],esi
c0007795:	ff 10                	call   DWORD PTR [eax]
c0007797:	83 c4 10             	add    esp,0x10
c000779a:	85 c0                	test   eax,eax
c000779c:	74 0e                	je     c00077ac <Hardware::detectRecursively()+0x30>
c000779e:	8b 10                	mov    edx,DWORD PTR [eax]
c00077a0:	83 ec 0c             	sub    esp,0xc
c00077a3:	50                   	push   eax
c00077a4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00077a7:	83 c4 10             	add    esp,0x10
c00077aa:	66 90                	xchg   ax,ax
c00077ac:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00077b0:	83 c6 74             	add    esi,0x74
c00077b3:	83 ec 08             	sub    esp,0x8
c00077b6:	56                   	push   esi
c00077b7:	53                   	push   ebx
c00077b8:	e8 cf 12 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c00077bd:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	56                   	push   esi
c00077c5:	57                   	push   edi
c00077c6:	e8 e5 12 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c00077cb:	83 c4 1c             	add    esp,0x1c
c00077ce:	66 90                	xchg   ax,ax
c00077d0:	83 ec 08             	sub    esp,0x8
c00077d3:	57                   	push   edi
c00077d4:	53                   	push   ebx
c00077d5:	e8 a6 0f 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	84 c0                	test   al,al
c00077df:	74 2b                	je     c000780c <Hardware::detectRecursively()+0x90>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	53                   	push   ebx
c00077e5:	e8 aa 0f 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c00077ea:	5a                   	pop    edx
c00077eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00077ed:	51                   	push   ecx
c00077ee:	e8 89 ff ff ff       	call   c000777c <Hardware::detectRecursively()>
c00077f3:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00077f7:	58                   	pop    eax
c00077f8:	5a                   	pop    edx
c00077f9:	53                   	push   ebx
c00077fa:	56                   	push   esi
c00077fb:	e8 d4 12 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0007800:	56                   	push   esi
c0007801:	e8 66 0f 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007806:	83 c4 10             	add    esp,0x10
c0007809:	eb c5                	jmp    c00077d0 <Hardware::detectRecursively()+0x54>
c000780b:	90                   	nop
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	57                   	push   edi
c0007810:	e8 57 0f 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007815:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007818:	e8 4f 0f 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c000781d:	83 c4 20             	add    esp,0x20
c0007820:	5b                   	pop    ebx
c0007821:	5e                   	pop    esi
c0007822:	5f                   	pop    edi
c0007823:	c3                   	ret    

c0007824 <KeSetupDeviceTree()>:
c0007824:	53                   	push   ebx
c0007825:	83 ec 14             	sub    esp,0x14
c0007828:	68 8c 00 00 00       	push   0x8c
c000782d:	e8 12 8c 00 00       	call   c0010444 <malloc>
c0007832:	89 04 24             	mov    DWORD PTR [esp],eax
c0007835:	89 c3                	mov    ebx,eax
c0007837:	e8 e0 11 02 00       	call   c0028a1c <RootHardware::RootHardware()>
c000783c:	8b 83 88 00 00 00    	mov    eax,DWORD PTR [ebx+0x88]
c0007842:	89 1d b8 3e 03 c0    	mov    DWORD PTR ds:0xc0033eb8,ebx
c0007848:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000784b:	8b 83 88 00 00 00    	mov    eax,DWORD PTR [ebx+0x88]
c0007851:	8b 10                	mov    edx,DWORD PTR [eax]
c0007853:	89 04 24             	mov    DWORD PTR [esp],eax
c0007856:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007859:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c000785f:	58                   	pop    eax
c0007860:	52                   	push   edx
c0007861:	e8 16 ff ff ff       	call   c000777c <Hardware::detectRecursively()>
c0007866:	8b 1d b8 3e 03 c0    	mov    ebx,DWORD PTR ds:0xc0033eb8
c000786c:	59                   	pop    ecx
c000786d:	53                   	push   ebx
c000786e:	e8 09 ff ff ff       	call   c000777c <Hardware::detectRecursively()>
c0007873:	58                   	pop    eax
c0007874:	a1 b8 3e 03 c0       	mov    eax,ds:0xc0033eb8
c0007879:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000787f:	50                   	push   eax
c0007880:	e8 f3 07 00 00       	call   c0008078 <RootDriver::detectLegacyISA()>
c0007885:	83 c4 18             	add    esp,0x18
c0007888:	5b                   	pop    ebx
c0007889:	c3                   	ret    
c000788a:	66 90                	xchg   ax,ax

c000788c <Hardware::deinitialiseRecursively()>:
c000788c:	55                   	push   ebp
c000788d:	57                   	push   edi
c000788e:	56                   	push   esi
c000788f:	53                   	push   ebx
c0007890:	83 ec 1c             	sub    esp,0x1c
c0007893:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007897:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000789b:	83 ec 08             	sub    esp,0x8
c000789e:	8d 75 74             	lea    esi,[ebp+0x74]
c00078a1:	56                   	push   esi
c00078a2:	53                   	push   ebx
c00078a3:	e8 e4 11 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c00078a8:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00078ac:	83 ec 0c             	sub    esp,0xc
c00078af:	56                   	push   esi
c00078b0:	57                   	push   edi
c00078b1:	e8 fa 11 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c00078b6:	83 c4 1c             	add    esp,0x1c
c00078b9:	8d 76 00             	lea    esi,[esi+0x0]
c00078bc:	83 ec 08             	sub    esp,0x8
c00078bf:	57                   	push   edi
c00078c0:	53                   	push   ebx
c00078c1:	e8 ba 0e 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00078c6:	83 c4 10             	add    esp,0x10
c00078c9:	84 c0                	test   al,al
c00078cb:	74 2b                	je     c00078f8 <Hardware::deinitialiseRecursively()+0x6c>
c00078cd:	83 ec 0c             	sub    esp,0xc
c00078d0:	53                   	push   ebx
c00078d1:	e8 be 0e 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c00078d6:	5a                   	pop    edx
c00078d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00078d9:	51                   	push   ecx
c00078da:	e8 ad ff ff ff       	call   c000788c <Hardware::deinitialiseRecursively()>
c00078df:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00078e3:	58                   	pop    eax
c00078e4:	5a                   	pop    edx
c00078e5:	53                   	push   ebx
c00078e6:	56                   	push   esi
c00078e7:	e8 e8 11 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c00078ec:	56                   	push   esi
c00078ed:	e8 7a 0e 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00078f2:	83 c4 10             	add    esp,0x10
c00078f5:	eb c5                	jmp    c00078bc <Hardware::deinitialiseRecursively()+0x30>
c00078f7:	90                   	nop
c00078f8:	83 ec 0c             	sub    esp,0xc
c00078fb:	57                   	push   edi
c00078fc:	e8 6b 0e 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007901:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007904:	e8 63 0e 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007909:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000790c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000790f:	ff 10                	call   DWORD PTR [eax]
c0007911:	83 c4 10             	add    esp,0x10
c0007914:	85 c0                	test   eax,eax
c0007916:	74 0c                	je     c0007924 <Hardware::deinitialiseRecursively()+0x98>
c0007918:	8b 10                	mov    edx,DWORD PTR [eax]
c000791a:	83 ec 0c             	sub    esp,0xc
c000791d:	50                   	push   eax
c000791e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007921:	83 c4 10             	add    esp,0x10
c0007924:	83 c4 1c             	add    esp,0x1c
c0007927:	5b                   	pop    ebx
c0007928:	5e                   	pop    esi
c0007929:	5f                   	pop    edi
c000792a:	5d                   	pop    ebp
c000792b:	c3                   	ret    

c000792c <Hardware::setPowerStateRecursively(DevicePowerState)>:
c000792c:	55                   	push   ebp
c000792d:	57                   	push   edi
c000792e:	56                   	push   esi
c000792f:	53                   	push   ebx
c0007930:	83 ec 1c             	sub    esp,0x1c
c0007933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007937:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000793b:	83 ec 08             	sub    esp,0x8
c000793e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007942:	8d 68 74             	lea    ebp,[eax+0x74]
c0007945:	55                   	push   ebp
c0007946:	53                   	push   ebx
c0007947:	e8 40 11 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c000794c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007950:	83 ec 0c             	sub    esp,0xc
c0007953:	55                   	push   ebp
c0007954:	56                   	push   esi
c0007955:	e8 56 11 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c000795a:	83 c4 1c             	add    esp,0x1c
c000795d:	8d 76 00             	lea    esi,[esi+0x0]
c0007960:	83 ec 08             	sub    esp,0x8
c0007963:	56                   	push   esi
c0007964:	53                   	push   ebx
c0007965:	e8 16 0e 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000796a:	83 c4 10             	add    esp,0x10
c000796d:	84 c0                	test   al,al
c000796f:	74 2f                	je     c00079a0 <Hardware::setPowerStateRecursively(DevicePowerState)+0x74>
c0007971:	83 ec 0c             	sub    esp,0xc
c0007974:	53                   	push   ebx
c0007975:	e8 1a 0e 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c000797a:	59                   	pop    ecx
c000797b:	5d                   	pop    ebp
c000797c:	57                   	push   edi
c000797d:	8b 00                	mov    eax,DWORD PTR [eax]
c000797f:	50                   	push   eax
c0007980:	e8 a7 ff ff ff       	call   c000792c <Hardware::setPowerStateRecursively(DevicePowerState)>
c0007985:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007989:	58                   	pop    eax
c000798a:	5a                   	pop    edx
c000798b:	53                   	push   ebx
c000798c:	55                   	push   ebp
c000798d:	e8 42 11 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0007992:	55                   	push   ebp
c0007993:	e8 d4 0d 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	eb c3                	jmp    c0007960 <Hardware::setPowerStateRecursively(DevicePowerState)+0x34>
c000799d:	8d 76 00             	lea    esi,[esi+0x0]
c00079a0:	83 ec 0c             	sub    esp,0xc
c00079a3:	56                   	push   esi
c00079a4:	e8 c3 0d 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00079a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079ac:	e8 bb 0d 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00079b1:	58                   	pop    eax
c00079b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00079b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00079ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00079bc:	52                   	push   edx
c00079bd:	ff 10                	call   DWORD PTR [eax]
c00079bf:	83 c4 10             	add    esp,0x10
c00079c2:	85 c0                	test   eax,eax
c00079c4:	74 0e                	je     c00079d4 <Hardware::setPowerStateRecursively(DevicePowerState)+0xa8>
c00079c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00079c8:	83 ec 08             	sub    esp,0x8
c00079cb:	57                   	push   edi
c00079cc:	50                   	push   eax
c00079cd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00079d0:	83 c4 10             	add    esp,0x10
c00079d3:	90                   	nop
c00079d4:	83 c4 1c             	add    esp,0x1c
c00079d7:	5b                   	pop    ebx
c00079d8:	5e                   	pop    esi
c00079d9:	5f                   	pop    edi
c00079da:	5d                   	pop    ebp
c00079db:	c3                   	ret    

c00079dc <Hardware::portInUseRecursive(int, int)>:
c00079dc:	55                   	push   ebp
c00079dd:	57                   	push   edi
c00079de:	56                   	push   esi
c00079df:	53                   	push   ebx
c00079e0:	83 ec 2c             	sub    esp,0x2c
c00079e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079e7:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c00079eb:	83 ec 08             	sub    esp,0x8
c00079ee:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00079f2:	8d 68 18             	lea    ebp,[eax+0x18]
c00079f5:	55                   	push   ebp
c00079f6:	53                   	push   ebx
c00079f7:	e8 18 11 02 00       	call   c0028b14 <std::vector<DevicePortRange>::begin()>
c00079fc:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0007a00:	83 ec 0c             	sub    esp,0xc
c0007a03:	55                   	push   ebp
c0007a04:	57                   	push   edi
c0007a05:	e8 2e 11 02 00       	call   c0028b38 <std::vector<DevicePortRange>::end()>
c0007a0a:	83 c4 1c             	add    esp,0x1c
c0007a0d:	eb 41                	jmp    c0007a50 <Hardware::portInUseRecursive(int, int)+0x74>
c0007a0f:	90                   	nop
c0007a10:	83 ec 0c             	sub    esp,0xc
c0007a13:	53                   	push   ebx
c0007a14:	e8 9b 0d 02 00       	call   c00287b4 <std::vector<DevicePortRange>::iterator::operator*() const>
c0007a19:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0007a1d:	83 c4 10             	add    esp,0x10
c0007a20:	01 f1                	add    ecx,esi
c0007a22:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0007a25:	39 ca                	cmp    edx,ecx
c0007a27:	7d 0f                	jge    c0007a38 <Hardware::portInUseRecursive(int, int)+0x5c>
c0007a29:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
c0007a2d:	01 d0                	add    eax,edx
c0007a2f:	39 f0                	cmp    eax,esi
c0007a31:	0f 8f dd 00 00 00    	jg     c0007b14 <Hardware::portInUseRecursive(int, int)+0x138>
c0007a37:	90                   	nop
c0007a38:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007a3c:	83 ec 08             	sub    esp,0x8
c0007a3f:	53                   	push   ebx
c0007a40:	55                   	push   ebp
c0007a41:	e8 16 11 02 00       	call   c0028b5c <std::vector<DevicePortRange>::iterator::operator++()>
c0007a46:	55                   	push   ebp
c0007a47:	e8 50 0d 02 00       	call   c002879c <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a4c:	83 c4 10             	add    esp,0x10
c0007a4f:	90                   	nop
c0007a50:	83 ec 08             	sub    esp,0x8
c0007a53:	57                   	push   edi
c0007a54:	53                   	push   ebx
c0007a55:	e8 46 0d 02 00       	call   c00287a0 <std::vector<DevicePortRange>::iterator::operator!=(std::vector<DevicePortRange>::iterator const&) const>
c0007a5a:	83 c4 10             	add    esp,0x10
c0007a5d:	84 c0                	test   al,al
c0007a5f:	75 af                	jne    c0007a10 <Hardware::portInUseRecursive(int, int)+0x34>
c0007a61:	83 ec 0c             	sub    esp,0xc
c0007a64:	57                   	push   edi
c0007a65:	e8 32 0d 02 00       	call   c002879c <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a6d:	e8 2a 0d 02 00       	call   c002879c <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007a76:	5a                   	pop    edx
c0007a77:	59                   	pop    ecx
c0007a78:	83 c0 74             	add    eax,0x74
c0007a7b:	50                   	push   eax
c0007a7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a80:	53                   	push   ebx
c0007a81:	e8 06 10 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c0007a86:	83 ec 0c             	sub    esp,0xc
c0007a89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a8d:	50                   	push   eax
c0007a8e:	57                   	push   edi
c0007a8f:	e8 1c 10 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c0007a94:	83 c4 1c             	add    esp,0x1c
c0007a97:	90                   	nop
c0007a98:	83 ec 08             	sub    esp,0x8
c0007a9b:	57                   	push   edi
c0007a9c:	53                   	push   ebx
c0007a9d:	e8 de 0c 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007aa2:	83 c4 10             	add    esp,0x10
c0007aa5:	84 c0                	test   al,al
c0007aa7:	0f 84 87 00 00 00    	je     c0007b34 <Hardware::portInUseRecursive(int, int)+0x158>
c0007aad:	83 ec 0c             	sub    esp,0xc
c0007ab0:	53                   	push   ebx
c0007ab1:	e8 de 0c 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0007ab6:	83 c4 10             	add    esp,0x10
c0007ab9:	8b 10                	mov    edx,DWORD PTR [eax]
c0007abb:	3b 54 24 40          	cmp    edx,DWORD PTR [esp+0x40]
c0007abf:	74 37                	je     c0007af8 <Hardware::portInUseRecursive(int, int)+0x11c>
c0007ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0007ac4:	83 ec 04             	sub    esp,0x4
c0007ac7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007acb:	50                   	push   eax
c0007acc:	56                   	push   esi
c0007acd:	52                   	push   edx
c0007ace:	e8 09 ff ff ff       	call   c00079dc <Hardware::portInUseRecursive(int, int)>
c0007ad3:	83 c4 10             	add    esp,0x10
c0007ad6:	85 c0                	test   eax,eax
c0007ad8:	75 7a                	jne    c0007b54 <Hardware::portInUseRecursive(int, int)+0x178>
c0007ada:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007ade:	83 ec 08             	sub    esp,0x8
c0007ae1:	53                   	push   ebx
c0007ae2:	50                   	push   eax
c0007ae3:	e8 ec 0f 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0007ae8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0007aec:	50                   	push   eax
c0007aed:	e8 7a 0c 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007af2:	83 c4 10             	add    esp,0x10
c0007af5:	eb a1                	jmp    c0007a98 <Hardware::portInUseRecursive(int, int)+0xbc>
c0007af7:	90                   	nop
c0007af8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007afc:	83 ec 0c             	sub    esp,0xc
c0007aff:	68 56 b1 02 c0       	push   0xc002b156
c0007b04:	e8 8f 8d 00 00       	call   c0010898 <KePanic(char const*)>
c0007b09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007b0d:	83 c4 10             	add    esp,0x10
c0007b10:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b12:	eb b0                	jmp    c0007ac4 <Hardware::portInUseRecursive(int, int)+0xe8>
c0007b14:	83 ec 0c             	sub    esp,0xc
c0007b17:	57                   	push   edi
c0007b18:	e8 7f 0c 02 00       	call   c002879c <std::vector<DevicePortRange>::iterator::~iterator()>
c0007b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b20:	e8 77 0c 02 00       	call   c002879c <std::vector<DevicePortRange>::iterator::~iterator()>
c0007b25:	83 c4 10             	add    esp,0x10
c0007b28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2c:	83 c4 2c             	add    esp,0x2c
c0007b2f:	5b                   	pop    ebx
c0007b30:	5e                   	pop    esi
c0007b31:	5f                   	pop    edi
c0007b32:	5d                   	pop    ebp
c0007b33:	c3                   	ret    
c0007b34:	83 ec 0c             	sub    esp,0xc
c0007b37:	57                   	push   edi
c0007b38:	e8 2f 0c 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007b3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b40:	e8 27 0c 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007b45:	83 c4 10             	add    esp,0x10
c0007b48:	31 c0                	xor    eax,eax
c0007b4a:	83 c4 2c             	add    esp,0x2c
c0007b4d:	5b                   	pop    ebx
c0007b4e:	5e                   	pop    esi
c0007b4f:	5f                   	pop    edi
c0007b50:	5d                   	pop    ebp
c0007b51:	c3                   	ret    
c0007b52:	66 90                	xchg   ax,ax
c0007b54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b58:	83 ec 0c             	sub    esp,0xc
c0007b5b:	57                   	push   edi
c0007b5c:	e8 0b 0c 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007b61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b64:	e8 03 0c 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007b69:	83 c4 10             	add    esp,0x10
c0007b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b70:	83 c4 2c             	add    esp,0x2c
c0007b73:	5b                   	pop    ebx
c0007b74:	5e                   	pop    esi
c0007b75:	5f                   	pop    edi
c0007b76:	5d                   	pop    ebp
c0007b77:	c3                   	ret    

c0007b78 <KeIsPortInUse(unsigned short, int)>:
c0007b78:	83 ec 10             	sub    esp,0x10
c0007b7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b7f:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007b85:	50                   	push   eax
c0007b86:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007b8b:	50                   	push   eax
c0007b8c:	52                   	push   edx
c0007b8d:	e8 4a fe ff ff       	call   c00079dc <Hardware::portInUseRecursive(int, int)>
c0007b92:	85 c0                	test   eax,eax
c0007b94:	0f 95 c0             	setne  al
c0007b97:	83 c4 1c             	add    esp,0x1c
c0007b9a:	c3                   	ret    
c0007b9b:	90                   	nop

c0007b9c <KeGetOwnerOfPort(unsigned short, int)>:
c0007b9c:	83 ec 10             	sub    esp,0x10
c0007b9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ba3:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007ba9:	50                   	push   eax
c0007baa:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007baf:	50                   	push   eax
c0007bb0:	52                   	push   edx
c0007bb1:	e8 26 fe ff ff       	call   c00079dc <Hardware::portInUseRecursive(int, int)>
c0007bb6:	83 c4 1c             	add    esp,0x1c
c0007bb9:	c3                   	ret    
c0007bba:	66 90                	xchg   ax,ax

c0007bbc <KePrintIOPortUsage()>:
c0007bbc:	53                   	push   ebx
c0007bbd:	31 db                	xor    ebx,ebx
c0007bbf:	83 ec 14             	sub    esp,0x14
c0007bc2:	68 4c b2 02 c0       	push   0xc002b24c
c0007bc7:	e8 9a f3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	90                   	nop
c0007bd0:	83 ec 08             	sub    esp,0x8
c0007bd3:	6a 01                	push   0x1
c0007bd5:	53                   	push   ebx
c0007bd6:	e8 c1 ff ff ff       	call   c0007b9c <KeGetOwnerOfPort(unsigned short, int)>
c0007bdb:	83 c4 10             	add    esp,0x10
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 22                	je     c0007c04 <KePrintIOPortUsage()+0x48>
c0007be2:	8b 10                	mov    edx,DWORD PTR [eax]
c0007be4:	83 ec 0c             	sub    esp,0xc
c0007be7:	50                   	push   eax
c0007be8:	ff 12                	call   DWORD PTR [edx]
c0007bea:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bec:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bef:	ff 12                	call   DWORD PTR [edx]
c0007bf1:	83 c4 0c             	add    esp,0xc
c0007bf4:	50                   	push   eax
c0007bf5:	53                   	push   ebx
c0007bf6:	68 5c b1 02 c0       	push   0xc002b15c
c0007bfb:	e8 66 f3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007c00:	83 c4 10             	add    esp,0x10
c0007c03:	90                   	nop
c0007c04:	83 c3 01             	add    ebx,0x1
c0007c07:	81 fb 00 00 01 00    	cmp    ebx,0x10000
c0007c0d:	75 c1                	jne    c0007bd0 <KePrintIOPortUsage()+0x14>
c0007c0f:	83 ec 0c             	sub    esp,0xc
c0007c12:	68 1c b2 02 c0       	push   0xc002b21c
c0007c17:	e8 4a f3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007c1c:	83 c4 18             	add    esp,0x18
c0007c1f:	5b                   	pop    ebx
c0007c20:	c3                   	ret    
c0007c21:	90                   	nop
c0007c22:	66 90                	xchg   ax,ax

c0007c24 <Hardware::addChild(Hardware*)>:
c0007c24:	83 ec 14             	sub    esp,0x14
c0007c27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007c2b:	50                   	push   eax
c0007c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007c30:	83 c0 74             	add    eax,0x74
c0007c33:	50                   	push   eax
c0007c34:	e8 1f 13 02 00       	call   c0028f58 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007c39:	83 c4 1c             	add    esp,0x1c
c0007c3c:	c3                   	ret    
c0007c3d:	90                   	nop
c0007c3e:	66 90                	xchg   ax,ax

c0007c40 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007c40:	55                   	push   ebp
c0007c41:	57                   	push   edi
c0007c42:	56                   	push   esi
c0007c43:	53                   	push   ebx
c0007c44:	83 ec 28             	sub    esp,0x28
c0007c47:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0007c4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0007c52:	55                   	push   ebp
c0007c53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007c56:	83 c4 10             	add    esp,0x10
c0007c59:	39 f8                	cmp    eax,edi
c0007c5b:	0f 84 87 00 00 00    	je     c0007ce8 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0xa8>
c0007c61:	8d 76 00             	lea    esi,[esi+0x0]
c0007c64:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007c68:	83 c5 74             	add    ebp,0x74
c0007c6b:	83 ec 08             	sub    esp,0x8
c0007c6e:	55                   	push   ebp
c0007c6f:	53                   	push   ebx
c0007c70:	e8 17 0e 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c0007c75:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007c79:	83 ec 0c             	sub    esp,0xc
c0007c7c:	55                   	push   ebp
c0007c7d:	56                   	push   esi
c0007c7e:	e8 2d 0e 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c0007c83:	83 c4 1c             	add    esp,0x1c
c0007c86:	66 90                	xchg   ax,ax
c0007c88:	83 ec 08             	sub    esp,0x8
c0007c8b:	56                   	push   esi
c0007c8c:	53                   	push   ebx
c0007c8d:	e8 ee 0a 02 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007c92:	83 c4 10             	add    esp,0x10
c0007c95:	84 c0                	test   al,al
c0007c97:	74 33                	je     c0007ccc <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x8c>
c0007c99:	83 ec 0c             	sub    esp,0xc
c0007c9c:	53                   	push   ebx
c0007c9d:	e8 f2 0a 02 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0007ca2:	83 c4 0c             	add    esp,0xc
c0007ca5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007ca9:	52                   	push   edx
c0007caa:	57                   	push   edi
c0007cab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cad:	51                   	push   ecx
c0007cae:	e8 8d ff ff ff       	call   c0007c40 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007cb3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007cb7:	58                   	pop    eax
c0007cb8:	5a                   	pop    edx
c0007cb9:	53                   	push   ebx
c0007cba:	55                   	push   ebp
c0007cbb:	e8 14 0e 02 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0007cc0:	55                   	push   ebp
c0007cc1:	e8 a6 0a 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007cc6:	83 c4 10             	add    esp,0x10
c0007cc9:	eb bd                	jmp    c0007c88 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x48>
c0007ccb:	90                   	nop
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	56                   	push   esi
c0007cd0:	e8 97 0a 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007cd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007cd8:	e8 8f 0a 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007cdd:	83 c4 2c             	add    esp,0x2c
c0007ce0:	5b                   	pop    ebx
c0007ce1:	5e                   	pop    esi
c0007ce2:	5f                   	pop    edi
c0007ce3:	5d                   	pop    ebp
c0007ce4:	c3                   	ret    
c0007ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ce8:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0007cec:	83 ec 08             	sub    esp,0x8
c0007cef:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf3:	50                   	push   eax
c0007cf4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0007cf8:	51                   	push   ecx
c0007cf9:	e8 5a 12 02 00       	call   c0028f58 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007cfe:	83 c4 10             	add    esp,0x10
c0007d01:	e9 5e ff ff ff       	jmp    c0007c64 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x24>
c0007d06:	66 90                	xchg   ax,ax

c0007d08 <KeGetHardwareOfType(HardwareType)>:
c0007d08:	53                   	push   ebx
c0007d09:	83 ec 14             	sub    esp,0x14
c0007d0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007d10:	53                   	push   ebx
c0007d11:	e8 8a 0c 02 00       	call   c00289a0 <std::vector<Hardware*>::vector()>
c0007d16:	83 c4 0c             	add    esp,0xc
c0007d19:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007d1f:	53                   	push   ebx
c0007d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d24:	50                   	push   eax
c0007d25:	52                   	push   edx
c0007d26:	e8 15 ff ff ff       	call   c0007c40 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007d2b:	83 c4 18             	add    esp,0x18
c0007d2e:	89 d8                	mov    eax,ebx
c0007d30:	5b                   	pop    ebx
c0007d31:	c2 04 00             	ret    0x4

c0007d34 <Hardware::removeChild(Hardware*)>:
c0007d34:	55                   	push   ebp
c0007d35:	57                   	push   edi
c0007d36:	56                   	push   esi
c0007d37:	53                   	push   ebx
c0007d38:	83 ec 2c             	sub    esp,0x2c
c0007d3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d3f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007d43:	83 ec 08             	sub    esp,0x8
c0007d46:	8d 58 74             	lea    ebx,[eax+0x74]
c0007d49:	53                   	push   ebx
c0007d4a:	56                   	push   esi
c0007d4b:	e8 60 0d 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c0007d50:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007d54:	83 ec 0c             	sub    esp,0xc
c0007d57:	53                   	push   ebx
c0007d58:	57                   	push   edi
c0007d59:	e8 52 0d 02 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c0007d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d61:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0007d65:	55                   	push   ebp
c0007d66:	e8 21 0d 02 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c0007d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007d6f:	83 c4 1c             	add    esp,0x1c
c0007d72:	8d 54 24 44          	lea    edx,[esp+0x44]
c0007d76:	52                   	push   edx
c0007d77:	57                   	push   edi
c0007d78:	55                   	push   ebp
c0007d79:	50                   	push   eax
c0007d7a:	e8 f5 0e 02 00       	call   c0028c74 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0007d7f:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	56                   	push   esi
c0007d87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007d8b:	50                   	push   eax
c0007d8c:	53                   	push   ebx
c0007d8d:	52                   	push   edx
c0007d8e:	e8 55 12 02 00       	call   c0028fe8 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c0007d93:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007d97:	52                   	push   edx
c0007d98:	e8 cf 09 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007d9d:	58                   	pop    eax
c0007d9e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007da2:	50                   	push   eax
c0007da3:	e8 c4 09 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007da8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007dab:	e8 bc 09 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007db0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007db3:	e8 b4 09 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007db8:	89 34 24             	mov    DWORD PTR [esp],esi
c0007dbb:	e8 ac 09 02 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0007dc0:	83 c4 3c             	add    esp,0x3c
c0007dc3:	5b                   	pop    ebx
c0007dc4:	5e                   	pop    esi
c0007dc5:	5f                   	pop    edi
c0007dc6:	5d                   	pop    ebp
c0007dc7:	c3                   	ret    

c0007dc8 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c0007dc8:	83 ec 24             	sub    esp,0x24
c0007dcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007dcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007dd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ddb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0007ddf:	50                   	push   eax
c0007de0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007de4:	83 c0 04             	add    eax,0x4
c0007de7:	50                   	push   eax
c0007de8:	e8 a3 14 02 00       	call   c0029290 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007ded:	83 c4 2c             	add    esp,0x2c
c0007df0:	c3                   	ret    
c0007df1:	90                   	nop
c0007df2:	66 90                	xchg   ax,ax

c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c0007df4:	56                   	push   esi
c0007df5:	53                   	push   ebx
c0007df6:	83 ec 14             	sub    esp,0x14
c0007df9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e01:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e05:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0007e09:	83 fa 02             	cmp    edx,0x2
c0007e0c:	74 76                	je     c0007e84 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x90>
c0007e0e:	7e 50                	jle    c0007e60 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x6c>
c0007e10:	83 fa 04             	cmp    edx,0x4
c0007e13:	74 6b                	je     c0007e80 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x8c>
c0007e15:	83 fa 08             	cmp    edx,0x8
c0007e18:	b0 03                	mov    al,0x3
c0007e1a:	75 4c                	jne    c0007e68 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x74>
c0007e1c:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007e20:	c1 e0 06             	shl    eax,0x6
c0007e23:	83 ec 0c             	sub    esp,0xc
c0007e26:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0007e2a:	66 89 74 24 18       	mov    WORD PTR [esp+0x18],si
c0007e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e31:	0f b7 f6             	movzx  esi,si
c0007e34:	53                   	push   ebx
c0007e35:	83 c3 18             	add    ebx,0x18
c0007e38:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007e3b:	83 c4 0c             	add    esp,0xc
c0007e3e:	50                   	push   eax
c0007e3f:	56                   	push   esi
c0007e40:	68 b4 b2 02 c0       	push   0xc002b2b4
c0007e45:	e8 1c f1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007e4a:	58                   	pop    eax
c0007e4b:	5a                   	pop    edx
c0007e4c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007e50:	50                   	push   eax
c0007e51:	53                   	push   ebx
c0007e52:	e8 ed 15 02 00       	call   c0029444 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007e57:	83 c4 10             	add    esp,0x10
c0007e5a:	83 c4 14             	add    esp,0x14
c0007e5d:	5b                   	pop    ebx
c0007e5e:	5e                   	pop    esi
c0007e5f:	c3                   	ret    
c0007e60:	31 c0                	xor    eax,eax
c0007e62:	83 fa 01             	cmp    edx,0x1
c0007e65:	74 b5                	je     c0007e1c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>
c0007e67:	90                   	nop
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	68 84 b2 02 c0       	push   0xc002b284
c0007e70:	e8 23 8a 00 00       	call   c0010898 <KePanic(char const*)>
c0007e75:	83 c4 10             	add    esp,0x10
c0007e78:	83 c4 14             	add    esp,0x14
c0007e7b:	5b                   	pop    ebx
c0007e7c:	5e                   	pop    esi
c0007e7d:	c3                   	ret    
c0007e7e:	66 90                	xchg   ax,ax
c0007e80:	b0 02                	mov    al,0x2
c0007e82:	eb 98                	jmp    c0007e1c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>
c0007e84:	b0 01                	mov    al,0x1
c0007e86:	eb 94                	jmp    c0007e1c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>

c0007e88 <RootDriver::detect()>:
c0007e88:	90                   	nop
c0007e89:	c3                   	ret    
c0007e8a:	66 90                	xchg   ax,ax

c0007e8c <RootDriver::deinitialise()>:
c0007e8c:	90                   	nop
c0007e8d:	c3                   	ret    
c0007e8e:	66 90                	xchg   ax,ax

c0007e90 <RootDriver::setPowerState(DevicePowerState)>:
c0007e90:	90                   	nop
c0007e91:	c3                   	ret    
c0007e92:	66 90                	xchg   ax,ax

c0007e94 <RootDriver::getHumanReadableName()>:
c0007e94:	b8 40 b3 02 c0       	mov    eax,0xc002b340
c0007e99:	c3                   	ret    
c0007e9a:	66 90                	xchg   ax,ax

c0007e9c <RootDriver::hasACPI()>:
c0007e9c:	b0 01                	mov    al,0x1
c0007e9e:	c3                   	ret    
c0007e9f:	90                   	nop

c0007ea0 <RootDriver::hasISAPnP()>:
c0007ea0:	b0 01                	mov    al,0x1
c0007ea2:	c3                   	ret    
c0007ea3:	90                   	nop

c0007ea4 <RootDriver::hasPCI()>:
c0007ea4:	b0 01                	mov    al,0x1
c0007ea6:	c3                   	ret    
c0007ea7:	90                   	nop

c0007ea8 <RootDriver::initialise()>:
c0007ea8:	53                   	push   ebx
c0007ea9:	83 ec 38             	sub    esp,0x38
c0007eac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007eb0:	e8 e7 ff ff ff       	call   c0007e9c <RootDriver::hasACPI()>
c0007eb5:	83 c4 04             	add    esp,0x4
c0007eb8:	0f b6 c0             	movzx  eax,al
c0007ebb:	85 c0                	test   eax,eax
c0007ebd:	0f 84 85 00 00 00    	je     c0007f48 <RootDriver::initialise()+0xa0>
c0007ec3:	c7 44 24 1c 8c 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8c
c0007ecb:	83 ec 0c             	sub    esp,0xc
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 6d 85 00 00       	call   c0010444 <malloc>
c0007ed7:	83 c4 10             	add    esp,0x10
c0007eda:	89 c3                	mov    ebx,eax
c0007edc:	83 ec 0c             	sub    esp,0xc
c0007edf:	53                   	push   ebx
c0007ee0:	e8 77 16 02 00       	call   c002955c <BusHardware::BusHardware()>
c0007ee5:	83 c4 10             	add    esp,0x10
c0007ee8:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007eec:	c7 44 24 20 08 00 00 00 	mov    DWORD PTR [esp+0x20],0x8
c0007ef4:	83 ec 0c             	sub    esp,0xc
c0007ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007efb:	e8 44 85 00 00       	call   c0010444 <malloc>
c0007f00:	83 c4 10             	add    esp,0x10
c0007f03:	89 c3                	mov    ebx,eax
c0007f05:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007f0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007f12:	83 ec 0c             	sub    esp,0xc
c0007f15:	53                   	push   ebx
c0007f16:	e8 09 17 02 00       	call   c0029624 <ACPIDriver::ACPIDriver()>
c0007f1b:	83 c4 10             	add    esp,0x10
c0007f1e:	83 ec 08             	sub    esp,0x8
c0007f21:	53                   	push   ebx
c0007f22:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0007f26:	e8 65 16 02 00       	call   c0029590 <BusHardware::setDriver(BusDriver*)>
c0007f2b:	83 c4 10             	add    esp,0x10
c0007f2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007f32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f35:	83 ec 08             	sub    esp,0x8
c0007f38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f3c:	50                   	push   eax
c0007f3d:	e8 e2 fc ff ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c0007f42:	83 c4 10             	add    esp,0x10
c0007f45:	8d 76 00             	lea    esi,[esi+0x0]
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007f4f:	e8 50 ff ff ff       	call   c0007ea4 <RootDriver::hasPCI()>
c0007f54:	83 c4 10             	add    esp,0x10
c0007f57:	0f b6 c0             	movzx  eax,al
c0007f5a:	85 c0                	test   eax,eax
c0007f5c:	0f 84 82 00 00 00    	je     c0007fe4 <RootDriver::initialise()+0x13c>
c0007f62:	c7 44 24 14 8c 00 00 00 	mov    DWORD PTR [esp+0x14],0x8c
c0007f6a:	83 ec 0c             	sub    esp,0xc
c0007f6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007f71:	e8 ce 84 00 00       	call   c0010444 <malloc>
c0007f76:	83 c4 10             	add    esp,0x10
c0007f79:	89 c3                	mov    ebx,eax
c0007f7b:	83 ec 0c             	sub    esp,0xc
c0007f7e:	53                   	push   ebx
c0007f7f:	e8 d8 15 02 00       	call   c002955c <BusHardware::BusHardware()>
c0007f84:	83 c4 10             	add    esp,0x10
c0007f87:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007f8b:	c7 44 24 18 08 00 00 00 	mov    DWORD PTR [esp+0x18],0x8
c0007f93:	83 ec 0c             	sub    esp,0xc
c0007f96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f9a:	e8 a5 84 00 00       	call   c0010444 <malloc>
c0007f9f:	83 c4 10             	add    esp,0x10
c0007fa2:	89 c3                	mov    ebx,eax
c0007fa4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007faa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007fb1:	83 ec 0c             	sub    esp,0xc
c0007fb4:	53                   	push   ebx
c0007fb5:	e8 8e 16 02 00       	call   c0029648 <PCIDriver::PCIDriver()>
c0007fba:	83 c4 10             	add    esp,0x10
c0007fbd:	83 ec 08             	sub    esp,0x8
c0007fc0:	53                   	push   ebx
c0007fc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fc5:	e8 c6 15 02 00       	call   c0029590 <BusHardware::setDriver(BusDriver*)>
c0007fca:	83 c4 10             	add    esp,0x10
c0007fcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fd4:	83 ec 08             	sub    esp,0x8
c0007fd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007fdb:	50                   	push   eax
c0007fdc:	e8 43 fc ff ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c0007fe1:	83 c4 10             	add    esp,0x10
c0007fe4:	83 ec 0c             	sub    esp,0xc
c0007fe7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007feb:	e8 b0 fe ff ff       	call   c0007ea0 <RootDriver::hasISAPnP()>
c0007ff0:	83 c4 10             	add    esp,0x10
c0007ff3:	0f b6 c0             	movzx  eax,al
c0007ff6:	85 c0                	test   eax,eax
c0007ff8:	74 76                	je     c0008070 <RootDriver::initialise()+0x1c8>
c0007ffa:	c7 44 24 0c 8c 00 00 00 	mov    DWORD PTR [esp+0xc],0x8c
c0008002:	83 ec 0c             	sub    esp,0xc
c0008005:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008009:	e8 36 84 00 00       	call   c0010444 <malloc>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	89 c3                	mov    ebx,eax
c0008013:	83 ec 0c             	sub    esp,0xc
c0008016:	53                   	push   ebx
c0008017:	e8 40 15 02 00       	call   c002955c <BusHardware::BusHardware()>
c000801c:	83 c4 10             	add    esp,0x10
c000801f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0008023:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000802b:	83 ec 0c             	sub    esp,0xc
c000802e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008032:	e8 0d 84 00 00       	call   c0010444 <malloc>
c0008037:	83 c4 10             	add    esp,0x10
c000803a:	89 c3                	mov    ebx,eax
c000803c:	83 ec 0c             	sub    esp,0xc
c000803f:	53                   	push   ebx
c0008040:	e8 9b 15 02 00       	call   c00295e0 <ISAPnPDriver::ISAPnPDriver()>
c0008045:	83 c4 10             	add    esp,0x10
c0008048:	83 ec 08             	sub    esp,0x8
c000804b:	53                   	push   ebx
c000804c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008050:	e8 3b 15 02 00       	call   c0029590 <BusHardware::setDriver(BusDriver*)>
c0008055:	83 c4 10             	add    esp,0x10
c0008058:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805f:	83 ec 08             	sub    esp,0x8
c0008062:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008066:	50                   	push   eax
c0008067:	e8 b8 fb ff ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c000806c:	83 c4 10             	add    esp,0x10
c000806f:	90                   	nop
c0008070:	90                   	nop
c0008071:	83 c4 38             	add    esp,0x38
c0008074:	5b                   	pop    ebx
c0008075:	c3                   	ret    
c0008076:	66 90                	xchg   ax,ax

c0008078 <RootDriver::detectLegacyISA()>:
c0008078:	53                   	push   ebx
c0008079:	83 ec 18             	sub    esp,0x18
c000807c:	c7 44 24 04 8c 00 00 00 	mov    DWORD PTR [esp+0x4],0x8c
c0008084:	83 ec 0c             	sub    esp,0xc
c0008087:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000808b:	e8 b4 83 00 00       	call   c0010444 <malloc>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	89 c3                	mov    ebx,eax
c0008095:	83 ec 0c             	sub    esp,0xc
c0008098:	53                   	push   ebx
c0008099:	e8 be 14 02 00       	call   c002955c <BusHardware::BusHardware()>
c000809e:	83 c4 10             	add    esp,0x10
c00080a1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00080a5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00080ad:	83 ec 0c             	sub    esp,0xc
c00080b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00080b4:	e8 8b 83 00 00       	call   c0010444 <malloc>
c00080b9:	83 c4 10             	add    esp,0x10
c00080bc:	89 c3                	mov    ebx,eax
c00080be:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00080c4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00080cb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00080d2:	83 ec 0c             	sub    esp,0xc
c00080d5:	53                   	push   ebx
c00080d6:	e8 91 15 02 00       	call   c002966c <ISADriver::ISADriver()>
c00080db:	83 c4 10             	add    esp,0x10
c00080de:	83 ec 08             	sub    esp,0x8
c00080e1:	53                   	push   ebx
c00080e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00080e6:	e8 a5 14 02 00       	call   c0029590 <BusHardware::setDriver(BusDriver*)>
c00080eb:	83 c4 10             	add    esp,0x10
c00080ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f5:	83 ec 08             	sub    esp,0x8
c00080f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00080fc:	50                   	push   eax
c00080fd:	e8 22 fb ff ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	90                   	nop
c0008106:	83 c4 18             	add    esp,0x18
c0008109:	5b                   	pop    ebx
c000810a:	c3                   	ret    

c000810b <KiIsHashInTable(unsigned short)>:
c000810b:	0f b7 d0             	movzx  edx,ax
c000810e:	83 e0 07             	and    eax,0x7
c0008111:	c1 fa 03             	sar    edx,0x3
c0008114:	88 c1                	mov    cl,al
c0008116:	0f b6 92 00 43 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffcbd00]
c000811d:	d3 fa                	sar    edx,cl
c000811f:	89 d0                	mov    eax,edx
c0008121:	83 e0 01             	and    eax,0x1
c0008124:	c3                   	ret    

c0008125 <KiSetHashInTable(unsigned short, bool)>:
c0008125:	56                   	push   esi
c0008126:	53                   	push   ebx
c0008127:	0f b7 d8             	movzx  ebx,ax
c000812a:	c1 fb 03             	sar    ebx,0x3
c000812d:	83 e0 07             	and    eax,0x7
c0008130:	89 c1                	mov    ecx,eax
c0008132:	b8 01 00 00 00       	mov    eax,0x1
c0008137:	0f b6 b3 00 43 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffcbd00]
c000813e:	d3 e0                	shl    eax,cl
c0008140:	84 d2                	test   dl,dl
c0008142:	74 04                	je     c0008148 <KiSetHashInTable(unsigned short, bool)+0x23>
c0008144:	09 f0                	or     eax,esi
c0008146:	eb 04                	jmp    c000814c <KiSetHashInTable(unsigned short, bool)+0x27>
c0008148:	f7 d0                	not    eax
c000814a:	21 f0                	and    eax,esi
c000814c:	88 83 00 43 03 c0    	mov    BYTE PTR [ebx-0x3ffcbd00],al
c0008152:	5b                   	pop    ebx
c0008153:	5e                   	pop    esi
c0008154:	c3                   	ret    

c0008155 <KiFlushSymlinkChanges()>:
c0008155:	57                   	push   edi
c0008156:	56                   	push   esi
c0008157:	53                   	push   ebx
c0008158:	83 ec 1c             	sub    esp,0x1c
c000815b:	68 14 01 00 00       	push   0x114
c0008160:	e8 df 82 00 00       	call   c0010444 <malloc>
c0008165:	83 c4 0c             	add    esp,0xc
c0008168:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000816e:	68 a0 b3 02 c0       	push   0xc002b3a0
c0008173:	50                   	push   eax
c0008174:	89 c3                	mov    ebx,eax
c0008176:	e8 65 0d 00 00       	call   c0008ee0 <File::File(char const*, Process*)>
c000817b:	83 c4 10             	add    esp,0x10
c000817e:	85 db                	test   ebx,ebx
c0008180:	75 10                	jne    c0008192 <KiFlushSymlinkChanges()+0x3d>
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	68 be b3 02 c0       	push   0xc002b3be
c000818a:	e8 09 87 00 00       	call   c0010898 <KePanic(char const*)>
c000818f:	83 c4 10             	add    esp,0x10
c0008192:	50                   	push   eax
c0008193:	50                   	push   eax
c0008194:	6a 06                	push   0x6
c0008196:	53                   	push   ebx
c0008197:	e8 62 0d 00 00       	call   c0008efe <File::open(FileOpenMode)>
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	85 c0                	test   eax,eax
c00081a1:	74 10                	je     c00081b3 <KiFlushSymlinkChanges()+0x5e>
c00081a3:	83 ec 0c             	sub    esp,0xc
c00081a6:	68 d8 b3 02 c0       	push   0xc002b3d8
c00081ab:	e8 e8 86 00 00       	call   c0010898 <KePanic(char const*)>
c00081b0:	83 c4 10             	add    esp,0x10
c00081b3:	31 f6                	xor    esi,esi
c00081b5:	39 35 c0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ec0,esi
c00081bb:	7e 70                	jle    c000822d <KiFlushSymlinkChanges()+0xd8>
c00081bd:	83 ec 0c             	sub    esp,0xc
c00081c0:	89 f0                	mov    eax,esi
c00081c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00081c4:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00081c8:	c1 e0 08             	shl    eax,0x8
c00081cb:	57                   	push   edi
c00081cc:	05 00 3f 03 c0       	add    eax,0xc0033f00
c00081d1:	50                   	push   eax
c00081d2:	6a 00                	push   0x0
c00081d4:	68 00 01 00 00       	push   0x100
c00081d9:	53                   	push   ebx
c00081da:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00081dd:	83 c4 20             	add    esp,0x20
c00081e0:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00081e8:	74 10                	je     c00081fa <KiFlushSymlinkChanges()+0xa5>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	68 f2 b3 02 c0       	push   0xc002b3f2
c00081f2:	e8 a1 86 00 00       	call   c0010898 <KePanic(char const*)>
c00081f7:	83 c4 10             	add    esp,0x10
c00081fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081fc:	8d 14 f5 e0 3e 03 c0 	lea    edx,[esi*8-0x3ffcc120]
c0008203:	83 ec 0c             	sub    esp,0xc
c0008206:	57                   	push   edi
c0008207:	52                   	push   edx
c0008208:	6a 00                	push   0x0
c000820a:	6a 08                	push   0x8
c000820c:	53                   	push   ebx
c000820d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008210:	83 c4 20             	add    esp,0x20
c0008213:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0008218:	74 10                	je     c000822a <KiFlushSymlinkChanges()+0xd5>
c000821a:	83 ec 0c             	sub    esp,0xc
c000821d:	68 0c b4 02 c0       	push   0xc002b40c
c0008222:	e8 71 86 00 00       	call   c0010898 <KePanic(char const*)>
c0008227:	83 c4 10             	add    esp,0x10
c000822a:	46                   	inc    esi
c000822b:	eb 88                	jmp    c00081b5 <KiFlushSymlinkChanges()+0x60>
c000822d:	83 ec 0c             	sub    esp,0xc
c0008230:	53                   	push   ebx
c0008231:	e8 26 0d 00 00       	call   c0008f5c <File::close()>
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	85 db                	test   ebx,ebx
c000823b:	74 0c                	je     c0008249 <KiFlushSymlinkChanges()+0xf4>
c000823d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000823f:	83 ec 0c             	sub    esp,0xc
c0008242:	53                   	push   ebx
c0008243:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008246:	83 c4 10             	add    esp,0x10
c0008249:	c7 05 c0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033ec0,0x0
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	5b                   	pop    ebx
c0008257:	5e                   	pop    esi
c0008258:	5f                   	pop    edi
c0008259:	c3                   	ret    

c000825a <KiDeinitialiseSymlinks(void*)>:
c000825a:	e9 f6 fe ff ff       	jmp    c0008155 <KiFlushSymlinkChanges()>

c000825f <KiGetSymlinkHash(char const*)>:
c000825f:	53                   	push   ebx
c0008260:	89 c3                	mov    ebx,eax
c0008262:	83 ec 14             	sub    esp,0x14
c0008265:	50                   	push   eax
c0008266:	e8 15 83 ff ff       	call   c0000580 <strlen>
c000826b:	5a                   	pop    edx
c000826c:	59                   	pop    ecx
c000826d:	50                   	push   eax
c000826e:	53                   	push   ebx
c000826f:	e8 8a 6b 00 00       	call   c000edfe <KeCalculateCRC32(unsigned char*, int)>
c0008274:	83 c4 18             	add    esp,0x18
c0008277:	5b                   	pop    ebx
c0008278:	89 c2                	mov    edx,eax
c000827a:	c1 ea 10             	shr    edx,0x10
c000827d:	31 d0                	xor    eax,edx
c000827f:	c3                   	ret    

c0008280 <KiCreateSymlinkID()>:
c0008280:	55                   	push   ebp
c0008281:	57                   	push   edi
c0008282:	56                   	push   esi
c0008283:	53                   	push   ebx
c0008284:	31 db                	xor    ebx,ebx
c0008286:	83 ec 1c             	sub    esp,0x1c
c0008289:	e8 e2 8f 00 00       	call   c0011270 <KeRand()>
c000828e:	8b 2d 00 63 03 c0    	mov    ebp,DWORD PTR ds:0xc0036300
c0008294:	31 d2                	xor    edx,edx
c0008296:	43                   	inc    ebx
c0008297:	31 ff                	xor    edi,edi
c0008299:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000829c:	89 ee                	mov    esi,ebp
c000829e:	89 0d 00 63 03 c0    	mov    DWORD PTR ds:0xc0036300,ecx
c00082a4:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00082a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00082ac:	c1 e0 1f             	shl    eax,0x1f
c00082af:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00082b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b9:	75 10                	jne    c00082cb <KiCreateSymlinkID()+0x4b>
c00082bb:	83 ec 0c             	sub    esp,0xc
c00082be:	68 26 b4 02 c0       	push   0xc002b426
c00082c3:	e8 d0 85 00 00       	call   c0010898 <KePanic(char const*)>
c00082c8:	83 c4 10             	add    esp,0x10
c00082cb:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00082cf:	75 06                	jne    c00082d7 <KiCreateSymlinkID()+0x57>
c00082d1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00082d5:	74 b2                	je     c0008289 <KiCreateSymlinkID()+0x9>
c00082d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00082db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00082df:	83 c4 1c             	add    esp,0x1c
c00082e2:	5b                   	pop    ebx
c00082e3:	31 f0                	xor    eax,esi
c00082e5:	5e                   	pop    esi
c00082e6:	31 fa                	xor    edx,edi
c00082e8:	5f                   	pop    edi
c00082e9:	5d                   	pop    ebp
c00082ea:	c3                   	ret    

c00082eb <KeRegisterSymlink(char const*, unsigned long long)>:
c00082eb:	53                   	push   ebx
c00082ec:	83 ec 0c             	sub    esp,0xc
c00082ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00082f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082f7:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c00082fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008300:	68 00 01 00 00       	push   0x100
c0008305:	6a 00                	push   0x0
c0008307:	89 0c c5 e4 3e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc11c],ecx
c000830e:	89 14 c5 e0 3e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc120],edx
c0008315:	c1 e0 08             	shl    eax,0x8
c0008318:	05 00 3f 03 c0       	add    eax,0xc0033f00
c000831d:	50                   	push   eax
c000831e:	e8 cd 81 ff ff       	call   c00004f0 <memset>
c0008323:	58                   	pop    eax
c0008324:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c0008329:	5a                   	pop    edx
c000832a:	c1 e0 08             	shl    eax,0x8
c000832d:	53                   	push   ebx
c000832e:	05 00 3f 03 c0       	add    eax,0xc0033f00
c0008333:	50                   	push   eax
c0008334:	e8 17 83 ff ff       	call   c0000650 <strcpy>
c0008339:	89 d8                	mov    eax,ebx
c000833b:	e8 1f ff ff ff       	call   c000825f <KiGetSymlinkHash(char const*)>
c0008340:	ba 01 00 00 00       	mov    edx,0x1
c0008345:	0f b7 c0             	movzx  eax,ax
c0008348:	e8 d8 fd ff ff       	call   c0008125 <KiSetHashInTable(unsigned short, bool)>
c000834d:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c0008352:	83 c4 10             	add    esp,0x10
c0008355:	40                   	inc    eax
c0008356:	a3 c0 3e 03 c0       	mov    ds:0xc0033ec0,eax
c000835b:	83 f8 03             	cmp    eax,0x3
c000835e:	7e 09                	jle    c0008369 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0008360:	83 c4 08             	add    esp,0x8
c0008363:	5b                   	pop    ebx
c0008364:	e9 ec fd ff ff       	jmp    c0008155 <KiFlushSymlinkChanges()>
c0008369:	83 c4 08             	add    esp,0x8
c000836c:	5b                   	pop    ebx
c000836d:	c3                   	ret    

c000836e <KeInitialiseSymlinks()>:
c000836e:	57                   	push   edi
c000836f:	56                   	push   esi
c0008370:	53                   	push   ebx
c0008371:	81 ec 14 01 00 00    	sub    esp,0x114
c0008377:	68 00 20 00 00       	push   0x2000
c000837c:	6a 00                	push   0x0
c000837e:	68 00 43 03 c0       	push   0xc0034300
c0008383:	c7 05 00 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036300,0x0
c000838d:	c7 05 c0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033ec0,0x0
c0008397:	e8 54 81 ff ff       	call   c00004f0 <memset>
c000839c:	59                   	pop    ecx
c000839d:	5b                   	pop    ebx
c000839e:	6a 00                	push   0x0
c00083a0:	68 5a 82 00 c0       	push   0xc000825a
c00083a5:	e8 2a 5b 00 00       	call   c000ded4 <KeRegisterAtexit(void (*)(void*), void*)>
c00083aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00083b1:	e8 8e 80 00 00       	call   c0010444 <malloc>
c00083b6:	83 c4 0c             	add    esp,0xc
c00083b9:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00083bf:	68 a0 b3 02 c0       	push   0xc002b3a0
c00083c4:	50                   	push   eax
c00083c5:	89 c3                	mov    ebx,eax
c00083c7:	e8 14 0b 00 00       	call   c0008ee0 <File::File(char const*, Process*)>
c00083cc:	83 c4 10             	add    esp,0x10
c00083cf:	85 db                	test   ebx,ebx
c00083d1:	75 10                	jne    c00083e3 <KeInitialiseSymlinks()+0x75>
c00083d3:	83 ec 0c             	sub    esp,0xc
c00083d6:	68 2f b4 02 c0       	push   0xc002b42f
c00083db:	e8 b8 84 00 00       	call   c0010898 <KePanic(char const*)>
c00083e0:	83 c4 10             	add    esp,0x10
c00083e3:	83 ec 0c             	sub    esp,0xc
c00083e6:	53                   	push   ebx
c00083e7:	e8 d6 0d 00 00       	call   c00091c2 <File::exists()>
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	84 c0                	test   al,al
c00083f1:	75 3a                	jne    c000842d <KeInitialiseSymlinks()+0xbf>
c00083f3:	52                   	push   edx
c00083f4:	52                   	push   edx
c00083f5:	6a 12                	push   0x12
c00083f7:	53                   	push   ebx
c00083f8:	e8 01 0b 00 00       	call   c0008efe <File::open(FileOpenMode)>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	85 c0                	test   eax,eax
c0008402:	74 10                	je     c0008414 <KeInitialiseSymlinks()+0xa6>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 4c b4 02 c0       	push   0xc002b44c
c000840c:	e8 87 84 00 00       	call   c0010898 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	53                   	push   ebx
c0008418:	e8 3f 0b 00 00       	call   c0008f5c <File::close()>
c000841d:	83 c4 10             	add    esp,0x10
c0008420:	85 db                	test   ebx,ebx
c0008422:	0f 84 9e 00 00 00    	je     c00084c6 <KeInitialiseSymlinks()+0x158>
c0008428:	e9 8d 00 00 00       	jmp    c00084ba <KeInitialiseSymlinks()+0x14c>
c000842d:	50                   	push   eax
c000842e:	50                   	push   eax
c000842f:	6a 01                	push   0x1
c0008431:	53                   	push   ebx
c0008432:	e8 c7 0a 00 00       	call   c0008efe <File::open(FileOpenMode)>
c0008437:	83 c4 10             	add    esp,0x10
c000843a:	85 c0                	test   eax,eax
c000843c:	74 10                	je     c000844e <KeInitialiseSymlinks()+0xe0>
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	68 69 b4 02 c0       	push   0xc002b469
c0008446:	e8 4d 84 00 00       	call   c0010898 <KePanic(char const*)>
c000844b:	83 c4 10             	add    esp,0x10
c000844e:	ff 05 00 63 03 c0    	inc    DWORD PTR ds:0xc0036300
c0008454:	83 ec 0c             	sub    esp,0xc
c0008457:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000845b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000845d:	57                   	push   edi
c000845e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0008462:	56                   	push   esi
c0008463:	6a 00                	push   0x0
c0008465:	68 00 01 00 00       	push   0x100
c000846a:	53                   	push   ebx
c000846b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000846e:	83 c4 20             	add    esp,0x20
c0008471:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0008479:	75 33                	jne    c00084ae <KeInitialiseSymlinks()+0x140>
c000847b:	83 ec 0c             	sub    esp,0xc
c000847e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008480:	57                   	push   edi
c0008481:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008485:	52                   	push   edx
c0008486:	6a 00                	push   0x0
c0008488:	6a 08                	push   0x8
c000848a:	53                   	push   ebx
c000848b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000848e:	83 c4 20             	add    esp,0x20
c0008491:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008496:	75 16                	jne    c00084ae <KeInitialiseSymlinks()+0x140>
c0008498:	89 f0                	mov    eax,esi
c000849a:	e8 c0 fd ff ff       	call   c000825f <KiGetSymlinkHash(char const*)>
c000849f:	ba 01 00 00 00       	mov    edx,0x1
c00084a4:	0f b7 c0             	movzx  eax,ax
c00084a7:	e8 79 fc ff ff       	call   c0008125 <KiSetHashInTable(unsigned short, bool)>
c00084ac:	eb a0                	jmp    c000844e <KeInitialiseSymlinks()+0xe0>
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	53                   	push   ebx
c00084b2:	e8 a5 0a 00 00       	call   c0008f5c <File::close()>
c00084b7:	83 c4 10             	add    esp,0x10
c00084ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	53                   	push   ebx
c00084c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00084c3:	83 c4 10             	add    esp,0x10
c00084c6:	81 c4 10 01 00 00    	add    esp,0x110
c00084cc:	5b                   	pop    ebx
c00084cd:	5e                   	pop    esi
c00084ce:	5f                   	pop    edi
c00084cf:	c3                   	ret    

c00084d0 <KiIsSymlinkRegistered(char const*)>:
c00084d0:	55                   	push   ebp
c00084d1:	57                   	push   edi
c00084d2:	56                   	push   esi
c00084d3:	53                   	push   ebx
c00084d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00084da:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00084e1:	89 f0                	mov    eax,esi
c00084e3:	e8 77 fd ff ff       	call   c000825f <KiGetSymlinkHash(char const*)>
c00084e8:	0f b7 c0             	movzx  eax,ax
c00084eb:	e8 1b fc ff ff       	call   c000810b <KiIsHashInTable(unsigned short)>
c00084f0:	31 d2                	xor    edx,edx
c00084f2:	88 c1                	mov    cl,al
c00084f4:	31 c0                	xor    eax,eax
c00084f6:	84 c9                	test   cl,cl
c00084f8:	0f 84 31 01 00 00    	je     c000862f <KiIsSymlinkRegistered(char const*)+0x15f>
c00084fe:	31 db                	xor    ebx,ebx
c0008500:	39 1d c0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ec0,ebx
c0008506:	7e 30                	jle    c0008538 <KiIsSymlinkRegistered(char const*)+0x68>
c0008508:	89 d8                	mov    eax,ebx
c000850a:	c1 e0 08             	shl    eax,0x8
c000850d:	51                   	push   ecx
c000850e:	05 00 3f 03 c0       	add    eax,0xc0033f00
c0008513:	51                   	push   ecx
c0008514:	50                   	push   eax
c0008515:	56                   	push   esi
c0008516:	e8 65 82 ff ff       	call   c0000780 <strcmp>
c000851b:	83 c4 10             	add    esp,0x10
c000851e:	85 c0                	test   eax,eax
c0008520:	75 13                	jne    c0008535 <KiIsSymlinkRegistered(char const*)+0x65>
c0008522:	8b 04 dd e0 3e 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffcc120]
c0008529:	8b 14 dd e4 3e 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffcc11c]
c0008530:	e9 fa 00 00 00       	jmp    c000862f <KiIsSymlinkRegistered(char const*)+0x15f>
c0008535:	43                   	inc    ebx
c0008536:	eb c8                	jmp    c0008500 <KiIsSymlinkRegistered(char const*)+0x30>
c0008538:	83 ec 0c             	sub    esp,0xc
c000853b:	68 14 01 00 00       	push   0x114
c0008540:	e8 ff 7e 00 00       	call   c0010444 <malloc>
c0008545:	83 c4 0c             	add    esp,0xc
c0008548:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000854e:	68 a0 b3 02 c0       	push   0xc002b3a0
c0008553:	50                   	push   eax
c0008554:	89 c3                	mov    ebx,eax
c0008556:	e8 85 09 00 00       	call   c0008ee0 <File::File(char const*, Process*)>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 db                	test   ebx,ebx
c0008560:	75 12                	jne    c0008574 <KiIsSymlinkRegistered(char const*)+0xa4>
c0008562:	83 ec 0c             	sub    esp,0xc
c0008565:	68 84 b4 02 c0       	push   0xc002b484
c000856a:	e8 29 83 00 00       	call   c0010898 <KePanic(char const*)>
c000856f:	83 c4 10             	add    esp,0x10
c0008572:	eb 10                	jmp    c0008584 <KiIsSymlinkRegistered(char const*)+0xb4>
c0008574:	83 ec 0c             	sub    esp,0xc
c0008577:	53                   	push   ebx
c0008578:	e8 45 0c 00 00       	call   c00091c2 <File::exists()>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	84 c0                	test   al,al
c0008582:	74 de                	je     c0008562 <KiIsSymlinkRegistered(char const*)+0x92>
c0008584:	52                   	push   edx
c0008585:	52                   	push   edx
c0008586:	6a 01                	push   0x1
c0008588:	53                   	push   ebx
c0008589:	e8 70 09 00 00       	call   c0008efe <File::open(FileOpenMode)>
c000858e:	83 c4 10             	add    esp,0x10
c0008591:	85 c0                	test   eax,eax
c0008593:	74 10                	je     c00085a5 <KiIsSymlinkRegistered(char const*)+0xd5>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	68 9f b4 02 c0       	push   0xc002b49f
c000859d:	e8 f6 82 00 00       	call   c0010898 <KePanic(char const*)>
c00085a2:	83 c4 10             	add    esp,0x10
c00085a5:	83 ec 0c             	sub    esp,0xc
c00085a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085aa:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00085ae:	55                   	push   ebp
c00085af:	8d 7c 24 20          	lea    edi,[esp+0x20]
c00085b3:	57                   	push   edi
c00085b4:	6a 00                	push   0x0
c00085b6:	68 00 01 00 00       	push   0x100
c00085bb:	53                   	push   ebx
c00085bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00085bf:	83 c4 20             	add    esp,0x20
c00085c2:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00085ca:	75 4b                	jne    c0008617 <KiIsSymlinkRegistered(char const*)+0x147>
c00085cc:	83 ec 0c             	sub    esp,0xc
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	55                   	push   ebp
c00085d2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00085d6:	52                   	push   edx
c00085d7:	6a 00                	push   0x0
c00085d9:	6a 08                	push   0x8
c00085db:	53                   	push   ebx
c00085dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00085df:	83 c4 20             	add    esp,0x20
c00085e2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00085e7:	75 2e                	jne    c0008617 <KiIsSymlinkRegistered(char const*)+0x147>
c00085e9:	50                   	push   eax
c00085ea:	50                   	push   eax
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	e8 8e 81 ff ff       	call   c0000780 <strcmp>
c00085f2:	83 c4 10             	add    esp,0x10
c00085f5:	85 c0                	test   eax,eax
c00085f7:	75 ac                	jne    c00085a5 <KiIsSymlinkRegistered(char const*)+0xd5>
c00085f9:	83 ec 0c             	sub    esp,0xc
c00085fc:	53                   	push   ebx
c00085fd:	e8 5a 09 00 00       	call   c0008f5c <File::close()>
c0008602:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008604:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008607:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000860a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000860e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008612:	83 c4 10             	add    esp,0x10
c0008615:	eb 18                	jmp    c000862f <KiIsSymlinkRegistered(char const*)+0x15f>
c0008617:	83 ec 0c             	sub    esp,0xc
c000861a:	53                   	push   ebx
c000861b:	e8 3c 09 00 00       	call   c0008f5c <File::close()>
c0008620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008622:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008625:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008628:	83 c4 10             	add    esp,0x10
c000862b:	31 c0                	xor    eax,eax
c000862d:	31 d2                	xor    edx,edx
c000862f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0008635:	5b                   	pop    ebx
c0008636:	5e                   	pop    esi
c0008637:	5f                   	pop    edi
c0008638:	5d                   	pop    ebp
c0008639:	c3                   	ret    

c000863a <KeDereferenceSymlink(char const*, char*)>:
c000863a:	55                   	push   ebp
c000863b:	57                   	push   edi
c000863c:	56                   	push   esi
c000863d:	53                   	push   ebx
c000863e:	83 ec 48             	sub    esp,0x48
c0008641:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0008645:	56                   	push   esi
c0008646:	e8 85 fe ff ff       	call   c00084d0 <KiIsSymlinkRegistered(char const*)>
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	89 c7                	mov    edi,eax
c0008650:	89 d0                	mov    eax,edx
c0008652:	09 f8                	or     eax,edi
c0008654:	75 07                	jne    c000865d <KeDereferenceSymlink(char const*, char*)+0x23>
c0008656:	31 c0                	xor    eax,eax
c0008658:	e9 7c 01 00 00       	jmp    c00087d9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000865d:	83 ec 0c             	sub    esp,0xc
c0008660:	89 d5                	mov    ebp,edx
c0008662:	68 14 01 00 00       	push   0x114
c0008667:	e8 d8 7d 00 00       	call   c0010444 <malloc>
c000866c:	83 c4 0c             	add    esp,0xc
c000866f:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0008675:	56                   	push   esi
c0008676:	50                   	push   eax
c0008677:	89 c3                	mov    ebx,eax
c0008679:	e8 62 08 00 00       	call   c0008ee0 <File::File(char const*, Process*)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	85 db                	test   ebx,ebx
c0008683:	0f 84 32 01 00 00    	je     c00087bb <KeDereferenceSymlink(char const*, char*)+0x181>
c0008689:	56                   	push   esi
c000868a:	56                   	push   esi
c000868b:	6a 01                	push   0x1
c000868d:	53                   	push   ebx
c000868e:	e8 6b 08 00 00       	call   c0008efe <File::open(FileOpenMode)>
c0008693:	83 c4 10             	add    esp,0x10
c0008696:	85 c0                	test   eax,eax
c0008698:	8b 03                	mov    eax,DWORD PTR [ebx]
c000869a:	74 09                	je     c00086a5 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000869c:	83 ec 0c             	sub    esp,0xc
c000869f:	53                   	push   ebx
c00086a0:	e9 10 01 00 00       	jmp    c00087b5 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00086a5:	83 ec 0c             	sub    esp,0xc
c00086a8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00086ac:	56                   	push   esi
c00086ad:	8d 54 24 37          	lea    edx,[esp+0x37]
c00086b1:	52                   	push   edx
c00086b2:	6a 00                	push   0x0
c00086b4:	6a 08                	push   0x8
c00086b6:	53                   	push   ebx
c00086b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00086ba:	83 c4 20             	add    esp,0x20
c00086bd:	85 c0                	test   eax,eax
c00086bf:	0f 85 e2 00 00 00    	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086c5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00086ca:	0f 85 d7 00 00 00    	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086d0:	83 ec 0c             	sub    esp,0xc
c00086d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00086d5:	56                   	push   esi
c00086d6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00086da:	52                   	push   edx
c00086db:	6a 00                	push   0x0
c00086dd:	6a 08                	push   0x8
c00086df:	53                   	push   ebx
c00086e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00086e3:	83 c4 20             	add    esp,0x20
c00086e6:	85 c0                	test   eax,eax
c00086e8:	0f 85 b9 00 00 00    	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086ee:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00086f3:	0f 85 ae 00 00 00    	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086f9:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00086fd:	0f 85 53 ff ff ff    	jne    c0008656 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0008703:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0008707:	0f 85 49 ff ff ff    	jne    c0008656 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000870d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008715:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000871d:	51                   	push   ecx
c000871e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0008722:	50                   	push   eax
c0008723:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008727:	50                   	push   eax
c0008728:	53                   	push   ebx
c0008729:	e8 d2 0a 00 00       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c000872e:	83 c4 10             	add    esp,0x10
c0008731:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008736:	75 6f                	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000873c:	31 c9                	xor    ecx,ecx
c000873e:	bf 0f 00 00 00       	mov    edi,0xf
c0008743:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008747:	39 c7                	cmp    edi,eax
c0008749:	89 cf                	mov    edi,ecx
c000874b:	19 d7                	sbb    edi,edx
c000874d:	73 58                	jae    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000874f:	83 c0 f0             	add    eax,0xfffffff0
c0008752:	bf ff 00 00 00       	mov    edi,0xff
c0008757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000875b:	83 d2 ff             	adc    edx,0xffffffff
c000875e:	39 c7                	cmp    edi,eax
c0008760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008764:	19 d1                	sbb    ecx,edx
c0008766:	72 53                	jb     c00087bb <KeDereferenceSymlink(char const*, char*)+0x181>
c0008768:	40                   	inc    eax
c0008769:	52                   	push   edx
c000876a:	50                   	push   eax
c000876b:	6a 00                	push   0x0
c000876d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0008771:	e8 7a 7d ff ff       	call   c00004f0 <memset>
c0008776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008778:	89 34 24             	mov    DWORD PTR [esp],esi
c000877b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000877f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008783:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008787:	53                   	push   ebx
c0008788:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000878b:	83 c4 20             	add    esp,0x20
c000878e:	85 c0                	test   eax,eax
c0008790:	75 15                	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008796:	89 c7                	mov    edi,eax
c0008798:	c1 ff 1f             	sar    edi,0x1f
c000879b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000879f:	75 06                	jne    c00087a7 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00087a1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00087a5:	74 19                	je     c00087c0 <KeDereferenceSymlink(char const*, char*)+0x186>
c00087a7:	83 ec 0c             	sub    esp,0xc
c00087aa:	53                   	push   ebx
c00087ab:	e8 ac 07 00 00       	call   c0008f5c <File::close()>
c00087b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00087b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	83 c8 ff             	or     eax,0xffffffff
c00087be:	eb 19                	jmp    c00087d9 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00087c0:	83 ec 0c             	sub    esp,0xc
c00087c3:	53                   	push   ebx
c00087c4:	e8 93 07 00 00       	call   c0008f5c <File::close()>
c00087c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00087cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	b8 01 00 00 00       	mov    eax,0x1
c00087d9:	83 c4 3c             	add    esp,0x3c
c00087dc:	5b                   	pop    ebx
c00087dd:	5e                   	pop    esi
c00087de:	5f                   	pop    edi
c00087df:	5d                   	pop    ebp
c00087e0:	c3                   	ret    

c00087e1 <KeCreateSymlink(char const*, char const*)>:
c00087e1:	55                   	push   ebp
c00087e2:	57                   	push   edi
c00087e3:	56                   	push   esi
c00087e4:	53                   	push   ebx
c00087e5:	83 ec 38             	sub    esp,0x38
c00087e8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00087ec:	68 14 01 00 00       	push   0x114
c00087f1:	e8 4e 7c 00 00       	call   c0010444 <malloc>
c00087f6:	6a 00                	push   0x0
c00087f8:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00087fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0008802:	89 c3                	mov    ebx,eax
c0008804:	50                   	push   eax
c0008805:	e8 d8 05 00 00       	call   c0008de2 <File::File(char const*, Process*, bool)>
c000880a:	83 c4 20             	add    esp,0x20
c000880d:	85 db                	test   ebx,ebx
c000880f:	b8 01 00 00 00       	mov    eax,0x1
c0008814:	0f 84 fb 00 00 00    	je     c0008915 <KeCreateSymlink(char const*, char const*)+0x134>
c000881a:	52                   	push   edx
c000881b:	52                   	push   edx
c000881c:	6a 12                	push   0x12
c000881e:	53                   	push   ebx
c000881f:	e8 da 06 00 00       	call   c0008efe <File::open(FileOpenMode)>
c0008824:	83 c4 10             	add    esp,0x10
c0008827:	85 c0                	test   eax,eax
c0008829:	74 0b                	je     c0008836 <KeCreateSymlink(char const*, char const*)+0x55>
c000882b:	83 ec 0c             	sub    esp,0xc
c000882e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008830:	53                   	push   ebx
c0008831:	e9 d4 00 00 00       	jmp    c000890a <KeCreateSymlink(char const*, char const*)+0x129>
c0008836:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000883a:	be ba b4 02 c0       	mov    esi,0xc002b4ba
c000883f:	b9 09 00 00 00       	mov    ecx,0x9
c0008844:	fc                   	cld    
c0008845:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008847:	83 ec 0c             	sub    esp,0xc
c000884a:	8d 74 24 10          	lea    esi,[esp+0x10]
c000884e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008850:	56                   	push   esi
c0008851:	8d 54 24 27          	lea    edx,[esp+0x27]
c0008855:	52                   	push   edx
c0008856:	6a 00                	push   0x0
c0008858:	6a 08                	push   0x8
c000885a:	53                   	push   ebx
c000885b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000885e:	83 c4 20             	add    esp,0x20
c0008861:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008866:	0f 85 90 00 00 00    	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c000886c:	85 c0                	test   eax,eax
c000886e:	0f 85 88 00 00 00    	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c0008874:	e8 07 fa ff ff       	call   c0008280 <KiCreateSymlinkID()>
c0008879:	83 ec 0c             	sub    esp,0xc
c000887c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008880:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008884:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008886:	56                   	push   esi
c0008887:	8d 54 24 18          	lea    edx,[esp+0x18]
c000888b:	52                   	push   edx
c000888c:	6a 00                	push   0x0
c000888e:	6a 08                	push   0x8
c0008890:	53                   	push   ebx
c0008891:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008894:	83 c4 20             	add    esp,0x20
c0008897:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000889c:	75 5e                	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c000889e:	85 c0                	test   eax,eax
c00088a0:	75 5a                	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c00088a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00088a4:	83 ec 0c             	sub    esp,0xc
c00088a7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00088aa:	55                   	push   ebp
c00088ab:	e8 d0 7c ff ff       	call   c0000580 <strlen>
c00088b0:	31 d2                	xor    edx,edx
c00088b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00088b5:	55                   	push   ebp
c00088b6:	52                   	push   edx
c00088b7:	50                   	push   eax
c00088b8:	53                   	push   ebx
c00088b9:	ff d7                	call   edi
c00088bb:	83 c4 14             	add    esp,0x14
c00088be:	55                   	push   ebp
c00088bf:	89 c6                	mov    esi,eax
c00088c1:	e8 ba 7c ff ff       	call   c0000580 <strlen>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00088cd:	75 2d                	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c00088cf:	85 f6                	test   esi,esi
c00088d1:	75 29                	jne    c00088fc <KeCreateSymlink(char const*, char const*)+0x11b>
c00088d3:	50                   	push   eax
c00088d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00088d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00088dc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00088e0:	e8 06 fa ff ff       	call   c00082eb <KeRegisterSymlink(char const*, unsigned long long)>
c00088e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088e8:	e8 6f 06 00 00       	call   c0008f5c <File::close()>
c00088ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00088ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00088f5:	83 c4 10             	add    esp,0x10
c00088f8:	31 c0                	xor    eax,eax
c00088fa:	eb 19                	jmp    c0008915 <KeCreateSymlink(char const*, char const*)+0x134>
c00088fc:	83 ec 0c             	sub    esp,0xc
c00088ff:	53                   	push   ebx
c0008900:	e8 57 06 00 00       	call   c0008f5c <File::close()>
c0008905:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008907:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000890a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000890d:	83 c4 10             	add    esp,0x10
c0008910:	b8 01 00 00 00       	mov    eax,0x1
c0008915:	83 c4 2c             	add    esp,0x2c
c0008918:	5b                   	pop    ebx
c0008919:	5e                   	pop    esi
c000891a:	5f                   	pop    edi
c000891b:	5d                   	pop    ebp
c000891c:	c3                   	ret    
c000891d:	90                   	nop

c000891e <File::read(unsigned long long, void*, int*)>:
c000891e:	53                   	push   ebx
c000891f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008923:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008927:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000892e:	83 f8 19             	cmp    eax,0x19
c0008931:	77 35                	ja     c0008968 <File::read(unsigned long long, void*, int*)+0x4a>
c0008933:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c000893a:	85 c0                	test   eax,eax
c000893c:	74 2a                	je     c0008968 <File::read(unsigned long long, void*, int*)+0x4a>
c000893e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008944:	85 c0                	test   eax,eax
c0008946:	74 20                	je     c0008968 <File::read(unsigned long long, void*, int*)+0x4a>
c0008948:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000894c:	74 21                	je     c000896f <File::read(unsigned long long, void*, int*)+0x51>
c000894e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008950:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008954:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000895a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000895e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008962:	5b                   	pop    ebx
c0008963:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0008966:	ff e0                	jmp    eax
c0008968:	b8 0b 00 00 00       	mov    eax,0xb
c000896d:	eb 05                	jmp    c0008974 <File::read(unsigned long long, void*, int*)+0x56>
c000896f:	b8 05 00 00 00       	mov    eax,0x5
c0008974:	5b                   	pop    ebx
c0008975:	c3                   	ret    

c0008976 <File::write(unsigned long long, void*, int*)>:
c0008976:	53                   	push   ebx
c0008977:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000897b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000897f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008986:	83 f8 19             	cmp    eax,0x19
c0008989:	77 35                	ja     c00089c0 <File::write(unsigned long long, void*, int*)+0x4a>
c000898b:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008992:	85 c0                	test   eax,eax
c0008994:	74 2a                	je     c00089c0 <File::write(unsigned long long, void*, int*)+0x4a>
c0008996:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000899c:	85 c0                	test   eax,eax
c000899e:	74 20                	je     c00089c0 <File::write(unsigned long long, void*, int*)+0x4a>
c00089a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089a4:	74 21                	je     c00089c7 <File::write(unsigned long long, void*, int*)+0x51>
c00089a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00089a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089ac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00089b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089ba:	5b                   	pop    ebx
c00089bb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00089be:	ff e0                	jmp    eax
c00089c0:	b8 0b 00 00 00       	mov    eax,0xb
c00089c5:	eb 05                	jmp    c00089cc <File::write(unsigned long long, void*, int*)+0x56>
c00089c7:	b8 05 00 00 00       	mov    eax,0x5
c00089cc:	5b                   	pop    ebx
c00089cd:	c3                   	ret    

c00089ce <Directory::read(unsigned long long, void*, int*)>:
c00089ce:	53                   	push   ebx
c00089cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00089de:	83 f8 19             	cmp    eax,0x19
c00089e1:	77 35                	ja     c0008a18 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089e3:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c00089ea:	85 c0                	test   eax,eax
c00089ec:	74 2a                	je     c0008a18 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089ee:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00089f4:	85 c0                	test   eax,eax
c00089f6:	74 20                	je     c0008a18 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089fc:	74 21                	je     c0008a1f <Directory::read(unsigned long long, void*, int*)+0x51>
c00089fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008a00:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a04:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008a0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008a12:	5b                   	pop    ebx
c0008a13:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0008a16:	ff e0                	jmp    eax
c0008a18:	b8 0b 00 00 00       	mov    eax,0xb
c0008a1d:	eb 05                	jmp    c0008a24 <Directory::read(unsigned long long, void*, int*)+0x56>
c0008a1f:	b8 05 00 00 00       	mov    eax,0x5
c0008a24:	5b                   	pop    ebx
c0008a25:	c3                   	ret    

c0008a26 <Directory::write(unsigned long long, void*, int*)>:
c0008a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a2a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0008a31:	b8 0b 00 00 00       	mov    eax,0xb
c0008a36:	83 fa 19             	cmp    edx,0x19
c0008a39:	77 18                	ja     c0008a53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008a3b:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008a42:	85 d2                	test   edx,edx
c0008a44:	74 0d                	je     c0008a53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008a46:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0008a4d:	19 c0                	sbb    eax,eax
c0008a4f:	83 e0 0a             	and    eax,0xa
c0008a52:	40                   	inc    eax
c0008a53:	c3                   	ret    

c0008a54 <File::isAtty()>:
c0008a54:	31 c0                	xor    eax,eax
c0008a56:	c3                   	ret    
c0008a57:	90                   	nop

c0008a58 <Directory::isAtty()>:
c0008a58:	31 c0                	xor    eax,eax
c0008a5a:	c3                   	ret    
c0008a5b:	90                   	nop

c0008a5c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0008a5c:	b8 0a 00 00 00       	mov    eax,0xa
c0008a61:	c3                   	ret    

c0008a62 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0008a62:	b8 0a 00 00 00       	mov    eax,0xa
c0008a67:	c3                   	ret    

c0008a68 <Filesystem::allocateSwapfile(char const*, int)>:
c0008a68:	31 c0                	xor    eax,eax
c0008a6a:	31 d2                	xor    edx,edx
c0008a6c:	c3                   	ret    
c0008a6d:	90                   	nop

c0008a6e <File::~File()>:
c0008a6e:	83 ec 0c             	sub    esp,0xc
c0008a71:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0008a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a7a:	89 10                	mov    DWORD PTR [eax],edx
c0008a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a80:	83 ec 0c             	sub    esp,0xc
c0008a83:	50                   	push   eax
c0008a84:	e8 e9 b0 00 00       	call   c0013b72 <UnixFile::~UnixFile()>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	90                   	nop
c0008a8d:	83 c4 0c             	add    esp,0xc
c0008a90:	c3                   	ret    
c0008a91:	90                   	nop

c0008a92 <File::~File()>:
c0008a92:	83 ec 0c             	sub    esp,0xc
c0008a95:	83 ec 0c             	sub    esp,0xc
c0008a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a9c:	e8 cd ff ff ff       	call   c0008a6e <File::~File()>
c0008aa1:	83 c4 10             	add    esp,0x10
c0008aa4:	83 ec 08             	sub    esp,0x8
c0008aa7:	68 14 01 00 00       	push   0x114
c0008aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab0:	e8 87 55 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	83 c4 0c             	add    esp,0xc
c0008abb:	c3                   	ret    

c0008abc <Directory::~Directory()>:
c0008abc:	83 ec 0c             	sub    esp,0xc
c0008abf:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0008ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac8:	89 10                	mov    DWORD PTR [eax],edx
c0008aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ace:	83 ec 0c             	sub    esp,0xc
c0008ad1:	50                   	push   eax
c0008ad2:	e8 9b b0 00 00       	call   c0013b72 <UnixFile::~UnixFile()>
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	90                   	nop
c0008adb:	83 c4 0c             	add    esp,0xc
c0008ade:	c3                   	ret    
c0008adf:	90                   	nop

c0008ae0 <Directory::~Directory()>:
c0008ae0:	83 ec 0c             	sub    esp,0xc
c0008ae3:	83 ec 0c             	sub    esp,0xc
c0008ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aea:	e8 cd ff ff ff       	call   c0008abc <Directory::~Directory()>
c0008aef:	83 c4 10             	add    esp,0x10
c0008af2:	83 ec 08             	sub    esp,0x8
c0008af5:	68 14 01 00 00       	push   0x114
c0008afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008afe:	e8 39 55 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c0008b03:	83 c4 10             	add    esp,0x10
c0008b06:	83 c4 0c             	add    esp,0xc
c0008b09:	c3                   	ret    

c0008b0a <Filesystem::Filesystem()>:
c0008b0a:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c0008b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b13:	89 10                	mov    DWORD PTR [eax],edx
c0008b15:	8b 15 04 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036304
c0008b1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b26:	a3 04 63 03 c0       	mov    ds:0xc0036304,eax
c0008b2b:	90                   	nop
c0008b2c:	c3                   	ret    
c0008b2d:	90                   	nop

c0008b2e <Filesystem::~Filesystem()>:
c0008b2e:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c0008b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b37:	89 10                	mov    DWORD PTR [eax],edx
c0008b39:	90                   	nop
c0008b3a:	c3                   	ret    
c0008b3b:	90                   	nop

c0008b3c <Filesystem::~Filesystem()>:
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008b43:	e8 e6 ff ff ff       	call   c0008b2e <Filesystem::~Filesystem()>
c0008b48:	83 c4 04             	add    esp,0x4
c0008b4b:	83 ec 08             	sub    esp,0x8
c0008b4e:	6a 08                	push   0x8
c0008b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b54:	e8 e3 54 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c0008b59:	83 c4 10             	add    esp,0x10
c0008b5c:	83 c4 0c             	add    esp,0xc
c0008b5f:	c3                   	ret    

c0008b60 <Fs::getcwd(Process*, char*, int)>:
c0008b60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b64:	31 c0                	xor    eax,eax
c0008b66:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0008b6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0008b6d:	7d 15                	jge    c0008b84 <Fs::getcwd(Process*, char*, int)+0x24>
c0008b6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008b73:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0008b7a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008b7d:	84 c9                	test   cl,cl
c0008b7f:	74 06                	je     c0008b87 <Fs::getcwd(Process*, char*, int)+0x27>
c0008b81:	40                   	inc    eax
c0008b82:	eb e2                	jmp    c0008b66 <Fs::getcwd(Process*, char*, int)+0x6>
c0008b84:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0008b87:	31 c0                	xor    eax,eax
c0008b89:	c3                   	ret    

c0008b8a <Fs::initVFS()>:
c0008b8a:	83 ec 18             	sub    esp,0x18
c0008b8d:	6a 08                	push   0x8
c0008b8f:	e8 b0 78 00 00       	call   c0010444 <malloc>
c0008b94:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b97:	e8 68 6b 01 00       	call   c001f704 <FAT::FAT()>
c0008b9c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008ba3:	e8 9c 78 00 00       	call   c0010444 <malloc>
c0008ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bab:	e8 82 7a 01 00       	call   c0020632 <ISO9660::ISO9660()>
c0008bb0:	83 c4 1c             	add    esp,0x1c
c0008bb3:	c3                   	ret    

c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0008bb4:	55                   	push   ebp
c0008bb5:	57                   	push   edi
c0008bb6:	56                   	push   esi
c0008bb7:	53                   	push   ebx
c0008bb8:	81 ec 20 04 00 00    	sub    esp,0x420
c0008bbe:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0008bc5:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0008bcc:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0008bd3:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0008bda:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0008bde:	68 00 04 00 00       	push   0x400
c0008be3:	6a 00                	push   0x0
c0008be5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0008be9:	57                   	push   edi
c0008bea:	e8 01 79 ff ff       	call   c00004f0 <memset>
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0008bf6:	75 0b                	jne    c0008c03 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0008bf8:	50                   	push   eax
c0008bf9:	50                   	push   eax
c0008bfa:	56                   	push   esi
c0008bfb:	57                   	push   edi
c0008bfc:	e8 4f 7a ff ff       	call   c0000650 <strcpy>
c0008c01:	eb 45                	jmp    c0008c48 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0008c03:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c06:	83 f8 2f             	cmp    eax,0x2f
c0008c09:	74 05                	je     c0008c10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0008c0b:	83 f8 5c             	cmp    eax,0x5c
c0008c0e:	75 19                	jne    c0008c29 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0008c10:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0008c13:	3c 60                	cmp    al,0x60
c0008c15:	7e 03                	jle    c0008c1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0008c17:	83 e8 20             	sub    eax,0x20
c0008c1a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0008c1e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0008c25:	50                   	push   eax
c0008c26:	50                   	push   eax
c0008c27:	eb 18                	jmp    c0008c41 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0008c29:	50                   	push   eax
c0008c2a:	50                   	push   eax
c0008c2b:	55                   	push   ebp
c0008c2c:	57                   	push   edi
c0008c2d:	e8 1e 7a ff ff       	call   c0000650 <strcpy>
c0008c32:	58                   	pop    eax
c0008c33:	5a                   	pop    edx
c0008c34:	68 b6 ce 02 c0       	push   0xc002ceb6
c0008c39:	57                   	push   edi
c0008c3a:	e8 31 7c ff ff       	call   c0000870 <strcat>
c0008c3f:	59                   	pop    ecx
c0008c40:	5d                   	pop    ebp
c0008c41:	56                   	push   esi
c0008c42:	57                   	push   edi
c0008c43:	e8 28 7c ff ff       	call   c0000870 <strcat>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0008c4f:	3c 60                	cmp    al,0x60
c0008c51:	7e 03                	jle    c0008c56 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0008c53:	83 e8 20             	sub    eax,0x20
c0008c56:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0008c5a:	be 03 00 00 00       	mov    esi,0x3
c0008c5f:	88 03                	mov    BYTE PTR [ebx],al
c0008c61:	b8 03 00 00 00       	mov    eax,0x3
c0008c66:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0008c6d:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0008c73:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0008c77:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0008c7c:	89 fa                	mov    edx,edi
c0008c7e:	0f be ea             	movsx  ebp,dl
c0008c81:	85 ed                	test   ebp,ebp
c0008c83:	0f 84 a1 00 00 00    	je     c0008d2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0008c89:	8d 56 01             	lea    edx,[esi+0x1]
c0008c8c:	83 fd 2f             	cmp    ebp,0x2f
c0008c8f:	74 05                	je     c0008c96 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0008c91:	83 fd 5c             	cmp    ebp,0x5c
c0008c94:	75 12                	jne    c0008ca8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008c96:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0008c9b:	89 c5                	mov    ebp,eax
c0008c9d:	74 09                	je     c0008ca8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008c9f:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0008ca3:	40                   	inc    eax
c0008ca4:	89 d6                	mov    esi,edx
c0008ca6:	eb cf                	jmp    c0008c77 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0008ca8:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0008cad:	89 f9                	mov    ecx,edi
c0008caf:	0f be e9             	movsx  ebp,cl
c0008cb2:	75 61                	jne    c0008d15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0008cb4:	83 fd 2e             	cmp    ebp,0x2e
c0008cb7:	75 5c                	jne    c0008d15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0008cb9:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0008cbe:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0008cc3:	74 19                	je     c0008cde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0008cc5:	83 fd 2e             	cmp    ebp,0x2e
c0008cc8:	74 55                	je     c0008d1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0008cca:	89 f2                	mov    edx,esi
c0008ccc:	42                   	inc    edx
c0008ccd:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0008cd2:	83 f9 2f             	cmp    ecx,0x2f
c0008cd5:	74 f5                	je     c0008ccc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0008cd7:	83 f9 5c             	cmp    ecx,0x5c
c0008cda:	74 f0                	je     c0008ccc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0008cdc:	eb c6                	jmp    c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008cde:	83 fd 2e             	cmp    ebp,0x2e
c0008ce1:	74 3c                	je     c0008d1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0008ce3:	83 f8 03             	cmp    eax,0x3
c0008ce6:	74 bc                	je     c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008ce8:	42                   	inc    edx
c0008ce9:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0008cee:	83 f9 2f             	cmp    ecx,0x2f
c0008cf1:	74 f5                	je     c0008ce8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0008cf3:	83 f9 5c             	cmp    ecx,0x5c
c0008cf6:	74 f0                	je     c0008ce8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0008cf8:	48                   	dec    eax
c0008cf9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0008cfd:	75 06                	jne    c0008d05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0008cff:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008d03:	eb f3                	jmp    c0008cf8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0008d05:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0008d09:	74 07                	je     c0008d12 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0008d0b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008d0f:	48                   	dec    eax
c0008d10:	eb f3                	jmp    c0008d05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0008d12:	40                   	inc    eax
c0008d13:	eb 8f                	jmp    c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008d15:	83 fd 2f             	cmp    ebp,0x2f
c0008d18:	74 8a                	je     c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008d1a:	83 fd 5c             	cmp    ebp,0x5c
c0008d1d:	74 85                	je     c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008d1f:	89 f9                	mov    ecx,edi
c0008d21:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0008d24:	40                   	inc    eax
c0008d25:	e9 7a ff ff ff       	jmp    c0008ca4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008d2a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008d2e:	83 ec 0c             	sub    esp,0xc
c0008d31:	53                   	push   ebx
c0008d32:	e8 49 78 ff ff       	call   c0000580 <strlen>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0008d3f:	74 1c                	je     c0008d5d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008d41:	83 ec 0c             	sub    esp,0xc
c0008d44:	53                   	push   ebx
c0008d45:	e8 36 78 ff ff       	call   c0000580 <strlen>
c0008d4a:	83 c4 10             	add    esp,0x10
c0008d4d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0008d52:	74 09                	je     c0008d5d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008d54:	31 ff                	xor    edi,edi
c0008d56:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008d5b:	eb 5c                	jmp    c0008db9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008d5d:	83 ec 0c             	sub    esp,0xc
c0008d60:	53                   	push   ebx
c0008d61:	e8 1a 78 ff ff       	call   c0000580 <strlen>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008d6e:	74 e4                	je     c0008d54 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008d70:	83 ec 0c             	sub    esp,0xc
c0008d73:	53                   	push   ebx
c0008d74:	e8 07 78 ff ff       	call   c0000580 <strlen>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008d81:	eb ab                	jmp    c0008d2e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0008d83:	52                   	push   edx
c0008d84:	52                   	push   edx
c0008d85:	53                   	push   ebx
c0008d86:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008d8a:	55                   	push   ebp
c0008d8b:	e8 c0 78 ff ff       	call   c0000650 <strcpy>
c0008d90:	59                   	pop    ecx
c0008d91:	58                   	pop    eax
c0008d92:	53                   	push   ebx
c0008d93:	55                   	push   ebp
c0008d94:	e8 a1 f8 ff ff       	call   c000863a <KeDereferenceSymlink(char const*, char*)>
c0008d99:	83 c4 10             	add    esp,0x10
c0008d9c:	48                   	dec    eax
c0008d9d:	75 37                	jne    c0008dd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008d9f:	50                   	push   eax
c0008da0:	53                   	push   ebx
c0008da1:	55                   	push   ebp
c0008da2:	68 c3 b4 02 c0       	push   0xc002b4c3
c0008da7:	e8 ba e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008dac:	8d 47 01             	lea    eax,[edi+0x1]
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	83 ff 14             	cmp    edi,0x14
c0008db5:	74 08                	je     c0008dbf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008db7:	89 c7                	mov    edi,eax
c0008db9:	85 f6                	test   esi,esi
c0008dbb:	75 c6                	jne    c0008d83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008dbd:	eb 17                	jmp    c0008dd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008dbf:	83 ec 0c             	sub    esp,0xc
c0008dc2:	bf 15 00 00 00       	mov    edi,0x15
c0008dc7:	68 de b4 02 c0       	push   0xc002b4de
c0008dcc:	e8 c7 7a 00 00       	call   c0010898 <KePanic(char const*)>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	eb e3                	jmp    c0008db9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008dd6:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008ddc:	5b                   	pop    ebx
c0008ddd:	5e                   	pop    esi
c0008dde:	5f                   	pop    edi
c0008ddf:	5d                   	pop    ebp
c0008de0:	c3                   	ret    
c0008de1:	90                   	nop

c0008de2 <File::File(char const*, Process*, bool)>:
c0008de2:	83 ec 1c             	sub    esp,0x1c
c0008de5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008de9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008df1:	83 ec 08             	sub    esp,0x8
c0008df4:	6a 00                	push   0x0
c0008df6:	50                   	push   eax
c0008df7:	e8 90 ab 00 00       	call   c001398c <UnixFile::UnixFile(int)>
c0008dfc:	83 c4 10             	add    esp,0x10
c0008dff:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0008e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e08:	89 10                	mov    DWORD PTR [eax],edx
c0008e0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008e0f:	85 c0                	test   eax,eax
c0008e11:	74 0f                	je     c0008e22 <File::File(char const*, Process*, bool)+0x40>
c0008e13:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0008e18:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008e1c:	74 04                	je     c0008e22 <File::File(char const*, Process*, bool)+0x40>
c0008e1e:	b0 01                	mov    al,0x1
c0008e20:	eb 02                	jmp    c0008e24 <File::File(char const*, Process*, bool)+0x42>
c0008e22:	b0 00                	mov    al,0x0
c0008e24:	0f b6 c0             	movzx  eax,al
c0008e27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008e2b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008e31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e35:	83 c2 0d             	add    edx,0xd
c0008e38:	50                   	push   eax
c0008e39:	51                   	push   ecx
c0008e3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008e3e:	52                   	push   edx
c0008e3f:	e8 70 fd ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e52:	83 c2 0d             	add    edx,0xd
c0008e55:	83 ec 04             	sub    esp,0x4
c0008e58:	50                   	push   eax
c0008e59:	52                   	push   edx
c0008e5a:	68 04 b5 02 c0       	push   0xc002b504
c0008e5f:	e8 02 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e64:	83 c4 10             	add    esp,0x10
c0008e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008e6e:	83 e8 41             	sub    eax,0x41
c0008e71:	88 c2                	mov    dl,al
c0008e73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e77:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e81:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e89:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008e8f:	0f b6 c0             	movzx  eax,al
c0008e92:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	74 3e                	je     c0008edb <File::File(char const*, Process*, bool)+0xf9>
c0008e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ea1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008ea7:	0f b6 c0             	movzx  eax,al
c0008eaa:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008eb1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	75 20                	jne    c0008edb <File::File(char const*, Process*, bool)+0xf9>
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008ec5:	0f b6 c0             	movzx  eax,al
c0008ec8:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008ecf:	83 ec 0c             	sub    esp,0xc
c0008ed2:	50                   	push   eax
c0008ed3:	e8 d4 27 00 00       	call   c000b6ac <LogicalDisk::mount()>
c0008ed8:	83 c4 10             	add    esp,0x10
c0008edb:	90                   	nop
c0008edc:	83 c4 1c             	add    esp,0x1c
c0008edf:	c3                   	ret    

c0008ee0 <File::File(char const*, Process*)>:
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	6a 01                	push   0x1
c0008ee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ef1:	e8 ec fe ff ff       	call   c0008de2 <File::File(char const*, Process*, bool)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	90                   	nop
c0008efa:	83 c4 0c             	add    esp,0xc
c0008efd:	c3                   	ret    

c0008efe <File::open(FileOpenMode)>:
c0008efe:	53                   	push   ebx
c0008eff:	b8 0b 00 00 00       	mov    eax,0xb
c0008f04:	83 ec 08             	sub    esp,0x8
c0008f07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f0b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008f12:	83 fa 19             	cmp    edx,0x19
c0008f15:	77 40                	ja     c0008f57 <File::open(FileOpenMode)+0x59>
c0008f17:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008f1e:	85 d2                	test   edx,edx
c0008f20:	74 35                	je     c0008f57 <File::open(FileOpenMode)+0x59>
c0008f22:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008f28:	85 d2                	test   edx,edx
c0008f2a:	74 2b                	je     c0008f57 <File::open(FileOpenMode)+0x59>
c0008f2c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008f30:	b8 06 00 00 00       	mov    eax,0x6
c0008f35:	75 20                	jne    c0008f57 <File::open(FileOpenMode)+0x59>
c0008f37:	8b 02                	mov    eax,DWORD PTR [edx]
c0008f39:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f43:	51                   	push   ecx
c0008f44:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008f47:	51                   	push   ecx
c0008f48:	52                   	push   edx
c0008f49:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008f4c:	83 c4 10             	add    esp,0x10
c0008f4f:	85 c0                	test   eax,eax
c0008f51:	75 04                	jne    c0008f57 <File::open(FileOpenMode)+0x59>
c0008f53:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008f57:	83 c4 08             	add    esp,0x8
c0008f5a:	5b                   	pop    ebx
c0008f5b:	c3                   	ret    

c0008f5c <File::close()>:
c0008f5c:	53                   	push   ebx
c0008f5d:	b8 0b 00 00 00       	mov    eax,0xb
c0008f62:	83 ec 08             	sub    esp,0x8
c0008f65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f69:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008f70:	83 f9 19             	cmp    ecx,0x19
c0008f73:	77 41                	ja     c0008fb6 <File::close()+0x5a>
c0008f75:	8b 1c 8d e0 6a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc9520]
c0008f7c:	85 db                	test   ebx,ebx
c0008f7e:	74 36                	je     c0008fb6 <File::close()+0x5a>
c0008f80:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008f87:	74 2d                	je     c0008fb6 <File::close()+0x5a>
c0008f89:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008f8d:	b8 05 00 00 00       	mov    eax,0x5
c0008f92:	74 22                	je     c0008fb6 <File::close()+0x5a>
c0008f94:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008f98:	8b 04 8d e0 6a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc9520]
c0008f9f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008fa5:	53                   	push   ebx
c0008fa6:	53                   	push   ebx
c0008fa7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008fa9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008faf:	50                   	push   eax
c0008fb0:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	83 c4 08             	add    esp,0x8
c0008fb9:	5b                   	pop    ebx
c0008fba:	c3                   	ret    
c0008fbb:	90                   	nop

c0008fbc <File::seek(unsigned long long)>:
c0008fbc:	56                   	push   esi
c0008fbd:	b8 0b 00 00 00       	mov    eax,0xb
c0008fc2:	53                   	push   ebx
c0008fc3:	51                   	push   ecx
c0008fc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008fc8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008fcc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fd0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008fd7:	83 fa 19             	cmp    edx,0x19
c0008fda:	77 31                	ja     c000900d <File::seek(unsigned long long)+0x51>
c0008fdc:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008fe3:	85 d2                	test   edx,edx
c0008fe5:	74 26                	je     c000900d <File::seek(unsigned long long)+0x51>
c0008fe7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008fed:	85 d2                	test   edx,edx
c0008fef:	74 1c                	je     c000900d <File::seek(unsigned long long)+0x51>
c0008ff1:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008ff5:	b8 05 00 00 00       	mov    eax,0x5
c0008ffa:	74 11                	je     c000900d <File::seek(unsigned long long)+0x51>
c0008ffc:	8b 02                	mov    eax,DWORD PTR [edx]
c0008ffe:	53                   	push   ebx
c0008fff:	51                   	push   ecx
c0009000:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0009006:	52                   	push   edx
c0009007:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000900a:	83 c4 10             	add    esp,0x10
c000900d:	5a                   	pop    edx
c000900e:	5b                   	pop    ebx
c000900f:	5e                   	pop    esi
c0009010:	c3                   	ret    
c0009011:	90                   	nop

c0009012 <File::truncate(unsigned long long)>:
c0009012:	56                   	push   esi
c0009013:	b8 0b 00 00 00       	mov    eax,0xb
c0009018:	53                   	push   ebx
c0009019:	51                   	push   ecx
c000901a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000901e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009022:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009026:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000902d:	83 fa 19             	cmp    edx,0x19
c0009030:	77 31                	ja     c0009063 <File::truncate(unsigned long long)+0x51>
c0009032:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0009039:	85 d2                	test   edx,edx
c000903b:	74 26                	je     c0009063 <File::truncate(unsigned long long)+0x51>
c000903d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0009043:	85 d2                	test   edx,edx
c0009045:	74 1c                	je     c0009063 <File::truncate(unsigned long long)+0x51>
c0009047:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000904b:	b8 05 00 00 00       	mov    eax,0x5
c0009050:	74 11                	je     c0009063 <File::truncate(unsigned long long)+0x51>
c0009052:	8b 02                	mov    eax,DWORD PTR [edx]
c0009054:	53                   	push   ebx
c0009055:	51                   	push   ecx
c0009056:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000905c:	52                   	push   edx
c000905d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0009060:	83 c4 10             	add    esp,0x10
c0009063:	5a                   	pop    edx
c0009064:	5b                   	pop    ebx
c0009065:	5e                   	pop    esi
c0009066:	c3                   	ret    
c0009067:	90                   	nop

c0009068 <File::tell(unsigned long long*)>:
c0009068:	83 ec 0c             	sub    esp,0xc
c000906b:	b8 0b 00 00 00       	mov    eax,0xb
c0009070:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009074:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000907b:	83 fa 19             	cmp    edx,0x19
c000907e:	77 34                	ja     c00090b4 <File::tell(unsigned long long*)+0x4c>
c0009080:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0009087:	85 d2                	test   edx,edx
c0009089:	74 29                	je     c00090b4 <File::tell(unsigned long long*)+0x4c>
c000908b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0009091:	85 d2                	test   edx,edx
c0009093:	74 1f                	je     c00090b4 <File::tell(unsigned long long*)+0x4c>
c0009095:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009099:	b8 05 00 00 00       	mov    eax,0x5
c000909e:	74 14                	je     c00090b4 <File::tell(unsigned long long*)+0x4c>
c00090a0:	50                   	push   eax
c00090a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00090a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00090a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00090ad:	52                   	push   edx
c00090ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00090b1:	83 c4 10             	add    esp,0x10
c00090b4:	83 c4 0c             	add    esp,0xc
c00090b7:	c3                   	ret    

c00090b8 <File::rewind()>:
c00090b8:	83 ec 10             	sub    esp,0x10
c00090bb:	6a 00                	push   0x0
c00090bd:	6a 00                	push   0x0
c00090bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c3:	e8 f4 fe ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c00090c8:	83 c4 1c             	add    esp,0x1c
c00090cb:	c3                   	ret    

c00090cc <File::unlink()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	b8 0b 00 00 00       	mov    eax,0xb
c00090d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00090df:	83 f9 19             	cmp    ecx,0x19
c00090e2:	77 2f                	ja     c0009113 <File::unlink()+0x47>
c00090e4:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00090eb:	85 c9                	test   ecx,ecx
c00090ed:	74 24                	je     c0009113 <File::unlink()+0x47>
c00090ef:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090f5:	85 c9                	test   ecx,ecx
c00090f7:	74 1a                	je     c0009113 <File::unlink()+0x47>
c00090f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00090fd:	b8 06 00 00 00       	mov    eax,0x6
c0009102:	75 0f                	jne    c0009113 <File::unlink()+0x47>
c0009104:	50                   	push   eax
c0009105:	83 c2 0d             	add    edx,0xd
c0009108:	50                   	push   eax
c0009109:	8b 01                	mov    eax,DWORD PTR [ecx]
c000910b:	52                   	push   edx
c000910c:	51                   	push   ecx
c000910d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	83 c4 0c             	add    esp,0xc
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <File::rename(char const*)>:
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	b8 0b 00 00 00       	mov    eax,0xb
c0009120:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009124:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000912b:	83 f9 19             	cmp    ecx,0x19
c000912e:	77 32                	ja     c0009162 <File::rename(char const*)+0x4a>
c0009130:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009137:	85 c9                	test   ecx,ecx
c0009139:	74 27                	je     c0009162 <File::rename(char const*)+0x4a>
c000913b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009141:	85 c9                	test   ecx,ecx
c0009143:	74 1d                	je     c0009162 <File::rename(char const*)+0x4a>
c0009145:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009149:	b8 06 00 00 00       	mov    eax,0x6
c000914e:	75 12                	jne    c0009162 <File::rename(char const*)+0x4a>
c0009150:	50                   	push   eax
c0009151:	83 c2 0d             	add    edx,0xd
c0009154:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000915a:	52                   	push   edx
c000915b:	51                   	push   ecx
c000915c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000915f:	83 c4 10             	add    esp,0x10
c0009162:	83 c4 0c             	add    esp,0xc
c0009165:	c3                   	ret    

c0009166 <File::chfatattr(unsigned char, unsigned char)>:
c0009166:	57                   	push   edi
c0009167:	b8 0b 00 00 00       	mov    eax,0xb
c000916c:	56                   	push   esi
c000916d:	53                   	push   ebx
c000916e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009172:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009176:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000917a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009181:	83 f9 19             	cmp    ecx,0x19
c0009184:	77 37                	ja     c00091bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009186:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c000918d:	85 c9                	test   ecx,ecx
c000918f:	74 2c                	je     c00091bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009191:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009197:	85 c9                	test   ecx,ecx
c0009199:	74 22                	je     c00091bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c000919b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000919f:	b8 06 00 00 00       	mov    eax,0x6
c00091a4:	75 17                	jne    c00091bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00091a6:	89 f0                	mov    eax,esi
c00091a8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00091aa:	0f b6 db             	movzx  ebx,bl
c00091ad:	0f b6 f0             	movzx  esi,al
c00091b0:	83 c2 0d             	add    edx,0xd
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	52                   	push   edx
c00091b6:	51                   	push   ecx
c00091b7:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00091ba:	83 c4 10             	add    esp,0x10
c00091bd:	5b                   	pop    ebx
c00091be:	5e                   	pop    esi
c00091bf:	5f                   	pop    edi
c00091c0:	c3                   	ret    
c00091c1:	90                   	nop

c00091c2 <File::exists()>:
c00091c2:	83 ec 0c             	sub    esp,0xc
c00091c5:	31 c0                	xor    eax,eax
c00091c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00091cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00091d2:	83 f9 19             	cmp    ecx,0x19
c00091d5:	77 24                	ja     c00091fb <File::exists()+0x39>
c00091d7:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00091de:	85 c9                	test   ecx,ecx
c00091e0:	74 19                	je     c00091fb <File::exists()+0x39>
c00091e2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00091e8:	85 c9                	test   ecx,ecx
c00091ea:	74 0f                	je     c00091fb <File::exists()+0x39>
c00091ec:	50                   	push   eax
c00091ed:	83 c2 0d             	add    edx,0xd
c00091f0:	50                   	push   eax
c00091f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00091f3:	52                   	push   edx
c00091f4:	51                   	push   ecx
c00091f5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00091f8:	83 c4 10             	add    esp,0x10
c00091fb:	83 c4 0c             	add    esp,0xc
c00091fe:	c3                   	ret    
c00091ff:	90                   	nop

c0009200 <File::stat(unsigned long long*, bool*)>:
c0009200:	56                   	push   esi
c0009201:	53                   	push   ebx
c0009202:	50                   	push   eax
c0009203:	b8 0b 00 00 00       	mov    eax,0xb
c0009208:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000920c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009210:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009214:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000921b:	83 f9 19             	cmp    ecx,0x19
c000921e:	77 3d                	ja     c000925d <File::stat(unsigned long long*, bool*)+0x5d>
c0009220:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009227:	85 c9                	test   ecx,ecx
c0009229:	74 32                	je     c000925d <File::stat(unsigned long long*, bool*)+0x5d>
c000922b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009231:	85 c9                	test   ecx,ecx
c0009233:	74 28                	je     c000925d <File::stat(unsigned long long*, bool*)+0x5d>
c0009235:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009239:	8b 01                	mov    eax,DWORD PTR [ecx]
c000923b:	74 13                	je     c0009250 <File::stat(unsigned long long*, bool*)+0x50>
c000923d:	83 ec 04             	sub    esp,0x4
c0009240:	56                   	push   esi
c0009241:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009247:	51                   	push   ecx
c0009248:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000924b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000924e:	eb 0a                	jmp    c000925a <File::stat(unsigned long long*, bool*)+0x5a>
c0009250:	53                   	push   ebx
c0009251:	83 c2 0d             	add    edx,0xd
c0009254:	56                   	push   esi
c0009255:	52                   	push   edx
c0009256:	51                   	push   ecx
c0009257:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	5a                   	pop    edx
c000925e:	5b                   	pop    ebx
c000925f:	5e                   	pop    esi
c0009260:	c3                   	ret    

c0009261 <Fs::setcwd(Process*, char*)>:
c0009261:	55                   	push   ebp
c0009262:	57                   	push   edi
c0009263:	56                   	push   esi
c0009264:	53                   	push   ebx
c0009265:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000926b:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c0009272:	6a 00                	push   0x0
c0009274:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000927a:	57                   	push   edi
c000927b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0009282:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0009286:	56                   	push   esi
c0009287:	e8 28 f9 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000928c:	89 34 24             	mov    DWORD PTR [esp],esi
c000928f:	e8 ec 72 ff ff       	call   c0000580 <strlen>
c0009294:	83 c4 10             	add    esp,0x10
c0009297:	83 f8 02             	cmp    eax,0x2
c000929a:	77 15                	ja     c00092b1 <Fs::setcwd(Process*, char*)+0x50>
c000929c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00092a1:	83 eb 41             	sub    ebx,0x41
c00092a4:	8b 04 9d e0 6a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9520]
c00092ab:	85 c0                	test   eax,eax
c00092ad:	75 1c                	jne    c00092cb <Fs::setcwd(Process*, char*)+0x6a>
c00092af:	eb 2f                	jmp    c00092e0 <Fs::setcwd(Process*, char*)+0x7f>
c00092b1:	83 ec 0c             	sub    esp,0xc
c00092b4:	56                   	push   esi
c00092b5:	e8 c6 72 ff ff       	call   c0000580 <strlen>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	83 f8 03             	cmp    eax,0x3
c00092c0:	75 57                	jne    c0009319 <Fs::setcwd(Process*, char*)+0xb8>
c00092c2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00092c7:	75 50                	jne    c0009319 <Fs::setcwd(Process*, char*)+0xb8>
c00092c9:	eb d1                	jmp    c000929c <Fs::setcwd(Process*, char*)+0x3b>
c00092cb:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00092d2:	75 0c                	jne    c00092e0 <Fs::setcwd(Process*, char*)+0x7f>
c00092d4:	83 ec 0c             	sub    esp,0xc
c00092d7:	50                   	push   eax
c00092d8:	e8 cf 23 00 00       	call   c000b6ac <LogicalDisk::mount()>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	83 fb 19             	cmp    ebx,0x19
c00092e3:	b8 03 00 00 00       	mov    eax,0x3
c00092e8:	0f 87 c6 00 00 00    	ja     c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c00092ee:	8b 14 9d e0 6a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc9520]
c00092f5:	b8 05 00 00 00       	mov    eax,0x5
c00092fa:	85 d2                	test   edx,edx
c00092fc:	0f 84 b2 00 00 00    	je     c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009302:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0009309:	b8 06 00 00 00       	mov    eax,0x6
c000930e:	0f 85 92 00 00 00    	jne    c00093a6 <Fs::setcwd(Process*, char*)+0x145>
c0009314:	e9 9b 00 00 00       	jmp    c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009319:	83 ec 0c             	sub    esp,0xc
c000931c:	68 14 01 00 00       	push   0x114
c0009321:	e8 1e 71 00 00       	call   c0010444 <malloc>
c0009326:	83 c4 0c             	add    esp,0xc
c0009329:	55                   	push   ebp
c000932a:	56                   	push   esi
c000932b:	50                   	push   eax
c000932c:	89 c3                	mov    ebx,eax
c000932e:	e8 ad fb ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0009333:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009338:	83 c4 0c             	add    esp,0xc
c000933b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000933f:	50                   	push   eax
c0009340:	8d 44 24 10          	lea    eax,[esp+0x10]
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 b5 fe ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	83 f8 02             	cmp    eax,0x2
c0009351:	74 27                	je     c000937a <Fs::setcwd(Process*, char*)+0x119>
c0009353:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0009358:	75 1c                	jne    c0009376 <Fs::setcwd(Process*, char*)+0x115>
c000935a:	85 db                	test   ebx,ebx
c000935c:	b8 02 00 00 00       	mov    eax,0x2
c0009361:	74 51                	je     c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009363:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009365:	83 ec 0c             	sub    esp,0xc
c0009368:	53                   	push   ebx
c0009369:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	b8 02 00 00 00       	mov    eax,0x2
c0009374:	eb 3e                	jmp    c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009376:	85 c0                	test   eax,eax
c0009378:	74 1c                	je     c0009396 <Fs::setcwd(Process*, char*)+0x135>
c000937a:	85 db                	test   ebx,ebx
c000937c:	b8 01 00 00 00       	mov    eax,0x1
c0009381:	74 31                	je     c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009383:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009385:	83 ec 0c             	sub    esp,0xc
c0009388:	53                   	push   ebx
c0009389:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000938c:	83 c4 10             	add    esp,0x10
c000938f:	b8 01 00 00 00       	mov    eax,0x1
c0009394:	eb 1e                	jmp    c00093b4 <Fs::setcwd(Process*, char*)+0x153>
c0009396:	85 db                	test   ebx,ebx
c0009398:	74 0c                	je     c00093a6 <Fs::setcwd(Process*, char*)+0x145>
c000939a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	53                   	push   ebx
c00093a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00093a3:	83 c4 10             	add    esp,0x10
c00093a6:	50                   	push   eax
c00093a7:	50                   	push   eax
c00093a8:	56                   	push   esi
c00093a9:	57                   	push   edi
c00093aa:	e8 a1 72 ff ff       	call   c0000650 <strcpy>
c00093af:	83 c4 10             	add    esp,0x10
c00093b2:	31 c0                	xor    eax,eax
c00093b4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00093ba:	5b                   	pop    ebx
c00093bb:	5e                   	pop    esi
c00093bc:	5f                   	pop    edi
c00093bd:	5d                   	pop    ebp
c00093be:	c3                   	ret    
c00093bf:	90                   	nop

c00093c0 <Directory::Directory(char const*, Process*)>:
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c7:	83 ec 08             	sub    esp,0x8
c00093ca:	6a 00                	push   0x0
c00093cc:	50                   	push   eax
c00093cd:	e8 ba a5 00 00       	call   c001398c <UnixFile::UnixFile(int)>
c00093d2:	83 c4 10             	add    esp,0x10
c00093d5:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c00093da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093de:	89 10                	mov    DWORD PTR [eax],edx
c00093e0:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00093e5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00093e9:	0f 95 c0             	setne  al
c00093ec:	0f b6 c0             	movzx  eax,al
c00093ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00093f3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00093f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00093fd:	83 c2 0d             	add    edx,0xd
c0009400:	50                   	push   eax
c0009401:	51                   	push   ecx
c0009402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009406:	52                   	push   edx
c0009407:	e8 a8 f7 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000940c:	83 c4 10             	add    esp,0x10
c000940f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009413:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009416:	83 e8 41             	sub    eax,0x41
c0009419:	88 c2                	mov    dl,al
c000941b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000941f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009429:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000942d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009431:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009437:	0f b6 c0             	movzx  eax,al
c000943a:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0009441:	85 c0                	test   eax,eax
c0009443:	74 3e                	je     c0009483 <Directory::Directory(char const*, Process*)+0xc3>
c0009445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009449:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000944f:	0f b6 c0             	movzx  eax,al
c0009452:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0009459:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000945f:	85 c0                	test   eax,eax
c0009461:	75 20                	jne    c0009483 <Directory::Directory(char const*, Process*)+0xc3>
c0009463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009467:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000946d:	0f b6 c0             	movzx  eax,al
c0009470:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	50                   	push   eax
c000947b:	e8 2c 22 00 00       	call   c000b6ac <LogicalDisk::mount()>
c0009480:	83 c4 10             	add    esp,0x10
c0009483:	90                   	nop
c0009484:	83 c4 0c             	add    esp,0xc
c0009487:	c3                   	ret    

c0009488 <Directory::open()>:
c0009488:	53                   	push   ebx
c0009489:	b8 0b 00 00 00       	mov    eax,0xb
c000948e:	83 ec 08             	sub    esp,0x8
c0009491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009495:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000949c:	83 fa 19             	cmp    edx,0x19
c000949f:	77 3d                	ja     c00094de <Directory::open()+0x56>
c00094a1:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c00094a8:	85 d2                	test   edx,edx
c00094aa:	74 32                	je     c00094de <Directory::open()+0x56>
c00094ac:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00094b2:	85 d2                	test   edx,edx
c00094b4:	74 28                	je     c00094de <Directory::open()+0x56>
c00094b6:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00094ba:	b8 06 00 00 00       	mov    eax,0x6
c00094bf:	75 1d                	jne    c00094de <Directory::open()+0x56>
c00094c1:	50                   	push   eax
c00094c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00094c4:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00094ca:	51                   	push   ecx
c00094cb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00094ce:	51                   	push   ecx
c00094cf:	52                   	push   edx
c00094d0:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	75 04                	jne    c00094de <Directory::open()+0x56>
c00094da:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00094de:	83 c4 08             	add    esp,0x8
c00094e1:	5b                   	pop    ebx
c00094e2:	c3                   	ret    
c00094e3:	90                   	nop

c00094e4 <Directory::close()>:
c00094e4:	53                   	push   ebx
c00094e5:	b8 0b 00 00 00       	mov    eax,0xb
c00094ea:	83 ec 08             	sub    esp,0x8
c00094ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00094f1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00094f8:	83 f9 19             	cmp    ecx,0x19
c00094fb:	77 41                	ja     c000953e <Directory::close()+0x5a>
c00094fd:	8b 1c 8d e0 6a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc9520]
c0009504:	85 db                	test   ebx,ebx
c0009506:	74 36                	je     c000953e <Directory::close()+0x5a>
c0009508:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000950f:	74 2d                	je     c000953e <Directory::close()+0x5a>
c0009511:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009515:	b8 05 00 00 00       	mov    eax,0x5
c000951a:	74 22                	je     c000953e <Directory::close()+0x5a>
c000951c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0009520:	8b 04 8d e0 6a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc9520]
c0009527:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000952d:	53                   	push   ebx
c000952e:	53                   	push   ebx
c000952f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009531:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009537:	50                   	push   eax
c0009538:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	83 c4 08             	add    esp,0x8
c0009541:	5b                   	pop    ebx
c0009542:	c3                   	ret    
c0009543:	90                   	nop

c0009544 <Directory::unlink()>:
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	b8 0b 00 00 00       	mov    eax,0xb
c000954c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009550:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009557:	83 f9 19             	cmp    ecx,0x19
c000955a:	77 2f                	ja     c000958b <Directory::unlink()+0x47>
c000955c:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009563:	85 c9                	test   ecx,ecx
c0009565:	74 24                	je     c000958b <Directory::unlink()+0x47>
c0009567:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000956d:	85 c9                	test   ecx,ecx
c000956f:	74 1a                	je     c000958b <Directory::unlink()+0x47>
c0009571:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009575:	b8 06 00 00 00       	mov    eax,0x6
c000957a:	75 0f                	jne    c000958b <Directory::unlink()+0x47>
c000957c:	50                   	push   eax
c000957d:	83 c2 0d             	add    edx,0xd
c0009580:	50                   	push   eax
c0009581:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009583:	52                   	push   edx
c0009584:	51                   	push   ecx
c0009585:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    
c000958f:	90                   	nop

c0009590 <Directory::rename(char const*)>:
c0009590:	83 ec 0c             	sub    esp,0xc
c0009593:	b8 0b 00 00 00       	mov    eax,0xb
c0009598:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000959c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00095a3:	83 f9 19             	cmp    ecx,0x19
c00095a6:	77 32                	ja     c00095da <Directory::rename(char const*)+0x4a>
c00095a8:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00095af:	85 c9                	test   ecx,ecx
c00095b1:	74 27                	je     c00095da <Directory::rename(char const*)+0x4a>
c00095b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00095b9:	85 c9                	test   ecx,ecx
c00095bb:	74 1d                	je     c00095da <Directory::rename(char const*)+0x4a>
c00095bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00095c1:	b8 06 00 00 00       	mov    eax,0x6
c00095c6:	75 12                	jne    c00095da <Directory::rename(char const*)+0x4a>
c00095c8:	50                   	push   eax
c00095c9:	83 c2 0d             	add    edx,0xd
c00095cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00095ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095d2:	52                   	push   edx
c00095d3:	51                   	push   ecx
c00095d4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	83 c4 0c             	add    esp,0xc
c00095dd:	c3                   	ret    

c00095de <Directory::exists()>:
c00095de:	83 ec 0c             	sub    esp,0xc
c00095e1:	31 c0                	xor    eax,eax
c00095e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00095ee:	83 f9 19             	cmp    ecx,0x19
c00095f1:	77 24                	ja     c0009617 <Directory::exists()+0x39>
c00095f3:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00095fa:	85 c9                	test   ecx,ecx
c00095fc:	74 19                	je     c0009617 <Directory::exists()+0x39>
c00095fe:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009604:	85 c9                	test   ecx,ecx
c0009606:	74 0f                	je     c0009617 <Directory::exists()+0x39>
c0009608:	50                   	push   eax
c0009609:	83 c2 0d             	add    edx,0xd
c000960c:	50                   	push   eax
c000960d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000960f:	52                   	push   edx
c0009610:	51                   	push   ecx
c0009611:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0009614:	83 c4 10             	add    esp,0x10
c0009617:	83 c4 0c             	add    esp,0xc
c000961a:	c3                   	ret    
c000961b:	90                   	nop

c000961c <Directory::read(dirent*)>:
c000961c:	83 ec 1c             	sub    esp,0x1c
c000961f:	b8 0b 00 00 00       	mov    eax,0xb
c0009624:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009628:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000962f:	83 f9 19             	cmp    ecx,0x19
c0009632:	77 30                	ja     c0009664 <Directory::read(dirent*)+0x48>
c0009634:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c000963b:	85 c9                	test   ecx,ecx
c000963d:	74 25                	je     c0009664 <Directory::read(dirent*)+0x48>
c000963f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0009646:	74 1c                	je     c0009664 <Directory::read(dirent*)+0x48>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	8b 02                	mov    eax,DWORD PTR [edx]
c000964d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0009651:	51                   	push   ecx
c0009652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009656:	6a 00                	push   0x0
c0009658:	68 10 01 00 00       	push   0x110
c000965d:	52                   	push   edx
c000965e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009661:	83 c4 20             	add    esp,0x20
c0009664:	83 c4 1c             	add    esp,0x1c
c0009667:	c3                   	ret    

c0009668 <Directory::create()>:
c0009668:	83 ec 0c             	sub    esp,0xc
c000966b:	b8 0b 00 00 00       	mov    eax,0xb
c0009670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009674:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000967b:	83 f9 19             	cmp    ecx,0x19
c000967e:	77 2f                	ja     c00096af <Directory::create()+0x47>
c0009680:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009687:	85 c9                	test   ecx,ecx
c0009689:	74 24                	je     c00096af <Directory::create()+0x47>
c000968b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009691:	85 c9                	test   ecx,ecx
c0009693:	74 1a                	je     c00096af <Directory::create()+0x47>
c0009695:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009699:	b8 06 00 00 00       	mov    eax,0x6
c000969e:	75 0f                	jne    c00096af <Directory::create()+0x47>
c00096a0:	50                   	push   eax
c00096a1:	83 c2 0d             	add    edx,0xd
c00096a4:	50                   	push   eax
c00096a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00096a7:	52                   	push   edx
c00096a8:	51                   	push   ecx
c00096a9:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	83 c4 0c             	add    esp,0xc
c00096b2:	c3                   	ret    
c00096b3:	90                   	nop

c00096b4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00096b4:	b8 0a 00 00 00       	mov    eax,0xa
c00096b9:	c3                   	ret    
c00096ba:	66 90                	xchg   ax,ax

c00096bc <Bus::Bus(char const*)>:
c00096bc:	83 ec 0c             	sub    esp,0xc
c00096bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096c3:	83 ec 08             	sub    esp,0x8
c00096c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096ca:	50                   	push   eax
c00096cb:	e8 e0 11 00 00       	call   c000a8b0 <Device::Device(char const*)>
c00096d0:	83 c4 10             	add    esp,0x10
c00096d3:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00096d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096dc:	89 10                	mov    DWORD PTR [eax],edx
c00096de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096e2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00096ec:	90                   	nop
c00096ed:	83 c4 0c             	add    esp,0xc
c00096f0:	c3                   	ret    
c00096f1:	90                   	nop
c00096f2:	66 90                	xchg   ax,ax

c00096f4 <Bus::~Bus()>:
c00096f4:	83 ec 0c             	sub    esp,0xc
c00096f7:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00096fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009700:	89 10                	mov    DWORD PTR [eax],edx
c0009702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009706:	83 ec 0c             	sub    esp,0xc
c0009709:	50                   	push   eax
c000970a:	e8 41 0f 00 00       	call   c000a650 <Device::~Device()>
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	90                   	nop
c0009713:	83 c4 0c             	add    esp,0xc
c0009716:	c3                   	ret    
c0009717:	90                   	nop

c0009718 <Bus::~Bus()>:
c0009718:	83 ec 0c             	sub    esp,0xc
c000971b:	83 ec 0c             	sub    esp,0xc
c000971e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009722:	e8 cd ff ff ff       	call   c00096f4 <Bus::~Bus()>
c0009727:	83 c4 10             	add    esp,0x10
c000972a:	83 ec 08             	sub    esp,0x8
c000972d:	68 58 01 00 00       	push   0x158
c0009732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009736:	e8 01 49 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	83 c4 0c             	add    esp,0xc
c0009741:	c3                   	ret    

c0009742 <KeBeepThread(void*)>:
c0009742:	83 ec 0c             	sub    esp,0xc
c0009745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009749:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0009750:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0009757:	75 01                	jne    c000975a <KeBeepThread(void*)+0x18>
c0009759:	fb                   	sti    
c000975a:	6b c0 0a             	imul   eax,eax,0xa
c000975d:	52                   	push   edx
c000975e:	52                   	push   edx
c000975f:	99                   	cdq    
c0009760:	52                   	push   edx
c0009761:	50                   	push   eax
c0009762:	e8 ad de 00 00       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0009767:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000976e:	e8 96 1f 01 00       	call   c001b709 <HalMakeBeep(int)>
c0009773:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000977b:	83 c4 1c             	add    esp,0x1c
c000977e:	e9 5d dd 00 00       	jmp    c00174e0 <blockTask(TaskState)>

c0009783 <KeBeep(int, int, bool)>:
c0009783:	56                   	push   esi
c0009784:	53                   	push   ebx
c0009785:	83 ec 10             	sub    esp,0x10
c0009788:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000978c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009794:	e8 70 1f 01 00       	call   c001b709 <HalMakeBeep(int)>
c0009799:	89 f0                	mov    eax,esi
c000979b:	83 c4 10             	add    esp,0x10
c000979e:	84 c0                	test   al,al
c00097a0:	74 1f                	je     c00097c1 <KeBeep(int, int, bool)+0x3e>
c00097a2:	50                   	push   eax
c00097a3:	50                   	push   eax
c00097a4:	6b c3 0a             	imul   eax,ebx,0xa
c00097a7:	99                   	cdq    
c00097a8:	52                   	push   edx
c00097a9:	50                   	push   eax
c00097aa:	e8 65 de 00 00       	call   c0017614 <milliTenthSleep(unsigned long long)>
c00097af:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00097b7:	83 c4 14             	add    esp,0x14
c00097ba:	5b                   	pop    ebx
c00097bb:	5e                   	pop    esi
c00097bc:	e9 48 1f 01 00       	jmp    c001b709 <HalMakeBeep(int)>
c00097c1:	68 e6 00 00 00       	push   0xe6
c00097c6:	53                   	push   ebx
c00097c7:	68 42 97 00 c0       	push   0xc0009742
c00097cc:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00097d2:	e8 95 d9 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c00097d7:	83 c4 14             	add    esp,0x14
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	c3                   	ret    
c00097dd:	90                   	nop

c00097de <KeLoadTimezoneStrings()>:
c00097de:	55                   	push   ebp
c00097df:	89 e5                	mov    ebp,esp
c00097e1:	53                   	push   ebx
c00097e2:	83 ec 44             	sub    esp,0x44
c00097e5:	c6 05 20 63 03 c0 01 	mov    BYTE PTR ds:0xc0036320,0x1
c00097ec:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00097f3:	83 ec 0c             	sub    esp,0xc
c00097f6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00097f9:	e8 46 6c 00 00       	call   c0010444 <malloc>
c00097fe:	83 c4 10             	add    esp,0x10
c0009801:	89 c3                	mov    ebx,eax
c0009803:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0009808:	83 ec 04             	sub    esp,0x4
c000980b:	50                   	push   eax
c000980c:	68 00 b6 02 c0       	push   0xc002b600
c0009811:	53                   	push   ebx
c0009812:	e8 c9 f6 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0009817:	83 c4 10             	add    esp,0x10
c000981a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c000981d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009821:	75 10                	jne    c0009833 <KeLoadTimezoneStrings()+0x55>
c0009823:	83 ec 0c             	sub    esp,0xc
c0009826:	68 1f b6 02 c0       	push   0xc002b61f
c000982b:	e8 68 70 00 00       	call   c0010898 <KePanic(char const*)>
c0009830:	83 c4 10             	add    esp,0x10
c0009833:	83 ec 08             	sub    esp,0x8
c0009836:	6a 01                	push   0x1
c0009838:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000983b:	e8 be f6 ff ff       	call   c0008efe <File::open(FileOpenMode)>
c0009840:	83 c4 10             	add    esp,0x10
c0009843:	83 ec 04             	sub    esp,0x4
c0009846:	8d 45 cf             	lea    eax,[ebp-0x31]
c0009849:	50                   	push   eax
c000984a:	8d 45 d0             	lea    eax,[ebp-0x30]
c000984d:	50                   	push   eax
c000984e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009851:	e8 aa f9 ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c0009856:	83 c4 10             	add    esp,0x10
c0009859:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000985c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000985f:	83 ec 08             	sub    esp,0x8
c0009862:	50                   	push   eax
c0009863:	68 35 b6 02 c0       	push   0xc002b635
c0009868:	e8 f9 d6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000986d:	83 c4 10             	add    esp,0x10
c0009870:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009873:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009876:	83 c0 01             	add    eax,0x1
c0009879:	83 ec 0c             	sub    esp,0xc
c000987c:	50                   	push   eax
c000987d:	e8 c2 6b 00 00       	call   c0010444 <malloc>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009888:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000988b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000988e:	83 ec 04             	sub    esp,0x4
c0009891:	50                   	push   eax
c0009892:	6a 00                	push   0x0
c0009894:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009897:	e8 54 6c ff ff       	call   c00004f0 <memset>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a4:	83 c0 0c             	add    eax,0xc
c00098a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00098a9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00098ac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00098af:	83 ec 0c             	sub    esp,0xc
c00098b2:	8d 5d c8             	lea    ebx,[ebp-0x38]
c00098b5:	53                   	push   ebx
c00098b6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00098b9:	52                   	push   edx
c00098ba:	50                   	push   eax
c00098bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098be:	ff d1                	call   ecx
c00098c0:	83 c4 20             	add    esp,0x20
c00098c3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00098c6:	83 ec 08             	sub    esp,0x8
c00098c9:	50                   	push   eax
c00098ca:	68 45 b6 02 c0       	push   0xc002b645
c00098cf:	e8 92 d6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00098d4:	83 c4 10             	add    esp,0x10
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098dd:	e8 7a f6 ff ff       	call   c0008f5c <File::close()>
c00098e2:	83 c4 10             	add    esp,0x10
c00098e5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00098e9:	74 15                	je     c0009900 <KeLoadTimezoneStrings()+0x122>
c00098eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00098f0:	83 c0 08             	add    eax,0x8
c00098f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00098f5:	83 ec 0c             	sub    esp,0xc
c00098f8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098fb:	ff d0                	call   eax
c00098fd:	83 c4 10             	add    esp,0x10
c0009900:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009907:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c000990e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0009915:	7f 3a                	jg     c0009951 <KeLoadTimezoneStrings()+0x173>
c0009917:	83 ec 0c             	sub    esp,0xc
c000991a:	6a 78                	push   0x78
c000991c:	e8 23 6b 00 00       	call   c0010444 <malloc>
c0009921:	83 c4 10             	add    esp,0x10
c0009924:	89 c2                	mov    edx,eax
c0009926:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009929:	89 14 85 40 63 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9cc0],edx
c0009930:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009933:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c000993a:	83 ec 08             	sub    esp,0x8
c000993d:	68 4e b6 02 c0       	push   0xc002b64e
c0009942:	50                   	push   eax
c0009943:	e8 08 6d ff ff       	call   c0000650 <strcpy>
c0009948:	83 c4 10             	add    esp,0x10
c000994b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c000994f:	eb bd                	jmp    c000990e <KeLoadTimezoneStrings()+0x130>
c0009951:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009958:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000995b:	8d 50 01             	lea    edx,[eax+0x1]
c000995e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009961:	89 c2                	mov    edx,eax
c0009963:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009966:	01 d0                	add    eax,edx
c0009968:	8a 00                	mov    al,BYTE PTR [eax]
c000996a:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c000996d:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009971:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009974:	0f be c0             	movsx  eax,al
c0009977:	83 f8 0d             	cmp    eax,0xd
c000997a:	0f 84 82 01 00 00    	je     c0009b02 <KeLoadTimezoneStrings()+0x324>
c0009980:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009983:	0f be c0             	movsx  eax,al
c0009986:	83 f8 09             	cmp    eax,0x9
c0009989:	75 44                	jne    c00099cf <KeLoadTimezoneStrings()+0x1f1>
c000998b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000998e:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009995:	83 ec 0c             	sub    esp,0xc
c0009998:	50                   	push   eax
c0009999:	e8 e2 6b ff ff       	call   c0000580 <strlen>
c000999e:	83 c4 10             	add    esp,0x10
c00099a1:	83 f8 08             	cmp    eax,0x8
c00099a4:	0f 96 c0             	setbe  al
c00099a7:	0f b6 c0             	movzx  eax,al
c00099aa:	85 c0                	test   eax,eax
c00099ac:	0f 84 56 01 00 00    	je     c0009b08 <KeLoadTimezoneStrings()+0x32a>
c00099b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00099b5:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c00099bc:	83 ec 08             	sub    esp,0x8
c00099bf:	68 4e b6 02 c0       	push   0xc002b64e
c00099c4:	50                   	push   eax
c00099c5:	e8 a6 6e ff ff       	call   c0000870 <strcat>
c00099ca:	83 c4 10             	add    esp,0x10
c00099cd:	eb bc                	jmp    c000998b <KeLoadTimezoneStrings()+0x1ad>
c00099cf:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00099d2:	0f be c0             	movsx  eax,al
c00099d5:	83 f8 0a             	cmp    eax,0xa
c00099d8:	0f 85 9b 00 00 00    	jne    c0009a79 <KeLoadTimezoneStrings()+0x29b>
c00099de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00099e1:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c00099e8:	83 ec 0c             	sub    esp,0xc
c00099eb:	50                   	push   eax
c00099ec:	e8 8f 6b ff ff       	call   c0000580 <strlen>
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	83 f8 35             	cmp    eax,0x35
c00099f7:	0f 96 c0             	setbe  al
c00099fa:	0f b6 c0             	movzx  eax,al
c00099fd:	85 c0                	test   eax,eax
c00099ff:	74 1d                	je     c0009a1e <KeLoadTimezoneStrings()+0x240>
c0009a01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a04:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009a0b:	83 ec 08             	sub    esp,0x8
c0009a0e:	68 4e b6 02 c0       	push   0xc002b64e
c0009a13:	50                   	push   eax
c0009a14:	e8 57 6e ff ff       	call   c0000870 <strcat>
c0009a19:	83 c4 10             	add    esp,0x10
c0009a1c:	eb c0                	jmp    c00099de <KeLoadTimezoneStrings()+0x200>
c0009a1e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009a22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009a25:	89 c2                	mov    edx,eax
c0009a27:	c1 fa 1f             	sar    edx,0x1f
c0009a2a:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0009a2d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009a30:	39 c8                	cmp    eax,ecx
c0009a32:	89 d0                	mov    eax,edx
c0009a34:	19 d8                	sbb    eax,ebx
c0009a36:	0f 82 d2 00 00 00    	jb     c0009b0e <KeLoadTimezoneStrings()+0x330>
c0009a3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a3f:	a3 24 63 03 c0       	mov    ds:0xc0036324,eax
c0009a44:	83 ec 08             	sub    esp,0x8
c0009a47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a4a:	68 50 b6 02 c0       	push   0xc002b650
c0009a4f:	e8 12 d5 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009a5c:	83 ec 08             	sub    esp,0x8
c0009a5f:	50                   	push   eax
c0009a60:	68 65 b6 02 c0       	push   0xc002b665
c0009a65:	e8 fc d4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009a74:	e9 9b 00 00 00       	jmp    c0009b14 <KeLoadTimezoneStrings()+0x336>
c0009a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a7c:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009a83:	83 ec 0c             	sub    esp,0xc
c0009a86:	50                   	push   eax
c0009a87:	e8 f4 6a ff ff       	call   c0000580 <strlen>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	83 f8 31             	cmp    eax,0x31
c0009a92:	0f 96 c0             	setbe  al
c0009a95:	0f b6 c0             	movzx  eax,al
c0009a98:	85 c0                	test   eax,eax
c0009a9a:	74 1f                	je     c0009abb <KeLoadTimezoneStrings()+0x2dd>
c0009a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a9f:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009aa6:	83 ec 08             	sub    esp,0x8
c0009aa9:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0009aac:	52                   	push   edx
c0009aad:	50                   	push   eax
c0009aae:	e8 bd 6d ff ff       	call   c0000870 <strcat>
c0009ab3:	83 c4 10             	add    esp,0x10
c0009ab6:	e9 9d fe ff ff       	jmp    c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009abb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009abe:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009ac5:	83 ec 0c             	sub    esp,0xc
c0009ac8:	50                   	push   eax
c0009ac9:	e8 b2 6a ff ff       	call   c0000580 <strlen>
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	83 f8 32             	cmp    eax,0x32
c0009ad4:	0f 94 c0             	sete   al
c0009ad7:	0f b6 c0             	movzx  eax,al
c0009ada:	85 c0                	test   eax,eax
c0009adc:	0f 84 76 fe ff ff    	je     c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ae5:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009aec:	83 ec 08             	sub    esp,0x8
c0009aef:	68 69 b6 02 c0       	push   0xc002b669
c0009af4:	50                   	push   eax
c0009af5:	e8 76 6d ff ff       	call   c0000870 <strcat>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	e9 56 fe ff ff       	jmp    c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009b02:	90                   	nop
c0009b03:	e9 50 fe ff ff       	jmp    c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009b08:	90                   	nop
c0009b09:	e9 4a fe ff ff       	jmp    c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009b0e:	90                   	nop
c0009b0f:	e9 44 fe ff ff       	jmp    c0009958 <KeLoadTimezoneStrings()+0x17a>
c0009b14:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b19:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009b1c:	7d 49                	jge    c0009b67 <KeLoadTimezoneStrings()+0x389>
c0009b1e:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b23:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009b26:	0f 9c c0             	setl   al
c0009b29:	0f b6 d0             	movzx  edx,al
c0009b2c:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b31:	52                   	push   edx
c0009b32:	50                   	push   eax
c0009b33:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009b36:	68 6e b6 02 c0       	push   0xc002b66e
c0009b3b:	e8 26 d4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009b40:	83 c4 10             	add    esp,0x10
c0009b43:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009b46:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009b4d:	83 ec 04             	sub    esp,0x4
c0009b50:	50                   	push   eax
c0009b51:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009b54:	68 7c b6 02 c0       	push   0xc002b67c
c0009b59:	e8 08 d4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009b5e:	83 c4 10             	add    esp,0x10
c0009b61:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009b65:	eb ad                	jmp    c0009b14 <KeLoadTimezoneStrings()+0x336>
c0009b67:	90                   	nop
c0009b68:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009b6b:	c9                   	leave  
c0009b6c:	c3                   	ret    

c0009b6d <KeGetTimezoneStringFromID(int)>:
c0009b6d:	55                   	push   ebp
c0009b6e:	89 e5                	mov    ebp,esp
c0009b70:	83 ec 08             	sub    esp,0x8
c0009b73:	83 ec 08             	sub    esp,0x8
c0009b76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b79:	68 85 b6 02 c0       	push   0xc002b685
c0009b7e:	e8 e3 d3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	a0 20 63 03 c0       	mov    al,ds:0xc0036320
c0009b8b:	83 f0 01             	xor    eax,0x1
c0009b8e:	0f b6 c0             	movzx  eax,al
c0009b91:	85 c0                	test   eax,eax
c0009b93:	74 15                	je     c0009baa <KeGetTimezoneStringFromID(int)+0x3d>
c0009b95:	e8 44 fc ff ff       	call   c00097de <KeLoadTimezoneStrings()>
c0009b9a:	83 ec 0c             	sub    esp,0xc
c0009b9d:	68 a3 b6 02 c0       	push   0xc002b6a3
c0009ba2:	e8 bf d3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009ba7:	83 c4 10             	add    esp,0x10
c0009baa:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009baf:	83 ec 04             	sub    esp,0x4
c0009bb2:	50                   	push   eax
c0009bb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009bb6:	68 b4 b6 02 c0       	push   0xc002b6b4
c0009bbb:	e8 a6 d3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009bc0:	83 c4 10             	add    esp,0x10
c0009bc3:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009bc8:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0009bcb:	7d 06                	jge    c0009bd3 <KeGetTimezoneStringFromID(int)+0x66>
c0009bcd:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0009bd1:	79 07                	jns    c0009bda <KeGetTimezoneStringFromID(int)+0x6d>
c0009bd3:	b8 00 00 00 00       	mov    eax,0x0
c0009bd8:	eb 2e                	jmp    c0009c08 <KeGetTimezoneStringFromID(int)+0x9b>
c0009bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bdd:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009be4:	83 c0 01             	add    eax,0x1
c0009be7:	83 ec 04             	sub    esp,0x4
c0009bea:	50                   	push   eax
c0009beb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009bee:	68 c7 b6 02 c0       	push   0xc002b6c7
c0009bf3:	e8 6e d3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009bf8:	83 c4 10             	add    esp,0x10
c0009bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bfe:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009c05:	83 c0 01             	add    eax,0x1
c0009c08:	c9                   	leave  
c0009c09:	c3                   	ret    

c0009c0a <KeUpdateTimezone(char const*)>:
c0009c0a:	55                   	push   ebp
c0009c0b:	89 e5                	mov    ebp,esp
c0009c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c10:	8a 00                	mov    al,BYTE PTR [eax]
c0009c12:	0f be c0             	movsx  eax,al
c0009c15:	83 f8 2b             	cmp    eax,0x2b
c0009c18:	74 11                	je     c0009c2b <KeUpdateTimezone(char const*)+0x21>
c0009c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c1d:	8a 00                	mov    al,BYTE PTR [eax]
c0009c1f:	0f be c0             	movsx  eax,al
c0009c22:	83 f8 2d             	cmp    eax,0x2d
c0009c25:	0f 85 be 00 00 00    	jne    c0009ce9 <KeUpdateTimezone(char const*)+0xdf>
c0009c2b:	c6 05 60 66 03 c0 00 	mov    BYTE PTR ds:0xc0036660,0x0
c0009c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c35:	83 c0 02             	add    eax,0x2
c0009c38:	8a 00                	mov    al,BYTE PTR [eax]
c0009c3a:	0f be c0             	movsx  eax,al
c0009c3d:	83 f8 2e             	cmp    eax,0x2e
c0009c40:	75 10                	jne    c0009c52 <KeUpdateTimezone(char const*)+0x48>
c0009c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c45:	83 c0 03             	add    eax,0x3
c0009c48:	8a 00                	mov    al,BYTE PTR [eax]
c0009c4a:	0f be c0             	movsx  eax,al
c0009c4d:	83 f8 35             	cmp    eax,0x35
c0009c50:	74 20                	je     c0009c72 <KeUpdateTimezone(char const*)+0x68>
c0009c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c55:	83 c0 03             	add    eax,0x3
c0009c58:	8a 00                	mov    al,BYTE PTR [eax]
c0009c5a:	0f be c0             	movsx  eax,al
c0009c5d:	83 f8 2e             	cmp    eax,0x2e
c0009c60:	75 14                	jne    c0009c76 <KeUpdateTimezone(char const*)+0x6c>
c0009c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c65:	83 c0 04             	add    eax,0x4
c0009c68:	8a 00                	mov    al,BYTE PTR [eax]
c0009c6a:	0f be c0             	movsx  eax,al
c0009c6d:	83 f8 35             	cmp    eax,0x35
c0009c70:	75 04                	jne    c0009c76 <KeUpdateTimezone(char const*)+0x6c>
c0009c72:	b0 01                	mov    al,0x1
c0009c74:	eb 02                	jmp    c0009c78 <KeUpdateTimezone(char const*)+0x6e>
c0009c76:	b0 00                	mov    al,0x0
c0009c78:	a2 61 66 03 c0       	mov    ds:0xc0036661,al
c0009c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c80:	83 c0 01             	add    eax,0x1
c0009c83:	8a 00                	mov    al,BYTE PTR [eax]
c0009c85:	0f be c0             	movsx  eax,al
c0009c88:	83 e8 30             	sub    eax,0x30
c0009c8b:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c93:	83 c0 03             	add    eax,0x3
c0009c96:	8a 00                	mov    al,BYTE PTR [eax]
c0009c98:	0f be c0             	movsx  eax,al
c0009c9b:	83 f8 2e             	cmp    eax,0x2e
c0009c9e:	75 2e                	jne    c0009cce <KeUpdateTimezone(char const*)+0xc4>
c0009ca0:	8b 15 64 66 03 c0    	mov    edx,DWORD PTR ds:0xc0036664
c0009ca6:	89 d0                	mov    eax,edx
c0009ca8:	c1 e0 02             	shl    eax,0x2
c0009cab:	01 d0                	add    eax,edx
c0009cad:	d1 e0                	shl    eax,1
c0009caf:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb7:	83 c0 02             	add    eax,0x2
c0009cba:	8a 00                	mov    al,BYTE PTR [eax]
c0009cbc:	0f be c0             	movsx  eax,al
c0009cbf:	8d 50 d0             	lea    edx,[eax-0x30]
c0009cc2:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009cc7:	01 d0                	add    eax,edx
c0009cc9:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cd1:	8a 00                	mov    al,BYTE PTR [eax]
c0009cd3:	0f be c0             	movsx  eax,al
c0009cd6:	83 f8 2d             	cmp    eax,0x2d
c0009cd9:	75 26                	jne    c0009d01 <KeUpdateTimezone(char const*)+0xf7>
c0009cdb:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009ce0:	f7 d8                	neg    eax
c0009ce2:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009ce7:	eb 18                	jmp    c0009d01 <KeUpdateTimezone(char const*)+0xf7>
c0009ce9:	c6 05 60 66 03 c0 00 	mov    BYTE PTR ds:0xc0036660,0x0
c0009cf0:	c6 05 61 66 03 c0 00 	mov    BYTE PTR ds:0xc0036661,0x0
c0009cf7:	c7 05 64 66 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036664,0x0
c0009d01:	90                   	nop
c0009d02:	5d                   	pop    ebp
c0009d03:	c3                   	ret    

c0009d04 <KeSetTimezone(char const*)>:
c0009d04:	55                   	push   ebp
c0009d05:	89 e5                	mov    ebp,esp
c0009d07:	83 ec 18             	sub    esp,0x18
c0009d0a:	83 ec 0c             	sub    esp,0xc
c0009d0d:	68 d4 b6 02 c0       	push   0xc002b6d4
c0009d12:	e8 79 43 00 00       	call   c000e090 <CmOpen(char const*)>
c0009d17:	83 c4 10             	add    esp,0x10
c0009d1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009d1d:	83 ec 08             	sub    esp,0x8
c0009d20:	68 f9 b6 02 c0       	push   0xc002b6f9
c0009d25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d28:	e8 5e 4f 00 00       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009d2d:	83 c4 10             	add    esp,0x10
c0009d30:	83 ec 04             	sub    esp,0x4
c0009d33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d36:	50                   	push   eax
c0009d37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d3a:	e8 23 48 00 00       	call   c000e562 <CmSetString(Reghive_Tag*, int, char const*)>
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	83 ec 0c             	sub    esp,0xc
c0009d45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d48:	e8 61 44 00 00       	call   c000e1ae <CmClose(Reghive_Tag*)>
c0009d4d:	83 c4 10             	add    esp,0x10
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d56:	e8 af fe ff ff       	call   c0009c0a <KeUpdateTimezone(char const*)>
c0009d5b:	83 c4 10             	add    esp,0x10
c0009d5e:	90                   	nop
c0009d5f:	c9                   	leave  
c0009d60:	c3                   	ret    

c0009d61 <KeSetTimezone(int)>:
c0009d61:	55                   	push   ebp
c0009d62:	89 e5                	mov    ebp,esp
c0009d64:	83 ec 18             	sub    esp,0x18
c0009d67:	83 ec 0c             	sub    esp,0xc
c0009d6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d6d:	e8 fb fd ff ff       	call   c0009b6d <KeGetTimezoneStringFromID(int)>
c0009d72:	83 c4 10             	add    esp,0x10
c0009d75:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009d78:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009d7c:	74 12                	je     c0009d90 <KeSetTimezone(int)+0x2f>
c0009d7e:	83 ec 0c             	sub    esp,0xc
c0009d81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d84:	e8 7b ff ff ff       	call   c0009d04 <KeSetTimezone(char const*)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	b0 01                	mov    al,0x1
c0009d8e:	eb 02                	jmp    c0009d92 <KeSetTimezone(int)+0x31>
c0009d90:	b0 00                	mov    al,0x0
c0009d92:	c9                   	leave  
c0009d93:	c3                   	ret    

c0009d94 <KeLoadTimezone()>:
c0009d94:	55                   	push   ebp
c0009d95:	89 e5                	mov    ebp,esp
c0009d97:	81 ec 68 02 00 00    	sub    esp,0x268
c0009d9d:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009da4:	83 ec 0c             	sub    esp,0xc
c0009da7:	68 d4 b6 02 c0       	push   0xc002b6d4
c0009dac:	e8 df 42 00 00       	call   c000e090 <CmOpen(char const*)>
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009db7:	83 ec 08             	sub    esp,0x8
c0009dba:	68 f9 b6 02 c0       	push   0xc002b6f9
c0009dbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009dc2:	e8 c4 4e 00 00       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009dcd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009dd1:	7e 18                	jle    c0009deb <KeLoadTimezone()+0x57>
c0009dd3:	83 ec 04             	sub    esp,0x4
c0009dd6:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009ddc:	50                   	push   eax
c0009ddd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009de0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009de3:	e8 18 44 00 00       	call   c000e200 <CmGetString(Reghive_Tag*, int, char*)>
c0009de8:	83 c4 10             	add    esp,0x10
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009df1:	e8 b8 43 00 00       	call   c000e1ae <CmClose(Reghive_Tag*)>
c0009df6:	83 c4 10             	add    esp,0x10
c0009df9:	83 ec 0c             	sub    esp,0xc
c0009dfc:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009e02:	50                   	push   eax
c0009e03:	e8 02 fe ff ff       	call   c0009c0a <KeUpdateTimezone(char const*)>
c0009e08:	83 c4 10             	add    esp,0x10
c0009e0b:	90                   	nop
c0009e0c:	c9                   	leave  
c0009e0d:	c3                   	ret    

c0009e0e <Clock::Clock(char const*)>:
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e15:	83 ec 08             	sub    esp,0x8
c0009e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e1c:	50                   	push   eax
c0009e1d:	e8 8e 0a 00 00       	call   c000a8b0 <Device::Device(char const*)>
c0009e22:	83 c4 10             	add    esp,0x10
c0009e25:	ba 58 b7 02 c0       	mov    edx,0xc002b758
c0009e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e2e:	89 10                	mov    DWORD PTR [eax],edx
c0009e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e34:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009e3e:	90                   	nop
c0009e3f:	83 c4 0c             	add    esp,0xc
c0009e42:	c3                   	ret    
c0009e43:	90                   	nop

c0009e44 <Clock::~Clock()>:
c0009e44:	83 ec 0c             	sub    esp,0xc
c0009e47:	ba 58 b7 02 c0       	mov    edx,0xc002b758
c0009e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e50:	89 10                	mov    DWORD PTR [eax],edx
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	83 ec 0c             	sub    esp,0xc
c0009e59:	50                   	push   eax
c0009e5a:	e8 f1 07 00 00       	call   c000a650 <Device::~Device()>
c0009e5f:	83 c4 10             	add    esp,0x10
c0009e62:	90                   	nop
c0009e63:	83 c4 0c             	add    esp,0xc
c0009e66:	c3                   	ret    
c0009e67:	90                   	nop

c0009e68 <Clock::~Clock()>:
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	83 ec 0c             	sub    esp,0xc
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	e8 cd ff ff ff       	call   c0009e44 <Clock::~Clock()>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	83 ec 08             	sub    esp,0x8
c0009e7d:	68 58 01 00 00       	push   0x158
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	e8 b1 41 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c0009e8b:	83 c4 10             	add    esp,0x10
c0009e8e:	83 c4 0c             	add    esp,0xc
c0009e91:	c3                   	ret    

c0009e92 <Clock::timeInSecondsLocal()>:
c0009e92:	55                   	push   ebp
c0009e93:	89 e5                	mov    ebp,esp
c0009e95:	53                   	push   ebx
c0009e96:	83 ec 04             	sub    esp,0x4
c0009e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e9e:	83 c0 24             	add    eax,0x24
c0009ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ea3:	83 ec 0c             	sub    esp,0xc
c0009ea6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009ea9:	ff d0                	call   eax
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	89 c1                	mov    ecx,eax
c0009eb0:	89 d3                	mov    ebx,edx
c0009eb2:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c0009eb7:	0f b6 d0             	movzx  edx,al
c0009eba:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009ebf:	01 d0                	add    eax,edx
c0009ec1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009ec7:	89 c2                	mov    edx,eax
c0009ec9:	c1 fa 1f             	sar    edx,0x1f
c0009ecc:	01 c1                	add    ecx,eax
c0009ece:	11 d3                	adc    ebx,edx
c0009ed0:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c0009ed5:	0f b6 c0             	movzx  eax,al
c0009ed8:	85 c0                	test   eax,eax
c0009eda:	74 0c                	je     c0009ee8 <Clock::timeInSecondsLocal()+0x56>
c0009edc:	b8 08 07 00 00       	mov    eax,0x708
c0009ee1:	ba 00 00 00 00       	mov    edx,0x0
c0009ee6:	eb 0a                	jmp    c0009ef2 <Clock::timeInSecondsLocal()+0x60>
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	ba 00 00 00 00       	mov    edx,0x0
c0009ef2:	01 c8                	add    eax,ecx
c0009ef4:	11 da                	adc    edx,ebx
c0009ef6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009ef9:	c9                   	leave  
c0009efa:	c3                   	ret    
c0009efb:	90                   	nop

c0009efc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009efc:	55                   	push   ebp
c0009efd:	89 e5                	mov    ebp,esp
c0009eff:	56                   	push   esi
c0009f00:	53                   	push   ebx
c0009f01:	83 ec 10             	sub    esp,0x10
c0009f04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009f07:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009f0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009f0d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f15:	83 c0 2c             	add    eax,0x2c
c0009f18:	8b 30                	mov    esi,DWORD PTR [eax]
c0009f1a:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c0009f1f:	0f b6 d0             	movzx  edx,al
c0009f22:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009f27:	01 d0                	add    eax,edx
c0009f29:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009f2f:	89 c2                	mov    edx,eax
c0009f31:	c1 fa 1f             	sar    edx,0x1f
c0009f34:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f37:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009f3a:	29 c1                	sub    ecx,eax
c0009f3c:	19 d3                	sbb    ebx,edx
c0009f3e:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c0009f43:	0f b6 c0             	movzx  eax,al
c0009f46:	85 c0                	test   eax,eax
c0009f48:	74 0c                	je     c0009f56 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009f4a:	b8 08 07 00 00       	mov    eax,0x708
c0009f4f:	ba 00 00 00 00       	mov    edx,0x0
c0009f54:	eb 0a                	jmp    c0009f60 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c0009f56:	b8 00 00 00 00       	mov    eax,0x0
c0009f5b:	ba 00 00 00 00       	mov    edx,0x0
c0009f60:	29 c1                	sub    ecx,eax
c0009f62:	19 d3                	sbb    ebx,edx
c0009f64:	89 c8                	mov    eax,ecx
c0009f66:	89 da                	mov    edx,ebx
c0009f68:	83 ec 04             	sub    esp,0x4
c0009f6b:	52                   	push   edx
c0009f6c:	50                   	push   eax
c0009f6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009f70:	ff d6                	call   esi
c0009f72:	83 c4 10             	add    esp,0x10
c0009f75:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009f78:	5b                   	pop    ebx
c0009f79:	5e                   	pop    esi
c0009f7a:	5d                   	pop    ebp
c0009f7b:	c3                   	ret    

c0009f7c <KeDatetimeToSeconds(datetime_t)>:
c0009f7c:	55                   	push   ebp
c0009f7d:	89 e5                	mov    ebp,esp
c0009f7f:	53                   	push   ebx
c0009f80:	83 ec 24             	sub    esp,0x24
c0009f83:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009f87:	2d 6c 07 00 00       	sub    eax,0x76c
c0009f8c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009f90:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009f93:	83 e8 01             	sub    eax,0x1
c0009f96:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009f99:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009fa0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009fa7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009fae:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009fb5:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009fb8:	0f b6 c8             	movzx  ecx,al
c0009fbb:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009fbe:	0f b6 d0             	movzx  edx,al
c0009fc1:	89 d0                	mov    eax,edx
c0009fc3:	c1 e0 04             	shl    eax,0x4
c0009fc6:	29 d0                	sub    eax,edx
c0009fc8:	c1 e0 02             	shl    eax,0x2
c0009fcb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009fce:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009fd1:	0f b6 c0             	movzx  eax,al
c0009fd4:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009fda:	01 d0                	add    eax,edx
c0009fdc:	89 c2                	mov    edx,eax
c0009fde:	c1 fa 1f             	sar    edx,0x1f
c0009fe1:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009fe4:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009fe7:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009fea:	0f b6 c0             	movzx  eax,al
c0009fed:	83 e8 01             	sub    eax,0x1
c0009ff0:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009ff3:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009ff6:	0f b6 c0             	movzx  eax,al
c0009ff9:	8b 04 85 20 b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd48e0]
c000a000:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000a003:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000a006:	0f b6 c0             	movzx  eax,al
c000a009:	83 f8 01             	cmp    eax,0x1
c000a00c:	76 7c                	jbe    c000a08a <KeDatetimeToSeconds(datetime_t)+0x10e>
c000a00e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a012:	0f b7 c0             	movzx  eax,ax
c000a015:	83 e0 03             	and    eax,0x3
c000a018:	85 c0                	test   eax,eax
c000a01a:	75 6e                	jne    c000a08a <KeDatetimeToSeconds(datetime_t)+0x10e>
c000a01c:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a020:	0f b7 c8             	movzx  ecx,ax
c000a023:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a028:	89 c8                	mov    eax,ecx
c000a02a:	f7 e2                	mul    edx
c000a02c:	c1 ea 05             	shr    edx,0x5
c000a02f:	89 d0                	mov    eax,edx
c000a031:	c1 e0 02             	shl    eax,0x2
c000a034:	01 d0                	add    eax,edx
c000a036:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a03d:	01 d0                	add    eax,edx
c000a03f:	c1 e0 02             	shl    eax,0x2
c000a042:	29 c1                	sub    ecx,eax
c000a044:	89 c8                	mov    eax,ecx
c000a046:	0f b7 c0             	movzx  eax,ax
c000a049:	85 c0                	test   eax,eax
c000a04b:	75 39                	jne    c000a086 <KeDatetimeToSeconds(datetime_t)+0x10a>
c000a04d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a051:	0f b7 c0             	movzx  eax,ax
c000a054:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a05a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a05f:	f7 e9                	imul   ecx
c000a061:	c1 fa 07             	sar    edx,0x7
c000a064:	89 c8                	mov    eax,ecx
c000a066:	c1 f8 1f             	sar    eax,0x1f
c000a069:	29 c2                	sub    edx,eax
c000a06b:	89 d0                	mov    eax,edx
c000a06d:	c1 e0 02             	shl    eax,0x2
c000a070:	01 d0                	add    eax,edx
c000a072:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a079:	01 d0                	add    eax,edx
c000a07b:	c1 e0 04             	shl    eax,0x4
c000a07e:	29 c1                	sub    ecx,eax
c000a080:	89 ca                	mov    edx,ecx
c000a082:	85 d2                	test   edx,edx
c000a084:	75 04                	jne    c000a08a <KeDatetimeToSeconds(datetime_t)+0x10e>
c000a086:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a08a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a08e:	0f b7 c0             	movzx  eax,ax
c000a091:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a094:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a097:	83 f8 46             	cmp    eax,0x46
c000a09a:	0f 9f c0             	setg   al
c000a09d:	0f b6 c0             	movzx  eax,al
c000a0a0:	85 c0                	test   eax,eax
c000a0a2:	0f 84 a4 00 00 00    	je     c000a14c <KeDatetimeToSeconds(datetime_t)+0x1d0>
c000a0a8:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000a0af:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a0b3:	0f b7 d0             	movzx  edx,ax
c000a0b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0b9:	39 c2                	cmp    edx,eax
c000a0bb:	0f 8e b8 01 00 00    	jle    c000a279 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c000a0c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0c4:	83 e0 03             	and    eax,0x3
c000a0c7:	85 c0                	test   eax,eax
c000a0c9:	75 6b                	jne    c000a136 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000a0cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a0ce:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a0d3:	f7 e9                	imul   ecx
c000a0d5:	c1 fa 05             	sar    edx,0x5
c000a0d8:	89 c8                	mov    eax,ecx
c000a0da:	c1 f8 1f             	sar    eax,0x1f
c000a0dd:	29 c2                	sub    edx,eax
c000a0df:	89 d0                	mov    eax,edx
c000a0e1:	c1 e0 02             	shl    eax,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0ed:	01 d0                	add    eax,edx
c000a0ef:	c1 e0 02             	shl    eax,0x2
c000a0f2:	29 c1                	sub    ecx,eax
c000a0f4:	89 ca                	mov    edx,ecx
c000a0f6:	85 d2                	test   edx,edx
c000a0f8:	75 35                	jne    c000a12f <KeDatetimeToSeconds(datetime_t)+0x1b3>
c000a0fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0fd:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a103:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a108:	f7 e9                	imul   ecx
c000a10a:	c1 fa 07             	sar    edx,0x7
c000a10d:	89 c8                	mov    eax,ecx
c000a10f:	c1 f8 1f             	sar    eax,0x1f
c000a112:	29 c2                	sub    edx,eax
c000a114:	89 d0                	mov    eax,edx
c000a116:	c1 e0 02             	shl    eax,0x2
c000a119:	01 d0                	add    eax,edx
c000a11b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a122:	01 d0                	add    eax,edx
c000a124:	c1 e0 04             	shl    eax,0x4
c000a127:	29 c1                	sub    ecx,eax
c000a129:	89 ca                	mov    edx,ecx
c000a12b:	85 d2                	test   edx,edx
c000a12d:	75 07                	jne    c000a136 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000a12f:	b8 6e 01 00 00       	mov    eax,0x16e
c000a134:	eb 05                	jmp    c000a13b <KeDatetimeToSeconds(datetime_t)+0x1bf>
c000a136:	b8 6d 01 00 00       	mov    eax,0x16d
c000a13b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000a13e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a141:	83 c0 01             	add    eax,0x1
c000a144:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a147:	e9 63 ff ff ff       	jmp    c000a0af <KeDatetimeToSeconds(datetime_t)+0x133>
c000a14c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a14f:	83 f8 45             	cmp    eax,0x45
c000a152:	0f 8f 21 01 00 00    	jg     c000a279 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c000a158:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c000a15f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a163:	0f b7 d0             	movzx  edx,ax
c000a166:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a169:	39 c2                	cmp    edx,eax
c000a16b:	0f 8d 8b 00 00 00    	jge    c000a1fc <KeDatetimeToSeconds(datetime_t)+0x280>
c000a171:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a174:	83 e0 03             	and    eax,0x3
c000a177:	85 c0                	test   eax,eax
c000a179:	75 6b                	jne    c000a1e6 <KeDatetimeToSeconds(datetime_t)+0x26a>
c000a17b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a17e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a183:	f7 e9                	imul   ecx
c000a185:	c1 fa 05             	sar    edx,0x5
c000a188:	89 c8                	mov    eax,ecx
c000a18a:	c1 f8 1f             	sar    eax,0x1f
c000a18d:	29 c2                	sub    edx,eax
c000a18f:	89 d0                	mov    eax,edx
c000a191:	c1 e0 02             	shl    eax,0x2
c000a194:	01 d0                	add    eax,edx
c000a196:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a19d:	01 d0                	add    eax,edx
c000a19f:	c1 e0 02             	shl    eax,0x2
c000a1a2:	29 c1                	sub    ecx,eax
c000a1a4:	89 ca                	mov    edx,ecx
c000a1a6:	85 d2                	test   edx,edx
c000a1a8:	75 35                	jne    c000a1df <KeDatetimeToSeconds(datetime_t)+0x263>
c000a1aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a1ad:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a1b3:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a1b8:	f7 e9                	imul   ecx
c000a1ba:	c1 fa 07             	sar    edx,0x7
c000a1bd:	89 c8                	mov    eax,ecx
c000a1bf:	c1 f8 1f             	sar    eax,0x1f
c000a1c2:	29 c2                	sub    edx,eax
c000a1c4:	89 d0                	mov    eax,edx
c000a1c6:	c1 e0 02             	shl    eax,0x2
c000a1c9:	01 d0                	add    eax,edx
c000a1cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a1d2:	01 d0                	add    eax,edx
c000a1d4:	c1 e0 04             	shl    eax,0x4
c000a1d7:	29 c1                	sub    ecx,eax
c000a1d9:	89 ca                	mov    edx,ecx
c000a1db:	85 d2                	test   edx,edx
c000a1dd:	75 07                	jne    c000a1e6 <KeDatetimeToSeconds(datetime_t)+0x26a>
c000a1df:	b8 6e 01 00 00       	mov    eax,0x16e
c000a1e4:	eb 05                	jmp    c000a1eb <KeDatetimeToSeconds(datetime_t)+0x26f>
c000a1e6:	b8 6d 01 00 00       	mov    eax,0x16d
c000a1eb:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000a1ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a1f1:	83 e8 01             	sub    eax,0x1
c000a1f4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a1f7:	e9 63 ff ff ff       	jmp    c000a15f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000a1fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a1ff:	83 e0 03             	and    eax,0x3
c000a202:	85 c0                	test   eax,eax
c000a204:	75 6b                	jne    c000a271 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c000a206:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a209:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a20e:	f7 e9                	imul   ecx
c000a210:	c1 fa 05             	sar    edx,0x5
c000a213:	89 c8                	mov    eax,ecx
c000a215:	c1 f8 1f             	sar    eax,0x1f
c000a218:	29 c2                	sub    edx,eax
c000a21a:	89 d0                	mov    eax,edx
c000a21c:	c1 e0 02             	shl    eax,0x2
c000a21f:	01 d0                	add    eax,edx
c000a221:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a228:	01 d0                	add    eax,edx
c000a22a:	c1 e0 02             	shl    eax,0x2
c000a22d:	29 c1                	sub    ecx,eax
c000a22f:	89 ca                	mov    edx,ecx
c000a231:	85 d2                	test   edx,edx
c000a233:	75 35                	jne    c000a26a <KeDatetimeToSeconds(datetime_t)+0x2ee>
c000a235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a238:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a23e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a243:	f7 e9                	imul   ecx
c000a245:	c1 fa 07             	sar    edx,0x7
c000a248:	89 c8                	mov    eax,ecx
c000a24a:	c1 f8 1f             	sar    eax,0x1f
c000a24d:	29 c2                	sub    edx,eax
c000a24f:	89 d0                	mov    eax,edx
c000a251:	c1 e0 02             	shl    eax,0x2
c000a254:	01 d0                	add    eax,edx
c000a256:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a25d:	01 d0                	add    eax,edx
c000a25f:	c1 e0 04             	shl    eax,0x4
c000a262:	29 c1                	sub    ecx,eax
c000a264:	89 ca                	mov    edx,ecx
c000a266:	85 d2                	test   edx,edx
c000a268:	75 07                	jne    c000a271 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c000a26a:	b8 6e 01 00 00       	mov    eax,0x16e
c000a26f:	eb 05                	jmp    c000a276 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c000a271:	b8 6d 01 00 00       	mov    eax,0x16d
c000a276:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000a279:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a27c:	89 c2                	mov    edx,eax
c000a27e:	c1 fa 1f             	sar    edx,0x1f
c000a281:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000a287:	6b c8 00             	imul   ecx,eax,0x0
c000a28a:	01 d9                	add    ecx,ebx
c000a28c:	bb 80 51 01 00       	mov    ebx,0x15180
c000a291:	f7 e3                	mul    ebx
c000a293:	01 d1                	add    ecx,edx
c000a295:	89 ca                	mov    edx,ecx
c000a297:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000a29a:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000a29d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a2a0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a2a3:	83 c4 24             	add    esp,0x24
c000a2a6:	5b                   	pop    ebx
c000a2a7:	5d                   	pop    ebp
c000a2a8:	c3                   	ret    
c000a2a9:	90                   	nop

c000a2aa <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000a2aa:	55                   	push   ebp
c000a2ab:	89 e5                	mov    ebp,esp
c000a2ad:	56                   	push   esi
c000a2ae:	53                   	push   ebx
c000a2af:	83 ec 20             	sub    esp,0x20
c000a2b2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000a2b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a2b8:	e8 bf fc ff ff       	call   c0009f7c <KeDatetimeToSeconds(datetime_t)>
c000a2bd:	83 c4 08             	add    esp,0x8
c000a2c0:	89 c3                	mov    ebx,eax
c000a2c2:	89 d6                	mov    esi,edx
c000a2c4:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c000a2c9:	0f b6 d0             	movzx  edx,al
c000a2cc:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c000a2d1:	01 d0                	add    eax,edx
c000a2d3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a2d9:	89 c2                	mov    edx,eax
c000a2db:	c1 fa 1f             	sar    edx,0x1f
c000a2de:	29 c3                	sub    ebx,eax
c000a2e0:	19 d6                	sbb    esi,edx
c000a2e2:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c000a2e7:	0f b6 c0             	movzx  eax,al
c000a2ea:	85 c0                	test   eax,eax
c000a2ec:	74 0c                	je     c000a2fa <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c000a2ee:	b8 08 07 00 00       	mov    eax,0x708
c000a2f3:	ba 00 00 00 00       	mov    edx,0x0
c000a2f8:	eb 0a                	jmp    c000a304 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c000a2fa:	b8 00 00 00 00       	mov    eax,0x0
c000a2ff:	ba 00 00 00 00       	mov    edx,0x0
c000a304:	29 c3                	sub    ebx,eax
c000a306:	19 d6                	sbb    esi,edx
c000a308:	89 d8                	mov    eax,ebx
c000a30a:	89 f2                	mov    edx,esi
c000a30c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a30f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000a312:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a315:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a318:	89 d0                	mov    eax,edx
c000a31a:	31 d2                	xor    edx,edx
c000a31c:	89 c3                	mov    ebx,eax
c000a31e:	89 d6                	mov    esi,edx
c000a320:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a323:	80 e5 ff             	and    ch,0xff
c000a326:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c000a329:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a32c:	83 e1 00             	and    ecx,0x0
c000a32f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000a332:	83 ec 0c             	sub    esp,0xc
c000a335:	56                   	push   esi
c000a336:	53                   	push   ebx
c000a337:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000a33a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000a33d:	68 0e b7 02 c0       	push   0xc002b70e
c000a342:	e8 1f cc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a347:	83 c4 20             	add    esp,0x20
c000a34a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a34f:	83 c0 2c             	add    eax,0x2c
c000a352:	8b 00                	mov    eax,DWORD PTR [eax]
c000a354:	83 ec 04             	sub    esp,0x4
c000a357:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000a35a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a35d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000a360:	ff d0                	call   eax
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	8d 65 f8             	lea    esp,[ebp-0x8]
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	5d                   	pop    ebp
c000a36b:	c3                   	ret    

c000a36c <KeSecondsToDatetime(unsigned long long)>:
c000a36c:	55                   	push   ebp
c000a36d:	89 e5                	mov    ebp,esp
c000a36f:	83 ec 48             	sub    esp,0x48
c000a372:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a375:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c000a378:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a37b:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000a37e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a381:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a384:	6a 00                	push   0x0
c000a386:	68 80 51 01 00       	push   0x15180
c000a38b:	52                   	push   edx
c000a38c:	50                   	push   eax
c000a38d:	e8 82 a8 01 00       	call   c0024c14 <__udivdi3>
c000a392:	83 c4 10             	add    esp,0x10
c000a395:	05 6c fa 0a 00       	add    eax,0xafa6c
c000a39a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a39d:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a3a0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a3a3:	6a 00                	push   0x0
c000a3a5:	68 80 51 01 00       	push   0x15180
c000a3aa:	52                   	push   edx
c000a3ab:	50                   	push   eax
c000a3ac:	e8 63 a9 01 00       	call   c0024d14 <__umoddi3>
c000a3b1:	83 c4 10             	add    esp,0x10
c000a3b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a3b7:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000a3bb:	79 0b                	jns    c000a3c8 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000a3bd:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000a3c4:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000a3c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a3cb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a3d0:	89 c8                	mov    eax,ecx
c000a3d2:	f7 ea                	imul   edx
c000a3d4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a3d7:	c1 f8 0b             	sar    eax,0xb
c000a3da:	89 c2                	mov    edx,eax
c000a3dc:	89 c8                	mov    eax,ecx
c000a3de:	c1 f8 1f             	sar    eax,0x1f
c000a3e1:	29 c2                	sub    edx,eax
c000a3e3:	89 d0                	mov    eax,edx
c000a3e5:	88 c2                	mov    dl,al
c000a3e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ea:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000a3ed:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a3f0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a3f5:	89 c8                	mov    eax,ecx
c000a3f7:	f7 ea                	imul   edx
c000a3f9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a3fc:	c1 f8 0b             	sar    eax,0xb
c000a3ff:	89 c2                	mov    edx,eax
c000a401:	89 c8                	mov    eax,ecx
c000a403:	c1 f8 1f             	sar    eax,0x1f
c000a406:	29 c2                	sub    edx,eax
c000a408:	89 d0                	mov    eax,edx
c000a40a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a410:	29 c1                	sub    ecx,eax
c000a412:	89 c8                	mov    eax,ecx
c000a414:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a417:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a41a:	ba 89 88 88 88       	mov    edx,0x88888889
c000a41f:	89 c8                	mov    eax,ecx
c000a421:	f7 ea                	imul   edx
c000a423:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a426:	c1 f8 05             	sar    eax,0x5
c000a429:	89 c2                	mov    edx,eax
c000a42b:	89 c8                	mov    eax,ecx
c000a42d:	c1 f8 1f             	sar    eax,0x1f
c000a430:	29 c2                	sub    edx,eax
c000a432:	89 d0                	mov    eax,edx
c000a434:	88 c2                	mov    dl,al
c000a436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a439:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000a43c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a43f:	ba 89 88 88 88       	mov    edx,0x88888889
c000a444:	89 c8                	mov    eax,ecx
c000a446:	f7 ea                	imul   edx
c000a448:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a44b:	c1 f8 05             	sar    eax,0x5
c000a44e:	89 c2                	mov    edx,eax
c000a450:	89 c8                	mov    eax,ecx
c000a452:	c1 f8 1f             	sar    eax,0x1f
c000a455:	29 c2                	sub    edx,eax
c000a457:	89 d0                	mov    eax,edx
c000a459:	c1 e0 04             	shl    eax,0x4
c000a45c:	29 d0                	sub    eax,edx
c000a45e:	c1 e0 02             	shl    eax,0x2
c000a461:	29 c1                	sub    ecx,eax
c000a463:	89 ca                	mov    edx,ecx
c000a465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a468:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000a46b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a46f:	79 20                	jns    c000a491 <KeSecondsToDatetime(unsigned long long)+0x125>
c000a471:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a474:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000a47a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a47f:	89 c8                	mov    eax,ecx
c000a481:	f7 ea                	imul   edx
c000a483:	c1 fa 0f             	sar    edx,0xf
c000a486:	89 c8                	mov    eax,ecx
c000a488:	c1 f8 1f             	sar    eax,0x1f
c000a48b:	29 c2                	sub    edx,eax
c000a48d:	89 d0                	mov    eax,edx
c000a48f:	eb 18                	jmp    c000a4a9 <KeSecondsToDatetime(unsigned long long)+0x13d>
c000a491:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a494:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a499:	89 c8                	mov    eax,ecx
c000a49b:	f7 ea                	imul   edx
c000a49d:	c1 fa 0f             	sar    edx,0xf
c000a4a0:	89 c8                	mov    eax,ecx
c000a4a2:	c1 f8 1f             	sar    eax,0x1f
c000a4a5:	29 c2                	sub    edx,eax
c000a4a7:	89 d0                	mov    eax,edx
c000a4a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000a4ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a4af:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000a4b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a4b8:	01 d0                	add    eax,edx
c000a4ba:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000a4bd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a4c0:	c1 e8 02             	shr    eax,0x2
c000a4c3:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000a4c8:	f7 e2                	mul    edx
c000a4ca:	c1 ea 07             	shr    edx,0x7
c000a4cd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a4d0:	29 d0                	sub    eax,edx
c000a4d2:	89 c1                	mov    ecx,eax
c000a4d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a4d7:	c1 e8 02             	shr    eax,0x2
c000a4da:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000a4df:	f7 e2                	mul    edx
c000a4e1:	89 d0                	mov    eax,edx
c000a4e3:	c1 e8 0b             	shr    eax,0xb
c000a4e6:	01 c1                	add    ecx,eax
c000a4e8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a4eb:	c1 e8 04             	shr    eax,0x4
c000a4ee:	ba 41 d6 72 00       	mov    edx,0x72d641
c000a4f3:	f7 e2                	mul    edx
c000a4f5:	89 d0                	mov    eax,edx
c000a4f7:	c1 e8 04             	shr    eax,0x4
c000a4fa:	29 c1                	sub    ecx,eax
c000a4fc:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000a501:	89 c8                	mov    eax,ecx
c000a503:	f7 e2                	mul    edx
c000a505:	89 c8                	mov    eax,ecx
c000a507:	29 d0                	sub    eax,edx
c000a509:	d1 e8                	shr    eax,1
c000a50b:	01 d0                	add    eax,edx
c000a50d:	c1 e8 08             	shr    eax,0x8
c000a510:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a513:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a516:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a51b:	f7 e2                	mul    edx
c000a51d:	89 d1                	mov    ecx,edx
c000a51f:	c1 e9 05             	shr    ecx,0x5
c000a522:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a525:	89 d0                	mov    eax,edx
c000a527:	c1 e0 03             	shl    eax,0x3
c000a52a:	01 d0                	add    eax,edx
c000a52c:	c1 e0 03             	shl    eax,0x3
c000a52f:	01 d0                	add    eax,edx
c000a531:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a538:	01 c2                	add    edx,eax
c000a53a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a53d:	c1 e8 02             	shr    eax,0x2
c000a540:	01 d0                	add    eax,edx
c000a542:	29 c1                	sub    ecx,eax
c000a544:	89 ca                	mov    edx,ecx
c000a546:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a549:	01 d0                	add    eax,edx
c000a54b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a54e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a551:	89 d0                	mov    eax,edx
c000a553:	c1 e0 02             	shl    eax,0x2
c000a556:	01 d0                	add    eax,edx
c000a558:	83 c0 02             	add    eax,0x2
c000a55b:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a560:	f7 e2                	mul    edx
c000a562:	89 d0                	mov    eax,edx
c000a564:	c1 e8 07             	shr    eax,0x7
c000a567:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a56a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a56d:	89 d0                	mov    eax,edx
c000a56f:	c1 e0 03             	shl    eax,0x3
c000a572:	01 d0                	add    eax,edx
c000a574:	89 c2                	mov    edx,eax
c000a576:	c1 e2 04             	shl    edx,0x4
c000a579:	01 d0                	add    eax,edx
c000a57b:	83 c0 02             	add    eax,0x2
c000a57e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a583:	f7 e2                	mul    edx
c000a585:	c1 ea 02             	shr    edx,0x2
c000a588:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a58b:	29 d0                	sub    eax,edx
c000a58d:	83 c0 01             	add    eax,0x1
c000a590:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a593:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a597:	77 07                	ja     c000a5a0 <KeSecondsToDatetime(unsigned long long)+0x234>
c000a599:	b8 02 00 00 00       	mov    eax,0x2
c000a59e:	eb 05                	jmp    c000a5a5 <KeSecondsToDatetime(unsigned long long)+0x239>
c000a5a0:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a5a5:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a5a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a5ab:	89 d0                	mov    eax,edx
c000a5ad:	c1 e0 02             	shl    eax,0x2
c000a5b0:	01 d0                	add    eax,edx
c000a5b2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a5b9:	01 d0                	add    eax,edx
c000a5bb:	c1 e0 04             	shl    eax,0x4
c000a5be:	89 c2                	mov    edx,eax
c000a5c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a5c3:	01 c2                	add    edx,eax
c000a5c5:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a5c9:	0f 96 c0             	setbe  al
c000a5cc:	0f b6 c0             	movzx  eax,al
c000a5cf:	01 d0                	add    eax,edx
c000a5d1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a5d4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a5d7:	89 c2                	mov    edx,eax
c000a5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5dc:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000a5e0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a5e3:	83 c0 01             	add    eax,0x1
c000a5e6:	88 c2                	mov    dl,al
c000a5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5eb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a5ee:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a5f1:	88 c2                	mov    dl,al
c000a5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f6:	88 10                	mov    BYTE PTR [eax],dl
c000a5f8:	90                   	nop
c000a5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5fc:	c9                   	leave  
c000a5fd:	c2 04 00             	ret    0x4

c000a600 <Clock::timeInDatetimeLocal()>:
c000a600:	55                   	push   ebp
c000a601:	89 e5                	mov    ebp,esp
c000a603:	83 ec 08             	sub    esp,0x8
c000a606:	83 ec 0c             	sub    esp,0xc
c000a609:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a60c:	e8 81 f8 ff ff       	call   c0009e92 <Clock::timeInSecondsLocal()>
c000a611:	83 c4 10             	add    esp,0x10
c000a614:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a617:	83 ec 04             	sub    esp,0x4
c000a61a:	52                   	push   edx
c000a61b:	50                   	push   eax
c000a61c:	51                   	push   ecx
c000a61d:	e8 4a fd ff ff       	call   c000a36c <KeSecondsToDatetime(unsigned long long)>
c000a622:	83 c4 0c             	add    esp,0xc
c000a625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a628:	c9                   	leave  
c000a629:	c2 04 00             	ret    0x4

c000a62c <Device::hibernate()>:
c000a62c:	c3                   	ret    
c000a62d:	90                   	nop

c000a62e <Device::wake()>:
c000a62e:	c3                   	ret    
c000a62f:	90                   	nop

c000a630 <Device::detect()>:
c000a630:	c3                   	ret    
c000a631:	90                   	nop

c000a632 <Device::disableLegacy()>:
c000a632:	c3                   	ret    
c000a633:	90                   	nop

c000a634 <Device::powerSaving(PowerSavingLevel)>:
c000a634:	c3                   	ret    
c000a635:	90                   	nop

c000a636 <DriverlessDevice::close(int, int, void*)>:
c000a636:	31 c0                	xor    eax,eax
c000a638:	c3                   	ret    
c000a639:	90                   	nop

c000a63a <DriverlessDevice::detect()>:
c000a63a:	c3                   	ret    
c000a63b:	90                   	nop

c000a63c <DriverlessDevice::open(int, int, void*)>:
c000a63c:	83 ec 18             	sub    esp,0x18
c000a63f:	68 8c b7 02 c0       	push   0xc002b78c
c000a644:	e8 4f 62 00 00       	call   c0010898 <KePanic(char const*)>
c000a649:	83 c8 ff             	or     eax,0xffffffff
c000a64c:	83 c4 1c             	add    esp,0x1c
c000a64f:	c3                   	ret    

c000a650 <Device::~Device()>:
c000a650:	ba 30 b8 02 c0       	mov    edx,0xc002b830
c000a655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	90                   	nop
c000a65c:	c3                   	ret    
c000a65d:	90                   	nop

c000a65e <Device::~Device()>:
c000a65e:	83 ec 0c             	sub    esp,0xc
c000a661:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a665:	e8 e6 ff ff ff       	call   c000a650 <Device::~Device()>
c000a66a:	83 c4 04             	add    esp,0x4
c000a66d:	83 ec 08             	sub    esp,0x8
c000a670:	68 58 01 00 00       	push   0x158
c000a675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a679:	e8 be 39 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000a67e:	83 c4 10             	add    esp,0x10
c000a681:	83 c4 0c             	add    esp,0xc
c000a684:	c3                   	ret    
c000a685:	90                   	nop

c000a686 <Device::findAndLoadDriver()>:
c000a686:	c7 44 24 04 aa b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b7aa
c000a68e:	e9 d3 c8 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000a693:	90                   	nop

c000a694 <Device::preOpenPCI(PCIDeviceInfo)>:
c000a694:	57                   	push   edi
c000a695:	b9 09 00 00 00       	mov    ecx,0x9
c000a69a:	56                   	push   esi
c000a69b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a69f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a6a3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a6ad:	81 c7 18 01 00 00    	add    edi,0x118
c000a6b3:	fc                   	cld    
c000a6b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a6b6:	5e                   	pop    esi
c000a6b7:	5f                   	pop    edi
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop

c000a6ba <Device::preOpenACPI(void*, char*, char*)>:
c000a6ba:	57                   	push   edi
c000a6bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a6c0:	56                   	push   esi
c000a6c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a6c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a6cd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a6d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a6dd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a6e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e5:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a6eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a6ef:	b9 0e 00 00 00       	mov    ecx,0xe
c000a6f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f6:	5e                   	pop    esi
c000a6f7:	5f                   	pop    edi
c000a6f8:	c3                   	ret    
c000a6f9:	90                   	nop

c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a6fa:	53                   	push   ebx
c000a6fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a703:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a70b:	0f b6 c0             	movzx  eax,al
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a716:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a71a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a71e:	5b                   	pop    ebx
c000a71f:	e9 9b 14 01 00       	jmp    c001bbbf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a724 <Device::getParent()>:
c000a724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a728:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a72e:	c3                   	ret    
c000a72f:	90                   	nop

c000a730 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a738:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a73d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a741:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a745:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a749:	e9 e2 15 01 00       	jmp    c001bd30 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a74e <Device::addChild(Device*)>:
c000a74e:	53                   	push   ebx
c000a74f:	83 ec 08             	sub    esp,0x8
c000a752:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a75a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a760:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a766:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a768:	85 d2                	test   edx,edx
c000a76a:	74 04                	je     c000a770 <Device::addChild(Device*)+0x22>
c000a76c:	89 d3                	mov    ebx,edx
c000a76e:	eb f6                	jmp    c000a766 <Device::addChild(Device*)+0x18>
c000a770:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a773:	83 ec 0c             	sub    esp,0xc
c000a776:	6a 08                	push   0x8
c000a778:	e8 c7 5c 00 00       	call   c0010444 <malloc>
c000a77d:	89 03                	mov    DWORD PTR [ebx],eax
c000a77f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a785:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a78c:	83 c4 18             	add    esp,0x18
c000a78f:	5b                   	pop    ebx
c000a790:	c3                   	ret    
c000a791:	90                   	nop

c000a792 <Device::removeAllChildren()>:
c000a792:	56                   	push   esi
c000a793:	53                   	push   ebx
c000a794:	52                   	push   edx
c000a795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a799:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a79f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a7a2:	74 17                	je     c000a7bb <Device::removeAllChildren()+0x29>
c000a7a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7a7:	85 c0                	test   eax,eax
c000a7a9:	74 0c                	je     c000a7b7 <Device::removeAllChildren()+0x25>
c000a7ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7ad:	83 ec 0c             	sub    esp,0xc
c000a7b0:	50                   	push   eax
c000a7b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a7b9:	eb e4                	jmp    c000a79f <Device::removeAllChildren()+0xd>
c000a7bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a7c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a7c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a7cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a7d4:	58                   	pop    eax
c000a7d5:	5b                   	pop    ebx
c000a7d6:	5e                   	pop    esi
c000a7d7:	c3                   	ret    

c000a7d8 <Device::hibernateAll()>:
c000a7d8:	53                   	push   ebx
c000a7d9:	83 ec 14             	sub    esp,0x14
c000a7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a7e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a7e2:	53                   	push   ebx
c000a7e3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a7e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a7ec:	83 c4 10             	add    esp,0x10
c000a7ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a7f2:	74 0f                	je     c000a803 <Device::hibernateAll()+0x2b>
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a7fa:	e8 d9 ff ff ff       	call   c000a7d8 <Device::hibernateAll()>
c000a7ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a801:	eb e9                	jmp    c000a7ec <Device::hibernateAll()+0x14>
c000a803:	83 c4 08             	add    esp,0x8
c000a806:	5b                   	pop    ebx
c000a807:	c3                   	ret    

c000a808 <Device::wakeAll()>:
c000a808:	53                   	push   ebx
c000a809:	83 ec 14             	sub    esp,0x14
c000a80c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a810:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a812:	53                   	push   ebx
c000a813:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a816:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a822:	74 0f                	je     c000a833 <Device::wakeAll()+0x2b>
c000a824:	83 ec 0c             	sub    esp,0xc
c000a827:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a82a:	e8 d9 ff ff ff       	call   c000a808 <Device::wakeAll()>
c000a82f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a831:	eb e9                	jmp    c000a81c <Device::wakeAll()+0x14>
c000a833:	83 c4 08             	add    esp,0x8
c000a836:	5b                   	pop    ebx
c000a837:	c3                   	ret    

c000a838 <Device::detectAll()>:
c000a838:	53                   	push   ebx
c000a839:	83 ec 14             	sub    esp,0x14
c000a83c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a840:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a842:	53                   	push   ebx
c000a843:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a846:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a84c:	83 c4 10             	add    esp,0x10
c000a84f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a852:	74 0f                	je     c000a863 <Device::detectAll()+0x2b>
c000a854:	83 ec 0c             	sub    esp,0xc
c000a857:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a85a:	e8 d9 ff ff ff       	call   c000a838 <Device::detectAll()>
c000a85f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a861:	eb e9                	jmp    c000a84c <Device::detectAll()+0x14>
c000a863:	83 c4 08             	add    esp,0x8
c000a866:	5b                   	pop    ebx
c000a867:	c3                   	ret    

c000a868 <Device::disableLegacyAll()>:
c000a868:	c3                   	ret    
c000a869:	90                   	nop

c000a86a <Device::loadDriversForAll()>:
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <Device::powerSavingAll(PowerSavingLevel)>:
c000a86c:	56                   	push   esi
c000a86d:	53                   	push   ebx
c000a86e:	83 ec 0c             	sub    esp,0xc
c000a871:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a875:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a879:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a87b:	56                   	push   esi
c000a87c:	53                   	push   ebx
c000a87d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a880:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a886:	83 c4 10             	add    esp,0x10
c000a889:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a88c:	74 0f                	je     c000a89d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a88e:	52                   	push   edx
c000a88f:	52                   	push   edx
c000a890:	56                   	push   esi
c000a891:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a894:	e8 d3 ff ff ff       	call   c000a86c <Device::powerSavingAll(PowerSavingLevel)>
c000a899:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a89b:	eb e9                	jmp    c000a886 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a89d:	58                   	pop    eax
c000a89e:	5b                   	pop    ebx
c000a89f:	5e                   	pop    esi
c000a8a0:	c3                   	ret    
c000a8a1:	90                   	nop

c000a8a2 <Device::setName(char const*)>:
c000a8a2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a8aa:	e9 a1 5d ff ff       	jmp    c0000650 <strcpy>
c000a8af:	90                   	nop

c000a8b0 <Device::Device(char const*)>:
c000a8b0:	83 ec 1c             	sub    esp,0x1c
c000a8b3:	ba 30 b8 02 c0       	mov    edx,0xc002b830
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	89 10                	mov    DWORD PTR [eax],edx
c000a8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8de:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a8f6:	83 ec 08             	sub    esp,0x8
c000a8f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a8fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a901:	e8 9c ff ff ff       	call   c000a8a2 <Device::setName(char const*)>
c000a906:	83 c4 10             	add    esp,0x10
c000a909:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a911:	83 ec 0c             	sub    esp,0xc
c000a914:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a918:	e8 27 5b 00 00       	call   c0010444 <malloc>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a926:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a92d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a931:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a941:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a951:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a967:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a972:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a980:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a98e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a99c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a9a6:	90                   	nop
c000a9a7:	83 c4 1c             	add    esp,0x1c
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <Device::getName()>:
c000a9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b0:	05 d0 00 00 00       	add    eax,0xd0
c000a9b5:	c3                   	ret    

c000a9b6 <Device::closeAll()>:
c000a9b6:	53                   	push   ebx
c000a9b7:	83 ec 08             	sub    esp,0x8
c000a9ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a9be:	53                   	push   ebx
c000a9bf:	e8 e8 ff ff ff       	call   c000a9ac <Device::getName()>
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	68 e4 b7 02 c0       	push   0xc002b7e4
c000a9cb:	e8 96 c5 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a9d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a9d2:	6a 00                	push   0x0
c000a9d4:	6a 00                	push   0x0
c000a9d6:	6a 00                	push   0x0
c000a9d8:	53                   	push   ebx
c000a9d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a9dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a9e2:	83 c4 20             	add    esp,0x20
c000a9e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a9e8:	74 12                	je     c000a9fc <Device::closeAll()+0x46>
c000a9ea:	83 ec 0c             	sub    esp,0xc
c000a9ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a9f0:	e8 c1 ff ff ff       	call   c000a9b6 <Device::closeAll()>
c000a9f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a9f7:	83 c4 10             	add    esp,0x10
c000a9fa:	eb e9                	jmp    c000a9e5 <Device::closeAll()+0x2f>
c000a9fc:	83 c4 08             	add    esp,0x8
c000a9ff:	5b                   	pop    ebx
c000aa00:	c3                   	ret    
c000aa01:	90                   	nop

c000aa02 <DriverlessDevice::DriverlessDevice(char const*)>:
c000aa02:	83 ec 0c             	sub    esp,0xc
c000aa05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa09:	83 ec 08             	sub    esp,0x8
c000aa0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa10:	50                   	push   eax
c000aa11:	e8 9a fe ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000aa16:	83 c4 10             	add    esp,0x10
c000aa19:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c000aa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa22:	89 10                	mov    DWORD PTR [eax],edx
c000aa24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa28:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000aa32:	90                   	nop
c000aa33:	83 c4 0c             	add    esp,0xc
c000aa36:	c3                   	ret    
c000aa37:	90                   	nop

c000aa38 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000aa38:	57                   	push   edi
c000aa39:	56                   	push   esi
c000aa3a:	53                   	push   ebx
c000aa3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa3f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000aa43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aa47:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000aa4d:	75 0c                	jne    c000aa5b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000aa4f:	52                   	push   edx
c000aa50:	52                   	push   edx
c000aa51:	53                   	push   ebx
c000aa52:	56                   	push   esi
c000aa53:	e8 86 ec 01 00       	call   c00296de <LinkedList<Device>::addElement(Device*)>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aa61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aa64:	74 12                	je     c000aa78 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000aa66:	50                   	push   eax
c000aa67:	57                   	push   edi
c000aa68:	56                   	push   esi
c000aa69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aa6c:	e8 c7 ff ff ff       	call   c000aa38 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000aa71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	eb e9                	jmp    c000aa61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000aa78:	5b                   	pop    ebx
c000aa79:	5e                   	pop    esi
c000aa7a:	5f                   	pop    edi
c000aa7b:	c3                   	ret    

c000aa7c <getDevicesOfType(DeviceType)>:
c000aa7c:	53                   	push   ebx
c000aa7d:	83 ec 14             	sub    esp,0x14
c000aa80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aa84:	53                   	push   ebx
c000aa85:	e8 30 ed 01 00       	call   c00297ba <LinkedList<Device>::LinkedList()>
c000aa8a:	83 c4 0c             	add    esp,0xc
c000aa8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa91:	53                   	push   ebx
c000aa92:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c000aa98:	e8 9b ff ff ff       	call   c000aa38 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000aa9d:	83 c4 18             	add    esp,0x18
c000aaa0:	89 d8                	mov    eax,ebx
c000aaa2:	5b                   	pop    ebx
c000aaa3:	c2 04 00             	ret    0x4
c000aaa6:	66 90                	xchg   ax,ax

c000aaa8 <HardDiskController::HardDiskController(char const*)>:
c000aaa8:	83 ec 0c             	sub    esp,0xc
c000aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab6:	50                   	push   eax
c000aab7:	e8 f4 fd ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000aabc:	83 c4 10             	add    esp,0x10
c000aabf:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c000aac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac8:	89 10                	mov    DWORD PTR [eax],edx
c000aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aace:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000aad8:	90                   	nop
c000aad9:	83 c4 0c             	add    esp,0xc
c000aadc:	c3                   	ret    
c000aadd:	90                   	nop
c000aade:	66 90                	xchg   ax,ax

c000aae0 <HardDiskController::~HardDiskController()>:
c000aae0:	83 ec 0c             	sub    esp,0xc
c000aae3:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c000aae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaec:	89 10                	mov    DWORD PTR [eax],edx
c000aaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf2:	83 ec 0c             	sub    esp,0xc
c000aaf5:	50                   	push   eax
c000aaf6:	e8 55 fb ff ff       	call   c000a650 <Device::~Device()>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	90                   	nop
c000aaff:	83 c4 0c             	add    esp,0xc
c000ab02:	c3                   	ret    
c000ab03:	90                   	nop

c000ab04 <HardDiskController::~HardDiskController()>:
c000ab04:	83 ec 0c             	sub    esp,0xc
c000ab07:	83 ec 0c             	sub    esp,0xc
c000ab0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab0e:	e8 cd ff ff ff       	call   c000aae0 <HardDiskController::~HardDiskController()>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	83 ec 08             	sub    esp,0x8
c000ab19:	68 58 01 00 00       	push   0x158
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	e8 15 35 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	83 c4 0c             	add    esp,0xc
c000ab2d:	c3                   	ret    

c000ab2e <PhysicalDisk::eject()>:
c000ab2e:	83 c8 ff             	or     eax,0xffffffff
c000ab31:	c3                   	ret    

c000ab32 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ab32:	83 ec 0c             	sub    esp,0xc
c000ab35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab39:	83 ec 08             	sub    esp,0x8
c000ab3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab40:	50                   	push   eax
c000ab41:	e8 6a fd ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000ab46:	83 c4 10             	add    esp,0x10
c000ab49:	ba b4 b8 02 c0       	mov    edx,0xc002b8b4
c000ab4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab52:	89 10                	mov    DWORD PTR [eax],edx
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab63:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ab78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ab80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ab86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ab94:	90                   	nop
c000ab95:	83 c4 0c             	add    esp,0xc
c000ab98:	c3                   	ret    
c000ab99:	90                   	nop

c000ab9a <PhysicalDisk::startCache()>:
c000ab9a:	56                   	push   esi
c000ab9b:	53                   	push   ebx
c000ab9c:	83 ec 10             	sub    esp,0x10
c000ab9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aba3:	6a 44                	push   0x44
c000aba5:	e8 9a 58 00 00       	call   c0010444 <malloc>
c000abaa:	89 c6                	mov    esi,eax
c000abac:	58                   	pop    eax
c000abad:	5a                   	pop    edx
c000abae:	53                   	push   ebx
c000abaf:	56                   	push   esi
c000abb0:	e8 a7 13 00 00       	call   c000bf5c <VCache::VCache(PhysicalDisk*)>
c000abb5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000abbb:	83 c4 14             	add    esp,0x14
c000abbe:	5b                   	pop    ebx
c000abbf:	5e                   	pop    esi
c000abc0:	c3                   	ret    
c000abc1:	90                   	nop

c000abc2 <PhysicalDisk::~PhysicalDisk()>:
c000abc2:	83 ec 0c             	sub    esp,0xc
c000abc5:	ba b4 b8 02 c0       	mov    edx,0xc002b8b4
c000abca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abce:	89 10                	mov    DWORD PTR [eax],edx
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	50                   	push   eax
c000abd8:	e8 73 fa ff ff       	call   c000a650 <Device::~Device()>
c000abdd:	83 c4 10             	add    esp,0x10
c000abe0:	90                   	nop
c000abe1:	83 c4 0c             	add    esp,0xc
c000abe4:	c3                   	ret    
c000abe5:	90                   	nop

c000abe6 <PhysicalDisk::~PhysicalDisk()>:
c000abe6:	83 ec 0c             	sub    esp,0xc
c000abe9:	83 ec 0c             	sub    esp,0xc
c000abec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf0:	e8 cd ff ff ff       	call   c000abc2 <PhysicalDisk::~PhysicalDisk()>
c000abf5:	83 c4 10             	add    esp,0x10
c000abf8:	83 ec 08             	sub    esp,0x8
c000abfb:	68 6c 01 00 00       	push   0x16c
c000ac00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac04:	e8 33 34 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000ac09:	83 c4 10             	add    esp,0x10
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <startGUI(void*)>:
c000ac10:	55                   	push   ebp
c000ac11:	89 e5                	mov    ebp,esp
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000ac1e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000ac23:	85 c0                	test   eax,eax
c000ac25:	75 01                	jne    c000ac28 <startGUI(void*)+0x18>
c000ac27:	fb                   	sti    
c000ac28:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac2d:	83 ec 04             	sub    esp,0x4
c000ac30:	6a 00                	push   0x0
c000ac32:	50                   	push   eax
c000ac33:	68 e4 b8 02 c0       	push   0xc002b8e4
c000ac38:	e8 61 be 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac45:	83 ec 04             	sub    esp,0x4
c000ac48:	6a 00                	push   0x0
c000ac4a:	50                   	push   eax
c000ac4b:	68 fe b8 02 c0       	push   0xc002b8fe
c000ac50:	e8 49 be 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac55:	83 c4 10             	add    esp,0x10
c000ac58:	eb fe                	jmp    c000ac58 <startGUI(void*)+0x48>

c000ac5a <startGUIVESA(void*)>:
c000ac5a:	55                   	push   ebp
c000ac5b:	89 e5                	mov    ebp,esp
c000ac5d:	83 ec 08             	sub    esp,0x8
c000ac60:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000ac68:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000ac6d:	85 c0                	test   eax,eax
c000ac6f:	75 01                	jne    c000ac72 <startGUIVESA(void*)+0x18>
c000ac71:	fb                   	sti    
c000ac72:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac77:	83 ec 04             	sub    esp,0x4
c000ac7a:	6a 00                	push   0x0
c000ac7c:	50                   	push   eax
c000ac7d:	68 1c b9 02 c0       	push   0xc002b91c
c000ac82:	e8 17 be 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac87:	83 c4 10             	add    esp,0x10
c000ac8a:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac8f:	83 ec 04             	sub    esp,0x4
c000ac92:	6a 00                	push   0x0
c000ac94:	50                   	push   eax
c000ac95:	68 fe b8 02 c0       	push   0xc002b8fe
c000ac9a:	e8 ff bd 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac9f:	83 c4 10             	add    esp,0x10
c000aca2:	eb fe                	jmp    c000aca2 <startGUIVESA(void*)+0x48>

c000aca4 <sendKeyToTerminal(unsigned char)>:
c000aca4:	55                   	push   ebp
c000aca5:	89 e5                	mov    ebp,esp
c000aca7:	83 ec 28             	sub    esp,0x28
c000acaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000acb0:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c000acb5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000acb9:	83 ec 08             	sub    esp,0x8
c000acbc:	52                   	push   edx
c000acbd:	50                   	push   eax
c000acbe:	e8 5d 88 00 00       	call   c0013520 <VgaText::receiveKey(unsigned char)>
c000acc3:	83 c4 10             	add    esp,0x10
c000acc6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000acca:	83 f8 0a             	cmp    eax,0xa
c000accd:	74 16                	je     c000ace5 <sendKeyToTerminal(unsigned char)+0x41>
c000accf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000acd3:	83 f8 03             	cmp    eax,0x3
c000acd6:	74 0d                	je     c000ace5 <sendKeyToTerminal(unsigned char)+0x41>
c000acd8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000acdc:	83 f8 1c             	cmp    eax,0x1c
c000acdf:	0f 85 92 00 00 00    	jne    c000ad77 <sendKeyToTerminal(unsigned char)+0xd3>
c000ace5:	fa                   	cli    
c000ace6:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000aceb:	83 c0 01             	add    eax,0x1
c000acee:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000acf3:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000acf8:	83 c0 01             	add    eax,0x1
c000acfb:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000ad00:	a1 80 66 03 c0       	mov    eax,ds:0xc0036680
c000ad05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ad08:	c7 05 80 66 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036680,0x0
c000ad12:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ad16:	74 1f                	je     c000ad37 <sendKeyToTerminal(unsigned char)+0x93>
c000ad18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ad1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ad1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ad21:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad24:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ad27:	83 ec 0c             	sub    esp,0xc
c000ad2a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ad2d:	e8 46 ca 00 00       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c000ad32:	83 c4 10             	add    esp,0x10
c000ad35:	eb db                	jmp    c000ad12 <sendKeyToTerminal(unsigned char)+0x6e>
c000ad37:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000ad3c:	83 e8 01             	sub    eax,0x1
c000ad3f:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000ad44:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000ad49:	85 c0                	test   eax,eax
c000ad4b:	75 18                	jne    c000ad65 <sendKeyToTerminal(unsigned char)+0xc1>
c000ad4d:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c000ad52:	85 c0                	test   eax,eax
c000ad54:	74 0f                	je     c000ad65 <sendKeyToTerminal(unsigned char)+0xc1>
c000ad56:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c000ad60:	e8 bb c6 00 00       	call   c0017420 <schedule()>
c000ad65:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000ad6d:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000ad72:	85 c0                	test   eax,eax
c000ad74:	75 01                	jne    c000ad77 <sendKeyToTerminal(unsigned char)+0xd3>
c000ad76:	fb                   	sti    
c000ad77:	90                   	nop
c000ad78:	c9                   	leave  
c000ad79:	c3                   	ret    

c000ad7a <sendKeyboardToken(KeyboardToken)>:
c000ad7a:	55                   	push   ebp
c000ad7b:	89 e5                	mov    ebp,esp
c000ad7d:	83 ec 18             	sub    esp,0x18
c000ad80:	e8 90 63 00 00       	call   c0011115 <KeUserIOReceived()>
c000ad85:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ad88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8b:	0f b7 c0             	movzx  eax,ax
c000ad8e:	83 f2 01             	xor    edx,0x1
c000ad91:	88 90 a0 66 03 c0    	mov    BYTE PTR [eax-0x3ffc9960],dl
c000ad97:	a1 88 66 03 c0       	mov    eax,ds:0xc0036688
c000ad9c:	85 c0                	test   eax,eax
c000ad9e:	74 24                	je     c000adc4 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ada0:	8b 15 88 66 03 c0    	mov    edx,DWORD PTR ds:0xc0036688
c000ada6:	83 ec 04             	sub    esp,0x4
c000ada9:	68 a0 66 03 c0       	push   0xc00366a0
c000adae:	83 ec 08             	sub    esp,0x8
c000adb1:	89 e0                	mov    eax,esp
c000adb3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000adb6:	89 08                	mov    DWORD PTR [eax],ecx
c000adb8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000adbb:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000adbf:	ff d2                	call   edx
c000adc1:	83 c4 10             	add    esp,0x10
c000adc4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000adc8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000adcb:	0f b6 c0             	movzx  eax,al
c000adce:	85 c0                	test   eax,eax
c000add0:	0f 84 da 00 00 00    	je     c000aeb0 <sendKeyboardToken(KeyboardToken)+0x136>
c000add6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000add9:	0f b7 c0             	movzx  eax,ax
c000addc:	3d 18 03 00 00       	cmp    eax,0x318
c000ade1:	75 06                	jne    c000ade9 <sendKeyboardToken(KeyboardToken)+0x6f>
c000ade3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ade9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adec:	0f b7 c0             	movzx  eax,ax
c000adef:	3d 19 03 00 00       	cmp    eax,0x319
c000adf4:	75 06                	jne    c000adfc <sendKeyboardToken(KeyboardToken)+0x82>
c000adf6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000adfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adff:	0f b7 c0             	movzx  eax,ax
c000ae02:	3d 1a 03 00 00       	cmp    eax,0x31a
c000ae07:	75 06                	jne    c000ae0f <sendKeyboardToken(KeyboardToken)+0x95>
c000ae09:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ae0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae12:	0f b7 c0             	movzx  eax,ax
c000ae15:	3d 1b 03 00 00       	cmp    eax,0x31b
c000ae1a:	75 06                	jne    c000ae22 <sendKeyboardToken(KeyboardToken)+0xa8>
c000ae1c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ae22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae25:	0f b7 c0             	movzx  eax,ax
c000ae28:	3d 1c 03 00 00       	cmp    eax,0x31c
c000ae2d:	75 06                	jne    c000ae35 <sendKeyboardToken(KeyboardToken)+0xbb>
c000ae2f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ae35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae38:	0f b7 c0             	movzx  eax,ax
c000ae3b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ae40:	75 06                	jne    c000ae48 <sendKeyboardToken(KeyboardToken)+0xce>
c000ae42:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ae48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae4b:	0f b7 c0             	movzx  eax,ax
c000ae4e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ae53:	75 06                	jne    c000ae5b <sendKeyboardToken(KeyboardToken)+0xe1>
c000ae55:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ae5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae5e:	0f b7 c0             	movzx  eax,ax
c000ae61:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ae66:	75 06                	jne    c000ae6e <sendKeyboardToken(KeyboardToken)+0xf4>
c000ae68:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ae6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae71:	0f b7 c0             	movzx  eax,ax
c000ae74:	3d 20 03 00 00       	cmp    eax,0x320
c000ae79:	75 06                	jne    c000ae81 <sendKeyboardToken(KeyboardToken)+0x107>
c000ae7b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ae81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae84:	0f b7 c0             	movzx  eax,ax
c000ae87:	3d 21 03 00 00       	cmp    eax,0x321
c000ae8c:	75 06                	jne    c000ae94 <sendKeyboardToken(KeyboardToken)+0x11a>
c000ae8e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ae94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae97:	0f b7 c0             	movzx  eax,ax
c000ae9a:	3d 22 03 00 00       	cmp    eax,0x322
c000ae9f:	0f 85 f1 00 00 00    	jne    c000af96 <sendKeyboardToken(KeyboardToken)+0x21c>
c000aea5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000aeab:	e9 e6 00 00 00       	jmp    c000af96 <sendKeyboardToken(KeyboardToken)+0x21c>
c000aeb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb3:	0f b7 c0             	movzx  eax,ax
c000aeb6:	3d 18 03 00 00       	cmp    eax,0x318
c000aebb:	75 0a                	jne    c000aec7 <sendKeyboardToken(KeyboardToken)+0x14d>
c000aebd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000aec3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeca:	0f b7 c0             	movzx  eax,ax
c000aecd:	3d 19 03 00 00       	cmp    eax,0x319
c000aed2:	75 0a                	jne    c000aede <sendKeyboardToken(KeyboardToken)+0x164>
c000aed4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000aeda:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aee1:	0f b7 c0             	movzx  eax,ax
c000aee4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000aee9:	75 0a                	jne    c000aef5 <sendKeyboardToken(KeyboardToken)+0x17b>
c000aeeb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000aef1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aef8:	0f b7 c0             	movzx  eax,ax
c000aefb:	3d 1b 03 00 00       	cmp    eax,0x31b
c000af00:	75 0a                	jne    c000af0c <sendKeyboardToken(KeyboardToken)+0x192>
c000af02:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000af08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af0f:	0f b7 c0             	movzx  eax,ax
c000af12:	3d 1c 03 00 00       	cmp    eax,0x31c
c000af17:	75 0a                	jne    c000af23 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000af19:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000af1f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af26:	0f b7 c0             	movzx  eax,ax
c000af29:	3d 1d 03 00 00       	cmp    eax,0x31d
c000af2e:	75 0a                	jne    c000af3a <sendKeyboardToken(KeyboardToken)+0x1c0>
c000af30:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000af36:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af3d:	0f b7 c0             	movzx  eax,ax
c000af40:	3d 1e 03 00 00       	cmp    eax,0x31e
c000af45:	75 0a                	jne    c000af51 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000af47:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000af4d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af54:	0f b7 c0             	movzx  eax,ax
c000af57:	3d 1f 03 00 00       	cmp    eax,0x31f
c000af5c:	75 0a                	jne    c000af68 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000af5e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000af64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af6b:	0f b7 c0             	movzx  eax,ax
c000af6e:	3d 20 03 00 00       	cmp    eax,0x320
c000af73:	75 0a                	jne    c000af7f <sendKeyboardToken(KeyboardToken)+0x205>
c000af75:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000af7b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af82:	0f b7 c0             	movzx  eax,ax
c000af85:	3d 21 03 00 00       	cmp    eax,0x321
c000af8a:	75 0a                	jne    c000af96 <sendKeyboardToken(KeyboardToken)+0x21c>
c000af8c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000af92:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af99:	0f b7 c0             	movzx  eax,ax
c000af9c:	3d 00 02 00 00       	cmp    eax,0x200
c000afa1:	75 2f                	jne    c000afd2 <sendKeyboardToken(KeyboardToken)+0x258>
c000afa3:	a0 a0 6a 03 c0       	mov    al,ds:0xc0036aa0
c000afa8:	83 f0 01             	xor    eax,0x1
c000afab:	0f b6 c0             	movzx  eax,al
c000afae:	85 c0                	test   eax,eax
c000afb0:	74 20                	je     c000afd2 <sendKeyboardToken(KeyboardToken)+0x258>
c000afb2:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000afb7:	6a 01                	push   0x1
c000afb9:	6a 00                	push   0x0
c000afbb:	68 10 ac 00 c0       	push   0xc000ac10
c000afc0:	50                   	push   eax
c000afc1:	e8 a6 c1 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c000afc6:	83 c4 10             	add    esp,0x10
c000afc9:	c6 05 a0 6a 03 c0 01 	mov    BYTE PTR ds:0xc0036aa0,0x1
c000afd0:	eb 3a                	jmp    c000b00c <sendKeyboardToken(KeyboardToken)+0x292>
c000afd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afd5:	0f b7 c0             	movzx  eax,ax
c000afd8:	3d 01 02 00 00       	cmp    eax,0x201
c000afdd:	75 2d                	jne    c000b00c <sendKeyboardToken(KeyboardToken)+0x292>
c000afdf:	a0 a0 6a 03 c0       	mov    al,ds:0xc0036aa0
c000afe4:	83 f0 01             	xor    eax,0x1
c000afe7:	0f b6 c0             	movzx  eax,al
c000afea:	85 c0                	test   eax,eax
c000afec:	74 1e                	je     c000b00c <sendKeyboardToken(KeyboardToken)+0x292>
c000afee:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000aff3:	6a 01                	push   0x1
c000aff5:	6a 00                	push   0x0
c000aff7:	68 5a ac 00 c0       	push   0xc000ac5a
c000affc:	50                   	push   eax
c000affd:	e8 6a c1 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	c6 05 a0 6a 03 c0 01 	mov    BYTE PTR ds:0xc0036aa0,0x1
c000b00c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b00f:	0f b7 c0             	movzx  eax,ax
c000b012:	3d 25 03 00 00       	cmp    eax,0x325
c000b017:	75 06                	jne    c000b01f <sendKeyboardToken(KeyboardToken)+0x2a5>
c000b019:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b01f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b022:	0f b7 c0             	movzx  eax,ax
c000b025:	3d 24 03 00 00       	cmp    eax,0x324
c000b02a:	75 06                	jne    c000b032 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000b02c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	3d 23 03 00 00       	cmp    eax,0x323
c000b03d:	75 06                	jne    c000b045 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000b03f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b048:	0f b7 c0             	movzx  eax,ax
c000b04b:	3d 26 03 00 00       	cmp    eax,0x326
c000b050:	75 06                	jne    c000b058 <sendKeyboardToken(KeyboardToken)+0x2de>
c000b052:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05b:	0f b7 c0             	movzx  eax,ax
c000b05e:	3d 27 03 00 00       	cmp    eax,0x327
c000b063:	75 06                	jne    c000b06b <sendKeyboardToken(KeyboardToken)+0x2f1>
c000b065:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b06b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b06e:	0f b7 c0             	movzx  eax,ax
c000b071:	3d 22 03 00 00       	cmp    eax,0x322
c000b076:	75 06                	jne    c000b07e <sendKeyboardToken(KeyboardToken)+0x304>
c000b078:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b07e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b082:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b085:	83 f0 01             	xor    eax,0x1
c000b088:	0f b6 c0             	movzx  eax,al
c000b08b:	85 c0                	test   eax,eax
c000b08d:	74 7c                	je     c000b10b <sendKeyboardToken(KeyboardToken)+0x391>
c000b08f:	a0 a1 67 03 c0       	mov    al,ds:0xc00367a1
c000b094:	0f b6 c0             	movzx  eax,al
c000b097:	85 c0                	test   eax,eax
c000b099:	74 43                	je     c000b0de <sendKeyboardToken(KeyboardToken)+0x364>
c000b09b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b09f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000b0a3:	85 c0                	test   eax,eax
c000b0a5:	74 2b                	je     c000b0d2 <sendKeyboardToken(KeyboardToken)+0x358>
c000b0a7:	8b 15 a4 6a 03 c0    	mov    edx,DWORD PTR ds:0xc0036aa4
c000b0ad:	89 d0                	mov    eax,edx
c000b0af:	c1 e0 02             	shl    eax,0x2
c000b0b2:	01 d0                	add    eax,edx
c000b0b4:	d1 e0                	shl    eax,1
c000b0b6:	a3 a4 6a 03 c0       	mov    ds:0xc0036aa4,eax
c000b0bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0be:	0f b7 c0             	movzx  eax,ax
c000b0c1:	8d 50 d0             	lea    edx,[eax-0x30]
c000b0c4:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b0c9:	01 d0                	add    eax,edx
c000b0cb:	a3 a4 6a 03 c0       	mov    ds:0xc0036aa4,eax
c000b0d0:	eb 71                	jmp    c000b143 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b0d2:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b0dc:	eb 65                	jmp    c000b143 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b0de:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b0e3:	85 c0                	test   eax,eax
c000b0e5:	74 18                	je     c000b0ff <sendKeyboardToken(KeyboardToken)+0x385>
c000b0e7:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b0ec:	0f b6 c0             	movzx  eax,al
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	50                   	push   eax
c000b0f3:	e8 ac fb ff ff       	call   c000aca4 <sendKeyToTerminal(unsigned char)>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b0ff:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b109:	eb 38                	jmp    c000b143 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b10b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10e:	0f b7 c0             	movzx  eax,ax
c000b111:	3d 01 01 00 00       	cmp    eax,0x101
c000b116:	75 2b                	jne    c000b143 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b118:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b11d:	85 c0                	test   eax,eax
c000b11f:	74 18                	je     c000b139 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000b121:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b126:	0f b6 c0             	movzx  eax,al
c000b129:	83 ec 0c             	sub    esp,0xc
c000b12c:	50                   	push   eax
c000b12d:	e8 72 fb ff ff       	call   c000aca4 <sendKeyToTerminal(unsigned char)>
c000b132:	83 c4 10             	add    esp,0x10
c000b135:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b139:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b143:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b146:	83 f0 01             	xor    eax,0x1
c000b149:	0f b6 c0             	movzx  eax,al
c000b14c:	85 c0                	test   eax,eax
c000b14e:	74 5a                	je     c000b1aa <sendKeyboardToken(KeyboardToken)+0x430>
c000b150:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b153:	83 f0 01             	xor    eax,0x1
c000b156:	0f b6 c0             	movzx  eax,al
c000b159:	85 c0                	test   eax,eax
c000b15b:	74 4d                	je     c000b1aa <sendKeyboardToken(KeyboardToken)+0x430>
c000b15d:	a0 a0 67 03 c0       	mov    al,ds:0xc00367a0
c000b162:	83 f0 01             	xor    eax,0x1
c000b165:	0f b6 c0             	movzx  eax,al
c000b168:	85 c0                	test   eax,eax
c000b16a:	74 3e                	je     c000b1aa <sendKeyboardToken(KeyboardToken)+0x430>
c000b16c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b16f:	0f b7 c0             	movzx  eax,ax
c000b172:	83 f8 1f             	cmp    eax,0x1f
c000b175:	76 0b                	jbe    c000b182 <sendKeyboardToken(KeyboardToken)+0x408>
c000b177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b17a:	0f b7 c0             	movzx  eax,ax
c000b17d:	83 f8 7e             	cmp    eax,0x7e
c000b180:	76 16                	jbe    c000b198 <sendKeyboardToken(KeyboardToken)+0x41e>
c000b182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b185:	0f b7 c0             	movzx  eax,ax
c000b188:	83 f8 0a             	cmp    eax,0xa
c000b18b:	74 0b                	je     c000b198 <sendKeyboardToken(KeyboardToken)+0x41e>
c000b18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b190:	0f b7 c0             	movzx  eax,ax
c000b193:	83 f8 08             	cmp    eax,0x8
c000b196:	75 12                	jne    c000b1aa <sendKeyboardToken(KeyboardToken)+0x430>
c000b198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b19b:	0f b6 c0             	movzx  eax,al
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	50                   	push   eax
c000b1a2:	e8 fd fa ff ff       	call   c000aca4 <sendKeyToTerminal(unsigned char)>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b1ad:	83 f0 01             	xor    eax,0x1
c000b1b0:	0f b6 c0             	movzx  eax,al
c000b1b3:	85 c0                	test   eax,eax
c000b1b5:	74 5d                	je     c000b214 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b1ba:	83 f0 01             	xor    eax,0x1
c000b1bd:	0f b6 c0             	movzx  eax,al
c000b1c0:	85 c0                	test   eax,eax
c000b1c2:	74 50                	je     c000b214 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1c4:	a0 a0 67 03 c0       	mov    al,ds:0xc00367a0
c000b1c9:	0f b6 c0             	movzx  eax,al
c000b1cc:	85 c0                	test   eax,eax
c000b1ce:	74 44                	je     c000b214 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1d3:	0f b7 c0             	movzx  eax,ax
c000b1d6:	83 f8 3f             	cmp    eax,0x3f
c000b1d9:	76 39                	jbe    c000b214 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1de:	0f b7 c0             	movzx  eax,ax
c000b1e1:	83 f8 7f             	cmp    eax,0x7f
c000b1e4:	77 2e                	ja     c000b214 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1e9:	88 c2                	mov    dl,al
c000b1eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1ee:	0f b7 c0             	movzx  eax,ax
c000b1f1:	83 f8 5f             	cmp    eax,0x5f
c000b1f4:	76 04                	jbe    c000b1fa <sendKeyboardToken(KeyboardToken)+0x480>
c000b1f6:	b0 20                	mov    al,0x20
c000b1f8:	eb 02                	jmp    c000b1fc <sendKeyboardToken(KeyboardToken)+0x482>
c000b1fa:	b0 00                	mov    al,0x0
c000b1fc:	89 d1                	mov    ecx,edx
c000b1fe:	29 c1                	sub    ecx,eax
c000b200:	89 c8                	mov    eax,ecx
c000b202:	83 e8 40             	sub    eax,0x40
c000b205:	0f b6 c0             	movzx  eax,al
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	50                   	push   eax
c000b20c:	e8 93 fa ff ff       	call   c000aca4 <sendKeyToTerminal(unsigned char)>
c000b211:	83 c4 10             	add    esp,0x10
c000b214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b217:	0f b7 c0             	movzx  eax,ax
c000b21a:	3d 00 03 00 00       	cmp    eax,0x300
c000b21f:	75 12                	jne    c000b233 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000b221:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b224:	83 f0 01             	xor    eax,0x1
c000b227:	0f b6 c0             	movzx  eax,al
c000b22a:	85 c0                	test   eax,eax
c000b22c:	74 05                	je     c000b233 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000b22e:	e8 f2 79 00 00       	call   c0012c25 <doTerminalCycle()>
c000b233:	90                   	nop
c000b234:	c9                   	leave  
c000b235:	c3                   	ret    

c000b236 <clearInternalKeybuffer(VgaText*)>:
c000b236:	55                   	push   ebp
c000b237:	89 e5                	mov    ebp,esp
c000b239:	83 ec 08             	sub    esp,0x8
c000b23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b23f:	05 02 01 00 00       	add    eax,0x102
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	50                   	push   eax
c000b248:	e8 33 53 ff ff       	call   c0000580 <strlen>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b253:	81 c2 02 01 00 00    	add    edx,0x102
c000b259:	83 ec 04             	sub    esp,0x4
c000b25c:	50                   	push   eax
c000b25d:	6a 00                	push   0x0
c000b25f:	52                   	push   edx
c000b260:	e8 8b 52 ff ff       	call   c00004f0 <memset>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	90                   	nop
c000b269:	c9                   	leave  
c000b26a:	c3                   	ret    

c000b26b <readKeyboard(VgaText*, char*, unsigned long)>:
c000b26b:	55                   	push   ebp
c000b26c:	89 e5                	mov    ebp,esp
c000b26e:	83 ec 18             	sub    esp,0x18
c000b271:	a1 88 66 03 c0       	mov    eax,ds:0xc0036688
c000b276:	85 c0                	test   eax,eax
c000b278:	74 2a                	je     c000b2a4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000b27a:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000b280:	8b 15 88 66 03 c0    	mov    edx,DWORD PTR ds:0xc0036688
c000b286:	83 ec 04             	sub    esp,0x4
c000b289:	68 a0 66 03 c0       	push   0xc00366a0
c000b28e:	83 ec 08             	sub    esp,0x8
c000b291:	89 e0                	mov    eax,esp
c000b293:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000b296:	89 08                	mov    DWORD PTR [eax],ecx
c000b298:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000b29b:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000b29f:	ff d2                	call   edx
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	fb                   	sti    
c000b2a5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000b2ac:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b2b0:	0f 84 08 01 00 00    	je     c000b3be <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000b2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2b9:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000b2bf:	0f be c0             	movsx  eax,al
c000b2c2:	85 c0                	test   eax,eax
c000b2c4:	75 27                	jne    c000b2ed <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000b2c6:	fa                   	cli    
c000b2c7:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000b2cc:	83 c0 01             	add    eax,0x1
c000b2cf:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000b2d4:	e8 47 c1 00 00       	call   c0017420 <schedule()>
c000b2d9:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000b2e1:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000b2e6:	85 c0                	test   eax,eax
c000b2e8:	75 cc                	jne    c000b2b6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b2ea:	fb                   	sti    
c000b2eb:	eb c9                	jmp    c000b2b6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b2ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b2f0:	8d 50 01             	lea    edx,[eax+0x1]
c000b2f3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000b2f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b2f9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000b2ff:	88 10                	mov    BYTE PTR [eax],dl
c000b301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b304:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000b30a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000b30d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b311:	83 f8 03             	cmp    eax,0x3
c000b314:	75 1e                	jne    c000b334 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000b316:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b31b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b31d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b320:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b326:	83 ec 08             	sub    esp,0x8
c000b329:	6a 02                	push   0x2
c000b32b:	50                   	push   eax
c000b32c:	e8 76 67 00 00       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b338:	83 f8 1c             	cmp    eax,0x1c
c000b33b:	75 1e                	jne    c000b35b <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000b33d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b342:	8b 00                	mov    eax,DWORD PTR [eax]
c000b344:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b347:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b34d:	83 ec 08             	sub    esp,0x8
c000b350:	6a 09                	push   0x9
c000b352:	50                   	push   eax
c000b353:	e8 4f 67 00 00       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b35e:	05 02 01 00 00       	add    eax,0x102
c000b363:	83 ec 0c             	sub    esp,0xc
c000b366:	50                   	push   eax
c000b367:	e8 14 52 ff ff       	call   c0000580 <strlen>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b372:	81 c2 02 01 00 00    	add    edx,0x102
c000b378:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b37b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b37e:	81 c2 02 01 00 00    	add    edx,0x102
c000b384:	83 ec 04             	sub    esp,0x4
c000b387:	50                   	push   eax
c000b388:	51                   	push   ecx
c000b389:	52                   	push   edx
c000b38a:	e8 41 50 ff ff       	call   c00003d0 <memmove>
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000b396:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000b39a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b39e:	83 f8 0a             	cmp    eax,0xa
c000b3a1:	74 16                	je     c000b3b9 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b3a3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b3a7:	83 f8 03             	cmp    eax,0x3
c000b3aa:	74 0d                	je     c000b3b9 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b3ac:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b3b0:	83 f8 1c             	cmp    eax,0x1c
c000b3b3:	0f 85 f3 fe ff ff    	jne    c000b2ac <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000b3b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b3bc:	eb 03                	jmp    c000b3c1 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000b3be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b3c1:	c9                   	leave  
c000b3c2:	c3                   	ret    
c000b3c3:	90                   	nop

c000b3c4 <Keyboard::Keyboard(char const*)>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cb:	83 ec 08             	sub    esp,0x8
c000b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d2:	50                   	push   eax
c000b3d3:	e8 d8 f4 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000b3f4:	c6 05 84 66 03 c0 01 	mov    BYTE PTR ds:0xc0036684,0x1
c000b3fb:	90                   	nop
c000b3fc:	83 c4 0c             	add    esp,0xc
c000b3ff:	c3                   	ret    

c000b400 <Keyboard::~Keyboard()>:
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c000b408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40c:	89 10                	mov    DWORD PTR [eax],edx
c000b40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	50                   	push   eax
c000b416:	e8 35 f2 ff ff       	call   c000a650 <Device::~Device()>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	90                   	nop
c000b41f:	83 c4 0c             	add    esp,0xc
c000b422:	c3                   	ret    
c000b423:	90                   	nop

c000b424 <Keyboard::~Keyboard()>:
c000b424:	83 ec 0c             	sub    esp,0xc
c000b427:	83 ec 0c             	sub    esp,0xc
c000b42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42e:	e8 cd ff ff ff       	call   c000b400 <Keyboard::~Keyboard()>
c000b433:	83 c4 10             	add    esp,0x10
c000b436:	83 ec 08             	sub    esp,0x8
c000b439:	68 5c 01 00 00       	push   0x15c
c000b43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b442:	e8 f5 2b 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 c4 0c             	add    esp,0xc
c000b44d:	c3                   	ret    

c000b44e <LogicalDisk::close(int, int, void*)>:
c000b44e:	83 c8 ff             	or     eax,0xffffffff
c000b451:	c3                   	ret    

c000b452 <LogicalDisk::~LogicalDisk()>:
c000b452:	83 ec 0c             	sub    esp,0xc
c000b455:	ba b8 b9 02 c0       	mov    edx,0xc002b9b8
c000b45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45e:	89 10                	mov    DWORD PTR [eax],edx
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	50                   	push   eax
c000b468:	e8 e3 f1 ff ff       	call   c000a650 <Device::~Device()>
c000b46d:	83 c4 10             	add    esp,0x10
c000b470:	90                   	nop
c000b471:	83 c4 0c             	add    esp,0xc
c000b474:	c3                   	ret    
c000b475:	90                   	nop

c000b476 <LogicalDisk::~LogicalDisk()>:
c000b476:	83 ec 0c             	sub    esp,0xc
c000b479:	83 ec 0c             	sub    esp,0xc
c000b47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b480:	e8 cd ff ff ff       	call   c000b452 <LogicalDisk::~LogicalDisk()>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	83 ec 08             	sub    esp,0x8
c000b48b:	68 78 01 00 00       	push   0x178
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 a3 2b 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 c4 0c             	add    esp,0xc
c000b49f:	c3                   	ret    

c000b4a0 <LogicalDisk::open(int, int, void*)>:
c000b4a0:	83 ec 18             	sub    esp,0x18
c000b4a3:	68 6c b9 02 c0       	push   0xc002b96c
c000b4a8:	e8 eb 53 00 00       	call   c0010898 <KePanic(char const*)>
c000b4ad:	83 c8 ff             	or     eax,0xffffffff
c000b4b0:	83 c4 1c             	add    esp,0x1c
c000b4b3:	c3                   	ret    

c000b4b4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000b4b4:	53                   	push   ebx
c000b4b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4c1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000b4c7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000b4cd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000b4d3:	77 10                	ja     c000b4e5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000b4d5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000b4db:	89 d3                	mov    ebx,edx
c000b4dd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000b4e3:	72 05                	jb     c000b4ea <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000b4e5:	83 c8 ff             	or     eax,0xffffffff
c000b4e8:	89 c2                	mov    edx,eax
c000b4ea:	5b                   	pop    ebx
c000b4eb:	c3                   	ret    

c000b4ec <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000b4ec:	56                   	push   esi
c000b4ed:	83 c8 ff             	or     eax,0xffffffff
c000b4f0:	53                   	push   ebx
c000b4f1:	89 c2                	mov    edx,eax
c000b4f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b4f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b4fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b505:	77 27                	ja     c000b52e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b507:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b50d:	89 d8                	mov    eax,ebx
c000b50f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b515:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b51a:	89 c2                	mov    edx,eax
c000b51c:	73 10                	jae    c000b52e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b51e:	89 c8                	mov    eax,ecx
c000b520:	89 da                	mov    edx,ebx
c000b522:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b528:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b52e:	5b                   	pop    ebx
c000b52f:	5e                   	pop    esi
c000b530:	c3                   	ret    
c000b531:	90                   	nop

c000b532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b532:	83 ec 1c             	sub    esp,0x1c
c000b535:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b539:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b53d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b545:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b549:	89 04 24             	mov    DWORD PTR [esp],eax
c000b54c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b550:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b558:	83 ec 08             	sub    esp,0x8
c000b55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b55f:	50                   	push   eax
c000b560:	e8 4b f3 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	ba b8 b9 02 c0       	mov    edx,0xc002b9b8
c000b56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b571:	89 10                	mov    DWORD PTR [eax],edx
c000b573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b577:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b582:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b58d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b598:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b5a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5ae:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b5b4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b5ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b5c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b5c5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b5cb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5d9:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5e3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b5ed:	90                   	nop
c000b5ee:	83 c4 1c             	add    esp,0x1c
c000b5f1:	c3                   	ret    

c000b5f2 <LogicalDisk::assignDriveLetter()>:
c000b5f2:	55                   	push   ebp
c000b5f3:	57                   	push   edi
c000b5f4:	56                   	push   esi
c000b5f5:	53                   	push   ebx
c000b5f6:	83 ec 14             	sub    esp,0x14
c000b5f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5fd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b603:	b0 41                	mov    al,0x41
c000b605:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b60b:	84 d2                	test   dl,dl
c000b60d:	75 02                	jne    c000b611 <LogicalDisk::assignDriveLetter()+0x1f>
c000b60f:	b0 43                	mov    al,0x43
c000b611:	8b 3d c0 6a 03 c0    	mov    edi,DWORD PTR ds:0xc0036ac0
c000b617:	0f b6 ca             	movzx  ecx,dl
c000b61a:	0f be e8             	movsx  ebp,al
c000b61d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b621:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b625:	8b 3d c4 6a 03 c0    	mov    edi,DWORD PTR ds:0xc0036ac4
c000b62b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b62f:	3c 43                	cmp    al,0x43
c000b631:	75 10                	jne    c000b643 <LogicalDisk::assignDriveLetter()+0x51>
c000b633:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b63a:	75 5a                	jne    c000b696 <LogicalDisk::assignDriveLetter()+0xa4>
c000b63c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b641:	75 53                	jne    c000b696 <LogicalDisk::assignDriveLetter()+0xa4>
c000b643:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b646:	ba 01 00 00 00       	mov    edx,0x1
c000b64b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b64e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b651:	d3 e2                	shl    edx,cl
c000b653:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b657:	89 d7                	mov    edi,edx
c000b659:	89 d6                	mov    esi,edx
c000b65b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b65f:	c1 ff 1f             	sar    edi,0x1f
c000b662:	21 f9                	and    ecx,edi
c000b664:	09 d1                	or     ecx,edx
c000b666:	75 2e                	jne    c000b696 <LogicalDisk::assignDriveLetter()+0xa4>
c000b668:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b66c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b670:	09 f2                	or     edx,esi
c000b672:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b675:	89 15 c0 6a 03 c0    	mov    DWORD PTR ds:0xc0036ac0,edx
c000b67b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b67f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b685:	89 1c b5 e0 6a 03 c0 	mov    DWORD PTR [esi*4-0x3ffc9520],ebx
c000b68c:	09 fa                	or     edx,edi
c000b68e:	89 15 c4 6a 03 c0    	mov    DWORD PTR ds:0xc0036ac4,edx
c000b694:	eb 0d                	jmp    c000b6a3 <LogicalDisk::assignDriveLetter()+0xb1>
c000b696:	8d 50 01             	lea    edx,[eax+0x1]
c000b699:	45                   	inc    ebp
c000b69a:	80 fa 5b             	cmp    dl,0x5b
c000b69d:	88 d0                	mov    al,dl
c000b69f:	75 8e                	jne    c000b62f <LogicalDisk::assignDriveLetter()+0x3d>
c000b6a1:	31 c0                	xor    eax,eax
c000b6a3:	83 c4 14             	add    esp,0x14
c000b6a6:	5b                   	pop    ebx
c000b6a7:	5e                   	pop    esi
c000b6a8:	5f                   	pop    edi
c000b6a9:	5d                   	pop    ebp
c000b6aa:	c3                   	ret    
c000b6ab:	90                   	nop

c000b6ac <LogicalDisk::mount()>:
c000b6ac:	56                   	push   esi
c000b6ad:	53                   	push   ebx
c000b6ae:	53                   	push   ebx
c000b6af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6b3:	8b 1d 04 63 03 c0    	mov    ebx,DWORD PTR ds:0xc0036304
c000b6b9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b6c3:	85 db                	test   ebx,ebx
c000b6c5:	74 27                	je     c000b6ee <LogicalDisk::mount()+0x42>
c000b6c7:	51                   	push   ecx
c000b6c8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b6cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b6d1:	83 e8 41             	sub    eax,0x41
c000b6d4:	50                   	push   eax
c000b6d5:	56                   	push   esi
c000b6d6:	53                   	push   ebx
c000b6d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b6da:	83 c4 10             	add    esp,0x10
c000b6dd:	84 c0                	test   al,al
c000b6df:	74 08                	je     c000b6e9 <LogicalDisk::mount()+0x3d>
c000b6e1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b6e7:	eb 07                	jmp    c000b6f0 <LogicalDisk::mount()+0x44>
c000b6e9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b6ec:	eb d5                	jmp    c000b6c3 <LogicalDisk::mount()+0x17>
c000b6ee:	31 c0                	xor    eax,eax
c000b6f0:	5a                   	pop    edx
c000b6f1:	5b                   	pop    ebx
c000b6f2:	5e                   	pop    esi
c000b6f3:	c3                   	ret    

c000b6f4 <LogicalDisk::unmount()>:
c000b6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b702:	c3                   	ret    
c000b703:	90                   	nop

c000b704 <LogicalDisk::eject()>:
c000b704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b708:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b70e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b714:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b717:	90                   	nop

c000b718 <LogicalDisk::unassignDriveLetter()>:
c000b718:	57                   	push   edi
c000b719:	56                   	push   esi
c000b71a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b71e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b725:	85 c9                	test   ecx,ecx
c000b727:	75 0f                	jne    c000b738 <LogicalDisk::unassignDriveLetter()+0x20>
c000b729:	c7 44 24 0c 90 b9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b990
c000b731:	5e                   	pop    esi
c000b732:	5f                   	pop    edi
c000b733:	e9 60 51 00 00       	jmp    c0010898 <KePanic(char const*)>
c000b738:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b73f:	83 e9 41             	sub    ecx,0x41
c000b742:	b8 01 00 00 00       	mov    eax,0x1
c000b747:	c7 04 8d e0 6a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc9520],0x0
c000b752:	d3 e0                	shl    eax,cl
c000b754:	89 c7                	mov    edi,eax
c000b756:	f7 d0                	not    eax
c000b758:	c1 ff 1f             	sar    edi,0x1f
c000b75b:	21 05 c0 6a 03 c0    	and    DWORD PTR ds:0xc0036ac0,eax
c000b761:	89 fe                	mov    esi,edi
c000b763:	f7 d6                	not    esi
c000b765:	21 35 c4 6a 03 c0    	and    DWORD PTR ds:0xc0036ac4,esi
c000b76b:	5e                   	pop    esi
c000b76c:	5f                   	pop    edi
c000b76d:	c3                   	ret    

c000b76e <LogicalDisk::read(unsigned long long, int, void*)>:
c000b76e:	57                   	push   edi
c000b76f:	56                   	push   esi
c000b770:	53                   	push   ebx
c000b771:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b787:	77 41                	ja     c000b7ca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b789:	99                   	cdq    
c000b78a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b790:	01 c8                	add    eax,ecx
c000b792:	11 da                	adc    edx,ebx
c000b794:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b79a:	19 d7                	sbb    edi,edx
c000b79c:	72 33                	jb     c000b7d1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b79e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b7a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b7ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b7b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b7b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7c2:	5b                   	pop    ebx
c000b7c3:	5e                   	pop    esi
c000b7c4:	5f                   	pop    edi
c000b7c5:	e9 ac 0b 00 00       	jmp    c000c376 <VCache::read(unsigned long long, int, void*)>
c000b7ca:	b8 05 00 00 00       	mov    eax,0x5
c000b7cf:	eb 05                	jmp    c000b7d6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b7d1:	b8 07 00 00 00       	mov    eax,0x7
c000b7d6:	5b                   	pop    ebx
c000b7d7:	5e                   	pop    esi
c000b7d8:	5f                   	pop    edi
c000b7d9:	c3                   	ret    

c000b7da <LogicalDisk::write(unsigned long long, int, void*)>:
c000b7da:	57                   	push   edi
c000b7db:	56                   	push   esi
c000b7dc:	53                   	push   ebx
c000b7dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b7e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b7e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b7f3:	77 41                	ja     c000b836 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b7f5:	99                   	cdq    
c000b7f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b7fc:	01 c8                	add    eax,ecx
c000b7fe:	11 da                	adc    edx,ebx
c000b800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b806:	19 d7                	sbb    edi,edx
c000b808:	72 33                	jb     c000b83d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b80a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b81a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b81e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b82a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b82e:	5b                   	pop    ebx
c000b82f:	5e                   	pop    esi
c000b830:	5f                   	pop    edi
c000b831:	e9 72 09 00 00       	jmp    c000c1a8 <VCache::write(unsigned long long, int, void*)>
c000b836:	b8 05 00 00 00       	mov    eax,0x5
c000b83b:	eb 05                	jmp    c000b842 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b83d:	b8 07 00 00 00       	mov    eax,0x7
c000b842:	5b                   	pop    ebx
c000b843:	5e                   	pop    esi
c000b844:	5f                   	pop    edi
c000b845:	c3                   	ret    
c000b846:	66 90                	xchg   ax,ax

c000b848 <Mouse::Mouse(char const*)>:
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84f:	83 ec 08             	sub    esp,0x8
c000b852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b856:	50                   	push   eax
c000b857:	e8 54 f0 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000b85c:	83 c4 10             	add    esp,0x10
c000b85f:	ba e4 b9 02 c0       	mov    edx,0xc002b9e4
c000b864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b868:	89 10                	mov    DWORD PTR [eax],edx
c000b86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b86e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b878:	90                   	nop
c000b879:	83 c4 0c             	add    esp,0xc
c000b87c:	c3                   	ret    
c000b87d:	90                   	nop
c000b87e:	66 90                	xchg   ax,ax

c000b880 <Mouse::~Mouse()>:
c000b880:	83 ec 0c             	sub    esp,0xc
c000b883:	ba e4 b9 02 c0       	mov    edx,0xc002b9e4
c000b888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88c:	89 10                	mov    DWORD PTR [eax],edx
c000b88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b892:	83 ec 0c             	sub    esp,0xc
c000b895:	50                   	push   eax
c000b896:	e8 b5 ed ff ff       	call   c000a650 <Device::~Device()>
c000b89b:	83 c4 10             	add    esp,0x10
c000b89e:	90                   	nop
c000b89f:	83 c4 0c             	add    esp,0xc
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Mouse::~Mouse()>:
c000b8a4:	83 ec 0c             	sub    esp,0xc
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ae:	e8 cd ff ff ff       	call   c000b880 <Mouse::~Mouse()>
c000b8b3:	83 c4 10             	add    esp,0x10
c000b8b6:	83 ec 08             	sub    esp,0x8
c000b8b9:	68 58 01 00 00       	push   0x158
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 75 27 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	83 c4 0c             	add    esp,0xc
c000b8cd:	c3                   	ret    

c000b8ce <NIC::getMAC()>:
c000b8ce:	31 c0                	xor    eax,eax
c000b8d0:	31 d2                	xor    edx,edx
c000b8d2:	c3                   	ret    
c000b8d3:	90                   	nop

c000b8d4 <NIC::write(int, unsigned char*, int*)>:
c000b8d4:	b8 01 00 00 00       	mov    eax,0x1
c000b8d9:	c3                   	ret    

c000b8da <NIC::NIC(char const*)>:
c000b8da:	83 ec 0c             	sub    esp,0xc
c000b8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e1:	83 ec 08             	sub    esp,0x8
c000b8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e8:	50                   	push   eax
c000b8e9:	e8 c2 ef ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000b8ee:	83 c4 10             	add    esp,0x10
c000b8f1:	ba 10 ba 02 c0       	mov    edx,0xc002ba10
c000b8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fa:	89 10                	mov    DWORD PTR [eax],edx
c000b8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b900:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b90a:	90                   	nop
c000b90b:	83 c4 0c             	add    esp,0xc
c000b90e:	c3                   	ret    
c000b90f:	90                   	nop

c000b910 <NIC::~NIC()>:
c000b910:	83 ec 0c             	sub    esp,0xc
c000b913:	ba 10 ba 02 c0       	mov    edx,0xc002ba10
c000b918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91c:	89 10                	mov    DWORD PTR [eax],edx
c000b91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b922:	83 ec 0c             	sub    esp,0xc
c000b925:	50                   	push   eax
c000b926:	e8 25 ed ff ff       	call   c000a650 <Device::~Device()>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	90                   	nop
c000b92f:	83 c4 0c             	add    esp,0xc
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <NIC::~NIC()>:
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	83 ec 0c             	sub    esp,0xc
c000b93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93e:	e8 cd ff ff ff       	call   c000b910 <NIC::~NIC()>
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	83 ec 08             	sub    esp,0x8
c000b949:	68 58 01 00 00       	push   0x158
c000b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b952:	e8 e5 26 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	83 c4 0c             	add    esp,0xc
c000b95d:	c3                   	ret    

c000b95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b95e:	55                   	push   ebp
c000b95f:	57                   	push   edi
c000b960:	56                   	push   esi
c000b961:	53                   	push   ebx
c000b962:	81 ec 28 01 00 00    	sub    esp,0x128
c000b968:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000b96f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000b976:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000b97d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000b984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b988:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b98c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b993:	e8 14 f0 ff ff       	call   c000a9ac <Device::getName()>
c000b998:	5a                   	pop    edx
c000b999:	59                   	pop    ecx
c000b99a:	50                   	push   eax
c000b99b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b99f:	55                   	push   ebp
c000b9a0:	e8 ab 4c ff ff       	call   c0000650 <strcpy>
c000b9a5:	5b                   	pop    ebx
c000b9a6:	58                   	pop    eax
c000b9a7:	68 3c ba 02 c0       	push   0xc002ba3c
c000b9ac:	55                   	push   ebp
c000b9ad:	e8 be 4e ff ff       	call   c0000870 <strcat>
c000b9b2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b9b9:	e8 86 4a 00 00       	call   c0010444 <malloc>
c000b9be:	83 c4 0c             	add    esp,0xc
c000b9c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9c9:	89 c3                	mov    ebx,eax
c000b9cb:	57                   	push   edi
c000b9cc:	56                   	push   esi
c000b9cd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b9d4:	55                   	push   ebp
c000b9d5:	50                   	push   eax
c000b9d6:	e8 57 fb ff ff       	call   c000b532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b9db:	83 c4 14             	add    esp,0x14
c000b9de:	53                   	push   ebx
c000b9df:	e8 0e fc ff ff       	call   c000b5f2 <LogicalDisk::assignDriveLetter()>
c000b9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b9e7:	e8 c0 fc ff ff       	call   c000b6ac <LogicalDisk::mount()>
c000b9ec:	58                   	pop    eax
c000b9ed:	5a                   	pop    edx
c000b9ee:	53                   	push   ebx
c000b9ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b9f6:	e8 53 ed ff ff       	call   c000a74e <Device::addChild(Device*)>
c000b9fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ba01:	5b                   	pop    ebx
c000ba02:	5e                   	pop    esi
c000ba03:	5f                   	pop    edi
c000ba04:	5d                   	pop    ebp
c000ba05:	c3                   	ret    

c000ba06 <createPartitionsForDisk(PhysicalDisk*)>:
c000ba06:	55                   	push   ebp
c000ba07:	57                   	push   edi
c000ba08:	56                   	push   esi
c000ba09:	53                   	push   ebx
c000ba0a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ba10:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ba17:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ba1d:	3d 00 02 00 00       	cmp    eax,0x200
c000ba22:	74 27                	je     c000ba4b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ba24:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ba2a:	83 ec 10             	sub    esp,0x10
c000ba2d:	99                   	cdq    
c000ba2e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ba34:	52                   	push   edx
c000ba35:	50                   	push   eax
c000ba36:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ba3a:	c1 e6 0a             	shl    esi,0xa
c000ba3d:	89 fd                	mov    ebp,edi
c000ba3f:	55                   	push   ebp
c000ba40:	56                   	push   esi
c000ba41:	e8 ce 91 01 00       	call   c0024c14 <__udivdi3>
c000ba46:	e9 b9 00 00 00       	jmp    c000bb04 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba50:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ba54:	56                   	push   esi
c000ba55:	6a 01                	push   0x1
c000ba57:	6a 00                	push   0x0
c000ba59:	6a 00                	push   0x0
c000ba5b:	53                   	push   ebx
c000ba5c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba5f:	83 c4 20             	add    esp,0x20
c000ba62:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ba6a:	75 0a                	jne    c000ba76 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ba6c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ba74:	74 2c                	je     c000baa2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ba76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ba7c:	83 ec 10             	sub    esp,0x10
c000ba7f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ba85:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ba8b:	89 f7                	mov    edi,esi
c000ba8d:	c1 ff 1f             	sar    edi,0x1f
c000ba90:	57                   	push   edi
c000ba91:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ba95:	56                   	push   esi
c000ba96:	c1 e0 0a             	shl    eax,0xa
c000ba99:	52                   	push   edx
c000ba9a:	50                   	push   eax
c000ba9b:	e8 74 91 01 00       	call   c0024c14 <__udivdi3>
c000baa0:	eb 62                	jmp    c000bb04 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000baa2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000baa9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000bab0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000bab7:	89 cf                	mov    edi,ecx
c000bab9:	83 e2 7f             	and    edx,0x7f
c000babc:	83 e7 7f             	and    edi,0x7f
c000babf:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000bac2:	83 e0 7f             	and    eax,0x7f
c000bac5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000bac8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000bacf:	83 e0 7f             	and    eax,0x7f
c000bad2:	01 d0                	add    eax,edx
c000bad4:	84 c0                	test   al,al
c000bad6:	89 c5                	mov    ebp,eax
c000bad8:	74 41                	je     c000bb1b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000bada:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000bae0:	83 ec 10             	sub    esp,0x10
c000bae3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bae9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000baef:	89 f7                	mov    edi,esi
c000baf1:	c1 ff 1f             	sar    edi,0x1f
c000baf4:	57                   	push   edi
c000baf5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000baf9:	56                   	push   esi
c000bafa:	c1 e0 0a             	shl    eax,0xa
c000bafd:	52                   	push   edx
c000bafe:	50                   	push   eax
c000baff:	e8 10 91 01 00       	call   c0024c14 <__udivdi3>
c000bb04:	83 c4 14             	add    esp,0x14
c000bb07:	52                   	push   edx
c000bb08:	50                   	push   eax
c000bb09:	6a 00                	push   0x0
c000bb0b:	6a 00                	push   0x0
c000bb0d:	53                   	push   ebx
c000bb0e:	e8 4b fe ff ff       	call   c000b95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000bb13:	83 c4 20             	add    esp,0x20
c000bb16:	e9 73 01 00 00       	jmp    c000bc8e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000bb1b:	89 f0                	mov    eax,esi
c000bb1d:	31 c9                	xor    ecx,ecx
c000bb1f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000bb26:	75 02                	jne    c000bb2a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000bb28:	89 cd                	mov    ebp,ecx
c000bb2a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000bb32:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000bb39:	83 c0 10             	add    eax,0x10
c000bb3c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000bb44:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000bb4b:	c1 e2 08             	shl    edx,0x8
c000bb4e:	c1 e6 10             	shl    esi,0x10
c000bb51:	09 f2                	or     edx,esi
c000bb53:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000bb5a:	09 f2                	or     edx,esi
c000bb5c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000bb63:	c1 e6 18             	shl    esi,0x18
c000bb66:	09 f2                	or     edx,esi
c000bb68:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000bb6f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000bb73:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000bb7a:	c1 e6 10             	shl    esi,0x10
c000bb7d:	c1 e2 08             	shl    edx,0x8
c000bb80:	09 f2                	or     edx,esi
c000bb82:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000bb89:	09 f2                	or     edx,esi
c000bb8b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000bb92:	c1 e6 18             	shl    esi,0x18
c000bb95:	09 f2                	or     edx,esi
c000bb97:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000bb9b:	41                   	inc    ecx
c000bb9c:	83 f9 04             	cmp    ecx,0x4
c000bb9f:	0f 85 7a ff ff ff    	jne    c000bb1f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000bba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bba9:	83 f0 01             	xor    eax,0x1
c000bbac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bbb0:	75 4f                	jne    c000bc01 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000bbb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bbb6:	83 f0 01             	xor    eax,0x1
c000bbb9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bbbd:	75 42                	jne    c000bc01 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000bbbf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000bbc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bbcd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bbd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bbdb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000bbe1:	89 f7                	mov    edi,esi
c000bbe3:	c1 ff 1f             	sar    edi,0x1f
c000bbe6:	57                   	push   edi
c000bbe7:	56                   	push   esi
c000bbe8:	0f a4 c2 0a          	shld   edx,eax,0xa
c000bbec:	52                   	push   edx
c000bbed:	c1 e0 0a             	shl    eax,0xa
c000bbf0:	50                   	push   eax
c000bbf1:	e8 1e 90 01 00       	call   c0024c14 <__udivdi3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbfd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc01:	89 e8                	mov    eax,ebp
c000bc03:	0f b6 e8             	movzx  ebp,al
c000bc06:	85 ed                	test   ebp,ebp
c000bc08:	74 50                	je     c000bc5a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000bc0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bc12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000bc1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc1e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000bc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc26:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000bc2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc3a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000bc3e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000bc42:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000bc46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000bc4a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000bc4e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000bc52:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000bc56:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000bc5a:	31 ed                	xor    ebp,ebp
c000bc5c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000bc60:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000bc64:	89 f8                	mov    eax,edi
c000bc66:	09 f0                	or     eax,esi
c000bc68:	74 1e                	je     c000bc88 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000bc6a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000bc6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000bc72:	89 d1                	mov    ecx,edx
c000bc74:	09 c1                	or     ecx,eax
c000bc76:	74 10                	je     c000bc88 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	57                   	push   edi
c000bc7c:	56                   	push   esi
c000bc7d:	52                   	push   edx
c000bc7e:	50                   	push   eax
c000bc7f:	53                   	push   ebx
c000bc80:	e8 d9 fc ff ff       	call   c000b95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000bc85:	83 c4 20             	add    esp,0x20
c000bc88:	45                   	inc    ebp
c000bc89:	83 fd 04             	cmp    ebp,0x4
c000bc8c:	75 ce                	jne    c000bc5c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000bc8e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000bc94:	5b                   	pop    ebx
c000bc95:	5e                   	pop    esi
c000bc96:	5f                   	pop    edi
c000bc97:	5d                   	pop    ebp
c000bc98:	c3                   	ret    
c000bc99:	66 90                	xchg   ax,ax
c000bc9b:	90                   	nop

c000bc9c <Serial::Serial(char const*)>:
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca3:	83 ec 08             	sub    esp,0x8
c000bca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaa:	50                   	push   eax
c000bcab:	e8 00 ec ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	ba 50 ba 02 c0       	mov    edx,0xc002ba50
c000bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbc:	89 10                	mov    DWORD PTR [eax],edx
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000bccc:	90                   	nop
c000bccd:	83 c4 0c             	add    esp,0xc
c000bcd0:	c3                   	ret    
c000bcd1:	90                   	nop
c000bcd2:	66 90                	xchg   ax,ax

c000bcd4 <Serial::~Serial()>:
c000bcd4:	83 ec 0c             	sub    esp,0xc
c000bcd7:	ba 50 ba 02 c0       	mov    edx,0xc002ba50
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	89 10                	mov    DWORD PTR [eax],edx
c000bce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	50                   	push   eax
c000bcea:	e8 61 e9 ff ff       	call   c000a650 <Device::~Device()>
c000bcef:	83 c4 10             	add    esp,0x10
c000bcf2:	90                   	nop
c000bcf3:	83 c4 0c             	add    esp,0xc
c000bcf6:	c3                   	ret    
c000bcf7:	90                   	nop

c000bcf8 <Serial::~Serial()>:
c000bcf8:	83 ec 0c             	sub    esp,0xc
c000bcfb:	83 ec 0c             	sub    esp,0xc
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 cd ff ff ff       	call   c000bcd4 <Serial::~Serial()>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	83 ec 08             	sub    esp,0x8
c000bd0d:	68 58 01 00 00       	push   0x158
c000bd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd16:	e8 21 23 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000bd1b:	83 c4 10             	add    esp,0x10
c000bd1e:	83 c4 0c             	add    esp,0xc
c000bd21:	c3                   	ret    
c000bd22:	66 90                	xchg   ax,ax

c000bd24 <Timer::Timer(char const*)>:
c000bd24:	83 ec 0c             	sub    esp,0xc
c000bd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2b:	83 ec 08             	sub    esp,0x8
c000bd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd32:	50                   	push   eax
c000bd33:	e8 78 eb ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c000bd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd44:	89 10                	mov    DWORD PTR [eax],edx
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000bd54:	90                   	nop
c000bd55:	83 c4 0c             	add    esp,0xc
c000bd58:	c3                   	ret    
c000bd59:	90                   	nop
c000bd5a:	66 90                	xchg   ax,ax

c000bd5c <Timer::~Timer()>:
c000bd5c:	83 ec 0c             	sub    esp,0xc
c000bd5f:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c000bd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd68:	89 10                	mov    DWORD PTR [eax],edx
c000bd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	50                   	push   eax
c000bd72:	e8 d9 e8 ff ff       	call   c000a650 <Device::~Device()>
c000bd77:	83 c4 10             	add    esp,0x10
c000bd7a:	90                   	nop
c000bd7b:	83 c4 0c             	add    esp,0xc
c000bd7e:	c3                   	ret    
c000bd7f:	90                   	nop

c000bd80 <Timer::~Timer()>:
c000bd80:	83 ec 0c             	sub    esp,0xc
c000bd83:	83 ec 0c             	sub    esp,0xc
c000bd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd8a:	e8 cd ff ff ff       	call   c000bd5c <Timer::~Timer()>
c000bd8f:	83 c4 10             	add    esp,0x10
c000bd92:	83 ec 08             	sub    esp,0x8
c000bd95:	68 5c 01 00 00       	push   0x15c
c000bd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9e:	e8 99 22 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000bda3:	83 c4 10             	add    esp,0x10
c000bda6:	83 c4 0c             	add    esp,0xc
c000bda9:	c3                   	ret    

c000bdaa <Timer::read()>:
c000bdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bdb4:	c3                   	ret    

c000bdb5 <setupTimer(int)>:
c000bdb5:	53                   	push   ebx
c000bdb6:	83 ec 14             	sub    esp,0x14
c000bdb9:	68 5c 01 00 00       	push   0x15c
c000bdbe:	e8 81 46 00 00       	call   c0010444 <malloc>
c000bdc3:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc6:	89 c3                	mov    ebx,eax
c000bdc8:	e8 fb 86 01 00       	call   c00244c8 <PIT::PIT()>
c000bdcd:	58                   	pop    eax
c000bdce:	5a                   	pop    edx
c000bdcf:	53                   	push   ebx
c000bdd0:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c000bdd6:	e8 73 e9 ff ff       	call   c000a74e <Device::addChild(Device*)>
c000bddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bddd:	6a 00                	push   0x0
c000bddf:	6a 00                	push   0x0
c000bde1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bde5:	53                   	push   ebx
c000bde6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bde9:	83 c4 28             	add    esp,0x28
c000bdec:	89 d8                	mov    eax,ebx
c000bdee:	5b                   	pop    ebx
c000bdef:	c3                   	ret    

c000bdf0 <timerHandler(unsigned int)>:
c000bdf0:	57                   	push   edi
c000bdf1:	31 d2                	xor    edx,edx
c000bdf3:	56                   	push   esi
c000bdf4:	53                   	push   ebx
c000bdf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdf9:	01 1d 50 6b 03 c0    	add    DWORD PTR ds:0xc0036b50,ebx
c000bdff:	11 15 54 6b 03 c0    	adc    DWORD PTR ds:0xc0036b54,edx
c000be05:	80 3d 0d 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710d,0x0
c000be0c:	0f 84 46 01 00 00    	je     c000bf58 <timerHandler(unsigned int)+0x168>
c000be12:	fa                   	cli    
c000be13:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000be19:	83 ec 0c             	sub    esp,0xc
c000be1c:	68 40 73 03 c0       	push   0xc0037340
c000be21:	e8 d6 d9 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	84 c0                	test   al,al
c000be2b:	0f 85 a7 00 00 00    	jne    c000bed8 <timerHandler(unsigned int)+0xe8>
c000be31:	83 ec 0c             	sub    esp,0xc
c000be34:	68 40 73 03 c0       	push   0xc0037340
c000be39:	e8 da d9 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	89 c6                	mov    esi,eax
c000be43:	90                   	nop
c000be44:	83 ec 0c             	sub    esp,0xc
c000be47:	68 40 73 03 c0       	push   0xc0037340
c000be4c:	e8 c7 d9 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000be51:	c7 04 24 40 73 03 c0 	mov    DWORD PTR [esp],0xc0037340
c000be58:	89 c7                	mov    edi,eax
c000be5a:	e8 c1 d9 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000be5f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000be62:	83 c4 10             	add    esp,0x10
c000be65:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000be68:	a1 54 6b 03 c0       	mov    eax,ds:0xc0036b54
c000be6d:	39 15 50 6b 03 c0    	cmp    DWORD PTR ds:0xc0036b50,edx
c000be73:	19 c8                	sbb    eax,ecx
c000be75:	72 21                	jb     c000be98 <timerHandler(unsigned int)+0xa8>
c000be77:	83 ec 0c             	sub    esp,0xc
c000be7a:	57                   	push   edi
c000be7b:	e8 f8 b8 00 00       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c000be80:	83 c4 10             	add    esp,0x10
c000be83:	39 fe                	cmp    esi,edi
c000be85:	75 25                	jne    c000beac <timerHandler(unsigned int)+0xbc>
c000be87:	83 ec 0c             	sub    esp,0xc
c000be8a:	68 40 73 03 c0       	push   0xc0037340
c000be8f:	e8 84 d9 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000be94:	89 c6                	mov    esi,eax
c000be96:	eb 10                	jmp    c000bea8 <timerHandler(unsigned int)+0xb8>
c000be98:	51                   	push   ecx
c000be99:	51                   	push   ecx
c000be9a:	57                   	push   edi
c000be9b:	68 40 73 03 c0       	push   0xc0037340
c000bea0:	e8 37 da 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000bea5:	8d 76 00             	lea    esi,[esi+0x0]
c000bea8:	83 c4 10             	add    esp,0x10
c000beab:	90                   	nop
c000beac:	83 ec 0c             	sub    esp,0xc
c000beaf:	68 40 73 03 c0       	push   0xc0037340
c000beb4:	e8 43 d9 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	84 c0                	test   al,al
c000bebe:	75 18                	jne    c000bed8 <timerHandler(unsigned int)+0xe8>
c000bec0:	83 ec 0c             	sub    esp,0xc
c000bec3:	68 40 73 03 c0       	push   0xc0037340
c000bec8:	e8 4b d9 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000becd:	83 c4 10             	add    esp,0x10
c000bed0:	39 f0                	cmp    eax,esi
c000bed2:	0f 85 6c ff ff ff    	jne    c000be44 <timerHandler(unsigned int)+0x54>
c000bed8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bede:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bee1:	85 c0                	test   eax,eax
c000bee3:	74 5f                	je     c000bf44 <timerHandler(unsigned int)+0x154>
c000bee5:	80 3d 0c 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710c,0x0
c000beec:	74 56                	je     c000bf44 <timerHandler(unsigned int)+0x154>
c000beee:	3d e8 03 00 00       	cmp    eax,0x3e8
c000bef3:	76 23                	jbe    c000bf18 <timerHandler(unsigned int)+0x128>
c000bef5:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000bef9:	75 11                	jne    c000bf0c <timerHandler(unsigned int)+0x11c>
c000befb:	52                   	push   edx
c000befc:	52                   	push   edx
c000befd:	50                   	push   eax
c000befe:	68 df ba 02 c0       	push   0xc002badf
c000bf03:	e8 5e b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	90                   	nop
c000bf0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000bf11:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000bf18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bf1e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bf21:	39 d8                	cmp    eax,ebx
c000bf23:	73 0b                	jae    c000bf30 <timerHandler(unsigned int)+0x140>
c000bf25:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000bf2c:	eb 0e                	jmp    c000bf3c <timerHandler(unsigned int)+0x14c>
c000bf2e:	66 90                	xchg   ax,ax
c000bf30:	89 c1                	mov    ecx,eax
c000bf32:	29 d9                	sub    ecx,ebx
c000bf34:	39 d8                	cmp    eax,ebx
c000bf36:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000bf39:	75 09                	jne    c000bf44 <timerHandler(unsigned int)+0x154>
c000bf3b:	90                   	nop
c000bf3c:	e8 df b4 00 00       	call   c0017420 <schedule()>
c000bf41:	8d 76 00             	lea    esi,[esi+0x0]
c000bf44:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000bf4b:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000bf52:	75 04                	jne    c000bf58 <timerHandler(unsigned int)+0x168>
c000bf54:	fb                   	sti    
c000bf55:	8d 76 00             	lea    esi,[esi+0x0]
c000bf58:	5b                   	pop    ebx
c000bf59:	5e                   	pop    esi
c000bf5a:	5f                   	pop    edi
c000bf5b:	c3                   	ret    

c000bf5c <VCache::VCache(PhysicalDisk*)>:
c000bf5c:	53                   	push   ebx
c000bf5d:	83 ec 18             	sub    esp,0x18
c000bf60:	ba 88 bb 02 c0       	mov    edx,0xc002bb88
c000bf65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf69:	89 10                	mov    DWORD PTR [eax],edx
c000bf6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000bf76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000bf81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf85:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000bf8c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000bf93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf97:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000bf9e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000bfa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bfb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000bfc3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000bfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bfd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000bfda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfde:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bfe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000bfed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000bff5:	83 ec 0c             	sub    esp,0xc
c000bff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bffc:	e8 43 44 00 00       	call   c0010444 <malloc>
c000c001:	83 c4 10             	add    esp,0x10
c000c004:	89 c3                	mov    ebx,eax
c000c006:	83 ec 0c             	sub    esp,0xc
c000c009:	53                   	push   ebx
c000c00a:	e8 69 48 00 00       	call   c0010878 <Mutex::Mutex()>
c000c00f:	83 c4 10             	add    esp,0x10
c000c012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c016:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c021:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c028:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c033:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c040:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c044:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c04a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c050:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c054:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c057:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c05a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c062:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c066:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c06c:	05 00 01 00 00       	add    eax,0x100
c000c071:	c1 e0 04             	shl    eax,0x4
c000c074:	83 ec 0c             	sub    esp,0xc
c000c077:	50                   	push   eax
c000c078:	e8 c7 43 00 00       	call   c0010444 <malloc>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	89 c2                	mov    edx,eax
c000c082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c08d:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000c094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c098:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c09c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c0a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c0a6:	89 d0                	mov    eax,edx
c000c0a8:	c1 e0 02             	shl    eax,0x2
c000c0ab:	01 d0                	add    eax,edx
c000c0ad:	c1 e0 04             	shl    eax,0x4
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	50                   	push   eax
c000c0b4:	e8 8b 43 00 00       	call   c0010444 <malloc>
c000c0b9:	83 c4 10             	add    esp,0x10
c000c0bc:	89 c2                	mov    edx,eax
c000c0be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0c2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c0c5:	90                   	nop
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	5b                   	pop    ebx
c000c0ca:	c3                   	ret    
c000c0cb:	90                   	nop

c000c0cc <VCache::invalidateReadBuffer()>:
c000c0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c0d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c0da:	c3                   	ret    
c000c0db:	90                   	nop

c000c0dc <VCache::writeWriteBuffer()>:
c000c0dc:	53                   	push   ebx
c000c0dd:	83 ec 08             	sub    esp,0x8
c000c0e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c0e8:	74 1e                	je     c000c108 <VCache::writeWriteBuffer()+0x2c>
c000c0ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c0ed:	83 ec 0c             	sub    esp,0xc
c000c0f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c0f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c0f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c0fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c0fe:	50                   	push   eax
c000c0ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c102:	83 c4 20             	add    esp,0x20
c000c105:	8d 76 00             	lea    esi,[esi+0x0]
c000c108:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c10f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c116:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c11a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c121:	83 c4 08             	add    esp,0x8
c000c124:	5b                   	pop    ebx
c000c125:	c3                   	ret    
c000c126:	66 90                	xchg   ax,ax

c000c128 <VCache::~VCache()>:
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ba 88 bb 02 c0       	mov    edx,0xc002bb88
c000c130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c134:	89 10                	mov    DWORD PTR [eax],edx
c000c136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c13d:	0f b6 c0             	movzx  eax,al
c000c140:	85 c0                	test   eax,eax
c000c142:	74 10                	je     c000c154 <VCache::~VCache()+0x2c>
c000c144:	83 ec 0c             	sub    esp,0xc
c000c147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14b:	e8 8c ff ff ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	90                   	nop
c000c154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c158:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c15b:	83 ec 0c             	sub    esp,0xc
c000c15e:	50                   	push   eax
c000c15f:	e8 f0 42 00 00       	call   c0010454 <free>
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c16e:	83 ec 0c             	sub    esp,0xc
c000c171:	50                   	push   eax
c000c172:	e8 dd 42 00 00       	call   c0010454 <free>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	90                   	nop
c000c17b:	83 c4 0c             	add    esp,0xc
c000c17e:	c3                   	ret    
c000c17f:	90                   	nop

c000c180 <VCache::~VCache()>:
c000c180:	83 ec 0c             	sub    esp,0xc
c000c183:	83 ec 0c             	sub    esp,0xc
c000c186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18a:	e8 99 ff ff ff       	call   c000c128 <VCache::~VCache()>
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	83 ec 08             	sub    esp,0x8
c000c195:	6a 44                	push   0x44
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 9c 1e 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	83 c4 0c             	add    esp,0xc
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <VCache::write(unsigned long long, int, void*)>:
c000c1a8:	55                   	push   ebp
c000c1a9:	57                   	push   edi
c000c1aa:	56                   	push   esi
c000c1ab:	53                   	push   ebx
c000c1ac:	83 ec 1c             	sub    esp,0x1c
c000c1af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c1b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c1b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c1bf:	e8 60 af 00 00       	call   c0017124 <KeDisablePreemption()>
c000c1c4:	b9 00 10 00 00       	mov    ecx,0x1000
c000c1c9:	50                   	push   eax
c000c1ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c1cd:	0f af c3             	imul   eax,ebx
c000c1d0:	05 ff 0f 00 00       	add    eax,0xfff
c000c1d5:	99                   	cdq    
c000c1d6:	f7 f9                	idiv   ecx
c000c1d8:	50                   	push   eax
c000c1d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c1dd:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c1e3:	e8 4e 89 00 00       	call   c0014b36 <VAS::canLockPages(unsigned long, int)>
c000c1e8:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c1f4:	74 2a                	je     c000c220 <VCache::write(unsigned long long, int, void*)+0x78>
c000c1f6:	50                   	push   eax
c000c1f7:	b9 00 10 00 00       	mov    ecx,0x1000
c000c1fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c1ff:	0f af c3             	imul   eax,ebx
c000c202:	05 ff 0f 00 00       	add    eax,0xfff
c000c207:	99                   	cdq    
c000c208:	f7 f9                	idiv   ecx
c000c20a:	50                   	push   eax
c000c20b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c20f:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c215:	e8 ba 8b 00 00       	call   c0014dd4 <VAS::lockPages(unsigned long, int)>
c000c21a:	83 c4 10             	add    esp,0x10
c000c21d:	8d 76 00             	lea    esi,[esi+0x0]
c000c220:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000c224:	74 0e                	je     c000c234 <VCache::write(unsigned long long, int, void*)+0x8c>
c000c226:	83 ec 0c             	sub    esp,0xc
c000c229:	55                   	push   ebp
c000c22a:	e8 9d fe ff ff       	call   c000c0cc <VCache::invalidateReadBuffer()>
c000c22f:	83 c4 10             	add    esp,0x10
c000c232:	66 90                	xchg   ax,ax
c000c234:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000c238:	74 72                	je     c000c2ac <VCache::write(unsigned long long, int, void*)+0x104>
c000c23a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000c23d:	89 c8                	mov    eax,ecx
c000c23f:	99                   	cdq    
c000c240:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000c243:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000c246:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c256:	31 f0                	xor    eax,esi
c000c258:	31 fa                	xor    edx,edi
c000c25a:	09 d0                	or     eax,edx
c000c25c:	75 42                	jne    c000c2a0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000c25e:	83 fb 01             	cmp    ebx,0x1
c000c261:	75 3d                	jne    c000c2a0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000c263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c266:	89 cf                	mov    edi,ecx
c000c268:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c26c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c272:	0f af f8             	imul   edi,eax
c000c275:	89 c1                	mov    ecx,eax
c000c277:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000c27a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c27c:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000c27f:	40                   	inc    eax
c000c280:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000c283:	83 f8 50             	cmp    eax,0x50
c000c286:	0f 85 a8 00 00 00    	jne    c000c334 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c28c:	83 ec 0c             	sub    esp,0xc
c000c28f:	55                   	push   ebp
c000c290:	e8 47 fe ff ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	e9 97 00 00 00       	jmp    c000c334 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c29d:	8d 76 00             	lea    esi,[esi+0x0]
c000c2a0:	83 ec 0c             	sub    esp,0xc
c000c2a3:	55                   	push   ebp
c000c2a4:	e8 33 fe ff ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	83 fb 4f             	cmp    ebx,0x4f
c000c2af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2b2:	7f 20                	jg     c000c2d4 <VCache::write(unsigned long long, int, void*)+0x12c>
c000c2b4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000c2b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c2bb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000c2be:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000c2c1:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000c2c4:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000c2c8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c2ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c2d0:	eb 62                	jmp    c000c334 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c2dd:	53                   	push   ebx
c000c2de:	57                   	push   edi
c000c2df:	56                   	push   esi
c000c2e0:	50                   	push   eax
c000c2e1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c2e4:	83 c4 20             	add    esp,0x20
c000c2e7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c2ec:	89 c6                	mov    esi,eax
c000c2ee:	74 28                	je     c000c318 <VCache::write(unsigned long long, int, void*)+0x170>
c000c2f0:	52                   	push   edx
c000c2f1:	b9 00 10 00 00       	mov    ecx,0x1000
c000c2f6:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c2fa:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c300:	99                   	cdq    
c000c301:	f7 f9                	idiv   ecx
c000c303:	50                   	push   eax
c000c304:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c308:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c30e:	e8 5f 88 00 00       	call   c0014b72 <VAS::unlockPages(unsigned long, int)>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	66 90                	xchg   ax,ax
c000c318:	e8 2f ae 00 00       	call   c001714c <KeRestorePreemption()>
c000c31d:	85 f6                	test   esi,esi
c000c31f:	74 4b                	je     c000c36c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	68 40 bb 02 c0       	push   0xc002bb40
c000c329:	e8 38 ac ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	eb 39                	jmp    c000c36c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c333:	90                   	nop
c000c334:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c339:	74 29                	je     c000c364 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000c33b:	50                   	push   eax
c000c33c:	b9 00 10 00 00       	mov    ecx,0x1000
c000c341:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c345:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c34b:	99                   	cdq    
c000c34c:	f7 f9                	idiv   ecx
c000c34e:	50                   	push   eax
c000c34f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c353:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c359:	e8 14 88 00 00       	call   c0014b72 <VAS::unlockPages(unsigned long, int)>
c000c35e:	83 c4 10             	add    esp,0x10
c000c361:	8d 76 00             	lea    esi,[esi+0x0]
c000c364:	e8 e3 ad 00 00       	call   c001714c <KeRestorePreemption()>
c000c369:	31 f6                	xor    esi,esi
c000c36b:	90                   	nop
c000c36c:	83 c4 1c             	add    esp,0x1c
c000c36f:	89 f0                	mov    eax,esi
c000c371:	5b                   	pop    ebx
c000c372:	5e                   	pop    esi
c000c373:	5f                   	pop    edi
c000c374:	5d                   	pop    ebp
c000c375:	c3                   	ret    

c000c376 <VCache::read(unsigned long long, int, void*)>:
c000c376:	55                   	push   ebp
c000c377:	bd 00 10 00 00       	mov    ebp,0x1000
c000c37c:	57                   	push   edi
c000c37d:	56                   	push   esi
c000c37e:	53                   	push   ebx
c000c37f:	83 ec 2c             	sub    esp,0x2c
c000c382:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c386:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000c38a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c38e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000c392:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c396:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c39a:	e8 85 ad 00 00       	call   c0017124 <KeDisablePreemption()>
c000c39f:	50                   	push   eax
c000c3a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c3a3:	0f af c6             	imul   eax,esi
c000c3a6:	05 ff 0f 00 00       	add    eax,0xfff
c000c3ab:	99                   	cdq    
c000c3ac:	f7 fd                	idiv   ebp
c000c3ae:	50                   	push   eax
c000c3af:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c3b3:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c3b9:	e8 78 87 00 00       	call   c0014b36 <VAS::canLockPages(unsigned long, int)>
c000c3be:	83 c4 10             	add    esp,0x10
c000c3c1:	84 c0                	test   al,al
c000c3c3:	89 c7                	mov    edi,eax
c000c3c5:	74 25                	je     c000c3ec <VCache::read(unsigned long long, int, void*)+0x76>
c000c3c7:	50                   	push   eax
c000c3c8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c3cb:	0f af c6             	imul   eax,esi
c000c3ce:	05 ff 0f 00 00       	add    eax,0xfff
c000c3d3:	99                   	cdq    
c000c3d4:	f7 fd                	idiv   ebp
c000c3d6:	50                   	push   eax
c000c3d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c3db:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c3e1:	e8 ee 89 00 00       	call   c0014dd4 <VAS::lockPages(unsigned long, int)>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3ec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c3f0:	74 0e                	je     c000c400 <VCache::read(unsigned long long, int, void*)+0x8a>
c000c3f2:	83 ec 0c             	sub    esp,0xc
c000c3f5:	53                   	push   ebx
c000c3f6:	e8 e1 fc ff ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c000c3fb:	83 c4 10             	add    esp,0x10
c000c3fe:	66 90                	xchg   ax,ax
c000c400:	83 fe 01             	cmp    esi,0x1
c000c403:	0f 85 fb 00 00 00    	jne    c000c504 <VCache::read(unsigned long long, int, void*)+0x18e>
c000c409:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c40c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000c413:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c417:	0f 85 e7 00 00 00    	jne    c000c504 <VCache::read(unsigned long long, int, void*)+0x18e>
c000c41d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000c420:	89 ee                	mov    esi,ebp
c000c422:	f7 de                	neg    esi
c000c424:	89 f0                	mov    eax,esi
c000c426:	c1 f8 1f             	sar    eax,0x1f
c000c429:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c42d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c431:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000c435:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c439:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c43d:	89 ca                	mov    edx,ecx
c000c43f:	89 f9                	mov    ecx,edi
c000c441:	0f b6 f9             	movzx  edi,cl
c000c444:	89 f0                	mov    eax,esi
c000c446:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c44a:	74 0c                	je     c000c458 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c44c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000c44f:	75 07                	jne    c000c458 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c451:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000c454:	74 56                	je     c000c4ac <VCache::read(unsigned long long, int, void*)+0x136>
c000c456:	66 90                	xchg   ax,ax
c000c458:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c45c:	83 ec 0c             	sub    esp,0xc
c000c45f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c462:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c466:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c469:	8b 37                	mov    esi,DWORD PTR [edi]
c000c46b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c46e:	55                   	push   ebp
c000c46f:	52                   	push   edx
c000c470:	50                   	push   eax
c000c471:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c475:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000c478:	83 c4 20             	add    esp,0x20
c000c47b:	85 c0                	test   eax,eax
c000c47d:	89 c5                	mov    ebp,eax
c000c47f:	74 2b                	je     c000c4ac <VCache::read(unsigned long long, int, void*)+0x136>
c000c481:	83 ec 0c             	sub    esp,0xc
c000c484:	68 58 bb 02 c0       	push   0xc002bb58
c000c489:	e8 d8 aa ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c496:	0f 84 bc 00 00 00    	je     c000c558 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000c49c:	56                   	push   esi
c000c49d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c4a0:	05 ff 0f 00 00       	add    eax,0xfff
c000c4a5:	e9 92 00 00 00       	jmp    c000c53c <VCache::read(unsigned long long, int, void*)+0x1c6>
c000c4aa:	66 90                	xchg   ax,ax
c000c4ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c4af:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000c4b3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c4b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c4bc:	8d 70 ff             	lea    esi,[eax-0x1]
c000c4bf:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c4c3:	0f af f1             	imul   esi,ecx
c000c4c6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c4c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c4cb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c4d0:	74 26                	je     c000c4f8 <VCache::read(unsigned long long, int, void*)+0x182>
c000c4d2:	51                   	push   ecx
c000c4d3:	b9 00 10 00 00       	mov    ecx,0x1000
c000c4d8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c4db:	05 ff 0f 00 00       	add    eax,0xfff
c000c4e0:	99                   	cdq    
c000c4e1:	f7 f9                	idiv   ecx
c000c4e3:	50                   	push   eax
c000c4e4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c4e8:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c4ee:	e8 7f 86 00 00       	call   c0014b72 <VAS::unlockPages(unsigned long, int)>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	66 90                	xchg   ax,ax
c000c4f8:	e8 4f ac 00 00       	call   c001714c <KeRestorePreemption()>
c000c4fd:	31 ed                	xor    ebp,ebp
c000c4ff:	eb 5f                	jmp    c000c560 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000c501:	8d 76 00             	lea    esi,[esi+0x0]
c000c504:	83 ec 0c             	sub    esp,0xc
c000c507:	53                   	push   ebx
c000c508:	e8 bf fb ff ff       	call   c000c0cc <VCache::invalidateReadBuffer()>
c000c50d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c510:	5a                   	pop    edx
c000c511:	8b 10                	mov    edx,DWORD PTR [eax]
c000c513:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c517:	56                   	push   esi
c000c518:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c51c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c520:	50                   	push   eax
c000c521:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c524:	83 c4 20             	add    esp,0x20
c000c527:	89 c5                	mov    ebp,eax
c000c529:	89 f8                	mov    eax,edi
c000c52b:	84 c0                	test   al,al
c000c52d:	74 29                	je     c000c558 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000c52f:	50                   	push   eax
c000c530:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c534:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c53a:	66 90                	xchg   ax,ax
c000c53c:	b9 00 10 00 00       	mov    ecx,0x1000
c000c541:	99                   	cdq    
c000c542:	f7 f9                	idiv   ecx
c000c544:	50                   	push   eax
c000c545:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c549:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c54f:	e8 1e 86 00 00       	call   c0014b72 <VAS::unlockPages(unsigned long, int)>
c000c554:	83 c4 10             	add    esp,0x10
c000c557:	90                   	nop
c000c558:	e8 ef ab 00 00       	call   c001714c <KeRestorePreemption()>
c000c55d:	8d 76 00             	lea    esi,[esi+0x0]
c000c560:	83 c4 2c             	add    esp,0x2c
c000c563:	89 e8                	mov    eax,ebp
c000c565:	5b                   	pop    ebx
c000c566:	5e                   	pop    esi
c000c567:	5f                   	pop    edi
c000c568:	5d                   	pop    ebp
c000c569:	c3                   	ret    

c000c56a <Video::putrect(int, int, int, int, unsigned int)>:
c000c56a:	55                   	push   ebp
c000c56b:	57                   	push   edi
c000c56c:	56                   	push   esi
c000c56d:	53                   	push   ebx
c000c56e:	83 ec 1c             	sub    esp,0x1c
c000c571:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c575:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c579:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c57d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c581:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c589:	01 df                	add    edi,ebx
c000c58b:	39 fb                	cmp    ebx,edi
c000c58d:	7d 1f                	jge    c000c5ae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c58f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c593:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c597:	7d 12                	jge    c000c5ab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c599:	8b 16                	mov    edx,DWORD PTR [esi]
c000c59b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c59f:	53                   	push   ebx
c000c5a0:	55                   	push   ebp
c000c5a1:	45                   	inc    ebp
c000c5a2:	56                   	push   esi
c000c5a3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c5a6:	83 c4 10             	add    esp,0x10
c000c5a9:	eb e8                	jmp    c000c593 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c5ab:	43                   	inc    ebx
c000c5ac:	eb dd                	jmp    c000c58b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c5ae:	83 c4 1c             	add    esp,0x1c
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	31 ff                	xor    edi,edi
c000c5ba:	56                   	push   esi
c000c5bb:	53                   	push   ebx
c000c5bc:	83 ec 1c             	sub    esp,0x1c
c000c5bf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c5c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c5ce:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c5d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c5d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c5db:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c5df:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c5e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c5e6:	01 f9                	add    ecx,edi
c000c5e8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c5ec:	7d 2f                	jge    c000c61d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c5ee:	31 f6                	xor    esi,esi
c000c5f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5f4:	01 f2                	add    edx,esi
c000c5f6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c5fa:	7d 1a                	jge    c000c616 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c5fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5ff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c602:	46                   	inc    esi
c000c603:	51                   	push   ecx
c000c604:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c608:	52                   	push   edx
c000c609:	55                   	push   ebp
c000c60a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c614:	eb da                	jmp    c000c5f0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c616:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c61a:	47                   	inc    edi
c000c61b:	eb c5                	jmp    c000c5e2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c61d:	83 c4 1c             	add    esp,0x1c
c000c620:	5b                   	pop    ebx
c000c621:	5e                   	pop    esi
c000c622:	5f                   	pop    edi
c000c623:	5d                   	pop    ebp
c000c624:	c3                   	ret    
c000c625:	90                   	nop

c000c626 <Video::blit(unsigned int*, int, int, int, int)>:
c000c626:	55                   	push   ebp
c000c627:	ba 00 00 00 00       	mov    edx,0x0
c000c62c:	57                   	push   edi
c000c62d:	56                   	push   esi
c000c62e:	53                   	push   ebx
c000c62f:	83 ec 1c             	sub    esp,0x1c
c000c632:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c636:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c63a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c63e:	85 c0                	test   eax,eax
c000c640:	0f 49 d0             	cmovns edx,eax
c000c643:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000c64a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c64e:	89 eb                	mov    ebx,ebp
c000c650:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c654:	01 ea                	add    edx,ebp
c000c656:	39 da                	cmp    edx,ebx
c000c658:	7e 54                	jle    c000c6ae <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c65a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c660:	7c 4c                	jl     c000c6ae <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c662:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c666:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c66a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c66e:	01 c1                	add    ecx,eax
c000c670:	39 f9                	cmp    ecx,edi
c000c672:	7e 2f                	jle    c000c6a3 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000c674:	83 c2 04             	add    edx,0x4
c000c677:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c67d:	7c 21                	jl     c000c6a0 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000c67f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c683:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c685:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000c688:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c68c:	55                   	push   ebp
c000c68d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c691:	56                   	push   esi
c000c692:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c695:	83 c4 10             	add    esp,0x10
c000c698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6a0:	47                   	inc    edi
c000c6a1:	eb c7                	jmp    c000c66a <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000c6a3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c6a7:	43                   	inc    ebx
c000c6a8:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000c6ac:	eb a2                	jmp    c000c650 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000c6ae:	83 c4 1c             	add    esp,0x1c
c000c6b1:	5b                   	pop    ebx
c000c6b2:	5e                   	pop    esi
c000c6b3:	5f                   	pop    edi
c000c6b4:	5d                   	pop    ebp
c000c6b5:	c3                   	ret    

c000c6b6 <Video::clearScreen(unsigned int)>:
c000c6b6:	83 ec 14             	sub    esp,0x14
c000c6b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c6bd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c6c9:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c6cf:	6a 00                	push   0x0
c000c6d1:	6a 00                	push   0x0
c000c6d3:	50                   	push   eax
c000c6d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c6d7:	83 c4 2c             	add    esp,0x2c
c000c6da:	c3                   	ret    
c000c6db:	90                   	nop

c000c6dc <Video::putpixel(int, int, unsigned int)>:
c000c6dc:	c7 44 24 04 90 bb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bb90
c000c6e4:	e9 af 41 00 00       	jmp    c0010898 <KePanic(char const*)>
c000c6e9:	90                   	nop

c000c6ea <Video::readPixelApprox(int, int)>:
c000c6ea:	83 ec 18             	sub    esp,0x18
c000c6ed:	68 b1 bb 02 c0       	push   0xc002bbb1
c000c6f2:	e8 a1 41 00 00       	call   c0010898 <KePanic(char const*)>
c000c6f7:	31 c0                	xor    eax,eax
c000c6f9:	83 c4 1c             	add    esp,0x1c
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <Video::Video(char const*)>:
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c705:	83 ec 08             	sub    esp,0x8
c000c708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70c:	50                   	push   eax
c000c70d:	e8 9e e1 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000c712:	83 c4 10             	add    esp,0x10
c000c715:	ba 54 bc 02 c0       	mov    edx,0xc002bc54
c000c71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c71e:	89 10                	mov    DWORD PTR [eax],edx
c000c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c724:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c72e:	90                   	nop
c000c72f:	83 c4 0c             	add    esp,0xc
c000c732:	c3                   	ret    
c000c733:	90                   	nop

c000c734 <Video::~Video()>:
c000c734:	83 ec 0c             	sub    esp,0xc
c000c737:	ba 54 bc 02 c0       	mov    edx,0xc002bc54
c000c73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c740:	89 10                	mov    DWORD PTR [eax],edx
c000c742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c746:	83 ec 0c             	sub    esp,0xc
c000c749:	50                   	push   eax
c000c74a:	e8 01 df ff ff       	call   c000a650 <Device::~Device()>
c000c74f:	83 c4 10             	add    esp,0x10
c000c752:	90                   	nop
c000c753:	83 c4 0c             	add    esp,0xc
c000c756:	c3                   	ret    
c000c757:	90                   	nop

c000c758 <Video::~Video()>:
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	83 ec 0c             	sub    esp,0xc
c000c75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c762:	e8 cd ff ff ff       	call   c000c734 <Video::~Video()>
c000c767:	83 c4 10             	add    esp,0x10
c000c76a:	83 ec 08             	sub    esp,0x8
c000c76d:	68 64 11 00 00       	push   0x1164
c000c772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c776:	e8 c1 18 00 00       	call   c000e03c <operator delete(void*, unsigned long)>
c000c77b:	83 c4 10             	add    esp,0x10
c000c77e:	83 c4 0c             	add    esp,0xc
c000c781:	c3                   	ret    

c000c782 <Video::isMonochrome()>:
c000c782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c786:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c78c:	c3                   	ret    
c000c78d:	90                   	nop

c000c78e <Video::getWidth()>:
c000c78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c792:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c798:	c3                   	ret    
c000c799:	90                   	nop

c000c79a <Video::getHeight()>:
c000c79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c79e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c7a4:	c3                   	ret    
c000c7a5:	90                   	nop

c000c7a6 <Video::savePixelsInSquare(int, int)>:
c000c7a6:	55                   	push   ebp
c000c7a7:	57                   	push   edi
c000c7a8:	56                   	push   esi
c000c7a9:	53                   	push   ebx
c000c7aa:	83 ec 1c             	sub    esp,0x1c
c000c7ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c7b1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7b5:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000c7bb:	89 de                	mov    esi,ebx
c000c7bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c1:	53                   	push   ebx
c000c7c2:	e8 d3 ff ff ff       	call   c000c79a <Video::getHeight()>
c000c7c7:	59                   	pop    ecx
c000c7c8:	39 c7                	cmp    edi,eax
c000c7ca:	7d 36                	jge    c000c802 <Video::savePixelsInSquare(int, int)+0x5c>
c000c7cc:	31 ed                	xor    ebp,ebp
c000c7ce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c7d2:	53                   	push   ebx
c000c7d3:	01 e9                	add    ecx,ebp
c000c7d5:	e8 b4 ff ff ff       	call   c000c78e <Video::getWidth()>
c000c7da:	5a                   	pop    edx
c000c7db:	39 c8                	cmp    eax,ecx
c000c7dd:	7e 19                	jle    c000c7f8 <Video::savePixelsInSquare(int, int)+0x52>
c000c7df:	50                   	push   eax
c000c7e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e2:	57                   	push   edi
c000c7e3:	51                   	push   ecx
c000c7e4:	53                   	push   ebx
c000c7e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	89 84 ae 64 01 00 00 	mov    DWORD PTR [esi+ebp*4+0x164],eax
c000c7f2:	45                   	inc    ebp
c000c7f3:	83 fd 20             	cmp    ebp,0x20
c000c7f6:	75 d6                	jne    c000c7ce <Video::savePixelsInSquare(int, int)+0x28>
c000c7f8:	83 ee 80             	sub    esi,0xffffff80
c000c7fb:	47                   	inc    edi
c000c7fc:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
c000c800:	75 bf                	jne    c000c7c1 <Video::savePixelsInSquare(int, int)+0x1b>
c000c802:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c000c808:	83 c4 1c             	add    esp,0x1c
c000c80b:	5b                   	pop    ebx
c000c80c:	5e                   	pop    esi
c000c80d:	5f                   	pop    edi
c000c80e:	5d                   	pop    ebp
c000c80f:	c3                   	ret    

c000c810 <Video::drawCursor(int, int, unsigned int*, int)>:
c000c810:	55                   	push   ebp
c000c811:	57                   	push   edi
c000c812:	56                   	push   esi
c000c813:	53                   	push   ebx
c000c814:	83 ec 2c             	sub    esp,0x2c
c000c817:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c81b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c81f:	83 f8 01             	cmp    eax,0x1
c000c822:	19 c9                	sbb    ecx,ecx
c000c824:	31 db                	xor    ebx,ebx
c000c826:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c82a:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c82e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c832:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c83a:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c842:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c846:	01 d8                	add    eax,ebx
c000c848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c84c:	56                   	push   esi
c000c84d:	e8 48 ff ff ff       	call   c000c79a <Video::getHeight()>
c000c852:	59                   	pop    ecx
c000c853:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c857:	0f 8e 80 00 00 00    	jle    c000c8dd <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c85d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c861:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c868:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c86c:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c877:	09 e8                	or     eax,ebp
c000c879:	74 47                	je     c000c8c2 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c87b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c87f:	89 f8                	mov    eax,edi
c000c881:	83 c0 1f             	add    eax,0x1f
c000c884:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c888:	56                   	push   esi
c000c889:	e8 00 ff ff ff       	call   c000c78e <Video::getWidth()>
c000c88e:	5a                   	pop    edx
c000c88f:	39 c7                	cmp    edi,eax
c000c891:	7d 2f                	jge    c000c8c2 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c893:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c899:	74 33                	je     c000c8ce <Video::drawCursor(int, int, unsigned int*, int)+0xbe>
c000c89b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a5:	57                   	push   edi
c000c8a6:	56                   	push   esi
c000c8a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c8aa:	83 c4 10             	add    esp,0x10
c000c8ad:	d1 ed                	shr    ebp,1
c000c8af:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c8b3:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000c8b7:	74 09                	je     c000c8c2 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c8b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8bd:	47                   	inc    edi
c000c8be:	09 e8                	or     eax,ebp
c000c8c0:	75 c6                	jne    c000c888 <Video::drawCursor(int, int, unsigned int*, int)+0x78>
c000c8c2:	43                   	inc    ebx
c000c8c3:	83 fb 20             	cmp    ebx,0x20
c000c8c6:	0f 85 76 ff ff ff    	jne    c000c842 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c8cc:	eb 0f                	jmp    c000c8dd <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c8ce:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c8d3:	74 d8                	je     c000c8ad <Video::drawCursor(int, int, unsigned int*, int)+0x9d>
c000c8d5:	8b 06                	mov    eax,DWORD PTR [esi]
c000c8d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8db:	eb c4                	jmp    c000c8a1 <Video::drawCursor(int, int, unsigned int*, int)+0x91>
c000c8dd:	83 c4 2c             	add    esp,0x2c
c000c8e0:	5b                   	pop    ebx
c000c8e1:	5e                   	pop    esi
c000c8e2:	5f                   	pop    edi
c000c8e3:	5d                   	pop    ebp
c000c8e4:	c3                   	ret    
c000c8e5:	90                   	nop

c000c8e6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c8e6:	55                   	push   ebp
c000c8e7:	57                   	push   edi
c000c8e8:	56                   	push   esi
c000c8e9:	53                   	push   ebx
c000c8ea:	83 ec 48             	sub    esp,0x48
c000c8ed:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c8f1:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c8f5:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c8f9:	c1 e0 08             	shl    eax,0x8
c000c8fc:	01 d0                	add    eax,edx
c000c8fe:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c902:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c906:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c90a:	c1 e0 08             	shl    eax,0x8
c000c90d:	01 d0                	add    eax,edx
c000c90f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c917:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000c91c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c920:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c924:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c92b:	50                   	push   eax
c000c92c:	e8 13 3b 00 00       	call   c0010444 <malloc>
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	85 c0                	test   eax,eax
c000c936:	89 c5                	mov    ebp,eax
c000c938:	75 10                	jne    c000c94a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000c93a:	83 ec 0c             	sub    esp,0xc
c000c93d:	68 dc bb 02 c0       	push   0xc002bbdc
c000c942:	e8 51 3f 00 00       	call   c0010898 <KePanic(char const*)>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	52                   	push   edx
c000c94b:	bf 12 00 00 00       	mov    edi,0x12
c000c950:	52                   	push   edx
c000c951:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c955:	50                   	push   eax
c000c956:	68 ec bb 02 c0       	push   0xc002bbec
c000c95b:	e8 06 a6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c960:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c963:	83 e0 20             	and    eax,0x20
c000c966:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c96a:	85 c0                	test   eax,eax
c000c96c:	59                   	pop    ecx
c000c96d:	0f 94 c0             	sete   al
c000c970:	0f b6 c0             	movzx  eax,al
c000c973:	5e                   	pop    esi
c000c974:	50                   	push   eax
c000c975:	68 f6 bb 02 c0       	push   0xc002bbf6
c000c97a:	e8 e7 a5 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c97f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000c983:	83 c4 10             	add    esp,0x10
c000c986:	85 c0                	test   eax,eax
c000c988:	89 c2                	mov    edx,eax
c000c98a:	74 11                	je     c000c99d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000c98c:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000c990:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c994:	c1 ff 03             	sar    edi,0x3
c000c997:	0f af f9             	imul   edi,ecx
c000c99a:	83 c7 12             	add    edi,0x12
c000c99d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c9a2:	74 07                	je     c000c9ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000c9a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c9a9:	75 12                	jne    c000c9bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000c9ab:	83 ec 0c             	sub    esp,0xc
c000c9ae:	68 04 bc 02 c0       	push   0xc002bc04
c000c9b3:	e8 ae a5 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c9b8:	e9 aa 02 00 00       	jmp    c000cc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000c9bd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c9c1:	83 f9 02             	cmp    ecx,0x2
c000c9c4:	74 0e                	je     c000c9d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000c9c6:	83 f9 0a             	cmp    ecx,0xa
c000c9c9:	0f 84 d1 00 00 00    	je     c000caa0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000c9cf:	e9 7e 02 00 00       	jmp    c000cc52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000c9d4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c9d9:	75 0e                	jne    c000c9e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c9db:	84 d2                	test   dl,dl
c000c9dd:	75 0a                	jne    c000c9e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c9df:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c9e2:	83 e8 18             	sub    eax,0x18
c000c9e5:	a8 f7                	test   al,0xf7
c000c9e7:	74 0d                	je     c000c9f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000c9e9:	83 ec 0c             	sub    esp,0xc
c000c9ec:	68 19 bc 02 c0       	push   0xc002bc19
c000c9f1:	e9 64 02 00 00       	jmp    c000cc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c9f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c9fe:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000ca03:	31 c0                	xor    eax,eax
c000ca05:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ca09:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ca11:	89 c6                	mov    esi,eax
c000ca13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ca18:	75 15                	jne    c000ca2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000ca1a:	99                   	cdq    
c000ca1b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000ca1f:	85 d2                	test   edx,edx
c000ca21:	75 0c                	jne    c000ca2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000ca23:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ca27:	29 c6                	sub    esi,eax
c000ca29:	4e                   	dec    esi
c000ca2a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000ca2f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ca33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ca3b:	75 0c                	jne    c000ca49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000ca3d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000ca42:	c1 e2 18             	shl    edx,0x18
c000ca45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca49:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000ca4e:	8d 46 01             	lea    eax,[esi+0x1]
c000ca51:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000ca55:	c1 e1 10             	shl    ecx,0x10
c000ca58:	89 ca                	mov    edx,ecx
c000ca5a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000ca5f:	c1 e1 08             	shl    ecx,0x8
c000ca62:	09 d1                	or     ecx,edx
c000ca64:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000ca68:	09 d1                	or     ecx,edx
c000ca6a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000ca6e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000ca72:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000ca76:	c1 fa 03             	sar    edx,0x3
c000ca79:	01 d7                	add    edi,edx
c000ca7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca7f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000ca83:	7e 04                	jle    c000ca89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000ca85:	89 c6                	mov    esi,eax
c000ca87:	eb 8a                	jmp    c000ca13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000ca89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ca8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca91:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000ca95:	0f 8f 6e ff ff ff    	jg     c000ca09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000ca9b:	e9 ce 01 00 00       	jmp    c000cc6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000caa0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000caa5:	75 0e                	jne    c000cab5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000caa7:	85 c0                	test   eax,eax
c000caa9:	75 0a                	jne    c000cab5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000caab:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000caae:	83 e8 18             	sub    eax,0x18
c000cab1:	a8 f7                	test   al,0xf7
c000cab3:	74 0d                	je     c000cac2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000cab5:	83 ec 0c             	sub    esp,0xc
c000cab8:	68 27 bc 02 c0       	push   0xc002bc27
c000cabd:	e9 98 01 00 00       	jmp    c000cc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000cac2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000caca:	31 c9                	xor    ecx,ecx
c000cacc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cad4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000cad8:	0f 8d 90 01 00 00    	jge    c000cc6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000cade:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cae2:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000cae6:	0f 8e 82 01 00 00    	jle    c000cc6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000caec:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000caf0:	8d 77 01             	lea    esi,[edi+0x1]
c000caf3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000caf7:	83 fa 7f             	cmp    edx,0x7f
c000cafa:	89 d0                	mov    eax,edx
c000cafc:	0f 8e a3 00 00 00    	jle    c000cba5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000cb02:	83 e0 7f             	and    eax,0x7f
c000cb05:	31 d2                	xor    edx,edx
c000cb07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb0b:	40                   	inc    eax
c000cb0c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cb10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb14:	75 08                	jne    c000cb1e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000cb16:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000cb1b:	c1 e2 18             	shl    edx,0x18
c000cb1e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000cb23:	c1 e0 10             	shl    eax,0x10
c000cb26:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cb2a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000cb2f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000cb33:	c1 e0 08             	shl    eax,0x8
c000cb36:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000cb3a:	09 f8                	or     eax,edi
c000cb3c:	31 ff                	xor    edi,edi
c000cb3e:	09 d0                	or     eax,edx
c000cb40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cb44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000cb49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cb52:	75 1d                	jne    c000cb71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000cb54:	89 c8                	mov    eax,ecx
c000cb56:	99                   	cdq    
c000cb57:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000cb5b:	85 d2                	test   edx,edx
c000cb5d:	75 12                	jne    c000cb71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000cb5f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb63:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000cb67:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cb6b:	49                   	dec    ecx
c000cb6c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000cb71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cb75:	8d 51 01             	lea    edx,[ecx+0x1]
c000cb78:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000cb7c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000cb80:	8d 47 01             	lea    eax,[edi+0x1]
c000cb83:	7e 06                	jle    c000cb8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000cb85:	89 c7                	mov    edi,eax
c000cb87:	89 d1                	mov    ecx,edx
c000cb89:	eb c2                	jmp    c000cb4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000cb8b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cb8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000cb93:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000cb97:	c1 f8 03             	sar    eax,0x3
c000cb9a:	01 c6                	add    esi,eax
c000cb9c:	89 d1                	mov    ecx,edx
c000cb9e:	89 f7                	mov    edi,esi
c000cba0:	e9 2f ff ff ff       	jmp    c000cad4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000cba5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cbad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbb1:	40                   	inc    eax
c000cbb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000cbbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cbbf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000cbc4:	75 1d                	jne    c000cbe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000cbc6:	89 c8                	mov    eax,ecx
c000cbc8:	99                   	cdq    
c000cbc9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000cbcd:	85 d2                	test   edx,edx
c000cbcf:	75 12                	jne    c000cbe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000cbd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cbd5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000cbd9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cbdd:	49                   	dec    ecx
c000cbde:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000cbe3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cbe7:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000cbef:	75 0c                	jne    c000cbfd <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000cbf1:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000cbf6:	c1 e7 18             	shl    edi,0x18
c000cbf9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000cbfd:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000cc02:	8d 51 01             	lea    edx,[ecx+0x1]
c000cc05:	c1 e0 10             	shl    eax,0x10
c000cc08:	89 c7                	mov    edi,eax
c000cc0a:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000cc0f:	c1 e0 08             	shl    eax,0x8
c000cc12:	09 f8                	or     eax,edi
c000cc14:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000cc18:	09 f8                	or     eax,edi
c000cc1a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000cc1e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000cc22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cc26:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cc2a:	c1 f8 03             	sar    eax,0x3
c000cc2d:	01 c6                	add    esi,eax
c000cc2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc33:	40                   	inc    eax
c000cc34:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000cc38:	7e 0b                	jle    c000cc45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000cc3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cc3e:	89 d1                	mov    ecx,edx
c000cc40:	e9 7a ff ff ff       	jmp    c000cbbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000cc45:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000cc49:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000cc4d:	e9 4a ff ff ff       	jmp    c000cb9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000cc52:	50                   	push   eax
c000cc53:	50                   	push   eax
c000cc54:	51                   	push   ecx
c000cc55:	68 36 bc 02 c0       	push   0xc002bc36
c000cc5a:	e8 07 a3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000cc5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000cc62:	e8 ed 37 00 00       	call   c0010454 <free>
c000cc67:	83 c4 10             	add    esp,0x10
c000cc6a:	31 ed                	xor    ebp,ebp
c000cc6c:	eb 14                	jmp    c000cc82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000cc6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cc72:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000cc76:	89 18                	mov    DWORD PTR [eax],ebx
c000cc78:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cc7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc80:	89 18                	mov    DWORD PTR [eax],ebx
c000cc82:	83 c4 3c             	add    esp,0x3c
c000cc85:	89 e8                	mov    eax,ebp
c000cc87:	5b                   	pop    ebx
c000cc88:	5e                   	pop    esi
c000cc89:	5f                   	pop    edi
c000cc8a:	5d                   	pop    ebp
c000cc8b:	c3                   	ret    

c000cc8c <Video::putTGA(int, int, unsigned char*, int)>:
c000cc8c:	55                   	push   ebp
c000cc8d:	57                   	push   edi
c000cc8e:	56                   	push   esi
c000cc8f:	53                   	push   ebx
c000cc90:	83 ec 28             	sub    esp,0x28
c000cc93:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cc97:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cc9b:	50                   	push   eax
c000cc9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cca0:	50                   	push   eax
c000cca1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cca5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cca9:	55                   	push   ebp
c000ccaa:	e8 37 fc ff ff       	call   c000c8e6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ccaf:	83 c4 20             	add    esp,0x20
c000ccb2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ccb6:	85 c0                	test   eax,eax
c000ccb8:	74 3b                	je     c000ccf5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000ccba:	89 c6                	mov    esi,eax
c000ccbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ccc0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ccc4:	39 d8                	cmp    eax,ebx
c000ccc6:	7e 2d                	jle    c000ccf5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000ccc8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cccc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ccd0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ccd4:	39 f8                	cmp    eax,edi
c000ccd6:	7e 1a                	jle    c000ccf2 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000ccd8:	83 c6 04             	add    esi,0x4
c000ccdb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000ccde:	85 c0                	test   eax,eax
c000cce0:	79 0d                	jns    c000ccef <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cce2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000cce5:	50                   	push   eax
c000cce6:	53                   	push   ebx
c000cce7:	57                   	push   edi
c000cce8:	55                   	push   ebp
c000cce9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	47                   	inc    edi
c000ccf0:	eb da                	jmp    c000cccc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ccf2:	43                   	inc    ebx
c000ccf3:	eb c7                	jmp    c000ccbc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ccf5:	83 c4 1c             	add    esp,0x1c
c000ccf8:	5b                   	pop    ebx
c000ccf9:	5e                   	pop    esi
c000ccfa:	5f                   	pop    edi
c000ccfb:	5d                   	pop    ebp
c000ccfc:	c3                   	ret    
c000ccfd:	66 90                	xchg   ax,ax
c000ccff:	90                   	nop

c000cd00 <ACPI::close(int, int, void*)>:
c000cd00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd05:	c3                   	ret    
c000cd06:	66 90                	xchg   ax,ax

c000cd08 <loadACPITables(unsigned char*)>:
c000cd08:	57                   	push   edi
c000cd09:	56                   	push   esi
c000cd0a:	53                   	push   ebx
c000cd0b:	83 ec 60             	sub    esp,0x60
c000cd0e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000cd13:	0f 84 43 02 00 00    	je     c000cf5c <loadACPITables(unsigned char*)+0x254>
c000cd19:	a0 80 6d 03 c0       	mov    al,ds:0xc0036d80
c000cd1e:	0f b6 c0             	movzx  eax,al
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 7b                	je     c000cda0 <loadACPITables(unsigned char*)+0x98>
c000cd25:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cd29:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cd2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd34:	83 e8 24             	sub    eax,0x24
c000cd37:	c1 e8 03             	shr    eax,0x3
c000cd3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd3e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cd4c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000cd50:	0f 8d ba 00 00 00    	jge    c000ce10 <loadACPITables(unsigned char*)+0x108>
c000cd56:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cd5a:	83 c0 24             	add    eax,0x24
c000cd5d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cd61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cd65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cd69:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cd6d:	c1 e0 03             	shl    eax,0x3
c000cd70:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000cd74:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cd78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd7d:	89 c1                	mov    ecx,eax
c000cd7f:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000cd84:	8d 50 01             	lea    edx,[eax+0x1]
c000cd87:	89 15 60 6b 03 c0    	mov    DWORD PTR ds:0xc0036b60,edx
c000cd8d:	89 ca                	mov    edx,ecx
c000cd8f:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000cd96:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000cd9b:	eb ab                	jmp    c000cd48 <loadACPITables(unsigned char*)+0x40>
c000cd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000cda0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cda4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cda8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdaf:	83 e8 24             	sub    eax,0x24
c000cdb2:	c1 e8 02             	shr    eax,0x2
c000cdb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cdb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000cdc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cdc4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cdc8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000cdcc:	7d 42                	jge    c000ce10 <loadACPITables(unsigned char*)+0x108>
c000cdce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cdd2:	83 c0 24             	add    eax,0x24
c000cdd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cdd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cddd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000cde1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cde5:	c1 e0 02             	shl    eax,0x2
c000cde8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cdec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdf0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cdf2:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000cdf7:	8d 50 01             	lea    edx,[eax+0x1]
c000cdfa:	89 15 60 6b 03 c0    	mov    DWORD PTR ds:0xc0036b60,edx
c000ce00:	89 ca                	mov    edx,ecx
c000ce02:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000ce09:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ce0e:	eb b4                	jmp    c000cdc4 <loadACPITables(unsigned char*)+0xbc>
c000ce10:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ce18:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000ce1d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ce21:	0f 8d 39 01 00 00    	jge    c000cf60 <loadACPITables(unsigned char*)+0x258>
c000ce27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce2b:	8b 04 c5 84 6b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc947c]
c000ce32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce42:	25 ff 0f 00 00       	and    eax,0xfff
c000ce47:	89 c6                	mov    esi,eax
c000ce49:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000ce4f:	83 ec 0c             	sub    esp,0xc
c000ce52:	6a 01                	push   0x1
c000ce54:	e8 86 6f 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ce60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	6a 01                	push   0x1
c000ce6b:	6a 01                	push   0x1
c000ce6d:	50                   	push   eax
c000ce6e:	52                   	push   edx
c000ce6f:	53                   	push   ebx
c000ce70:	e8 3d 78 00 00       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce75:	83 c4 20             	add    esp,0x20
c000ce78:	09 f0                	or     eax,esi
c000ce7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce7e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce82:	c1 e0 03             	shl    eax,0x3
c000ce85:	05 80 6b 03 c0       	add    eax,0xc0036b80
c000ce8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ce8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce96:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ce9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ceaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceb2:	89 c6                	mov    esi,eax
c000ceb4:	89 d7                	mov    edi,edx
c000ceb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ceb8:	89 c8                	mov    eax,ecx
c000ceba:	89 fa                	mov    edx,edi
c000cebc:	89 f3                	mov    ebx,esi
c000cebe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cec2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000cec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ceca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ced1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ced5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ced9:	05 00 10 00 00       	add    eax,0x1000
c000cede:	c1 e8 0c             	shr    eax,0xc
c000cee1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cee9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cef1:	25 ff 0f 00 00       	and    eax,0xfff
c000cef6:	89 c6                	mov    esi,eax
c000cef8:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000cefe:	83 ec 0c             	sub    esp,0xc
c000cf01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000cf05:	e8 d5 6e 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c000cf0a:	83 c4 10             	add    esp,0x10
c000cf0d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf11:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cf17:	83 ec 0c             	sub    esp,0xc
c000cf1a:	6a 01                	push   0x1
c000cf1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf20:	50                   	push   eax
c000cf21:	52                   	push   edx
c000cf22:	53                   	push   ebx
c000cf23:	e8 8a 77 00 00       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf28:	83 c4 20             	add    esp,0x20
c000cf2b:	09 f0                	or     eax,esi
c000cf2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf35:	83 ec 0c             	sub    esp,0xc
c000cf38:	50                   	push   eax
c000cf39:	e8 9f 71 00 00       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf45:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cf49:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000cf50:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000cf55:	e9 be fe ff ff       	jmp    c000ce18 <loadACPITables(unsigned char*)+0x110>
c000cf5a:	66 90                	xchg   ax,ax
c000cf5c:	90                   	nop
c000cf5d:	8d 76 00             	lea    esi,[esi+0x0]
c000cf60:	83 c4 60             	add    esp,0x60
c000cf63:	5b                   	pop    ebx
c000cf64:	5e                   	pop    esi
c000cf65:	5f                   	pop    edi
c000cf66:	c3                   	ret    
c000cf67:	90                   	nop

c000cf68 <findRSDT(unsigned char*)>:
c000cf68:	57                   	push   edi
c000cf69:	56                   	push   esi
c000cf6a:	53                   	push   ebx
c000cf6b:	83 ec 50             	sub    esp,0x50
c000cf6e:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000cf73:	85 c0                	test   eax,eax
c000cf75:	75 0d                	jne    c000cf84 <findRSDT(unsigned char*)+0x1c>
c000cf77:	b8 00 00 00 00       	mov    eax,0x0
c000cf7c:	e9 2b 01 00 00       	jmp    c000d0ac <findRSDT(unsigned char*)+0x144>
c000cf81:	8d 76 00             	lea    esi,[esi+0x0]
c000cf84:	89 e0                	mov    eax,esp
c000cf86:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cf8a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cf8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf92:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000cf9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cf9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfa6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000cfaa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000cfae:	89 c6                	mov    esi,eax
c000cfb0:	89 d7                	mov    edi,edx
c000cfb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cfb4:	89 c8                	mov    eax,ecx
c000cfb6:	89 fa                	mov    edx,edi
c000cfb8:	89 f3                	mov    ebx,esi
c000cfba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000cfbe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cfc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cfc6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000cfca:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000cfce:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000cfd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cfde:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cfee:	25 ff 0f 00 00       	and    eax,0xfff
c000cff3:	89 c6                	mov    esi,eax
c000cff5:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000cffb:	83 ec 0c             	sub    esp,0xc
c000cffe:	6a 02                	push   0x2
c000d000:	e8 da 6d 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c000d005:	83 c4 10             	add    esp,0x10
c000d008:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d00c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	6a 01                	push   0x1
c000d017:	6a 02                	push   0x2
c000d019:	50                   	push   eax
c000d01a:	52                   	push   edx
c000d01b:	53                   	push   ebx
c000d01c:	e8 91 76 00 00       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d021:	83 c4 20             	add    esp,0x20
c000d024:	09 f0                	or     eax,esi
c000d026:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d02a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d02e:	25 ff 0f 00 00       	and    eax,0xfff
c000d033:	89 c6                	mov    esi,eax
c000d035:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	6a 02                	push   0x2
c000d040:	e8 9a 6d 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d04c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d052:	83 ec 0c             	sub    esp,0xc
c000d055:	6a 01                	push   0x1
c000d057:	6a 02                	push   0x2
c000d059:	50                   	push   eax
c000d05a:	52                   	push   edx
c000d05b:	53                   	push   ebx
c000d05c:	e8 51 76 00 00       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d061:	83 c4 20             	add    esp,0x20
c000d064:	09 f0                	or     eax,esi
c000d066:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d06a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000d06f:	85 c0                	test   eax,eax
c000d071:	75 11                	jne    c000d084 <findRSDT(unsigned char*)+0x11c>
c000d073:	c6 05 80 6d 03 c0 00 	mov    BYTE PTR ds:0xc0036d80,0x0
c000d07a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d07e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d082:	eb 24                	jmp    c000d0a8 <findRSDT(unsigned char*)+0x140>
c000d084:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000d089:	83 f8 02             	cmp    eax,0x2
c000d08c:	75 12                	jne    c000d0a0 <findRSDT(unsigned char*)+0x138>
c000d08e:	c6 05 80 6d 03 c0 01 	mov    BYTE PTR ds:0xc0036d80,0x1
c000d095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d099:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d09d:	eb 09                	jmp    c000d0a8 <findRSDT(unsigned char*)+0x140>
c000d09f:	90                   	nop
c000d0a0:	b8 00 00 00 00       	mov    eax,0x0
c000d0a5:	eb 05                	jmp    c000d0ac <findRSDT(unsigned char*)+0x144>
c000d0a7:	90                   	nop
c000d0a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d0ac:	83 c4 50             	add    esp,0x50
c000d0af:	5b                   	pop    ebx
c000d0b0:	5e                   	pop    esi
c000d0b1:	5f                   	pop    edi
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <findDataTable(unsigned char*, char*)>:
c000d0b4:	83 ec 1c             	sub    esp,0x1c
c000d0b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000d0bc:	75 0a                	jne    c000d0c8 <findDataTable(unsigned char*, char*)+0x14>
c000d0be:	b8 00 00 00 00       	mov    eax,0x0
c000d0c3:	eb 5f                	jmp    c000d124 <findDataTable(unsigned char*, char*)+0x70>
c000d0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d0d0:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000d0d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d0d9:	7d 41                	jge    c000d11c <findDataTable(unsigned char*, char*)+0x68>
c000d0db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0df:	c1 e0 03             	shl    eax,0x3
c000d0e2:	05 80 6b 03 c0       	add    eax,0xc0036b80
c000d0e7:	83 ec 04             	sub    esp,0x4
c000d0ea:	6a 04                	push   0x4
c000d0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0f0:	50                   	push   eax
c000d0f1:	e8 8a 32 ff ff       	call   c0000380 <memcmp>
c000d0f6:	83 c4 10             	add    esp,0x10
c000d0f9:	85 c0                	test   eax,eax
c000d0fb:	0f 94 c0             	sete   al
c000d0fe:	0f b6 c0             	movzx  eax,al
c000d101:	85 c0                	test   eax,eax
c000d103:	74 0f                	je     c000d114 <findDataTable(unsigned char*, char*)+0x60>
c000d105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d109:	8b 04 c5 84 6b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc947c]
c000d110:	eb 12                	jmp    c000d124 <findDataTable(unsigned char*, char*)+0x70>
c000d112:	66 90                	xchg   ax,ax
c000d114:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000d119:	eb b5                	jmp    c000d0d0 <findDataTable(unsigned char*, char*)+0x1c>
c000d11b:	90                   	nop
c000d11c:	b8 00 00 00 00       	mov    eax,0x0
c000d121:	8d 76 00             	lea    esi,[esi+0x0]
c000d124:	83 c4 1c             	add    esp,0x1c
c000d127:	c3                   	ret    

c000d128 <scanMADT()>:
c000d128:	53                   	push   ebx
c000d129:	83 ec 38             	sub    esp,0x38
c000d12c:	c7 05 88 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d88,0x0
c000d136:	c7 05 84 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d84,0x0
c000d140:	83 ec 0c             	sub    esp,0xc
c000d143:	68 9c bc 02 c0       	push   0xc002bc9c
c000d148:	e8 19 9e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d14d:	83 c4 10             	add    esp,0x10
c000d150:	e8 6f db 00 00       	call   c001acc4 <HalFindRSDP()>
c000d155:	a3 88 6d 03 c0       	mov    ds:0xc0036d88,eax
c000d15a:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d15f:	85 c0                	test   eax,eax
c000d161:	0f 84 59 04 00 00    	je     c000d5c0 <scanMADT()+0x498>
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	68 aa bc 02 c0       	push   0xc002bcaa
c000d16f:	e8 f2 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d17c:	83 ec 0c             	sub    esp,0xc
c000d17f:	50                   	push   eax
c000d180:	e8 e3 fd ff ff       	call   c000cf68 <findRSDT(unsigned char*)>
c000d185:	83 c4 10             	add    esp,0x10
c000d188:	a3 84 6d 03 c0       	mov    ds:0xc0036d84,eax
c000d18d:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d192:	85 c0                	test   eax,eax
c000d194:	0f 84 2a 04 00 00    	je     c000d5c4 <scanMADT()+0x49c>
c000d19a:	8b 15 84 6d 03 c0    	mov    edx,DWORD PTR ds:0xc0036d84
c000d1a0:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d1a5:	83 ec 04             	sub    esp,0x4
c000d1a8:	52                   	push   edx
c000d1a9:	50                   	push   eax
c000d1aa:	68 50 be 02 c0       	push   0xc002be50
c000d1af:	e8 b2 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1b4:	83 c4 10             	add    esp,0x10
c000d1b7:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d1bc:	83 ec 0c             	sub    esp,0xc
c000d1bf:	50                   	push   eax
c000d1c0:	e8 43 fb ff ff       	call   c000cd08 <loadACPITables(unsigned char*)>
c000d1c5:	83 c4 10             	add    esp,0x10
c000d1c8:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	68 b9 bc 02 c0       	push   0xc002bcb9
c000d1d5:	50                   	push   eax
c000d1d6:	e8 d9 fe ff ff       	call   c000d0b4 <findDataTable(unsigned char*, char*)>
c000d1db:	83 c4 10             	add    esp,0x10
c000d1de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1e2:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d1e7:	0f 84 db 03 00 00    	je     c000d5c8 <scanMADT()+0x4a0>
c000d1ed:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d1ff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d203:	0f 87 c7 03 00 00    	ja     c000d5d0 <scanMADT()+0x4a8>
c000d209:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d211:	0f 87 b9 03 00 00    	ja     c000d5d0 <scanMADT()+0x4a8>
c000d217:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d21b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d21f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d223:	8d 50 01             	lea    edx,[eax+0x1]
c000d226:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d22a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d22e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d232:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d236:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d23a:	8d 50 01             	lea    edx,[eax+0x1]
c000d23d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d241:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d245:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d249:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d24d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000d252:	83 f8 02             	cmp    eax,0x2
c000d255:	0f 86 71 03 00 00    	jbe    c000d5cc <scanMADT()+0x4a4>
c000d25b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d260:	85 c0                	test   eax,eax
c000d262:	75 58                	jne    c000d2bc <scanMADT()+0x194>
c000d264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d268:	8d 50 01             	lea    edx,[eax+0x1]
c000d26b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26f:	8a 15 80 6f 03 c0    	mov    dl,BYTE PTR ds:0xc0036f80
c000d275:	0f b6 d2             	movzx  edx,dl
c000d278:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d27c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d280:	88 82 c0 6f 03 c0    	mov    BYTE PTR [edx-0x3ffc9040],al
c000d286:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d28a:	8d 50 01             	lea    edx,[eax+0x1]
c000d28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d291:	8a 15 80 6f 03 c0    	mov    dl,BYTE PTR ds:0xc0036f80
c000d297:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d29a:	88 0d 80 6f 03 c0    	mov    BYTE PTR ds:0xc0036f80,cl
c000d2a0:	0f b6 d2             	movzx  edx,dl
c000d2a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d2a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d2ab:	88 82 a0 6f 03 c0    	mov    BYTE PTR [edx-0x3ffc9060],al
c000d2b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d2b6:	e9 f1 02 00 00       	jmp    c000d5ac <scanMADT()+0x484>
c000d2bb:	90                   	nop
c000d2bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d2c1:	83 f8 01             	cmp    eax,0x1
c000d2c4:	0f 85 32 01 00 00    	jne    c000d3fc <scanMADT()+0x2d4>
c000d2ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2ce:	8d 50 01             	lea    edx,[eax+0x1]
c000d2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d5:	8a 15 40 6e 03 c0    	mov    dl,BYTE PTR ds:0xc0036e40
c000d2db:	0f b6 d2             	movzx  edx,dl
c000d2de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d2e2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d2e6:	88 82 60 6e 03 c0    	mov    BYTE PTR [edx-0x3ffc91a0],al
c000d2ec:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000d2f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d2f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2f9:	01 d0                	add    eax,edx
c000d2fb:	83 c0 2c             	add    eax,0x2c
c000d2fe:	8a 00                	mov    al,BYTE PTR [eax]
c000d300:	0f b6 d0             	movzx  edx,al
c000d303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d307:	8d 48 01             	lea    ecx,[eax+0x1]
c000d30a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d30e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d312:	0f b6 c0             	movzx  eax,al
c000d315:	c1 e0 08             	shl    eax,0x8
c000d318:	89 d1                	mov    ecx,edx
c000d31a:	09 c1                	or     ecx,eax
c000d31c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d320:	8d 50 02             	lea    edx,[eax+0x2]
c000d323:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d327:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d32b:	0f b6 c0             	movzx  eax,al
c000d32e:	c1 e0 10             	shl    eax,0x10
c000d331:	09 c1                	or     ecx,eax
c000d333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d337:	8d 50 03             	lea    edx,[eax+0x3]
c000d33a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d33e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d342:	0f b6 c0             	movzx  eax,al
c000d345:	c1 e0 18             	shl    eax,0x18
c000d348:	09 c1                	or     ecx,eax
c000d34a:	89 ca                	mov    edx,ecx
c000d34c:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d351:	0f b6 c0             	movzx  eax,al
c000d354:	89 14 85 80 6e 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9180],edx
c000d35b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d360:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d364:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d368:	01 d0                	add    eax,edx
c000d36a:	83 c0 2c             	add    eax,0x2c
c000d36d:	8a 00                	mov    al,BYTE PTR [eax]
c000d36f:	0f b6 d0             	movzx  edx,al
c000d372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d376:	8d 48 01             	lea    ecx,[eax+0x1]
c000d379:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d37d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d381:	0f b6 c0             	movzx  eax,al
c000d384:	c1 e0 08             	shl    eax,0x8
c000d387:	89 d1                	mov    ecx,edx
c000d389:	09 c1                	or     ecx,eax
c000d38b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d38f:	8d 50 02             	lea    edx,[eax+0x2]
c000d392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d396:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d39a:	0f b6 c0             	movzx  eax,al
c000d39d:	c1 e0 10             	shl    eax,0x10
c000d3a0:	09 c1                	or     ecx,eax
c000d3a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d3a6:	8d 50 03             	lea    edx,[eax+0x3]
c000d3a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d3ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d3b1:	0f b6 c0             	movzx  eax,al
c000d3b4:	c1 e0 18             	shl    eax,0x18
c000d3b7:	09 c1                	or     ecx,eax
c000d3b9:	89 ca                	mov    edx,ecx
c000d3bb:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d3c0:	0f b6 c0             	movzx  eax,al
c000d3c3:	89 14 85 00 6f 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9100],edx
c000d3ca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d3cf:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d3d4:	83 c0 01             	add    eax,0x1
c000d3d7:	a2 40 6e 03 c0       	mov    ds:0xc0036e40,al
c000d3dc:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d3e1:	0f b6 c0             	movzx  eax,al
c000d3e4:	83 ec 08             	sub    esp,0x8
c000d3e7:	50                   	push   eax
c000d3e8:	68 be bc 02 c0       	push   0xc002bcbe
c000d3ed:	e8 74 9b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	e9 b2 01 00 00       	jmp    c000d5ac <scanMADT()+0x484>
c000d3fa:	66 90                	xchg   ax,ax
c000d3fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d401:	83 f8 02             	cmp    eax,0x2
c000d404:	0f 85 ea 00 00 00    	jne    c000d4f4 <scanMADT()+0x3cc>
c000d40a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d40e:	8d 50 01             	lea    edx,[eax+0x1]
c000d411:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d419:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d41d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d421:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d425:	8d 50 01             	lea    edx,[eax+0x1]
c000d428:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d430:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d434:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d438:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d43c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d440:	01 d0                	add    eax,edx
c000d442:	83 c0 2c             	add    eax,0x2c
c000d445:	8a 00                	mov    al,BYTE PTR [eax]
c000d447:	0f b6 d0             	movzx  edx,al
c000d44a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d44e:	8d 48 01             	lea    ecx,[eax+0x1]
c000d451:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d455:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d459:	0f b6 c0             	movzx  eax,al
c000d45c:	c1 e0 08             	shl    eax,0x8
c000d45f:	89 d1                	mov    ecx,edx
c000d461:	09 c1                	or     ecx,eax
c000d463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d467:	8d 50 02             	lea    edx,[eax+0x2]
c000d46a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d46e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d472:	0f b6 c0             	movzx  eax,al
c000d475:	c1 e0 10             	shl    eax,0x10
c000d478:	09 c1                	or     ecx,eax
c000d47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d47e:	8d 50 03             	lea    edx,[eax+0x3]
c000d481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d485:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d489:	0f b6 c0             	movzx  eax,al
c000d48c:	c1 e0 18             	shl    eax,0x18
c000d48f:	09 c8                	or     eax,ecx
c000d491:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d495:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d49a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4a2:	01 d0                	add    eax,edx
c000d4a4:	83 c0 2c             	add    eax,0x2c
c000d4a7:	8a 00                	mov    al,BYTE PTR [eax]
c000d4a9:	0f b6 d0             	movzx  edx,al
c000d4ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4b0:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d4b7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d4bb:	0f b6 c0             	movzx  eax,al
c000d4be:	c1 e0 08             	shl    eax,0x8
c000d4c1:	09 d0                	or     eax,edx
c000d4c3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d4c8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d4cd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d4d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d4d6:	88 90 88 05 03 c0    	mov    BYTE PTR [eax-0x3ffcfa78],dl
c000d4dc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d4e1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000d4e6:	66 89 94 00 20 6e 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc91e0],dx
c000d4ee:	e9 b9 00 00 00       	jmp    c000d5ac <scanMADT()+0x484>
c000d4f3:	90                   	nop
c000d4f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d4f9:	83 f8 04             	cmp    eax,0x4
c000d4fc:	0f 85 9a 00 00 00    	jne    c000d59c <scanMADT()+0x474>
c000d502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d506:	8d 50 01             	lea    edx,[eax+0x1]
c000d509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d50d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d511:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d515:	0f b6 c0             	movzx  eax,al
c000d518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d51c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d520:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d524:	01 d0                	add    eax,edx
c000d526:	83 c0 2c             	add    eax,0x2c
c000d529:	8a 00                	mov    al,BYTE PTR [eax]
c000d52b:	0f b6 d0             	movzx  edx,al
c000d52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d532:	8d 48 01             	lea    ecx,[eax+0x1]
c000d535:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d539:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d53d:	0f b6 c0             	movzx  eax,al
c000d540:	c1 e0 08             	shl    eax,0x8
c000d543:	09 d0                	or     eax,edx
c000d545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d549:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d54e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d552:	8d 50 01             	lea    edx,[eax+0x1]
c000d555:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d559:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d55d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d561:	0f b6 c0             	movzx  eax,al
c000d564:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d56c:	c1 e0 08             	shl    eax,0x8
c000d56f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d573:	89 c1                	mov    ecx,eax
c000d575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d579:	c1 e0 18             	shl    eax,0x18
c000d57c:	89 c3                	mov    ebx,eax
c000d57e:	a1 8c 6d 03 c0       	mov    eax,ds:0xc0036d8c
c000d583:	8d 50 01             	lea    edx,[eax+0x1]
c000d586:	89 15 8c 6d 03 c0    	mov    DWORD PTR ds:0xc0036d8c,edx
c000d58c:	09 d9                	or     ecx,ebx
c000d58e:	89 ca                	mov    edx,ecx
c000d590:	89 14 85 a0 6d 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9260],edx
c000d597:	eb 13                	jmp    c000d5ac <scanMADT()+0x484>
c000d599:	8d 76 00             	lea    esi,[esi+0x0]
c000d59c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d5a1:	83 f8 05             	cmp    eax,0x5
c000d5a4:	75 06                	jne    c000d5ac <scanMADT()+0x484>
c000d5a6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d5ab:	90                   	nop
c000d5ac:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d5b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5b5:	01 d0                	add    eax,edx
c000d5b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d5bb:	e9 38 fc ff ff       	jmp    c000d1f8 <scanMADT()+0xd0>
c000d5c0:	90                   	nop
c000d5c1:	eb 0d                	jmp    c000d5d0 <scanMADT()+0x4a8>
c000d5c3:	90                   	nop
c000d5c4:	90                   	nop
c000d5c5:	eb 09                	jmp    c000d5d0 <scanMADT()+0x4a8>
c000d5c7:	90                   	nop
c000d5c8:	90                   	nop
c000d5c9:	eb 05                	jmp    c000d5d0 <scanMADT()+0x4a8>
c000d5cb:	90                   	nop
c000d5cc:	90                   	nop
c000d5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d0:	83 c4 38             	add    esp,0x38
c000d5d3:	5b                   	pop    ebx
c000d5d4:	c3                   	ret    
c000d5d5:	90                   	nop
c000d5d6:	66 90                	xchg   ax,ax

c000d5d8 <ACPI::ACPI()>:
c000d5d8:	83 ec 0c             	sub    esp,0xc
c000d5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5df:	83 ec 08             	sub    esp,0x8
c000d5e2:	68 12 b1 02 c0       	push   0xc002b112
c000d5e7:	50                   	push   eax
c000d5e8:	e8 c3 d2 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000d5ed:	83 c4 10             	add    esp,0x10
c000d5f0:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c000d5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f9:	89 10                	mov    DWORD PTR [eax],edx
c000d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d618:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d622:	90                   	nop
c000d623:	83 c4 0c             	add    esp,0xc
c000d626:	c3                   	ret    
c000d627:	90                   	nop

c000d628 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d628:	83 ec 2c             	sub    esp,0x2c
c000d62b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d62f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d633:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000d637:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000d63b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d640:	88 c8                	mov    al,cl
c000d642:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d646:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d64b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d653:	90                   	nop
c000d654:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d658:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d65e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d662:	0f 8d b0 00 00 00    	jge    c000d718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d668:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d66c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d670:	83 c2 2a             	add    edx,0x2a
c000d673:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d677:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d67c:	0f b7 c0             	movzx  eax,ax
c000d67f:	39 c2                	cmp    edx,eax
c000d681:	0f 85 85 00 00 00    	jne    c000d70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d687:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d68b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d68f:	83 c2 2a             	add    edx,0x2a
c000d692:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d696:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d69b:	0f b6 c0             	movzx  eax,al
c000d69e:	39 c2                	cmp    edx,eax
c000d6a0:	75 6a                	jne    c000d70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d6a2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d6a7:	85 c0                	test   eax,eax
c000d6a9:	74 3d                	je     c000d6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d6ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d6b3:	83 c2 2a             	add    edx,0x2a
c000d6b6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d6ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c1:	39 c2                	cmp    edx,eax
c000d6c3:	74 13                	je     c000d6d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d6c5:	83 ec 0c             	sub    esp,0xc
c000d6c8:	68 74 be 02 c0       	push   0xc002be74
c000d6cd:	e8 c6 31 00 00       	call   c0010898 <KePanic(char const*)>
c000d6d2:	83 c4 10             	add    esp,0x10
c000d6d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	68 da bc 02 c0       	push   0xc002bcda
c000d6e0:	e8 b3 31 00 00       	call   c0010898 <KePanic(char const*)>
c000d6e5:	83 c4 10             	add    esp,0x10
c000d6e8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d6ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d6f4:	83 c2 2a             	add    edx,0x2a
c000d6f7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d6fb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6fd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d700:	89 01                	mov    DWORD PTR [ecx],eax
c000d702:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d705:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d70a:	66 90                	xchg   ax,ax
c000d70c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d711:	e9 3e ff ff ff       	jmp    c000d654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d716:	66 90                	xchg   ax,ax
c000d718:	90                   	nop
c000d719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d71d:	83 c4 2c             	add    esp,0x2c
c000d720:	c2 04 00             	ret    0x4
c000d723:	90                   	nop

c000d724 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d724:	83 ec 1c             	sub    esp,0x1c
c000d727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d72b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d72f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d733:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d738:	88 c8                	mov    al,cl
c000d73a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d73e:	88 d0                	mov    al,dl
c000d740:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d748:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d74e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d752:	83 c2 2a             	add    edx,0x2a
c000d755:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d759:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000d75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d761:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d76e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d772:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000d777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d77b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d781:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d785:	83 c0 01             	add    eax,0x1
c000d788:	88 c1                	mov    cl,al
c000d78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78e:	83 c2 2a             	add    edx,0x2a
c000d791:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d79f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d7a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d7aa:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d7b8:	8d 50 01             	lea    edx,[eax+0x1]
c000d7bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d7cf:	3d 00 02 00 00       	cmp    eax,0x200
c000d7d4:	75 12                	jne    c000d7e8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d7d6:	83 ec 0c             	sub    esp,0xc
c000d7d9:	68 e9 bc 02 c0       	push   0xc002bce9
c000d7de:	e8 b5 30 00 00       	call   c0010898 <KePanic(char const*)>
c000d7e3:	83 c4 10             	add    esp,0x10
c000d7e6:	66 90                	xchg   ax,ax
c000d7e8:	90                   	nop
c000d7e9:	83 c4 1c             	add    esp,0x1c
c000d7ec:	c3                   	ret    
c000d7ed:	90                   	nop
c000d7ee:	66 90                	xchg   ax,ax

c000d7f0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d7f0:	b8 00 00 00 00       	mov    eax,0x0
c000d7f5:	c3                   	ret    
c000d7f6:	66 90                	xchg   ax,ax

c000d7f8 <ACPI::detectPCI()>:
c000d7f8:	53                   	push   ebx
c000d7f9:	83 ec 28             	sub    esp,0x28
c000d7fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d801:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d806:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d80b:	83 ec 08             	sub    esp,0x8
c000d80e:	68 06 bd 02 c0       	push   0xc002bd06
c000d813:	50                   	push   eax
c000d814:	e8 9b f8 ff ff       	call   c000d0b4 <findDataTable(unsigned char*, char*)>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d820:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d825:	74 0d                	je     c000d834 <ACPI::detectPCI()+0x3c>
c000d827:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d82c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d831:	8d 76 00             	lea    esi,[esi+0x0]
c000d834:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d83c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d840:	8a 00                	mov    al,BYTE PTR [eax]
c000d842:	0f b6 c0             	movzx  eax,al
c000d845:	83 f8 01             	cmp    eax,0x1
c000d848:	75 0e                	jne    c000d858 <ACPI::detectPCI()+0x60>
c000d84a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d84f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d854:	eb 2e                	jmp    c000d884 <ACPI::detectPCI()+0x8c>
c000d856:	66 90                	xchg   ax,ax
c000d858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d85c:	8a 00                	mov    al,BYTE PTR [eax]
c000d85e:	0f b6 c0             	movzx  eax,al
c000d861:	83 f8 02             	cmp    eax,0x2
c000d864:	75 1e                	jne    c000d884 <ACPI::detectPCI()+0x8c>
c000d866:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d86b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d870:	85 c0                	test   eax,eax
c000d872:	74 10                	je     c000d884 <ACPI::detectPCI()+0x8c>
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	68 a4 be 02 c0       	push   0xc002bea4
c000d87c:	e8 17 30 00 00       	call   c0010898 <KePanic(char const*)>
c000d881:	83 c4 10             	add    esp,0x10
c000d884:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d888:	83 f0 01             	xor    eax,0x1
c000d88b:	0f b6 c0             	movzx  eax,al
c000d88e:	85 c0                	test   eax,eax
c000d890:	74 46                	je     c000d8d8 <ACPI::detectPCI()+0xe0>
c000d892:	e8 99 28 ff ff       	call   c0000130 <manualPCIProbe>
c000d897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d89b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d8a0:	75 0e                	jne    c000d8b0 <ACPI::detectPCI()+0xb8>
c000d8a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d8a7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d8ac:	eb 2a                	jmp    c000d8d8 <ACPI::detectPCI()+0xe0>
c000d8ae:	66 90                	xchg   ax,ax
c000d8b0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d8b5:	75 21                	jne    c000d8d8 <ACPI::detectPCI()+0xe0>
c000d8b7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d8bc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d8c1:	85 c0                	test   eax,eax
c000d8c3:	74 13                	je     c000d8d8 <ACPI::detectPCI()+0xe0>
c000d8c5:	83 ec 0c             	sub    esp,0xc
c000d8c8:	68 a4 be 02 c0       	push   0xc002bea4
c000d8cd:	e8 c6 2f 00 00       	call   c0010898 <KePanic(char const*)>
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d8dd:	85 c0                	test   eax,eax
c000d8df:	0f 84 87 00 00 00    	je     c000d96c <ACPI::detectPCI()+0x174>
c000d8e5:	83 ec 0c             	sub    esp,0xc
c000d8e8:	68 0b bd 02 c0       	push   0xc002bd0b
c000d8ed:	e8 9f 06 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d8fd:	83 ec 0c             	sub    esp,0xc
c000d900:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d904:	e8 3b 2b 00 00       	call   c0010444 <malloc>
c000d909:	83 c4 10             	add    esp,0x10
c000d90c:	89 c3                	mov    ebx,eax
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	53                   	push   ebx
c000d912:	e8 03 34 01 00       	call   c0020d1a <PCI::PCI()>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d91e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d922:	83 ec 08             	sub    esp,0x8
c000d925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d929:	50                   	push   eax
c000d92a:	e8 1f ce ff ff       	call   c000a74e <Device::addChild(Device*)>
c000d92f:	83 c4 10             	add    esp,0x10
c000d932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d936:	8b 00                	mov    eax,DWORD PTR [eax]
c000d938:	83 c0 08             	add    eax,0x8
c000d93b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d93d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d942:	85 d2                	test   edx,edx
c000d944:	74 0a                	je     c000d950 <ACPI::detectPCI()+0x158>
c000d946:	ba 01 00 00 00       	mov    edx,0x1
c000d94b:	eb 0b                	jmp    c000d958 <ACPI::detectPCI()+0x160>
c000d94d:	8d 76 00             	lea    esi,[esi+0x0]
c000d950:	ba 02 00 00 00       	mov    edx,0x2
c000d955:	8d 76 00             	lea    esi,[esi+0x0]
c000d958:	6a 00                	push   0x0
c000d95a:	6a 00                	push   0x0
c000d95c:	52                   	push   edx
c000d95d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d961:	ff d0                	call   eax
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	e9 91 00 00 00       	jmp    c000d9fc <ACPI::detectPCI()+0x204>
c000d96b:	90                   	nop
c000d96c:	83 ec 0c             	sub    esp,0xc
c000d96f:	68 23 bd 02 c0       	push   0xc002bd23
c000d974:	e8 18 06 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000d979:	83 c4 10             	add    esp,0x10
c000d97c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d983:	83 ec 0c             	sub    esp,0xc
c000d986:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d98a:	e8 b5 2a 00 00       	call   c0010444 <malloc>
c000d98f:	83 c4 10             	add    esp,0x10
c000d992:	89 c3                	mov    ebx,eax
c000d994:	83 ec 0c             	sub    esp,0xc
c000d997:	53                   	push   ebx
c000d998:	e8 85 3f 01 00       	call   c0021922 <IDE::IDE()>
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d9a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9a8:	83 ec 08             	sub    esp,0x8
c000d9ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9af:	50                   	push   eax
c000d9b0:	e8 99 cd ff ff       	call   c000a74e <Device::addChild(Device*)>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9bc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9ca:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d9d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9e6:	83 c0 08             	add    eax,0x8
c000d9e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9eb:	6a 00                	push   0x0
c000d9ed:	6a 00                	push   0x0
c000d9ef:	6a 00                	push   0x0
c000d9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f5:	ff d0                	call   eax
c000d9f7:	83 c4 10             	add    esp,0x10
c000d9fa:	66 90                	xchg   ax,ax
c000d9fc:	90                   	nop
c000d9fd:	83 c4 28             	add    esp,0x28
c000da00:	5b                   	pop    ebx
c000da01:	c3                   	ret    
c000da02:	66 90                	xchg   ax,ax

c000da04 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000da04:	83 ec 0c             	sub    esp,0xc
c000da07:	83 ec 0c             	sub    esp,0xc
c000da0a:	68 38 bd 02 c0       	push   0xc002bd38
c000da0f:	e8 84 2e 00 00       	call   c0010898 <KePanic(char const*)>
c000da14:	83 c4 10             	add    esp,0x10
c000da17:	90                   	nop
c000da18:	83 c4 0c             	add    esp,0xc
c000da1b:	c3                   	ret    

c000da1c <ACPI::open(int, int, void*)>:
c000da1c:	55                   	push   ebp
c000da1d:	89 e5                	mov    ebp,esp
c000da1f:	53                   	push   ebx
c000da20:	81 ec 74 01 00 00    	sub    esp,0x174
c000da26:	83 ec 0c             	sub    esp,0xc
c000da29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000da2c:	e8 c7 fd ff ff       	call   c000d7f8 <ACPI::detectPCI()>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	68 cc be 02 c0       	push   0xc002becc
c000da3c:	e8 50 05 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000da41:	83 c4 10             	add    esp,0x10
c000da44:	b8 4c 05 00 00       	mov    eax,0x54c
c000da49:	8a 00                	mov    al,BYTE PTR [eax]
c000da4b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000da4e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000da52:	83 f8 01             	cmp    eax,0x1
c000da55:	75 15                	jne    c000da6c <ACPI::open(int, int, void*)+0x50>
c000da57:	83 ec 0c             	sub    esp,0xc
c000da5a:	68 49 bd 02 c0       	push   0xc002bd49
c000da5f:	e8 8f 88 00 00       	call   c00162f3 <Thr::loadKernelSymbolTable(char const*)>
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	eb 33                	jmp    c000da9c <ACPI::open(int, int, void*)+0x80>
c000da69:	8d 76 00             	lea    esi,[esi+0x0]
c000da6c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000da70:	3d bb 00 00 00       	cmp    eax,0xbb
c000da75:	75 15                	jne    c000da8c <ACPI::open(int, int, void*)+0x70>
c000da77:	83 ec 0c             	sub    esp,0xc
c000da7a:	68 67 bd 02 c0       	push   0xc002bd67
c000da7f:	e8 6f 88 00 00       	call   c00162f3 <Thr::loadKernelSymbolTable(char const*)>
c000da84:	83 c4 10             	add    esp,0x10
c000da87:	eb 13                	jmp    c000da9c <ACPI::open(int, int, void*)+0x80>
c000da89:	8d 76 00             	lea    esi,[esi+0x0]
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	68 85 bd 02 c0       	push   0xc002bd85
c000da94:	e8 ff 2d 00 00       	call   c0010898 <KePanic(char const*)>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000daa0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000daa7:	83 ec 0c             	sub    esp,0xc
c000daaa:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000daad:	e8 92 29 00 00       	call   c0010444 <malloc>
c000dab2:	83 c4 10             	add    esp,0x10
c000dab5:	89 c3                	mov    ebx,eax
c000dab7:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000dabc:	83 ec 04             	sub    esp,0x4
c000dabf:	50                   	push   eax
c000dac0:	68 9f bd 02 c0       	push   0xc002bd9f
c000dac5:	53                   	push   ebx
c000dac6:	e8 15 b4 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c000dacb:	83 c4 10             	add    esp,0x10
c000dace:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000dad1:	83 ec 08             	sub    esp,0x8
c000dad4:	6a 01                	push   0x1
c000dad6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dad9:	e8 20 b4 ff ff       	call   c0008efe <File::open(FileOpenMode)>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000dae4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000dae8:	75 12                	jne    c000dafc <ACPI::open(int, int, void*)+0xe0>
c000daea:	83 ec 0c             	sub    esp,0xc
c000daed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000daf0:	e8 67 b4 ff ff       	call   c0008f5c <File::close()>
c000daf5:	83 c4 10             	add    esp,0x10
c000daf8:	eb 06                	jmp    c000db00 <ACPI::open(int, int, void*)+0xe4>
c000dafa:	66 90                	xchg   ax,ax
c000dafc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000db00:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000db04:	74 16                	je     c000db1c <ACPI::open(int, int, void*)+0x100>
c000db06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000db09:	8b 00                	mov    eax,DWORD PTR [eax]
c000db0b:	83 c0 08             	add    eax,0x8
c000db0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000db16:	ff d0                	call   eax
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	90                   	nop
c000db1c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000db1f:	83 f0 01             	xor    eax,0x1
c000db22:	0f b6 c0             	movzx  eax,al
c000db25:	85 c0                	test   eax,eax
c000db27:	74 27                	je     c000db50 <ACPI::open(int, int, void*)+0x134>
c000db29:	83 ec 0c             	sub    esp,0xc
c000db2c:	68 bd bd 02 c0       	push   0xc002bdbd
c000db31:	e8 5b 04 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000db36:	83 c4 10             	add    esp,0x10
c000db39:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000db46:	e8 b9 64 00 00       	call   c0014004 <Virt::setupPageSwapping(int)>
c000db4b:	83 c4 10             	add    esp,0x10
c000db4e:	66 90                	xchg   ax,ax
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	68 d8 bd 02 c0       	push   0xc002bdd8
c000db58:	e8 34 04 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	8d 45 b8             	lea    eax,[ebp-0x48]
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	6a 13                	push   0x13
c000db68:	50                   	push   eax
c000db69:	e8 0e cf ff ff       	call   c000aa7c <getDevicesOfType(DeviceType)>
c000db6e:	83 c4 0c             	add    esp,0xc
c000db71:	8d 76 00             	lea    esi,[esi+0x0]
c000db74:	83 ec 0c             	sub    esp,0xc
c000db77:	8d 45 b8             	lea    eax,[ebp-0x48]
c000db7a:	50                   	push   eax
c000db7b:	e8 8c be 01 00       	call   c0029a0c <LinkedList<Device>::isEmpty()>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	83 f0 01             	xor    eax,0x1
c000db86:	0f b6 c0             	movzx  eax,al
c000db89:	85 c0                	test   eax,eax
c000db8b:	0f 84 13 01 00 00    	je     c000dca4 <ACPI::open(int, int, void*)+0x288>
c000db91:	83 ec 0c             	sub    esp,0xc
c000db94:	8d 45 b8             	lea    eax,[ebp-0x48]
c000db97:	50                   	push   eax
c000db98:	e8 8b be 01 00       	call   c0029a28 <LinkedList<Device>::getFirstElement()>
c000db9d:	83 c4 10             	add    esp,0x10
c000dba0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000dba3:	83 ec 0c             	sub    esp,0xc
c000dba6:	8d 45 b8             	lea    eax,[ebp-0x48]
c000dba9:	50                   	push   eax
c000dbaa:	e8 81 be 01 00       	call   c0029a30 <LinkedList<Device>::removeFirst()>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000dbb5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000dbb8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000dbbb:	b8 24 00 00 00       	mov    eax,0x24
c000dbc0:	83 e0 fc             	and    eax,0xfffffffc
c000dbc3:	89 c3                	mov    ebx,eax
c000dbc5:	b8 00 00 00 00       	mov    eax,0x0
c000dbca:	66 90                	xchg   ax,ax
c000dbcc:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000dbd3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000dbda:	83 c0 04             	add    eax,0x4
c000dbdd:	39 d8                	cmp    eax,ebx
c000dbdf:	72 eb                	jb     c000dbcc <ACPI::open(int, int, void*)+0x1b0>
c000dbe1:	83 ec 08             	sub    esp,0x8
c000dbe4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000dbea:	50                   	push   eax
c000dbeb:	83 ec 24             	sub    esp,0x24
c000dbee:	89 e1                	mov    ecx,esp
c000dbf0:	b8 24 00 00 00       	mov    eax,0x24
c000dbf5:	83 e0 fc             	and    eax,0xfffffffc
c000dbf8:	89 c3                	mov    ebx,eax
c000dbfa:	b8 00 00 00 00       	mov    eax,0x0
c000dbff:	90                   	nop
c000dc00:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000dc07:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000dc0a:	83 c0 04             	add    eax,0x4
c000dc0d:	39 d8                	cmp    eax,ebx
c000dc0f:	72 ef                	jb     c000dc00 <ACPI::open(int, int, void*)+0x1e4>
c000dc11:	e8 ec 35 01 00       	call   c0021202 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000dc16:	83 c4 30             	add    esp,0x30
c000dc19:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000dc1c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000dc20:	0f 84 4e ff ff ff    	je     c000db74 <ACPI::open(int, int, void*)+0x158>
c000dc26:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000dc2d:	83 ec 0c             	sub    esp,0xc
c000dc30:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000dc33:	e8 0c 28 00 00       	call   c0010444 <malloc>
c000dc38:	83 c4 10             	add    esp,0x10
c000dc3b:	89 c3                	mov    ebx,eax
c000dc3d:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000dc42:	83 ec 04             	sub    esp,0x4
c000dc45:	50                   	push   eax
c000dc46:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000dc49:	53                   	push   ebx
c000dc4a:	e8 91 b2 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000dc55:	83 ec 0c             	sub    esp,0xc
c000dc58:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000dc5b:	e8 62 b5 ff ff       	call   c00091c2 <File::exists()>
c000dc60:	83 c4 10             	add    esp,0x10
c000dc63:	0f b6 c0             	movzx  eax,al
c000dc66:	85 c0                	test   eax,eax
c000dc68:	74 16                	je     c000dc80 <ACPI::open(int, int, void*)+0x264>
c000dc6a:	83 ec 04             	sub    esp,0x4
c000dc6d:	6a 00                	push   0x0
c000dc6f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000dc72:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000dc75:	e8 24 8e 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000dc7a:	83 c4 10             	add    esp,0x10
c000dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc80:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000dc84:	0f 84 ea fe ff ff    	je     c000db74 <ACPI::open(int, int, void*)+0x158>
c000dc8a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000dc8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc8f:	83 c0 08             	add    eax,0x8
c000dc92:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000dc9a:	ff d0                	call   eax
c000dc9c:	83 c4 10             	add    esp,0x10
c000dc9f:	e9 d0 fe ff ff       	jmp    c000db74 <ACPI::open(int, int, void*)+0x158>
c000dca4:	83 ec 0c             	sub    esp,0xc
c000dca7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000dcaa:	50                   	push   eax
c000dcab:	e8 58 bd 01 00       	call   c0029a08 <LinkedList<Device>::~LinkedList()>
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000dcb8:	83 ec 04             	sub    esp,0x4
c000dcbb:	6a 00                	push   0x0
c000dcbd:	50                   	push   eax
c000dcbe:	68 f2 bd 02 c0       	push   0xc002bdf2
c000dcc3:	e8 d6 8d 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000dcc8:	83 c4 10             	add    esp,0x10
c000dccb:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000dcd0:	85 c0                	test   eax,eax
c000dcd2:	0f 84 e4 00 00 00    	je     c000ddbc <ACPI::open(int, int, void*)+0x3a0>
c000dcd8:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000dcdd:	85 c0                	test   eax,eax
c000dcdf:	0f 84 d7 00 00 00    	je     c000ddbc <ACPI::open(int, int, void*)+0x3a0>
c000dce5:	83 ec 0c             	sub    esp,0xc
c000dce8:	68 0f be 02 c0       	push   0xc002be0f
c000dced:	e8 9f 02 00 00       	call   c000df91 <KeSetBootMessage(char const*)>
c000dcf2:	83 c4 10             	add    esp,0x10
c000dcf5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000dd02:	e8 3d 27 00 00       	call   c0010444 <malloc>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	89 c3                	mov    ebx,eax
c000dd0c:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000dd11:	83 ec 04             	sub    esp,0x4
c000dd14:	50                   	push   eax
c000dd15:	68 2c be 02 c0       	push   0xc002be2c
c000dd1a:	53                   	push   ebx
c000dd1b:	e8 c0 b1 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c000dd20:	83 c4 10             	add    esp,0x10
c000dd23:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000dd26:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000dd2a:	74 1c                	je     c000dd48 <ACPI::open(int, int, void*)+0x32c>
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000dd32:	e8 8b b4 ff ff       	call   c00091c2 <File::exists()>
c000dd37:	83 c4 10             	add    esp,0x10
c000dd3a:	0f b6 c0             	movzx  eax,al
c000dd3d:	85 c0                	test   eax,eax
c000dd3f:	74 07                	je     c000dd48 <ACPI::open(int, int, void*)+0x32c>
c000dd41:	b0 01                	mov    al,0x1
c000dd43:	eb 07                	jmp    c000dd4c <ACPI::open(int, int, void*)+0x330>
c000dd45:	8d 76 00             	lea    esi,[esi+0x0]
c000dd48:	b0 00                	mov    al,0x0
c000dd4a:	66 90                	xchg   ax,ax
c000dd4c:	0f b6 c0             	movzx  eax,al
c000dd4f:	85 c0                	test   eax,eax
c000dd51:	74 15                	je     c000dd68 <ACPI::open(int, int, void*)+0x34c>
c000dd53:	83 ec 04             	sub    esp,0x4
c000dd56:	6a 00                	push   0x0
c000dd58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dd5b:	68 2c be 02 c0       	push   0xc002be2c
c000dd60:	e8 39 8d 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000dd6c:	74 1e                	je     c000dd8c <ACPI::open(int, int, void*)+0x370>
c000dd6e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000dd72:	74 18                	je     c000dd8c <ACPI::open(int, int, void*)+0x370>
c000dd74:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000dd77:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd79:	83 c0 08             	add    eax,0x8
c000dd7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd7e:	83 ec 0c             	sub    esp,0xc
c000dd81:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000dd84:	ff d0                	call   eax
c000dd86:	83 c4 10             	add    esp,0x10
c000dd89:	8d 76 00             	lea    esi,[esi+0x0]
c000dd8c:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000dd91:	83 ec 08             	sub    esp,0x8
c000dd94:	68 49 be 02 c0       	push   0xc002be49
c000dd99:	50                   	push   eax
c000dd9a:	e8 15 f3 ff ff       	call   c000d0b4 <findDataTable(unsigned char*, char*)>
c000dd9f:	83 c4 10             	add    esp,0x10
c000dda2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000dda5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000dda9:	74 11                	je     c000ddbc <ACPI::open(int, int, void*)+0x3a0>
c000ddab:	83 ec 08             	sub    esp,0x8
c000ddae:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000ddb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ddb4:	e8 4b fc ff ff       	call   c000da04 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ddb9:	83 c4 10             	add    esp,0x10
c000ddbc:	b8 00 00 00 00       	mov    eax,0x0
c000ddc1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ddc4:	c9                   	leave  
c000ddc5:	c3                   	ret    
c000ddc6:	66 90                	xchg   ax,ax

c000ddc8 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000ddc8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000ddce:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000ddd5:	89 c2                	mov    edx,eax
c000ddd7:	c1 fa 1f             	sar    edx,0x1f
c000ddda:	83 ec 04             	sub    esp,0x4
c000dddd:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000dde1:	51                   	push   ecx
c000dde2:	52                   	push   edx
c000dde3:	50                   	push   eax
c000dde4:	e8 53 24 00 00       	call   c001023c <KeItoa(long long, char*)>
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	83 ec 08             	sub    esp,0x8
c000ddef:	68 18 bf 02 c0       	push   0xc002bf18
c000ddf4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ddf8:	50                   	push   eax
c000ddf9:	e8 52 28 ff ff       	call   c0000650 <strcpy>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	83 ec 08             	sub    esp,0x8
c000de04:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000de0b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de0f:	50                   	push   eax
c000de10:	e8 5b 2a ff ff       	call   c0000870 <strcat>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	83 ec 08             	sub    esp,0x8
c000de1b:	68 26 bf 02 c0       	push   0xc002bf26
c000de20:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de24:	50                   	push   eax
c000de25:	e8 46 2a ff ff       	call   c0000870 <strcat>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	83 ec 08             	sub    esp,0x8
c000de30:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000de37:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de3b:	50                   	push   eax
c000de3c:	e8 2f 2a ff ff       	call   c0000870 <strcat>
c000de41:	83 c4 10             	add    esp,0x10
c000de44:	83 ec 08             	sub    esp,0x8
c000de47:	68 29 bf 02 c0       	push   0xc002bf29
c000de4c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de50:	50                   	push   eax
c000de51:	e8 1a 2a ff ff       	call   c0000870 <strcat>
c000de56:	83 c4 10             	add    esp,0x10
c000de59:	83 ec 08             	sub    esp,0x8
c000de5c:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000de63:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de67:	50                   	push   eax
c000de68:	e8 03 2a ff ff       	call   c0000870 <strcat>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	83 ec 08             	sub    esp,0x8
c000de73:	68 29 bf 02 c0       	push   0xc002bf29
c000de78:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de7c:	50                   	push   eax
c000de7d:	e8 ee 29 ff ff       	call   c0000870 <strcat>
c000de82:	83 c4 10             	add    esp,0x10
c000de85:	83 ec 08             	sub    esp,0x8
c000de88:	8d 44 24 08          	lea    eax,[esp+0x8]
c000de8c:	50                   	push   eax
c000de8d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de91:	50                   	push   eax
c000de92:	e8 d9 29 ff ff       	call   c0000870 <strcat>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	83 ec 0c             	sub    esp,0xc
c000de9d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dea1:	50                   	push   eax
c000dea2:	e8 f1 29 00 00       	call   c0010898 <KePanic(char const*)>
c000dea7:	83 c4 10             	add    esp,0x10
c000deaa:	90                   	nop
c000deab:	81 c4 2c 02 00 00    	add    esp,0x22c
c000deb1:	c3                   	ret    

c000deb2 <KeInitialiseAtexit()>:
c000deb2:	83 ec 10             	sub    esp,0x10
c000deb5:	68 80 00 00 00       	push   0x80
c000deba:	6a 00                	push   0x0
c000debc:	68 80 70 03 c0       	push   0xc0037080
c000dec1:	c7 05 e0 6f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036fe0,0x0
c000decb:	e8 20 26 ff ff       	call   c00004f0 <memset>
c000ded0:	83 c4 1c             	add    esp,0x1c
c000ded3:	c3                   	ret    

c000ded4 <KeRegisterAtexit(void (*)(void*), void*)>:
c000ded4:	a1 e0 6f 03 c0       	mov    eax,ds:0xc0036fe0
c000ded9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dedd:	89 14 85 80 70 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8f80],edx
c000dee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dee8:	89 14 85 00 70 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9000],edx
c000deef:	40                   	inc    eax
c000def0:	a3 e0 6f 03 c0       	mov    ds:0xc0036fe0,eax
c000def5:	83 f8 1f             	cmp    eax,0x1f
c000def8:	7e 0d                	jle    c000df07 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000defa:	c7 44 24 04 2b bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf2b
c000df02:	e9 91 29 00 00       	jmp    c0010898 <KePanic(char const*)>
c000df07:	c3                   	ret    

c000df08 <KeExecuteAtexit()>:
c000df08:	53                   	push   ebx
c000df09:	31 db                	xor    ebx,ebx
c000df0b:	83 ec 08             	sub    esp,0x8
c000df0e:	39 1d e0 6f 03 c0    	cmp    DWORD PTR ds:0xc0036fe0,ebx
c000df14:	7e 28                	jle    c000df3e <KeExecuteAtexit()+0x36>
c000df16:	8b 04 9d 80 70 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc8f80]
c000df1d:	85 c0                	test   eax,eax
c000df1f:	74 1a                	je     c000df3b <KeExecuteAtexit()+0x33>
c000df21:	83 ec 0c             	sub    esp,0xc
c000df24:	ff 34 9d 00 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9000]
c000df2b:	ff d0                	call   eax
c000df2d:	c7 04 9d 80 70 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc8f80],0x0
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	43                   	inc    ebx
c000df3c:	eb d0                	jmp    c000df0e <KeExecuteAtexit()+0x6>
c000df3e:	83 c4 08             	add    esp,0x8
c000df41:	5b                   	pop    ebx
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000df44:	8b 15 00 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037100
c000df4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df4e:	21 d0                	and    eax,edx
c000df50:	0f 95 c0             	setne  al
c000df53:	c3                   	ret    

c000df54 <KeInitialiseBootConfigurationFlags()>:
c000df54:	b8 00 05 00 00       	mov    eax,0x500
c000df59:	8b 00                	mov    eax,DWORD PTR [eax]
c000df5b:	a3 00 71 03 c0       	mov    ds:0xc0037100,eax
c000df60:	90                   	nop
c000df61:	c3                   	ret    

c000df62 <KeDisplaySplashScreen()>:
c000df62:	53                   	push   ebx
c000df63:	bb 01 00 00 00       	mov    ebx,0x1
c000df68:	83 ec 08             	sub    esp,0x8
c000df6b:	43                   	inc    ebx
c000df6c:	0f be 83 42 bf 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd40be]
c000df73:	85 c0                	test   eax,eax
c000df75:	74 15                	je     c000df8c <KeDisplaySplashScreen()+0x2a>
c000df77:	83 ec 0c             	sub    esp,0xc
c000df7a:	6a 01                	push   0x1
c000df7c:	53                   	push   ebx
c000df7d:	6a 00                	push   0x0
c000df7f:	6a 0f                	push   0xf
c000df81:	50                   	push   eax
c000df82:	e8 f1 e7 00 00       	call   c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000df87:	83 c4 20             	add    esp,0x20
c000df8a:	eb df                	jmp    c000df6b <KeDisplaySplashScreen()+0x9>
c000df8c:	83 c4 08             	add    esp,0x8
c000df8f:	5b                   	pop    ebx
c000df90:	c3                   	ret    

c000df91 <KeSetBootMessage(char const*)>:
c000df91:	57                   	push   edi
c000df92:	56                   	push   esi
c000df93:	53                   	push   ebx
c000df94:	31 db                	xor    ebx,ebx
c000df96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	6a 14                	push   0x14
c000df9f:	53                   	push   ebx
c000dfa0:	43                   	inc    ebx
c000dfa1:	6a 00                	push   0x0
c000dfa3:	6a 00                	push   0x0
c000dfa5:	6a 20                	push   0x20
c000dfa7:	e8 cc e7 00 00       	call   c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dfac:	83 c4 20             	add    esp,0x20
c000dfaf:	83 fb 50             	cmp    ebx,0x50
c000dfb2:	75 e6                	jne    c000df9a <KeSetBootMessage(char const*)+0x9>
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	56                   	push   esi
c000dfb8:	e8 c3 25 ff ff       	call   c0000580 <strlen>
c000dfbd:	83 c4 10             	add    esp,0x10
c000dfc0:	29 c3                	sub    ebx,eax
c000dfc2:	d1 eb                	shr    ebx,1
c000dfc4:	89 df                	mov    edi,ebx
c000dfc6:	89 f0                	mov    eax,esi
c000dfc8:	29 d8                	sub    eax,ebx
c000dfca:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000dfce:	85 c0                	test   eax,eax
c000dfd0:	74 16                	je     c000dfe8 <KeSetBootMessage(char const*)+0x57>
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	6a 14                	push   0x14
c000dfd7:	57                   	push   edi
c000dfd8:	47                   	inc    edi
c000dfd9:	6a 00                	push   0x0
c000dfdb:	6a 07                	push   0x7
c000dfdd:	50                   	push   eax
c000dfde:	e8 95 e7 00 00       	call   c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dfe3:	83 c4 20             	add    esp,0x20
c000dfe6:	eb de                	jmp    c000dfc6 <KeSetBootMessage(char const*)+0x35>
c000dfe8:	5b                   	pop    ebx
c000dfe9:	5e                   	pop    esi
c000dfea:	5f                   	pop    edi
c000dfeb:	c3                   	ret    

c000dfec <__cxa_atexit>:
c000dfec:	31 c0                	xor    eax,eax
c000dfee:	c3                   	ret    

c000dfef <__cxa_finalize>:
c000dfef:	c3                   	ret    

c000dff0 <__stack_chk_fail>:
c000dff0:	55                   	push   ebp
c000dff1:	89 e5                	mov    ebp,esp
c000dff3:	83 ec 10             	sub    esp,0x10
c000dff6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dff9:	68 57 bf 02 c0       	push   0xc002bf57
c000dffe:	e8 63 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e003:	58                   	pop    eax
c000e004:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e007:	5a                   	pop    edx
c000e008:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000e00b:	68 57 bf 02 c0       	push   0xc002bf57
c000e010:	e8 51 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e015:	c7 04 24 5f bf 02 c0 	mov    DWORD PTR [esp],0xc002bf5f
c000e01c:	e8 77 28 00 00       	call   c0010898 <KePanic(char const*)>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	c9                   	leave  
c000e025:	c3                   	ret    

c000e026 <__cxa_pure_virtual>:
c000e026:	83 ec 18             	sub    esp,0x18
c000e029:	68 77 bf 02 c0       	push   0xc002bf77
c000e02e:	e8 65 28 00 00       	call   c0010898 <KePanic(char const*)>
c000e033:	83 c4 1c             	add    esp,0x1c
c000e036:	c3                   	ret    

c000e037 <operator new[](unsigned long)>:
c000e037:	e9 08 24 00 00       	jmp    c0010444 <malloc>

c000e03c <operator delete(void*, unsigned long)>:
c000e03c:	e9 23 24 00 00       	jmp    c0010464 <rfree>

c000e041 <operator delete[](void*)>:
c000e041:	e9 1e 24 00 00       	jmp    c0010464 <rfree>

c000e046 <operator delete[](void*, unsigned long)>:
c000e046:	e9 19 24 00 00       	jmp    c0010464 <rfree>
c000e04b:	90                   	nop

c000e04c <CUnlockScheduler>:
c000e04c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000e054:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000e059:	85 c0                	test   eax,eax
c000e05b:	75 03                	jne    c000e060 <CUnlockScheduler+0x14>
c000e05d:	fb                   	sti    
c000e05e:	66 90                	xchg   ax,ax
c000e060:	90                   	nop
c000e061:	c3                   	ret    
c000e062:	66 90                	xchg   ax,ax

c000e064 <CLockScheduler>:
c000e064:	fa                   	cli    
c000e065:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000e06a:	83 c0 01             	add    eax,0x1
c000e06d:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000e072:	90                   	nop
c000e073:	c3                   	ret    

c000e074 <CPrintf>:
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	83 ec 08             	sub    esp,0x8
c000e07a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e07e:	68 8a bf 02 c0       	push   0xc002bf8a
c000e083:	e8 de 8e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	90                   	nop
c000e08c:	83 c4 0c             	add    esp,0xc
c000e08f:	c3                   	ret    

c000e090 <CmOpen(char const*)>:
c000e090:	57                   	push   edi
c000e091:	56                   	push   esi
c000e092:	53                   	push   ebx
c000e093:	83 ec 1c             	sub    esp,0x1c
c000e096:	6a 30                	push   0x30
c000e098:	e8 a7 23 00 00       	call   c0010444 <malloc>
c000e09d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000e0a4:	89 c3                	mov    ebx,eax
c000e0a6:	e8 99 23 00 00       	call   c0010444 <malloc>
c000e0ab:	83 c4 0c             	add    esp,0xc
c000e0ae:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000e0b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e0b8:	89 c6                	mov    esi,eax
c000e0ba:	50                   	push   eax
c000e0bb:	e8 20 ae ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c000e0c0:	83 c4 0c             	add    esp,0xc
c000e0c3:	89 33                	mov    DWORD PTR [ebx],esi
c000e0c5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000e0c9:	50                   	push   eax
c000e0ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c000e0ce:	50                   	push   eax
c000e0cf:	56                   	push   esi
c000e0d0:	e8 2b b1 ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c000e0d5:	5a                   	pop    edx
c000e0d6:	59                   	pop    ecx
c000e0d7:	6a 01                	push   0x1
c000e0d9:	ff 33                	push   DWORD PTR [ebx]
c000e0db:	e8 1e ae ff ff       	call   c0008efe <File::open(FileOpenMode)>
c000e0e0:	5e                   	pop    esi
c000e0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e5:	e8 5a 23 00 00       	call   c0010444 <malloc>
c000e0ea:	5a                   	pop    edx
c000e0eb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e0ef:	89 c7                	mov    edi,eax
c000e0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0f5:	56                   	push   esi
c000e0f6:	57                   	push   edi
c000e0f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0ff:	50                   	push   eax
c000e100:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e103:	83 c4 14             	add    esp,0x14
c000e106:	ff 33                	push   DWORD PTR [ebx]
c000e108:	e8 4f ae ff ff       	call   c0008f5c <File::close()>
c000e10d:	59                   	pop    ecx
c000e10e:	58                   	pop    eax
c000e10f:	6a 13                	push   0x13
c000e111:	ff 33                	push   DWORD PTR [ebx]
c000e113:	e8 e6 ad ff ff       	call   c0008efe <File::open(FileOpenMode)>
c000e118:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e11a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e11c:	89 34 24             	mov    DWORD PTR [esp],esi
c000e11f:	57                   	push   edi
c000e120:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e124:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e128:	50                   	push   eax
c000e129:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e12c:	83 c4 14             	add    esp,0x14
c000e12f:	57                   	push   edi
c000e130:	e8 1f 23 00 00       	call   c0010454 <free>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e13b:	75 10                	jne    c000e14d <CmOpen(char const*)+0xbd>
c000e13d:	83 ec 0c             	sub    esp,0xc
c000e140:	68 8d bf 02 c0       	push   0xc002bf8d
c000e145:	e8 4e 27 00 00       	call   c0010898 <KePanic(char const*)>
c000e14a:	83 c4 10             	add    esp,0x10
c000e14d:	50                   	push   eax
c000e14e:	6a 00                	push   0x0
c000e150:	6a 00                	push   0x0
c000e152:	ff 33                	push   DWORD PTR [ebx]
c000e154:	8d 7b 05             	lea    edi,[ebx+0x5]
c000e157:	e8 60 ae ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e15c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e15e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e160:	89 34 24             	mov    DWORD PTR [esp],esi
c000e163:	57                   	push   edi
c000e164:	6a 00                	push   0x0
c000e166:	6a 2b                	push   0x2b
c000e168:	50                   	push   eax
c000e169:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e16c:	83 c4 1c             	add    esp,0x1c
c000e16f:	6a 00                	push   0x0
c000e171:	6a 00                	push   0x0
c000e173:	ff 33                	push   DWORD PTR [ebx]
c000e175:	e8 42 ae ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e17a:	83 c4 0c             	add    esp,0xc
c000e17d:	6a 08                	push   0x8
c000e17f:	68 af bf 02 c0       	push   0xc002bfaf
c000e184:	57                   	push   edi
c000e185:	e8 f6 21 ff ff       	call   c0000380 <memcmp>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	85 c0                	test   eax,eax
c000e18f:	74 10                	je     c000e1a1 <CmOpen(char const*)+0x111>
c000e191:	83 ec 0c             	sub    esp,0xc
c000e194:	68 b8 bf 02 c0       	push   0xc002bfb8
c000e199:	e8 fa 26 00 00       	call   c0010898 <KePanic(char const*)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	89 d8                	mov    eax,ebx
c000e1aa:	5b                   	pop    ebx
c000e1ab:	5e                   	pop    esi
c000e1ac:	5f                   	pop    edi
c000e1ad:	c3                   	ret    

c000e1ae <CmClose(Reghive_Tag*)>:
c000e1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e1b6:	74 0b                	je     c000e1c3 <CmClose(Reghive_Tag*)+0x15>
c000e1b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1be:	e9 99 ad ff ff       	jmp    c0008f5c <File::close()>
c000e1c3:	c3                   	ret    

c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000e1c4:	53                   	push   ebx
c000e1c5:	83 ec 18             	sub    esp,0x18
c000e1c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e1cc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e1d0:	74 29                	je     c000e1fb <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000e1d2:	50                   	push   eax
c000e1d3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000e1d8:	99                   	cdq    
c000e1d9:	52                   	push   edx
c000e1da:	50                   	push   eax
c000e1db:	ff 33                	push   DWORD PTR [ebx]
c000e1dd:	e8 da ad ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e1e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1e4:	5a                   	pop    edx
c000e1e5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e1e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1eb:	51                   	push   ecx
c000e1ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e1f0:	6a 00                	push   0x0
c000e1f2:	6a 2b                	push   0x2b
c000e1f4:	50                   	push   eax
c000e1f5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e1f8:	83 c4 20             	add    esp,0x20
c000e1fb:	83 c4 18             	add    esp,0x18
c000e1fe:	5b                   	pop    ebx
c000e1ff:	c3                   	ret    

c000e200 <CmGetString(Reghive_Tag*, int, char*)>:
c000e200:	55                   	push   ebp
c000e201:	57                   	push   edi
c000e202:	56                   	push   esi
c000e203:	53                   	push   ebx
c000e204:	31 db                	xor    ebx,ebx
c000e206:	83 ec 70             	sub    esp,0x70
c000e209:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000e20d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000e214:	50                   	push   eax
c000e215:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000e21c:	55                   	push   ebp
c000e21d:	e8 a2 ff ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e222:	83 c4 10             	add    esp,0x10
c000e225:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000e22a:	c1 e0 08             	shl    eax,0x8
c000e22d:	89 c2                	mov    edx,eax
c000e22f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000e234:	09 d0                	or     eax,edx
c000e236:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000e23b:	c1 e0 08             	shl    eax,0x8
c000e23e:	09 d0                	or     eax,edx
c000e240:	74 25                	je     c000e267 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000e242:	52                   	push   edx
c000e243:	8d 54 24 39          	lea    edx,[esp+0x39]
c000e247:	52                   	push   edx
c000e248:	6b fb 0d             	imul   edi,ebx,0xd
c000e24b:	50                   	push   eax
c000e24c:	55                   	push   ebp
c000e24d:	e8 72 ff ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e252:	8d 74 24 49          	lea    esi,[esp+0x49]
c000e256:	b9 27 00 00 00       	mov    ecx,0x27
c000e25b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000e262:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e264:	83 c4 10             	add    esp,0x10
c000e267:	83 c3 03             	add    ebx,0x3
c000e26a:	83 fb 15             	cmp    ebx,0x15
c000e26d:	75 b6                	jne    c000e225 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000e26f:	83 c4 6c             	add    esp,0x6c
c000e272:	5b                   	pop    ebx
c000e273:	5e                   	pop    esi
c000e274:	5f                   	pop    edi
c000e275:	5d                   	pop    ebp
c000e276:	c3                   	ret    

c000e277 <CmEnterDirectory(Reghive_Tag*, int)>:
c000e277:	83 ec 40             	sub    esp,0x40
c000e27a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e27e:	50                   	push   eax
c000e27f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e283:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e287:	e8 38 ff ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e28c:	83 c4 10             	add    esp,0x10
c000e28f:	83 c8 ff             	or     eax,0xffffffff
c000e292:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000e297:	75 19                	jne    c000e2b2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000e299:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000e29e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000e2a3:	c1 e0 08             	shl    eax,0x8
c000e2a6:	09 c2                	or     edx,eax
c000e2a8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000e2ad:	c1 e0 10             	shl    eax,0x10
c000e2b0:	09 d0                	or     eax,edx
c000e2b2:	83 c4 3c             	add    esp,0x3c
c000e2b5:	c3                   	ret    

c000e2b6 <CmGetNext(Reghive_Tag*, int)>:
c000e2b6:	83 ec 40             	sub    esp,0x40
c000e2b9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e2bd:	50                   	push   eax
c000e2be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e2c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e2c6:	e8 f9 fe ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e2cb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e2d0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000e2d5:	c1 e0 08             	shl    eax,0x8
c000e2d8:	09 c2                	or     edx,eax
c000e2da:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000e2df:	83 c4 4c             	add    esp,0x4c
c000e2e2:	c1 e0 10             	shl    eax,0x10
c000e2e5:	09 d0                	or     eax,edx
c000e2e7:	c3                   	ret    

c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000e2e8:	53                   	push   ebx
c000e2e9:	83 ec 18             	sub    esp,0x18
c000e2ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e2f0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e2f4:	74 29                	je     c000e31f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000e2f6:	50                   	push   eax
c000e2f7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000e2fc:	99                   	cdq    
c000e2fd:	52                   	push   edx
c000e2fe:	50                   	push   eax
c000e2ff:	ff 33                	push   DWORD PTR [ebx]
c000e301:	e8 b6 ac ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e306:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e308:	5a                   	pop    edx
c000e309:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e30d:	8b 10                	mov    edx,DWORD PTR [eax]
c000e30f:	51                   	push   ecx
c000e310:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e314:	6a 00                	push   0x0
c000e316:	6a 2b                	push   0x2b
c000e318:	50                   	push   eax
c000e319:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e31c:	83 c4 20             	add    esp,0x20
c000e31f:	83 c4 18             	add    esp,0x18
c000e322:	5b                   	pop    ebx
c000e323:	c3                   	ret    

c000e324 <CmFreeExtent(Reghive_Tag*, int)>:
c000e324:	53                   	push   ebx
c000e325:	83 ec 3c             	sub    esp,0x3c
c000e328:	6a 2b                	push   0x2b
c000e32a:	6a 00                	push   0x0
c000e32c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e330:	53                   	push   ebx
c000e331:	e8 ba 21 ff ff       	call   c00004f0 <memset>
c000e336:	83 c4 0c             	add    esp,0xc
c000e339:	53                   	push   ebx
c000e33a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e33e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e342:	e8 a1 ff ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e347:	83 c4 48             	add    esp,0x48
c000e34a:	5b                   	pop    ebx
c000e34b:	c3                   	ret    

c000e34c <CmUpdateHeader(Reghive_Tag*)>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e353:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e357:	74 10                	je     c000e369 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000e359:	52                   	push   edx
c000e35a:	8d 50 05             	lea    edx,[eax+0x5]
c000e35d:	52                   	push   edx
c000e35e:	6a 00                	push   0x0
c000e360:	50                   	push   eax
c000e361:	e8 82 ff ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e366:	83 c4 10             	add    esp,0x10
c000e369:	83 c4 0c             	add    esp,0xc
c000e36c:	c3                   	ret    

c000e36d <CmExpand(Reghive_Tag*, int)>:
c000e36d:	55                   	push   ebp
c000e36e:	57                   	push   edi
c000e36f:	83 cf ff             	or     edi,0xffffffff
c000e372:	56                   	push   esi
c000e373:	53                   	push   ebx
c000e374:	83 ec 3c             	sub    esp,0x3c
c000e377:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000e37b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000e37f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e383:	74 59                	je     c000e3de <CmExpand(Reghive_Tag*, int)+0x71>
c000e385:	50                   	push   eax
c000e386:	31 d2                	xor    edx,edx
c000e388:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000e38c:	31 ff                	xor    edi,edi
c000e38e:	52                   	push   edx
c000e38f:	50                   	push   eax
c000e390:	ff 33                	push   DWORD PTR [ebx]
c000e392:	e8 25 ac ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e397:	83 c4 0c             	add    esp,0xc
c000e39a:	6a 2b                	push   0x2b
c000e39c:	6a 00                	push   0x0
c000e39e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000e3a2:	55                   	push   ebp
c000e3a3:	e8 48 21 ff ff       	call   c00004f0 <memset>
c000e3a8:	83 c4 10             	add    esp,0x10
c000e3ab:	39 f7                	cmp    edi,esi
c000e3ad:	7d 1b                	jge    c000e3ca <CmExpand(Reghive_Tag*, int)+0x5d>
c000e3af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3b1:	83 ec 0c             	sub    esp,0xc
c000e3b4:	47                   	inc    edi
c000e3b5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000e3b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3bb:	51                   	push   ecx
c000e3bc:	55                   	push   ebp
c000e3bd:	6a 00                	push   0x0
c000e3bf:	6a 2b                	push   0x2b
c000e3c1:	50                   	push   eax
c000e3c2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e3c5:	83 c4 20             	add    esp,0x20
c000e3c8:	eb e1                	jmp    c000e3ab <CmExpand(Reghive_Tag*, int)+0x3e>
c000e3ca:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000e3cd:	83 ec 0c             	sub    esp,0xc
c000e3d0:	01 fe                	add    esi,edi
c000e3d2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000e3d5:	53                   	push   ebx
c000e3d6:	e8 71 ff ff ff       	call   c000e34c <CmUpdateHeader(Reghive_Tag*)>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	83 c4 3c             	add    esp,0x3c
c000e3e1:	89 f8                	mov    eax,edi
c000e3e3:	5b                   	pop    ebx
c000e3e4:	5e                   	pop    esi
c000e3e5:	5f                   	pop    edi
c000e3e6:	5d                   	pop    ebp
c000e3e7:	c3                   	ret    

c000e3e8 <CmFindUnusedExtent(Reghive_Tag*)>:
c000e3e8:	55                   	push   ebp
c000e3e9:	57                   	push   edi
c000e3ea:	56                   	push   esi
c000e3eb:	53                   	push   ebx
c000e3ec:	83 cb ff             	or     ebx,0xffffffff
c000e3ef:	83 ec 1c             	sub    esp,0x1c
c000e3f2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e3f6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000e3fa:	74 68                	je     c000e464 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e3fc:	51                   	push   ecx
c000e3fd:	be 2b 00 00 00       	mov    esi,0x2b
c000e402:	6a 00                	push   0x0
c000e404:	31 ff                	xor    edi,edi
c000e406:	6a 00                	push   0x0
c000e408:	31 db                	xor    ebx,ebx
c000e40a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e40d:	e8 aa ab ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000e418:	76 3b                	jbe    c000e455 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000e41a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e424:	8b 10                	mov    edx,DWORD PTR [eax]
c000e426:	51                   	push   ecx
c000e427:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000e42b:	51                   	push   ecx
c000e42c:	6a 00                	push   0x0
c000e42e:	6a 01                	push   0x1
c000e430:	50                   	push   eax
c000e431:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e434:	83 c4 20             	add    esp,0x20
c000e437:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e43c:	74 26                	je     c000e464 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e43e:	52                   	push   edx
c000e43f:	43                   	inc    ebx
c000e440:	57                   	push   edi
c000e441:	56                   	push   esi
c000e442:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e445:	e8 72 ab ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c000e44a:	83 c6 2b             	add    esi,0x2b
c000e44d:	83 d7 00             	adc    edi,0x0
c000e450:	83 c4 10             	add    esp,0x10
c000e453:	eb c0                	jmp    c000e415 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000e455:	50                   	push   eax
c000e456:	50                   	push   eax
c000e457:	6a 40                	push   0x40
c000e459:	55                   	push   ebp
c000e45a:	e8 0e ff ff ff       	call   c000e36d <CmExpand(Reghive_Tag*, int)>
c000e45f:	83 c4 10             	add    esp,0x10
c000e462:	89 c3                	mov    ebx,eax
c000e464:	83 c4 1c             	add    esp,0x1c
c000e467:	89 d8                	mov    eax,ebx
c000e469:	5b                   	pop    ebx
c000e46a:	5e                   	pop    esi
c000e46b:	5f                   	pop    edi
c000e46c:	5d                   	pop    ebp
c000e46d:	c3                   	ret    

c000e46e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000e46e:	55                   	push   ebp
c000e46f:	57                   	push   edi
c000e470:	56                   	push   esi
c000e471:	53                   	push   ebx
c000e472:	81 ec 88 00 00 00    	sub    esp,0x88
c000e478:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000e47f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e486:	e8 5d ff ff ff       	call   c000e3e8 <CmFindUnusedExtent(Reghive_Tag*)>
c000e48b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e48f:	83 c4 0c             	add    esp,0xc
c000e492:	6a 2b                	push   0x2b
c000e494:	6a 00                	push   0x0
c000e496:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000e49a:	55                   	push   ebp
c000e49b:	e8 50 20 ff ff       	call   c00004f0 <memset>
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	85 db                	test   ebx,ebx
c000e4a5:	74 12                	je     c000e4b9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000e4a7:	51                   	push   ecx
c000e4a8:	55                   	push   ebp
c000e4a9:	53                   	push   ebx
c000e4aa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e4b1:	e8 0e fd ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000e4bd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e4c4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000e4c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4cb:	85 db                	test   ebx,ebx
c000e4cd:	74 49                	je     c000e518 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000e4cf:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000e4d4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000e4d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4dd:	c1 e0 08             	shl    eax,0x8
c000e4e0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000e4e6:	09 c8                	or     eax,ecx
c000e4e8:	74 11                	je     c000e4fb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000e4ea:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000e4ee:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000e4f2:	c1 e8 10             	shr    eax,0x10
c000e4f5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000e4f9:	eb 0f                	jmp    c000e50a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000e4fb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e500:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e505:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e50a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000e50e:	c1 ea 08             	shr    edx,0x8
c000e511:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000e516:	eb 0f                	jmp    c000e527 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000e518:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e51d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e522:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e527:	52                   	push   edx
c000e528:	8d 44 24 49          	lea    eax,[esp+0x49]
c000e52c:	50                   	push   eax
c000e52d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e531:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e538:	e8 ab fd ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e53d:	83 c4 10             	add    esp,0x10
c000e540:	85 db                	test   ebx,ebx
c000e542:	74 12                	je     c000e556 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000e544:	50                   	push   eax
c000e545:	55                   	push   ebp
c000e546:	53                   	push   ebx
c000e547:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e54e:	e8 95 fd ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e55a:	83 c4 7c             	add    esp,0x7c
c000e55d:	5b                   	pop    ebx
c000e55e:	5e                   	pop    esi
c000e55f:	5f                   	pop    edi
c000e560:	5d                   	pop    ebp
c000e561:	c3                   	ret    

c000e562 <CmSetString(Reghive_Tag*, int, char const*)>:
c000e562:	55                   	push   ebp
c000e563:	57                   	push   edi
c000e564:	56                   	push   esi
c000e565:	53                   	push   ebx
c000e566:	bb 27 00 00 00       	mov    ebx,0x27
c000e56b:	81 ec 88 00 00 00    	sub    esp,0x88
c000e571:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000e578:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e57f:	e8 fc 1f ff ff       	call   c0000580 <strlen>
c000e584:	8d 48 26             	lea    ecx,[eax+0x26]
c000e587:	89 c8                	mov    eax,ecx
c000e589:	99                   	cdq    
c000e58a:	f7 fb                	idiv   ebx
c000e58c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e590:	83 c4 10             	add    esp,0x10
c000e593:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e599:	7e 10                	jle    c000e5ab <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e59b:	83 ec 0c             	sub    esp,0xc
c000e59e:	68 d3 bf 02 c0       	push   0xc002bfd3
c000e5a3:	e8 f0 22 00 00       	call   c0010898 <KePanic(char const*)>
c000e5a8:	83 c4 10             	add    esp,0x10
c000e5ab:	53                   	push   ebx
c000e5ac:	31 ed                	xor    ebp,ebp
c000e5ae:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e5b2:	53                   	push   ebx
c000e5b3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e5ba:	57                   	push   edi
c000e5bb:	e8 04 fc ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e5c0:	83 c4 10             	add    esp,0x10
c000e5c3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000e5c7:	89 f0                	mov    eax,esi
c000e5c9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000e5cd:	c1 e0 08             	shl    eax,0x8
c000e5d0:	09 c6                	or     esi,eax
c000e5d2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e5d6:	c1 e6 08             	shl    esi,0x8
c000e5d9:	09 c6                	or     esi,eax
c000e5db:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000e5df:	7e 72                	jle    c000e653 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000e5e1:	85 f6                	test   esi,esi
c000e5e3:	75 25                	jne    c000e60a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e5e5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e5ea:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e5ee:	50                   	push   eax
c000e5ef:	6a 00                	push   0x0
c000e5f1:	6a 00                	push   0x0
c000e5f3:	57                   	push   edi
c000e5f4:	e8 75 fe ff ff       	call   c000e46e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e5f9:	83 c4 10             	add    esp,0x10
c000e5fc:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e5ff:	89 c6                	mov    esi,eax
c000e601:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e604:	c1 f8 10             	sar    eax,0x10
c000e607:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e60a:	51                   	push   ecx
c000e60b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e60f:	52                   	push   edx
c000e610:	56                   	push   esi
c000e611:	57                   	push   edi
c000e612:	e8 ad fb ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e617:	83 c4 0c             	add    esp,0xc
c000e61a:	6a 27                	push   0x27
c000e61c:	6a 00                	push   0x0
c000e61e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e622:	51                   	push   ecx
c000e623:	e8 c8 1e ff ff       	call   c00004f0 <memset>
c000e628:	6b c5 27             	imul   eax,ebp,0x27
c000e62b:	83 c4 0c             	add    esp,0xc
c000e62e:	6a 27                	push   0x27
c000e630:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e637:	50                   	push   eax
c000e638:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e63c:	51                   	push   ecx
c000e63d:	e8 4e 20 ff ff       	call   c0000690 <strncpy>
c000e642:	83 c4 0c             	add    esp,0xc
c000e645:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e649:	52                   	push   edx
c000e64a:	56                   	push   esi
c000e64b:	57                   	push   edi
c000e64c:	e8 97 fc ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e651:	eb 19                	jmp    c000e66c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000e653:	85 f6                	test   esi,esi
c000e655:	74 18                	je     c000e66f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000e657:	52                   	push   edx
c000e658:	52                   	push   edx
c000e659:	56                   	push   esi
c000e65a:	57                   	push   edi
c000e65b:	e8 c4 fc ff ff       	call   c000e324 <CmFreeExtent(Reghive_Tag*, int)>
c000e660:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e664:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e668:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	45                   	inc    ebp
c000e670:	83 c3 03             	add    ebx,0x3
c000e673:	83 fd 07             	cmp    ebp,0x7
c000e676:	0f 85 47 ff ff ff    	jne    c000e5c3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e67c:	50                   	push   eax
c000e67d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e681:	50                   	push   eax
c000e682:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e689:	57                   	push   edi
c000e68a:	e8 59 fc ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e68f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e695:	5b                   	pop    ebx
c000e696:	5e                   	pop    esi
c000e697:	5f                   	pop    edi
c000e698:	5d                   	pop    ebp
c000e699:	c3                   	ret    

c000e69a <CmGetMatch(char*, char*, bool, bool*)>:
c000e69a:	56                   	push   esi
c000e69b:	53                   	push   ebx
c000e69c:	50                   	push   eax
c000e69d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6a2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e6a6:	74 25                	je     c000e6cd <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e6a8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e6ab:	31 db                	xor    ebx,ebx
c000e6ad:	50                   	push   eax
c000e6ae:	50                   	push   eax
c000e6af:	8d 04 9d a0 05 03 c0 	lea    eax,[ebx*4-0x3ffcfa60]
c000e6b6:	50                   	push   eax
c000e6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6bb:	e8 c0 20 ff ff       	call   c0000780 <strcmp>
c000e6c0:	83 c4 10             	add    esp,0x10
c000e6c3:	85 c0                	test   eax,eax
c000e6c5:	74 2e                	je     c000e6f5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e6c7:	43                   	inc    ebx
c000e6c8:	83 fb 3f             	cmp    ebx,0x3f
c000e6cb:	75 e0                	jne    c000e6ad <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e6cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e6d0:	31 db                	xor    ebx,ebx
c000e6d2:	51                   	push   ecx
c000e6d3:	51                   	push   ecx
c000e6d4:	8d 04 9d a0 05 03 c0 	lea    eax,[ebx*4-0x3ffcfa60]
c000e6db:	50                   	push   eax
c000e6dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e6e0:	e8 9b 20 ff ff       	call   c0000780 <strcmp>
c000e6e5:	83 c4 10             	add    esp,0x10
c000e6e8:	85 c0                	test   eax,eax
c000e6ea:	74 09                	je     c000e6f5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e6ec:	43                   	inc    ebx
c000e6ed:	83 fb 3f             	cmp    ebx,0x3f
c000e6f0:	75 e0                	jne    c000e6d2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e6f2:	83 cb ff             	or     ebx,0xffffffff
c000e6f5:	5a                   	pop    edx
c000e6f6:	89 d8                	mov    eax,ebx
c000e6f8:	5b                   	pop    ebx
c000e6f9:	5e                   	pop    esi
c000e6fa:	c3                   	ret    

c000e6fb <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e6fb:	55                   	push   ebp
c000e6fc:	31 c0                	xor    eax,eax
c000e6fe:	57                   	push   edi
c000e6ff:	56                   	push   esi
c000e700:	53                   	push   ebx
c000e701:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e705:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e709:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e70d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e711:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e713:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e716:	83 fd 1f             	cmp    ebp,0x1f
c000e719:	7f 0b                	jg     c000e726 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e71b:	0f b6 c2             	movzx  eax,dl
c000e71e:	d3 e0                	shl    eax,cl
c000e720:	09 07                	or     DWORD PTR [edi],eax
c000e722:	b0 01                	mov    al,0x1
c000e724:	01 33                	add    DWORD PTR [ebx],esi
c000e726:	5b                   	pop    ebx
c000e727:	5e                   	pop    esi
c000e728:	5f                   	pop    edi
c000e729:	5d                   	pop    ebp
c000e72a:	c3                   	ret    

c000e72b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e72b:	57                   	push   edi
c000e72c:	56                   	push   esi
c000e72d:	53                   	push   ebx
c000e72e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e732:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e736:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e73a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e73e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e740:	7c 17                	jl     c000e759 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e742:	8b 17                	mov    edx,DWORD PTR [edi]
c000e744:	b8 01 00 00 00       	mov    eax,0x1
c000e749:	d3 e0                	shl    eax,cl
c000e74b:	48                   	dec    eax
c000e74c:	21 d0                	and    eax,edx
c000e74e:	d3 ea                	shr    edx,cl
c000e750:	89 17                	mov    DWORD PTR [edi],edx
c000e752:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e754:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e757:	eb 05                	jmp    c000e75e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e759:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e75c:	31 c0                	xor    eax,eax
c000e75e:	5b                   	pop    ebx
c000e75f:	5e                   	pop    esi
c000e760:	5f                   	pop    edi
c000e761:	c3                   	ret    

c000e762 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e762:	83 ec 40             	sub    esp,0x40
c000e765:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e769:	50                   	push   eax
c000e76a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e76e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e772:	e8 4d fa ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e777:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e77b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e77f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e783:	89 10                	mov    DWORD PTR [eax],edx
c000e785:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e788:	83 c4 4c             	add    esp,0x4c
c000e78b:	c3                   	ret    

c000e78c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e78c:	55                   	push   ebp
c000e78d:	57                   	push   edi
c000e78e:	56                   	push   esi
c000e78f:	53                   	push   ebx
c000e790:	83 ec 40             	sub    esp,0x40
c000e793:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e797:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e79b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e79f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e7a3:	53                   	push   ebx
c000e7a4:	56                   	push   esi
c000e7a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e7a9:	e8 16 fa ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e7ae:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e7b2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e7b6:	83 c4 0c             	add    esp,0xc
c000e7b9:	53                   	push   ebx
c000e7ba:	56                   	push   esi
c000e7bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e7bf:	e8 24 fb ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e7c4:	83 c4 4c             	add    esp,0x4c
c000e7c7:	5b                   	pop    ebx
c000e7c8:	5e                   	pop    esi
c000e7c9:	5f                   	pop    edi
c000e7ca:	5d                   	pop    ebp
c000e7cb:	c3                   	ret    

c000e7cc <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e7cc:	55                   	push   ebp
c000e7cd:	57                   	push   edi
c000e7ce:	56                   	push   esi
c000e7cf:	31 f6                	xor    esi,esi
c000e7d1:	53                   	push   ebx
c000e7d2:	31 db                	xor    ebx,ebx
c000e7d4:	83 ec 40             	sub    esp,0x40
c000e7d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7e7:	6a 12                	push   0x12
c000e7e9:	68 ee 00 00 00       	push   0xee
c000e7ee:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e7f2:	e8 f9 1c ff ff       	call   c00004f0 <memset>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e7fe:	6a 08                	push   0x8
c000e800:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e804:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e808:	50                   	push   eax
c000e809:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e80d:	55                   	push   ebp
c000e80e:	57                   	push   edi
c000e80f:	e8 e7 fe ff ff       	call   c000e6fb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e81b:	50                   	push   eax
c000e81c:	6a 06                	push   0x6
c000e81e:	55                   	push   ebp
c000e81f:	57                   	push   edi
c000e820:	e8 06 ff ff ff       	call   c000e72b <CmGetShift(unsigned int*, int*, int, bool*)>
c000e825:	83 c4 10             	add    esp,0x10
c000e828:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e82d:	74 07                	je     c000e836 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e82f:	46                   	inc    esi
c000e830:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e834:	eb e1                	jmp    c000e817 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e836:	43                   	inc    ebx
c000e837:	83 fb 12             	cmp    ebx,0x12
c000e83a:	75 c2                	jne    c000e7fe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e83c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e840:	31 f6                	xor    esi,esi
c000e842:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e845:	50                   	push   eax
c000e846:	50                   	push   eax
c000e847:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000e84c:	46                   	inc    esi
c000e84d:	8d 04 85 a0 05 03 c0 	lea    eax,[eax*4-0x3ffcfa60]
c000e854:	50                   	push   eax
c000e855:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e859:	e8 12 20 ff ff       	call   c0000870 <strcat>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	83 fe 18             	cmp    esi,0x18
c000e864:	75 df                	jne    c000e845 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e866:	83 c4 3c             	add    esp,0x3c
c000e869:	31 c0                	xor    eax,eax
c000e86b:	5b                   	pop    ebx
c000e86c:	5e                   	pop    esi
c000e86d:	5f                   	pop    edi
c000e86e:	5d                   	pop    ebp
c000e86f:	c3                   	ret    

c000e870 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e870:	83 ec 40             	sub    esp,0x40
c000e873:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e877:	50                   	push   eax
c000e878:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e87c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e880:	e8 3f f9 ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e885:	58                   	pop    eax
c000e886:	5a                   	pop    edx
c000e887:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e88b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e88f:	50                   	push   eax
c000e890:	e8 37 ff ff ff       	call   c000e7cc <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e895:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e89a:	83 c4 4c             	add    esp,0x4c
c000e89d:	c3                   	ret    

c000e89e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e89e:	55                   	push   ebp
c000e89f:	57                   	push   edi
c000e8a0:	56                   	push   esi
c000e8a1:	53                   	push   ebx
c000e8a2:	31 db                	xor    ebx,ebx
c000e8a4:	83 ec 70             	sub    esp,0x70
c000e8a7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e8ae:	6a 30                	push   0x30
c000e8b0:	6a 00                	push   0x0
c000e8b2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e8b6:	56                   	push   esi
c000e8b7:	e8 34 1c ff ff       	call   c00004f0 <memset>
c000e8bc:	83 c4 10             	add    esp,0x10
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	57                   	push   edi
c000e8c3:	e8 b8 1c ff ff       	call   c0000580 <strlen>
c000e8c8:	83 c4 10             	add    esp,0x10
c000e8cb:	39 d8                	cmp    eax,ebx
c000e8cd:	76 16                	jbe    c000e8e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e8cf:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e8d3:	83 ec 0c             	sub    esp,0xc
c000e8d6:	50                   	push   eax
c000e8d7:	e8 84 20 ff ff       	call   c0000960 <toupper>
c000e8dc:	83 c4 10             	add    esp,0x10
c000e8df:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e8e2:	43                   	inc    ebx
c000e8e3:	eb da                	jmp    c000e8bf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e8e5:	52                   	push   edx
c000e8e6:	31 db                	xor    ebx,ebx
c000e8e8:	6a 18                	push   0x18
c000e8ea:	31 ff                	xor    edi,edi
c000e8ec:	6a 3f                	push   0x3f
c000e8ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e8f2:	50                   	push   eax
c000e8f3:	e8 f8 1b ff ff       	call   c00004f0 <memset>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000e8ff:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e903:	84 c0                	test   al,al
c000e905:	0f 84 af 00 00 00    	je     c000e9ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e90b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e90f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e912:	83 ec 0c             	sub    esp,0xc
c000e915:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000e91a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e91e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000e922:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000e927:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e92b:	56                   	push   esi
c000e92c:	e8 4f 1c ff ff       	call   c0000580 <strlen>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	85 c0                	test   eax,eax
c000e936:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e93a:	74 0b                	je     c000e947 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e93c:	50                   	push   eax
c000e93d:	6a 01                	push   0x1
c000e93f:	56                   	push   esi
c000e940:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e944:	50                   	push   eax
c000e945:	eb 0a                	jmp    c000e951 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e947:	50                   	push   eax
c000e948:	6a 00                	push   0x0
c000e94a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e94e:	50                   	push   eax
c000e94f:	6a 00                	push   0x0
c000e951:	e8 44 fd ff ff       	call   c000e69a <CmGetMatch(char*, char*, bool, bool*)>
c000e956:	83 c4 10             	add    esp,0x10
c000e959:	83 f8 ff             	cmp    eax,0xffffffff
c000e95c:	75 1a                	jne    c000e978 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	68 e8 bf 02 c0       	push   0xc002bfe8
c000e966:	e8 2d 1f 00 00       	call   c0010898 <KePanic(char const*)>
c000e96b:	83 c4 10             	add    esp,0x10
c000e96e:	b8 02 00 00 00       	mov    eax,0x2
c000e973:	e9 bb 00 00 00       	jmp    c000ea33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e978:	83 ff 18             	cmp    edi,0x18
c000e97b:	75 1a                	jne    c000e997 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e97d:	83 ec 0c             	sub    esp,0xc
c000e980:	68 fd bf 02 c0       	push   0xc002bffd
c000e985:	e8 0e 1f 00 00       	call   c0010898 <KePanic(char const*)>
c000e98a:	83 c4 10             	add    esp,0x10
c000e98d:	b8 01 00 00 00       	mov    eax,0x1
c000e992:	e9 9c 00 00 00       	jmp    c000ea33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e997:	47                   	inc    edi
c000e998:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e99d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e9a1:	0f 45 dd             	cmovne ebx,ebp
c000e9a4:	83 ec 0c             	sub    esp,0xc
c000e9a7:	56                   	push   esi
c000e9a8:	e8 d3 1b ff ff       	call   c0000580 <strlen>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	85 c0                	test   eax,eax
c000e9b2:	74 06                	je     c000e9ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e9b4:	43                   	inc    ebx
c000e9b5:	e9 41 ff ff ff       	jmp    c000e8fb <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e9ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e9c2:	31 db                	xor    ebx,ebx
c000e9c4:	31 ff                	xor    edi,edi
c000e9c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e9ce:	50                   	push   eax
c000e9cf:	6a 12                	push   0x12
c000e9d1:	68 ee 00 00 00       	push   0xee
c000e9d6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e9dd:	e8 0e 1b ff ff       	call   c00004f0 <memset>
c000e9e2:	83 c4 10             	add    esp,0x10
c000e9e5:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e9e9:	83 fb 17             	cmp    ebx,0x17
c000e9ec:	7e 26                	jle    c000ea14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000e9ee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e9f2:	50                   	push   eax
c000e9f3:	6a 08                	push   0x8
c000e9f5:	55                   	push   ebp
c000e9f6:	56                   	push   esi
c000e9f7:	e8 2f fd ff ff       	call   c000e72b <CmGetShift(unsigned int*, int*, int, bool*)>
c000e9fc:	83 c4 10             	add    esp,0x10
c000e9ff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ea04:	74 26                	je     c000ea2c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000ea06:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000ea0d:	4b                   	dec    ebx
c000ea0e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000ea11:	47                   	inc    edi
c000ea12:	eb 1c                	jmp    c000ea30 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000ea14:	6a 06                	push   0x6
c000ea16:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000ea1b:	50                   	push   eax
c000ea1c:	55                   	push   ebp
c000ea1d:	56                   	push   esi
c000ea1e:	e8 d8 fc ff ff       	call   c000e6fb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ea23:	83 c4 10             	add    esp,0x10
c000ea26:	84 c0                	test   al,al
c000ea28:	75 06                	jne    c000ea30 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000ea2a:	eb c2                	jmp    c000e9ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000ea2c:	31 c0                	xor    eax,eax
c000ea2e:	eb 03                	jmp    c000ea33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000ea30:	43                   	inc    ebx
c000ea31:	eb b2                	jmp    c000e9e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000ea33:	83 c4 6c             	add    esp,0x6c
c000ea36:	5b                   	pop    ebx
c000ea37:	5e                   	pop    esi
c000ea38:	5f                   	pop    edi
c000ea39:	5d                   	pop    ebp
c000ea3a:	c3                   	ret    

c000ea3b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ea3b:	53                   	push   ebx
c000ea3c:	83 ec 3c             	sub    esp,0x3c
c000ea3f:	6a 2b                	push   0x2b
c000ea41:	6a 00                	push   0x0
c000ea43:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ea47:	53                   	push   ebx
c000ea48:	e8 a3 1a ff ff       	call   c00004f0 <memset>
c000ea4d:	58                   	pop    eax
c000ea4e:	5a                   	pop    edx
c000ea4f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ea53:	50                   	push   eax
c000ea54:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea58:	e8 41 fe ff ff       	call   c000e89e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ea5d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000ea62:	83 c4 0c             	add    esp,0xc
c000ea65:	6a 15                	push   0x15
c000ea67:	6a 00                	push   0x0
c000ea69:	8d 44 24 27          	lea    eax,[esp+0x27]
c000ea6d:	50                   	push   eax
c000ea6e:	e8 7d 1a ff ff       	call   c00004f0 <memset>
c000ea73:	53                   	push   ebx
c000ea74:	6a 00                	push   0x0
c000ea76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ea7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ea7e:	e8 eb f9 ff ff       	call   c000e46e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ea83:	83 c4 58             	add    esp,0x58
c000ea86:	5b                   	pop    ebx
c000ea87:	c3                   	ret    

c000ea88 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000ea88:	56                   	push   esi
c000ea89:	53                   	push   ebx
c000ea8a:	83 ec 48             	sub    esp,0x48
c000ea8d:	6a 12                	push   0x12
c000ea8f:	68 ff 00 00 00       	push   0xff
c000ea94:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000ea98:	56                   	push   esi
c000ea99:	e8 52 1a ff ff       	call   c00004f0 <memset>
c000ea9e:	5a                   	pop    edx
c000ea9f:	59                   	pop    ecx
c000eaa0:	56                   	push   esi
c000eaa1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000eaa5:	e8 f4 fd ff ff       	call   c000e89e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000eaaa:	83 c4 10             	add    esp,0x10
c000eaad:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000eab1:	85 db                	test   ebx,ebx
c000eab3:	74 42                	je     c000eaf7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000eab5:	50                   	push   eax
c000eab6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000eaba:	50                   	push   eax
c000eabb:	53                   	push   ebx
c000eabc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eac0:	e8 ff f6 ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000eac5:	83 c4 0c             	add    esp,0xc
c000eac8:	6a 12                	push   0x12
c000eaca:	8d 44 24 21          	lea    eax,[esp+0x21]
c000eace:	50                   	push   eax
c000eacf:	56                   	push   esi
c000ead0:	e8 ab 18 ff ff       	call   c0000380 <memcmp>
c000ead5:	83 c4 10             	add    esp,0x10
c000ead8:	85 c0                	test   eax,eax
c000eada:	74 1e                	je     c000eafa <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000eadc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000eae1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000eae6:	c1 e3 08             	shl    ebx,0x8
c000eae9:	09 d8                	or     eax,ebx
c000eaeb:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000eaf0:	c1 e3 10             	shl    ebx,0x10
c000eaf3:	09 c3                	or     ebx,eax
c000eaf5:	eb ba                	jmp    c000eab1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000eaf7:	83 cb ff             	or     ebx,0xffffffff
c000eafa:	83 c4 44             	add    esp,0x44
c000eafd:	89 d8                	mov    eax,ebx
c000eaff:	5b                   	pop    ebx
c000eb00:	5e                   	pop    esi
c000eb01:	c3                   	ret    

c000eb02 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000eb02:	57                   	push   edi
c000eb03:	56                   	push   esi
c000eb04:	53                   	push   ebx
c000eb05:	83 ec 34             	sub    esp,0x34
c000eb08:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000eb0c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000eb10:	6a 2b                	push   0x2b
c000eb12:	6a 00                	push   0x0
c000eb14:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000eb18:	53                   	push   ebx
c000eb19:	e8 d2 19 ff ff       	call   c00004f0 <memset>
c000eb1e:	58                   	pop    eax
c000eb1f:	5a                   	pop    edx
c000eb20:	8d 44 24 11          	lea    eax,[esp+0x11]
c000eb24:	50                   	push   eax
c000eb25:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb29:	e8 70 fd ff ff       	call   c000e89e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000eb2e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000eb32:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000eb36:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000eb3a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000eb3e:	53                   	push   ebx
c000eb3f:	6a 00                	push   0x0
c000eb41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eb45:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eb49:	e8 20 f9 ff ff       	call   c000e46e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000eb4e:	83 c4 50             	add    esp,0x50
c000eb51:	5b                   	pop    ebx
c000eb52:	5e                   	pop    esi
c000eb53:	5f                   	pop    edi
c000eb54:	c3                   	ret    

c000eb55 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000eb55:	55                   	push   ebp
c000eb56:	57                   	push   edi
c000eb57:	56                   	push   esi
c000eb58:	53                   	push   ebx
c000eb59:	83 ec 40             	sub    esp,0x40
c000eb5c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000eb60:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000eb64:	6a 2b                	push   0x2b
c000eb66:	6a 00                	push   0x0
c000eb68:	8d 74 24 11          	lea    esi,[esp+0x11]
c000eb6c:	56                   	push   esi
c000eb6d:	e8 7e 19 ff ff       	call   c00004f0 <memset>
c000eb72:	5f                   	pop    edi
c000eb73:	89 ef                	mov    edi,ebp
c000eb75:	58                   	pop    eax
c000eb76:	8d 44 24 11          	lea    eax,[esp+0x11]
c000eb7a:	50                   	push   eax
c000eb7b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000eb7f:	e8 1a fd ff ff       	call   c000e89e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000eb84:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000eb89:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000eb8e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000eb93:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	85 ed                	test   ebp,ebp
c000eb9d:	74 14                	je     c000ebb3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000eb9f:	51                   	push   ecx
c000eba0:	51                   	push   ecx
c000eba1:	57                   	push   edi
c000eba2:	53                   	push   ebx
c000eba3:	e8 0e f7 ff ff       	call   c000e2b6 <CmGetNext(Reghive_Tag*, int)>
c000eba8:	83 c4 10             	add    esp,0x10
c000ebab:	85 c0                	test   eax,eax
c000ebad:	74 04                	je     c000ebb3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ebaf:	89 c7                	mov    edi,eax
c000ebb1:	eb e8                	jmp    c000eb9b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ebb3:	56                   	push   esi
c000ebb4:	6a 00                	push   0x0
c000ebb6:	57                   	push   edi
c000ebb7:	53                   	push   ebx
c000ebb8:	e8 b1 f8 ff ff       	call   c000e46e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ebbd:	83 c4 0c             	add    esp,0xc
c000ebc0:	56                   	push   esi
c000ebc1:	50                   	push   eax
c000ebc2:	89 c7                	mov    edi,eax
c000ebc4:	53                   	push   ebx
c000ebc5:	e8 fa f5 ff ff       	call   c000e1c4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ebca:	58                   	pop    eax
c000ebcb:	5a                   	pop    edx
c000ebcc:	6a 6c                	push   0x6c
c000ebce:	6a 00                	push   0x0
c000ebd0:	6a 00                	push   0x0
c000ebd2:	68 0e c0 02 c0       	push   0xc002c00e
c000ebd7:	57                   	push   edi
c000ebd8:	53                   	push   ebx
c000ebd9:	e8 24 ff ff ff       	call   c000eb02 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000ebde:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000ebe2:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000ebe6:	c1 e8 10             	shr    eax,0x10
c000ebe9:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000ebed:	83 c4 1c             	add    esp,0x1c
c000ebf0:	56                   	push   esi
c000ebf1:	57                   	push   edi
c000ebf2:	53                   	push   ebx
c000ebf3:	e8 f0 f6 ff ff       	call   c000e2e8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ebf8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000ebfd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000ec02:	c1 e0 08             	shl    eax,0x8
c000ec05:	09 c2                	or     edx,eax
c000ec07:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000ec0c:	83 c4 4c             	add    esp,0x4c
c000ec0f:	5b                   	pop    ebx
c000ec10:	5e                   	pop    esi
c000ec11:	c1 e0 10             	shl    eax,0x10
c000ec14:	09 d0                	or     eax,edx
c000ec16:	5f                   	pop    edi
c000ec17:	5d                   	pop    ebp
c000ec18:	c3                   	ret    

c000ec19 <zStrtok(char*, char const*)>:
c000ec19:	55                   	push   ebp
c000ec1a:	57                   	push   edi
c000ec1b:	56                   	push   esi
c000ec1c:	53                   	push   ebx
c000ec1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ec21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec25:	85 db                	test   ebx,ebx
c000ec27:	74 2f                	je     c000ec58 <zStrtok(char*, char const*)+0x3f>
c000ec29:	85 c0                	test   eax,eax
c000ec2b:	75 09                	jne    c000ec36 <zStrtok(char*, char const*)+0x1d>
c000ec2d:	a1 04 71 03 c0       	mov    eax,ds:0xc0037104
c000ec32:	85 c0                	test   eax,eax
c000ec34:	74 50                	je     c000ec86 <zStrtok(char*, char const*)+0x6d>
c000ec36:	31 c9                	xor    ecx,ecx
c000ec38:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000ec3c:	74 03                	je     c000ec41 <zStrtok(char*, char const*)+0x28>
c000ec3e:	41                   	inc    ecx
c000ec3f:	eb f7                	jmp    c000ec38 <zStrtok(char*, char const*)+0x1f>
c000ec41:	31 d2                	xor    edx,edx
c000ec43:	39 ca                	cmp    edx,ecx
c000ec45:	74 15                	je     c000ec5c <zStrtok(char*, char const*)+0x43>
c000ec47:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000ec4b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000ec4e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ec51:	39 ee                	cmp    esi,ebp
c000ec53:	74 13                	je     c000ec68 <zStrtok(char*, char const*)+0x4f>
c000ec55:	42                   	inc    edx
c000ec56:	eb eb                	jmp    c000ec43 <zStrtok(char*, char const*)+0x2a>
c000ec58:	31 c0                	xor    eax,eax
c000ec5a:	eb 2a                	jmp    c000ec86 <zStrtok(char*, char const*)+0x6d>
c000ec5c:	c7 05 04 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037104,0x0
c000ec66:	eb 1e                	jmp    c000ec86 <zStrtok(char*, char const*)+0x6d>
c000ec68:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000ec6b:	39 ce                	cmp    esi,ecx
c000ec6d:	75 0a                	jne    c000ec79 <zStrtok(char*, char const*)+0x60>
c000ec6f:	40                   	inc    eax
c000ec70:	a3 04 71 03 c0       	mov    ds:0xc0037104,eax
c000ec75:	89 d8                	mov    eax,ebx
c000ec77:	eb 0d                	jmp    c000ec86 <zStrtok(char*, char const*)+0x6d>
c000ec79:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000ec7c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000ec80:	89 15 04 71 03 c0    	mov    DWORD PTR ds:0xc0037104,edx
c000ec86:	5b                   	pop    ebx
c000ec87:	5e                   	pop    esi
c000ec88:	5f                   	pop    edi
c000ec89:	5d                   	pop    ebp
c000ec8a:	c3                   	ret    

c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000ec8b:	57                   	push   edi
c000ec8c:	56                   	push   esi
c000ec8d:	53                   	push   ebx
c000ec8e:	81 ec 08 01 00 00    	sub    esp,0x108
c000ec94:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000ec9b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000eca2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eca6:	53                   	push   ebx
c000eca7:	e8 a4 19 ff ff       	call   c0000650 <strcpy>
c000ecac:	59                   	pop    ecx
c000ecad:	5e                   	pop    esi
c000ecae:	68 b6 ce 02 c0       	push   0xc002ceb6
c000ecb3:	53                   	push   ebx
c000ecb4:	bb 01 00 00 00       	mov    ebx,0x1
c000ecb9:	e8 5b ff ff ff       	call   c000ec19 <zStrtok(char*, char const*)>
c000ecbe:	83 c4 10             	add    esp,0x10
c000ecc1:	85 c0                	test   eax,eax
c000ecc3:	74 3b                	je     c000ed00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000ecc5:	52                   	push   edx
c000ecc6:	50                   	push   eax
c000ecc7:	6a 01                	push   0x1
c000ecc9:	57                   	push   edi
c000ecca:	e8 b9 fd ff ff       	call   c000ea88 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000eccf:	59                   	pop    ecx
c000ecd0:	5e                   	pop    esi
c000ecd1:	89 c3                	mov    ebx,eax
c000ecd3:	68 b6 ce 02 c0       	push   0xc002ceb6
c000ecd8:	6a 00                	push   0x0
c000ecda:	e8 3a ff ff ff       	call   c000ec19 <zStrtok(char*, char const*)>
c000ecdf:	83 c4 10             	add    esp,0x10
c000ece2:	85 c0                	test   eax,eax
c000ece4:	89 c6                	mov    esi,eax
c000ece6:	74 18                	je     c000ed00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000ece8:	52                   	push   edx
c000ece9:	52                   	push   edx
c000ecea:	53                   	push   ebx
c000eceb:	57                   	push   edi
c000ecec:	e8 86 f5 ff ff       	call   c000e277 <CmEnterDirectory(Reghive_Tag*, int)>
c000ecf1:	83 c4 10             	add    esp,0x10
c000ecf4:	83 f8 ff             	cmp    eax,0xffffffff
c000ecf7:	89 c3                	mov    ebx,eax
c000ecf9:	74 05                	je     c000ed00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000ecfb:	50                   	push   eax
c000ecfc:	56                   	push   esi
c000ecfd:	53                   	push   ebx
c000ecfe:	eb c9                	jmp    c000ecc9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000ed00:	81 c4 00 01 00 00    	add    esp,0x100
c000ed06:	89 d8                	mov    eax,ebx
c000ed08:	5b                   	pop    ebx
c000ed09:	5e                   	pop    esi
c000ed0a:	5f                   	pop    edi
c000ed0b:	c3                   	ret    

c000ed0c <Computer::close(int, int, void*)>:
c000ed0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed11:	c3                   	ret    

c000ed12 <Computer::Computer()>:
c000ed12:	83 ec 0c             	sub    esp,0xc
c000ed15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed19:	83 ec 08             	sub    esp,0x8
c000ed1c:	68 40 b3 02 c0       	push   0xc002b340
c000ed21:	50                   	push   eax
c000ed22:	e8 89 bb ff ff       	call   c000a8b0 <Device::Device(char const*)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	ba 60 c0 02 c0       	mov    edx,0xc002c060
c000ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed33:	89 10                	mov    DWORD PTR [eax],edx
c000ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed39:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ed43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed47:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ed51:	90                   	nop
c000ed52:	83 c4 0c             	add    esp,0xc
c000ed55:	c3                   	ret    

c000ed56 <Computer::open(int, int, void*)>:
c000ed56:	56                   	push   esi
c000ed57:	53                   	push   ebx
c000ed58:	83 ec 04             	sub    esp,0x4
c000ed5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed5f:	39 1d 08 71 03 c0    	cmp    DWORD PTR ds:0xc0037108,ebx
c000ed65:	74 10                	je     c000ed77 <Computer::open(int, int, void*)+0x21>
c000ed67:	83 ec 0c             	sub    esp,0xc
c000ed6a:	68 2c c0 02 c0       	push   0xc002c02c
c000ed6f:	e8 24 1b 00 00       	call   c0010898 <KePanic(char const*)>
c000ed74:	83 c4 10             	add    esp,0x10
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	68 78 11 00 00       	push   0x1178
c000ed7f:	e8 c0 16 00 00       	call   c0010444 <malloc>
c000ed84:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed87:	89 c6                	mov    esi,eax
c000ed89:	e8 e4 c9 00 00       	call   c001b772 <CPU::CPU()>
c000ed8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed92:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000ed98:	50                   	push   eax
c000ed99:	6a 00                	push   0x0
c000ed9b:	6a 00                	push   0x0
c000ed9d:	56                   	push   esi
c000ed9e:	e8 b1 cb 00 00       	call   c001b954 <CPU::open(int, int, void*)>
c000eda3:	83 c4 14             	add    esp,0x14
c000eda6:	68 14 c0 02 c0       	push   0xc002c014
c000edab:	e8 e1 f1 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c000edb0:	e8 6f 8a ff ff       	call   c0007824 <KeSetupDeviceTree()>
c000edb5:	e8 92 89 ff ff       	call   c000774c <KePrintDeviceTree()>
c000edba:	e8 fd 8d ff ff       	call   c0007bbc <KePrintIOPortUsage()>
c000edbf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000edc6:	e8 79 16 00 00       	call   c0010444 <malloc>
c000edcb:	89 04 24             	mov    DWORD PTR [esp],eax
c000edce:	89 c6                	mov    esi,eax
c000edd0:	e8 03 e8 ff ff       	call   c000d5d8 <ACPI::ACPI()>
c000edd5:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000eddb:	5a                   	pop    edx
c000eddc:	59                   	pop    ecx
c000eddd:	56                   	push   esi
c000edde:	53                   	push   ebx
c000eddf:	e8 6a b9 ff ff       	call   c000a74e <Device::addChild(Device*)>
c000ede4:	5e                   	pop    esi
c000ede5:	58                   	pop    eax
c000ede6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000edec:	50                   	push   eax
c000eded:	53                   	push   ebx
c000edee:	e8 5b b9 ff ff       	call   c000a74e <Device::addChild(Device*)>
c000edf3:	83 c4 14             	add    esp,0x14
c000edf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000edfb:	5b                   	pop    ebx
c000edfc:	5e                   	pop    esi
c000edfd:	c3                   	ret    

c000edfe <KeCalculateCRC32(unsigned char*, int)>:
c000edfe:	53                   	push   ebx
c000edff:	83 c8 ff             	or     eax,0xffffffff
c000ee02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ee06:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ee0a:	01 cb                	add    ebx,ecx
c000ee0c:	39 d9                	cmp    ecx,ebx
c000ee0e:	74 15                	je     c000ee25 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000ee10:	41                   	inc    ecx
c000ee11:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000ee14:	31 c2                	xor    edx,eax
c000ee16:	c1 e8 08             	shr    eax,0x8
c000ee19:	0f b6 d2             	movzx  edx,dl
c000ee1c:	33 04 95 a0 06 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcf960]
c000ee23:	eb e7                	jmp    c000ee0c <KeCalculateCRC32(unsigned char*, int)+0xe>
c000ee25:	5b                   	pop    ebx
c000ee26:	f7 d0                	not    eax
c000ee28:	c3                   	ret    
c000ee29:	90                   	nop

c000ee2a <EnvVarContainer::getEnv(char const*)>:
c000ee2a:	57                   	push   edi
c000ee2b:	56                   	push   esi
c000ee2c:	53                   	push   ebx
c000ee2d:	31 db                	xor    ebx,ebx
c000ee2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee33:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ee35:	7e 2b                	jle    c000ee62 <EnvVarContainer::getEnv(char const*)+0x38>
c000ee37:	50                   	push   eax
c000ee38:	50                   	push   eax
c000ee39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee3c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ee43:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ee46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee4a:	e8 31 19 ff ff       	call   c0000780 <strcmp>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	85 c0                	test   eax,eax
c000ee54:	75 09                	jne    c000ee5f <EnvVarContainer::getEnv(char const*)+0x35>
c000ee56:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee59:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ee5d:	eb 05                	jmp    c000ee64 <EnvVarContainer::getEnv(char const*)+0x3a>
c000ee5f:	43                   	inc    ebx
c000ee60:	eb d1                	jmp    c000ee33 <EnvVarContainer::getEnv(char const*)+0x9>
c000ee62:	31 c0                	xor    eax,eax
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	c3                   	ret    

c000ee68 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ee68:	55                   	push   ebp
c000ee69:	57                   	push   edi
c000ee6a:	56                   	push   esi
c000ee6b:	53                   	push   ebx
c000ee6c:	83 ec 28             	sub    esp,0x28
c000ee6f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ee73:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ee7b:	56                   	push   esi
c000ee7c:	e8 ff 16 ff ff       	call   c0000580 <strlen>
c000ee81:	40                   	inc    eax
c000ee82:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee85:	e8 ba 15 00 00       	call   c0010444 <malloc>
c000ee8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee91:	e8 ea 16 ff ff       	call   c0000580 <strlen>
c000ee96:	40                   	inc    eax
c000ee97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee9a:	e8 a5 15 00 00       	call   c0010444 <malloc>
c000ee9f:	89 34 24             	mov    DWORD PTR [esp],esi
c000eea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eea6:	e8 d5 16 ff ff       	call   c0000580 <strlen>
c000eeab:	83 c4 0c             	add    esp,0xc
c000eeae:	40                   	inc    eax
c000eeaf:	50                   	push   eax
c000eeb0:	6a 00                	push   0x0
c000eeb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eeb6:	e8 35 16 ff ff       	call   c00004f0 <memset>
c000eebb:	89 34 24             	mov    DWORD PTR [esp],esi
c000eebe:	e8 bd 16 ff ff       	call   c0000580 <strlen>
c000eec3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000eec7:	8d 48 01             	lea    ecx,[eax+0x1]
c000eeca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	89 de                	mov    esi,ebx
c000eed1:	e8 aa 16 ff ff       	call   c0000580 <strlen>
c000eed6:	83 c4 0c             	add    esp,0xc
c000eed9:	40                   	inc    eax
c000eeda:	50                   	push   eax
c000eedb:	6a 00                	push   0x0
c000eedd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eee1:	e8 0a 16 ff ff       	call   c00004f0 <memset>
c000eee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eee9:	e8 92 16 ff ff       	call   c0000580 <strlen>
c000eeee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eef2:	8d 48 01             	lea    ecx,[eax+0x1]
c000eef5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eef7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eefa:	40                   	inc    eax
c000eefb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000eefe:	c1 e0 03             	shl    eax,0x3
c000ef01:	5a                   	pop    edx
c000ef02:	59                   	pop    ecx
c000ef03:	50                   	push   eax
c000ef04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef07:	e8 24 15 00 00       	call   c0010430 <realloc>
c000ef0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ef0f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ef13:	b9 08 00 00 00       	mov    ecx,0x8
c000ef18:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ef1b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ef1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef21:	83 c4 2c             	add    esp,0x2c
c000ef24:	5b                   	pop    ebx
c000ef25:	5e                   	pop    esi
c000ef26:	5f                   	pop    edi
c000ef27:	5d                   	pop    ebp
c000ef28:	c3                   	ret    
c000ef29:	90                   	nop

c000ef2a <EnvVarContainer::deleteEnv(char const*)>:
c000ef2a:	c3                   	ret    
c000ef2b:	90                   	nop

c000ef2c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ef2c:	55                   	push   ebp
c000ef2d:	57                   	push   edi
c000ef2e:	56                   	push   esi
c000ef2f:	53                   	push   ebx
c000ef30:	81 ec 38 01 00 00    	sub    esp,0x138
c000ef36:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ef3d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ef44:	68 14 01 00 00       	push   0x114
c000ef49:	e8 f6 14 00 00       	call   c0010444 <malloc>
c000ef4e:	83 c4 0c             	add    esp,0xc
c000ef51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ef54:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef5b:	89 c3                	mov    ebx,eax
c000ef5d:	50                   	push   eax
c000ef5e:	e8 7d 9f ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c000ef63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef66:	e8 57 a2 ff ff       	call   c00091c2 <File::exists()>
c000ef6b:	83 c4 10             	add    esp,0x10
c000ef6e:	84 c0                	test   al,al
c000ef70:	75 31                	jne    c000efa3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ef72:	50                   	push   eax
c000ef73:	50                   	push   eax
c000ef74:	6a 12                	push   0x12
c000ef76:	53                   	push   ebx
c000ef77:	e8 82 9f ff ff       	call   c0008efe <File::open(FileOpenMode)>
c000ef7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ef7e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ef81:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef84:	e8 f7 15 ff ff       	call   c0000580 <strlen>
c000ef89:	5a                   	pop    edx
c000ef8a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000ef8e:	52                   	push   edx
c000ef8f:	31 d2                	xor    edx,edx
c000ef91:	56                   	push   esi
c000ef92:	52                   	push   edx
c000ef93:	50                   	push   eax
c000ef94:	53                   	push   ebx
c000ef95:	ff d7                	call   edi
c000ef97:	83 c4 14             	add    esp,0x14
c000ef9a:	53                   	push   ebx
c000ef9b:	e8 bc 9f ff ff       	call   c0008f5c <File::close()>
c000efa0:	83 c4 10             	add    esp,0x10
c000efa3:	56                   	push   esi
c000efa4:	31 f6                	xor    esi,esi
c000efa6:	68 00 01 00 00       	push   0x100
c000efab:	6a 00                	push   0x0
c000efad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000efb1:	50                   	push   eax
c000efb2:	e8 39 15 ff ff       	call   c00004f0 <memset>
c000efb7:	5f                   	pop    edi
c000efb8:	58                   	pop    eax
c000efb9:	6a 01                	push   0x1
c000efbb:	53                   	push   ebx
c000efbc:	e8 3d 9f ff ff       	call   c0008efe <File::open(FileOpenMode)>
c000efc1:	83 c4 10             	add    esp,0x10
c000efc4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000efcc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000efd4:	83 ec 0c             	sub    esp,0xc
c000efd7:	8d 54 24 20          	lea    edx,[esp+0x20]
c000efdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000efdd:	52                   	push   edx
c000efde:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000efe2:	51                   	push   ecx
c000efe3:	6a 00                	push   0x0
c000efe5:	6a 01                	push   0x1
c000efe7:	53                   	push   ebx
c000efe8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000efeb:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000eff0:	83 c4 20             	add    esp,0x20
c000eff3:	85 c0                	test   eax,eax
c000eff5:	89 c1                	mov    ecx,eax
c000eff7:	0f 84 36 01 00 00    	je     c000f133 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000effd:	83 f8 0d             	cmp    eax,0xd
c000f000:	0f 84 22 01 00 00    	je     c000f128 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f006:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f00b:	0f 84 f0 00 00 00    	je     c000f101 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000f011:	83 f8 0a             	cmp    eax,0xa
c000f014:	74 13                	je     c000f029 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000f016:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f01b:	74 0c                	je     c000f029 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000f01d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f023:	0f 8e f6 00 00 00    	jle    c000f11f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000f029:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02d:	83 ec 0c             	sub    esp,0xc
c000f030:	8d 78 01             	lea    edi,[eax+0x1]
c000f033:	57                   	push   edi
c000f034:	e8 0b 14 00 00       	call   c0010444 <malloc>
c000f039:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f03d:	8d 56 04             	lea    edx,[esi+0x4]
c000f040:	89 14 24             	mov    DWORD PTR [esp],edx
c000f043:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f047:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f04b:	e8 f4 13 00 00       	call   c0010444 <malloc>
c000f050:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f054:	83 c4 0c             	add    esp,0xc
c000f057:	57                   	push   edi
c000f058:	6a 00                	push   0x0
c000f05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f05e:	e8 8d 14 ff ff       	call   c00004f0 <memset>
c000f063:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f067:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f06b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f06f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f071:	83 c4 0c             	add    esp,0xc
c000f074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f078:	52                   	push   edx
c000f079:	6a 00                	push   0x0
c000f07b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f07f:	e8 6c 14 ff ff       	call   c00004f0 <memset>
c000f084:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f088:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f08c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f08f:	e8 ec 14 ff ff       	call   c0000580 <strlen>
c000f094:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f098:	89 c1                	mov    ecx,eax
c000f09a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f09c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f0a5:	40                   	inc    eax
c000f0a6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0a9:	85 d2                	test   edx,edx
c000f0ab:	75 0c                	jne    c000f0b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000f0ad:	83 ec 0c             	sub    esp,0xc
c000f0b0:	6a 08                	push   0x8
c000f0b2:	e8 8d 13 00 00       	call   c0010444 <malloc>
c000f0b7:	eb 0c                	jmp    c000f0c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000f0b9:	51                   	push   ecx
c000f0ba:	51                   	push   ecx
c000f0bb:	c1 e0 03             	shl    eax,0x3
c000f0be:	50                   	push   eax
c000f0bf:	52                   	push   edx
c000f0c0:	e8 6b 13 00 00       	call   c0010430 <realloc>
c000f0c5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f0c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f0cb:	83 c4 10             	add    esp,0x10
c000f0ce:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f0d1:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f0d5:	b9 08 00 00 00       	mov    ecx,0x8
c000f0da:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f0de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0e0:	50                   	push   eax
c000f0e1:	31 f6                	xor    esi,esi
c000f0e3:	68 00 01 00 00       	push   0x100
c000f0e8:	6a 00                	push   0x0
c000f0ea:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f0ee:	50                   	push   eax
c000f0ef:	e8 fc 13 ff ff       	call   c00004f0 <memset>
c000f0f4:	83 c4 10             	add    esp,0x10
c000f0f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0ff:	eb 27                	jmp    c000f128 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f101:	83 f8 3d             	cmp    eax,0x3d
c000f104:	74 1e                	je     c000f124 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000f106:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f10c:	7f 07                	jg     c000f115 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000f10e:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000f112:	46                   	inc    esi
c000f113:	eb 13                	jmp    c000f128 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f115:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000f11d:	eb 09                	jmp    c000f128 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f11f:	83 f8 3d             	cmp    eax,0x3d
c000f122:	75 ea                	jne    c000f10e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000f124:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f128:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f12d:	0f 85 99 fe ff ff    	jne    c000efcc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f133:	83 ec 0c             	sub    esp,0xc
c000f136:	53                   	push   ebx
c000f137:	e8 20 9e ff ff       	call   c0008f5c <File::close()>
c000f13c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f13e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f141:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f144:	81 c4 3c 01 00 00    	add    esp,0x13c
c000f14a:	5b                   	pop    ebx
c000f14b:	5e                   	pop    esi
c000f14c:	5f                   	pop    edi
c000f14d:	5d                   	pop    ebp
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <EnvVarContainer::__loadSystem()>:
c000f150:	83 ec 10             	sub    esp,0x10
c000f153:	68 a0 0a 03 c0       	push   0xc0030aa0
c000f158:	68 84 c0 02 c0       	push   0xc002c084
c000f15d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f161:	e8 c6 fd ff ff       	call   c000ef2c <EnvVarContainer::loadFrom(char const*, char const*)>
c000f166:	83 c4 1c             	add    esp,0x1c
c000f169:	c3                   	ret    

c000f16a <EnvVarContainer::__loadUser()>:
c000f16a:	c3                   	ret    
c000f16b:	90                   	nop

c000f16c <EnvVarContainer::EnvVarContainer(Process*)>:
c000f16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f170:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f17a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f17e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f185:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f18c:	90                   	nop
c000f18d:	c3                   	ret    

c000f18e <EnvVarContainer::~EnvVarContainer()>:
c000f18e:	83 ec 0c             	sub    esp,0xc
c000f191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f198:	85 c0                	test   eax,eax
c000f19a:	74 1d                	je     c000f1b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1a2:	85 c0                	test   eax,eax
c000f1a4:	74 13                	je     c000f1b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1ad:	83 ec 0c             	sub    esp,0xc
c000f1b0:	50                   	push   eax
c000f1b1:	e8 9e 12 00 00       	call   c0010454 <free>
c000f1b6:	83 c4 10             	add    esp,0x10
c000f1b9:	90                   	nop
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	c3                   	ret    

c000f1be <KeGetEnv(Process*, char const*)>:
c000f1be:	53                   	push   ebx
c000f1bf:	83 ec 08             	sub    esp,0x8
c000f1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1c6:	39 05 58 73 03 c0    	cmp    DWORD PTR ds:0xc0037358,eax
c000f1cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f1d0:	74 04                	je     c000f1d6 <KeGetEnv(Process*, char const*)+0x18>
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 0b                	jne    c000f1e1 <KeGetEnv(Process*, char const*)+0x23>
c000f1d6:	a1 10 71 03 c0       	mov    eax,ds:0xc0037110
c000f1db:	85 c0                	test   eax,eax
c000f1dd:	75 19                	jne    c000f1f8 <KeGetEnv(Process*, char const*)+0x3a>
c000f1df:	eb 27                	jmp    c000f208 <KeGetEnv(Process*, char const*)+0x4a>
c000f1e1:	52                   	push   edx
c000f1e2:	52                   	push   edx
c000f1e3:	53                   	push   ebx
c000f1e4:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000f1ea:	e8 3b fc ff ff       	call   c000ee2a <EnvVarContainer::getEnv(char const*)>
c000f1ef:	83 c4 10             	add    esp,0x10
c000f1f2:	85 c0                	test   eax,eax
c000f1f4:	75 28                	jne    c000f21e <KeGetEnv(Process*, char const*)+0x60>
c000f1f6:	eb de                	jmp    c000f1d6 <KeGetEnv(Process*, char const*)+0x18>
c000f1f8:	52                   	push   edx
c000f1f9:	52                   	push   edx
c000f1fa:	53                   	push   ebx
c000f1fb:	50                   	push   eax
c000f1fc:	e8 29 fc ff ff       	call   c000ee2a <EnvVarContainer::getEnv(char const*)>
c000f201:	83 c4 10             	add    esp,0x10
c000f204:	85 c0                	test   eax,eax
c000f206:	75 16                	jne    c000f21e <KeGetEnv(Process*, char const*)+0x60>
c000f208:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f20c:	a1 14 71 03 c0       	mov    eax,ds:0xc0037114
c000f211:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f215:	83 c4 08             	add    esp,0x8
c000f218:	5b                   	pop    ebx
c000f219:	e9 0c fc ff ff       	jmp    c000ee2a <EnvVarContainer::getEnv(char const*)>
c000f21e:	83 c4 08             	add    esp,0x8
c000f221:	5b                   	pop    ebx
c000f222:	c3                   	ret    

c000f223 <KeSetEnvSystem(char const*, char const*)>:
c000f223:	83 ec 10             	sub    esp,0x10
c000f226:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f22a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f22e:	ff 35 14 71 03 c0    	push   DWORD PTR ds:0xc0037114
c000f234:	e8 2f fc ff ff       	call   c000ee68 <EnvVarContainer::setEnv(char const*, char const*)>
c000f239:	83 c4 1c             	add    esp,0x1c
c000f23c:	c3                   	ret    

c000f23d <KeSetEnvUser(char const*, char const*)>:
c000f23d:	a1 10 71 03 c0       	mov    eax,ds:0xc0037110
c000f242:	85 c0                	test   eax,eax
c000f244:	74 15                	je     c000f25b <KeSetEnvUser(char const*, char const*)+0x1e>
c000f246:	83 ec 10             	sub    esp,0x10
c000f249:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f24d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f251:	50                   	push   eax
c000f252:	e8 11 fc ff ff       	call   c000ee68 <EnvVarContainer::setEnv(char const*, char const*)>
c000f257:	83 c4 1c             	add    esp,0x1c
c000f25a:	c3                   	ret    
c000f25b:	c3                   	ret    

c000f25c <KeSetEnvProcess(Process*, char const*, char const*)>:
c000f25c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f260:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000f266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f26a:	e9 f9 fb ff ff       	jmp    c000ee68 <EnvVarContainer::setEnv(char const*, char const*)>

c000f26f <KeDeleteEnvSystem(char const*)>:
c000f26f:	c3                   	ret    

c000f270 <KeDeleteEnvUser(char const*)>:
c000f270:	c3                   	ret    

c000f271 <KeDeleteEnvProcess(Process*, char const*)>:
c000f271:	c3                   	ret    

c000f272 <KeNewProcessEnv(Process*)>:
c000f272:	83 ec 28             	sub    esp,0x28
c000f275:	6a 0c                	push   0xc
c000f277:	e8 c8 11 00 00       	call   c0010444 <malloc>
c000f27c:	5a                   	pop    edx
c000f27d:	59                   	pop    ecx
c000f27e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f282:	50                   	push   eax
c000f283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f287:	e8 e0 fe ff ff       	call   c000f16c <EnvVarContainer::EnvVarContainer(Process*)>
c000f28c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f290:	83 c4 2c             	add    esp,0x2c
c000f293:	c3                   	ret    

c000f294 <KeCopyProcessEnv(Process*, Process*)>:
c000f294:	57                   	push   edi
c000f295:	56                   	push   esi
c000f296:	53                   	push   ebx
c000f297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29b:	83 ec 0c             	sub    esp,0xc
c000f29e:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000f2a4:	6a 0c                	push   0xc
c000f2a6:	e8 99 11 00 00       	call   c0010444 <malloc>
c000f2ab:	89 c3                	mov    ebx,eax
c000f2ad:	58                   	pop    eax
c000f2ae:	5a                   	pop    edx
c000f2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 b3 fe ff ff       	call   c000f16c <EnvVarContainer::EnvVarContainer(Process*)>
c000f2b9:	8b 07                	mov    eax,DWORD PTR [edi]
c000f2bb:	89 03                	mov    DWORD PTR [ebx],eax
c000f2bd:	c1 e0 03             	shl    eax,0x3
c000f2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c3:	e8 7c 11 00 00       	call   c0010444 <malloc>
c000f2c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f2cb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f2cd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f2d0:	89 c7                	mov    edi,eax
c000f2d2:	c1 e1 03             	shl    ecx,0x3
c000f2d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2d7:	83 c4 10             	add    esp,0x10
c000f2da:	89 d8                	mov    eax,ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	5e                   	pop    esi
c000f2de:	5f                   	pop    edi
c000f2df:	c3                   	ret    

c000f2e0 <KeLoadSystemEnv()>:
c000f2e0:	53                   	push   ebx
c000f2e1:	83 ec 14             	sub    esp,0x14
c000f2e4:	6a 0c                	push   0xc
c000f2e6:	e8 59 11 00 00       	call   c0010444 <malloc>
c000f2eb:	89 c3                	mov    ebx,eax
c000f2ed:	58                   	pop    eax
c000f2ee:	5a                   	pop    edx
c000f2ef:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 71 fe ff ff       	call   c000f16c <EnvVarContainer::EnvVarContainer(Process*)>
c000f2fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2fe:	89 1d 14 71 03 c0    	mov    DWORD PTR ds:0xc0037114,ebx
c000f304:	e8 47 fe ff ff       	call   c000f150 <EnvVarContainer::__loadSystem()>
c000f309:	83 c4 18             	add    esp,0x18
c000f30c:	5b                   	pop    ebx
c000f30d:	c3                   	ret    

c000f30e <KeLoadUserEnv()>:
c000f30e:	53                   	push   ebx
c000f30f:	83 ec 14             	sub    esp,0x14
c000f312:	6a 0c                	push   0xc
c000f314:	e8 2b 11 00 00       	call   c0010444 <malloc>
c000f319:	89 c3                	mov    ebx,eax
c000f31b:	58                   	pop    eax
c000f31c:	5a                   	pop    edx
c000f31d:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000f323:	53                   	push   ebx
c000f324:	e8 43 fe ff ff       	call   c000f16c <EnvVarContainer::EnvVarContainer(Process*)>
c000f329:	89 1d 10 71 03 c0    	mov    DWORD PTR ds:0xc0037110,ebx
c000f32f:	83 c4 18             	add    esp,0x18
c000f332:	5b                   	pop    ebx
c000f333:	c3                   	ret    

c000f334 <KeFlushEnv()>:
c000f334:	c3                   	ret    

c000f335 <KeGetProcessTotalEnvCount(Process*)>:
c000f335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f339:	8b 15 10 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037110
c000f33f:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f345:	a1 14 71 03 c0       	mov    eax,ds:0xc0037114
c000f34a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34c:	03 01                	add    eax,DWORD PTR [ecx]
c000f34e:	85 d2                	test   edx,edx
c000f350:	74 02                	je     c000f354 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000f352:	03 02                	add    eax,DWORD PTR [edx]
c000f354:	c3                   	ret    

c000f355 <KeGetProcessEnvPair(Process*, int)>:
c000f355:	57                   	push   edi
c000f356:	56                   	push   esi
c000f357:	8b 35 10 71 03 c0    	mov    esi,DWORD PTR ds:0xc0037110
c000f35d:	53                   	push   ebx
c000f35e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f362:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f366:	85 f6                	test   esi,esi
c000f368:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f36c:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f372:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f374:	75 16                	jne    c000f38c <KeGetProcessEnvPair(Process*, int)+0x37>
c000f376:	39 c2                	cmp    edx,eax
c000f378:	7c 16                	jl     c000f390 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f37a:	8b 0d 14 71 03 c0    	mov    ecx,DWORD PTR ds:0xc0037114
c000f380:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f382:	01 c6                	add    esi,eax
c000f384:	39 d6                	cmp    esi,edx
c000f386:	7e 3c                	jle    c000f3c4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f388:	29 c2                	sub    edx,eax
c000f38a:	eb 04                	jmp    c000f390 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f38c:	39 c2                	cmp    edx,eax
c000f38e:	7d 05                	jge    c000f395 <KeGetProcessEnvPair(Process*, int)+0x40>
c000f390:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f393:	eb 20                	jmp    c000f3b5 <KeGetProcessEnvPair(Process*, int)+0x60>
c000f395:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f397:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f39a:	39 d1                	cmp    ecx,edx
c000f39c:	7e 04                	jle    c000f3a2 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000f39e:	29 c2                	sub    edx,eax
c000f3a0:	eb 10                	jmp    c000f3b2 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000f3a2:	8b 35 14 71 03 c0    	mov    esi,DWORD PTR ds:0xc0037114
c000f3a8:	03 0e                	add    ecx,DWORD PTR [esi]
c000f3aa:	39 d1                	cmp    ecx,edx
c000f3ac:	7e 16                	jle    c000f3c4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f3ae:	29 c2                	sub    edx,eax
c000f3b0:	29 fa                	sub    edx,edi
c000f3b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f3b5:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f3b8:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3ba:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f3bd:	89 03                	mov    DWORD PTR [ebx],eax
c000f3bf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f3c2:	eb 1d                	jmp    c000f3e1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000f3c4:	83 ec 0c             	sub    esp,0xc
c000f3c7:	68 a6 c0 02 c0       	push   0xc002c0a6
c000f3cc:	e8 c7 14 00 00       	call   c0010898 <KePanic(char const*)>
c000f3d1:	83 c4 10             	add    esp,0x10
c000f3d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f3da:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f3e1:	89 d8                	mov    eax,ebx
c000f3e3:	5b                   	pop    ebx
c000f3e4:	5e                   	pop    esi
c000f3e5:	5f                   	pop    edi
c000f3e6:	c2 04 00             	ret    0x4
c000f3e9:	66 90                	xchg   ax,ax
c000f3eb:	90                   	nop

c000f3ec <KeDisplayProgramFault(char const*)>:
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	83 ec 0c             	sub    esp,0xc
c000f3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f6:	e8 6b 7b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f3fb:	83 c4 10             	add    esp,0x10
c000f3fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f403:	8b 00                	mov    eax,DWORD PTR [eax]
c000f405:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f408:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f40e:	85 c0                	test   eax,eax
c000f410:	74 22                	je     c000f434 <KeDisplayProgramFault(char const*)+0x48>
c000f412:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f417:	8b 00                	mov    eax,DWORD PTR [eax]
c000f419:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f41c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f422:	6a 04                	push   0x4
c000f424:	6a 0f                	push   0xf
c000f426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f42a:	50                   	push   eax
c000f42b:	e8 16 3e 00 00       	call   c0013246 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	90                   	nop
c000f434:	90                   	nop
c000f435:	83 c4 0c             	add    esp,0xc
c000f438:	c3                   	ret    
c000f439:	8d 76 00             	lea    esi,[esi+0x0]

c000f43c <KeGeneralProtectionFault(void*, void*)>:
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f44a:	e8 4a b8 00 00       	call   c001ac99 <HalHandleGeneralProtectionFault(void*, void*)>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	0f b6 c0             	movzx  eax,al
c000f455:	85 c0                	test   eax,eax
c000f457:	75 2f                	jne    c000f488 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000f459:	83 ec 0c             	sub    esp,0xc
c000f45c:	68 c0 c0 02 c0       	push   0xc002c0c0
c000f461:	e8 86 ff ff ff       	call   c000f3ec <KeDisplayProgramFault(char const*)>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	83 ec 0c             	sub    esp,0xc
c000f46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f470:	e8 9d b9 00 00       	call   c001ae12 <HalDisplayDebugInfo(void*)>
c000f475:	83 c4 10             	add    esp,0x10
c000f478:	83 ec 0c             	sub    esp,0xc
c000f47b:	6a 7e                	push   0x7e
c000f47d:	e8 92 87 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	eb 05                	jmp    c000f48c <KeGeneralProtectionFault(void*, void*)+0x50>
c000f487:	90                   	nop
c000f488:	90                   	nop
c000f489:	8d 76 00             	lea    esi,[esi+0x0]
c000f48c:	83 c4 0c             	add    esp,0xc
c000f48f:	c3                   	ret    

c000f490 <KePageFault(void*, void*)>:
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	83 ec 08             	sub    esp,0x8
c000f496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f49e:	e8 fe b8 00 00       	call   c001ada1 <HalHandlePageFault(void*, void*)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	75 2f                	jne    c000f4dc <KePageFault(void*, void*)+0x4c>
c000f4ad:	83 ec 0c             	sub    esp,0xc
c000f4b0:	68 d9 c0 02 c0       	push   0xc002c0d9
c000f4b5:	e8 32 ff ff ff       	call   c000f3ec <KeDisplayProgramFault(char const*)>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	83 ec 0c             	sub    esp,0xc
c000f4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c4:	e8 49 b9 00 00       	call   c001ae12 <HalDisplayDebugInfo(void*)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	83 ec 0c             	sub    esp,0xc
c000f4cf:	6a 7f                	push   0x7f
c000f4d1:	e8 3e 87 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	eb 05                	jmp    c000f4e0 <KePageFault(void*, void*)+0x50>
c000f4db:	90                   	nop
c000f4dc:	90                   	nop
c000f4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e0:	83 c4 0c             	add    esp,0xc
c000f4e3:	c3                   	ret    

c000f4e4 <KeOpcodeFault(void*, void*)>:
c000f4e4:	83 ec 0c             	sub    esp,0xc
c000f4e7:	83 ec 08             	sub    esp,0x8
c000f4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f2:	e8 d9 b8 00 00       	call   c001add0 <HalHandleOpcodeFault(void*, void*)>
c000f4f7:	83 c4 10             	add    esp,0x10
c000f4fa:	0f b6 c0             	movzx  eax,al
c000f4fd:	85 c0                	test   eax,eax
c000f4ff:	75 2f                	jne    c000f530 <KeOpcodeFault(void*, void*)+0x4c>
c000f501:	83 ec 0c             	sub    esp,0xc
c000f504:	68 e4 c0 02 c0       	push   0xc002c0e4
c000f509:	e8 de fe ff ff       	call   c000f3ec <KeDisplayProgramFault(char const*)>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f518:	e8 f5 b8 00 00       	call   c001ae12 <HalDisplayDebugInfo(void*)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	6a 7c                	push   0x7c
c000f525:	e8 ea 86 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c000f52a:	83 c4 10             	add    esp,0x10
c000f52d:	eb 05                	jmp    c000f534 <KeOpcodeFault(void*, void*)+0x50>
c000f52f:	90                   	nop
c000f530:	90                   	nop
c000f531:	8d 76 00             	lea    esi,[esi+0x0]
c000f534:	83 c4 0c             	add    esp,0xc
c000f537:	c3                   	ret    

c000f538 <KeOtherFault(void*, void*)>:
c000f538:	83 ec 0c             	sub    esp,0xc
c000f53b:	83 ec 0c             	sub    esp,0xc
c000f53e:	68 00 c1 02 c0       	push   0xc002c100
c000f543:	e8 a4 fe ff ff       	call   c000f3ec <KeDisplayProgramFault(char const*)>
c000f548:	83 c4 10             	add    esp,0x10
c000f54b:	83 ec 0c             	sub    esp,0xc
c000f54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f552:	e8 bb b8 00 00       	call   c001ae12 <HalDisplayDebugInfo(void*)>
c000f557:	83 c4 10             	add    esp,0x10
c000f55a:	83 ec 0c             	sub    esp,0xc
c000f55d:	6a 7d                	push   0x7d
c000f55f:	e8 b0 86 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c000f564:	83 c4 10             	add    esp,0x10
c000f567:	90                   	nop
c000f568:	83 c4 0c             	add    esp,0xc
c000f56b:	c3                   	ret    

c000f56c <KeNonMaskableInterrupt(void*, void*)>:
c000f56c:	83 ec 0c             	sub    esp,0xc
c000f56f:	e8 2c bc 00 00       	call   c001b1a0 <HalReceivedNMI()>
c000f574:	90                   	nop
c000f575:	83 c4 0c             	add    esp,0xc
c000f578:	c3                   	ret    
c000f579:	8d 76 00             	lea    esi,[esi+0x0]

c000f57c <KeDoubleFault(void*, void*)>:
c000f57c:	83 ec 0c             	sub    esp,0xc
c000f57f:	83 ec 0c             	sub    esp,0xc
c000f582:	68 f1 c0 02 c0       	push   0xc002c0f1
c000f587:	e8 0c 13 00 00       	call   c0010898 <KePanic(char const*)>
c000f58c:	83 c4 10             	add    esp,0x10
c000f58f:	90                   	nop
c000f590:	83 c4 0c             	add    esp,0xc
c000f593:	c3                   	ret    

c000f594 <GDTEntry::setBase(unsigned int)>:
c000f594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f598:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f59c:	89 c1                	mov    ecx,eax
c000f59e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f5a2:	c1 e9 10             	shr    ecx,0x10
c000f5a5:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f5a8:	c1 e8 18             	shr    eax,0x18
c000f5ab:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f5ae:	c3                   	ret    
c000f5af:	90                   	nop

c000f5b0 <GDTEntry::setLimit(unsigned int)>:
c000f5b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5b8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f5bb:	66 89 01             	mov    WORD PTR [ecx],ax
c000f5be:	c1 e8 10             	shr    eax,0x10
c000f5c1:	83 e0 0f             	and    eax,0xf
c000f5c4:	83 e2 f0             	and    edx,0xfffffff0
c000f5c7:	09 d0                	or     eax,edx
c000f5c9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f5cc:	c3                   	ret    
c000f5cd:	90                   	nop

c000f5ce <GDT::GDT()>:
c000f5ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f5e2:	90                   	nop
c000f5e3:	c3                   	ret    

c000f5e4 <GDT::addEntry(GDTEntry)>:
c000f5e4:	53                   	push   ebx
c000f5e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f5ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f5f1:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5f3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f5f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5fa:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f5fe:	c1 e0 03             	shl    eax,0x3
c000f601:	89 0a                	mov    DWORD PTR [edx],ecx
c000f603:	5b                   	pop    ebx
c000f604:	c3                   	ret    
c000f605:	90                   	nop

c000f606 <GDT::getNumberOfEntries()>:
c000f606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60c:	c3                   	ret    
c000f60d:	90                   	nop

c000f60e <GDT::flush()>:
c000f60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f612:	8b 10                	mov    edx,DWORD PTR [eax]
c000f614:	83 c0 04             	add    eax,0x4
c000f617:	a3 1a 71 03 c0       	mov    ds:0xc003711a,eax
c000f61c:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f623:	66 89 15 18 71 03 c0 	mov    WORD PTR ds:0xc0037118,dx
c000f62a:	e9 2b 0d ff ff       	jmp    c000035a <loadGDT>
c000f62f:	90                   	nop

c000f630 <GDT::setup()>:
c000f630:	57                   	push   edi
c000f631:	56                   	push   esi
c000f632:	53                   	push   ebx
c000f633:	83 ec 30             	sub    esp,0x30
c000f636:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f63a:	6a 00                	push   0x0
c000f63c:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f640:	56                   	push   esi
c000f641:	e8 4e ff ff ff       	call   c000f594 <GDTEntry::setBase(unsigned int)>
c000f646:	6a 00                	push   0x0
c000f648:	56                   	push   esi
c000f649:	e8 62 ff ff ff       	call   c000f5b0 <GDTEntry::setLimit(unsigned int)>
c000f64e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f656:	6a 00                	push   0x0
c000f658:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f65c:	56                   	push   esi
c000f65d:	e8 32 ff ff ff       	call   c000f594 <GDTEntry::setBase(unsigned int)>
c000f662:	68 ff ff ff 00       	push   0xffffff
c000f667:	56                   	push   esi
c000f668:	e8 43 ff ff ff       	call   c000f5b0 <GDTEntry::setLimit(unsigned int)>
c000f66d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f671:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f675:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f67a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f67e:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f683:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f687:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f68b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f68f:	89 f8                	mov    eax,edi
c000f691:	89 fa                	mov    edx,edi
c000f693:	80 e4 f7             	and    ah,0xf7
c000f696:	80 ce 60             	or     dh,0x60
c000f699:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f69d:	89 c7                	mov    edi,eax
c000f69f:	80 cc 60             	or     ah,0x60
c000f6a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f6a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f6aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6ae:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f6b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6b6:	83 c4 20             	add    esp,0x20
c000f6b9:	6a 00                	push   0x0
c000f6bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f6bf:	50                   	push   eax
c000f6c0:	e8 cf fe ff ff       	call   c000f594 <GDTEntry::setBase(unsigned int)>
c000f6c5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f6c9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f6cd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f6d1:	83 e0 3f             	and    eax,0x3f
c000f6d4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f6d8:	6a 00                	push   0x0
c000f6da:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f6de:	50                   	push   eax
c000f6df:	e8 b0 fe ff ff       	call   c000f594 <GDTEntry::setBase(unsigned int)>
c000f6e4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f6e8:	83 e0 3f             	and    eax,0x3f
c000f6eb:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f6ef:	83 c4 0c             	add    esp,0xc
c000f6f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6fa:	53                   	push   ebx
c000f6fb:	e8 e4 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f700:	83 c4 0c             	add    esp,0xc
c000f703:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f707:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f70b:	53                   	push   ebx
c000f70c:	e8 d3 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f711:	83 c4 0c             	add    esp,0xc
c000f714:	57                   	push   edi
c000f715:	56                   	push   esi
c000f716:	53                   	push   ebx
c000f717:	e8 c8 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f71c:	83 c4 0c             	add    esp,0xc
c000f71f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f723:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f727:	53                   	push   ebx
c000f728:	e8 b7 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f72d:	83 c4 0c             	add    esp,0xc
c000f730:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f734:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f738:	53                   	push   ebx
c000f739:	e8 a6 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f73e:	83 c4 0c             	add    esp,0xc
c000f741:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f745:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f749:	53                   	push   ebx
c000f74a:	e8 95 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f74f:	83 c4 0c             	add    esp,0xc
c000f752:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f756:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f75a:	53                   	push   ebx
c000f75b:	e8 84 fe ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c000f760:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f763:	e8 a6 fe ff ff       	call   c000f60e <GDT::flush()>
c000f768:	83 c4 40             	add    esp,0x40
c000f76b:	5b                   	pop    ebx
c000f76c:	5e                   	pop    esi
c000f76d:	5f                   	pop    edi
c000f76e:	c3                   	ret    

c000f76f <idleFunction(void*)>:
c000f76f:	83 ec 0c             	sub    esp,0xc
c000f772:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000f779:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000f780:	75 01                	jne    c000f783 <idleFunction(void*)+0x14>
c000f782:	fb                   	sti    
c000f783:	e8 b3 ba 00 00       	call   c001b23b <HalSystemIdle()>
c000f788:	e8 a9 a3 01 00       	call   c0029b36 <idleCommon()>
c000f78d:	eb f4                	jmp    c000f783 <idleFunction(void*)+0x14>
c000f78f:	90                   	nop

c000f790 <IDTEntry::IDTEntry(bool)>:
c000f790:	53                   	push   ebx
c000f791:	83 ec 04             	sub    esp,0x4
c000f794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f798:	88 04 24             	mov    BYTE PTR [esp],al
c000f79b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f79f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f7a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7a9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f7b4:	83 e2 f0             	and    edx,0xfffffff0
c000f7b7:	83 ca 0e             	or     edx,0xe
c000f7ba:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7c1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f7c4:	83 e2 ef             	and    edx,0xffffffef
c000f7c7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f7ca:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f7ce:	85 c0                	test   eax,eax
c000f7d0:	74 06                	je     c000f7d8 <IDTEntry::IDTEntry(bool)+0x48>
c000f7d2:	b2 03                	mov    dl,0x3
c000f7d4:	eb 06                	jmp    c000f7dc <IDTEntry::IDTEntry(bool)+0x4c>
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	b2 00                	mov    dl,0x0
c000f7da:	66 90                	xchg   ax,ax
c000f7dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7e0:	83 e2 03             	and    edx,0x3
c000f7e3:	89 d3                	mov    ebx,edx
c000f7e5:	c1 e3 05             	shl    ebx,0x5
c000f7e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f7eb:	83 e2 9f             	and    edx,0xffffff9f
c000f7ee:	88 d1                	mov    cl,dl
c000f7f0:	88 da                	mov    dl,bl
c000f7f2:	09 ca                	or     edx,ecx
c000f7f4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7fb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f7fe:	83 ca 80             	or     edx,0xffffff80
c000f801:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f804:	90                   	nop
c000f805:	83 c4 04             	add    esp,0x4
c000f808:	5b                   	pop    ebx
c000f809:	c3                   	ret    

c000f80a <IDTEntry::setOffset(unsigned int)>:
c000f80a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f80e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f812:	66 89 02             	mov    WORD PTR [edx],ax
c000f815:	c1 e8 10             	shr    eax,0x10
c000f818:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f81c:	c3                   	ret    
c000f81d:	90                   	nop
c000f81e:	66 90                	xchg   ax,ax

c000f820 <IDT::IDT()>:
c000f820:	90                   	nop
c000f821:	c3                   	ret    

c000f822 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f826:	83 c0 30             	add    eax,0x30
c000f829:	c3                   	ret    

c000f82a <IDT::addEntry(IDTEntry, int)>:
c000f82a:	53                   	push   ebx
c000f82b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f82f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f833:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f83b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f83e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f842:	5b                   	pop    ebx
c000f843:	c3                   	ret    

c000f844 <IDT::addEntry(int, void (*)(), bool)>:
c000f844:	53                   	push   ebx
c000f845:	83 ec 10             	sub    esp,0x10
c000f848:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f84d:	50                   	push   eax
c000f84e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f852:	53                   	push   ebx
c000f853:	e8 38 ff ff ff       	call   c000f790 <IDTEntry::IDTEntry(bool)>
c000f858:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f85c:	53                   	push   ebx
c000f85d:	e8 a8 ff ff ff       	call   c000f80a <IDTEntry::setOffset(unsigned int)>
c000f862:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f866:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f86a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f872:	e8 b3 ff ff ff       	call   c000f82a <IDT::addEntry(IDTEntry, int)>
c000f877:	83 c4 30             	add    esp,0x30
c000f87a:	5b                   	pop    ebx
c000f87b:	c3                   	ret    

c000f87c <IDT::flush()>:
c000f87c:	66 c7 05 20 71 03 c0 ff 07 	mov    WORD PTR ds:0xc0037120,0x7ff
c000f885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f889:	a3 22 71 03 c0       	mov    ds:0xc0037122,eax
c000f88e:	0f 01 1d 20 71 03 c0 	lidtd  ds:0xc0037120
c000f895:	c3                   	ret    

c000f896 <IDT::setup()>:
c000f896:	57                   	push   edi
c000f897:	56                   	push   esi
c000f898:	53                   	push   ebx
c000f899:	83 ec 10             	sub    esp,0x10
c000f89c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8a0:	6a 00                	push   0x0
c000f8a2:	68 c0 45 02 c0       	push   0xc00245c0
c000f8a7:	6a 00                	push   0x0
c000f8a9:	53                   	push   ebx
c000f8aa:	e8 95 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f8af:	6a 00                	push   0x0
c000f8b1:	68 d0 45 02 c0       	push   0xc00245d0
c000f8b6:	6a 01                	push   0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	e8 86 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f8be:	83 c4 20             	add    esp,0x20
c000f8c1:	6a 00                	push   0x0
c000f8c3:	68 da 45 02 c0       	push   0xc00245da
c000f8c8:	6a 02                	push   0x2
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 74 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f8d0:	6a 00                	push   0x0
c000f8d2:	68 e4 45 02 c0       	push   0xc00245e4
c000f8d7:	6a 03                	push   0x3
c000f8d9:	53                   	push   ebx
c000f8da:	e8 65 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f8df:	83 c4 20             	add    esp,0x20
c000f8e2:	6a 00                	push   0x0
c000f8e4:	68 ee 45 02 c0       	push   0xc00245ee
c000f8e9:	6a 04                	push   0x4
c000f8eb:	53                   	push   ebx
c000f8ec:	e8 53 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f8f1:	6a 00                	push   0x0
c000f8f3:	68 f8 45 02 c0       	push   0xc00245f8
c000f8f8:	6a 05                	push   0x5
c000f8fa:	53                   	push   ebx
c000f8fb:	e8 44 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f900:	83 c4 20             	add    esp,0x20
c000f903:	6a 00                	push   0x0
c000f905:	68 02 46 02 c0       	push   0xc0024602
c000f90a:	6a 06                	push   0x6
c000f90c:	53                   	push   ebx
c000f90d:	e8 32 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f912:	6a 00                	push   0x0
c000f914:	68 0c 46 02 c0       	push   0xc002460c
c000f919:	6a 07                	push   0x7
c000f91b:	53                   	push   ebx
c000f91c:	e8 23 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f921:	83 c4 20             	add    esp,0x20
c000f924:	6a 00                	push   0x0
c000f926:	68 16 46 02 c0       	push   0xc0024616
c000f92b:	6a 08                	push   0x8
c000f92d:	53                   	push   ebx
c000f92e:	e8 11 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f933:	6a 00                	push   0x0
c000f935:	68 1e 46 02 c0       	push   0xc002461e
c000f93a:	6a 09                	push   0x9
c000f93c:	53                   	push   ebx
c000f93d:	e8 02 ff ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f942:	83 c4 20             	add    esp,0x20
c000f945:	6a 00                	push   0x0
c000f947:	68 28 46 02 c0       	push   0xc0024628
c000f94c:	6a 0a                	push   0xa
c000f94e:	53                   	push   ebx
c000f94f:	e8 f0 fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f954:	6a 00                	push   0x0
c000f956:	68 30 46 02 c0       	push   0xc0024630
c000f95b:	6a 0b                	push   0xb
c000f95d:	53                   	push   ebx
c000f95e:	e8 e1 fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f963:	83 c4 20             	add    esp,0x20
c000f966:	6a 00                	push   0x0
c000f968:	68 38 46 02 c0       	push   0xc0024638
c000f96d:	6a 0c                	push   0xc
c000f96f:	53                   	push   ebx
c000f970:	e8 cf fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f975:	6a 00                	push   0x0
c000f977:	68 40 46 02 c0       	push   0xc0024640
c000f97c:	6a 0d                	push   0xd
c000f97e:	53                   	push   ebx
c000f97f:	e8 c0 fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f984:	83 c4 20             	add    esp,0x20
c000f987:	6a 00                	push   0x0
c000f989:	68 5a 46 02 c0       	push   0xc002465a
c000f98e:	6a 0e                	push   0xe
c000f990:	53                   	push   ebx
c000f991:	e8 ae fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f996:	6a 00                	push   0x0
c000f998:	68 62 46 02 c0       	push   0xc0024662
c000f99d:	6a 0f                	push   0xf
c000f99f:	53                   	push   ebx
c000f9a0:	e8 9f fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9a5:	83 c4 20             	add    esp,0x20
c000f9a8:	6a 00                	push   0x0
c000f9aa:	68 6c 46 02 c0       	push   0xc002466c
c000f9af:	6a 10                	push   0x10
c000f9b1:	53                   	push   ebx
c000f9b2:	e8 8d fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9b7:	6a 00                	push   0x0
c000f9b9:	68 76 46 02 c0       	push   0xc0024676
c000f9be:	6a 11                	push   0x11
c000f9c0:	53                   	push   ebx
c000f9c1:	e8 7e fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9c6:	83 c4 20             	add    esp,0x20
c000f9c9:	6a 00                	push   0x0
c000f9cb:	68 80 46 02 c0       	push   0xc0024680
c000f9d0:	6a 12                	push   0x12
c000f9d2:	53                   	push   ebx
c000f9d3:	e8 6c fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9d8:	6a 01                	push   0x1
c000f9da:	68 1a 47 02 c0       	push   0xc002471a
c000f9df:	6a 60                	push   0x60
c000f9e1:	53                   	push   ebx
c000f9e2:	e8 5d fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9e7:	83 c4 20             	add    esp,0x20
c000f9ea:	6a 00                	push   0x0
c000f9ec:	68 21 47 02 c0       	push   0xc0024721
c000f9f1:	6a 20                	push   0x20
c000f9f3:	53                   	push   ebx
c000f9f4:	e8 4b fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000f9f9:	6a 00                	push   0x0
c000f9fb:	68 0c 47 02 c0       	push   0xc002470c
c000fa00:	6a 21                	push   0x21
c000fa02:	53                   	push   ebx
c000fa03:	e8 3c fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa08:	83 c4 20             	add    esp,0x20
c000fa0b:	6a 00                	push   0x0
c000fa0d:	68 13 47 02 c0       	push   0xc0024713
c000fa12:	6a 22                	push   0x22
c000fa14:	53                   	push   ebx
c000fa15:	e8 2a fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa1a:	6a 00                	push   0x0
c000fa1c:	68 8a 46 02 c0       	push   0xc002468a
c000fa21:	6a 23                	push   0x23
c000fa23:	53                   	push   ebx
c000fa24:	e8 1b fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa29:	83 c4 20             	add    esp,0x20
c000fa2c:	6a 00                	push   0x0
c000fa2e:	68 94 46 02 c0       	push   0xc0024694
c000fa33:	6a 24                	push   0x24
c000fa35:	53                   	push   ebx
c000fa36:	e8 09 fe ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa3b:	6a 00                	push   0x0
c000fa3d:	68 9e 46 02 c0       	push   0xc002469e
c000fa42:	6a 25                	push   0x25
c000fa44:	53                   	push   ebx
c000fa45:	e8 fa fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa4a:	83 c4 20             	add    esp,0x20
c000fa4d:	6a 00                	push   0x0
c000fa4f:	68 a8 46 02 c0       	push   0xc00246a8
c000fa54:	6a 26                	push   0x26
c000fa56:	53                   	push   ebx
c000fa57:	e8 e8 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa5c:	6a 00                	push   0x0
c000fa5e:	68 b2 46 02 c0       	push   0xc00246b2
c000fa63:	6a 27                	push   0x27
c000fa65:	53                   	push   ebx
c000fa66:	e8 d9 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa6b:	83 c4 20             	add    esp,0x20
c000fa6e:	6a 00                	push   0x0
c000fa70:	68 bc 46 02 c0       	push   0xc00246bc
c000fa75:	6a 28                	push   0x28
c000fa77:	53                   	push   ebx
c000fa78:	e8 c7 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa7d:	6a 00                	push   0x0
c000fa7f:	68 c6 46 02 c0       	push   0xc00246c6
c000fa84:	6a 29                	push   0x29
c000fa86:	53                   	push   ebx
c000fa87:	e8 b8 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa8c:	83 c4 20             	add    esp,0x20
c000fa8f:	6a 00                	push   0x0
c000fa91:	68 d0 46 02 c0       	push   0xc00246d0
c000fa96:	6a 2a                	push   0x2a
c000fa98:	53                   	push   ebx
c000fa99:	e8 a6 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fa9e:	6a 00                	push   0x0
c000faa0:	68 da 46 02 c0       	push   0xc00246da
c000faa5:	6a 2b                	push   0x2b
c000faa7:	53                   	push   ebx
c000faa8:	e8 97 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000faad:	83 c4 20             	add    esp,0x20
c000fab0:	6a 00                	push   0x0
c000fab2:	68 e4 46 02 c0       	push   0xc00246e4
c000fab7:	6a 2c                	push   0x2c
c000fab9:	53                   	push   ebx
c000faba:	e8 85 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fabf:	6a 00                	push   0x0
c000fac1:	68 ee 46 02 c0       	push   0xc00246ee
c000fac6:	6a 2d                	push   0x2d
c000fac8:	53                   	push   ebx
c000fac9:	e8 76 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000face:	83 c4 20             	add    esp,0x20
c000fad1:	6a 00                	push   0x0
c000fad3:	68 f8 46 02 c0       	push   0xc00246f8
c000fad8:	6a 2e                	push   0x2e
c000fada:	53                   	push   ebx
c000fadb:	e8 64 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fae0:	6a 00                	push   0x0
c000fae2:	68 02 47 02 c0       	push   0xc0024702
c000fae7:	6a 2f                	push   0x2f
c000fae9:	53                   	push   ebx
c000faea:	e8 55 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000faef:	83 c4 20             	add    esp,0x20
c000faf2:	6a 00                	push   0x0
c000faf4:	68 28 48 02 c0       	push   0xc0024828
c000faf9:	6a 30                	push   0x30
c000fafb:	53                   	push   ebx
c000fafc:	e8 43 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb01:	6a 00                	push   0x0
c000fb03:	68 32 48 02 c0       	push   0xc0024832
c000fb08:	6a 31                	push   0x31
c000fb0a:	53                   	push   ebx
c000fb0b:	e8 34 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb10:	83 c4 20             	add    esp,0x20
c000fb13:	6a 00                	push   0x0
c000fb15:	68 3c 48 02 c0       	push   0xc002483c
c000fb1a:	6a 32                	push   0x32
c000fb1c:	53                   	push   ebx
c000fb1d:	e8 22 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb22:	6a 00                	push   0x0
c000fb24:	68 46 48 02 c0       	push   0xc0024846
c000fb29:	6a 33                	push   0x33
c000fb2b:	53                   	push   ebx
c000fb2c:	e8 13 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb31:	83 c4 20             	add    esp,0x20
c000fb34:	6a 00                	push   0x0
c000fb36:	68 50 48 02 c0       	push   0xc0024850
c000fb3b:	6a 34                	push   0x34
c000fb3d:	53                   	push   ebx
c000fb3e:	e8 01 fd ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb43:	6a 00                	push   0x0
c000fb45:	68 5a 48 02 c0       	push   0xc002485a
c000fb4a:	6a 35                	push   0x35
c000fb4c:	53                   	push   ebx
c000fb4d:	e8 f2 fc ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb52:	83 c4 20             	add    esp,0x20
c000fb55:	6a 00                	push   0x0
c000fb57:	68 64 48 02 c0       	push   0xc0024864
c000fb5c:	6a 36                	push   0x36
c000fb5e:	53                   	push   ebx
c000fb5f:	e8 e0 fc ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb64:	6a 00                	push   0x0
c000fb66:	68 6e 48 02 c0       	push   0xc002486e
c000fb6b:	6a 37                	push   0x37
c000fb6d:	53                   	push   ebx
c000fb6e:	e8 d1 fc ff ff       	call   c000f844 <IDT::addEntry(int, void (*)(), bool)>
c000fb73:	83 c4 1c             	add    esp,0x1c
c000fb76:	6a 03                	push   0x3
c000fb78:	6a 02                	push   0x2
c000fb7a:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000fb80:	e8 3b 4a 00 00       	call   c00145c0 <VAS::allocatePages(int, int)>
c000fb85:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fb8c:	89 c6                	mov    esi,eax
c000fb8e:	e8 b1 08 00 00       	call   c0010444 <malloc>
c000fb93:	81 c6 00 20 00 00    	add    esi,0x2000
c000fb99:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9c:	89 c7                	mov    edi,eax
c000fb9e:	e8 ed 3a 00 00       	call   c0013690 <TSS::TSS()>
c000fba3:	83 c4 0c             	add    esp,0xc
c000fba6:	68 16 46 02 c0       	push   0xc0024616
c000fbab:	56                   	push   esi
c000fbac:	57                   	push   edi
c000fbad:	e8 22 3b 00 00       	call   c00136d4 <TSS::setup(unsigned long, unsigned long)>
c000fbb2:	89 c6                	mov    esi,eax
c000fbb4:	58                   	pop    eax
c000fbb5:	5a                   	pop    edx
c000fbb6:	6a 00                	push   0x0
c000fbb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000fbbc:	50                   	push   eax
c000fbbd:	e8 ce fb ff ff       	call   c000f790 <IDTEntry::IDTEntry(bool)>
c000fbc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbc6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000fbcb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000fbd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fbd6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000fbdc:	80 ce 05             	or     dh,0x5
c000fbdf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbe3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000fbe6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbea:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000fbed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf0:	e8 87 fc ff ff       	call   c000f87c <IDT::flush()>
c000fbf5:	83 c4 20             	add    esp,0x20
c000fbf8:	5b                   	pop    ebx
c000fbf9:	5e                   	pop    esi
c000fbfa:	5f                   	pop    edi
c000fbfb:	c3                   	ret    

c000fbfc <CPU::current()>:
c000fbfc:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000fc01:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc07:	c3                   	ret    

c000fc08 <operator new(unsigned long)>:
c000fc08:	e9 37 08 00 00       	jmp    c0010444 <malloc>

c000fc0d <operator delete(void*)>:
c000fc0d:	e9 52 08 00 00       	jmp    c0010464 <rfree>

c000fc12 <disableIRQs()>:
c000fc12:	fa                   	cli    
c000fc13:	c3                   	ret    

c000fc14 <enableIRQs()>:
c000fc14:	fb                   	sti    
c000fc15:	c3                   	ret    

c000fc16 <lockScheduler()>:
c000fc16:	fa                   	cli    
c000fc17:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000fc1d:	c3                   	ret    

c000fc1e <unlockScheduler()>:
c000fc1e:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000fc25:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000fc2c:	75 01                	jne    c000fc2f <unlockScheduler()+0x11>
c000fc2e:	fb                   	sti    
c000fc2f:	c3                   	ret    

c000fc30 <lockStuff()>:
c000fc30:	fa                   	cli    
c000fc31:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000fc37:	ff 05 2c 73 03 c0    	inc    DWORD PTR ds:0xc003732c
c000fc3d:	c3                   	ret    

c000fc3e <unlockStuff()>:
c000fc3e:	83 ec 0c             	sub    esp,0xc
c000fc41:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000fc46:	48                   	dec    eax
c000fc47:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000fc4c:	75 18                	jne    c000fc66 <unlockStuff()+0x28>
c000fc4e:	83 3d 28 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037328,0x0
c000fc55:	74 0f                	je     c000fc66 <unlockStuff()+0x28>
c000fc57:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c000fc61:	e8 ba 77 00 00       	call   c0017420 <schedule()>
c000fc66:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000fc6d:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000fc74:	75 01                	jne    c000fc77 <unlockStuff()+0x39>
c000fc76:	fb                   	sti    
c000fc77:	83 c4 0c             	add    esp,0xc
c000fc7a:	c3                   	ret    

c000fc7b <Virt::getAKernelVAS()>:
c000fc7b:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c000fc80:	c3                   	ret    

c000fc81 <__not_memcpy>:
c000fc81:	57                   	push   edi
c000fc82:	56                   	push   esi
c000fc83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fc8f:	89 c7                	mov    edi,eax
c000fc91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc93:	5e                   	pop    esi
c000fc94:	5f                   	pop    edi
c000fc95:	c3                   	ret    

c000fc96 <KeFormatDate(char*, int, int, int, int, bool)>:
c000fc96:	55                   	push   ebp
c000fc97:	57                   	push   edi
c000fc98:	56                   	push   esi
c000fc99:	be e8 03 00 00       	mov    esi,0x3e8
c000fc9e:	53                   	push   ebx
c000fc9f:	bb 0a 00 00 00       	mov    ebx,0xa
c000fca4:	81 ec ac 00 00 00    	sub    esp,0xac
c000fcaa:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000fcaf:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000fcb6:	89 c8                	mov    eax,ecx
c000fcb8:	99                   	cdq    
c000fcb9:	f7 fb                	idiv   ebx
c000fcbb:	89 d5                	mov    ebp,edx
c000fcbd:	99                   	cdq    
c000fcbe:	f7 fb                	idiv   ebx
c000fcc0:	8d 42 30             	lea    eax,[edx+0x30]
c000fcc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fcc7:	8d 45 30             	lea    eax,[ebp+0x30]
c000fcca:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000fcd2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000fcd6:	89 c8                	mov    eax,ecx
c000fcd8:	99                   	cdq    
c000fcd9:	f7 fe                	idiv   esi
c000fcdb:	be 64 00 00 00       	mov    esi,0x64
c000fce0:	99                   	cdq    
c000fce1:	f7 fb                	idiv   ebx
c000fce3:	8d 42 30             	lea    eax,[edx+0x30]
c000fce6:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000fcea:	89 c8                	mov    eax,ecx
c000fcec:	99                   	cdq    
c000fced:	f7 fe                	idiv   esi
c000fcef:	99                   	cdq    
c000fcf0:	f7 fb                	idiv   ebx
c000fcf2:	31 db                	xor    ebx,ebx
c000fcf4:	8d 42 30             	lea    eax,[edx+0x30]
c000fcf7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fcfb:	0f be 8b 44 71 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffc8ebc]
c000fd02:	83 f9 59             	cmp    ecx,0x59
c000fd05:	0f 84 1f 01 00 00    	je     c000fe2a <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000fd0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd0f:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000fd16:	83 f9 4d             	cmp    ecx,0x4d
c000fd19:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000fd21:	57                   	push   edi
c000fd22:	57                   	push   edi
c000fd23:	89 d7                	mov    edi,edx
c000fd25:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd29:	c1 ff 1f             	sar    edi,0x1f
c000fd2c:	57                   	push   edi
c000fd2d:	52                   	push   edx
c000fd2e:	e8 6d 04 00 00       	call   c00101a0 <KeGetDigitsInNumber(long long)>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd3a:	48                   	dec    eax
c000fd3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd3f:	75 1c                	jne    c000fd5d <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000fd41:	83 f9 44             	cmp    ecx,0x44
c000fd44:	75 09                	jne    c000fd4f <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000fd46:	80 3d 60 71 03 c0 00 	cmp    BYTE PTR ds:0xc0037160,0x0
c000fd4d:	eb 0c                	jmp    c000fd5b <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000fd4f:	83 f9 4d             	cmp    ecx,0x4d
c000fd52:	75 60                	jne    c000fdb4 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000fd54:	80 3d 61 71 03 c0 00 	cmp    BYTE PTR ds:0xc0037161,0x0
c000fd5b:	74 57                	je     c000fdb4 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000fd5d:	89 d0                	mov    eax,edx
c000fd5f:	b9 0a 00 00 00       	mov    ecx,0xa
c000fd64:	99                   	cdq    
c000fd65:	f7 f9                	idiv   ecx
c000fd67:	89 d6                	mov    esi,edx
c000fd69:	99                   	cdq    
c000fd6a:	f7 f9                	idiv   ecx
c000fd6c:	83 c2 30             	add    edx,0x30
c000fd6f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fd73:	8d 56 30             	lea    edx,[esi+0x30]
c000fd76:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000fd7a:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000fd7f:	56                   	push   esi
c000fd80:	56                   	push   esi
c000fd81:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000fd85:	57                   	push   edi
c000fd86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fd8a:	56                   	push   esi
c000fd8b:	e8 e0 0a ff ff       	call   c0000870 <strcat>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	83 fb 02             	cmp    ebx,0x2
c000fd96:	74 34                	je     c000fdcc <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000fd98:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fd9d:	a0 48 71 03 c0       	mov    al,ds:0xc0037148
c000fda2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fda6:	51                   	push   ecx
c000fda7:	51                   	push   ecx
c000fda8:	57                   	push   edi
c000fda9:	56                   	push   esi
c000fdaa:	e8 c1 0a ff ff       	call   c0000870 <strcat>
c000fdaf:	83 c4 10             	add    esp,0x10
c000fdb2:	eb 18                	jmp    c000fdcc <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000fdb4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fdb9:	89 d0                	mov    eax,edx
c000fdbb:	b9 0a 00 00 00       	mov    ecx,0xa
c000fdc0:	99                   	cdq    
c000fdc1:	f7 f9                	idiv   ecx
c000fdc3:	83 c2 30             	add    edx,0x30
c000fdc6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fdca:	eb b3                	jmp    c000fd7f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000fdcc:	43                   	inc    ebx
c000fdcd:	83 fb 03             	cmp    ebx,0x3
c000fdd0:	0f 85 25 ff ff ff    	jne    c000fcfb <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000fdd6:	52                   	push   edx
c000fdd7:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000fdde:	6a 00                	push   0x0
c000fde0:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fde7:	e8 04 07 ff ff       	call   c00004f0 <memset>
c000fdec:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdef:	e8 8c 07 ff ff       	call   c0000580 <strlen>
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	40                   	inc    eax
c000fdf8:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000fdff:	72 14                	jb     c000fe15 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000fe01:	50                   	push   eax
c000fe02:	50                   	push   eax
c000fe03:	56                   	push   esi
c000fe04:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fe0b:	e8 40 08 ff ff       	call   c0000650 <strcpy>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	eb 58                	jmp    c000fe6d <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000fe15:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000fe1c:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000fe23:	8d 48 ff             	lea    ecx,[eax-0x1]
c000fe26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe28:	eb 43                	jmp    c000fe6d <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000fe2a:	85 ed                	test   ebp,ebp
c000fe2c:	74 2a                	je     c000fe58 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000fe2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fe33:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000fe37:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fe3b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000fe3f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fe43:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fe47:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000fe4b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fe4f:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000fe53:	e9 27 ff ff ff       	jmp    c000fd7f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000fe58:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fe5c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fe60:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fe64:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fe68:	e9 0d ff ff ff       	jmp    c000fd7a <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000fe6d:	81 c4 ac 00 00 00    	add    esp,0xac
c000fe73:	5b                   	pop    ebx
c000fe74:	5e                   	pop    esi
c000fe75:	5f                   	pop    edi
c000fe76:	5d                   	pop    ebp
c000fe77:	c3                   	ret    

c000fe78 <KeFormatShortDate(char*, int, int, int, int)>:
c000fe78:	83 ec 14             	sub    esp,0x14
c000fe7b:	6a 00                	push   0x0
c000fe7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fe91:	e8 00 fe ff ff       	call   c000fc96 <KeFormatDate(char*, int, int, int, int, bool)>
c000fe96:	83 c4 2c             	add    esp,0x2c
c000fe99:	c3                   	ret    

c000fe9a <KeFormatLongDate(char*, int, int, int, int)>:
c000fe9a:	83 ec 14             	sub    esp,0x14
c000fe9d:	6a 01                	push   0x1
c000fe9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000feab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000feaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000feb3:	e8 de fd ff ff       	call   c000fc96 <KeFormatDate(char*, int, int, int, int, bool)>
c000feb8:	83 c4 2c             	add    esp,0x2c
c000febb:	c3                   	ret    

c000febc <KeSetLocale(klocale_t)>:
c000febc:	57                   	push   edi
c000febd:	b9 09 00 00 00       	mov    ecx,0x9
c000fec2:	56                   	push   esi
c000fec3:	bf 40 71 03 c0       	mov    edi,0xc0037140
c000fec8:	fc                   	cld    
c000fec9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fecd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fecf:	5e                   	pop    esi
c000fed0:	5f                   	pop    edi
c000fed1:	c3                   	ret    

c000fed2 <KeInitialiseLocale()>:
c000fed2:	57                   	push   edi
c000fed3:	56                   	push   esi
c000fed4:	83 ec 3c             	sub    esp,0x3c
c000fed7:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000fedf:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000fee7:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000feef:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000fef7:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000fefe:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000ff06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ff0e:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000ff15:	68 28 c1 02 c0       	push   0xc002c128
c000ff1a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ff1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff22:	50                   	push   eax
c000ff23:	e8 28 07 ff ff       	call   c0000650 <strcpy>
c000ff28:	83 ec 20             	sub    esp,0x20
c000ff2b:	b9 09 00 00 00       	mov    ecx,0x9
c000ff30:	fc                   	cld    
c000ff31:	89 e7                	mov    edi,esp
c000ff33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff35:	e8 82 ff ff ff       	call   c000febc <KeSetLocale(klocale_t)>
c000ff3a:	83 c4 64             	add    esp,0x64
c000ff3d:	5e                   	pop    esi
c000ff3e:	5f                   	pop    edi
c000ff3f:	c3                   	ret    

c000ff40 <KeFormatCurrency(char*, int, long long, long long)>:
c000ff40:	c3                   	ret    

c000ff41 <KeFormatCurrency(char*, int, double)>:
c000ff41:	c3                   	ret    

c000ff42 <KeFormatNumber(char*, long long, long long)>:
c000ff42:	c3                   	ret    

c000ff43 <KeFormatNumber(char*, double)>:
c000ff43:	c3                   	ret    

c000ff44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000ff44:	55                   	push   ebp
c000ff45:	57                   	push   edi
c000ff46:	56                   	push   esi
c000ff47:	53                   	push   ebx
c000ff48:	83 ec 4c             	sub    esp,0x4c
c000ff4b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff53:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ff57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff5b:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000ff63:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000ff6b:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000ff73:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000ff7b:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ff80:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ff84:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ff88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ff94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ff98:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000ff9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ffa1:	89 c2                	mov    edx,eax
c000ffa3:	c1 fa 1f             	sar    edx,0x1f
c000ffa6:	52                   	push   edx
c000ffa7:	50                   	push   eax
c000ffa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ffac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ffb0:	e8 5f 4c 01 00       	call   c0024c14 <__udivdi3>
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ffbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ffc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc4:	80 f4 00             	xor    ah,0x0
c000ffc7:	89 c7                	mov    edi,eax
c000ffc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffcd:	80 f4 00             	xor    ah,0x0
c000ffd0:	89 c5                	mov    ebp,eax
c000ffd2:	89 e8                	mov    eax,ebp
c000ffd4:	09 f8                	or     eax,edi
c000ffd6:	74 04                	je     c000ffdc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000ffd8:	eb be                	jmp    c000ff98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000ffda:	66 90                	xchg   ax,ax
c000ffdc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ffe0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ffe3:	90                   	nop
c000ffe4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ffe8:	89 c7                	mov    edi,eax
c000ffea:	89 c5                	mov    ebp,eax
c000ffec:	c1 fd 1f             	sar    ebp,0x1f
c000ffef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fff3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fff7:	55                   	push   ebp
c000fff8:	57                   	push   edi
c000fff9:	52                   	push   edx
c000fffa:	50                   	push   eax
c000fffb:	e8 14 4d 01 00       	call   c0024d14 <__umoddi3>
c0010000:	83 c4 10             	add    esp,0x10
c0010003:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c0010008:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c001000c:	01 c8                	add    eax,ecx
c001000e:	8a 10                	mov    dl,BYTE PTR [eax]
c0010010:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010014:	88 10                	mov    BYTE PTR [eax],dl
c0010016:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c001001a:	89 c2                	mov    edx,eax
c001001c:	c1 fa 1f             	sar    edx,0x1f
c001001f:	52                   	push   edx
c0010020:	50                   	push   eax
c0010021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010025:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010029:	e8 e6 4b 01 00       	call   c0024c14 <__udivdi3>
c001002e:	83 c4 10             	add    esp,0x10
c0010031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010035:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010039:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001003d:	80 f4 00             	xor    ah,0x0
c0010040:	89 c3                	mov    ebx,eax
c0010042:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010046:	80 f4 00             	xor    ah,0x0
c0010049:	89 c6                	mov    esi,eax
c001004b:	89 f0                	mov    eax,esi
c001004d:	09 d8                	or     eax,ebx
c001004f:	74 03                	je     c0010054 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c0010051:	eb 91                	jmp    c000ffe4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c0010053:	90                   	nop
c0010054:	90                   	nop
c0010055:	83 c4 4c             	add    esp,0x4c
c0010058:	5b                   	pop    ebx
c0010059:	5e                   	pop    esi
c001005a:	5f                   	pop    edi
c001005b:	5d                   	pop    ebp
c001005c:	c3                   	ret    
c001005d:	8d 76 00             	lea    esi,[esi+0x0]

c0010060 <KeBasedSignedIntegerToString(long long, char*, int)>:
c0010060:	55                   	push   ebp
c0010061:	57                   	push   edi
c0010062:	56                   	push   esi
c0010063:	53                   	push   ebx
c0010064:	83 ec 4c             	sub    esp,0x4c
c0010067:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001006b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001006f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0010073:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010077:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c001007f:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c0010087:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c001008f:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c0010097:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c001009c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00100a0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00100a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100a9:	79 1d                	jns    c00100c8 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c00100ab:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c00100af:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c00100b4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00100b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00100bc:	8d 50 01             	lea    edx,[eax+0x1]
c00100bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00100c3:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c00100c6:	66 90                	xchg   ax,ax
c00100c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00100d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00100d8:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c00100dd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00100e1:	89 c2                	mov    edx,eax
c00100e3:	c1 fa 1f             	sar    edx,0x1f
c00100e6:	52                   	push   edx
c00100e7:	50                   	push   eax
c00100e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100f0:	e8 1f 4b 01 00       	call   c0024c14 <__udivdi3>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00100fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010100:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010104:	80 f4 00             	xor    ah,0x0
c0010107:	89 c7                	mov    edi,eax
c0010109:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001010d:	80 f4 00             	xor    ah,0x0
c0010110:	89 c5                	mov    ebp,eax
c0010112:	89 e8                	mov    eax,ebp
c0010114:	09 f8                	or     eax,edi
c0010116:	74 04                	je     c001011c <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c0010118:	eb be                	jmp    c00100d8 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c001011a:	66 90                	xchg   ax,ax
c001011c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010120:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010123:	90                   	nop
c0010124:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0010128:	89 c7                	mov    edi,eax
c001012a:	89 c5                	mov    ebp,eax
c001012c:	c1 fd 1f             	sar    ebp,0x1f
c001012f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010137:	55                   	push   ebp
c0010138:	57                   	push   edi
c0010139:	52                   	push   edx
c001013a:	50                   	push   eax
c001013b:	e8 54 49 01 00       	call   c0024a94 <__moddi3>
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c0010148:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c001014c:	01 c8                	add    eax,ecx
c001014e:	8a 10                	mov    dl,BYTE PTR [eax]
c0010150:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010154:	88 10                	mov    BYTE PTR [eax],dl
c0010156:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c001015a:	89 c2                	mov    edx,eax
c001015c:	c1 fa 1f             	sar    edx,0x1f
c001015f:	52                   	push   edx
c0010160:	50                   	push   eax
c0010161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010169:	e8 da 47 01 00       	call   c0024948 <__divdi3>
c001016e:	83 c4 10             	add    esp,0x10
c0010171:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010175:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010179:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001017d:	80 f4 00             	xor    ah,0x0
c0010180:	89 c3                	mov    ebx,eax
c0010182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010186:	80 f4 00             	xor    ah,0x0
c0010189:	89 c6                	mov    esi,eax
c001018b:	89 f0                	mov    eax,esi
c001018d:	09 d8                	or     eax,ebx
c001018f:	74 03                	je     c0010194 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c0010191:	eb 91                	jmp    c0010124 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c0010193:	90                   	nop
c0010194:	90                   	nop
c0010195:	83 c4 4c             	add    esp,0x4c
c0010198:	5b                   	pop    ebx
c0010199:	5e                   	pop    esi
c001019a:	5f                   	pop    edi
c001019b:	5d                   	pop    ebp
c001019c:	c3                   	ret    
c001019d:	8d 76 00             	lea    esi,[esi+0x0]

c00101a0 <KeGetDigitsInNumber(long long)>:
c00101a0:	56                   	push   esi
c00101a1:	53                   	push   ebx
c00101a2:	83 ec 24             	sub    esp,0x24
c00101a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00101b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00101bd:	8d 76 00             	lea    esi,[esi+0x0]
c00101c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101c4:	80 f4 00             	xor    ah,0x0
c00101c7:	89 c3                	mov    ebx,eax
c00101c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101cd:	80 f4 00             	xor    ah,0x0
c00101d0:	89 c6                	mov    esi,eax
c00101d2:	89 f0                	mov    eax,esi
c00101d4:	09 d8                	or     eax,ebx
c00101d6:	74 28                	je     c0010200 <KeGetDigitsInNumber(long long)+0x60>
c00101d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101e0:	6a 00                	push   0x0
c00101e2:	6a 0a                	push   0xa
c00101e4:	52                   	push   edx
c00101e5:	50                   	push   eax
c00101e6:	e8 5d 47 01 00       	call   c0024948 <__divdi3>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00101f6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00101fb:	eb c3                	jmp    c00101c0 <KeGetDigitsInNumber(long long)+0x20>
c00101fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010204:	83 c4 24             	add    esp,0x24
c0010207:	5b                   	pop    ebx
c0010208:	5e                   	pop    esi
c0010209:	c3                   	ret    
c001020a:	66 90                	xchg   ax,ax

c001020c <KeItoa(unsigned long long, char*)>:
c001020c:	83 ec 1c             	sub    esp,0x1c
c001020f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010217:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001021b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001021f:	6a 0a                	push   0xa
c0010221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010229:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001022d:	e8 12 fd ff ff       	call   c000ff44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c0010232:	83 c4 10             	add    esp,0x10
c0010235:	90                   	nop
c0010236:	83 c4 1c             	add    esp,0x1c
c0010239:	c3                   	ret    
c001023a:	66 90                	xchg   ax,ax

c001023c <KeItoa(long long, char*)>:
c001023c:	83 ec 1c             	sub    esp,0x1c
c001023f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010247:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001024b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001024f:	6a 0a                	push   0xa
c0010251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010259:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001025d:	e8 fe fd ff ff       	call   c0010060 <KeBasedSignedIntegerToString(long long, char*, int)>
c0010262:	83 c4 10             	add    esp,0x10
c0010265:	90                   	nop
c0010266:	83 c4 1c             	add    esp,0x1c
c0010269:	c3                   	ret    
c001026a:	66 90                	xchg   ax,ax

c001026c <KeXtoa(unsigned long long, char*)>:
c001026c:	83 ec 1c             	sub    esp,0x1c
c001026f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010273:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010277:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001027b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001027f:	6a 10                	push   0x10
c0010281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010285:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010289:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001028d:	e8 b2 fc ff ff       	call   c000ff44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c0010292:	83 c4 10             	add    esp,0x10
c0010295:	90                   	nop
c0010296:	83 c4 1c             	add    esp,0x1c
c0010299:	c3                   	ret    

c001029a <sbrk>:
c001029a:	55                   	push   ebp
c001029b:	57                   	push   edi
c001029c:	56                   	push   esi
c001029d:	53                   	push   ebx
c001029e:	83 ec 1c             	sub    esp,0x1c
c00102a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102a5:	85 c0                	test   eax,eax
c00102a7:	74 66                	je     c001030f <sbrk+0x75>
c00102a9:	78 6b                	js     c0010316 <sbrk+0x7c>
c00102ab:	8b 15 f0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030af0
c00102b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102b5:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00102bb:	05 ff 0f 00 00       	add    eax,0xfff
c00102c0:	0f 49 e8             	cmovns ebp,eax
c00102c3:	c1 fd 0c             	sar    ebp,0xc
c00102c6:	bb 00 00 00 00       	mov    ebx,0x0
c00102cb:	8b 35 90 72 03 c0    	mov    esi,DWORD PTR ds:0xc0037290
c00102d1:	8b 3d f0 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030af0
c00102d7:	e8 b6 07 00 00       	call   c0010a92 <Phys::allocatePage()>
c00102dc:	68 01 04 00 00       	push   0x401
c00102e1:	57                   	push   edi
c00102e2:	50                   	push   eax
c00102e3:	56                   	push   esi
c00102e4:	e8 cf 41 00 00       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00102e9:	81 05 f0 0a 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0030af0,0x1000
c00102f3:	83 c3 01             	add    ebx,0x1
c00102f6:	83 c4 10             	add    esp,0x10
c00102f9:	39 dd                	cmp    ebp,ebx
c00102fb:	75 ce                	jne    c00102cb <sbrk+0x31>
c00102fd:	0f 20 d8             	mov    eax,cr3
c0010300:	0f 22 d8             	mov    cr3,eax
c0010303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010307:	83 c4 1c             	add    esp,0x1c
c001030a:	5b                   	pop    ebx
c001030b:	5e                   	pop    esi
c001030c:	5f                   	pop    edi
c001030d:	5d                   	pop    ebp
c001030e:	c3                   	ret    
c001030f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0010314:	eb f1                	jmp    c0010307 <sbrk+0x6d>
c0010316:	83 ec 08             	sub    esp,0x8
c0010319:	50                   	push   eax
c001031a:	68 2c c1 02 c0       	push   0xc002c12c
c001031f:	e8 42 6c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001032c:	eb d9                	jmp    c0010307 <sbrk+0x6d>

c001032e <sbrk_thunk>:
c001032e:	83 ec 0c             	sub    esp,0xc
c0010331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010335:	3d ff bf 00 00       	cmp    eax,0xbfff
c001033a:	7f 10                	jg     c001034c <sbrk_thunk+0x1e>
c001033c:	83 ec 0c             	sub    esp,0xc
c001033f:	50                   	push   eax
c0010340:	e8 55 ff ff ff       	call   c001029a <sbrk>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	83 c4 0c             	add    esp,0xc
c001034b:	c3                   	ret    
c001034c:	83 ec 08             	sub    esp,0x8
c001034f:	50                   	push   eax
c0010350:	68 5c c1 02 c0       	push   0xc002c15c
c0010355:	e8 0c 6c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001035a:	83 c4 10             	add    esp,0x10
c001035d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010362:	eb e4                	jmp    c0010348 <sbrk_thunk+0x1a>

c0010364 <mmap>:
c0010364:	55                   	push   ebp
c0010365:	57                   	push   edi
c0010366:	56                   	push   esi
c0010367:	53                   	push   ebx
c0010368:	83 ec 18             	sub    esp,0x18
c001036b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001036f:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010375:	89 fb                	mov    ebx,edi
c0010377:	c1 eb 0c             	shr    ebx,0xc
c001037a:	53                   	push   ebx
c001037b:	e8 5f 3a 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0010380:	89 c5                	mov    ebp,eax
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	85 db                	test   ebx,ebx
c0010387:	7e 2f                	jle    c00103b8 <mmap+0x54>
c0010389:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001038f:	01 c7                	add    edi,eax
c0010391:	89 c3                	mov    ebx,eax
c0010393:	8b 35 90 72 03 c0    	mov    esi,DWORD PTR ds:0xc0037290
c0010399:	e8 f4 06 00 00       	call   c0010a92 <Phys::allocatePage()>
c001039e:	68 01 04 00 00       	push   0x401
c00103a3:	53                   	push   ebx
c00103a4:	50                   	push   eax
c00103a5:	56                   	push   esi
c00103a6:	e8 0d 41 00 00       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00103ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	39 fb                	cmp    ebx,edi
c00103b6:	75 db                	jne    c0010393 <mmap+0x2f>
c00103b8:	89 e8                	mov    eax,ebp
c00103ba:	83 c4 0c             	add    esp,0xc
c00103bd:	5b                   	pop    ebx
c00103be:	5e                   	pop    esi
c00103bf:	5f                   	pop    edi
c00103c0:	5d                   	pop    ebp
c00103c1:	c3                   	ret    

c00103c2 <munmap>:
c00103c2:	83 ec 18             	sub    esp,0x18
c00103c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c9:	e8 0f 3d 00 00       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c00103ce:	b8 00 00 00 00       	mov    eax,0x0
c00103d3:	83 c4 1c             	add    esp,0x1c
c00103d6:	c3                   	ret    

c00103d7 <liballoc_lock()>:
c00103d7:	fa                   	cli    
c00103d8:	83 05 30 73 03 c0 01 	add    DWORD PTR ds:0xc0037330,0x1
c00103df:	b8 00 00 00 00       	mov    eax,0x0
c00103e4:	c3                   	ret    

c00103e5 <liballoc_unlock()>:
c00103e5:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00103ed:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c00103f4:	75 01                	jne    c00103f7 <liballoc_unlock()+0x12>
c00103f6:	fb                   	sti    
c00103f7:	b8 00 00 00 00       	mov    eax,0x0
c00103fc:	c3                   	ret    

c00103fd <liballoc_alloc(int)>:
c00103fd:	83 ec 10             	sub    esp,0x10
c0010400:	6a 01                	push   0x1
c0010402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010406:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c001040c:	e8 af 41 00 00       	call   c00145c0 <VAS::allocatePages(int, int)>
c0010411:	83 c4 1c             	add    esp,0x1c
c0010414:	c3                   	ret    

c0010415 <liballoc_free(void*, int)>:
c0010415:	83 ec 14             	sub    esp,0x14
c0010418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001041c:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0010422:	e8 f3 3d 00 00       	call   c001421a <VAS::freeAllocatedPages(unsigned long)>
c0010427:	b8 00 00 00 00       	mov    eax,0x0
c001042c:	83 c4 1c             	add    esp,0x1c
c001042f:	c3                   	ret    

c0010430 <realloc>:
c0010430:	83 ec 14             	sub    esp,0x14
c0010433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043b:	e8 45 13 ff ff       	call   c0001785 <dlrealloc>
c0010440:	83 c4 1c             	add    esp,0x1c
c0010443:	c3                   	ret    

c0010444 <malloc>:
c0010444:	83 ec 18             	sub    esp,0x18
c0010447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044b:	e8 f8 0d ff ff       	call   c0001248 <dlmalloc>
c0010450:	83 c4 1c             	add    esp,0x1c
c0010453:	c3                   	ret    

c0010454 <free>:
c0010454:	83 ec 18             	sub    esp,0x18
c0010457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045b:	e8 26 09 ff ff       	call   c0000d86 <dlfree>
c0010460:	83 c4 1c             	add    esp,0x1c
c0010463:	c3                   	ret    

c0010464 <rfree>:
c0010464:	83 ec 18             	sub    esp,0x18
c0010467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001046b:	e8 16 09 ff ff       	call   c0000d86 <dlfree>
c0010470:	83 c4 1c             	add    esp,0x1c
c0010473:	c3                   	ret    

c0010474 <calloc>:
c0010474:	56                   	push   esi
c0010475:	53                   	push   ebx
c0010476:	83 ec 10             	sub    esp,0x10
c0010479:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001047d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0010482:	53                   	push   ebx
c0010483:	e8 bc ff ff ff       	call   c0010444 <malloc>
c0010488:	89 c6                	mov    esi,eax
c001048a:	83 c4 0c             	add    esp,0xc
c001048d:	53                   	push   ebx
c001048e:	6a 00                	push   0x0
c0010490:	50                   	push   eax
c0010491:	e8 5a 00 ff ff       	call   c00004f0 <memset>
c0010496:	89 f0                	mov    eax,esi
c0010498:	83 c4 14             	add    esp,0x14
c001049b:	5b                   	pop    ebx
c001049c:	5e                   	pop    esi
c001049d:	c3                   	ret    
c001049e:	66 90                	xchg   ax,ax

c00104a0 <KeMailboxTryPost(Mailbox*, void*)>:
c00104a0:	83 ec 10             	sub    esp,0x10
c00104a3:	fa                   	cli    
c00104a4:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00104a9:	83 c0 01             	add    eax,0x1
c00104ac:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00104b1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00104b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104bd:	85 c0                	test   eax,eax
c00104bf:	75 23                	jne    c00104e4 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c00104c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00104c9:	89 10                	mov    DWORD PTR [eax],edx
c00104cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104d2:	8d 50 01             	lea    edx,[eax+0x1]
c00104d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00104dc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00104e1:	8d 76 00             	lea    esi,[esi+0x0]
c00104e4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00104ec:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00104f1:	85 c0                	test   eax,eax
c00104f3:	75 03                	jne    c00104f8 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c00104f5:	fb                   	sti    
c00104f6:	66 90                	xchg   ax,ax
c00104f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	c3                   	ret    

c0010500 <KeMailboxTryGet(Mailbox*, void**)>:
c0010500:	83 ec 10             	sub    esp,0x10
c0010503:	fa                   	cli    
c0010504:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010509:	83 c0 01             	add    eax,0x1
c001050c:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0010511:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001051a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001051d:	83 f8 01             	cmp    eax,0x1
c0010520:	75 22                	jne    c0010544 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c0010522:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010526:	8b 10                	mov    edx,DWORD PTR [eax]
c0010528:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001052c:	89 10                	mov    DWORD PTR [eax],edx
c001052e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010535:	8d 50 ff             	lea    edx,[eax-0x1]
c0010538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001053f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0010544:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001054c:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010551:	85 c0                	test   eax,eax
c0010553:	75 03                	jne    c0010558 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c0010555:	fb                   	sti    
c0010556:	66 90                	xchg   ax,ax
c0010558:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	c3                   	ret    

c0010560 <KeMailboxCreate()>:
c0010560:	83 ec 1c             	sub    esp,0x1c
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	6a 08                	push   0x8
c0010568:	e8 d7 fe ff ff       	call   c0010444 <malloc>
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010578:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010582:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001058d:	83 c4 1c             	add    esp,0x1c
c0010590:	c3                   	ret    
c0010591:	8d 76 00             	lea    esi,[esi+0x0]

c0010594 <KeMailboxPost(Mailbox*, void*)>:
c0010594:	83 ec 1c             	sub    esp,0x1c
c0010597:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001059c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a4:	e8 f7 fe ff ff       	call   c00104a0 <KeMailboxTryPost(Mailbox*, void*)>
c00105a9:	83 c4 08             	add    esp,0x8
c00105ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00105b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00105b4:	83 f0 01             	xor    eax,0x1
c00105b7:	0f b6 c0             	movzx  eax,al
c00105ba:	85 c0                	test   eax,eax
c00105bc:	74 26                	je     c00105e4 <KeMailboxPost(Mailbox*, void*)+0x50>
c00105be:	fa                   	cli    
c00105bf:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00105c4:	83 c0 01             	add    eax,0x1
c00105c7:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00105cc:	e8 4f 6e 00 00       	call   c0017420 <schedule()>
c00105d1:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00105d9:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00105de:	85 c0                	test   eax,eax
c00105e0:	75 02                	jne    c00105e4 <KeMailboxPost(Mailbox*, void*)+0x50>
c00105e2:	fb                   	sti    
c00105e3:	90                   	nop
c00105e4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00105e9:	85 c0                	test   eax,eax
c00105eb:	75 03                	jne    c00105f0 <KeMailboxPost(Mailbox*, void*)+0x5c>
c00105ed:	eb ad                	jmp    c001059c <KeMailboxPost(Mailbox*, void*)+0x8>
c00105ef:	90                   	nop
c00105f0:	90                   	nop
c00105f1:	83 c4 1c             	add    esp,0x1c
c00105f4:	c3                   	ret    
c00105f5:	8d 76 00             	lea    esi,[esi+0x0]

c00105f8 <KeMailboxGet(Mailbox*, void**)>:
c00105f8:	83 ec 1c             	sub    esp,0x1c
c00105fb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010600:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010604:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010608:	e8 f3 fe ff ff       	call   c0010500 <KeMailboxTryGet(Mailbox*, void**)>
c001060d:	83 c4 08             	add    esp,0x8
c0010610:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010614:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010618:	83 f0 01             	xor    eax,0x1
c001061b:	0f b6 c0             	movzx  eax,al
c001061e:	85 c0                	test   eax,eax
c0010620:	74 26                	je     c0010648 <KeMailboxGet(Mailbox*, void**)+0x50>
c0010622:	fa                   	cli    
c0010623:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010628:	83 c0 01             	add    eax,0x1
c001062b:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0010630:	e8 eb 6d 00 00       	call   c0017420 <schedule()>
c0010635:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001063d:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010642:	85 c0                	test   eax,eax
c0010644:	75 02                	jne    c0010648 <KeMailboxGet(Mailbox*, void**)+0x50>
c0010646:	fb                   	sti    
c0010647:	90                   	nop
c0010648:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001064d:	85 c0                	test   eax,eax
c001064f:	75 03                	jne    c0010654 <KeMailboxGet(Mailbox*, void**)+0x5c>
c0010651:	eb ad                	jmp    c0010600 <KeMailboxGet(Mailbox*, void**)+0x8>
c0010653:	90                   	nop
c0010654:	90                   	nop
c0010655:	83 c4 1c             	add    esp,0x1c
c0010658:	c3                   	ret    
c0010659:	8d 76 00             	lea    esi,[esi+0x0]

c001065c <KeMailboxDestroy(Mailbox*)>:
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	83 ec 0c             	sub    esp,0xc
c0010662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010666:	e8 e9 fd ff ff       	call   c0010454 <free>
c001066b:	83 c4 10             	add    esp,0x10
c001066e:	90                   	nop
c001066f:	83 c4 0c             	add    esp,0xc
c0010672:	c3                   	ret    

c0010673 <KeFirstTask()>:
c0010673:	53                   	push   ebx
c0010674:	83 ec 08             	sub    esp,0x8
c0010677:	fb                   	sti    
c0010678:	e8 5c a5 00 00       	call   c001abd9 <HalEnableNMI()>
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	68 6b c1 02 c0       	push   0xc002c16b
c0010685:	e8 07 d9 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c001068a:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c0010691:	e8 ae fd ff ff       	call   c0010444 <malloc>
c0010696:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001069d:	89 c3                	mov    ebx,eax
c001069f:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00106a4:	50                   	push   eax
c00106a5:	68 84 c1 02 c0       	push   0xc002c184
c00106aa:	6a 01                	push   0x1
c00106ac:	53                   	push   ebx
c00106ad:	e8 7a 68 00 00       	call   c0016f2c <Process::Process(bool, char const*, Process*, char**)>
c00106b2:	83 c4 20             	add    esp,0x20
c00106b5:	68 ff 00 00 00       	push   0xff
c00106ba:	6a 00                	push   0x0
c00106bc:	68 6f f7 00 c0       	push   0xc000f76f
c00106c1:	53                   	push   ebx
c00106c2:	e8 a5 6a 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c00106c7:	8b 15 58 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037358
c00106cd:	6a 7a                	push   0x7a
c00106cf:	6a 00                	push   0x0
c00106d1:	68 fc 7a 01 c0       	push   0xc0017afc
c00106d6:	52                   	push   edx
c00106d7:	e8 90 6a 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c00106dc:	83 c4 14             	add    esp,0x14
c00106df:	68 0c c2 02 c0       	push   0xc002c20c
c00106e4:	a3 10 73 03 c0       	mov    ds:0xc0037310,eax
c00106e9:	e8 a3 d8 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00106ee:	c6 05 0d 71 03 c0 01 	mov    BYTE PTR ds:0xc003710d,0x1
c00106f5:	e8 df 0b 00 00       	call   c00112d9 <KeInitRand()>
c00106fa:	e8 83 78 00 00       	call   c0017f82 <Vm::initialise8086()>
c00106ff:	e8 86 84 ff ff       	call   c0008b8a <Fs::initVFS()>
c0010704:	c7 04 24 d8 bd 02 c0 	mov    DWORD PTR [esp],0xc002bdd8
c001070b:	e8 81 d8 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0010710:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0010715:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001071b:	8b 10                	mov    edx,DWORD PTR [eax]
c001071d:	6a 00                	push   0x0
c001071f:	6a 00                	push   0x0
c0010721:	6a 00                	push   0x0
c0010723:	50                   	push   eax
c0010724:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010727:	83 c4 14             	add    esp,0x14
c001072a:	68 0c c2 02 c0       	push   0xc002c20c
c001072f:	e8 5d d8 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0010734:	e8 35 7c ff ff       	call   c000836e <KeInitialiseSymlinks()>
c0010739:	e8 a2 eb ff ff       	call   c000f2e0 <KeLoadSystemEnv()>
c001073e:	e8 dd 09 00 00       	call   c0011120 <KeSetupPowerManager()>
c0010743:	c7 04 24 91 c1 02 c0 	mov    DWORD PTR [esp],0xc002c191
c001074a:	e8 42 d8 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c001074f:	8b 0d 08 71 03 c0    	mov    ecx,DWORD PTR ds:0xc0037108
c0010755:	83 c4 0c             	add    esp,0xc
c0010758:	6a 00                	push   0x0
c001075a:	51                   	push   ecx
c001075b:	68 a2 c1 02 c0       	push   0xc002c1a2
c0010760:	e8 39 63 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0010765:	83 c4 10             	add    esp,0x10
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	6a 02                	push   0x2
c001076d:	e8 6e 6d 00 00       	call   c00174e0 <blockTask(TaskState)>
c0010772:	83 c4 10             	add    esp,0x10
c0010775:	eb f1                	jmp    c0010768 <KeFirstTask()+0xf5>

c0010777 <KeEntryPoint>:
c0010777:	57                   	push   edi
c0010778:	bf f9 03 00 00       	mov    edi,0x3f9
c001077d:	56                   	push   esi
c001077e:	31 f6                	xor    esi,esi
c0010780:	53                   	push   ebx
c0010781:	83 ec 20             	sub    esp,0x20
c0010784:	e8 cb d7 ff ff       	call   c000df54 <KeInitialiseBootConfigurationFlags()>
c0010789:	89 f0                	mov    eax,esi
c001078b:	89 fa                	mov    edx,edi
c001078d:	ee                   	out    dx,al
c001078e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0010793:	b0 80                	mov    al,0x80
c0010795:	89 da                	mov    edx,ebx
c0010797:	ee                   	out    dx,al
c0010798:	b1 03                	mov    cl,0x3
c001079a:	ba f8 03 00 00       	mov    edx,0x3f8
c001079f:	88 c8                	mov    al,cl
c00107a1:	ee                   	out    dx,al
c00107a2:	89 f0                	mov    eax,esi
c00107a4:	89 fa                	mov    edx,edi
c00107a6:	ee                   	out    dx,al
c00107a7:	88 c8                	mov    al,cl
c00107a9:	89 da                	mov    edx,ebx
c00107ab:	ee                   	out    dx,al
c00107ac:	b0 c7                	mov    al,0xc7
c00107ae:	ba fa 03 00 00       	mov    edx,0x3fa
c00107b3:	ee                   	out    dx,al
c00107b4:	b0 0b                	mov    al,0xb
c00107b6:	ba fc 03 00 00       	mov    edx,0x3fc
c00107bb:	ee                   	out    dx,al
c00107bc:	83 ec 0c             	sub    esp,0xc
c00107bf:	68 be c1 02 c0       	push   0xc002c1be
c00107c4:	e8 9d 67 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00107c9:	e8 94 d7 ff ff       	call   c000df62 <KeDisplaySplashScreen()>
c00107ce:	a1 24 05 00 00       	mov    eax,ds:0x524
c00107d3:	05 ff 0f 00 00       	add    eax,0xfff
c00107d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00107dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00107e0:	e8 47 04 00 00       	call   c0010c2c <Phys::physicalMemorySetup(unsigned int)>
c00107e5:	e8 c9 37 00 00       	call   c0013fb3 <Virt::virtualMemorySetup()>
c00107ea:	e8 c3 d6 ff ff       	call   c000deb2 <KeInitialiseAtexit()>
c00107ef:	58                   	pop    eax
c00107f0:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00107f4:	53                   	push   ebx
c00107f5:	e8 a0 3a 00 00       	call   c001429a <VAS::VAS()>
c00107fa:	89 1d 90 72 03 c0    	mov    DWORD PTR ds:0xc0037290,ebx
c0010800:	e8 03 7f 01 00       	call   c0028708 <_init>
c0010805:	c7 04 24 d5 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d5
c001080c:	e8 80 d7 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0010811:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c0010818:	e8 27 fc ff ff       	call   c0010444 <malloc>
c001081d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010820:	89 c6                	mov    esi,eax
c0010822:	e8 eb e4 ff ff       	call   c000ed12 <Computer::Computer()>
c0010827:	8b 15 90 72 03 c0    	mov    edx,DWORD PTR ds:0xc0037290
c001082d:	89 35 08 71 03 c0    	mov    DWORD PTR ds:0xc0037108,esi
c0010833:	52                   	push   edx
c0010834:	6a 00                	push   0x0
c0010836:	6a 00                	push   0x0
c0010838:	56                   	push   esi
c0010839:	e8 18 e5 ff ff       	call   c000ed56 <Computer::open(int, int, void*)>
c001083e:	83 c4 14             	add    esp,0x14
c0010841:	68 30 c2 02 c0       	push   0xc002c230
c0010846:	e8 46 d7 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c001084b:	e8 0f ab 00 00       	call   c001b35f <HalInitialiseCoprocessor()>
c0010850:	c7 04 24 ef c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ef
c0010857:	e8 35 d7 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c001085c:	c7 04 24 73 06 01 c0 	mov    DWORD PTR [esp],0xc0010673
c0010863:	e8 70 6a 00 00       	call   c00172d8 <setupMultitasking(void (*)())>
c0010868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001086b:	e8 e0 3a 00 00       	call   c0014350 <VAS::~VAS()>
c0010870:	83 c4 30             	add    esp,0x30
c0010873:	5b                   	pop    ebx
c0010874:	5e                   	pop    esi
c0010875:	5f                   	pop    edi
c0010876:	c3                   	ret    
c0010877:	90                   	nop

c0010878 <Mutex::Mutex()>:
c0010878:	83 ec 0c             	sub    esp,0xc
c001087b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087f:	83 ec 08             	sub    esp,0x8
c0010882:	6a 01                	push   0x1
c0010884:	50                   	push   eax
c0010885:	e8 ee 0c 00 00       	call   c0011578 <Semaphore::Semaphore(int)>
c001088a:	83 c4 10             	add    esp,0x10
c001088d:	90                   	nop
c001088e:	83 c4 0c             	add    esp,0xc
c0010891:	c3                   	ret    

c0010892 <KeIsKernelInPanic()>:
c0010892:	a0 64 71 03 c0       	mov    al,ds:0xc0037164
c0010897:	c3                   	ret    

c0010898 <KePanic(char const*)>:
c0010898:	c6 05 64 71 03 c0 01 	mov    BYTE PTR ds:0xc0037164,0x1
c001089f:	e9 59 ab 00 00       	jmp    c001b3fd <HalPanic(char const*)>

c00108a4 <Phys::allocateDMA(unsigned long)>:
c00108a4:	55                   	push   ebp
c00108a5:	31 ed                	xor    ebp,ebp
c00108a7:	57                   	push   edi
c00108a8:	56                   	push   esi
c00108a9:	31 f6                	xor    esi,esi
c00108ab:	53                   	push   ebx
c00108ac:	31 db                	xor    ebx,ebx
c00108ae:	83 ec 1c             	sub    esp,0x1c
c00108b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108b5:	05 ff 0f 00 00       	add    eax,0xfff
c00108ba:	c1 e8 0c             	shr    eax,0xc
c00108bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108c1:	31 c0                	xor    eax,eax
c00108c3:	eb 1b                	jmp    c00108e0 <Phys::allocateDMA(unsigned long)+0x3c>
c00108c5:	8d 78 01             	lea    edi,[eax+0x1]
c00108c8:	85 c0                	test   eax,eax
c00108ca:	0f 44 eb             	cmove  ebp,ebx
c00108cd:	0f 44 f3             	cmove  esi,ebx
c00108d0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00108d4:	74 37                	je     c001090d <Phys::allocateDMA(unsigned long)+0x69>
c00108d6:	89 f8                	mov    eax,edi
c00108d8:	83 c3 01             	add    ebx,0x1
c00108db:	83 fb 0f             	cmp    ebx,0xf
c00108de:	7f 13                	jg     c00108f3 <Phys::allocateDMA(unsigned long)+0x4f>
c00108e0:	80 bb 80 71 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc8e80],0x0
c00108e7:	74 dc                	je     c00108c5 <Phys::allocateDMA(unsigned long)+0x21>
c00108e9:	31 c0                	xor    eax,eax
c00108eb:	83 c3 01             	add    ebx,0x1
c00108ee:	83 fb 0f             	cmp    ebx,0xf
c00108f1:	7e ed                	jle    c00108e0 <Phys::allocateDMA(unsigned long)+0x3c>
c00108f3:	83 ec 0c             	sub    esp,0xc
c00108f6:	68 54 c2 02 c0       	push   0xc002c254
c00108fb:	e8 98 ff ff ff       	call   c0010898 <KePanic(char const*)>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	31 c0                	xor    eax,eax
c0010905:	83 c4 1c             	add    esp,0x1c
c0010908:	5b                   	pop    ebx
c0010909:	5e                   	pop    esi
c001090a:	5f                   	pop    edi
c001090b:	5d                   	pop    ebp
c001090c:	c3                   	ret    
c001090d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010911:	89 f2                	mov    edx,esi
c0010913:	c1 fa 04             	sar    edx,0x4
c0010916:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001091a:	01 f1                	add    ecx,esi
c001091c:	8d 51 0e             	lea    edx,[ecx+0xe]
c001091f:	83 e9 01             	sub    ecx,0x1
c0010922:	0f 48 ca             	cmovs  ecx,edx
c0010925:	c1 f9 04             	sar    ecx,0x4
c0010928:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001092c:	74 06                	je     c0010934 <Phys::allocateDMA(unsigned long)+0x90>
c001092e:	89 eb                	mov    ebx,ebp
c0010930:	31 c0                	xor    eax,eax
c0010932:	eb b7                	jmp    c00108eb <Phys::allocateDMA(unsigned long)+0x47>
c0010934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010938:	85 d2                	test   edx,edx
c001093a:	74 17                	je     c0010953 <Phys::allocateDMA(unsigned long)+0xaf>
c001093c:	8d 96 80 71 03 c0    	lea    edx,[esi-0x3ffc8e80]
c0010942:	8d 84 06 81 71 03 c0 	lea    eax,[esi+eax*1-0x3ffc8e7f]
c0010949:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001094c:	83 c2 01             	add    edx,0x1
c001094f:	39 d0                	cmp    eax,edx
c0010951:	75 f6                	jne    c0010949 <Phys::allocateDMA(unsigned long)+0xa5>
c0010953:	8b 15 78 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037178
c0010959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001095d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010961:	01 c2                	add    edx,eax
c0010963:	89 15 78 71 03 c0    	mov    DWORD PTR ds:0xc0037178,edx
c0010969:	85 c9                	test   ecx,ecx
c001096b:	74 17                	je     c0010984 <Phys::allocateDMA(unsigned long)+0xe0>
c001096d:	83 ec 0c             	sub    esp,0xc
c0010970:	68 54 c2 02 c0       	push   0xc002c254
c0010975:	e8 1e ff ff ff       	call   c0010898 <KePanic(char const*)>
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	89 f8                	mov    eax,edi
c001097f:	e9 54 ff ff ff       	jmp    c00108d8 <Phys::allocateDMA(unsigned long)+0x34>
c0010984:	c1 e6 0c             	shl    esi,0xc
c0010987:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c001098d:	e9 73 ff ff ff       	jmp    c0010905 <Phys::allocateDMA(unsigned long)+0x61>

c0010992 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010996:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001099c:	a1 78 71 03 c0       	mov    eax,ds:0xc0037178
c00109a1:	c1 ea 0c             	shr    edx,0xc
c00109a4:	29 d0                	sub    eax,edx
c00109a6:	a3 78 71 03 c0       	mov    ds:0xc0037178,eax
c00109ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109af:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00109b4:	c1 e8 0c             	shr    eax,0xc
c00109b7:	85 d2                	test   edx,edx
c00109b9:	74 11                	je     c00109cc <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00109bb:	05 80 71 03 c0       	add    eax,0xc0037180
c00109c0:	01 c2                	add    edx,eax
c00109c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00109c5:	83 c0 01             	add    eax,0x1
c00109c8:	39 d0                	cmp    eax,edx
c00109ca:	75 f6                	jne    c00109c2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00109cc:	c3                   	ret    

c00109cd <Phys::setPageState(unsigned long, bool)>:
c00109cd:	57                   	push   edi
c00109ce:	56                   	push   esi
c00109cf:	8b 35 58 0b 03 c0    	mov    esi,DWORD PTR ds:0xc0030b58
c00109d5:	53                   	push   ebx
c00109d6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00109db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00109df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e3:	89 ca                	mov    edx,ecx
c00109e5:	83 e1 07             	and    ecx,0x7
c00109e8:	c1 ea 03             	shr    edx,0x3
c00109eb:	0f b6 c0             	movzx  eax,al
c00109ee:	d3 c3                	rol    ebx,cl
c00109f0:	01 d6                	add    esi,edx
c00109f2:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00109f5:	d3 e0                	shl    eax,cl
c00109f7:	21 fb                	and    ebx,edi
c00109f9:	88 1e                	mov    BYTE PTR [esi],bl
c00109fb:	8b 1d 58 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b58
c0010a01:	01 da                	add    edx,ebx
c0010a03:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010a05:	09 c8                	or     eax,ecx
c0010a07:	88 02                	mov    BYTE PTR [edx],al
c0010a09:	5b                   	pop    ebx
c0010a0a:	5e                   	pop    esi
c0010a0b:	5f                   	pop    edi
c0010a0c:	c3                   	ret    

c0010a0d <Phys::getPageState(unsigned long)>:
c0010a0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010a11:	8b 15 58 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b58
c0010a17:	89 c8                	mov    eax,ecx
c0010a19:	83 e1 07             	and    ecx,0x7
c0010a1c:	c1 e8 03             	shr    eax,0x3
c0010a1f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010a23:	d3 f8                	sar    eax,cl
c0010a25:	83 e0 01             	and    eax,0x1
c0010a28:	c3                   	ret    

c0010a29 <Phys::freePage(unsigned long)>:
c0010a29:	53                   	push   ebx
c0010a2a:	83 ec 08             	sub    esp,0x8
c0010a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a31:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010a3d:	76 41                	jbe    c0010a80 <Phys::freePage(unsigned long)+0x57>
c0010a3f:	c1 e8 0c             	shr    eax,0xc
c0010a42:	50                   	push   eax
c0010a43:	89 c3                	mov    ebx,eax
c0010a45:	e8 c3 ff ff ff       	call   c0010a0d <Phys::getPageState(unsigned long)>
c0010a4a:	5a                   	pop    edx
c0010a4b:	84 c0                	test   al,al
c0010a4d:	74 20                	je     c0010a6f <Phys::freePage(unsigned long)+0x46>
c0010a4f:	a1 78 71 03 c0       	mov    eax,ds:0xc0037178
c0010a54:	83 ec 08             	sub    esp,0x8
c0010a57:	6a 00                	push   0x0
c0010a59:	53                   	push   ebx
c0010a5a:	83 e8 01             	sub    eax,0x1
c0010a5d:	a3 78 71 03 c0       	mov    ds:0xc0037178,eax
c0010a62:	e8 66 ff ff ff       	call   c00109cd <Phys::setPageState(unsigned long, bool)>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	83 c4 08             	add    esp,0x8
c0010a6d:	5b                   	pop    ebx
c0010a6e:	c3                   	ret    
c0010a6f:	c7 44 24 10 66 c2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c266
c0010a77:	83 c4 08             	add    esp,0x8
c0010a7a:	5b                   	pop    ebx
c0010a7b:	e9 18 fe ff ff       	jmp    c0010898 <KePanic(char const*)>
c0010a80:	68 00 10 00 00       	push   0x1000
c0010a85:	50                   	push   eax
c0010a86:	e8 07 ff ff ff       	call   c0010992 <Phys::freeDMA(unsigned long, unsigned long)>
c0010a8b:	59                   	pop    ecx
c0010a8c:	5b                   	pop    ebx
c0010a8d:	83 c4 08             	add    esp,0x8
c0010a90:	5b                   	pop    ebx
c0010a91:	c3                   	ret    

c0010a92 <Phys::allocatePage()>:
c0010a92:	56                   	push   esi
c0010a93:	53                   	push   ebx
c0010a94:	83 ec 14             	sub    esp,0x14
c0010a97:	8b 35 6c 71 03 c0    	mov    esi,DWORD PTR ds:0xc003716c
c0010a9d:	89 f3                	mov    ebx,esi
c0010a9f:	eb 18                	jmp    c0010ab9 <Phys::allocatePage()+0x27>
c0010aa1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010aa7:	75 0c                	jne    c0010ab5 <Phys::allocatePage()+0x23>
c0010aa9:	c7 05 6c 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003716c,0x0
c0010ab3:	31 db                	xor    ebx,ebx
c0010ab5:	39 de                	cmp    esi,ebx
c0010ab7:	74 5b                	je     c0010b14 <Phys::allocatePage()+0x82>
c0010ab9:	53                   	push   ebx
c0010aba:	e8 4e ff ff ff       	call   c0010a0d <Phys::getPageState(unsigned long)>
c0010abf:	59                   	pop    ecx
c0010ac0:	84 c0                	test   al,al
c0010ac2:	74 29                	je     c0010aed <Phys::allocatePage()+0x5b>
c0010ac4:	83 c3 01             	add    ebx,0x1
c0010ac7:	89 1d 6c 71 03 c0    	mov    DWORD PTR ds:0xc003716c,ebx
c0010acd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010ad3:	76 cc                	jbe    c0010aa1 <Phys::allocatePage()+0xf>
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	68 7c c2 02 c0       	push   0xc002c27c
c0010add:	e8 b6 fd ff ff       	call   c0010898 <KePanic(char const*)>
c0010ae2:	8b 1d 6c 71 03 c0    	mov    ebx,DWORD PTR ds:0xc003716c
c0010ae8:	83 c4 10             	add    esp,0x10
c0010aeb:	eb b4                	jmp    c0010aa1 <Phys::allocatePage()+0xf>
c0010aed:	6a 01                	push   0x1
c0010aef:	53                   	push   ebx
c0010af0:	e8 d8 fe ff ff       	call   c00109cd <Phys::setPageState(unsigned long, bool)>
c0010af5:	8b 1d 78 71 03 c0    	mov    ebx,DWORD PTR ds:0xc0037178
c0010afb:	5e                   	pop    esi
c0010afc:	a1 6c 71 03 c0       	mov    eax,ds:0xc003716c
c0010b01:	5a                   	pop    edx
c0010b02:	83 c3 01             	add    ebx,0x1
c0010b05:	89 1d 78 71 03 c0    	mov    DWORD PTR ds:0xc0037178,ebx
c0010b0b:	c1 e0 0c             	shl    eax,0xc
c0010b0e:	83 c4 14             	add    esp,0x14
c0010b11:	5b                   	pop    ebx
c0010b12:	5e                   	pop    esi
c0010b13:	c3                   	ret    
c0010b14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b19:	83 ec 0c             	sub    esp,0xc
c0010b1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010b1f:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010b25:	51                   	push   ecx
c0010b26:	e8 85 43 00 00       	call   c0014eb0 <VAS::scanForEviction()>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	75 1b                	jne    c0010b4d <Phys::allocatePage()+0xbb>
c0010b32:	83 ec 0c             	sub    esp,0xc
c0010b35:	68 c4 c2 02 c0       	push   0xc002c2c4
c0010b3a:	e8 59 fd ff ff       	call   c0010898 <KePanic(char const*)>
c0010b3f:	8b 1d 6c 71 03 c0    	mov    ebx,DWORD PTR ds:0xc003716c
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	e9 6c ff ff ff       	jmp    c0010ab9 <Phys::allocatePage()+0x27>
c0010b4d:	8b 15 78 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037178
c0010b53:	83 ec 08             	sub    esp,0x8
c0010b56:	6a 01                	push   0x1
c0010b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b5c:	83 c2 01             	add    edx,0x1
c0010b5f:	89 15 78 71 03 c0    	mov    DWORD PTR ds:0xc0037178,edx
c0010b65:	89 c2                	mov    edx,eax
c0010b67:	c1 ea 0c             	shr    edx,0xc
c0010b6a:	52                   	push   edx
c0010b6b:	e8 5d fe ff ff       	call   c00109cd <Phys::setPageState(unsigned long, bool)>
c0010b70:	83 c4 10             	add    esp,0x10
c0010b73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b77:	eb 95                	jmp    c0010b0e <Phys::allocatePage()+0x7c>

c0010b79 <Phys::allocateContiguousPages(int)>:
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010b80:	fa                   	cli    
c0010b81:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0010b87:	83 ec 0c             	sub    esp,0xc
c0010b8a:	31 db                	xor    ebx,ebx
c0010b8c:	68 f4 c2 02 c0       	push   0xc002c2f4
c0010b91:	83 c2 01             	add    edx,0x1
c0010b94:	89 15 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,edx
c0010b9a:	e8 c7 63 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	85 db                	test   ebx,ebx
c0010ba4:	75 11                	jne    c0010bb7 <Phys::allocateContiguousPages(int)+0x3e>
c0010ba6:	e8 e7 fe ff ff       	call   c0010a92 <Phys::allocatePage()>
c0010bab:	83 ff 01             	cmp    edi,0x1
c0010bae:	89 c6                	mov    esi,eax
c0010bb0:	74 21                	je     c0010bd3 <Phys::allocateContiguousPages(int)+0x5a>
c0010bb2:	bb 01 00 00 00       	mov    ebx,0x1
c0010bb7:	e8 d6 fe ff ff       	call   c0010a92 <Phys::allocatePage()>
c0010bbc:	89 da                	mov    edx,ebx
c0010bbe:	c1 e2 0c             	shl    edx,0xc
c0010bc1:	01 f2                	add    edx,esi
c0010bc3:	39 c2                	cmp    edx,eax
c0010bc5:	74 24                	je     c0010beb <Phys::allocateContiguousPages(int)+0x72>
c0010bc7:	83 ff 01             	cmp    edi,0x1
c0010bca:	bb 01 00 00 00       	mov    ebx,0x1
c0010bcf:	89 c6                	mov    esi,eax
c0010bd1:	75 e4                	jne    c0010bb7 <Phys::allocateContiguousPages(int)+0x3e>
c0010bd3:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0010bdb:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010be0:	85 c0                	test   eax,eax
c0010be2:	75 01                	jne    c0010be5 <Phys::allocateContiguousPages(int)+0x6c>
c0010be4:	fb                   	sti    
c0010be5:	5b                   	pop    ebx
c0010be6:	89 f0                	mov    eax,esi
c0010be8:	5e                   	pop    esi
c0010be9:	5f                   	pop    edi
c0010bea:	c3                   	ret    
c0010beb:	83 c3 01             	add    ebx,0x1
c0010bee:	39 fb                	cmp    ebx,edi
c0010bf0:	75 b0                	jne    c0010ba2 <Phys::allocateContiguousPages(int)+0x29>
c0010bf2:	eb df                	jmp    c0010bd3 <Phys::allocateContiguousPages(int)+0x5a>

c0010bf4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010bf4:	56                   	push   esi
c0010bf5:	53                   	push   ebx
c0010bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfa:	39 1d 70 71 03 c0    	cmp    DWORD PTR ds:0xc0037170,ebx
c0010c00:	73 06                	jae    c0010c08 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010c02:	89 1d 70 71 03 c0    	mov    DWORD PTR ds:0xc0037170,ebx
c0010c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c0c:	c1 eb 0c             	shr    ebx,0xc
c0010c0f:	c1 e8 0c             	shr    eax,0xc
c0010c12:	39 d8                	cmp    eax,ebx
c0010c14:	73 13                	jae    c0010c29 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010c16:	6a 00                	push   0x0
c0010c18:	50                   	push   eax
c0010c19:	8d 70 01             	lea    esi,[eax+0x1]
c0010c1c:	e8 ac fd ff ff       	call   c00109cd <Phys::setPageState(unsigned long, bool)>
c0010c21:	39 f3                	cmp    ebx,esi
c0010c23:	89 f0                	mov    eax,esi
c0010c25:	5a                   	pop    edx
c0010c26:	59                   	pop    ecx
c0010c27:	75 ed                	jne    c0010c16 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010c29:	5b                   	pop    ebx
c0010c2a:	5e                   	pop    esi
c0010c2b:	c3                   	ret    

c0010c2c <Phys::physicalMemorySetup(unsigned int)>:
c0010c2c:	55                   	push   ebp
c0010c2d:	57                   	push   edi
c0010c2e:	56                   	push   esi
c0010c2f:	53                   	push   ebx
c0010c30:	83 ec 40             	sub    esp,0x40
c0010c33:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010c37:	6a 10                	push   0x10
c0010c39:	6a 00                	push   0x0
c0010c3b:	68 80 71 03 c0       	push   0xc0037180
c0010c40:	e8 ab f8 fe ff       	call   c00004f0 <memset>
c0010c45:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010c4b:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010c51:	31 db                	xor    ebx,ebx
c0010c53:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010c57:	5a                   	pop    edx
c0010c58:	59                   	pop    ecx
c0010c59:	50                   	push   eax
c0010c5a:	68 81 c2 02 c0       	push   0xc002c281
c0010c5f:	e8 02 63 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	83 ec 08             	sub    esp,0x8
c0010c6a:	6a 01                	push   0x1
c0010c6c:	53                   	push   ebx
c0010c6d:	83 c3 01             	add    ebx,0x1
c0010c70:	e8 58 fd ff ff       	call   c00109cd <Phys::setPageState(unsigned long, bool)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010c7e:	75 e7                	jne    c0010c67 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010c80:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010c87:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010c8e:	c1 e0 08             	shl    eax,0x8
c0010c91:	09 c2                	or     edx,eax
c0010c93:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010c97:	0f 84 ab 01 00 00    	je     c0010e48 <Phys::physicalMemorySetup(unsigned int)+0x21c>
c0010c9d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ca5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010caa:	e9 82 00 00 00       	jmp    c0010d31 <Phys::physicalMemorySetup(unsigned int)+0x105>
c0010caf:	ba 00 00 08 00       	mov    edx,0x80000
c0010cb4:	89 c1                	mov    ecx,eax
c0010cb6:	39 f2                	cmp    edx,esi
c0010cb8:	19 f9                	sbb    ecx,edi
c0010cba:	0f 82 c4 00 00 00    	jb     c0010d84 <Phys::physicalMemorySetup(unsigned int)+0x158>
c0010cc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010cc4:	89 c5                	mov    ebp,eax
c0010cc6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010cca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cce:	19 cd                	sbb    ebp,ecx
c0010cd0:	0f 83 b3 00 00 00    	jae    c0010d89 <Phys::physicalMemorySetup(unsigned int)+0x15d>
c0010cd6:	89 d6                	mov    esi,edx
c0010cd8:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010cdd:	39 f2                	cmp    edx,esi
c0010cdf:	89 cf                	mov    edi,ecx
c0010ce1:	19 c8                	sbb    eax,ecx
c0010ce3:	73 07                	jae    c0010cec <Phys::physicalMemorySetup(unsigned int)+0xc0>
c0010ce5:	be 00 00 0a 00       	mov    esi,0xa0000
c0010cea:	31 ff                	xor    edi,edi
c0010cec:	89 f2                	mov    edx,esi
c0010cee:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010cf3:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0010cf9:	89 f9                	mov    ecx,edi
c0010cfb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010cff:	83 d1 ff             	adc    ecx,0xffffffff
c0010d02:	39 d0                	cmp    eax,edx
c0010d04:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0010d08:	b8 00 00 00 00       	mov    eax,0x0
c0010d0d:	19 c8                	sbb    eax,ecx
c0010d0f:	0f 82 c8 00 00 00    	jb     c0010ddd <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c0010d15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d19:	83 c3 18             	add    ebx,0x18
c0010d1c:	83 c0 01             	add    eax,0x1
c0010d1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d27:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0010d2b:	0f 84 0f 01 00 00    	je     c0010e40 <Phys::physicalMemorySetup(unsigned int)+0x214>
c0010d31:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010d33:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010d39:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010d3c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010d40:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010d43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d47:	01 f0                	add    eax,esi
c0010d49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010d4d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010d51:	55                   	push   ebp
c0010d52:	11 fa                	adc    edx,edi
c0010d54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d60:	50                   	push   eax
c0010d61:	56                   	push   esi
c0010d62:	68 54 c3 02 c0       	push   0xc002c354
c0010d67:	e8 fa 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	09 f8                	or     eax,edi
c0010d75:	0f 85 c5 00 00 00    	jne    c0010e40 <Phys::physicalMemorySetup(unsigned int)+0x214>
c0010d7b:	83 fd 01             	cmp    ebp,0x1
c0010d7e:	0f 84 2b ff ff ff    	je     c0010caf <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010d84:	83 fd 01             	cmp    ebp,0x1
c0010d87:	75 8c                	jne    c0010d15 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010d89:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010d8d:	31 d2                	xor    edx,edx
c0010d8f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010d93:	89 c8                	mov    eax,ecx
c0010d95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d99:	19 d1                	sbb    ecx,edx
c0010d9b:	0f 82 74 ff ff ff    	jb     c0010d15 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010da1:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010da6:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0010daa:	b9 00 00 00 00       	mov    ecx,0x0
c0010daf:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010db3:	0f 83 5c ff ff ff    	jae    c0010d15 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010db9:	39 c6                	cmp    esi,eax
c0010dbb:	19 d7                	sbb    edi,edx
c0010dbd:	73 2a                	jae    c0010de9 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010dbf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010dc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010dc7:	29 c7                	sub    edi,eax
c0010dc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010dcd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010dd1:	19 d5                	sbb    ebp,edx
c0010dd3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010dd7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010ddb:	eb 0c                	jmp    c0010de9 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010ddd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010de1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010de9:	83 ec 04             	sub    esp,0x4
c0010dec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010df0:	56                   	push   esi
c0010df1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010df5:	57                   	push   edi
c0010df6:	68 78 c3 02 c0       	push   0xc002c378
c0010dfb:	e8 66 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e00:	5a                   	pop    edx
c0010e01:	59                   	pop    ecx
c0010e02:	56                   	push   esi
c0010e03:	57                   	push   edi
c0010e04:	e8 eb fd ff ff       	call   c0010bf4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010e09:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010e0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010e11:	83 c4 0c             	add    esp,0xc
c0010e14:	8b 3d 7c 71 03 c0    	mov    edi,DWORD PTR ds:0xc003717c
c0010e1a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010e1e:	01 f8                	add    eax,edi
c0010e20:	a3 7c 71 03 c0       	mov    ds:0xc003717c,eax
c0010e25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010e2c:	52                   	push   edx
c0010e2d:	50                   	push   eax
c0010e2e:	68 a7 c2 02 c0       	push   0xc002c2a7
c0010e33:	e8 2e 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e38:	83 c4 10             	add    esp,0x10
c0010e3b:	e9 d5 fe ff ff       	jmp    c0010d15 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010e40:	83 c4 3c             	add    esp,0x3c
c0010e43:	5b                   	pop    ebx
c0010e44:	5e                   	pop    esi
c0010e45:	5f                   	pop    edi
c0010e46:	5d                   	pop    ebp
c0010e47:	c3                   	ret    
c0010e48:	c7 44 24 50 99 c2 02 c0 	mov    DWORD PTR [esp+0x50],0xc002c299
c0010e50:	83 c4 3c             	add    esp,0x3c
c0010e53:	5b                   	pop    ebx
c0010e54:	5e                   	pop    esi
c0010e55:	5f                   	pop    edi
c0010e56:	5d                   	pop    ebp
c0010e57:	e9 3c fa ff ff       	jmp    c0010898 <KePanic(char const*)>

c0010e5c <Pipe::isAtty()>:
c0010e5c:	31 c0                	xor    eax,eax
c0010e5e:	c3                   	ret    
c0010e5f:	90                   	nop

c0010e60 <Pipe::~Pipe()>:
c0010e60:	83 ec 0c             	sub    esp,0xc
c0010e63:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c0010e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6c:	89 10                	mov    DWORD PTR [eax],edx
c0010e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e72:	83 ec 0c             	sub    esp,0xc
c0010e75:	50                   	push   eax
c0010e76:	e8 f7 2c 00 00       	call   c0013b72 <UnixFile::~UnixFile()>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	90                   	nop
c0010e7f:	83 c4 0c             	add    esp,0xc
c0010e82:	c3                   	ret    
c0010e83:	90                   	nop

c0010e84 <Pipe::~Pipe()>:
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	83 ec 0c             	sub    esp,0xc
c0010e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e8e:	e8 cd ff ff ff       	call   c0010e60 <Pipe::~Pipe()>
c0010e93:	83 c4 10             	add    esp,0x10
c0010e96:	83 ec 08             	sub    esp,0x8
c0010e99:	6a 20                	push   0x20
c0010e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9f:	e8 98 d1 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0010ea4:	83 c4 10             	add    esp,0x10
c0010ea7:	83 c4 0c             	add    esp,0xc
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <Pipe::write(unsigned long long, void*, int*)>:
c0010eac:	55                   	push   ebp
c0010ead:	57                   	push   edi
c0010eae:	56                   	push   esi
c0010eaf:	53                   	push   ebx
c0010eb0:	83 ec 1c             	sub    esp,0x1c
c0010eb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010eb7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ebf:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010ec2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010ec6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010ec9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010ed0:	89 d8                	mov    eax,ebx
c0010ed2:	89 d6                	mov    esi,edx
c0010ed4:	89 d7                	mov    edi,edx
c0010ed6:	c1 ff 1f             	sar    edi,0x1f
c0010ed9:	03 34 24             	add    esi,DWORD PTR [esp]
c0010edc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010ee0:	c1 f8 1f             	sar    eax,0x1f
c0010ee3:	39 f3                	cmp    ebx,esi
c0010ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010eed:	19 f8                	sbb    eax,edi
c0010eef:	b8 01 00 00 00       	mov    eax,0x1
c0010ef4:	72 72                	jb     c0010f68 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010ef6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010ef9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010efd:	01 d0                	add    eax,edx
c0010eff:	99                   	cdq    
c0010f00:	f7 fb                	idiv   ebx
c0010f02:	89 d8                	mov    eax,ebx
c0010f04:	29 d0                	sub    eax,edx
c0010f06:	89 d6                	mov    esi,edx
c0010f08:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010f0b:	89 c3                	mov    ebx,eax
c0010f0d:	c1 fb 1f             	sar    ebx,0x1f
c0010f10:	39 c2                	cmp    edx,eax
c0010f12:	19 df                	sbb    edi,ebx
c0010f14:	bb 00 00 00 00       	mov    ebx,0x0
c0010f19:	72 04                	jb     c0010f1f <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010f1b:	89 d3                	mov    ebx,edx
c0010f1d:	29 c3                	sub    ebx,eax
c0010f1f:	89 d0                	mov    eax,edx
c0010f21:	29 d8                	sub    eax,ebx
c0010f23:	74 0d                	je     c0010f32 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010f25:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010f28:	89 c1                	mov    ecx,eax
c0010f2a:	01 f7                	add    edi,esi
c0010f2c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010f30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f32:	85 db                	test   ebx,ebx
c0010f34:	74 0d                	je     c0010f43 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010f36:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010f3a:	89 d9                	mov    ecx,ebx
c0010f3c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010f3f:	89 c6                	mov    esi,eax
c0010f41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f43:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010f46:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010f4b:	75 10                	jne    c0010f5d <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010f4d:	83 ec 0c             	sub    esp,0xc
c0010f50:	68 a1 c3 02 c0       	push   0xc002c3a1
c0010f55:	e8 3e f9 ff ff       	call   c0010898 <KePanic(char const*)>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f61:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010f64:	89 08                	mov    DWORD PTR [eax],ecx
c0010f66:	31 c0                	xor    eax,eax
c0010f68:	83 c4 1c             	add    esp,0x1c
c0010f6b:	5b                   	pop    ebx
c0010f6c:	5e                   	pop    esi
c0010f6d:	5f                   	pop    edi
c0010f6e:	5d                   	pop    ebp
c0010f6f:	c3                   	ret    

c0010f70 <Pipe::read(unsigned long long, void*, int*)>:
c0010f70:	55                   	push   ebp
c0010f71:	57                   	push   edi
c0010f72:	56                   	push   esi
c0010f73:	53                   	push   ebx
c0010f74:	83 ec 1c             	sub    esp,0x1c
c0010f77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010f7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010f83:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010f86:	89 c8                	mov    eax,ecx
c0010f88:	99                   	cdq    
c0010f89:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010f8d:	74 27                	je     c0010fb6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010f8f:	39 f9                	cmp    ecx,edi
c0010f91:	89 d1                	mov    ecx,edx
c0010f93:	19 f1                	sbb    ecx,esi
c0010f95:	73 1f                	jae    c0010fb6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010f97:	fa                   	cli    
c0010f98:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0010f9e:	e8 7d 64 00 00       	call   c0017420 <schedule()>
c0010fa3:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0010faa:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0010fb1:	75 d0                	jne    c0010f83 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010fb3:	fb                   	sti    
c0010fb4:	eb cd                	jmp    c0010f83 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010fb6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010fba:	39 f8                	cmp    eax,edi
c0010fbc:	89 d1                	mov    ecx,edx
c0010fbe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010fc2:	19 f1                	sbb    ecx,esi
c0010fc4:	73 08                	jae    c0010fce <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fce:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010fd1:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010fd4:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010fd8:	29 f7                	sub    edi,esi
c0010fda:	89 f8                	mov    eax,edi
c0010fdc:	99                   	cdq    
c0010fdd:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010fe1:	89 d0                	mov    eax,edx
c0010fe3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fe7:	19 c2                	sbb    edx,eax
c0010fe9:	89 f8                	mov    eax,edi
c0010feb:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010ff0:	89 ea                	mov    edx,ebp
c0010ff2:	29 c2                	sub    edx,eax
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	74 0b                	je     c0011003 <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010ff8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ffb:	89 c1                	mov    ecx,eax
c0010ffd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0011001:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011003:	85 d2                	test   edx,edx
c0011005:	74 0d                	je     c0011014 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0011007:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001100b:	89 d1                	mov    ecx,edx
c001100d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0011010:	89 c7                	mov    edi,eax
c0011012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011014:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011017:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001101a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001101d:	99                   	cdq    
c001101e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011022:	89 f7                	mov    edi,esi
c0011024:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0011028:	c1 ff 1f             	sar    edi,0x1f
c001102b:	57                   	push   edi
c001102c:	56                   	push   esi
c001102d:	52                   	push   edx
c001102e:	50                   	push   eax
c001102f:	e8 e0 3c 01 00       	call   c0024d14 <__umoddi3>
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001103c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001103f:	75 10                	jne    c0011051 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0011041:	83 ec 0c             	sub    esp,0xc
c0011044:	68 be c3 02 c0       	push   0xc002c3be
c0011049:	e8 4a f8 ff ff       	call   c0010898 <KePanic(char const*)>
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011059:	89 10                	mov    DWORD PTR [eax],edx
c001105b:	83 c4 1c             	add    esp,0x1c
c001105e:	31 c0                	xor    eax,eax
c0011060:	5b                   	pop    ebx
c0011061:	5e                   	pop    esi
c0011062:	5f                   	pop    edi
c0011063:	5d                   	pop    ebp
c0011064:	c3                   	ret    
c0011065:	90                   	nop

c0011066 <Pipe::Pipe(int)>:
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106d:	83 ec 08             	sub    esp,0x8
c0011070:	6a 00                	push   0x0
c0011072:	50                   	push   eax
c0011073:	e8 14 29 00 00       	call   c001398c <UnixFile::UnixFile(int)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	89 10                	mov    DWORD PTR [eax],edx
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001108e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011095:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001109c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00110a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110ab:	83 ec 0c             	sub    esp,0xc
c00110ae:	50                   	push   eax
c00110af:	e8 90 f3 ff ff       	call   c0010444 <malloc>
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	89 c2                	mov    edx,eax
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00110c8:	90                   	nop
c00110c9:	83 c4 0c             	add    esp,0xc
c00110cc:	c3                   	ret    

c00110cd <KePowerThread(void*)>:
c00110cd:	83 ec 0c             	sub    esp,0xc
c00110d0:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c00110d7:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c00110de:	75 01                	jne    c00110e1 <KePowerThread(void*)+0x14>
c00110e0:	fb                   	sti    
c00110e1:	50                   	push   eax
c00110e2:	50                   	push   eax
c00110e3:	6a 00                	push   0x0
c00110e5:	6a 0a                	push   0xa
c00110e7:	c6 05 ac 71 03 c0 00 	mov    BYTE PTR ds:0xc00371ac,0x0
c00110ee:	e8 39 65 00 00       	call   c001762c <sleep(unsigned long long)>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	83 05 e4 71 03 c0 0a 	add    DWORD PTR ds:0xc00371e4,0xa
c00110fd:	eb e2                	jmp    c00110e1 <KePowerThread(void*)+0x14>

c00110ff <KeChangePowerSettings(PowerSettings)>:
c00110ff:	57                   	push   edi
c0011100:	b9 09 00 00 00       	mov    ecx,0x9
c0011105:	56                   	push   esi
c0011106:	bf c0 71 03 c0       	mov    edi,0xc00371c0
c001110b:	fc                   	cld    
c001110c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011110:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011112:	5e                   	pop    esi
c0011113:	5f                   	pop    edi
c0011114:	c3                   	ret    

c0011115 <KeUserIOReceived()>:
c0011115:	c7 05 e4 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371e4,0x0
c001111f:	c3                   	ret    

c0011120 <KeSetupPowerManager()>:
c0011120:	83 ec 0c             	sub    esp,0xc
c0011123:	68 f0 00 00 00       	push   0xf0
c0011128:	6a 00                	push   0x0
c001112a:	68 cd 10 01 c0       	push   0xc00110cd
c001112f:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0011135:	c7 05 e4 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371e4,0x0
c001113f:	c6 05 ac 71 03 c0 00 	mov    BYTE PTR ds:0xc00371ac,0x0
c0011146:	e8 21 60 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c001114b:	c7 05 c0 71 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00371c0,0x2
c0011155:	c7 05 c4 71 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00371c4,0x1
c001115f:	c7 05 c8 71 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00371c8,0x3
c0011169:	c7 05 cc 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371cc,0x0
c0011173:	c7 05 d8 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371d8,0x0
c001117d:	c7 05 d0 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371d0,0x0
c0011187:	c7 05 dc 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371dc,0x0
c0011191:	c7 05 d4 71 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00371d4,0x3c
c001119b:	c7 05 e0 71 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00371e0,0x3c
c00111a5:	83 c4 1c             	add    esp,0x1c
c00111a8:	c3                   	ret    

c00111a9 <KePrepareShutdown()>:
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	e8 57 cd ff ff       	call   c000df08 <KeExecuteAtexit()>
c00111b1:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00111b6:	83 ec 0c             	sub    esp,0xc
c00111b9:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00111bf:	e8 f2 97 ff ff       	call   c000a9b6 <Device::closeAll()>
c00111c4:	83 c4 1c             	add    esp,0x1c
c00111c7:	c3                   	ret    

c00111c8 <KeRegisterShutdownHandler(void (*)())>:
c00111c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111cc:	a3 a8 71 03 c0       	mov    ds:0xc00371a8,eax
c00111d1:	c3                   	ret    

c00111d2 <KeRegisterRestartHandler(void (*)())>:
c00111d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d6:	a3 a4 71 03 c0       	mov    ds:0xc00371a4,eax
c00111db:	c3                   	ret    

c00111dc <KeRegisterSleepHandler(void (*)())>:
c00111dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111e0:	a3 a0 71 03 c0       	mov    ds:0xc00371a0,eax
c00111e5:	c3                   	ret    

c00111e6 <KeShutdown()>:
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	e8 bb ff ff ff       	call   c00111a9 <KePrepareShutdown()>
c00111ee:	a1 a8 71 03 c0       	mov    eax,ds:0xc00371a8
c00111f3:	85 c0                	test   eax,eax
c00111f5:	74 04                	je     c00111fb <KeShutdown()+0x15>
c00111f7:	ff d0                	call   eax
c00111f9:	eb 10                	jmp    c001120b <KeShutdown()+0x25>
c00111fb:	83 ec 0c             	sub    esp,0xc
c00111fe:	68 f8 c3 02 c0       	push   0xc002c3f8
c0011203:	e8 90 f6 ff ff       	call   c0010898 <KePanic(char const*)>
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	83 ec 0c             	sub    esp,0xc
c001120e:	68 19 c4 02 c0       	push   0xc002c419
c0011213:	e8 80 f6 ff ff       	call   c0010898 <KePanic(char const*)>
c0011218:	83 c4 1c             	add    esp,0x1c
c001121b:	c3                   	ret    

c001121c <KeSleep()>:
c001121c:	a1 a0 71 03 c0       	mov    eax,ds:0xc00371a0
c0011221:	85 c0                	test   eax,eax
c0011223:	74 02                	je     c0011227 <KeSleep()+0xb>
c0011225:	ff e0                	jmp    eax
c0011227:	c3                   	ret    

c0011228 <KeHandlePowerButton()>:
c0011228:	a1 c0 71 03 c0       	mov    eax,ds:0xc00371c0
c001122d:	83 f8 02             	cmp    eax,0x2
c0011230:	75 02                	jne    c0011234 <KeHandlePowerButton()+0xc>
c0011232:	eb b2                	jmp    c00111e6 <KeShutdown()>
c0011234:	48                   	dec    eax
c0011235:	75 02                	jne    c0011239 <KeHandlePowerButton()+0x11>
c0011237:	eb e3                	jmp    c001121c <KeSleep()>
c0011239:	c3                   	ret    

c001123a <KeHandleSleepButton()>:
c001123a:	a1 c4 71 03 c0       	mov    eax,ds:0xc00371c4
c001123f:	83 f8 02             	cmp    eax,0x2
c0011242:	75 02                	jne    c0011246 <KeHandleSleepButton()+0xc>
c0011244:	eb a0                	jmp    c00111e6 <KeShutdown()>
c0011246:	48                   	dec    eax
c0011247:	75 02                	jne    c001124b <KeHandleSleepButton()+0x11>
c0011249:	eb d1                	jmp    c001121c <KeSleep()>
c001124b:	c3                   	ret    

c001124c <KeRestart()>:
c001124c:	83 ec 0c             	sub    esp,0xc
c001124f:	e8 55 ff ff ff       	call   c00111a9 <KePrepareShutdown()>
c0011254:	a1 a4 71 03 c0       	mov    eax,ds:0xc00371a4
c0011259:	85 c0                	test   eax,eax
c001125b:	74 02                	je     c001125f <KeRestart()+0x13>
c001125d:	ff d0                	call   eax
c001125f:	83 ec 0c             	sub    esp,0xc
c0011262:	68 3d c4 02 c0       	push   0xc002c43d
c0011267:	e8 2c f6 ff ff       	call   c0010898 <KePanic(char const*)>
c001126c:	83 c4 1c             	add    esp,0x1c
c001126f:	c3                   	ret    

c0011270 <KeRand()>:
c0011270:	69 05 e8 71 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00371e8,0x2875
c001127a:	69 0d ec 71 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00371ec,0xa2e7b175
c0011284:	53                   	push   ebx
c0011285:	01 c1                	add    ecx,eax
c0011287:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001128c:	f7 25 e8 71 03 c0    	mul    DWORD PTR ds:0xc00371e8
c0011292:	01 ca                	add    edx,ecx
c0011294:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011299:	a3 e8 71 03 c0       	mov    ds:0xc00371e8,eax
c001129e:	83 d2 00             	adc    edx,0x0
c00112a1:	0f b7 da             	movzx  ebx,dx
c00112a4:	89 1d ec 71 03 c0    	mov    DWORD PTR ds:0xc00371ec,ebx
c00112aa:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00112ae:	5b                   	pop    ebx
c00112af:	c3                   	ret    

c00112b0 <KeSeedRand(unsigned int)>:
c00112b0:	53                   	push   ebx
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112b8:	e8 86 a4 00 00       	call   c001b743 <HalGetRand()>
c00112bd:	c7 05 ec 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371ec,0x0
c00112c7:	31 d8                	xor    eax,ebx
c00112c9:	a3 e8 71 03 c0       	mov    ds:0xc00371e8,eax
c00112ce:	e8 9d ff ff ff       	call   c0011270 <KeRand()>
c00112d3:	83 c4 08             	add    esp,0x8
c00112d6:	5b                   	pop    ebx
c00112d7:	eb 97                	jmp    c0011270 <KeRand()>

c00112d9 <KeInitRand()>:
c00112d9:	83 ec 0c             	sub    esp,0xc
c00112dc:	e8 30 a2 00 00       	call   c001b511 <HalQueryPerformanceCounter()>
c00112e1:	0f 20 da             	mov    edx,cr3
c00112e4:	0f 22 da             	mov    cr3,edx
c00112e7:	0f 20 da             	mov    edx,cr3
c00112ea:	0f 22 da             	mov    cr3,edx
c00112ed:	0f 20 da             	mov    edx,cr3
c00112f0:	0f 22 da             	mov    cr3,edx
c00112f3:	0f 20 da             	mov    edx,cr3
c00112f6:	0f 22 da             	mov    cr3,edx
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011301:	50                   	push   eax
c0011302:	e8 a9 ff ff ff       	call   c00112b0 <KeSeedRand(unsigned int)>
c0011307:	83 c4 1c             	add    esp,0x1c
c001130a:	c3                   	ret    
c001130b:	90                   	nop

c001130c <KeResolveCompatibilitySymbol(char*)>:
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	83 ec 08             	sub    esp,0x8
c0011312:	68 4c c4 02 c0       	push   0xc002c44c
c0011317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131b:	e8 60 f4 fe ff       	call   c0000780 <strcmp>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	85 c0                	test   eax,eax
c0011325:	0f 94 c0             	sete   al
c0011328:	0f b6 c0             	movzx  eax,al
c001132b:	85 c0                	test   eax,eax
c001132d:	74 0d                	je     c001133c <KeResolveCompatibilitySymbol(char*)+0x30>
c001132f:	b8 08 71 03 c0       	mov    eax,0xc0037108
c0011334:	e9 3b 02 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011339:	8d 76 00             	lea    esi,[esi+0x0]
c001133c:	83 ec 08             	sub    esp,0x8
c001133f:	68 55 c4 02 c0       	push   0xc002c455
c0011344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011348:	e8 33 f4 fe ff       	call   c0000780 <strcmp>
c001134d:	83 c4 10             	add    esp,0x10
c0011350:	85 c0                	test   eax,eax
c0011352:	0f 94 c0             	sete   al
c0011355:	0f b6 c0             	movzx  eax,al
c0011358:	85 c0                	test   eax,eax
c001135a:	74 0c                	je     c0011368 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001135c:	b8 14 4c 02 c0       	mov    eax,0xc0024c14
c0011361:	e9 0e 02 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011366:	66 90                	xchg   ax,ax
c0011368:	83 ec 08             	sub    esp,0x8
c001136b:	68 5f c4 02 c0       	push   0xc002c45f
c0011370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011374:	e8 07 f4 fe ff       	call   c0000780 <strcmp>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	85 c0                	test   eax,eax
c001137e:	0f 94 c0             	sete   al
c0011381:	0f b6 c0             	movzx  eax,al
c0011384:	85 c0                	test   eax,eax
c0011386:	74 0c                	je     c0011394 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011388:	b8 08 71 03 c0       	mov    eax,0xc0037108
c001138d:	e9 e2 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011392:	66 90                	xchg   ax,ax
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	68 72 c4 02 c0       	push   0xc002c472
c001139c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a0:	e8 db f3 fe ff       	call   c0000780 <strcmp>
c00113a5:	83 c4 10             	add    esp,0x10
c00113a8:	85 c0                	test   eax,eax
c00113aa:	0f 94 c0             	sete   al
c00113ad:	0f b6 c0             	movzx  eax,al
c00113b0:	85 c0                	test   eax,eax
c00113b2:	74 0c                	je     c00113c0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00113b4:	b8 48 49 02 c0       	mov    eax,0xc0024948
c00113b9:	e9 b6 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c00113be:	66 90                	xchg   ax,ax
c00113c0:	83 ec 08             	sub    esp,0x8
c00113c3:	68 7b c4 02 c0       	push   0xc002c47b
c00113c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cc:	e8 af f3 fe ff       	call   c0000780 <strcmp>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	85 c0                	test   eax,eax
c00113d6:	0f 94 c0             	sete   al
c00113d9:	0f b6 c0             	movzx  eax,al
c00113dc:	85 c0                	test   eax,eax
c00113de:	74 0c                	je     c00113ec <KeResolveCompatibilitySymbol(char*)+0xe0>
c00113e0:	b8 98 08 01 c0       	mov    eax,0xc0010898
c00113e5:	e9 8a 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c00113ea:	66 90                	xchg   ax,ax
c00113ec:	83 ec 08             	sub    esp,0x8
c00113ef:	68 8e c4 02 c0       	push   0xc002c48e
c00113f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f8:	e8 83 f3 fe ff       	call   c0000780 <strcmp>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	85 c0                	test   eax,eax
c0011402:	0f 94 c0             	sete   al
c0011405:	0f b6 c0             	movzx  eax,al
c0011408:	85 c0                	test   eax,eax
c001140a:	74 0c                	je     c0011418 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001140c:	b8 91 df 00 c0       	mov    eax,0xc000df91
c0011411:	e9 5e 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011416:	66 90                	xchg   ax,ax
c0011418:	83 ec 08             	sub    esp,0x8
c001141b:	68 ab c4 02 c0       	push   0xc002c4ab
c0011420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011424:	e8 57 f3 fe ff       	call   c0000780 <strcmp>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	85 c0                	test   eax,eax
c001142e:	0f 94 c0             	sete   al
c0011431:	0f b6 c0             	movzx  eax,al
c0011434:	85 c0                	test   eax,eax
c0011436:	74 0c                	je     c0011444 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011438:	b8 14 4d 02 c0       	mov    eax,0xc0024d14
c001143d:	e9 32 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011442:	66 90                	xchg   ax,ax
c0011444:	83 ec 08             	sub    esp,0x8
c0011447:	68 b5 c4 02 c0       	push   0xc002c4b5
c001144c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011450:	e8 2b f3 fe ff       	call   c0000780 <strcmp>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	85 c0                	test   eax,eax
c001145a:	0f 94 c0             	sete   al
c001145d:	0f b6 c0             	movzx  eax,al
c0011460:	85 c0                	test   eax,eax
c0011462:	74 0c                	je     c0011470 <KeResolveCompatibilitySymbol(char*)+0x164>
c0011464:	b8 94 4a 02 c0       	mov    eax,0xc0024a94
c0011469:	e9 06 01 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c001146e:	66 90                	xchg   ax,ax
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	68 be c4 02 c0       	push   0xc002c4be
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	e8 ff f2 fe ff       	call   c0000780 <strcmp>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	85 c0                	test   eax,eax
c0011486:	0f 94 c0             	sete   al
c0011489:	0f b6 c0             	movzx  eax,al
c001148c:	85 c0                	test   eax,eax
c001148e:	74 0c                	je     c001149c <KeResolveCompatibilitySymbol(char*)+0x190>
c0011490:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c0011495:	e9 da 00 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c001149a:	66 90                	xchg   ax,ax
c001149c:	83 ec 08             	sub    esp,0x8
c001149f:	68 d6 c4 02 c0       	push   0xc002c4d6
c00114a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a8:	e8 d3 f2 fe ff       	call   c0000780 <strcmp>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	85 c0                	test   eax,eax
c00114b2:	0f 94 c0             	sete   al
c00114b5:	0f b6 c0             	movzx  eax,al
c00114b8:	85 c0                	test   eax,eax
c00114ba:	74 0c                	je     c00114c8 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00114bc:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c00114c1:	e9 ae 00 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c00114c6:	66 90                	xchg   ax,ax
c00114c8:	83 ec 08             	sub    esp,0x8
c00114cb:	68 e3 c4 02 c0       	push   0xc002c4e3
c00114d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d4:	e8 a7 f2 fe ff       	call   c0000780 <strcmp>
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	85 c0                	test   eax,eax
c00114de:	0f 94 c0             	sete   al
c00114e1:	0f b6 c0             	movzx  eax,al
c00114e4:	85 c0                	test   eax,eax
c00114e6:	74 0c                	je     c00114f4 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00114e8:	b8 0d 71 03 c0       	mov    eax,0xc003710d
c00114ed:	e9 82 00 00 00       	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c00114f2:	66 90                	xchg   ax,ax
c00114f4:	83 ec 08             	sub    esp,0x8
c00114f7:	68 f0 c4 02 c0       	push   0xc002c4f0
c00114fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011500:	e8 7b f2 fe ff       	call   c0000780 <strcmp>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	85 c0                	test   eax,eax
c001150a:	0f 94 c0             	sete   al
c001150d:	0f b6 c0             	movzx  eax,al
c0011510:	85 c0                	test   eax,eax
c0011512:	74 08                	je     c001151c <KeResolveCompatibilitySymbol(char*)+0x210>
c0011514:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c0011519:	eb 59                	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c001151b:	90                   	nop
c001151c:	83 ec 08             	sub    esp,0x8
c001151f:	68 01 c5 02 c0       	push   0xc002c501
c0011524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011528:	e8 53 f2 fe ff       	call   c0000780 <strcmp>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	85 c0                	test   eax,eax
c0011532:	0f 94 c0             	sete   al
c0011535:	0f b6 c0             	movzx  eax,al
c0011538:	85 c0                	test   eax,eax
c001153a:	74 08                	je     c0011544 <KeResolveCompatibilitySymbol(char*)+0x238>
c001153c:	b8 0d 71 03 c0       	mov    eax,0xc003710d
c0011541:	eb 31                	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011543:	90                   	nop
c0011544:	83 ec 08             	sub    esp,0x8
c0011547:	68 12 c5 02 c0       	push   0xc002c512
c001154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011550:	e8 2b f2 fe ff       	call   c0000780 <strcmp>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	85 c0                	test   eax,eax
c001155a:	0f 94 c0             	sete   al
c001155d:	0f b6 c0             	movzx  eax,al
c0011560:	85 c0                	test   eax,eax
c0011562:	74 08                	je     c001156c <KeResolveCompatibilitySymbol(char*)+0x260>
c0011564:	b8 14 7c 01 c0       	mov    eax,0xc0017c14
c0011569:	eb 09                	jmp    c0011574 <KeResolveCompatibilitySymbol(char*)+0x268>
c001156b:	90                   	nop
c001156c:	b8 00 00 00 00       	mov    eax,0x0
c0011571:	8d 76 00             	lea    esi,[esi+0x0]
c0011574:	83 c4 0c             	add    esp,0xc
c0011577:	c3                   	ret    

c0011578 <Semaphore::Semaphore(int)>:
c0011578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011580:	89 10                	mov    DWORD PTR [eax],edx
c0011582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011586:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001158d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011591:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115a3:	90                   	nop
c00115a4:	c3                   	ret    
c00115a5:	90                   	nop
c00115a6:	66 90                	xchg   ax,ax

c00115a8 <Semaphore::tryAcquire()>:
c00115a8:	83 ec 0c             	sub    esp,0xc
c00115ab:	fa                   	cli    
c00115ac:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00115b1:	83 c0 01             	add    eax,0x1
c00115b4:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00115b9:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00115be:	83 c0 01             	add    eax,0x1
c00115c1:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00115c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00115cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00115d3:	39 c2                	cmp    edx,eax
c00115d5:	7d 59                	jge    c0011630 <Semaphore::tryAcquire()+0x88>
c00115d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115de:	8d 50 01             	lea    edx,[eax+0x1]
c00115e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115e8:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00115ed:	83 e8 01             	sub    eax,0x1
c00115f0:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00115f5:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00115fa:	85 c0                	test   eax,eax
c00115fc:	75 1a                	jne    c0011618 <Semaphore::tryAcquire()+0x70>
c00115fe:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0011603:	85 c0                	test   eax,eax
c0011605:	74 11                	je     c0011618 <Semaphore::tryAcquire()+0x70>
c0011607:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011611:	e8 0a 5e 00 00       	call   c0017420 <schedule()>
c0011616:	66 90                	xchg   ax,ax
c0011618:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0011620:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011625:	85 c0                	test   eax,eax
c0011627:	75 03                	jne    c001162c <Semaphore::tryAcquire()+0x84>
c0011629:	fb                   	sti    
c001162a:	66 90                	xchg   ax,ax
c001162c:	b0 01                	mov    al,0x1
c001162e:	eb 48                	jmp    c0011678 <Semaphore::tryAcquire()+0xd0>
c0011630:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011635:	83 e8 01             	sub    eax,0x1
c0011638:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c001163d:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011642:	85 c0                	test   eax,eax
c0011644:	75 1a                	jne    c0011660 <Semaphore::tryAcquire()+0xb8>
c0011646:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c001164b:	85 c0                	test   eax,eax
c001164d:	74 11                	je     c0011660 <Semaphore::tryAcquire()+0xb8>
c001164f:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011659:	e8 c2 5d 00 00       	call   c0017420 <schedule()>
c001165e:	66 90                	xchg   ax,ax
c0011660:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0011668:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001166d:	85 c0                	test   eax,eax
c001166f:	75 03                	jne    c0011674 <Semaphore::tryAcquire()+0xcc>
c0011671:	fb                   	sti    
c0011672:	66 90                	xchg   ax,ax
c0011674:	b0 00                	mov    al,0x0
c0011676:	66 90                	xchg   ax,ax
c0011678:	83 c4 0c             	add    esp,0xc
c001167b:	c3                   	ret    

c001167c <Semaphore::assertLocked(char const*)>:
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	fa                   	cli    
c0011680:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011685:	83 c0 01             	add    eax,0x1
c0011688:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001168d:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011692:	83 c0 01             	add    eax,0x1
c0011695:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c001169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001169e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00116a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00116a7:	39 c2                	cmp    edx,eax
c00116a9:	7d 11                	jge    c00116bc <Semaphore::assertLocked(char const*)+0x40>
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116b2:	e8 e1 f1 ff ff       	call   c0010898 <KePanic(char const*)>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	66 90                	xchg   ax,ax
c00116bc:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00116c1:	83 e8 01             	sub    eax,0x1
c00116c4:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00116c9:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00116ce:	85 c0                	test   eax,eax
c00116d0:	75 1a                	jne    c00116ec <Semaphore::assertLocked(char const*)+0x70>
c00116d2:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c00116d7:	85 c0                	test   eax,eax
c00116d9:	74 11                	je     c00116ec <Semaphore::assertLocked(char const*)+0x70>
c00116db:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c00116e5:	e8 36 5d 00 00       	call   c0017420 <schedule()>
c00116ea:	66 90                	xchg   ax,ax
c00116ec:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00116f4:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00116f9:	85 c0                	test   eax,eax
c00116fb:	75 03                	jne    c0011700 <Semaphore::assertLocked(char const*)+0x84>
c00116fd:	fb                   	sti    
c00116fe:	66 90                	xchg   ax,ax
c0011700:	90                   	nop
c0011701:	83 c4 0c             	add    esp,0xc
c0011704:	c3                   	ret    
c0011705:	90                   	nop
c0011706:	66 90                	xchg   ax,ax

c0011708 <Semaphore::acquire(int)>:
c0011708:	83 ec 1c             	sub    esp,0x1c
c001170b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011710:	0f 84 ae 00 00 00    	je     c00117c4 <Semaphore::acquire(int)+0xbc>
c0011716:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001171e:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0011723:	90                   	nop
c0011724:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0011729:	85 c0                	test   eax,eax
c001172b:	0f 84 87 00 00 00    	je     c00117b8 <Semaphore::acquire(int)+0xb0>
c0011731:	83 ec 0c             	sub    esp,0xc
c0011734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011738:	e8 6b fe ff ff       	call   c00115a8 <Semaphore::tryAcquire()>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	83 f0 01             	xor    eax,0x1
c0011743:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011747:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001174b:	83 f0 01             	xor    eax,0x1
c001174e:	0f b6 c0             	movzx  eax,al
c0011751:	85 c0                	test   eax,eax
c0011753:	75 5f                	jne    c00117b4 <Semaphore::acquire(int)+0xac>
c0011755:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c001175a:	7f 34                	jg     c0011790 <Semaphore::acquire(int)+0x88>
c001175c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011760:	89 d0                	mov    eax,edx
c0011762:	c1 e0 02             	shl    eax,0x2
c0011765:	01 d0                	add    eax,edx
c0011767:	d1 e0                	shl    eax,1
c0011769:	89 c2                	mov    edx,eax
c001176b:	c1 fa 1f             	sar    edx,0x1f
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	52                   	push   edx
c0011772:	50                   	push   eax
c0011773:	e8 9c 5e 00 00       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0011778:	83 c4 10             	add    esp,0x10
c001177b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001177f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0011783:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001178b:	eb 97                	jmp    c0011724 <Semaphore::acquire(int)+0x1c>
c001178d:	8d 76 00             	lea    esi,[esi+0x0]
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	6a 00                	push   0x0
c0011795:	68 90 01 00 00       	push   0x190
c001179a:	e8 75 5e 00 00       	call   c0017614 <milliTenthSleep(unsigned long long)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00117a7:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00117ac:	e9 73 ff ff ff       	jmp    c0011724 <Semaphore::acquire(int)+0x1c>
c00117b1:	8d 76 00             	lea    esi,[esi+0x0]
c00117b4:	90                   	nop
c00117b5:	8d 76 00             	lea    esi,[esi+0x0]
c00117b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bc:	e9 fb 00 00 00       	jmp    c00118bc <Semaphore::acquire(int)+0x1b4>
c00117c1:	8d 76 00             	lea    esi,[esi+0x0]
c00117c4:	fa                   	cli    
c00117c5:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00117ca:	83 c0 01             	add    eax,0x1
c00117cd:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00117d2:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00117d7:	83 c0 01             	add    eax,0x1
c00117da:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00117df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ec:	39 c2                	cmp    edx,eax
c00117ee:	7d 14                	jge    c0011804 <Semaphore::acquire(int)+0xfc>
c00117f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f7:	8d 50 01             	lea    edx,[eax+0x1]
c00117fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011801:	eb 6d                	jmp    c0011870 <Semaphore::acquire(int)+0x168>
c0011803:	90                   	nop
c0011804:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011809:	8b 00                	mov    eax,DWORD PTR [eax]
c001180b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011819:	85 c0                	test   eax,eax
c001181b:	75 13                	jne    c0011830 <Semaphore::acquire(int)+0x128>
c001181d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011822:	8b 10                	mov    edx,DWORD PTR [eax]
c0011824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011828:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001182b:	eb 17                	jmp    c0011844 <Semaphore::acquire(int)+0x13c>
c001182d:	8d 76 00             	lea    esi,[esi+0x0]
c0011830:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0011835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001183c:	8b 12                	mov    edx,DWORD PTR [edx]
c001183e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011841:	8d 76 00             	lea    esi,[esi+0x0]
c0011844:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011849:	8b 10                	mov    edx,DWORD PTR [eax]
c001184b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001184f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	68 28 c5 02 c0       	push   0xc002c528
c001185a:	e8 07 57 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001185f:	83 c4 10             	add    esp,0x10
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	6a 05                	push   0x5
c0011867:	e8 74 5c 00 00       	call   c00174e0 <blockTask(TaskState)>
c001186c:	83 c4 10             	add    esp,0x10
c001186f:	90                   	nop
c0011870:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011875:	83 e8 01             	sub    eax,0x1
c0011878:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c001187d:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011882:	85 c0                	test   eax,eax
c0011884:	75 1a                	jne    c00118a0 <Semaphore::acquire(int)+0x198>
c0011886:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c001188b:	85 c0                	test   eax,eax
c001188d:	74 11                	je     c00118a0 <Semaphore::acquire(int)+0x198>
c001188f:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011899:	e8 82 5b 00 00       	call   c0017420 <schedule()>
c001189e:	66 90                	xchg   ax,ax
c00118a0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00118a8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00118ad:	85 c0                	test   eax,eax
c00118af:	75 03                	jne    c00118b4 <Semaphore::acquire(int)+0x1ac>
c00118b1:	fb                   	sti    
c00118b2:	66 90                	xchg   ax,ax
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	83 c4 1c             	add    esp,0x1c
c00118bf:	c3                   	ret    

c00118c0 <Semaphore::acquire()>:
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	83 ec 08             	sub    esp,0x8
c00118c6:	6a 00                	push   0x0
c00118c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cc:	e8 37 fe ff ff       	call   c0011708 <Semaphore::acquire(int)>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	90                   	nop
c00118d5:	83 c4 0c             	add    esp,0xc
c00118d8:	c3                   	ret    
c00118d9:	90                   	nop
c00118da:	66 90                	xchg   ax,ax

c00118dc <Semaphore::release()>:
c00118dc:	83 ec 1c             	sub    esp,0x1c
c00118df:	fa                   	cli    
c00118e0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00118e5:	83 c0 01             	add    eax,0x1
c00118e8:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00118ed:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00118f2:	83 c0 01             	add    eax,0x1
c00118f5:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00118fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011901:	85 c0                	test   eax,eax
c0011903:	74 2b                	je     c0011930 <Semaphore::release()+0x54>
c0011905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011909:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011914:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001191b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001191e:	83 ec 0c             	sub    esp,0xc
c0011921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011925:	e8 4e 5e 00 00       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c001192a:	83 c4 10             	add    esp,0x10
c001192d:	eb 15                	jmp    c0011944 <Semaphore::release()+0x68>
c001192f:	90                   	nop
c0011930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011937:	8d 50 ff             	lea    edx,[eax-0x1]
c001193a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011941:	8d 76 00             	lea    esi,[esi+0x0]
c0011944:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011949:	83 e8 01             	sub    eax,0x1
c001194c:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011951:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011956:	85 c0                	test   eax,eax
c0011958:	75 1a                	jne    c0011974 <Semaphore::release()+0x98>
c001195a:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c001195f:	85 c0                	test   eax,eax
c0011961:	74 11                	je     c0011974 <Semaphore::release()+0x98>
c0011963:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c001196d:	e8 ae 5a 00 00       	call   c0017420 <schedule()>
c0011972:	66 90                	xchg   ax,ax
c0011974:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001197c:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011981:	85 c0                	test   eax,eax
c0011983:	75 03                	jne    c0011988 <Semaphore::release()+0xac>
c0011985:	fb                   	sti    
c0011986:	66 90                	xchg   ax,ax
c0011988:	90                   	nop
c0011989:	83 c4 1c             	add    esp,0x1c
c001198c:	c3                   	ret    

c001198d <KiSigKill(int)>:
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	6a 00                	push   0x0
c0011992:	6a 00                	push   0x0
c0011994:	6a ff                	push   0xffffffff
c0011996:	6a 01                	push   0x1
c0011998:	e8 b5 06 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001199d:	83 c4 1c             	add    esp,0x1c
c00119a0:	c3                   	ret    

c00119a1 <KiDefaultSignalHandlerIgnore(int)>:
c00119a1:	c3                   	ret    

c00119a2 <KiDefaultSignalHandlerPause(int)>:
c00119a2:	57                   	push   edi
c00119a3:	b9 07 00 00 00       	mov    ecx,0x7
c00119a8:	56                   	push   esi
c00119a9:	be 83 c5 02 c0       	mov    esi,0xc002c583
c00119ae:	83 ec 24             	sub    esp,0x24
c00119b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119b5:	fc                   	cld    
c00119b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119bc:	50                   	push   eax
c00119bd:	6a 00                	push   0x0
c00119bf:	6a 00                	push   0x0
c00119c1:	6a 27                	push   0x27
c00119c3:	e8 8a 06 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119c8:	83 c4 34             	add    esp,0x34
c00119cb:	5e                   	pop    esi
c00119cc:	5f                   	pop    edi
c00119cd:	c3                   	ret    

c00119ce <KiDefaultSignalHandlerResume(int)>:
c00119ce:	57                   	push   edi
c00119cf:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119d4:	56                   	push   esi
c00119d5:	be 9f c5 02 c0       	mov    esi,0xc002c59f
c00119da:	83 ec 24             	sub    esp,0x24
c00119dd:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119e1:	fc                   	cld    
c00119e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119e4:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119e8:	50                   	push   eax
c00119e9:	6a 00                	push   0x0
c00119eb:	6a 00                	push   0x0
c00119ed:	6a 27                	push   0x27
c00119ef:	e8 5e 06 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119f4:	83 c4 34             	add    esp,0x34
c00119f7:	5e                   	pop    esi
c00119f8:	5f                   	pop    edi
c00119f9:	c3                   	ret    

c00119fa <KeDeinitSignals(SigHandlerBlock*)>:
c00119fa:	e9 55 ea ff ff       	jmp    c0010454 <free>

c00119ff <KeInitSignals()>:
c00119ff:	53                   	push   ebx
c0011a00:	83 ec 14             	sub    esp,0x14
c0011a03:	68 c8 00 00 00       	push   0xc8
c0011a08:	e8 37 ea ff ff       	call   c0010444 <malloc>
c0011a0d:	83 c4 0c             	add    esp,0xc
c0011a10:	6a 04                	push   0x4
c0011a12:	6a 00                	push   0x0
c0011a14:	50                   	push   eax
c0011a15:	89 c3                	mov    ebx,eax
c0011a17:	e8 d4 ea fe ff       	call   c00004f0 <memset>
c0011a1c:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011a22:	83 c4 0c             	add    esp,0xc
c0011a25:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0011a2f:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011a39:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011a40:	6a 20                	push   0x20
c0011a42:	6a 00                	push   0x0
c0011a44:	50                   	push   eax
c0011a45:	e8 a6 ea fe ff       	call   c00004f0 <memset>
c0011a4a:	83 c4 0c             	add    esp,0xc
c0011a4d:	6a 44                	push   0x44
c0011a4f:	6a 00                	push   0x0
c0011a51:	53                   	push   ebx
c0011a52:	e8 99 ea fe ff       	call   c00004f0 <memset>
c0011a57:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011a5d:	83 c4 0c             	add    esp,0xc
c0011a60:	6a 11                	push   0x11
c0011a62:	6a 00                	push   0x0
c0011a64:	50                   	push   eax
c0011a65:	e8 86 ea fe ff       	call   c00004f0 <memset>
c0011a6a:	83 c4 18             	add    esp,0x18
c0011a6d:	89 d8                	mov    eax,ebx
c0011a6f:	5b                   	pop    ebx
c0011a70:	c3                   	ret    

c0011a71 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a71:	53                   	push   ebx
c0011a72:	b8 01 00 00 00       	mov    eax,0x1
c0011a77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a7f:	83 f9 10             	cmp    ecx,0x10
c0011a82:	7f 21                	jg     c0011aa5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a88:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a8b:	89 03                	mov    DWORD PTR [ebx],eax
c0011a8d:	b8 01 00 00 00       	mov    eax,0x1
c0011a92:	d3 e0                	shl    eax,cl
c0011a94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a98:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a9b:	31 c0                	xor    eax,eax
c0011a9d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aa5:	5b                   	pop    ebx
c0011aa6:	c3                   	ret    

c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011aa7:	55                   	push   ebp
c0011aa8:	57                   	push   edi
c0011aa9:	bf 08 00 00 00       	mov    edi,0x8
c0011aae:	56                   	push   esi
c0011aaf:	53                   	push   ebx
c0011ab0:	83 ec 14             	sub    esp,0x14
c0011ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011ab7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011abb:	68 bc c5 02 c0       	push   0xc002c5bc
c0011ac0:	e8 a1 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011ac5:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ad5:	31 c9                	xor    ecx,ecx
c0011ad7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011adb:	99                   	cdq    
c0011adc:	f7 ff                	idiv   edi
c0011ade:	8d 42 24             	lea    eax,[edx+0x24]
c0011ae1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ae5:	85 f6                	test   esi,esi
c0011ae7:	75 1a                	jne    c0011b03 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011ae9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011aed:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011af1:	50                   	push   eax
c0011af2:	50                   	push   eax
c0011af3:	52                   	push   edx
c0011af4:	68 d2 c5 02 c0       	push   0xc002c5d2
c0011af9:	e8 68 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	eb 1b                	jmp    c0011b1e <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011b03:	41                   	inc    ecx
c0011b04:	83 f9 08             	cmp    ecx,0x8
c0011b07:	75 ce                	jne    c0011ad7 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	be 01 00 00 00       	mov    esi,0x1
c0011b11:	68 f3 c5 02 c0       	push   0xc002c5f3
c0011b16:	e8 4b 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	89 f0                	mov    eax,esi
c0011b23:	5b                   	pop    ebx
c0011b24:	5e                   	pop    esi
c0011b25:	5f                   	pop    edi
c0011b26:	5d                   	pop    ebp
c0011b27:	c3                   	ret    

c0011b28 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b28:	55                   	push   ebp
c0011b29:	57                   	push   edi
c0011b2a:	56                   	push   esi
c0011b2b:	53                   	push   ebx
c0011b2c:	83 ec 1c             	sub    esp,0x1c
c0011b2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011b33:	85 db                	test   ebx,ebx
c0011b35:	0f 84 e0 00 00 00    	je     c0011c1b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011b3b:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b42:	0f 84 d3 00 00 00    	je     c0011c1b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011b48:	31 c9                	xor    ecx,ecx
c0011b4a:	bf 08 00 00 00       	mov    edi,0x8
c0011b4f:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b55:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b58:	99                   	cdq    
c0011b59:	f7 ff                	idiv   edi
c0011b5b:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b62:	85 ed                	test   ebp,ebp
c0011b64:	0f 84 d2 00 00 00    	je     c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011b6a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b70:	89 e9                	mov    ecx,ebp
c0011b72:	bf 01 00 00 00       	mov    edi,0x1
c0011b77:	d3 e7                	shl    edi,cl
c0011b79:	31 c9                	xor    ecx,ecx
c0011b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b7f:	b8 01 00 00 00       	mov    eax,0x1
c0011b84:	d3 e0                	shl    eax,cl
c0011b86:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0011b8a:	74 0a                	je     c0011b96 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011b8c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b90:	0f 85 85 00 00 00    	jne    c0011c1b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011b96:	41                   	inc    ecx
c0011b97:	83 f9 11             	cmp    ecx,0x11
c0011b9a:	75 e3                	jne    c0011b7f <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ba0:	46                   	inc    esi
c0011ba1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011ba7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bb2:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bb9:	09 f8                	or     eax,edi
c0011bbb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bc1:	31 c0                	xor    eax,eax
c0011bc3:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bcb:	74 09                	je     c0011bd6 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011bcd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bd4:	eb 06                	jmp    c0011bdc <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011bd6:	40                   	inc    eax
c0011bd7:	83 f8 08             	cmp    eax,0x8
c0011bda:	75 e7                	jne    c0011bc3 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011bdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011be0:	83 fd 09             	cmp    ebp,0x9
c0011be3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011be6:	89 2a                	mov    DWORD PTR [edx],ebp
c0011be8:	75 14                	jne    c0011bfe <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011bea:	83 ec 0c             	sub    esp,0xc
c0011bed:	68 04 c6 02 c0       	push   0xc002c604
c0011bf2:	e8 6f 53 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011bf7:	b8 8d 19 01 c0       	mov    eax,0xc001198d
c0011bfc:	eb 39                	jmp    c0011c37 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011bfe:	83 f8 01             	cmp    eax,0x1
c0011c01:	75 1c                	jne    c0011c1f <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011c03:	83 ec 0c             	sub    esp,0xc
c0011c06:	f7 d7                	not    edi
c0011c08:	68 0e c6 02 c0       	push   0xc002c60e
c0011c0d:	e8 54 53 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011c12:	83 c4 10             	add    esp,0x10
c0011c15:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c1b:	31 c0                	xor    eax,eax
c0011c1d:	eb 30                	jmp    c0011c4f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011c1f:	85 c0                	test   eax,eax
c0011c21:	75 2c                	jne    c0011c4f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011c23:	83 ec 0c             	sub    esp,0xc
c0011c26:	68 1b c6 02 c0       	push   0xc002c61b
c0011c2b:	e8 36 53 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011c30:	8b 04 ad 60 0b 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcf4a0]
c0011c37:	83 c4 10             	add    esp,0x10
c0011c3a:	eb 13                	jmp    c0011c4f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011c3c:	41                   	inc    ecx
c0011c3d:	46                   	inc    esi
c0011c3e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c44:	83 f9 08             	cmp    ecx,0x8
c0011c47:	0f 85 02 ff ff ff    	jne    c0011b4f <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011c4d:	eb cc                	jmp    c0011c1b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	5b                   	pop    ebx
c0011c53:	5e                   	pop    esi
c0011c54:	5f                   	pop    edi
c0011c55:	5d                   	pop    ebp
c0011c56:	c3                   	ret    

c0011c57 <KiCheckSignalZ>:
c0011c57:	80 3d 0c 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710c,0x0
c0011c5e:	74 43                	je     c0011ca3 <KiCheckSignalZ+0x4c>
c0011c60:	83 ec 24             	sub    esp,0x24
c0011c63:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011c67:	50                   	push   eax
c0011c68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c70:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011c76:	e8 ad fe ff ff       	call   c0011b28 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	31 d2                	xor    edx,edx
c0011c80:	85 c0                	test   eax,eax
c0011c82:	74 19                	je     c0011c9d <KiCheckSignalZ+0x46>
c0011c84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c8a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c8d:	89 02                	mov    DWORD PTR [edx],eax
c0011c8f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c9a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c9d:	89 d0                	mov    eax,edx
c0011c9f:	83 c4 1c             	add    esp,0x1c
c0011ca2:	c3                   	ret    
c0011ca3:	31 d2                	xor    edx,edx
c0011ca5:	89 d0                	mov    eax,edx
c0011ca7:	c3                   	ret    

c0011ca8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011ca8:	56                   	push   esi
c0011ca9:	53                   	push   ebx
c0011caa:	bb 01 00 00 00       	mov    ebx,0x1
c0011caf:	52                   	push   edx
c0011cb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cb8:	d3 e3                	shl    ebx,cl
c0011cba:	83 f9 10             	cmp    ecx,0x10
c0011cbd:	7f 08                	jg     c0011cc7 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011cbf:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011cc5:	75 10                	jne    c0011cd7 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	68 3e c6 02 c0       	push   0xc002c63e
c0011ccf:	e8 c4 eb ff ff       	call   c0010898 <KePanic(char const*)>
c0011cd4:	83 c4 10             	add    esp,0x10
c0011cd7:	f7 d3                	not    ebx
c0011cd9:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011cdf:	58                   	pop    eax
c0011ce0:	5b                   	pop    ebx
c0011ce1:	5e                   	pop    esi
c0011ce2:	c3                   	ret    

c0011ce3 <KiFinishSignalZ>:
c0011ce3:	53                   	push   ebx
c0011ce4:	83 ec 08             	sub    esp,0x8
c0011ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011cf3:	83 fa 08             	cmp    edx,0x8
c0011cf6:	75 0c                	jne    c0011d04 <KiFinishSignalZ+0x21>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 77 5a 00 00       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	50                   	push   eax
c0011d05:	50                   	push   eax
c0011d06:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d11:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011d17:	e8 8c ff ff ff       	call   c0011ca8 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d1c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d22:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d29:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d30:	83 c4 18             	add    esp,0x18
c0011d33:	5b                   	pop    ebx
c0011d34:	c3                   	ret    

c0011d35 <SysSeekDir(regs*)>:
c0011d35:	31 c0                	xor    eax,eax
c0011d37:	31 d2                	xor    edx,edx
c0011d39:	c3                   	ret    

c0011d3a <SysTellDir(regs*)>:
c0011d3a:	31 c0                	xor    eax,eax
c0011d3c:	31 d2                	xor    edx,edx
c0011d3e:	c3                   	ret    

c0011d3f <SysVerify(regs*)>:
c0011d3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d48:	c3                   	ret    

c0011d49 <SysGetArgc(regs*)>:
c0011d49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d51:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011d57:	89 c2                	mov    edx,eax
c0011d59:	c1 fa 1f             	sar    edx,0x1f
c0011d5c:	c3                   	ret    

c0011d5d <SysTTYName(regs*)>:
c0011d5d:	b8 01 00 00 00       	mov    eax,0x1
c0011d62:	31 d2                	xor    edx,edx
c0011d64:	c3                   	ret    

c0011d65 <SysFormatDisk(regs*)>:
c0011d65:	56                   	push   esi
c0011d66:	53                   	push   ebx
c0011d67:	83 ec 04             	sub    esp,0x4
c0011d6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d6e:	8b 1d 04 63 03 c0    	mov    ebx,DWORD PTR ds:0xc0036304
c0011d74:	eb 2a                	jmp    c0011da0 <SysFormatDisk(regs*)+0x3b>
c0011d76:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d81:	51                   	push   ecx
c0011d82:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d85:	51                   	push   ecx
c0011d86:	50                   	push   eax
c0011d87:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0011d8e:	50                   	push   eax
c0011d8f:	53                   	push   ebx
c0011d90:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d93:	83 c4 20             	add    esp,0x20
c0011d96:	83 f8 08             	cmp    eax,0x8
c0011d99:	89 c1                	mov    ecx,eax
c0011d9b:	75 14                	jne    c0011db1 <SysFormatDisk(regs*)+0x4c>
c0011d9d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011da0:	85 db                	test   ebx,ebx
c0011da2:	75 d2                	jne    c0011d76 <SysFormatDisk(regs*)+0x11>
c0011da4:	b8 03 00 00 00       	mov    eax,0x3
c0011da9:	31 d2                	xor    edx,edx
c0011dab:	83 c4 04             	add    esp,0x4
c0011dae:	5b                   	pop    ebx
c0011daf:	5e                   	pop    esi
c0011db0:	c3                   	ret    
c0011db1:	85 c0                	test   eax,eax
c0011db3:	74 13                	je     c0011dc8 <SysFormatDisk(regs*)+0x63>
c0011db5:	31 d2                	xor    edx,edx
c0011db7:	83 f9 09             	cmp    ecx,0x9
c0011dba:	b8 01 00 00 00       	mov    eax,0x1
c0011dbf:	74 ea                	je     c0011dab <SysFormatDisk(regs*)+0x46>
c0011dc1:	b8 02 00 00 00       	mov    eax,0x2
c0011dc6:	eb e1                	jmp    c0011da9 <SysFormatDisk(regs*)+0x44>
c0011dc8:	31 c0                	xor    eax,eax
c0011dca:	eb dd                	jmp    c0011da9 <SysFormatDisk(regs*)+0x44>

c0011dcc <SysSetDiskVolumeLabel(regs*)>:
c0011dcc:	56                   	push   esi
c0011dcd:	53                   	push   ebx
c0011dce:	83 ec 04             	sub    esp,0x4
c0011dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011dd5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011dd8:	83 f8 19             	cmp    eax,0x19
c0011ddb:	77 33                	ja     c0011e10 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ddd:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c0011de4:	85 c9                	test   ecx,ecx
c0011de6:	74 28                	je     c0011e10 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011de8:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011deb:	85 db                	test   ebx,ebx
c0011ded:	74 21                	je     c0011e10 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011def:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011df5:	85 d2                	test   edx,edx
c0011df7:	74 17                	je     c0011e10 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011df9:	8b 32                	mov    esi,DWORD PTR [edx]
c0011dfb:	53                   	push   ebx
c0011dfc:	50                   	push   eax
c0011dfd:	51                   	push   ecx
c0011dfe:	52                   	push   edx
c0011dff:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e02:	83 c4 10             	add    esp,0x10
c0011e05:	83 c4 04             	add    esp,0x4
c0011e08:	5b                   	pop    ebx
c0011e09:	5e                   	pop    esi
c0011e0a:	89 c2                	mov    edx,eax
c0011e0c:	c1 fa 1f             	sar    edx,0x1f
c0011e0f:	c3                   	ret    
c0011e10:	83 c4 04             	add    esp,0x4
c0011e13:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e18:	5b                   	pop    ebx
c0011e19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e1e:	5e                   	pop    esi
c0011e1f:	c3                   	ret    

c0011e20 <SysGetDiskVolumeLabel(regs*)>:
c0011e20:	57                   	push   edi
c0011e21:	56                   	push   esi
c0011e22:	53                   	push   ebx
c0011e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e27:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e2a:	83 fa 19             	cmp    edx,0x19
c0011e2d:	77 3c                	ja     c0011e6b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e2f:	8b 0c 95 e0 6a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc9520]
c0011e36:	85 c9                	test   ecx,ecx
c0011e38:	74 31                	je     c0011e6b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e3a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e3d:	85 db                	test   ebx,ebx
c0011e3f:	74 2a                	je     c0011e6b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e41:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e44:	85 f6                	test   esi,esi
c0011e46:	74 23                	je     c0011e6b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e48:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e4e:	85 c0                	test   eax,eax
c0011e50:	74 19                	je     c0011e6b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e52:	83 ec 0c             	sub    esp,0xc
c0011e55:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e57:	56                   	push   esi
c0011e58:	53                   	push   ebx
c0011e59:	52                   	push   edx
c0011e5a:	51                   	push   ecx
c0011e5b:	50                   	push   eax
c0011e5c:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e5f:	83 c4 20             	add    esp,0x20
c0011e62:	5b                   	pop    ebx
c0011e63:	5e                   	pop    esi
c0011e64:	89 c2                	mov    edx,eax
c0011e66:	c1 fa 1f             	sar    edx,0x1f
c0011e69:	5f                   	pop    edi
c0011e6a:	c3                   	ret    
c0011e6b:	5b                   	pop    ebx
c0011e6c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e71:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e76:	5e                   	pop    esi
c0011e77:	5f                   	pop    edi
c0011e78:	c3                   	ret    

c0011e79 <SysRealpath(regs*)>:
c0011e79:	53                   	push   ebx
c0011e7a:	83 ec 08             	sub    esp,0x8
c0011e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e81:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e84:	85 c9                	test   ecx,ecx
c0011e86:	74 36                	je     c0011ebe <SysRealpath(regs*)+0x45>
c0011e88:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e8b:	31 d2                	xor    edx,edx
c0011e8d:	b8 01 00 00 00       	mov    eax,0x1
c0011e92:	85 db                	test   ebx,ebx
c0011e94:	75 05                	jne    c0011e9b <SysRealpath(regs*)+0x22>
c0011e96:	83 c4 08             	add    esp,0x8
c0011e99:	5b                   	pop    ebx
c0011e9a:	c3                   	ret    
c0011e9b:	6a 00                	push   0x0
c0011e9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ea2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ea5:	05 0c 01 00 00       	add    eax,0x10c
c0011eaa:	50                   	push   eax
c0011eab:	51                   	push   ecx
c0011eac:	53                   	push   ebx
c0011ead:	e8 02 6d ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011eb2:	83 c4 10             	add    esp,0x10
c0011eb5:	31 c0                	xor    eax,eax
c0011eb7:	31 d2                	xor    edx,edx
c0011eb9:	83 c4 08             	add    esp,0x8
c0011ebc:	5b                   	pop    ebx
c0011ebd:	c3                   	ret    
c0011ebe:	b8 01 00 00 00       	mov    eax,0x1
c0011ec3:	31 d2                	xor    edx,edx
c0011ec5:	eb f2                	jmp    c0011eb9 <SysRealpath(regs*)+0x40>

c0011ec7 <SysReadDir(regs*)>:
c0011ec7:	53                   	push   ebx
c0011ec8:	83 ec 18             	sub    esp,0x18
c0011ecb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ecf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ed2:	83 f8 02             	cmp    eax,0x2
c0011ed5:	76 4f                	jbe    c0011f26 <SysReadDir(regs*)+0x5f>
c0011ed7:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ede:	77 52                	ja     c0011f32 <SysReadDir(regs*)+0x6b>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	50                   	push   eax
c0011ee4:	e8 98 1d 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	85 c0                	test   eax,eax
c0011eee:	74 42                	je     c0011f32 <SysReadDir(regs*)+0x6b>
c0011ef0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ef8:	83 ec 0c             	sub    esp,0xc
c0011efb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f01:	51                   	push   ecx
c0011f02:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f05:	51                   	push   ecx
c0011f06:	6a 00                	push   0x0
c0011f08:	68 10 01 00 00       	push   0x110
c0011f0d:	50                   	push   eax
c0011f0e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f11:	83 c4 20             	add    esp,0x20
c0011f14:	85 c0                	test   eax,eax
c0011f16:	89 c1                	mov    ecx,eax
c0011f18:	74 27                	je     c0011f41 <SysReadDir(regs*)+0x7a>
c0011f1a:	31 d2                	xor    edx,edx
c0011f1c:	83 f9 07             	cmp    ecx,0x7
c0011f1f:	b8 02 00 00 00       	mov    eax,0x2
c0011f24:	75 16                	jne    c0011f3c <SysReadDir(regs*)+0x75>
c0011f26:	b8 01 00 00 00       	mov    eax,0x1
c0011f2b:	31 d2                	xor    edx,edx
c0011f2d:	83 c4 18             	add    esp,0x18
c0011f30:	5b                   	pop    ebx
c0011f31:	c3                   	ret    
c0011f32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f3c:	83 c4 18             	add    esp,0x18
c0011f3f:	5b                   	pop    ebx
c0011f40:	c3                   	ret    
c0011f41:	31 c0                	xor    eax,eax
c0011f43:	31 d2                	xor    edx,edx
c0011f45:	eb e6                	jmp    c0011f2d <SysReadDir(regs*)+0x66>

c0011f47 <SysIsATTY(regs*)>:
c0011f47:	83 ec 0c             	sub    esp,0xc
c0011f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f51:	83 f8 02             	cmp    eax,0x2
c0011f54:	76 07                	jbe    c0011f5d <SysIsATTY(regs*)+0x16>
c0011f56:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f5b:	75 26                	jne    c0011f83 <SysIsATTY(regs*)+0x3c>
c0011f5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f65:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011f6b:	85 c0                	test   eax,eax
c0011f6d:	74 24                	je     c0011f93 <SysIsATTY(regs*)+0x4c>
c0011f6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	50                   	push   eax
c0011f75:	ff 12                	call   DWORD PTR [edx]
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	31 d2                	xor    edx,edx
c0011f7c:	83 c4 0c             	add    esp,0xc
c0011f7f:	0f b6 c0             	movzx  eax,al
c0011f82:	c3                   	ret    
c0011f83:	83 ec 0c             	sub    esp,0xc
c0011f86:	50                   	push   eax
c0011f87:	e8 f5 1c 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	85 c0                	test   eax,eax
c0011f91:	75 dc                	jne    c0011f6f <SysIsATTY(regs*)+0x28>
c0011f93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f98:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f9d:	83 c4 0c             	add    esp,0xc
c0011fa0:	c3                   	ret    

c0011fa1 <SysSeek(regs*)>:
c0011fa1:	53                   	push   ebx
c0011fa2:	83 ec 08             	sub    esp,0x8
c0011fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fac:	8d 50 fd             	lea    edx,[eax-0x3]
c0011faf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011fb5:	77 39                	ja     c0011ff0 <SysSeek(regs*)+0x4f>
c0011fb7:	83 ec 0c             	sub    esp,0xc
c0011fba:	50                   	push   eax
c0011fbb:	e8 c1 1c 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	85 c0                	test   eax,eax
c0011fc5:	74 29                	je     c0011ff0 <SysSeek(regs*)+0x4f>
c0011fc7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fca:	83 ec 04             	sub    esp,0x4
c0011fcd:	31 db                	xor    ebx,ebx
c0011fcf:	53                   	push   ebx
c0011fd0:	51                   	push   ecx
c0011fd1:	50                   	push   eax
c0011fd2:	e8 e5 6f ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c0011fd7:	83 c4 10             	add    esp,0x10
c0011fda:	85 c0                	test   eax,eax
c0011fdc:	0f 95 c0             	setne  al
c0011fdf:	31 d2                	xor    edx,edx
c0011fe1:	0f b6 c0             	movzx  eax,al
c0011fe4:	f7 d8                	neg    eax
c0011fe6:	83 d2 00             	adc    edx,0x0
c0011fe9:	83 c4 08             	add    esp,0x8
c0011fec:	5b                   	pop    ebx
c0011fed:	f7 da                	neg    edx
c0011fef:	c3                   	ret    
c0011ff0:	83 c4 08             	add    esp,0x8
c0011ff3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ff8:	5b                   	pop    ebx
c0011ff9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ffe:	c3                   	ret    

c0011fff <SysTell(regs*)>:
c0011fff:	53                   	push   ebx
c0012000:	83 ec 08             	sub    esp,0x8
c0012003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012007:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001200a:	83 f8 02             	cmp    eax,0x2
c001200d:	76 56                	jbe    c0012065 <SysTell(regs*)+0x66>
c001200f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012014:	76 19                	jbe    c001202f <SysTell(regs*)+0x30>
c0012016:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012019:	31 d2                	xor    edx,edx
c001201b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012021:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012028:	83 c4 08             	add    esp,0x8
c001202b:	31 c0                	xor    eax,eax
c001202d:	5b                   	pop    ebx
c001202e:	c3                   	ret    
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	50                   	push   eax
c0012033:	e8 49 1c 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	85 c0                	test   eax,eax
c001203d:	74 26                	je     c0012065 <SysTell(regs*)+0x66>
c001203f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012042:	83 ec 08             	sub    esp,0x8
c0012045:	52                   	push   edx
c0012046:	50                   	push   eax
c0012047:	e8 1c 70 ff ff       	call   c0009068 <File::tell(unsigned long long*)>
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	85 c0                	test   eax,eax
c0012051:	0f 95 c0             	setne  al
c0012054:	31 d2                	xor    edx,edx
c0012056:	0f b6 c0             	movzx  eax,al
c0012059:	f7 d8                	neg    eax
c001205b:	83 d2 00             	adc    edx,0x0
c001205e:	83 c4 08             	add    esp,0x8
c0012061:	5b                   	pop    ebx
c0012062:	f7 da                	neg    edx
c0012064:	c3                   	ret    
c0012065:	83 c4 08             	add    esp,0x8
c0012068:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001206d:	5b                   	pop    ebx
c001206e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012073:	c3                   	ret    

c0012074 <SysSize(regs*)>:
c0012074:	53                   	push   ebx
c0012075:	83 ec 18             	sub    esp,0x18
c0012078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001207c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001207f:	83 f8 02             	cmp    eax,0x2
c0012082:	76 5b                	jbe    c00120df <SysSize(regs*)+0x6b>
c0012084:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012089:	76 19                	jbe    c00120a4 <SysSize(regs*)+0x30>
c001208b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001208e:	31 d2                	xor    edx,edx
c0012090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012096:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001209d:	83 c4 18             	add    esp,0x18
c00120a0:	31 c0                	xor    eax,eax
c00120a2:	5b                   	pop    ebx
c00120a3:	c3                   	ret    
c00120a4:	83 ec 0c             	sub    esp,0xc
c00120a7:	50                   	push   eax
c00120a8:	e8 d4 1b 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	85 c0                	test   eax,eax
c00120b2:	74 2b                	je     c00120df <SysSize(regs*)+0x6b>
c00120b4:	83 ec 04             	sub    esp,0x4
c00120b7:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120bb:	52                   	push   edx
c00120bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120bf:	52                   	push   edx
c00120c0:	50                   	push   eax
c00120c1:	e8 3a 71 ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	85 c0                	test   eax,eax
c00120cb:	0f 95 c0             	setne  al
c00120ce:	31 d2                	xor    edx,edx
c00120d0:	0f b6 c0             	movzx  eax,al
c00120d3:	f7 d8                	neg    eax
c00120d5:	83 d2 00             	adc    edx,0x0
c00120d8:	83 c4 18             	add    esp,0x18
c00120db:	5b                   	pop    ebx
c00120dc:	f7 da                	neg    edx
c00120de:	c3                   	ret    
c00120df:	83 c4 18             	add    esp,0x18
c00120e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e7:	5b                   	pop    ebx
c00120e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ed:	c3                   	ret    

c00120ee <SysSizeFromFilename(regs*)>:
c00120ee:	55                   	push   ebp
c00120ef:	57                   	push   edi
c00120f0:	56                   	push   esi
c00120f1:	53                   	push   ebx
c00120f2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00120f8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00120ff:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012102:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012105:	85 f6                	test   esi,esi
c0012107:	89 f8                	mov    eax,edi
c0012109:	74 09                	je     c0012114 <SysSizeFromFilename(regs*)+0x26>
c001210b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012111:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012114:	83 f8 02             	cmp    eax,0x2
c0012117:	0f 86 c9 00 00 00    	jbe    c00121e6 <SysSizeFromFilename(regs*)+0xf8>
c001211d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012122:	76 1f                	jbe    c0012143 <SysSizeFromFilename(regs*)+0x55>
c0012124:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012127:	31 d2                	xor    edx,edx
c0012129:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001212f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012136:	31 c0                	xor    eax,eax
c0012138:	81 c4 4c 02 00 00    	add    esp,0x24c
c001213e:	5b                   	pop    ebx
c001213f:	5e                   	pop    esi
c0012140:	5f                   	pop    edi
c0012141:	5d                   	pop    ebp
c0012142:	c3                   	ret    
c0012143:	83 ec 0c             	sub    esp,0xc
c0012146:	68 14 01 00 00       	push   0x114
c001214b:	e8 f4 e2 ff ff       	call   c0010444 <malloc>
c0012150:	6a 01                	push   0x1
c0012152:	89 c5                	mov    ebp,eax
c0012154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012159:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001215c:	50                   	push   eax
c001215d:	57                   	push   edi
c001215e:	55                   	push   ebp
c001215f:	e8 7e 6c ff ff       	call   c0008de2 <File::File(char const*, Process*, bool)>
c0012164:	83 c4 20             	add    esp,0x20
c0012167:	85 ed                	test   ebp,ebp
c0012169:	74 7b                	je     c00121e6 <SysSizeFromFilename(regs*)+0xf8>
c001216b:	83 ec 04             	sub    esp,0x4
c001216e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012172:	50                   	push   eax
c0012173:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012176:	51                   	push   ecx
c0012177:	55                   	push   ebp
c0012178:	e8 83 70 ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c001217d:	89 c3                	mov    ebx,eax
c001217f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012182:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012185:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012188:	83 c4 10             	add    esp,0x10
c001218b:	85 db                	test   ebx,ebx
c001218d:	75 57                	jne    c00121e6 <SysSizeFromFilename(regs*)+0xf8>
c001218f:	6a 00                	push   0x0
c0012191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012196:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012199:	05 0c 01 00 00       	add    eax,0x10c
c001219e:	50                   	push   eax
c001219f:	57                   	push   edi
c00121a0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121a7:	53                   	push   ebx
c00121a8:	e8 07 6a ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121ad:	58                   	pop    eax
c00121ae:	5a                   	pop    edx
c00121af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121b3:	50                   	push   eax
c00121b4:	53                   	push   ebx
c00121b5:	e8 80 64 ff ff       	call   c000863a <KeDereferenceSymlink(char const*, char*)>
c00121ba:	83 c4 10             	add    esp,0x10
c00121bd:	ba 00 00 00 00       	mov    edx,0x0
c00121c2:	83 f8 01             	cmp    eax,0x1
c00121c5:	b8 00 00 00 00       	mov    eax,0x0
c00121ca:	74 2f                	je     c00121fb <SysSizeFromFilename(regs*)+0x10d>
c00121cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121d1:	74 3b                	je     c001220e <SysSizeFromFilename(regs*)+0x120>
c00121d3:	85 f6                	test   esi,esi
c00121d5:	0f 84 5d ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c00121db:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121e1:	e9 52 ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>
c00121e6:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f1:	5b                   	pop    ebx
c00121f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121f7:	5e                   	pop    esi
c00121f8:	5f                   	pop    edi
c00121f9:	5d                   	pop    ebp
c00121fa:	c3                   	ret    
c00121fb:	85 f6                	test   esi,esi
c00121fd:	0f 84 35 ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c0012203:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012209:	e9 2a ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>
c001220e:	85 f6                	test   esi,esi
c0012210:	0f 84 22 ff ff ff    	je     c0012138 <SysSizeFromFilename(regs*)+0x4a>
c0012216:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001221c:	e9 17 ff ff ff       	jmp    c0012138 <SysSizeFromFilename(regs*)+0x4a>

c0012221 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012221:	55                   	push   ebp
c0012222:	57                   	push   edi
c0012223:	56                   	push   esi
c0012224:	53                   	push   ebx
c0012225:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001222b:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012232:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012235:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012238:	85 f6                	test   esi,esi
c001223a:	89 f8                	mov    eax,edi
c001223c:	74 09                	je     c0012247 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001223e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012244:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012247:	83 f8 02             	cmp    eax,0x2
c001224a:	0f 86 c9 00 00 00    	jbe    c0012319 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0012250:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012255:	76 1f                	jbe    c0012276 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0012257:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001225a:	31 d2                	xor    edx,edx
c001225c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012262:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012269:	31 c0                	xor    eax,eax
c001226b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012271:	5b                   	pop    ebx
c0012272:	5e                   	pop    esi
c0012273:	5f                   	pop    edi
c0012274:	5d                   	pop    ebp
c0012275:	c3                   	ret    
c0012276:	83 ec 0c             	sub    esp,0xc
c0012279:	68 14 01 00 00       	push   0x114
c001227e:	e8 c1 e1 ff ff       	call   c0010444 <malloc>
c0012283:	6a 00                	push   0x0
c0012285:	89 c5                	mov    ebp,eax
c0012287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001228f:	50                   	push   eax
c0012290:	57                   	push   edi
c0012291:	55                   	push   ebp
c0012292:	e8 4b 6b ff ff       	call   c0008de2 <File::File(char const*, Process*, bool)>
c0012297:	83 c4 20             	add    esp,0x20
c001229a:	85 ed                	test   ebp,ebp
c001229c:	74 7b                	je     c0012319 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001229e:	83 ec 04             	sub    esp,0x4
c00122a1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122a5:	50                   	push   eax
c00122a6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00122a9:	51                   	push   ecx
c00122aa:	55                   	push   ebp
c00122ab:	e8 50 6f ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c00122b0:	89 c3                	mov    ebx,eax
c00122b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00122bb:	83 c4 10             	add    esp,0x10
c00122be:	85 db                	test   ebx,ebx
c00122c0:	75 57                	jne    c0012319 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00122c2:	6a 00                	push   0x0
c00122c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122cc:	05 0c 01 00 00       	add    eax,0x10c
c00122d1:	50                   	push   eax
c00122d2:	57                   	push   edi
c00122d3:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00122da:	53                   	push   ebx
c00122db:	e8 d4 68 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122e0:	58                   	pop    eax
c00122e1:	5a                   	pop    edx
c00122e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122e6:	50                   	push   eax
c00122e7:	53                   	push   ebx
c00122e8:	e8 4d 63 ff ff       	call   c000863a <KeDereferenceSymlink(char const*, char*)>
c00122ed:	83 c4 10             	add    esp,0x10
c00122f0:	ba 00 00 00 00       	mov    edx,0x0
c00122f5:	83 f8 01             	cmp    eax,0x1
c00122f8:	b8 00 00 00 00       	mov    eax,0x0
c00122fd:	74 2f                	je     c001232e <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c00122ff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012304:	74 3b                	je     c0012341 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0012306:	85 f6                	test   esi,esi
c0012308:	0f 84 5d ff ff ff    	je     c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001230e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012314:	e9 52 ff ff ff       	jmp    c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012319:	81 c4 4c 02 00 00    	add    esp,0x24c
c001231f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012324:	5b                   	pop    ebx
c0012325:	ba ff ff ff ff       	mov    edx,0xffffffff
c001232a:	5e                   	pop    esi
c001232b:	5f                   	pop    edi
c001232c:	5d                   	pop    ebp
c001232d:	c3                   	ret    
c001232e:	85 f6                	test   esi,esi
c0012330:	0f 84 35 ff ff ff    	je     c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012336:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001233c:	e9 2a ff ff ff       	jmp    c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012341:	85 f6                	test   esi,esi
c0012343:	0f 84 22 ff ff ff    	je     c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012349:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001234f:	e9 17 ff ff ff       	jmp    c001226b <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012354 <SysClose(regs*)>:
c0012354:	57                   	push   edi
c0012355:	56                   	push   esi
c0012356:	53                   	push   ebx
c0012357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001235b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001235e:	83 f8 02             	cmp    eax,0x2
c0012361:	76 44                	jbe    c00123a7 <SysClose(regs*)+0x53>
c0012363:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012369:	31 f6                	xor    esi,esi
c001236b:	31 ff                	xor    edi,edi
c001236d:	83 fa 01             	cmp    edx,0x1
c0012370:	76 2d                	jbe    c001239f <SysClose(regs*)+0x4b>
c0012372:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012377:	77 2e                	ja     c00123a7 <SysClose(regs*)+0x53>
c0012379:	83 ec 0c             	sub    esp,0xc
c001237c:	50                   	push   eax
c001237d:	e8 ff 18 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0012382:	83 c4 10             	add    esp,0x10
c0012385:	85 c0                	test   eax,eax
c0012387:	89 c3                	mov    ebx,eax
c0012389:	74 1c                	je     c00123a7 <SysClose(regs*)+0x53>
c001238b:	83 ec 0c             	sub    esp,0xc
c001238e:	50                   	push   eax
c001238f:	e8 c8 6b ff ff       	call   c0008f5c <File::close()>
c0012394:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012396:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012399:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001239c:	83 c4 10             	add    esp,0x10
c001239f:	5b                   	pop    ebx
c00123a0:	89 f0                	mov    eax,esi
c00123a2:	89 fa                	mov    edx,edi
c00123a4:	5e                   	pop    esi
c00123a5:	5f                   	pop    edi
c00123a6:	c3                   	ret    
c00123a7:	5b                   	pop    ebx
c00123a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00123ad:	89 f0                	mov    eax,esi
c00123af:	bf ff ff ff ff       	mov    edi,0xffffffff
c00123b4:	89 fa                	mov    edx,edi
c00123b6:	5e                   	pop    esi
c00123b7:	5f                   	pop    edi
c00123b8:	c3                   	ret    

c00123b9 <SysOpenDir(regs*)>:
c00123b9:	56                   	push   esi
c00123ba:	53                   	push   ebx
c00123bb:	83 ec 04             	sub    esp,0x4
c00123be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123c2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123c5:	85 c9                	test   ecx,ecx
c00123c7:	74 5d                	je     c0012426 <SysOpenDir(regs*)+0x6d>
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	68 14 01 00 00       	push   0x114
c00123d1:	e8 6e e0 ff ff       	call   c0010444 <malloc>
c00123d6:	83 c4 0c             	add    esp,0xc
c00123d9:	89 c6                	mov    esi,eax
c00123db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00123e3:	50                   	push   eax
c00123e4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123e7:	52                   	push   edx
c00123e8:	56                   	push   esi
c00123e9:	e8 d2 6f ff ff       	call   c00093c0 <Directory::Directory(char const*, Process*)>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	85 f6                	test   esi,esi
c00123f3:	74 31                	je     c0012426 <SysOpenDir(regs*)+0x6d>
c00123f5:	83 ec 0c             	sub    esp,0xc
c00123f8:	56                   	push   esi
c00123f9:	e8 8a 70 ff ff       	call   c0009488 <Directory::open()>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	85 c0                	test   eax,eax
c0012403:	75 21                	jne    c0012426 <SysOpenDir(regs*)+0x6d>
c0012405:	83 ec 0c             	sub    esp,0xc
c0012408:	56                   	push   esi
c0012409:	e8 76 15 00 00       	call   c0013984 <UnixFile::getFileDescriptor()>
c001240e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	89 02                	mov    DWORD PTR [edx],eax
c0012416:	c1 f8 1f             	sar    eax,0x1f
c0012419:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001241c:	83 c4 04             	add    esp,0x4
c001241f:	31 c0                	xor    eax,eax
c0012421:	5b                   	pop    ebx
c0012422:	31 d2                	xor    edx,edx
c0012424:	5e                   	pop    esi
c0012425:	c3                   	ret    
c0012426:	83 c4 04             	add    esp,0x4
c0012429:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001242e:	5b                   	pop    ebx
c001242f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012434:	5e                   	pop    esi
c0012435:	c3                   	ret    

c0012436 <SysMakeDir(regs*)>:
c0012436:	56                   	push   esi
c0012437:	53                   	push   ebx
c0012438:	83 ec 10             	sub    esp,0x10
c001243b:	68 14 01 00 00       	push   0x114
c0012440:	e8 ff df ff ff       	call   c0010444 <malloc>
c0012445:	83 c4 0c             	add    esp,0xc
c0012448:	89 c3                	mov    ebx,eax
c001244a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001244f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012452:	50                   	push   eax
c0012453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012457:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001245a:	52                   	push   edx
c001245b:	53                   	push   ebx
c001245c:	e8 5f 6f ff ff       	call   c00093c0 <Directory::Directory(char const*, Process*)>
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	85 db                	test   ebx,ebx
c0012466:	74 2c                	je     c0012494 <SysMakeDir(regs*)+0x5e>
c0012468:	83 ec 0c             	sub    esp,0xc
c001246b:	53                   	push   ebx
c001246c:	e8 f7 71 ff ff       	call   c0009668 <Directory::create()>
c0012471:	89 c6                	mov    esi,eax
c0012473:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012478:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	31 c0                	xor    eax,eax
c0012480:	85 f6                	test   esi,esi
c0012482:	0f 95 c0             	setne  al
c0012485:	31 d2                	xor    edx,edx
c0012487:	f7 d8                	neg    eax
c0012489:	83 d2 00             	adc    edx,0x0
c001248c:	83 c4 04             	add    esp,0x4
c001248f:	5b                   	pop    ebx
c0012490:	f7 da                	neg    edx
c0012492:	5e                   	pop    esi
c0012493:	c3                   	ret    
c0012494:	83 c4 04             	add    esp,0x4
c0012497:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001249c:	5b                   	pop    ebx
c001249d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124a2:	5e                   	pop    esi
c00124a3:	c3                   	ret    

c00124a4 <SysCloseDir(regs*)>:
c00124a4:	53                   	push   ebx
c00124a5:	83 ec 08             	sub    esp,0x8
c00124a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124af:	8d 50 fd             	lea    edx,[eax-0x3]
c00124b2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00124b8:	77 2f                	ja     c00124e9 <SysCloseDir(regs*)+0x45>
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	50                   	push   eax
c00124be:	e8 be 17 00 00       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	85 c0                	test   eax,eax
c00124c8:	89 c3                	mov    ebx,eax
c00124ca:	74 1d                	je     c00124e9 <SysCloseDir(regs*)+0x45>
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	50                   	push   eax
c00124d0:	e8 0f 70 ff ff       	call   c00094e4 <Directory::close()>
c00124d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	31 c0                	xor    eax,eax
c00124e2:	83 c4 08             	add    esp,0x8
c00124e5:	31 d2                	xor    edx,edx
c00124e7:	5b                   	pop    ebx
c00124e8:	c3                   	ret    
c00124e9:	83 c4 08             	add    esp,0x8
c00124ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124f1:	5b                   	pop    ebx
c00124f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124f7:	c3                   	ret    

c00124f8 <SysWait(regs*)>:
c00124f8:	83 ec 10             	sub    esp,0x10
c00124fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124ff:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012502:	52                   	push   edx
c0012503:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012506:	51                   	push   ecx
c0012507:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001250a:	50                   	push   eax
c001250b:	e8 0c 50 00 00       	call   c001751c <waitTask(int, int*, int)>
c0012510:	83 c4 1c             	add    esp,0x1c
c0012513:	89 c2                	mov    edx,eax
c0012515:	c1 fa 1f             	sar    edx,0x1f
c0012518:	c3                   	ret    

c0012519 <SysNotImpl(regs*)>:
c0012519:	83 ec 18             	sub    esp,0x18
c001251c:	68 4f c6 02 c0       	push   0xc002c64f
c0012521:	e8 72 e3 ff ff       	call   c0010898 <KePanic(char const*)>
c0012526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001252b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012530:	83 c4 1c             	add    esp,0x1c
c0012533:	c3                   	ret    

c0012534 <SysPanic(regs*)>:
c0012534:	83 ec 18             	sub    esp,0x18
c0012537:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001253b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001253e:	50                   	push   eax
c001253f:	e8 54 e3 ff ff       	call   c0010898 <KePanic(char const*)>
c0012544:	b8 01 00 00 00       	mov    eax,0x1
c0012549:	31 d2                	xor    edx,edx
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	c3                   	ret    

c001254f <SysRmdir(regs*)>:
c001254f:	56                   	push   esi
c0012550:	53                   	push   ebx
c0012551:	83 ec 10             	sub    esp,0x10
c0012554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012558:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001255b:	68 14 01 00 00       	push   0x114
c0012560:	e8 df de ff ff       	call   c0010444 <malloc>
c0012565:	6a 00                	push   0x0
c0012567:	89 c3                	mov    ebx,eax
c0012569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001256e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012571:	50                   	push   eax
c0012572:	56                   	push   esi
c0012573:	53                   	push   ebx
c0012574:	e8 69 68 ff ff       	call   c0008de2 <File::File(char const*, Process*, bool)>
c0012579:	83 c4 14             	add    esp,0x14
c001257c:	53                   	push   ebx
c001257d:	e8 4a 6b ff ff       	call   c00090cc <File::unlink()>
c0012582:	83 c4 10             	add    esp,0x10
c0012585:	85 db                	test   ebx,ebx
c0012587:	89 c6                	mov    esi,eax
c0012589:	74 0c                	je     c0012597 <SysRmdir(regs*)+0x48>
c001258b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001258d:	83 ec 0c             	sub    esp,0xc
c0012590:	53                   	push   ebx
c0012591:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	31 c0                	xor    eax,eax
c0012599:	85 f6                	test   esi,esi
c001259b:	0f 95 c0             	setne  al
c001259e:	31 d2                	xor    edx,edx
c00125a0:	f7 d8                	neg    eax
c00125a2:	83 d2 00             	adc    edx,0x0
c00125a5:	83 c4 04             	add    esp,0x4
c00125a8:	5b                   	pop    ebx
c00125a9:	f7 da                	neg    edx
c00125ab:	5e                   	pop    esi
c00125ac:	c3                   	ret    

c00125ad <SysUnlink(regs*)>:
c00125ad:	56                   	push   esi
c00125ae:	53                   	push   ebx
c00125af:	83 ec 10             	sub    esp,0x10
c00125b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125b6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125b9:	68 14 01 00 00       	push   0x114
c00125be:	e8 81 de ff ff       	call   c0010444 <malloc>
c00125c3:	6a 00                	push   0x0
c00125c5:	89 c3                	mov    ebx,eax
c00125c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00125cf:	50                   	push   eax
c00125d0:	56                   	push   esi
c00125d1:	53                   	push   ebx
c00125d2:	e8 0b 68 ff ff       	call   c0008de2 <File::File(char const*, Process*, bool)>
c00125d7:	83 c4 14             	add    esp,0x14
c00125da:	53                   	push   ebx
c00125db:	e8 ec 6a ff ff       	call   c00090cc <File::unlink()>
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	85 db                	test   ebx,ebx
c00125e5:	89 c6                	mov    esi,eax
c00125e7:	74 0c                	je     c00125f5 <SysUnlink(regs*)+0x48>
c00125e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125eb:	83 ec 0c             	sub    esp,0xc
c00125ee:	53                   	push   ebx
c00125ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125f2:	83 c4 10             	add    esp,0x10
c00125f5:	31 c0                	xor    eax,eax
c00125f7:	85 f6                	test   esi,esi
c00125f9:	0f 95 c0             	setne  al
c00125fc:	31 d2                	xor    edx,edx
c00125fe:	f7 d8                	neg    eax
c0012600:	83 d2 00             	adc    edx,0x0
c0012603:	83 c4 04             	add    esp,0x4
c0012606:	5b                   	pop    ebx
c0012607:	f7 da                	neg    edx
c0012609:	5e                   	pop    esi
c001260a:	c3                   	ret    

c001260b <SysGetArgv(regs*)>:
c001260b:	83 ec 0c             	sub    esp,0xc
c001260e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012612:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012615:	85 c0                	test   eax,eax
c0012617:	78 2c                	js     c0012645 <SysGetArgv(regs*)+0x3a>
c0012619:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001261f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0012622:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0012628:	7d 1b                	jge    c0012645 <SysGetArgv(regs*)+0x3a>
c001262a:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0012631:	85 c0                	test   eax,eax
c0012633:	74 18                	je     c001264d <SysGetArgv(regs*)+0x42>
c0012635:	83 ec 08             	sub    esp,0x8
c0012638:	50                   	push   eax
c0012639:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001263c:	50                   	push   eax
c001263d:	e8 0e e0 fe ff       	call   c0000650 <strcpy>
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	31 c0                	xor    eax,eax
c0012647:	31 d2                	xor    edx,edx
c0012649:	83 c4 0c             	add    esp,0xc
c001264c:	c3                   	ret    
c001264d:	b8 01 00 00 00       	mov    eax,0x1
c0012652:	31 d2                	xor    edx,edx
c0012654:	83 c4 0c             	add    esp,0xc
c0012657:	c3                   	ret    

c0012658 <SysUSleep(regs*)>:
c0012658:	83 ec 1c             	sub    esp,0x1c
c001265b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001265f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012662:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012665:	6a 00                	push   0x0
c0012667:	6a 64                	push   0x64
c0012669:	52                   	push   edx
c001266a:	50                   	push   eax
c001266b:	e8 a4 25 01 00       	call   c0024c14 <__udivdi3>
c0012670:	83 c4 18             	add    esp,0x18
c0012673:	52                   	push   edx
c0012674:	50                   	push   eax
c0012675:	e8 9a 4f 00 00       	call   c0017614 <milliTenthSleep(unsigned long long)>
c001267a:	31 c0                	xor    eax,eax
c001267c:	31 d2                	xor    edx,edx
c001267e:	83 c4 1c             	add    esp,0x1c
c0012681:	c3                   	ret    

c0012682 <SysSpawn(regs*)>:
c0012682:	56                   	push   esi
c0012683:	53                   	push   ebx
c0012684:	83 ec 04             	sub    esp,0x4
c0012687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001268b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001268e:	85 f6                	test   esi,esi
c0012690:	75 0a                	jne    c001269c <SysSpawn(regs*)+0x1a>
c0012692:	83 c4 04             	add    esp,0x4
c0012695:	31 c0                	xor    eax,eax
c0012697:	5b                   	pop    ebx
c0012698:	31 d2                	xor    edx,edx
c001269a:	5e                   	pop    esi
c001269b:	c3                   	ret    
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	68 c4 07 00 00       	push   0x7c4
c00126a4:	e8 9b dd ff ff       	call   c0010444 <malloc>
c00126a9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126b2:	89 c6                	mov    esi,eax
c00126b4:	31 c0                	xor    eax,eax
c00126b6:	85 c9                	test   ecx,ecx
c00126b8:	74 08                	je     c00126c2 <SysSpawn(regs*)+0x40>
c00126ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00126c2:	52                   	push   edx
c00126c3:	50                   	push   eax
c00126c4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126c7:	50                   	push   eax
c00126c8:	56                   	push   esi
c00126c9:	e8 26 46 00 00       	call   c0016cf4 <Process::Process(char const*, Process*, char**)>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c00126d8:	75 b8                	jne    c0012692 <SysSpawn(regs*)+0x10>
c00126da:	83 ec 0c             	sub    esp,0xc
c00126dd:	56                   	push   esi
c00126de:	e8 d5 4b 00 00       	call   c00172b8 <Process::createUserThread()>
c00126e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	83 c4 04             	add    esp,0x4
c00126eb:	5b                   	pop    ebx
c00126ec:	89 c2                	mov    edx,eax
c00126ee:	c1 fa 1f             	sar    edx,0x1f
c00126f1:	5e                   	pop    esi
c00126f2:	c3                   	ret    

c00126f3 <SysGetEnv(regs*)>:
c00126f3:	57                   	push   edi
c00126f4:	56                   	push   esi
c00126f5:	53                   	push   ebx
c00126f6:	83 ec 1c             	sub    esp,0x1c
c00126f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012702:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0012705:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012708:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001270b:	51                   	push   ecx
c001270c:	e8 24 cc ff ff       	call   c000f335 <KeGetProcessTotalEnvCount(Process*)>
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	39 c7                	cmp    edi,eax
c0012716:	7c 12                	jl     c001272a <SysGetEnv(regs*)+0x37>
c0012718:	31 c0                	xor    eax,eax
c001271a:	31 d2                	xor    edx,edx
c001271c:	85 f6                	test   esi,esi
c001271e:	74 03                	je     c0012723 <SysGetEnv(regs*)+0x30>
c0012720:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012723:	83 c4 10             	add    esp,0x10
c0012726:	5b                   	pop    ebx
c0012727:	5e                   	pop    esi
c0012728:	5f                   	pop    edi
c0012729:	c3                   	ret    
c001272a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001272e:	83 ec 04             	sub    esp,0x4
c0012731:	57                   	push   edi
c0012732:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012738:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c001273b:	57                   	push   edi
c001273c:	50                   	push   eax
c001273d:	e8 13 cc ff ff       	call   c000f355 <KeGetProcessEnvPair(Process*, int)>
c0012742:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012749:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001274d:	83 c4 0c             	add    esp,0xc
c0012750:	85 d2                	test   edx,edx
c0012752:	75 23                	jne    c0012777 <SysGetEnv(regs*)+0x84>
c0012754:	83 ec 0c             	sub    esp,0xc
c0012757:	50                   	push   eax
c0012758:	e8 23 de fe ff       	call   c0000580 <strlen>
c001275d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012760:	89 c3                	mov    ebx,eax
c0012762:	e8 19 de fe ff       	call   c0000580 <strlen>
c0012767:	83 c4 10             	add    esp,0x10
c001276a:	31 d2                	xor    edx,edx
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012773:	5b                   	pop    ebx
c0012774:	5e                   	pop    esi
c0012775:	5f                   	pop    edi
c0012776:	c3                   	ret    
c0012777:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001277a:	83 ec 08             	sub    esp,0x8
c001277d:	50                   	push   eax
c001277e:	56                   	push   esi
c001277f:	e8 cc de fe ff       	call   c0000650 <strcpy>
c0012784:	58                   	pop    eax
c0012785:	5a                   	pop    edx
c0012786:	68 69 c6 02 c0       	push   0xc002c669
c001278b:	56                   	push   esi
c001278c:	e8 df e0 fe ff       	call   c0000870 <strcat>
c0012791:	59                   	pop    ecx
c0012792:	5b                   	pop    ebx
c0012793:	57                   	push   edi
c0012794:	56                   	push   esi
c0012795:	e8 d6 e0 fe ff       	call   c0000870 <strcat>
c001279a:	83 c4 10             	add    esp,0x10
c001279d:	31 c0                	xor    eax,eax
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	31 d2                	xor    edx,edx
c00127a4:	5b                   	pop    ebx
c00127a5:	5e                   	pop    esi
c00127a6:	5f                   	pop    edi
c00127a7:	c3                   	ret    

c00127a8 <SysSetFatAttrib(regs*)>:
c00127a8:	57                   	push   edi
c00127a9:	56                   	push   esi
c00127aa:	53                   	push   ebx
c00127ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127af:	83 ec 0c             	sub    esp,0xc
c00127b2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127b5:	68 14 01 00 00       	push   0x114
c00127ba:	e8 85 dc ff ff       	call   c0010444 <malloc>
c00127bf:	83 c4 0c             	add    esp,0xc
c00127c2:	89 c3                	mov    ebx,eax
c00127c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00127cc:	50                   	push   eax
c00127cd:	57                   	push   edi
c00127ce:	53                   	push   ebx
c00127cf:	e8 0c 67 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c00127d4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127d7:	83 c4 0c             	add    esp,0xc
c00127da:	0f b6 d4             	movzx  edx,ah
c00127dd:	0f b6 c0             	movzx  eax,al
c00127e0:	52                   	push   edx
c00127e1:	50                   	push   eax
c00127e2:	53                   	push   ebx
c00127e3:	e8 7e 69 ff ff       	call   c0009166 <File::chfatattr(unsigned char, unsigned char)>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	85 db                	test   ebx,ebx
c00127ed:	89 c6                	mov    esi,eax
c00127ef:	74 0c                	je     c00127fd <SysSetFatAttrib(regs*)+0x55>
c00127f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127f3:	83 ec 0c             	sub    esp,0xc
c00127f6:	53                   	push   ebx
c00127f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	5b                   	pop    ebx
c00127fe:	31 c0                	xor    eax,eax
c0012800:	85 f6                	test   esi,esi
c0012802:	0f 95 c0             	setne  al
c0012805:	31 d2                	xor    edx,edx
c0012807:	5e                   	pop    esi
c0012808:	f7 d8                	neg    eax
c001280a:	83 d2 00             	adc    edx,0x0
c001280d:	f7 da                	neg    edx
c001280f:	5f                   	pop    edi
c0012810:	c3                   	ret    

c0012811 <SysShutdown(regs*)>:
c0012811:	83 ec 1c             	sub    esp,0x1c
c0012814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012818:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001281b:	85 c9                	test   ecx,ecx
c001281d:	74 18                	je     c0012837 <SysShutdown(regs*)+0x26>
c001281f:	83 f9 01             	cmp    ecx,0x1
c0012822:	74 26                	je     c001284a <SysShutdown(regs*)+0x39>
c0012824:	83 f9 02             	cmp    ecx,0x2
c0012827:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001282c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012831:	74 24                	je     c0012857 <SysShutdown(regs*)+0x46>
c0012833:	83 c4 1c             	add    esp,0x1c
c0012836:	c3                   	ret    
c0012837:	e8 aa e9 ff ff       	call   c00111e6 <KeShutdown()>
c001283c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012841:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012846:	83 c4 1c             	add    esp,0x1c
c0012849:	c3                   	ret    
c001284a:	e8 cd e9 ff ff       	call   c001121c <KeSleep()>
c001284f:	31 c0                	xor    eax,eax
c0012851:	31 d2                	xor    edx,edx
c0012853:	83 c4 1c             	add    esp,0x1c
c0012856:	c3                   	ret    
c0012857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001285b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001285f:	e8 e8 e9 ff ff       	call   c001124c <KeRestart()>
c0012864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012868:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001286c:	eb c5                	jmp    c0012833 <SysShutdown(regs*)+0x22>

c001286e <SysPipe(regs*)>:
c001286e:	57                   	push   edi
c001286f:	56                   	push   esi
c0012870:	53                   	push   ebx
c0012871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012875:	83 ec 0c             	sub    esp,0xc
c0012878:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001287b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001287e:	6a 20                	push   0x20
c0012880:	e8 bf db ff ff       	call   c0010444 <malloc>
c0012885:	89 c3                	mov    ebx,eax
c0012887:	58                   	pop    eax
c0012888:	5a                   	pop    edx
c0012889:	68 00 50 00 00       	push   0x5000
c001288e:	53                   	push   ebx
c001288f:	e8 d2 e7 ff ff       	call   c0011066 <Pipe::Pipe(int)>
c0012894:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012897:	e8 e8 10 00 00       	call   c0013984 <UnixFile::getFileDescriptor()>
c001289c:	89 07                	mov    DWORD PTR [edi],eax
c001289e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128a1:	e8 de 10 00 00       	call   c0013984 <UnixFile::getFileDescriptor()>
c00128a6:	83 c4 10             	add    esp,0x10
c00128a9:	31 d2                	xor    edx,edx
c00128ab:	89 06                	mov    DWORD PTR [esi],eax
c00128ad:	31 c0                	xor    eax,eax
c00128af:	5b                   	pop    ebx
c00128b0:	5e                   	pop    esi
c00128b1:	5f                   	pop    edi
c00128b2:	c3                   	ret    

c00128b3 <SysGetUnixTime(regs*)>:
c00128b3:	53                   	push   ebx
c00128b4:	83 ec 10             	sub    esp,0x10
c00128b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00128be:	52                   	push   edx
c00128bf:	68 6b c6 02 c0       	push   0xc002c66b
c00128c4:	e8 9d 46 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c00128d0:	74 3b                	je     c001290d <SysGetUnixTime(regs*)+0x5a>
c00128d2:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00128d7:	83 ec 0c             	sub    esp,0xc
c00128da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128e0:	50                   	push   eax
c00128e1:	e8 ac 75 ff ff       	call   c0009e92 <Clock::timeInSecondsLocal()>
c00128e6:	83 c4 0c             	add    esp,0xc
c00128e9:	52                   	push   edx
c00128ea:	50                   	push   eax
c00128eb:	68 7f c6 02 c0       	push   0xc002c67f
c00128f0:	e8 71 46 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00128f5:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00128fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012900:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012904:	83 c4 18             	add    esp,0x18
c0012907:	5b                   	pop    ebx
c0012908:	e9 85 75 ff ff       	jmp    c0009e92 <Clock::timeInSecondsLocal()>
c001290d:	6b 0d 54 6b 03 c0 64 	imul   ecx,DWORD PTR ds:0xc0036b54,0x64
c0012914:	b8 64 00 00 00       	mov    eax,0x64
c0012919:	f7 25 50 6b 03 c0    	mul    DWORD PTR ds:0xc0036b50
c001291f:	83 c4 08             	add    esp,0x8
c0012922:	5b                   	pop    ebx
c0012923:	01 ca                	add    edx,ecx
c0012925:	c3                   	ret    

c0012926 <string_ends_with(char const*, char const*)>:
c0012926:	57                   	push   edi
c0012927:	56                   	push   esi
c0012928:	53                   	push   ebx
c0012929:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012934:	53                   	push   ebx
c0012935:	e8 46 dc fe ff       	call   c0000580 <strlen>
c001293a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001293d:	89 c6                	mov    esi,eax
c001293f:	e8 3c dc fe ff       	call   c0000580 <strlen>
c0012944:	83 c4 10             	add    esp,0x10
c0012947:	31 d2                	xor    edx,edx
c0012949:	39 c6                	cmp    esi,eax
c001294b:	7d 06                	jge    c0012953 <string_ends_with(char const*, char const*)+0x2d>
c001294d:	5b                   	pop    ebx
c001294e:	89 d0                	mov    eax,edx
c0012950:	5e                   	pop    esi
c0012951:	5f                   	pop    edi
c0012952:	c3                   	ret    
c0012953:	83 ec 08             	sub    esp,0x8
c0012956:	29 c6                	sub    esi,eax
c0012958:	57                   	push   edi
c0012959:	01 f3                	add    ebx,esi
c001295b:	53                   	push   ebx
c001295c:	e8 1f de fe ff       	call   c0000780 <strcmp>
c0012961:	83 c4 10             	add    esp,0x10
c0012964:	31 d2                	xor    edx,edx
c0012966:	5b                   	pop    ebx
c0012967:	5e                   	pop    esi
c0012968:	85 c0                	test   eax,eax
c001296a:	5f                   	pop    edi
c001296b:	0f 94 c2             	sete   dl
c001296e:	89 d0                	mov    eax,edx
c0012970:	c3                   	ret    

c0012971 <SysOpen(regs*)>:
c0012971:	56                   	push   esi
c0012972:	53                   	push   ebx
c0012973:	81 ec 04 01 00 00    	sub    esp,0x104
c0012979:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012980:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012983:	85 c0                	test   eax,eax
c0012985:	0f 84 c4 01 00 00    	je     c0012b4f <SysOpen(regs*)+0x1de>
c001298b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001298e:	85 c0                	test   eax,eax
c0012990:	0f 84 b9 01 00 00    	je     c0012b4f <SysOpen(regs*)+0x1de>
c0012996:	6a 00                	push   0x0
c0012998:	68 86 c6 02 c0       	push   0xc002c686
c001299d:	50                   	push   eax
c001299e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129a2:	56                   	push   esi
c00129a3:	e8 0c 62 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00129a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00129ab:	e8 d0 db fe ff       	call   c0000580 <strlen>
c00129b0:	83 c4 10             	add    esp,0x10
c00129b3:	83 e8 01             	sub    eax,0x1
c00129b6:	74 29                	je     c00129e1 <SysOpen(regs*)+0x70>
c00129b8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00129bc:	83 fa 2e             	cmp    edx,0x2e
c00129bf:	74 1c                	je     c00129dd <SysOpen(regs*)+0x6c>
c00129c1:	83 fa 3a             	cmp    edx,0x3a
c00129c4:	74 17                	je     c00129dd <SysOpen(regs*)+0x6c>
c00129c6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129ca:	83 e8 01             	sub    eax,0x1
c00129cd:	74 12                	je     c00129e1 <SysOpen(regs*)+0x70>
c00129cf:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129d3:	83 fa 3a             	cmp    edx,0x3a
c00129d6:	74 05                	je     c00129dd <SysOpen(regs*)+0x6c>
c00129d8:	83 fa 2e             	cmp    edx,0x2e
c00129db:	75 e9                	jne    c00129c6 <SysOpen(regs*)+0x55>
c00129dd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129e1:	83 ec 08             	sub    esp,0x8
c00129e4:	68 8a c6 02 c0       	push   0xc002c68a
c00129e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129ec:	50                   	push   eax
c00129ed:	e8 34 ff ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	85 c0                	test   eax,eax
c00129f7:	74 1d                	je     c0012a16 <SysOpen(regs*)+0xa5>
c00129f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129fc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012a02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a09:	81 c4 04 01 00 00    	add    esp,0x104
c0012a0f:	31 c0                	xor    eax,eax
c0012a11:	5b                   	pop    ebx
c0012a12:	31 d2                	xor    edx,edx
c0012a14:	5e                   	pop    esi
c0012a15:	c3                   	ret    
c0012a16:	83 ec 08             	sub    esp,0x8
c0012a19:	68 8f c6 02 c0       	push   0xc002c68f
c0012a1e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a21:	50                   	push   eax
c0012a22:	e8 ff fe ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	75 cb                	jne    c00129f9 <SysOpen(regs*)+0x88>
c0012a2e:	83 ec 08             	sub    esp,0x8
c0012a31:	68 8b c6 02 c0       	push   0xc002c68b
c0012a36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a39:	50                   	push   eax
c0012a3a:	e8 41 dd fe ff       	call   c0000780 <strcmp>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	85 c0                	test   eax,eax
c0012a44:	74 b3                	je     c00129f9 <SysOpen(regs*)+0x88>
c0012a46:	83 ec 08             	sub    esp,0x8
c0012a49:	68 8a c6 02 c0       	push   0xc002c68a
c0012a4e:	56                   	push   esi
c0012a4f:	e8 d2 fe ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	85 c0                	test   eax,eax
c0012a59:	75 9e                	jne    c00129f9 <SysOpen(regs*)+0x88>
c0012a5b:	83 ec 08             	sub    esp,0x8
c0012a5e:	68 94 c6 02 c0       	push   0xc002c694
c0012a63:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a66:	50                   	push   eax
c0012a67:	e8 ba fe ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	85 c0                	test   eax,eax
c0012a71:	0f 85 eb 00 00 00    	jne    c0012b62 <SysOpen(regs*)+0x1f1>
c0012a77:	83 ec 08             	sub    esp,0x8
c0012a7a:	68 99 c6 02 c0       	push   0xc002c699
c0012a7f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a82:	50                   	push   eax
c0012a83:	e8 9e fe ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	85 c0                	test   eax,eax
c0012a8d:	0f 85 cf 00 00 00    	jne    c0012b62 <SysOpen(regs*)+0x1f1>
c0012a93:	83 ec 08             	sub    esp,0x8
c0012a96:	68 95 c6 02 c0       	push   0xc002c695
c0012a9b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a9e:	51                   	push   ecx
c0012a9f:	e8 dc dc fe ff       	call   c0000780 <strcmp>
c0012aa4:	83 c4 10             	add    esp,0x10
c0012aa7:	85 c0                	test   eax,eax
c0012aa9:	0f 84 b3 00 00 00    	je     c0012b62 <SysOpen(regs*)+0x1f1>
c0012aaf:	83 ec 08             	sub    esp,0x8
c0012ab2:	68 94 c6 02 c0       	push   0xc002c694
c0012ab7:	56                   	push   esi
c0012ab8:	e8 69 fe ff ff       	call   c0012926 <string_ends_with(char const*, char const*)>
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	85 c0                	test   eax,eax
c0012ac2:	0f 85 9a 00 00 00    	jne    c0012b62 <SysOpen(regs*)+0x1f1>
c0012ac8:	83 ec 0c             	sub    esp,0xc
c0012acb:	68 14 01 00 00       	push   0x114
c0012ad0:	e8 6f d9 ff ff       	call   c0010444 <malloc>
c0012ad5:	83 c4 0c             	add    esp,0xc
c0012ad8:	89 c6                	mov    esi,eax
c0012ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012adf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012ae2:	50                   	push   eax
c0012ae3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012ae6:	52                   	push   edx
c0012ae7:	56                   	push   esi
c0012ae8:	e8 f3 63 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	85 f6                	test   esi,esi
c0012af2:	74 5b                	je     c0012b4f <SysOpen(regs*)+0x1de>
c0012af4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012af7:	0f b6 c2             	movzx  eax,dl
c0012afa:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012afd:	89 d0                	mov    eax,edx
c0012aff:	83 e0 01             	and    eax,0x1
c0012b02:	f6 c2 02             	test   dl,0x2
c0012b05:	74 03                	je     c0012b0a <SysOpen(regs*)+0x199>
c0012b07:	83 c8 02             	or     eax,0x2
c0012b0a:	f6 c2 04             	test   dl,0x4
c0012b0d:	74 03                	je     c0012b12 <SysOpen(regs*)+0x1a1>
c0012b0f:	83 c8 04             	or     eax,0x4
c0012b12:	f6 c2 08             	test   dl,0x8
c0012b15:	74 03                	je     c0012b1a <SysOpen(regs*)+0x1a9>
c0012b17:	83 c8 0a             	or     eax,0xa
c0012b1a:	80 e2 10             	and    dl,0x10
c0012b1d:	74 03                	je     c0012b22 <SysOpen(regs*)+0x1b1>
c0012b1f:	83 c8 12             	or     eax,0x12
c0012b22:	83 ec 08             	sub    esp,0x8
c0012b25:	50                   	push   eax
c0012b26:	56                   	push   esi
c0012b27:	e8 d2 63 ff ff       	call   c0008efe <File::open(FileOpenMode)>
c0012b2c:	83 c4 10             	add    esp,0x10
c0012b2f:	85 c0                	test   eax,eax
c0012b31:	75 1c                	jne    c0012b4f <SysOpen(regs*)+0x1de>
c0012b33:	83 ec 0c             	sub    esp,0xc
c0012b36:	56                   	push   esi
c0012b37:	e8 48 0e 00 00       	call   c0013984 <UnixFile::getFileDescriptor()>
c0012b3c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b3f:	83 c4 10             	add    esp,0x10
c0012b42:	89 02                	mov    DWORD PTR [edx],eax
c0012b44:	c1 f8 1f             	sar    eax,0x1f
c0012b47:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b4a:	e9 ba fe ff ff       	jmp    c0012a09 <SysOpen(regs*)+0x98>
c0012b4f:	81 c4 04 01 00 00    	add    esp,0x104
c0012b55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b5a:	5b                   	pop    ebx
c0012b5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b60:	5e                   	pop    esi
c0012b61:	c3                   	ret    
c0012b62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b65:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b6b:	e9 92 fe ff ff       	jmp    c0012a02 <SysOpen(regs*)+0x91>

c0012b70 <KeSystemCall(regs*, void*)>:
c0012b70:	53                   	push   ebx
c0012b71:	83 ec 08             	sub    esp,0x8
c0012b74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b7b:	83 f8 48             	cmp    eax,0x48
c0012b7e:	77 16                	ja     c0012b96 <KeSystemCall(regs*, void*)+0x26>
c0012b80:	8b 14 85 c0 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf440]
c0012b87:	85 d2                	test   edx,edx
c0012b89:	74 0b                	je     c0012b96 <KeSystemCall(regs*, void*)+0x26>
c0012b8b:	83 ec 0c             	sub    esp,0xc
c0012b8e:	53                   	push   ebx
c0012b8f:	ff d2                	call   edx
c0012b91:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b94:	eb 0d                	jmp    c0012ba3 <KeSystemCall(regs*, void*)+0x33>
c0012b96:	52                   	push   edx
c0012b97:	52                   	push   edx
c0012b98:	50                   	push   eax
c0012b99:	68 9e c6 02 c0       	push   0xc002c69e
c0012b9e:	e8 c3 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012bab:	83 c4 08             	add    esp,0x8
c0012bae:	31 d2                	xor    edx,edx
c0012bb0:	5b                   	pop    ebx
c0012bb1:	c3                   	ret    

c0012bb2 <VgaText::isAtty()>:
c0012bb2:	b0 01                	mov    al,0x1
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <VgaText::~VgaText()>:
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	ba 18 c7 02 c0       	mov    edx,0xc002c718
c0012bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc2:	89 10                	mov    DWORD PTR [eax],edx
c0012bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc8:	83 ec 0c             	sub    esp,0xc
c0012bcb:	50                   	push   eax
c0012bcc:	e8 a1 0f 00 00       	call   c0013b72 <UnixFile::~UnixFile()>
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	90                   	nop
c0012bd5:	83 c4 0c             	add    esp,0xc
c0012bd8:	c3                   	ret    
c0012bd9:	90                   	nop

c0012bda <VgaText::~VgaText()>:
c0012bda:	83 ec 0c             	sub    esp,0xc
c0012bdd:	83 ec 0c             	sub    esp,0xc
c0012be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be4:	e8 cd ff ff ff       	call   c0012bb6 <VgaText::~VgaText()>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	83 ec 08             	sub    esp,0x8
c0012bef:	68 84 01 00 00       	push   0x184
c0012bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bf8:	e8 3f b4 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0012bfd:	83 c4 10             	add    esp,0x10
c0012c00:	83 c4 0c             	add    esp,0xc
c0012c03:	c3                   	ret    

c0012c04 <VgaText::read(unsigned long long, void*, int*)>:
c0012c04:	83 ec 10             	sub    esp,0x10
c0012c07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c13:	e8 53 86 ff ff       	call   c000b26b <readKeyboard(VgaText*, char*, unsigned long)>
c0012c18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c1c:	89 02                	mov    DWORD PTR [edx],eax
c0012c1e:	31 c0                	xor    eax,eax
c0012c20:	83 c4 1c             	add    esp,0x1c
c0012c23:	c3                   	ret    

c0012c24 <setTerminalScrollLock(bool)>:
c0012c24:	c3                   	ret    

c0012c25 <doTerminalCycle()>:
c0012c25:	c3                   	ret    

c0012c26 <addToTerminalCycle(VgaText*)>:
c0012c26:	c3                   	ret    

c0012c27 <scrollTerminalScrollLock(int)>:
c0012c27:	c3                   	ret    

c0012c28 <VgaText::updateTitle()>:
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <VgaText::load()>:
c0012c2a:	c3                   	ret    
c0012c2b:	90                   	nop

c0012c2c <VgaText::updateCursor()>:
c0012c2c:	83 ec 14             	sub    esp,0x14
c0012c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c33:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012c36:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012c39:	e8 9e 9b 00 00       	call   c001c7dc <HalConsoleCursorUpdate(int, int)>
c0012c3e:	83 c4 1c             	add    esp,0x1c
c0012c41:	c3                   	ret    

c0012c42 <VgaText::doANSI_SGR(int)>:
c0012c42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c4a:	85 d2                	test   edx,edx
c0012c4c:	75 0b                	jne    c0012c59 <VgaText::doANSI_SGR(int)+0x17>
c0012c4e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012c51:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012c54:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012c57:	eb 59                	jmp    c0012cb2 <VgaText::doANSI_SGR(int)+0x70>
c0012c59:	83 fa 07             	cmp    edx,0x7
c0012c5c:	75 0b                	jne    c0012c69 <VgaText::doANSI_SGR(int)+0x27>
c0012c5e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012c61:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012c64:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012c67:	eb 49                	jmp    c0012cb2 <VgaText::doANSI_SGR(int)+0x70>
c0012c69:	83 fa 1b             	cmp    edx,0x1b
c0012c6c:	74 e0                	je     c0012c4e <VgaText::doANSI_SGR(int)+0xc>
c0012c6e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012c71:	83 f9 07             	cmp    ecx,0x7
c0012c74:	77 09                	ja     c0012c7f <VgaText::doANSI_SGR(int)+0x3d>
c0012c76:	8b 14 8d 20 0d 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcf2e0]
c0012c7d:	eb 20                	jmp    c0012c9f <VgaText::doANSI_SGR(int)+0x5d>
c0012c7f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012c82:	83 f9 07             	cmp    ecx,0x7
c0012c85:	77 09                	ja     c0012c90 <VgaText::doANSI_SGR(int)+0x4e>
c0012c87:	8b 14 8d 20 0d 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcf2e0]
c0012c8e:	eb 22                	jmp    c0012cb2 <VgaText::doANSI_SGR(int)+0x70>
c0012c90:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012c93:	83 f9 07             	cmp    ecx,0x7
c0012c96:	77 0b                	ja     c0012ca3 <VgaText::doANSI_SGR(int)+0x61>
c0012c98:	8b 14 95 d8 0b 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf428]
c0012c9f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012ca2:	c3                   	ret    
c0012ca3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012ca6:	83 f9 07             	cmp    ecx,0x7
c0012ca9:	77 0a                	ja     c0012cb5 <VgaText::doANSI_SGR(int)+0x73>
c0012cab:	8b 14 95 b0 0b 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf450]
c0012cb2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012cb5:	c3                   	ret    

c0012cb6 <VgaText::setDefaultBgColour(VgaColour)>:
c0012cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cbe:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012cc1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <VgaText::setDefaultFgColour(VgaColour)>:
c0012cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cce:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012cd1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012cd4:	c3                   	ret    
c0012cd5:	90                   	nop

c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012cd6:	53                   	push   ebx
c0012cd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012cdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012cdf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ce3:	51                   	push   ecx
c0012ce4:	e8 cd ff ff ff       	call   c0012cb6 <VgaText::setDefaultBgColour(VgaColour)>
c0012ce9:	58                   	pop    eax
c0012cea:	5a                   	pop    edx
c0012ceb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012cef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012cf3:	5b                   	pop    ebx
c0012cf4:	eb d0                	jmp    c0012cc6 <VgaText::setDefaultFgColour(VgaColour)>

c0012cf6 <VgaText::setTitleTextColour(VgaColour)>:
c0012cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cfe:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012d01:	c3                   	ret    

c0012d02 <VgaText::setTitleColour(VgaColour)>:
c0012d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012d0d:	c3                   	ret    

c0012d0e <VgaText::setTitle(char*)>:
c0012d0e:	c3                   	ret    
c0012d0f:	90                   	nop

c0012d10 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d14:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012d19:	83 e0 0f             	and    eax,0xf
c0012d1c:	c1 e2 04             	shl    edx,0x4
c0012d1f:	09 d0                	or     eax,edx
c0012d21:	c3                   	ret    

c0012d22 <VgaText::scrollScreen()>:
c0012d22:	55                   	push   ebp
c0012d23:	57                   	push   edi
c0012d24:	56                   	push   esi
c0012d25:	be 01 00 00 00       	mov    esi,0x1
c0012d2a:	53                   	push   ebx
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d32:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012d35:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012d3b:	31 ff                	xor    edi,edi
c0012d3d:	01 e9                	add    ecx,ebp
c0012d3f:	8a 01                	mov    al,BYTE PTR [ecx]
c0012d41:	83 fe 18             	cmp    esi,0x18
c0012d44:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012d4a:	75 20                	jne    c0012d6c <VgaText::scrollScreen()+0x4a>
c0012d4c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012d52:	74 15                	je     c0012d69 <VgaText::scrollScreen()+0x47>
c0012d54:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012d58:	50                   	push   eax
c0012d59:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012d5d:	50                   	push   eax
c0012d5e:	e8 ad ff ff ff       	call   c0012d10 <VgaText::combineColours(unsigned char, unsigned char)>
c0012d63:	5a                   	pop    edx
c0012d64:	5a                   	pop    edx
c0012d65:	88 01                	mov    BYTE PTR [ecx],al
c0012d67:	eb 03                	jmp    c0012d6c <VgaText::scrollScreen()+0x4a>
c0012d69:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012d6c:	47                   	inc    edi
c0012d6d:	41                   	inc    ecx
c0012d6e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012d74:	75 c9                	jne    c0012d3f <VgaText::scrollScreen()+0x1d>
c0012d76:	46                   	inc    esi
c0012d77:	83 fe 19             	cmp    esi,0x19
c0012d7a:	75 b9                	jne    c0012d35 <VgaText::scrollScreen()+0x13>
c0012d7c:	39 1d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,ebx
c0012d82:	75 1f                	jne    c0012da3 <VgaText::scrollScreen()+0x81>
c0012d84:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012d88:	74 05                	je     c0012d8f <VgaText::scrollScreen()+0x6d>
c0012d8a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012d8d:	eb 14                	jmp    c0012da3 <VgaText::scrollScreen()+0x81>
c0012d8f:	50                   	push   eax
c0012d90:	50                   	push   eax
c0012d91:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012d95:	50                   	push   eax
c0012d96:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012d9a:	50                   	push   eax
c0012d9b:	e8 d0 98 00 00       	call   c001c670 <HalConsoleScroll(int, int)>
c0012da0:	83 c4 10             	add    esp,0x10
c0012da3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012da7:	83 c4 0c             	add    esp,0xc
c0012daa:	5b                   	pop    ebx
c0012dab:	5e                   	pop    esi
c0012dac:	5f                   	pop    edi
c0012dad:	5d                   	pop    ebp
c0012dae:	e9 79 fe ff ff       	jmp    c0012c2c <VgaText::updateCursor()>
c0012db3:	90                   	nop

c0012db4 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012db4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012db9:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012dbe:	c1 e0 08             	shl    eax,0x8
c0012dc1:	09 d0                	or     eax,edx
c0012dc3:	c3                   	ret    

c0012dc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012dc4:	55                   	push   ebp
c0012dc5:	57                   	push   edi
c0012dc6:	56                   	push   esi
c0012dc7:	53                   	push   ebx
c0012dc8:	83 ec 1c             	sub    esp,0x1c
c0012dcb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012dcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012dd3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012dd7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012ddb:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012de2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012de6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012dea:	85 ed                	test   ebp,ebp
c0012dec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012df0:	75 14                	jne    c0012e06 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012df2:	c7 44 24 30 b2 c6 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c6b2
c0012dfa:	83 c4 1c             	add    esp,0x1c
c0012dfd:	5b                   	pop    ebx
c0012dfe:	5e                   	pop    esi
c0012dff:	5f                   	pop    edi
c0012e00:	5d                   	pop    ebp
c0012e01:	e9 92 da ff ff       	jmp    c0010898 <KePanic(char const*)>
c0012e06:	50                   	push   eax
c0012e07:	50                   	push   eax
c0012e08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012e0d:	50                   	push   eax
c0012e0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012e13:	50                   	push   eax
c0012e14:	e8 f7 fe ff ff       	call   c0012d10 <VgaText::combineColours(unsigned char, unsigned char)>
c0012e19:	5a                   	pop    edx
c0012e1a:	5a                   	pop    edx
c0012e1b:	0f b6 c0             	movzx  eax,al
c0012e1e:	0f be c9             	movsx  ecx,cl
c0012e21:	50                   	push   eax
c0012e22:	51                   	push   ecx
c0012e23:	e8 8c ff ff ff       	call   c0012db4 <VgaText::combineCharAndColour(char, unsigned char)>
c0012e28:	6b d6 50             	imul   edx,esi,0x50
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	01 da                	add    edx,ebx
c0012e30:	0f b7 d2             	movzx  edx,dx
c0012e33:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012e38:	39 3d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,edi
c0012e3e:	75 28                	jne    c0012e68 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012e40:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e48:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012e4c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012e50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012e58:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012e5c:	83 c4 1c             	add    esp,0x1c
c0012e5f:	5b                   	pop    ebx
c0012e60:	5e                   	pop    esi
c0012e61:	5f                   	pop    edi
c0012e62:	5d                   	pop    ebp
c0012e63:	e9 10 99 00 00       	jmp    c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012e68:	83 c4 1c             	add    esp,0x1c
c0012e6b:	5b                   	pop    ebx
c0012e6c:	5e                   	pop    esi
c0012e6d:	5f                   	pop    edi
c0012e6e:	5d                   	pop    ebp
c0012e6f:	c3                   	ret    

c0012e70 <VgaText::getCursorX()>:
c0012e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012e77:	c3                   	ret    

c0012e78 <VgaText::getCursorY()>:
c0012e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e7c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012e7f:	c3                   	ret    

c0012e80 <VgaText::setCursor(int, int)>:
c0012e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e88:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012e8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012e92:	e9 95 fd ff ff       	jmp    c0012c2c <VgaText::updateCursor()>

c0012e97 <setActiveTerminal(VgaText*)>:
c0012e97:	53                   	push   ebx
c0012e98:	83 ec 08             	sub    esp,0x8
c0012e9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e9f:	85 db                	test   ebx,ebx
c0012ea1:	75 11                	jne    c0012eb4 <setActiveTerminal(VgaText*)+0x1d>
c0012ea3:	c7 44 24 10 c2 c6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c6c2
c0012eab:	83 c4 08             	add    esp,0x8
c0012eae:	5b                   	pop    ebx
c0012eaf:	e9 e4 d9 ff ff       	jmp    c0010898 <KePanic(char const*)>
c0012eb4:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c0012eb9:	85 c0                	test   eax,eax
c0012ebb:	74 0c                	je     c0012ec9 <setActiveTerminal(VgaText*)+0x32>
c0012ebd:	83 ec 0c             	sub    esp,0xc
c0012ec0:	50                   	push   eax
c0012ec1:	e8 66 fd ff ff       	call   c0012c2c <VgaText::updateCursor()>
c0012ec6:	83 c4 10             	add    esp,0x10
c0012ec9:	50                   	push   eax
c0012eca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012ecd:	89 1d f4 71 03 c0    	mov    DWORD PTR ds:0xc00371f4,ebx
c0012ed3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012ed6:	53                   	push   ebx
c0012ed7:	e8 a4 ff ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c0012edc:	83 c4 18             	add    esp,0x18
c0012edf:	5b                   	pop    ebx
c0012ee0:	c3                   	ret    
c0012ee1:	90                   	nop

c0012ee2 <VgaText::clearScreen()>:
c0012ee2:	57                   	push   edi
c0012ee3:	56                   	push   esi
c0012ee4:	31 f6                	xor    esi,esi
c0012ee6:	53                   	push   ebx
c0012ee7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eeb:	52                   	push   edx
c0012eec:	6a 00                	push   0x0
c0012eee:	6a 00                	push   0x0
c0012ef0:	53                   	push   ebx
c0012ef1:	e8 8a ff ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012f00:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012f03:	7e 20                	jle    c0012f25 <VgaText::clearScreen()+0x43>
c0012f05:	31 ff                	xor    edi,edi
c0012f07:	50                   	push   eax
c0012f08:	50                   	push   eax
c0012f09:	56                   	push   esi
c0012f0a:	57                   	push   edi
c0012f0b:	47                   	inc    edi
c0012f0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012f0f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012f12:	6a 20                	push   0x20
c0012f14:	53                   	push   ebx
c0012f15:	e8 aa fe ff ff       	call   c0012dc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012f1a:	83 c4 20             	add    esp,0x20
c0012f1d:	83 ff 50             	cmp    edi,0x50
c0012f20:	75 e5                	jne    c0012f07 <VgaText::clearScreen()+0x25>
c0012f22:	46                   	inc    esi
c0012f23:	eb db                	jmp    c0012f00 <VgaText::clearScreen()+0x1e>
c0012f25:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012f2c:	5b                   	pop    ebx
c0012f2d:	5e                   	pop    esi
c0012f2e:	5f                   	pop    edi
c0012f2f:	c3                   	ret    

c0012f30 <VgaText::setCursorX(int)>:
c0012f30:	83 ec 10             	sub    esp,0x10
c0012f33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f37:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3e:	50                   	push   eax
c0012f3f:	e8 3c ff ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c0012f44:	83 c4 1c             	add    esp,0x1c
c0012f47:	c3                   	ret    

c0012f48 <VgaText::setCursorY(int)>:
c0012f48:	83 ec 10             	sub    esp,0x10
c0012f4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f53:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012f56:	50                   	push   eax
c0012f57:	e8 24 ff ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c0012f5c:	83 c4 1c             	add    esp,0x1c
c0012f5f:	c3                   	ret    

c0012f60 <VgaText::incrementCursor(bool)>:
c0012f60:	56                   	push   esi
c0012f61:	53                   	push   ebx
c0012f62:	51                   	push   ecx
c0012f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012f6e:	40                   	inc    eax
c0012f6f:	83 f8 50             	cmp    eax,0x50
c0012f72:	74 05                	je     c0012f79 <VgaText::incrementCursor(bool)+0x19>
c0012f74:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012f77:	eb 24                	jmp    c0012f9d <VgaText::incrementCursor(bool)+0x3d>
c0012f79:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012f80:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f83:	8d 50 01             	lea    edx,[eax+0x1]
c0012f86:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012f89:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012f8c:	75 0f                	jne    c0012f9d <VgaText::incrementCursor(bool)+0x3d>
c0012f8e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012f91:	83 ec 0c             	sub    esp,0xc
c0012f94:	53                   	push   ebx
c0012f95:	e8 88 fd ff ff       	call   c0012d22 <VgaText::scrollScreen()>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	89 f0                	mov    eax,esi
c0012f9f:	84 c0                	test   al,al
c0012fa1:	74 0c                	je     c0012faf <VgaText::incrementCursor(bool)+0x4f>
c0012fa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fa7:	5a                   	pop    edx
c0012fa8:	5b                   	pop    ebx
c0012fa9:	5e                   	pop    esi
c0012faa:	e9 7d fc ff ff       	jmp    c0012c2c <VgaText::updateCursor()>
c0012faf:	58                   	pop    eax
c0012fb0:	5b                   	pop    ebx
c0012fb1:	5e                   	pop    esi
c0012fb2:	c3                   	ret    
c0012fb3:	90                   	nop

c0012fb4 <VgaText::decrementCursor(bool)>:
c0012fb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012fbc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012fbf:	85 c0                	test   eax,eax
c0012fc1:	74 04                	je     c0012fc7 <VgaText::decrementCursor(bool)+0x13>
c0012fc3:	48                   	dec    eax
c0012fc4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012fc7:	84 c9                	test   cl,cl
c0012fc9:	74 09                	je     c0012fd4 <VgaText::decrementCursor(bool)+0x20>
c0012fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fcf:	e9 58 fc ff ff       	jmp    c0012c2c <VgaText::updateCursor()>
c0012fd4:	c3                   	ret    
c0012fd5:	90                   	nop

c0012fd6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012fd6:	53                   	push   ebx
c0012fd7:	83 ec 08             	sub    esp,0x8
c0012fda:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012fdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fe3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fe7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012feb:	83 f8 07             	cmp    eax,0x7
c0012fee:	75 21                	jne    c0013011 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012ff0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ff8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0013000:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0013008:	83 c4 08             	add    esp,0x8
c001300b:	5b                   	pop    ebx
c001300c:	e9 72 67 ff ff       	jmp    c0009783 <KeBeep(int, int, bool)>
c0013011:	83 f8 0d             	cmp    eax,0xd
c0013014:	75 09                	jne    c001301f <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0013016:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001301d:	eb 2d                	jmp    c001304c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001301f:	83 f8 0a             	cmp    eax,0xa
c0013022:	75 31                	jne    c0013055 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0013024:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001302b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001302e:	8d 50 01             	lea    edx,[eax+0x1]
c0013031:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0013034:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0013037:	75 0f                	jne    c0013048 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0013039:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	53                   	push   ebx
c0013040:	e8 dd fc ff ff       	call   c0012d22 <VgaText::scrollScreen()>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001304c:	83 c4 08             	add    esp,0x8
c001304f:	5b                   	pop    ebx
c0013050:	e9 d7 fb ff ff       	jmp    c0012c2c <VgaText::updateCursor()>
c0013055:	83 f8 08             	cmp    eax,0x8
c0013058:	75 25                	jne    c001307f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001305a:	50                   	push   eax
c001305b:	50                   	push   eax
c001305c:	6a 01                	push   0x1
c001305e:	53                   	push   ebx
c001305f:	e8 50 ff ff ff       	call   c0012fb4 <VgaText::decrementCursor(bool)>
c0013064:	5a                   	pop    edx
c0013065:	59                   	pop    ecx
c0013066:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013069:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001306c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001306f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013072:	6a 20                	push   0x20
c0013074:	53                   	push   ebx
c0013075:	e8 4a fd ff ff       	call   c0012dc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001307a:	83 c4 28             	add    esp,0x28
c001307d:	5b                   	pop    ebx
c001307e:	c3                   	ret    
c001307f:	83 ec 08             	sub    esp,0x8
c0013082:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013085:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013088:	51                   	push   ecx
c0013089:	52                   	push   edx
c001308a:	50                   	push   eax
c001308b:	53                   	push   ebx
c001308c:	e8 33 fd ff ff       	call   c0012dc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013091:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0013095:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001309d:	83 c4 28             	add    esp,0x28
c00130a0:	5b                   	pop    ebx
c00130a1:	e9 ba fe ff ff       	jmp    c0012f60 <VgaText::incrementCursor(bool)>

c00130a6 <VgaText::putchar(char)>:
c00130a6:	57                   	push   edi
c00130a7:	56                   	push   esi
c00130a8:	53                   	push   ebx
c00130a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130b1:	0f be c2             	movsx  eax,dl
c00130b4:	83 f8 5b             	cmp    eax,0x5b
c00130b7:	75 18                	jne    c00130d1 <VgaText::putchar(char)+0x2b>
c00130b9:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00130bd:	74 20                	je     c00130df <VgaText::putchar(char)+0x39>
c00130bf:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00130c5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00130cc:	e9 b8 00 00 00       	jmp    c0013189 <VgaText::putchar(char)+0xe3>
c00130d1:	83 f8 1b             	cmp    eax,0x1b
c00130d4:	75 09                	jne    c00130df <VgaText::putchar(char)+0x39>
c00130d6:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00130da:	e9 aa 00 00 00       	jmp    c0013189 <VgaText::putchar(char)+0xe3>
c00130df:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00130e3:	89 f9                	mov    ecx,edi
c00130e5:	84 c9                	test   cl,cl
c00130e7:	0f 84 8c 00 00 00    	je     c0013179 <VgaText::putchar(char)+0xd3>
c00130ed:	8d 4a c0             	lea    ecx,[edx-0x40]
c00130f0:	80 f9 3e             	cmp    cl,0x3e
c00130f3:	77 70                	ja     c0013165 <VgaText::putchar(char)+0xbf>
c00130f5:	83 f8 6d             	cmp    eax,0x6d
c00130f8:	75 3f                	jne    c0013139 <VgaText::putchar(char)+0x93>
c00130fa:	31 f6                	xor    esi,esi
c00130fc:	31 d2                	xor    edx,edx
c00130fe:	31 c0                	xor    eax,eax
c0013100:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0013103:	7e 25                	jle    c001312a <VgaText::putchar(char)+0x84>
c0013105:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001310a:	83 fa 3b             	cmp    edx,0x3b
c001310d:	75 0f                	jne    c001311e <VgaText::putchar(char)+0x78>
c001310f:	50                   	push   eax
c0013110:	53                   	push   ebx
c0013111:	e8 2c fb ff ff       	call   c0012c42 <VgaText::doANSI_SGR(int)>
c0013116:	31 d2                	xor    edx,edx
c0013118:	59                   	pop    ecx
c0013119:	58                   	pop    eax
c001311a:	31 c0                	xor    eax,eax
c001311c:	eb 09                	jmp    c0013127 <VgaText::putchar(char)+0x81>
c001311e:	6b c0 0a             	imul   eax,eax,0xa
c0013121:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0013125:	89 fa                	mov    edx,edi
c0013127:	46                   	inc    esi
c0013128:	eb d6                	jmp    c0013100 <VgaText::putchar(char)+0x5a>
c001312a:	84 d2                	test   dl,dl
c001312c:	74 2f                	je     c001315d <VgaText::putchar(char)+0xb7>
c001312e:	50                   	push   eax
c001312f:	53                   	push   ebx
c0013130:	e8 0d fb ff ff       	call   c0012c42 <VgaText::doANSI_SGR(int)>
c0013135:	58                   	pop    eax
c0013136:	5a                   	pop    edx
c0013137:	eb 24                	jmp    c001315d <VgaText::putchar(char)+0xb7>
c0013139:	83 f8 4a             	cmp    eax,0x4a
c001313c:	75 1f                	jne    c001315d <VgaText::putchar(char)+0xb7>
c001313e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0013142:	75 19                	jne    c001315d <VgaText::putchar(char)+0xb7>
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	53                   	push   ebx
c0013148:	e8 95 fd ff ff       	call   c0012ee2 <VgaText::clearScreen()>
c001314d:	83 c4 0c             	add    esp,0xc
c0013150:	6a 00                	push   0x0
c0013152:	6a 00                	push   0x0
c0013154:	53                   	push   ebx
c0013155:	e8 26 fd ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0013163:	eb 24                	jmp    c0013189 <VgaText::putchar(char)+0xe3>
c0013165:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0013168:	83 f8 0e             	cmp    eax,0xe
c001316b:	7f 1c                	jg     c0013189 <VgaText::putchar(char)+0xe3>
c001316d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013170:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0013173:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0013177:	eb 10                	jmp    c0013189 <VgaText::putchar(char)+0xe3>
c0013179:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001317c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001317f:	50                   	push   eax
c0013180:	53                   	push   ebx
c0013181:	e8 50 fe ff ff       	call   c0012fd6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	5b                   	pop    ebx
c001318a:	5e                   	pop    esi
c001318b:	5f                   	pop    edi
c001318c:	c3                   	ret    
c001318d:	90                   	nop

c001318e <VgaText::putx(unsigned int)>:
c001318e:	57                   	push   edi
c001318f:	b9 11 00 00 00       	mov    ecx,0x11
c0013194:	56                   	push   esi
c0013195:	be d0 c6 02 c0       	mov    esi,0xc002c6d0
c001319a:	53                   	push   ebx
c001319b:	83 ec 20             	sub    esp,0x20
c001319e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00131a2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00131a6:	fc                   	cld    
c00131a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00131a9:	be 08 00 00 00       	mov    esi,0x8
c00131ae:	50                   	push   eax
c00131af:	50                   	push   eax
c00131b0:	89 d8                	mov    eax,ebx
c00131b2:	c1 e8 1c             	shr    eax,0x1c
c00131b5:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00131ba:	c1 e3 04             	shl    ebx,0x4
c00131bd:	50                   	push   eax
c00131be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00131c2:	e8 df fe ff ff       	call   c00130a6 <VgaText::putchar(char)>
c00131c7:	83 c4 10             	add    esp,0x10
c00131ca:	4e                   	dec    esi
c00131cb:	75 e1                	jne    c00131ae <VgaText::putx(unsigned int)+0x20>
c00131cd:	83 c4 20             	add    esp,0x20
c00131d0:	5b                   	pop    ebx
c00131d1:	5e                   	pop    esi
c00131d2:	5f                   	pop    edi
c00131d3:	c3                   	ret    

c00131d4 <VgaText::puts(char const*)>:
c00131d4:	53                   	push   ebx
c00131d5:	83 ec 08             	sub    esp,0x8
c00131d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131dc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00131df:	85 c0                	test   eax,eax
c00131e1:	74 12                	je     c00131f5 <VgaText::puts(char const*)+0x21>
c00131e3:	51                   	push   ecx
c00131e4:	43                   	inc    ebx
c00131e5:	51                   	push   ecx
c00131e6:	50                   	push   eax
c00131e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131eb:	e8 b6 fe ff ff       	call   c00130a6 <VgaText::putchar(char)>
c00131f0:	83 c4 10             	add    esp,0x10
c00131f3:	eb e7                	jmp    c00131dc <VgaText::puts(char const*)+0x8>
c00131f5:	83 c4 08             	add    esp,0x8
c00131f8:	5b                   	pop    ebx
c00131f9:	c3                   	ret    

c00131fa <VgaText::write(unsigned long long, void*, int*)>:
c00131fa:	55                   	push   ebp
c00131fb:	57                   	push   edi
c00131fc:	56                   	push   esi
c00131fd:	53                   	push   ebx
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013205:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0013209:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001320d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0013214:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0013217:	39 eb                	cmp    ebx,ebp
c0013219:	74 13                	je     c001322e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001321b:	50                   	push   eax
c001321c:	43                   	inc    ebx
c001321d:	50                   	push   eax
c001321e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0013222:	50                   	push   eax
c0013223:	56                   	push   esi
c0013224:	e8 7d fe ff ff       	call   c00130a6 <VgaText::putchar(char)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	eb e9                	jmp    c0013217 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001322e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0013235:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013239:	89 38                	mov    DWORD PTR [eax],edi
c001323b:	83 c4 0c             	add    esp,0xc
c001323e:	31 c0                	xor    eax,eax
c0013240:	5b                   	pop    ebx
c0013241:	5e                   	pop    esi
c0013242:	5f                   	pop    edi
c0013243:	5d                   	pop    ebp
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0013246:	55                   	push   ebp
c0013247:	57                   	push   edi
c0013248:	56                   	push   esi
c0013249:	53                   	push   ebx
c001324a:	83 ec 1c             	sub    esp,0x1c
c001324d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013251:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013255:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013259:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001325d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0013260:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013264:	85 db                	test   ebx,ebx
c0013266:	75 14                	jne    c001327c <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0013268:	c7 44 24 30 e1 c6 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c6e1
c0013270:	83 c4 1c             	add    esp,0x1c
c0013273:	5b                   	pop    ebx
c0013274:	5e                   	pop    esi
c0013275:	5f                   	pop    edi
c0013276:	5d                   	pop    ebp
c0013277:	e9 1c d6 ff ff       	jmp    c0010898 <KePanic(char const*)>
c001327c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0013283:	50                   	push   eax
c0013284:	50                   	push   eax
c0013285:	89 e8                	mov    eax,ebp
c0013287:	0f b6 c0             	movzx  eax,al
c001328a:	50                   	push   eax
c001328b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013290:	50                   	push   eax
c0013291:	e8 7a fa ff ff       	call   c0012d10 <VgaText::combineColours(unsigned char, unsigned char)>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c001329d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00132a0:	0f b6 c0             	movzx  eax,al
c00132a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132a7:	0f b7 c9             	movzx  ecx,cx
c00132aa:	01 c9                	add    ecx,ecx
c00132ac:	01 cb                	add    ebx,ecx
c00132ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00132b1:	85 c0                	test   eax,eax
c00132b3:	0f 84 ef 00 00 00    	je     c00133a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00132b9:	83 f8 0d             	cmp    eax,0xd
c00132bc:	75 0c                	jne    c00132ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00132be:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00132c5:	e9 d8 00 00 00       	jmp    c00133a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00132ca:	83 f8 0a             	cmp    eax,0xa
c00132cd:	75 44                	jne    c0013313 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00132cf:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00132d6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00132d9:	8d 48 01             	lea    ecx,[eax+0x1]
c00132dc:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00132df:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00132e2:	75 0f                	jne    c00132f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00132e4:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00132e7:	83 ec 0c             	sub    esp,0xc
c00132ea:	57                   	push   edi
c00132eb:	e8 32 fa ff ff       	call   c0012d22 <VgaText::scrollScreen()>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	83 ec 0c             	sub    esp,0xc
c00132f6:	57                   	push   edi
c00132f7:	e8 30 f9 ff ff       	call   c0012c2c <VgaText::updateCursor()>
c00132fc:	83 c4 10             	add    esp,0x10
c00132ff:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013303:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0013306:	0f b7 db             	movzx  ebx,bx
c0013309:	01 db                	add    ebx,ebx
c001330b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001330e:	e9 8f 00 00 00       	jmp    c00133a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013313:	83 f8 08             	cmp    eax,0x8
c0013316:	75 34                	jne    c001334c <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0013318:	51                   	push   ecx
c0013319:	51                   	push   ecx
c001331a:	6a 01                	push   0x1
c001331c:	57                   	push   edi
c001331d:	e8 92 fc ff ff       	call   c0012fb4 <VgaText::decrementCursor(bool)>
c0013322:	5b                   	pop    ebx
c0013323:	58                   	pop    eax
c0013324:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0013327:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001332a:	ff 77 30             	push   DWORD PTR [edi+0x30]
c001332d:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0013330:	6a 20                	push   0x20
c0013332:	57                   	push   edi
c0013333:	e8 8c fa ff ff       	call   c0012dc4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013338:	83 c4 20             	add    esp,0x20
c001333b:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001333f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0013342:	0f b7 db             	movzx  ebx,bx
c0013345:	01 db                	add    ebx,ebx
c0013347:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001334a:	eb 56                	jmp    c00133a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001334c:	52                   	push   edx
c001334d:	52                   	push   edx
c001334e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013352:	50                   	push   eax
c0013353:	e8 5c fa ff ff       	call   c0012db4 <VgaText::combineCharAndColour(char, unsigned char)>
c0013358:	83 c4 10             	add    esp,0x10
c001335b:	66 89 03             	mov    WORD PTR [ebx],ax
c001335e:	39 3d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,edi
c0013364:	75 1a                	jne    c0013380 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001336c:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001336f:	55                   	push   ebp
c0013370:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013374:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013377:	50                   	push   eax
c0013378:	e8 fb 93 00 00       	call   c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001337d:	83 c4 20             	add    esp,0x20
c0013380:	50                   	push   eax
c0013381:	83 c3 02             	add    ebx,0x2
c0013384:	50                   	push   eax
c0013385:	6a 00                	push   0x0
c0013387:	57                   	push   edi
c0013388:	e8 d3 fb ff ff       	call   c0012f60 <VgaText::incrementCursor(bool)>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0013394:	75 0c                	jne    c00133a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013396:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001339a:	0f b7 db             	movzx  ebx,bx
c001339d:	01 db                	add    ebx,ebx
c001339f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00133a2:	46                   	inc    esi
c00133a3:	e9 06 ff ff ff       	jmp    c00132ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	57                   	push   edi
c00133ac:	e8 7b f8 ff ff       	call   c0012c2c <VgaText::updateCursor()>
c00133b1:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00133b8:	83 c4 2c             	add    esp,0x2c
c00133bb:	5b                   	pop    ebx
c00133bc:	5e                   	pop    esi
c00133bd:	5f                   	pop    edi
c00133be:	5d                   	pop    ebp
c00133bf:	c3                   	ret    

c00133c0 <VgaText::VgaText(char const*)>:
c00133c0:	56                   	push   esi
c00133c1:	53                   	push   ebx
c00133c2:	83 ec 04             	sub    esp,0x4
c00133c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c9:	83 ec 08             	sub    esp,0x8
c00133cc:	6a 00                	push   0x0
c00133ce:	50                   	push   eax
c00133cf:	e8 b8 05 00 00       	call   c001398c <UnixFile::UnixFile(int)>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	ba 18 c7 02 c0       	mov    edx,0xc002c718
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	89 10                	mov    DWORD PTR [eax],edx
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00133ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0013400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013404:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0013413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013417:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013422:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0013429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	68 f1 c6 02 c0       	push   0xc002c6f1
c001343c:	e8 25 3b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001344f:	83 ec 0c             	sub    esp,0xc
c0013452:	6a 01                	push   0x1
c0013454:	e8 86 09 00 00       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	89 c2                	mov    edx,eax
c001345e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013462:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013465:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c001346b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013472:	89 c6                	mov    esi,eax
c0013474:	e8 19 d6 ff ff       	call   c0010a92 <Phys::allocatePage()>
c0013479:	68 05 0c 00 00       	push   0xc05
c001347e:	56                   	push   esi
c001347f:	50                   	push   eax
c0013480:	53                   	push   ebx
c0013481:	e8 32 10 00 00       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013490:	83 ec 04             	sub    esp,0x4
c0013493:	68 a0 0f 00 00       	push   0xfa0
c0013498:	6a 00                	push   0x0
c001349a:	50                   	push   eax
c001349b:	e8 50 d0 fe ff       	call   c00004f0 <memset>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	83 ec 04             	sub    esp,0x4
c00134a6:	6a 00                	push   0x0
c00134a8:	6a 07                	push   0x7
c00134aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ae:	e8 23 f8 ff ff       	call   c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	83 ec 04             	sub    esp,0x4
c00134b9:	6a 00                	push   0x0
c00134bb:	6a 00                	push   0x0
c00134bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c1:	e8 ba f9 ff ff       	call   c0012e80 <VgaText::setCursor(int, int)>
c00134c6:	83 c4 10             	add    esp,0x10
c00134c9:	83 ec 0c             	sub    esp,0xc
c00134cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d0:	e8 0d fa ff ff       	call   c0012ee2 <VgaText::clearScreen()>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134dc:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	05 82 00 00 00       	add    eax,0x82
c00134e9:	83 ec 04             	sub    esp,0x4
c00134ec:	68 80 00 00 00       	push   0x80
c00134f1:	6a 00                	push   0x0
c00134f3:	50                   	push   eax
c00134f4:	e8 f7 cf fe ff       	call   c00004f0 <memset>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013500:	05 02 01 00 00       	add    eax,0x102
c0013505:	83 ec 04             	sub    esp,0x4
c0013508:	68 80 00 00 00       	push   0x80
c001350d:	6a 00                	push   0x0
c001350f:	50                   	push   eax
c0013510:	e8 db cf fe ff       	call   c00004f0 <memset>
c0013515:	83 c4 10             	add    esp,0x10
c0013518:	90                   	nop
c0013519:	83 c4 04             	add    esp,0x4
c001351c:	5b                   	pop    ebx
c001351d:	5e                   	pop    esi
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <VgaText::receiveKey(unsigned char)>:
c0013520:	55                   	push   ebp
c0013521:	57                   	push   edi
c0013522:	56                   	push   esi
c0013523:	53                   	push   ebx
c0013524:	83 ec 2c             	sub    esp,0x2c
c0013527:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001352b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001352f:	89 fd                	mov    ebp,edi
c0013531:	81 e5 ff 00 00 00    	and    ebp,0xff
c0013537:	0f 84 48 01 00 00    	je     c0013685 <VgaText::receiveKey(unsigned char)+0x165>
c001353d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0013543:	83 fd 08             	cmp    ebp,0x8
c0013546:	75 6a                	jne    c00135b2 <VgaText::receiveKey(unsigned char)+0x92>
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	56                   	push   esi
c001354c:	e8 2f d0 fe ff       	call   c0000580 <strlen>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	85 c0                	test   eax,eax
c0013556:	0f 84 ef 00 00 00    	je     c001364b <VgaText::receiveKey(unsigned char)+0x12b>
c001355c:	50                   	push   eax
c001355d:	50                   	push   eax
c001355e:	6a 08                	push   0x8
c0013560:	53                   	push   ebx
c0013561:	e8 40 fb ff ff       	call   c00130a6 <VgaText::putchar(char)>
c0013566:	89 34 24             	mov    DWORD PTR [esp],esi
c0013569:	e8 12 d0 fe ff       	call   c0000580 <strlen>
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0013579:	83 fa 1f             	cmp    edx,0x1f
c001357c:	89 d0                	mov    eax,edx
c001357e:	7f 1c                	jg     c001359c <VgaText::receiveKey(unsigned char)+0x7c>
c0013580:	83 e8 08             	sub    eax,0x8
c0013583:	3c 02                	cmp    al,0x2
c0013585:	76 15                	jbe    c001359c <VgaText::receiveKey(unsigned char)+0x7c>
c0013587:	83 fa 0d             	cmp    edx,0xd
c001358a:	74 10                	je     c001359c <VgaText::receiveKey(unsigned char)+0x7c>
c001358c:	57                   	push   edi
c001358d:	57                   	push   edi
c001358e:	68 04 c7 02 c0       	push   0xc002c704
c0013593:	53                   	push   ebx
c0013594:	e8 3b fc ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	83 ec 0c             	sub    esp,0xc
c001359f:	56                   	push   esi
c00135a0:	e8 db cf fe ff       	call   c0000580 <strlen>
c00135a5:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00135ad:	e9 96 00 00 00       	jmp    c0013648 <VgaText::receiveKey(unsigned char)+0x128>
c00135b2:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	50                   	push   eax
c00135bc:	e8 bf cf fe ff       	call   c0000580 <strlen>
c00135c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00135c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135c8:	e8 b3 cf fe ff       	call   c0000580 <strlen>
c00135cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135d1:	83 c4 10             	add    esp,0x10
c00135d4:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00135d8:	3d 80 00 00 00       	cmp    eax,0x80
c00135dd:	0f 87 a2 00 00 00    	ja     c0013685 <VgaText::receiveKey(unsigned char)+0x165>
c00135e3:	8d 47 ff             	lea    eax,[edi-0x1]
c00135e6:	3c 1e                	cmp    al,0x1e
c00135e8:	77 35                	ja     c001361f <VgaText::receiveKey(unsigned char)+0xff>
c00135ea:	8d 47 f7             	lea    eax,[edi-0x9]
c00135ed:	3c 01                	cmp    al,0x1
c00135ef:	76 2e                	jbe    c001361f <VgaText::receiveKey(unsigned char)+0xff>
c00135f1:	83 fd 0d             	cmp    ebp,0xd
c00135f4:	74 29                	je     c001361f <VgaText::receiveKey(unsigned char)+0xff>
c00135f6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00135f9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00135fc:	68 0a c7 02 c0       	push   0xc002c70a
c0013601:	53                   	push   ebx
c0013602:	e8 3f fc ff ff       	call   c0013246 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0013607:	8d 47 40             	lea    eax,[edi+0x40]
c001360a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001360d:	0f b6 c0             	movzx  eax,al
c0013610:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0013613:	50                   	push   eax
c0013614:	53                   	push   ebx
c0013615:	e8 bc f9 ff ff       	call   c0012fd6 <VgaText::putchar(char, VgaColour, VgaColour)>
c001361a:	83 c4 20             	add    esp,0x20
c001361d:	eb 11                	jmp    c0013630 <VgaText::receiveKey(unsigned char)+0x110>
c001361f:	51                   	push   ecx
c0013620:	89 f8                	mov    eax,edi
c0013622:	51                   	push   ecx
c0013623:	0f be c0             	movsx  eax,al
c0013626:	50                   	push   eax
c0013627:	53                   	push   ebx
c0013628:	e8 79 fa ff ff       	call   c00130a6 <VgaText::putchar(char)>
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013635:	89 f8                	mov    eax,edi
c0013637:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001363b:	52                   	push   edx
c001363c:	52                   	push   edx
c001363d:	8d 44 24 26          	lea    eax,[esp+0x26]
c0013641:	50                   	push   eax
c0013642:	56                   	push   esi
c0013643:	e8 28 d2 fe ff       	call   c0000870 <strcat>
c0013648:	83 c4 10             	add    esp,0x10
c001364b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0013652:	75 0f                	jne    c0013663 <VgaText::receiveKey(unsigned char)+0x143>
c0013654:	83 fd 1c             	cmp    ebp,0x1c
c0013657:	77 2c                	ja     c0013685 <VgaText::receiveKey(unsigned char)+0x165>
c0013659:	b8 08 04 00 10       	mov    eax,0x10000408
c001365e:	0f a3 e8             	bt     eax,ebp
c0013661:	73 22                	jae    c0013685 <VgaText::receiveKey(unsigned char)+0x165>
c0013663:	50                   	push   eax
c0013664:	81 c3 02 01 00 00    	add    ebx,0x102
c001366a:	50                   	push   eax
c001366b:	56                   	push   esi
c001366c:	53                   	push   ebx
c001366d:	e8 fe d1 fe ff       	call   c0000870 <strcat>
c0013672:	83 c4 0c             	add    esp,0xc
c0013675:	68 80 00 00 00       	push   0x80
c001367a:	6a 00                	push   0x0
c001367c:	56                   	push   esi
c001367d:	e8 6e ce fe ff       	call   c00004f0 <memset>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	83 c4 2c             	add    esp,0x2c
c0013688:	5b                   	pop    ebx
c0013689:	5e                   	pop    esi
c001368a:	5f                   	pop    edi
c001368b:	5d                   	pop    ebp
c001368c:	c3                   	ret    
c001368d:	90                   	nop

c001368e <VgaText::doUpdate()>:
c001368e:	c3                   	ret    
c001368f:	90                   	nop

c0013690 <TSS::TSS()>:
c0013690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013694:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001369b:	90                   	nop
c001369c:	c3                   	ret    
c001369d:	90                   	nop
c001369e:	66 90                	xchg   ax,ax

c00136a0 <TSS::setESP(unsigned long)>:
c00136a0:	55                   	push   ebp
c00136a1:	89 e5                	mov    ebp,esp
c00136a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136a9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00136ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00136af:	90                   	nop
c00136b0:	5d                   	pop    ebp
c00136b1:	c3                   	ret    
c00136b2:	66 90                	xchg   ax,ax

c00136b4 <TSS::flush()>:
c00136b4:	55                   	push   ebp
c00136b5:	89 e5                	mov    ebp,esp
c00136b7:	83 ec 10             	sub    esp,0x10
c00136ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00136bf:	83 c8 03             	or     eax,0x3
c00136c2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00136c6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00136ca:	66 89 d0             	mov    ax,dx
c00136cd:	0f 00 d8             	ltr    ax
c00136d0:	90                   	nop
c00136d1:	c9                   	leave  
c00136d2:	c3                   	ret    
c00136d3:	90                   	nop

c00136d4 <TSS::setup(unsigned long, unsigned long)>:
c00136d4:	55                   	push   ebp
c00136d5:	89 e5                	mov    ebp,esp
c00136d7:	83 ec 18             	sub    esp,0x18
c00136da:	83 ec 0c             	sub    esp,0xc
c00136dd:	6a 68                	push   0x68
c00136df:	e8 60 cd ff ff       	call   c0010444 <malloc>
c00136e4:	83 c4 10             	add    esp,0x10
c00136e7:	89 c2                	mov    edx,eax
c00136e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00136ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136f5:	83 ec 08             	sub    esp,0x8
c00136f8:	50                   	push   eax
c00136f9:	68 2c c7 02 c0       	push   0xc002c72c
c00136fe:	e8 63 38 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001370c:	83 ec 04             	sub    esp,0x4
c001370f:	6a 68                	push   0x68
c0013711:	6a 00                	push   0x0
c0013713:	50                   	push   eax
c0013714:	e8 d7 cd fe ff       	call   c00004f0 <memset>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001371f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013722:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0013728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001372b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001372e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0013734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013737:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001373a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001373d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013746:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001374c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001374f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013752:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0013758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001375b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001375e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0013764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001376a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0013770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013776:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001377c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001377f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013782:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0013788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001378b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001378e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0013791:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0013794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013797:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001379a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001379d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00137a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00137a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137a6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00137ad:	83 ec 0c             	sub    esp,0xc
c00137b0:	68 43 c7 02 c0       	push   0xc002c743
c00137b5:	e8 ac 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00137c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137c3:	0f 20 da             	mov    edx,cr3
c00137c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00137c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00137cc:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00137cf:	83 ec 0c             	sub    esp,0xc
c00137d2:	68 46 c7 02 c0       	push   0xc002c746
c00137d7:	e8 8a 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00137dc:	83 c4 10             	add    esp,0x10
c00137df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00137e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137e5:	83 ec 08             	sub    esp,0x8
c00137e8:	50                   	push   eax
c00137e9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00137ec:	50                   	push   eax
c00137ed:	e8 a2 bd ff ff       	call   c000f594 <GDTEntry::setBase(unsigned int)>
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	83 ec 08             	sub    esp,0x8
c00137f8:	6a 68                	push   0x68
c00137fa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00137fd:	50                   	push   eax
c00137fe:	e8 ad bd ff ff       	call   c000f5b0 <GDTEntry::setLimit(unsigned int)>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001380a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001380d:	83 e0 0f             	and    eax,0xf
c0013810:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013813:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013816:	83 c8 40             	or     eax,0x40
c0013819:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	68 49 c7 02 c0       	push   0xc002c749
c0013824:	e8 3d 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0013831:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013837:	83 ec 08             	sub    esp,0x8
c001383a:	50                   	push   eax
c001383b:	68 4c c7 02 c0       	push   0xc002c74c
c0013840:	e8 21 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001384d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013853:	05 64 01 00 00       	add    eax,0x164
c0013858:	83 ec 04             	sub    esp,0x4
c001385b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001385e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0013861:	50                   	push   eax
c0013862:	e8 7d bd ff ff       	call   c000f5e4 <GDT::addEntry(GDTEntry)>
c0013867:	83 c4 10             	add    esp,0x10
c001386a:	89 c2                	mov    edx,eax
c001386c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001386f:	89 10                	mov    DWORD PTR [eax],edx
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	68 61 c7 02 c0       	push   0xc002c761
c0013879:	e8 e8 36 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001387e:	83 c4 10             	add    esp,0x10
c0013881:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0013886:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001388c:	05 64 01 00 00       	add    eax,0x164
c0013891:	83 ec 0c             	sub    esp,0xc
c0013894:	50                   	push   eax
c0013895:	e8 74 bd ff ff       	call   c000f60e <GDT::flush()>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	83 ec 0c             	sub    esp,0xc
c00138a0:	68 64 c7 02 c0       	push   0xc002c764
c00138a5:	e8 bc 36 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00138b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138b2:	c9                   	leave  
c00138b3:	c3                   	ret    

c00138b4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00138b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00138bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00138bf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00138c4:	75 08                	jne    c00138ce <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00138c6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00138cc:	eb 38                	jmp    c0013906 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00138ce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00138d3:	75 17                	jne    c00138ec <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00138d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138dd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00138e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00138e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138e9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00138ec:	89 c1                	mov    ecx,eax
c00138ee:	83 e1 fd             	and    ecx,0xfffffffd
c00138f1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00138f7:	74 cd                	je     c00138c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00138f9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00138fe:	83 e0 ef             	and    eax,0xffffffef
c0013901:	83 f8 08             	cmp    eax,0x8
c0013904:	76 c0                	jbe    c00138c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013906:	31 c0                	xor    eax,eax
c0013908:	c3                   	ret    
c0013909:	90                   	nop

c001390a <ReservedFilename::isAtty()>:
c001390a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001390e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013911:	31 c0                	xor    eax,eax
c0013913:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013919:	74 09                	je     c0013924 <ReservedFilename::isAtty()+0x1a>
c001391b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013921:	0f 94 c0             	sete   al
c0013924:	c3                   	ret    
c0013925:	90                   	nop

c0013926 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0013926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001392a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001392e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013935:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001393a:	75 08                	jne    c0013944 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001393c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013942:	eb 3d                	jmp    c0013981 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013944:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013949:	75 17                	jne    c0013962 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001394b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013950:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013953:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013959:	8b 10                	mov    edx,DWORD PTR [eax]
c001395b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001395f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013962:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013967:	75 04                	jne    c001396d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013969:	89 0a                	mov    DWORD PTR [edx],ecx
c001396b:	eb 14                	jmp    c0013981 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001396d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013972:	74 c8                	je     c001393c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013974:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013979:	83 e0 ef             	and    eax,0xffffffef
c001397c:	83 f8 08             	cmp    eax,0x8
c001397f:	76 bb                	jbe    c001393c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013981:	31 c0                	xor    eax,eax
c0013983:	c3                   	ret    

c0013984 <UnixFile::getFileDescriptor()>:
c0013984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001398b:	c3                   	ret    

c001398c <UnixFile::UnixFile(int)>:
c001398c:	53                   	push   ebx
c001398d:	83 ec 28             	sub    esp,0x28
c0013990:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0013995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013999:	89 10                	mov    DWORD PTR [eax],edx
c001399b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00139a3:	0f 8f 90 01 00 00    	jg     c0013b39 <UnixFile::UnixFile(int)+0x1ad>
c00139a9:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c00139ae:	8d 50 01             	lea    edx,[eax+0x1]
c00139b1:	89 15 60 0d 03 c0    	mov    DWORD PTR ds:0xc0030d60,edx
c00139b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00139bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00139be:	83 ec 08             	sub    esp,0x8
c00139c1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00139c5:	68 78 72 03 c0       	push   0xc0037278
c00139ca:	e8 cf 61 01 00       	call   c0029b9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	a0 74 72 03 c0       	mov    al,ds:0xc0037274
c00139d7:	83 f0 01             	xor    eax,0x1
c00139da:	0f b6 c0             	movzx  eax,al
c00139dd:	85 c0                	test   eax,eax
c00139df:	0f 84 55 01 00 00    	je     c0013b3a <UnixFile::UnixFile(int)+0x1ae>
c00139e5:	c6 05 74 72 03 c0 01 	mov    BYTE PTR ds:0xc0037274,0x1
c00139ec:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fb:	e8 44 ca ff ff       	call   c0010444 <malloc>
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	89 c3                	mov    ebx,eax
c0013a05:	83 ec 08             	sub    esp,0x8
c0013a08:	68 03 ff ff 0f       	push   0xfffff03
c0013a0d:	53                   	push   ebx
c0013a0e:	e8 2d 01 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	89 1d 6c 72 03 c0    	mov    DWORD PTR ds:0xc003726c,ebx
c0013a1c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a2b:	e8 14 ca ff ff       	call   c0010444 <malloc>
c0013a30:	83 c4 10             	add    esp,0x10
c0013a33:	89 c3                	mov    ebx,eax
c0013a35:	83 ec 08             	sub    esp,0x8
c0013a38:	68 01 ff ff 0f       	push   0xfffff01
c0013a3d:	53                   	push   ebx
c0013a3e:	e8 fd 00 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013a43:	83 c4 10             	add    esp,0x10
c0013a46:	89 1d 70 72 03 c0    	mov    DWORD PTR ds:0xc0037270,ebx
c0013a4c:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013a54:	83 ec 0c             	sub    esp,0xc
c0013a57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a5b:	e8 e4 c9 ff ff       	call   c0010444 <malloc>
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	89 c3                	mov    ebx,eax
c0013a65:	83 ec 08             	sub    esp,0x8
c0013a68:	68 00 ff ff 0f       	push   0xfffff00
c0013a6d:	53                   	push   ebx
c0013a6e:	e8 cd 00 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	89 1d 64 72 03 c0    	mov    DWORD PTR ds:0xc0037264,ebx
c0013a7c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a8b:	e8 b4 c9 ff ff       	call   c0010444 <malloc>
c0013a90:	83 c4 10             	add    esp,0x10
c0013a93:	89 c3                	mov    ebx,eax
c0013a95:	83 ec 08             	sub    esp,0x8
c0013a98:	68 02 ff ff 0f       	push   0xfffff02
c0013a9d:	53                   	push   ebx
c0013a9e:	e8 9d 00 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013aa3:	83 c4 10             	add    esp,0x10
c0013aa6:	89 1d 68 72 03 c0    	mov    DWORD PTR ds:0xc0037268,ebx
c0013aac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ab4:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013ab9:	7f 7f                	jg     c0013b3a <UnixFile::UnixFile(int)+0x1ae>
c0013abb:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013ac3:	83 ec 0c             	sub    esp,0xc
c0013ac6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013aca:	e8 75 c9 ff ff       	call   c0010444 <malloc>
c0013acf:	83 c4 10             	add    esp,0x10
c0013ad2:	89 c3                	mov    ebx,eax
c0013ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad8:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013add:	83 ec 08             	sub    esp,0x8
c0013ae0:	50                   	push   eax
c0013ae1:	53                   	push   ebx
c0013ae2:	e8 59 00 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aee:	89 1c 85 40 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8dc0],ebx
c0013af5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013afd:	83 ec 0c             	sub    esp,0xc
c0013b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b04:	e8 3b c9 ff ff       	call   c0010444 <malloc>
c0013b09:	83 c4 10             	add    esp,0x10
c0013b0c:	89 c3                	mov    ebx,eax
c0013b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b12:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013b17:	83 ec 08             	sub    esp,0x8
c0013b1a:	50                   	push   eax
c0013b1b:	53                   	push   ebx
c0013b1c:	e8 1f 00 00 00       	call   c0013b40 <ReservedFilename::ReservedFilename(int)>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b28:	89 1c 85 00 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8e00],ebx
c0013b2f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b34:	e9 7b ff ff ff       	jmp    c0013ab4 <UnixFile::UnixFile(int)+0x128>
c0013b39:	90                   	nop
c0013b3a:	83 c4 28             	add    esp,0x28
c0013b3d:	5b                   	pop    ebx
c0013b3e:	c3                   	ret    
c0013b3f:	90                   	nop

c0013b40 <ReservedFilename::ReservedFilename(int)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 38 fe ff ff       	call   c001398c <UnixFile::UnixFile(int)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013b6d:	90                   	nop
c0013b6e:	83 c4 0c             	add    esp,0xc
c0013b71:	c3                   	ret    

c0013b72 <UnixFile::~UnixFile()>:
c0013b72:	83 ec 1c             	sub    esp,0x1c
c0013b75:	ba 90 c7 02 c0       	mov    edx,0xc002c790
c0013b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b7e:	89 10                	mov    DWORD PTR [eax],edx
c0013b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b87:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013b8c:	7f 76                	jg     c0013c04 <UnixFile::~UnixFile()+0x92>
c0013b8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	68 78 72 03 c0       	push   0xc0037278
c0013b9e:	e8 cf 60 01 00       	call   c0029c72 <LinkedList<UnixFile>::getFirstElement()>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	68 78 72 03 c0       	push   0xc0037278
c0013bb2:	e8 c3 60 01 00       	call   c0029c7a <LinkedList<UnixFile>::removeFirst()>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013bbe:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013bc2:	74 43                	je     c0013c07 <UnixFile::~UnixFile()+0x95>
c0013bc4:	83 ec 08             	sub    esp,0x8
c0013bc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bcb:	68 78 72 03 c0       	push   0xc0037278
c0013bd0:	e8 c9 5f 01 00       	call   c0029b9e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013bd5:	83 c4 10             	add    esp,0x10
c0013bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bdc:	8d 50 01             	lea    edx,[eax+0x1]
c0013bdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013be3:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013be8:	0f 94 c0             	sete   al
c0013beb:	0f b6 c0             	movzx  eax,al
c0013bee:	85 c0                	test   eax,eax
c0013bf0:	74 a4                	je     c0013b96 <UnixFile::~UnixFile()+0x24>
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	68 68 c7 02 c0       	push   0xc002c768
c0013bfa:	e8 99 cc ff ff       	call   c0010898 <KePanic(char const*)>
c0013bff:	83 c4 10             	add    esp,0x10
c0013c02:	eb 92                	jmp    c0013b96 <UnixFile::~UnixFile()+0x24>
c0013c04:	90                   	nop
c0013c05:	eb 01                	jmp    c0013c08 <UnixFile::~UnixFile()+0x96>
c0013c07:	90                   	nop
c0013c08:	90                   	nop
c0013c09:	83 c4 1c             	add    esp,0x1c
c0013c0c:	c3                   	ret    
c0013c0d:	90                   	nop

c0013c0e <UnixFile::~UnixFile()>:
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	83 ec 0c             	sub    esp,0xc
c0013c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c18:	e8 55 ff ff ff       	call   c0013b72 <UnixFile::~UnixFile()>
c0013c1d:	83 c4 10             	add    esp,0x10
c0013c20:	83 ec 08             	sub    esp,0x8
c0013c23:	6a 0c                	push   0xc
c0013c25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c29:	e8 0e a4 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	83 c4 0c             	add    esp,0xc
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <ReservedFilename::~ReservedFilename()>:
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0013c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c42:	89 10                	mov    DWORD PTR [eax],edx
c0013c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	50                   	push   eax
c0013c4c:	e8 21 ff ff ff       	call   c0013b72 <UnixFile::~UnixFile()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	90                   	nop
c0013c55:	83 c4 0c             	add    esp,0xc
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <ReservedFilename::~ReservedFilename()>:
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	83 ec 0c             	sub    esp,0xc
c0013c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c64:	e8 cd ff ff ff       	call   c0013c36 <ReservedFilename::~ReservedFilename()>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	6a 0c                	push   0xc
c0013c71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c75:	e8 c2 a3 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0013c7a:	83 c4 10             	add    esp,0x10
c0013c7d:	83 c4 0c             	add    esp,0xc
c0013c80:	c3                   	ret    

c0013c81 <KeGetFileFromDescriptor(int)>:
c0013c81:	53                   	push   ebx
c0013c82:	83 ec 08             	sub    esp,0x8
c0013c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c89:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013c8f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013c95:	7f 30                	jg     c0013cc7 <KeGetFileFromDescriptor(int)+0x46>
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	68 78 72 03 c0       	push   0xc0037278
c0013c9f:	e8 ce 5f 01 00       	call   c0029c72 <LinkedList<UnixFile>::getFirstElement()>
c0013ca4:	8d 50 ff             	lea    edx,[eax-0x1]
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	83 fa fd             	cmp    edx,0xfffffffd
c0013cad:	76 04                	jbe    c0013cb3 <KeGetFileFromDescriptor(int)+0x32>
c0013caf:	31 c0                	xor    eax,eax
c0013cb1:	eb 6e                	jmp    c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013cb3:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013cb6:	74 69                	je     c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013cb8:	52                   	push   edx
c0013cb9:	52                   	push   edx
c0013cba:	50                   	push   eax
c0013cbb:	68 78 72 03 c0       	push   0xc0037278
c0013cc0:	e8 57 60 01 00       	call   c0029d1c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013cc5:	eb dd                	jmp    c0013ca4 <KeGetFileFromDescriptor(int)+0x23>
c0013cc7:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013ccd:	a1 6c 72 03 c0       	mov    eax,ds:0xc003726c
c0013cd2:	74 4d                	je     c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013cd4:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013cda:	a1 70 72 03 c0       	mov    eax,ds:0xc0037270
c0013cdf:	74 40                	je     c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013ce1:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013ce7:	a1 68 72 03 c0       	mov    eax,ds:0xc0037268
c0013cec:	74 33                	je     c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013cee:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013cf4:	a1 64 72 03 c0       	mov    eax,ds:0xc0037264
c0013cf9:	74 26                	je     c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013cfb:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013d01:	83 f8 08             	cmp    eax,0x8
c0013d04:	77 09                	ja     c0013d0f <KeGetFileFromDescriptor(int)+0x8e>
c0013d06:	8b 04 85 40 72 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8dc0]
c0013d0d:	eb 12                	jmp    c0013d21 <KeGetFileFromDescriptor(int)+0xa0>
c0013d0f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013d15:	83 fb 08             	cmp    ebx,0x8
c0013d18:	77 95                	ja     c0013caf <KeGetFileFromDescriptor(int)+0x2e>
c0013d1a:	8b 04 9d 00 72 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc8e00]
c0013d21:	83 c4 08             	add    esp,0x8
c0013d24:	5b                   	pop    ebx
c0013d25:	c3                   	ret    

c0013d26 <__static_initialization_and_destruction_0(int, int)>:
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013d2e:	75 34                	jne    c0013d64 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013d30:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013d38:	75 2a                	jne    c0013d64 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	68 78 72 03 c0       	push   0xc0037278
c0013d42:	e8 15 5e 01 00       	call   c0029b5c <LinkedList<UnixFile>::LinkedList()>
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	83 ec 04             	sub    esp,0x4
c0013d4d:	68 40 05 03 c0       	push   0xc0030540
c0013d52:	68 78 72 03 c0       	push   0xc0037278
c0013d57:	68 5a 9b 02 c0       	push   0xc0029b5a
c0013d5c:	e8 8b a2 ff ff       	call   c000dfec <__cxa_atexit>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	90                   	nop
c0013d65:	83 c4 0c             	add    esp,0xc
c0013d68:	c3                   	ret    

c0013d69 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013d69:	83 ec 0c             	sub    esp,0xc
c0013d6c:	83 ec 08             	sub    esp,0x8
c0013d6f:	68 ff ff 00 00       	push   0xffff
c0013d74:	6a 01                	push   0x1
c0013d76:	e8 ab ff ff ff       	call   c0013d26 <__static_initialization_and_destruction_0(int, int)>
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	83 c4 0c             	add    esp,0xc
c0013d81:	c3                   	ret    

c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013d82:	53                   	push   ebx
c0013d83:	8b 15 68 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d68
c0013d89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d91:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013d97:	89 d8                	mov    eax,ebx
c0013d99:	d1 e8                	shr    eax,1
c0013d9b:	01 d0                	add    eax,edx
c0013d9d:	80 e3 01             	and    bl,0x1
c0013da0:	8a 10                	mov    dl,BYTE PTR [eax]
c0013da2:	75 09                	jne    c0013dad <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013da4:	83 e2 f0             	and    edx,0xfffffff0
c0013da7:	09 ca                	or     edx,ecx
c0013da9:	88 10                	mov    BYTE PTR [eax],dl
c0013dab:	5b                   	pop    ebx
c0013dac:	c3                   	ret    
c0013dad:	0f b6 c9             	movzx  ecx,cl
c0013db0:	83 e2 0f             	and    edx,0xf
c0013db3:	c1 e1 04             	shl    ecx,0x4
c0013db6:	09 ca                	or     edx,ecx
c0013db8:	88 10                	mov    BYTE PTR [eax],dl
c0013dba:	5b                   	pop    ebx
c0013dbb:	c3                   	ret    

c0013dbc <Virt::getPageState(unsigned long)>:
c0013dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dc0:	8b 0d 68 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d68
c0013dc6:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013dcc:	89 d0                	mov    eax,edx
c0013dce:	d1 e8                	shr    eax,1
c0013dd0:	80 e2 01             	and    dl,0x1
c0013dd3:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013dd6:	74 03                	je     c0013ddb <Virt::getPageState(unsigned long)+0x1f>
c0013dd8:	c1 e8 04             	shr    eax,0x4
c0013ddb:	83 e0 0f             	and    eax,0xf
c0013dde:	c3                   	ret    

c0013ddf <Virt::allocateKernelVirtualPages(int)>:
c0013ddf:	55                   	push   ebp
c0013de0:	57                   	push   edi
c0013de1:	56                   	push   esi
c0013de2:	31 f6                	xor    esi,esi
c0013de4:	53                   	push   ebx
c0013de5:	31 db                	xor    ebx,ebx
c0013de7:	83 ec 1c             	sub    esp,0x1c
c0013dea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013def:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013df3:	8b 2d 64 0d 03 c0    	mov    ebp,DWORD PTR ds:0xc0030d64
c0013df9:	55                   	push   ebp
c0013dfa:	e8 bd ff ff ff       	call   c0013dbc <Virt::getPageState(unsigned long)>
c0013dff:	5a                   	pop    edx
c0013e00:	84 c0                	test   al,al
c0013e02:	75 3d                	jne    c0013e41 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013e04:	85 db                	test   ebx,ebx
c0013e06:	0f 44 f5             	cmove  esi,ebp
c0013e09:	83 c3 01             	add    ebx,0x1
c0013e0c:	39 fb                	cmp    ebx,edi
c0013e0e:	74 5e                	je     c0013e6e <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013e10:	83 c5 01             	add    ebp,0x1
c0013e13:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013e19:	76 33                	jbe    c0013e4e <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013e1b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013e20:	c7 05 64 0d 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0030d64,0xc8000
c0013e2a:	75 2a                	jne    c0013e56 <Virt::allocateKernelVirtualPages(int)+0x77>
c0013e2c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013e31:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013e36:	55                   	push   ebp
c0013e37:	e8 80 ff ff ff       	call   c0013dbc <Virt::getPageState(unsigned long)>
c0013e3c:	5a                   	pop    edx
c0013e3d:	84 c0                	test   al,al
c0013e3f:	74 c3                	je     c0013e04 <Virt::allocateKernelVirtualPages(int)+0x25>
c0013e41:	83 c5 01             	add    ebp,0x1
c0013e44:	31 db                	xor    ebx,ebx
c0013e46:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013e4c:	77 cd                	ja     c0013e1b <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013e4e:	89 2d 64 0d 03 c0    	mov    DWORD PTR ds:0xc0030d64,ebp
c0013e54:	eb a3                	jmp    c0013df9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	68 c0 c7 02 c0       	push   0xc002c7c0
c0013e5e:	e8 35 ca ff ff       	call   c0010898 <KePanic(char const*)>
c0013e63:	8b 2d 64 0d 03 c0    	mov    ebp,DWORD PTR ds:0xc0030d64
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	eb 8b                	jmp    c0013df9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013e6e:	89 35 64 0d 03 c0    	mov    DWORD PTR ds:0xc0030d64,esi
c0013e74:	83 fb 01             	cmp    ebx,0x1
c0013e77:	74 63                	je     c0013edc <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013e79:	85 ff                	test   edi,edi
c0013e7b:	74 41                	je     c0013ebe <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013e7d:	89 f0                	mov    eax,esi
c0013e7f:	31 db                	xor    ebx,ebx
c0013e81:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013e84:	eb 16                	jmp    c0013e9c <Virt::allocateKernelVirtualPages(int)+0xbd>
c0013e86:	6a 01                	push   0x1
c0013e88:	83 c3 01             	add    ebx,0x1
c0013e8b:	50                   	push   eax
c0013e8c:	e8 f1 fe ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013e91:	39 fb                	cmp    ebx,edi
c0013e93:	58                   	pop    eax
c0013e94:	5a                   	pop    edx
c0013e95:	74 27                	je     c0013ebe <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013e97:	a1 64 0d 03 c0       	mov    eax,ds:0xc0030d64
c0013e9c:	8d 50 01             	lea    edx,[eax+0x1]
c0013e9f:	85 db                	test   ebx,ebx
c0013ea1:	89 15 64 0d 03 c0    	mov    DWORD PTR ds:0xc0030d64,edx
c0013ea7:	74 22                	je     c0013ecb <Virt::allocateKernelVirtualPages(int)+0xec>
c0013ea9:	39 dd                	cmp    ebp,ebx
c0013eab:	75 d9                	jne    c0013e86 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0013ead:	6a 03                	push   0x3
c0013eaf:	83 c3 01             	add    ebx,0x1
c0013eb2:	50                   	push   eax
c0013eb3:	e8 ca fe ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013eb8:	39 fb                	cmp    ebx,edi
c0013eba:	59                   	pop    ecx
c0013ebb:	58                   	pop    eax
c0013ebc:	75 d9                	jne    c0013e97 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013ebe:	83 c4 1c             	add    esp,0x1c
c0013ec1:	89 f0                	mov    eax,esi
c0013ec3:	5b                   	pop    ebx
c0013ec4:	c1 e0 0c             	shl    eax,0xc
c0013ec7:	5e                   	pop    esi
c0013ec8:	5f                   	pop    edi
c0013ec9:	5d                   	pop    ebp
c0013eca:	c3                   	ret    
c0013ecb:	6a 02                	push   0x2
c0013ecd:	bb 01 00 00 00       	mov    ebx,0x1
c0013ed2:	50                   	push   eax
c0013ed3:	e8 aa fe ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ed8:	58                   	pop    eax
c0013ed9:	5a                   	pop    edx
c0013eda:	eb bb                	jmp    c0013e97 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013edc:	6a 04                	push   0x4
c0013ede:	56                   	push   esi
c0013edf:	8d 46 01             	lea    eax,[esi+0x1]
c0013ee2:	a3 64 0d 03 c0       	mov    ds:0xc0030d64,eax
c0013ee7:	e8 96 fe ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013eec:	89 f0                	mov    eax,esi
c0013eee:	59                   	pop    ecx
c0013eef:	c1 e0 0c             	shl    eax,0xc
c0013ef2:	5b                   	pop    ebx
c0013ef3:	83 c4 1c             	add    esp,0x1c
c0013ef6:	5b                   	pop    ebx
c0013ef7:	5e                   	pop    esi
c0013ef8:	5f                   	pop    edi
c0013ef9:	5d                   	pop    ebp
c0013efa:	c3                   	ret    

c0013efb <Virt::freeSwapfilePage(unsigned long)>:
c0013efb:	53                   	push   ebx
c0013efc:	8b 15 8c 72 03 c0    	mov    edx,DWORD PTR ds:0xc003728c
c0013f02:	b8 01 00 00 00       	mov    eax,0x1
c0013f07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f0b:	d3 e0                	shl    eax,cl
c0013f0d:	89 cb                	mov    ebx,ecx
c0013f0f:	c1 eb 05             	shr    ebx,0x5
c0013f12:	f7 d0                	not    eax
c0013f14:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013f17:	21 c1                	and    ecx,eax
c0013f19:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013f1c:	5b                   	pop    ebx
c0013f1d:	c3                   	ret    

c0013f1e <Virt::swapIDToSector(unsigned long)>:
c0013f1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f22:	8b 15 6c 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d6c
c0013f28:	8b 0d 74 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d74
c0013f2e:	0f af c2             	imul   eax,edx
c0013f31:	01 c8                	add    eax,ecx
c0013f33:	c3                   	ret    

c0013f34 <Virt::allocateSwapfilePage()>:
c0013f34:	55                   	push   ebp
c0013f35:	31 d2                	xor    edx,edx
c0013f37:	57                   	push   edi
c0013f38:	56                   	push   esi
c0013f39:	53                   	push   ebx
c0013f3a:	83 ec 0c             	sub    esp,0xc
c0013f3d:	8b 1d 70 0d 03 c0    	mov    ebx,DWORD PTR ds:0xc0030d70
c0013f43:	8b 0d 6c 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d6c
c0013f49:	89 d8                	mov    eax,ebx
c0013f4b:	f7 f1                	div    ecx
c0013f4d:	39 cb                	cmp    ebx,ecx
c0013f4f:	72 2f                	jb     c0013f80 <Virt::allocateSwapfilePage()+0x4c>
c0013f51:	8b 35 8c 72 03 c0    	mov    esi,DWORD PTR ds:0xc003728c
c0013f57:	8b 16                	mov    edx,DWORD PTR [esi]
c0013f59:	f6 c2 01             	test   dl,0x1
c0013f5c:	74 3e                	je     c0013f9c <Virt::allocateSwapfilePage()+0x68>
c0013f5e:	31 c9                	xor    ecx,ecx
c0013f60:	bf 01 00 00 00       	mov    edi,0x1
c0013f65:	eb 12                	jmp    c0013f79 <Virt::allocateSwapfilePage()+0x45>
c0013f67:	89 ca                	mov    edx,ecx
c0013f69:	89 fd                	mov    ebp,edi
c0013f6b:	c1 ea 05             	shr    edx,0x5
c0013f6e:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013f71:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f73:	d3 e5                	shl    ebp,cl
c0013f75:	85 ea                	test   edx,ebp
c0013f77:	74 2c                	je     c0013fa5 <Virt::allocateSwapfilePage()+0x71>
c0013f79:	83 c1 01             	add    ecx,0x1
c0013f7c:	39 c8                	cmp    eax,ecx
c0013f7e:	77 e7                	ja     c0013f67 <Virt::allocateSwapfilePage()+0x33>
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	68 d3 ca 02 c0       	push   0xc002cad3
c0013f88:	e8 0b c9 ff ff       	call   c0010898 <KePanic(char const*)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	31 c9                	xor    ecx,ecx
c0013f92:	83 c4 0c             	add    esp,0xc
c0013f95:	89 c8                	mov    eax,ecx
c0013f97:	5b                   	pop    ebx
c0013f98:	5e                   	pop    esi
c0013f99:	5f                   	pop    edi
c0013f9a:	5d                   	pop    ebp
c0013f9b:	c3                   	ret    
c0013f9c:	89 f3                	mov    ebx,esi
c0013f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0013fa3:	31 c9                	xor    ecx,ecx
c0013fa5:	09 ea                	or     edx,ebp
c0013fa7:	89 c8                	mov    eax,ecx
c0013fa9:	89 13                	mov    DWORD PTR [ebx],edx
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	5b                   	pop    ebx
c0013faf:	5e                   	pop    esi
c0013fb0:	5f                   	pop    edi
c0013fb1:	5d                   	pop    ebp
c0013fb2:	c3                   	ret    

c0013fb3 <Virt::virtualMemorySetup()>:
c0013fb3:	53                   	push   ebx
c0013fb4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013fb9:	6a 0f                	push   0xf
c0013fbb:	53                   	push   ebx
c0013fbc:	83 c3 01             	add    ebx,0x1
c0013fbf:	e8 be fd ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013fc4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013fca:	58                   	pop    eax
c0013fcb:	5a                   	pop    edx
c0013fcc:	75 eb                	jne    c0013fb9 <Virt::virtualMemorySetup()+0x6>
c0013fce:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013fd3:	6a 00                	push   0x0
c0013fd5:	53                   	push   ebx
c0013fd6:	83 c3 01             	add    ebx,0x1
c0013fd9:	e8 a4 fd ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013fde:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013fe4:	59                   	pop    ecx
c0013fe5:	58                   	pop    eax
c0013fe6:	75 eb                	jne    c0013fd3 <Virt::virtualMemorySetup()+0x20>
c0013fe8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013fed:	6a 0f                	push   0xf
c0013fef:	53                   	push   ebx
c0013ff0:	83 c3 01             	add    ebx,0x1
c0013ff3:	e8 8a fd ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ff8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013ffe:	58                   	pop    eax
c0013fff:	5a                   	pop    edx
c0014000:	75 eb                	jne    c0013fed <Virt::virtualMemorySetup()+0x3a>
c0014002:	5b                   	pop    ebx
c0014003:	c3                   	ret    

c0014004 <Virt::setupPageSwapping(int)>:
c0014004:	53                   	push   ebx
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	a1 e8 6a 03 c0       	mov    eax,ds:0xc0036ae8
c001400d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014011:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0014017:	8b 10                	mov    edx,DWORD PTR [eax]
c0014019:	53                   	push   ebx
c001401a:	68 ea ca 02 c0       	push   0xc002caea
c001401f:	50                   	push   eax
c0014020:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0014023:	c1 e3 0b             	shl    ebx,0xb
c0014026:	89 1d 70 0d 03 c0    	mov    DWORD PTR ds:0xc0030d70,ebx
c001402c:	c1 eb 08             	shr    ebx,0x8
c001402f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014032:	c6 05 78 0d 03 c0 43 	mov    BYTE PTR ds:0xc0030d78,0x43
c0014039:	c7 05 6c 0d 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0030d6c,0x8
c0014043:	a3 74 0d 03 c0       	mov    ds:0xc0030d74,eax
c0014048:	e8 f7 c3 ff ff       	call   c0010444 <malloc>
c001404d:	31 d2                	xor    edx,edx
c001404f:	83 c4 0c             	add    esp,0xc
c0014052:	a3 8c 72 03 c0       	mov    ds:0xc003728c,eax
c0014057:	89 c1                	mov    ecx,eax
c0014059:	a1 70 0d 03 c0       	mov    eax,ds:0xc0030d70
c001405e:	f7 35 6c 0d 03 c0    	div    DWORD PTR ds:0xc0030d6c
c0014064:	c1 e8 05             	shr    eax,0x5
c0014067:	50                   	push   eax
c0014068:	6a 00                	push   0x0
c001406a:	51                   	push   ecx
c001406b:	e8 80 c4 fe ff       	call   c00004f0 <memset>
c0014070:	83 c4 18             	add    esp,0x18
c0014073:	5b                   	pop    ebx
c0014074:	c3                   	ret    
c0014075:	90                   	nop

c0014076 <VAS::setCPUSpecific(unsigned long)>:
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <VAS::VAS(VAS*)>:
c0014078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001407c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014087:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001408e:	90                   	nop
c001408f:	c3                   	ret    

c0014090 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0014090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014094:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0014099:	89 c2                	mov    edx,eax
c001409b:	c1 ea 16             	shr    edx,0x16
c001409e:	c1 e8 0a             	shr    eax,0xa
c00140a1:	83 f9 01             	cmp    ecx,0x1
c00140a4:	19 c9                	sbb    ecx,ecx
c00140a6:	25 fc 0f 00 00       	and    eax,0xffc
c00140ab:	c1 e2 0c             	shl    edx,0xc
c00140ae:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00140b4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00140bb:	01 d0                	add    eax,edx
c00140bd:	c3                   	ret    

c00140be <VAS::getPageTableEntry(unsigned long)>:
c00140be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140c2:	89 ca                	mov    edx,ecx
c00140c4:	c1 ea 16             	shr    edx,0x16
c00140c7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00140cd:	c1 e9 0a             	shr    ecx,0xa
c00140d0:	c1 e0 0c             	shl    eax,0xc
c00140d3:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00140d9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00140dc:	c3                   	ret    

c00140dd <Virt::freeKernelVirtualPages(unsigned long)>:
c00140dd:	55                   	push   ebp
c00140de:	57                   	push   edi
c00140df:	bf 01 00 00 00       	mov    edi,0x1
c00140e4:	56                   	push   esi
c00140e5:	53                   	push   ebx
c00140e6:	83 ec 1c             	sub    esp,0x1c
c00140e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140ed:	c1 ee 0c             	shr    esi,0xc
c00140f0:	eb 48                	jmp    c001413a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00140f2:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c00140f7:	83 ec 08             	sub    esp,0x8
c00140fa:	55                   	push   ebp
c00140fb:	50                   	push   eax
c00140fc:	e8 bd ff ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014101:	83 c4 10             	add    esp,0x10
c0014104:	8b 10                	mov    edx,DWORD PTR [eax]
c0014106:	f6 c6 04             	test   dh,0x4
c0014109:	75 70                	jne    c001417b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001410b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014111:	83 fb 04             	cmp    ebx,0x4
c0014114:	0f 84 8a 00 00 00    	je     c00141a4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001411a:	83 fb 02             	cmp    ebx,0x2
c001411d:	0f 84 9a 00 00 00    	je     c00141bd <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0014123:	83 fb 03             	cmp    ebx,0x3
c0014126:	0f 84 be 00 00 00    	je     c00141ea <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001412c:	83 fb 01             	cmp    ebx,0x1
c001412f:	0f 84 a2 00 00 00    	je     c00141d7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0014135:	83 c6 01             	add    esi,0x1
c0014138:	31 ff                	xor    edi,edi
c001413a:	56                   	push   esi
c001413b:	89 f5                	mov    ebp,esi
c001413d:	e8 7a fc ff ff       	call   c0013dbc <Virt::getPageState(unsigned long)>
c0014142:	c1 e5 0c             	shl    ebp,0xc
c0014145:	5a                   	pop    edx
c0014146:	0f b6 d8             	movzx  ebx,al
c0014149:	85 db                	test   ebx,ebx
c001414b:	75 a5                	jne    c00140f2 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001414d:	83 ec 0c             	sub    esp,0xc
c0014150:	68 01 cb 02 c0       	push   0xc002cb01
c0014155:	e8 3e c7 ff ff       	call   c0010898 <KePanic(char const*)>
c001415a:	5a                   	pop    edx
c001415b:	59                   	pop    ecx
c001415c:	55                   	push   ebp
c001415d:	8b 2d 90 72 03 c0    	mov    ebp,DWORD PTR ds:0xc0037290
c0014163:	55                   	push   ebp
c0014164:	e8 55 ff ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014169:	83 c4 10             	add    esp,0x10
c001416c:	8b 10                	mov    edx,DWORD PTR [eax]
c001416e:	f6 c6 04             	test   dh,0x4
c0014171:	75 08                	jne    c001417b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0014173:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014179:	eb ba                	jmp    c0014135 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001417b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001417f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0014185:	83 ec 0c             	sub    esp,0xc
c0014188:	52                   	push   edx
c0014189:	e8 9b c8 ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c001418e:	83 c4 10             	add    esp,0x10
c0014191:	83 fb 04             	cmp    ebx,0x4
c0014194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014198:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001419e:	0f 85 76 ff ff ff    	jne    c001411a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00141a4:	83 e7 01             	and    edi,0x1
c00141a7:	75 46                	jne    c00141ef <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00141a9:	c7 44 24 30 e0 c7 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c7e0
c00141b1:	83 c4 1c             	add    esp,0x1c
c00141b4:	5b                   	pop    ebx
c00141b5:	5e                   	pop    esi
c00141b6:	5f                   	pop    edi
c00141b7:	5d                   	pop    ebp
c00141b8:	e9 db c6 ff ff       	jmp    c0010898 <KePanic(char const*)>
c00141bd:	83 e7 01             	and    edi,0x1
c00141c0:	75 15                	jne    c00141d7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	68 1d cb 02 c0       	push   0xc002cb1d
c00141ca:	e8 c9 c6 ff ff       	call   c0010898 <KePanic(char const*)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	e9 5e ff ff ff       	jmp    c0014135 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00141d7:	83 ec 08             	sub    esp,0x8
c00141da:	6a 00                	push   0x0
c00141dc:	56                   	push   esi
c00141dd:	e8 a0 fb ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00141e2:	83 c4 10             	add    esp,0x10
c00141e5:	e9 4b ff ff ff       	jmp    c0014135 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00141ea:	83 e7 01             	and    edi,0x1
c00141ed:	75 16                	jne    c0014205 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00141ef:	83 ec 08             	sub    esp,0x8
c00141f2:	6a 00                	push   0x0
c00141f4:	56                   	push   esi
c00141f5:	e8 88 fb ff ff       	call   c0013d82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00141fa:	83 c4 10             	add    esp,0x10
c00141fd:	83 c4 1c             	add    esp,0x1c
c0014200:	5b                   	pop    ebx
c0014201:	5e                   	pop    esi
c0014202:	5f                   	pop    edi
c0014203:	5d                   	pop    ebp
c0014204:	c3                   	ret    
c0014205:	c7 44 24 30 39 cb 02 c0 	mov    DWORD PTR [esp+0x30],0xc002cb39
c001420d:	83 c4 1c             	add    esp,0x1c
c0014210:	5b                   	pop    ebx
c0014211:	5e                   	pop    esi
c0014212:	5f                   	pop    edi
c0014213:	5d                   	pop    ebp
c0014214:	e9 7f c6 ff ff       	jmp    c0010898 <KePanic(char const*)>
c0014219:	90                   	nop

c001421a <VAS::freeAllocatedPages(unsigned long)>:
c001421a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001421e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014222:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0014226:	74 09                	je     c0014231 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0014228:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001422c:	e9 ac fe ff ff       	jmp    c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c0014231:	c7 44 24 04 04 c8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c804
c0014239:	e9 28 2d ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001423e <VAS::virtualToPhysical(unsigned long)>:
c001423e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014242:	50                   	push   eax
c0014243:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014247:	52                   	push   edx
c0014248:	e8 71 fe ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c001424d:	59                   	pop    ecx
c001424e:	5a                   	pop    edx
c001424f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014251:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014256:	c3                   	ret    
c0014257:	90                   	nop

c0014258 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0014258:	55                   	push   ebp
c0014259:	57                   	push   edi
c001425a:	56                   	push   esi
c001425b:	53                   	push   ebx
c001425c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014260:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014264:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014268:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001426c:	85 db                	test   ebx,ebx
c001426e:	7e 24                	jle    c0014294 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0014270:	c1 e3 0c             	shl    ebx,0xc
c0014273:	01 f3                	add    ebx,esi
c0014275:	56                   	push   esi
c0014276:	81 c6 00 10 00 00    	add    esi,0x1000
c001427c:	55                   	push   ebp
c001427d:	e8 3c fe ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014282:	5a                   	pop    edx
c0014283:	59                   	pop    ecx
c0014284:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014286:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001428a:	21 f9                	and    ecx,edi
c001428c:	09 d1                	or     ecx,edx
c001428e:	39 f3                	cmp    ebx,esi
c0014290:	89 08                	mov    DWORD PTR [eax],ecx
c0014292:	75 e1                	jne    c0014275 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	5f                   	pop    edi
c0014297:	5d                   	pop    ebp
c0014298:	c3                   	ret    
c0014299:	90                   	nop

c001429a <VAS::VAS()>:
c001429a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001429e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00142b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b4:	a3 90 72 03 c0       	mov    ds:0xc0037290,eax
c00142b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142bd:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00142c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00142c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142cc:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00142d3:	ba 7d 20 03 c0       	mov    edx,0xc003207d
c00142d8:	b8 00 20 03 c0       	mov    eax,0xc0032000
c00142dd:	29 c2                	sub    edx,eax
c00142df:	89 d0                	mov    eax,edx
c00142e1:	05 ff 0f 00 00       	add    eax,0xfff
c00142e6:	c1 e8 0c             	shr    eax,0xc
c00142e9:	89 c2                	mov    edx,eax
c00142eb:	b8 00 20 03 c0       	mov    eax,0xc0032000
c00142f0:	6a 04                	push   0x4
c00142f2:	6a ff                	push   0xffffffff
c00142f4:	52                   	push   edx
c00142f5:	50                   	push   eax
c00142f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00142fa:	e8 59 ff ff ff       	call   c0014258 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00142ff:	83 c4 14             	add    esp,0x14
c0014302:	90                   	nop
c0014303:	c3                   	ret    

c0014304 <VAS::setToWriteCombining(unsigned long, int)>:
c0014304:	a1 24 74 03 c0       	mov    eax,ds:0xc0037424
c0014309:	50                   	push   eax
c001430a:	6a ff                	push   0xffffffff
c001430c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014310:	52                   	push   edx
c0014311:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014315:	51                   	push   ecx
c0014316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001431a:	50                   	push   eax
c001431b:	e8 38 ff ff ff       	call   c0014258 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014320:	83 c4 14             	add    esp,0x14
c0014323:	c3                   	ret    

c0014324 <VAS::mapOtherVASIn(bool, VAS*)>:
c0014324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014328:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001432b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001432f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0014332:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0014337:	83 f8 01             	cmp    eax,0x1
c001433a:	19 c0                	sbb    eax,eax
c001433c:	83 ca 03             	or     edx,0x3
c001433f:	83 e0 fc             	and    eax,0xfffffffc
c0014342:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0014349:	0f 20 d8             	mov    eax,cr3
c001434c:	0f 22 d8             	mov    cr3,eax
c001434f:	c3                   	ret    

c0014350 <VAS::~VAS()>:
c0014350:	83 ec 2c             	sub    esp,0x2c
c0014353:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001435b:	fa                   	cli    
c001435c:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014361:	83 c0 01             	add    eax,0x1
c0014364:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0014369:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001436e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014370:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014373:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0014379:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001437d:	6a 01                	push   0x1
c001437f:	50                   	push   eax
c0014380:	e8 9f ff ff ff       	call   c0014324 <VAS::mapOtherVASIn(bool, VAS*)>
c0014385:	83 c4 0c             	add    esp,0xc
c0014388:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014390:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0014398:	0f 8f d8 00 00 00    	jg     c0014476 <VAS::~VAS()+0x126>
c001439e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00143a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143a9:	c1 e2 02             	shl    edx,0x2
c00143ac:	01 d0                	add    eax,edx
c00143ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00143b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00143b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b8:	83 e0 01             	and    eax,0x1
c00143bb:	0f 84 ab 00 00 00    	je     c001446c <VAS::~VAS()+0x11c>
c00143c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00143c9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00143d1:	7f 74                	jg     c0014447 <VAS::~VAS()+0xf7>
c00143d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143d7:	c1 e0 0a             	shl    eax,0xa
c00143da:	89 c2                	mov    edx,eax
c00143dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143e0:	01 d0                	add    eax,edx
c00143e2:	c1 e0 0c             	shl    eax,0xc
c00143e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143e9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00143ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00143f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143f3:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00143f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143fd:	6a 01                	push   0x1
c00143ff:	50                   	push   eax
c0014400:	e8 8b fc ff ff       	call   c0014090 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0014405:	83 c4 0c             	add    esp,0xc
c0014408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001440c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014410:	8b 00                	mov    eax,DWORD PTR [eax]
c0014412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001441a:	25 01 04 00 00       	and    eax,0x401
c001441f:	3d 01 04 00 00       	cmp    eax,0x401
c0014424:	75 1a                	jne    c0014440 <VAS::~VAS()+0xf0>
c0014426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001442a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	50                   	push   eax
c0014433:	e8 f1 c5 ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c0014438:	83 c4 10             	add    esp,0x10
c001443b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014440:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0014445:	eb 82                	jmp    c00143c9 <VAS::~VAS()+0x79>
c0014447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001444b:	25 00 04 00 00       	and    eax,0x400
c0014450:	74 1a                	je     c001446c <VAS::~VAS()+0x11c>
c0014452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014456:	25 00 f0 ff ff       	and    eax,0xfffff000
c001445b:	83 ec 0c             	sub    esp,0xc
c001445e:	50                   	push   eax
c001445f:	e8 c5 c5 ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001446c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014471:	e9 1a ff ff ff       	jmp    c0014390 <VAS::~VAS()+0x40>
c0014476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001447a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001447d:	83 ec 0c             	sub    esp,0xc
c0014480:	50                   	push   eax
c0014481:	e8 57 fc ff ff       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001448d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	50                   	push   eax
c0014494:	e8 90 c5 ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00144a1:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00144a9:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00144ae:	85 c0                	test   eax,eax
c00144b0:	75 01                	jne    c00144b3 <VAS::~VAS()+0x163>
c00144b2:	fb                   	sti    
c00144b3:	90                   	nop
c00144b4:	83 c4 2c             	add    esp,0x2c
c00144b7:	c3                   	ret    

c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	83 ec 1c             	sub    esp,0x1c
c00144bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00144cb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00144d1:	77 08                	ja     c00144db <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00144d3:	0f 20 d8             	mov    eax,cr3
c00144d6:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00144d9:	75 43                	jne    c001451e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00144db:	89 d8                	mov    eax,ebx
c00144dd:	09 f8                	or     eax,edi
c00144df:	a9 ff 0f 00 00       	test   eax,0xfff
c00144e4:	75 53                	jne    c0014539 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00144e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00144e9:	89 de                	mov    esi,ebx
c00144eb:	c1 ee 16             	shr    esi,0x16
c00144ee:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00144f5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00144f9:	74 50                	je     c001454b <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00144fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00144ff:	c1 eb 0a             	shr    ebx,0xa
c0014502:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0014508:	c1 e6 0c             	shl    esi,0xc
c001450b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0014511:	09 c7                	or     edi,eax
c0014513:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0014516:	83 c4 1c             	add    esp,0x1c
c0014519:	5b                   	pop    ebx
c001451a:	5e                   	pop    esi
c001451b:	5f                   	pop    edi
c001451c:	5d                   	pop    ebp
c001451d:	c3                   	ret    
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	68 28 c8 02 c0       	push   0xc002c828
c0014526:	e8 3b 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001452b:	89 d8                	mov    eax,ebx
c001452d:	83 c4 10             	add    esp,0x10
c0014530:	09 f8                	or     eax,edi
c0014532:	a9 ff 0f 00 00       	test   eax,0xfff
c0014537:	74 ad                	je     c00144e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 90 c8 02 c0       	push   0xc002c890
c0014541:	e8 52 c3 ff ff       	call   c0010898 <KePanic(char const*)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	eb 9b                	jmp    c00144e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001454b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001454f:	e8 3e c5 ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014554:	8b 0d 90 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037290
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014561:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014565:	6a 01                	push   0x1
c0014567:	e8 73 f8 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c001456c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014573:	6a 01                	push   0x1
c0014575:	50                   	push   eax
c0014576:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001457a:	52                   	push   edx
c001457b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001457f:	51                   	push   ecx
c0014580:	e8 2d 01 00 00       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014585:	83 c4 1c             	add    esp,0x1c
c0014588:	68 00 10 00 00       	push   0x1000
c001458d:	6a 00                	push   0x0
c001458f:	50                   	push   eax
c0014590:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014594:	e8 57 bf fe ff       	call   c00004f0 <memset>
c0014599:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001459d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00145a0:	e8 38 fb ff ff       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c00145a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00145b3:	0d 07 04 00 00       	or     eax,0x407
c00145b8:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00145bb:	e9 3b ff ff ff       	jmp    c00144fb <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00145c0 <VAS::allocatePages(int, int)>:
c00145c0:	55                   	push   ebp
c00145c1:	57                   	push   edi
c00145c2:	56                   	push   esi
c00145c3:	53                   	push   ebx
c00145c4:	83 ec 1c             	sub    esp,0x1c
c00145c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00145cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00145cf:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00145d3:	75 75                	jne    c001464a <VAS::allocatePages(int, int)+0x8a>
c00145d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145dc:	85 c0                	test   eax,eax
c00145de:	74 49                	je     c0014629 <VAS::allocatePages(int, int)+0x69>
c00145e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00145e4:	89 d5                	mov    ebp,edx
c00145e6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00145ea:	c1 e5 0c             	shl    ebp,0xc
c00145ed:	01 dd                	add    ebp,ebx
c00145ef:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00145f2:	81 cf 00 04 00 00    	or     edi,0x400
c00145f8:	85 d2                	test   edx,edx
c00145fa:	7e 1b                	jle    c0014617 <VAS::allocatePages(int, int)+0x57>
c00145fc:	e8 91 c4 ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014601:	57                   	push   edi
c0014602:	53                   	push   ebx
c0014603:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014609:	50                   	push   eax
c001460a:	56                   	push   esi
c001460b:	e8 a8 fe ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	39 dd                	cmp    ebp,ebx
c0014615:	75 e5                	jne    c00145fc <VAS::allocatePages(int, int)+0x3c>
c0014617:	0f 20 d8             	mov    eax,cr3
c001461a:	0f 22 d8             	mov    cr3,eax
c001461d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014621:	83 c4 1c             	add    esp,0x1c
c0014624:	5b                   	pop    ebx
c0014625:	5e                   	pop    esi
c0014626:	5f                   	pop    edi
c0014627:	5d                   	pop    ebp
c0014628:	c3                   	ret    
c0014629:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001462d:	83 ec 0c             	sub    esp,0xc
c0014630:	68 b4 c8 02 c0       	push   0xc002c8b4
c0014635:	e8 5e c2 ff ff       	call   c0010898 <KePanic(char const*)>
c001463a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001463d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014648:	eb 96                	jmp    c00145e0 <VAS::allocatePages(int, int)+0x20>
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	52                   	push   edx
c001464e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0014652:	e8 88 f7 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0014657:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001465b:	83 c4 10             	add    esp,0x10
c001465e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0014663:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014667:	77 38                	ja     c00146a1 <VAS::allocatePages(int, int)+0xe1>
c0014669:	85 d2                	test   edx,edx
c001466b:	7e aa                	jle    c0014617 <VAS::allocatePages(int, int)+0x57>
c001466d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014671:	c1 e2 0c             	shl    edx,0xc
c0014674:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014678:	81 cf 00 04 00 00    	or     edi,0x400
c001467e:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0014681:	e8 0c c4 ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014686:	57                   	push   edi
c0014687:	53                   	push   ebx
c0014688:	81 c3 00 10 00 00    	add    ebx,0x1000
c001468e:	50                   	push   eax
c001468f:	56                   	push   esi
c0014690:	e8 23 fe ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014695:	83 c4 10             	add    esp,0x10
c0014698:	39 dd                	cmp    ebp,ebx
c001469a:	75 e5                	jne    c0014681 <VAS::allocatePages(int, int)+0xc1>
c001469c:	e9 76 ff ff ff       	jmp    c0014617 <VAS::allocatePages(int, int)+0x57>
c00146a1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00146a5:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c00146aa:	09 c1                	or     ecx,eax
c00146ac:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00146b0:	eb b7                	jmp    c0014669 <VAS::allocatePages(int, int)+0xa9>

c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00146b2:	55                   	push   ebp
c00146b3:	57                   	push   edi
c00146b4:	56                   	push   esi
c00146b5:	53                   	push   ebx
c00146b6:	83 ec 1c             	sub    esp,0x1c
c00146b9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00146bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00146c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00146c5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00146c9:	85 db                	test   ebx,ebx
c00146cb:	7e 2c                	jle    c00146f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00146cd:	c1 e3 0c             	shl    ebx,0xc
c00146d0:	8d 04 33             	lea    eax,[ebx+esi*1]
c00146d3:	89 f3                	mov    ebx,esi
c00146d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146d9:	55                   	push   ebp
c00146da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146de:	29 f2                	sub    edx,esi
c00146e0:	01 da                	add    edx,ebx
c00146e2:	52                   	push   edx
c00146e3:	53                   	push   ebx
c00146e4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00146ea:	57                   	push   edi
c00146eb:	e8 c8 fd ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146f0:	83 c4 10             	add    esp,0x10
c00146f3:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00146f7:	75 e0                	jne    c00146d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00146f9:	0f 20 d8             	mov    eax,cr3
c00146fc:	0f 22 d8             	mov    cr3,eax
c00146ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014703:	83 c4 1c             	add    esp,0x1c
c0014706:	5b                   	pop    ebx
c0014707:	5e                   	pop    esi
c0014708:	5f                   	pop    edi
c0014709:	5d                   	pop    ebp
c001470a:	c3                   	ret    
c001470b:	90                   	nop

c001470c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001470c:	55                   	push   ebp
c001470d:	57                   	push   edi
c001470e:	56                   	push   esi
c001470f:	53                   	push   ebx
c0014710:	83 ec 1c             	sub    esp,0x1c
c0014713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014717:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001471b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001471f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014723:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014727:	09 d8                	or     eax,ebx
c0014729:	a9 ff 0f 00 00       	test   eax,0xfff
c001472e:	75 4b                	jne    c001477b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0014730:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014733:	89 de                	mov    esi,ebx
c0014735:	c1 ee 16             	shr    esi,0x16
c0014738:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c001473f:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0014743:	74 48                	je     c001478d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0014745:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001474a:	c1 eb 0a             	shr    ebx,0xa
c001474d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014751:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014755:	83 ff 01             	cmp    edi,0x1
c0014758:	19 c0                	sbb    eax,eax
c001475a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0014760:	c1 e6 0c             	shl    esi,0xc
c0014763:	25 00 00 c0 ff       	and    eax,0xffc00000
c0014768:	01 f3                	add    ebx,esi
c001476a:	09 ca                	or     edx,ecx
c001476c:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0014773:	83 c4 1c             	add    esp,0x1c
c0014776:	5b                   	pop    ebx
c0014777:	5e                   	pop    esi
c0014778:	5f                   	pop    edi
c0014779:	5d                   	pop    ebp
c001477a:	c3                   	ret    
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	68 e0 c8 02 c0       	push   0xc002c8e0
c0014783:	e8 10 c1 ff ff       	call   c0010898 <KePanic(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	eb a3                	jmp    c0014730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001478d:	e8 00 c3 ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014792:	8b 0d 90 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037290
c0014798:	83 ec 0c             	sub    esp,0xc
c001479b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001479f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147a3:	6a 01                	push   0x1
c00147a5:	e8 35 f6 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c00147aa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00147b1:	6a 01                	push   0x1
c00147b3:	50                   	push   eax
c00147b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147b8:	50                   	push   eax
c00147b9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00147bd:	51                   	push   ecx
c00147be:	e8 ef fe ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00147c3:	83 c4 1c             	add    esp,0x1c
c00147c6:	68 00 10 00 00       	push   0x1000
c00147cb:	6a 00                	push   0x0
c00147cd:	50                   	push   eax
c00147ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147d2:	e8 19 bd fe ff       	call   c00004f0 <memset>
c00147d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00147db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00147de:	e8 fa f8 ff ff       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c00147e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00147ed:	81 ca 07 04 00 00    	or     edx,0x407
c00147f3:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c00147f6:	e9 4a ff ff ff       	jmp    c0014745 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c00147fb:	90                   	nop

c00147fc <VAS::VAS(bool)>:
c00147fc:	53                   	push   ebx
c00147fd:	83 ec 28             	sub    esp,0x28
c0014800:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014804:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014808:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001480c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014817:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001481e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014822:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014826:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0014829:	e8 64 c2 ff ff       	call   c0010a92 <Phys::allocatePage()>
c001482e:	89 c2                	mov    edx,eax
c0014830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014834:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014837:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c001483d:	83 ec 0c             	sub    esp,0xc
c0014840:	6a 01                	push   0x1
c0014842:	e8 98 f5 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	89 c2                	mov    edx,eax
c001484c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014850:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	6a 03                	push   0x3
c0014858:	6a 01                	push   0x1
c001485a:	52                   	push   edx
c001485b:	50                   	push   eax
c001485c:	53                   	push   ebx
c001485d:	e8 50 fe ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014862:	83 c4 20             	add    esp,0x20
c0014865:	89 c2                	mov    edx,eax
c0014867:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001486b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001486e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014876:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001487e:	7f 1d                	jg     c001489d <VAS::VAS(bool)+0xa1>
c0014880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014884:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014887:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001488b:	c1 e2 02             	shl    edx,0x2
c001488e:	01 d0                	add    eax,edx
c0014890:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014896:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001489b:	eb d9                	jmp    c0014876 <VAS::VAS(bool)+0x7a>
c001489d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00148a5:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00148ad:	7f 59                	jg     c0014908 <VAS::VAS(bool)+0x10c>
c00148af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148b3:	2d 00 02 00 00       	sub    eax,0x200
c00148b8:	c1 e0 0c             	shl    eax,0xc
c00148bb:	89 c2                	mov    edx,eax
c00148bd:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c00148c2:	89 d1                	mov    ecx,edx
c00148c4:	09 c1                	or     ecx,eax
c00148c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148d1:	c1 e2 02             	shl    edx,0x2
c00148d4:	01 d0                	add    eax,edx
c00148d6:	83 c9 05             	or     ecx,0x5
c00148d9:	89 ca                	mov    edx,ecx
c00148db:	89 10                	mov    DWORD PTR [eax],edx
c00148dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148e1:	2d 40 03 00 00       	sub    eax,0x340
c00148e6:	83 f8 7f             	cmp    eax,0x7f
c00148e9:	77 16                	ja     c0014901 <VAS::VAS(bool)+0x105>
c00148eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148f6:	c1 e2 02             	shl    edx,0x2
c00148f9:	01 d0                	add    eax,edx
c00148fb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014901:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014906:	eb 9d                	jmp    c00148a5 <VAS::VAS(bool)+0xa9>
c0014908:	8b 15 28 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037428
c001490e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014912:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014915:	05 20 0c 00 00       	add    eax,0xc20
c001491a:	81 ca 03 40 00 00    	or     edx,0x4003
c0014920:	89 10                	mov    DWORD PTR [eax],edx
c0014922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014926:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014929:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c001492e:	09 c2                	or     edx,eax
c0014930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014937:	05 fc 0f 00 00       	add    eax,0xffc
c001493c:	83 ca 03             	or     edx,0x3
c001493f:	89 10                	mov    DWORD PTR [eax],edx
c0014941:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0014946:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	50                   	push   eax
c0014950:	e8 57 60 ff ff       	call   c000a9ac <Device::getName()>
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	83 ec 08             	sub    esp,0x8
c001495b:	68 53 cb 02 c0       	push   0xc002cb53
c0014960:	50                   	push   eax
c0014961:	e8 1a be fe ff       	call   c0000780 <strcmp>
c0014966:	83 c4 10             	add    esp,0x10
c0014969:	85 c0                	test   eax,eax
c001496b:	0f 94 c0             	sete   al
c001496e:	0f b6 c0             	movzx  eax,al
c0014971:	85 c0                	test   eax,eax
c0014973:	74 68                	je     c00149dd <VAS::VAS(bool)+0x1e1>
c0014975:	fa                   	cli    
c0014976:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001497b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014981:	05 68 09 00 00       	add    eax,0x968
c0014986:	83 ec 0c             	sub    esp,0xc
c0014989:	50                   	push   eax
c001498a:	e8 93 ae ff ff       	call   c000f822 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014997:	89 c3                	mov    ebx,eax
c0014999:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001499e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00149a4:	05 68 09 00 00       	add    eax,0x968
c00149a9:	83 ec 0c             	sub    esp,0xc
c00149ac:	50                   	push   eax
c00149ad:	e8 70 ae ff ff       	call   c000f822 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00149b2:	83 c4 10             	add    esp,0x10
c00149b5:	83 ec 08             	sub    esp,0x8
c00149b8:	50                   	push   eax
c00149b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00149bd:	e8 fc f6 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c00149c2:	83 c4 10             	add    esp,0x10
c00149c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00149c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00149cc:	6a 11                	push   0x11
c00149ce:	53                   	push   ebx
c00149cf:	50                   	push   eax
c00149d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00149d4:	e8 df fa ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00149d9:	83 c4 10             	add    esp,0x10
c00149dc:	fb                   	sti    
c00149dd:	90                   	nop
c00149de:	83 c4 28             	add    esp,0x28
c00149e1:	5b                   	pop    ebx
c00149e2:	c3                   	ret    
c00149e3:	90                   	nop

c00149e4 <VAS::evict(unsigned long)>:
c00149e4:	55                   	push   ebp
c00149e5:	57                   	push   edi
c00149e6:	56                   	push   esi
c00149e7:	53                   	push   ebx
c00149e8:	83 ec 24             	sub    esp,0x24
c00149eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00149ef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00149f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149f7:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00149fc:	50                   	push   eax
c00149fd:	68 61 cb 02 c0       	push   0xc002cb61
c0014a02:	e8 5f 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a07:	e8 28 f5 ff ff       	call   c0013f34 <Virt::allocateSwapfilePage()>
c0014a0c:	83 c4 10             	add    esp,0x10
c0014a0f:	89 c7                	mov    edi,eax
c0014a11:	a1 6c 0d 03 c0       	mov    eax,ds:0xc0030d6c
c0014a16:	85 c0                	test   eax,eax
c0014a18:	7e 40                	jle    c0014a5a <VAS::evict(unsigned long)+0x76>
c0014a1a:	89 ee                	mov    esi,ebp
c0014a1c:	31 db                	xor    ebx,ebx
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	57                   	push   edi
c0014a22:	e8 f7 f4 ff ff       	call   c0013f1e <Virt::swapIDToSector(unsigned long)>
c0014a27:	31 d2                	xor    edx,edx
c0014a29:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a2c:	81 c6 00 02 00 00    	add    esi,0x200
c0014a32:	6a 01                	push   0x1
c0014a34:	52                   	push   edx
c0014a35:	01 d8                	add    eax,ebx
c0014a37:	83 c3 01             	add    ebx,0x1
c0014a3a:	50                   	push   eax
c0014a3b:	0f be 05 78 0d 03 c0 	movsx  eax,BYTE PTR ds:0xc0030d78
c0014a42:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0014a49:	50                   	push   eax
c0014a4a:	e8 8b 6d ff ff       	call   c000b7da <LogicalDisk::write(unsigned long long, int, void*)>
c0014a4f:	83 c4 20             	add    esp,0x20
c0014a52:	39 1d 6c 0d 03 c0    	cmp    DWORD PTR ds:0xc0030d6c,ebx
c0014a58:	7f c4                	jg     c0014a1e <VAS::evict(unsigned long)+0x3a>
c0014a5a:	c1 e7 0c             	shl    edi,0xc
c0014a5d:	83 ec 08             	sub    esp,0x8
c0014a60:	55                   	push   ebp
c0014a61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a65:	50                   	push   eax
c0014a66:	e8 53 f6 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014a6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a6d:	89 d3                	mov    ebx,edx
c0014a6f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014a75:	09 d7                	or     edi,edx
c0014a77:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014a7d:	89 38                	mov    DWORD PTR [eax],edi
c0014a7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a82:	8b 15 88 72 03 c0    	mov    edx,DWORD PTR ds:0xc0037288
c0014a88:	83 c2 01             	add    edx,0x1
c0014a8b:	89 15 88 72 03 c0    	mov    DWORD PTR ds:0xc0037288,edx
c0014a91:	e8 93 bf ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c0014a96:	0f 20 d8             	mov    eax,cr3
c0014a99:	0f 22 d8             	mov    cr3,eax
c0014a9c:	8b 0d 88 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037288
c0014aa2:	51                   	push   ecx
c0014aa3:	55                   	push   ebp
c0014aa4:	53                   	push   ebx
c0014aa5:	68 04 c9 02 c0       	push   0xc002c904
c0014aaa:	e8 b7 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014aaf:	a1 84 72 03 c0       	mov    eax,ds:0xc0037284
c0014ab4:	83 c4 18             	add    esp,0x18
c0014ab7:	50                   	push   eax
c0014ab8:	68 76 cb 02 c0       	push   0xc002cb76
c0014abd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac0:	89 15 84 72 03 c0    	mov    DWORD PTR ds:0xc0037284,edx
c0014ac6:	e8 9b 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014acb:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014ad0:	c7 44 24 40 88 cb 02 c0 	mov    DWORD PTR [esp+0x40],0xc002cb88
c0014ad8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014adc:	83 c4 2c             	add    esp,0x2c
c0014adf:	5b                   	pop    ebx
c0014ae0:	5e                   	pop    esi
c0014ae1:	5f                   	pop    edi
c0014ae2:	5d                   	pop    ebp
c0014ae3:	e9 7e 24 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0014ae8 <VAS::canLockPage(unsigned long)>:
c0014ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014aec:	50                   	push   eax
c0014aed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014af1:	52                   	push   edx
c0014af2:	e8 c7 f5 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014af7:	59                   	pop    ecx
c0014af8:	5a                   	pop    edx
c0014af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014afb:	c1 e8 0b             	shr    eax,0xb
c0014afe:	83 e0 01             	and    eax,0x1
c0014b01:	c3                   	ret    

c0014b02 <VAS::unlockPage(unsigned long)>:
c0014b02:	83 ec 0c             	sub    esp,0xc
c0014b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b09:	50                   	push   eax
c0014b0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b0e:	52                   	push   edx
c0014b0f:	e8 aa f5 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014b14:	59                   	pop    ecx
c0014b15:	5a                   	pop    edx
c0014b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b18:	f6 c6 08             	test   dh,0x8
c0014b1b:	75 09                	jne    c0014b26 <VAS::unlockPage(unsigned long)+0x24>
c0014b1d:	80 ce 08             	or     dh,0x8
c0014b20:	89 10                	mov    DWORD PTR [eax],edx
c0014b22:	83 c4 0c             	add    esp,0xc
c0014b25:	c3                   	ret    
c0014b26:	c7 44 24 10 38 c9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c938
c0014b2e:	83 c4 0c             	add    esp,0xc
c0014b31:	e9 62 bd ff ff       	jmp    c0010898 <KePanic(char const*)>

c0014b36 <VAS::canLockPages(unsigned long, int)>:
c0014b36:	55                   	push   ebp
c0014b37:	57                   	push   edi
c0014b38:	56                   	push   esi
c0014b39:	53                   	push   ebx
c0014b3a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014b3e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014b42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b46:	85 ff                	test   edi,edi
c0014b48:	7e 23                	jle    c0014b6d <VAS::canLockPages(unsigned long, int)+0x37>
c0014b4a:	31 f6                	xor    esi,esi
c0014b4c:	eb 0d                	jmp    c0014b5b <VAS::canLockPages(unsigned long, int)+0x25>
c0014b4e:	83 c6 01             	add    esi,0x1
c0014b51:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014b57:	39 f7                	cmp    edi,esi
c0014b59:	74 0d                	je     c0014b68 <VAS::canLockPages(unsigned long, int)+0x32>
c0014b5b:	53                   	push   ebx
c0014b5c:	55                   	push   ebp
c0014b5d:	e8 86 ff ff ff       	call   c0014ae8 <VAS::canLockPage(unsigned long)>
c0014b62:	5a                   	pop    edx
c0014b63:	59                   	pop    ecx
c0014b64:	84 c0                	test   al,al
c0014b66:	75 e6                	jne    c0014b4e <VAS::canLockPages(unsigned long, int)+0x18>
c0014b68:	5b                   	pop    ebx
c0014b69:	5e                   	pop    esi
c0014b6a:	5f                   	pop    edi
c0014b6b:	5d                   	pop    ebp
c0014b6c:	c3                   	ret    
c0014b6d:	b0 01                	mov    al,0x1
c0014b6f:	eb f7                	jmp    c0014b68 <VAS::canLockPages(unsigned long, int)+0x32>
c0014b71:	90                   	nop

c0014b72 <VAS::unlockPages(unsigned long, int)>:
c0014b72:	55                   	push   ebp
c0014b73:	57                   	push   edi
c0014b74:	56                   	push   esi
c0014b75:	53                   	push   ebx
c0014b76:	83 ec 0c             	sub    esp,0xc
c0014b79:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014b7d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014b81:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014b85:	85 ff                	test   edi,edi
c0014b87:	7e 1c                	jle    c0014ba5 <VAS::unlockPages(unsigned long, int)+0x33>
c0014b89:	31 f6                	xor    esi,esi
c0014b8b:	83 ec 08             	sub    esp,0x8
c0014b8e:	83 c6 01             	add    esi,0x1
c0014b91:	53                   	push   ebx
c0014b92:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014b98:	55                   	push   ebp
c0014b99:	e8 64 ff ff ff       	call   c0014b02 <VAS::unlockPage(unsigned long)>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	39 f7                	cmp    edi,esi
c0014ba3:	75 e6                	jne    c0014b8b <VAS::unlockPages(unsigned long, int)+0x19>
c0014ba5:	83 c4 0c             	add    esp,0xc
c0014ba8:	5b                   	pop    ebx
c0014ba9:	5e                   	pop    esi
c0014baa:	5f                   	pop    edi
c0014bab:	5d                   	pop    ebp
c0014bac:	c3                   	ret    
c0014bad:	90                   	nop

c0014bae <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014bae:	55                   	push   ebp
c0014baf:	57                   	push   edi
c0014bb0:	56                   	push   esi
c0014bb1:	53                   	push   ebx
c0014bb2:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0014bb8:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0014bbf:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0014bc5:	77 6f                	ja     c0014c36 <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0014bc7:	83 ec 08             	sub    esp,0x8
c0014bca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014bd0:	53                   	push   ebx
c0014bd1:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0014bd8:	57                   	push   edi
c0014bd9:	e8 e0 f4 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	85 c0                	test   eax,eax
c0014be3:	89 c5                	mov    ebp,eax
c0014be5:	0f 95 c0             	setne  al
c0014be8:	85 db                	test   ebx,ebx
c0014bea:	0f 95 c2             	setne  dl
c0014bed:	21 d0                	and    eax,edx
c0014bef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014bf3:	a8 01                	test   al,0x1
c0014bf5:	75 0f                	jne    c0014c06 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0014bf7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0014bfb:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014c01:	5b                   	pop    ebx
c0014c02:	5e                   	pop    esi
c0014c03:	5f                   	pop    edi
c0014c04:	5d                   	pop    ebp
c0014c05:	c3                   	ret    
c0014c06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c09:	f6 c4 02             	test   ah,0x2
c0014c0c:	75 3d                	jne    c0014c4b <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0014c0e:	89 c1                	mov    ecx,eax
c0014c10:	81 e1 01 04 00 00    	and    ecx,0x401
c0014c16:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0014c1c:	0f 84 91 00 00 00    	je     c0014cb3 <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c0014c22:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0014c27:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0014c2b:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014c31:	5b                   	pop    ebx
c0014c32:	5e                   	pop    esi
c0014c33:	5f                   	pop    edi
c0014c34:	5d                   	pop    ebp
c0014c35:	c3                   	ret    
c0014c36:	83 ec 0c             	sub    esp,0xc
c0014c39:	68 9d cb 02 c0       	push   0xc002cb9d
c0014c3e:	e8 55 bc ff ff       	call   c0010898 <KePanic(char const*)>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	e9 7c ff ff ff       	jmp    c0014bc7 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0014c4b:	83 ec 0c             	sub    esp,0xc
c0014c4e:	68 68 c9 02 c0       	push   0xc002c968
c0014c53:	e8 0e 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c58:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014c5b:	e8 32 be ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014c60:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014c66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c6d:	83 c8 01             	or     eax,0x1
c0014c70:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014c73:	0f 20 d8             	mov    eax,cr3
c0014c76:	0f 22 d8             	mov    cr3,eax
c0014c79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014c7d:	b8 00 10 00 00       	mov    eax,0x1000
c0014c82:	89 d7                	mov    edi,edx
c0014c84:	89 c1                	mov    ecx,eax
c0014c86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c88:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c8b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014c8f:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014c95:	09 f1                	or     ecx,esi
c0014c97:	83 c9 02             	or     ecx,0x2
c0014c9a:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014c9d:	0f 20 d9             	mov    ecx,cr3
c0014ca0:	0f 22 d9             	mov    cr3,ecx
c0014ca3:	89 d6                	mov    esi,edx
c0014ca5:	89 df                	mov    edi,ebx
c0014ca7:	89 c1                	mov    ecx,eax
c0014ca9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cab:	83 c4 10             	add    esp,0x10
c0014cae:	e9 44 ff ff ff       	jmp    c0014bf7 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0014cb3:	c1 e8 0c             	shr    eax,0xc
c0014cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cba:	e8 d3 bd ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014cbf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cc2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014cc8:	09 c1                	or     ecx,eax
c0014cca:	81 c9 01 08 00 00    	or     ecx,0x801
c0014cd0:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014cd3:	a1 6c 0d 03 c0       	mov    eax,ds:0xc0030d6c
c0014cd8:	85 c0                	test   eax,eax
c0014cda:	7e 51                	jle    c0014d2d <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c0014cdc:	89 dd                	mov    ebp,ebx
c0014cde:	31 f6                	xor    esi,esi
c0014ce0:	83 ec 08             	sub    esp,0x8
c0014ce3:	55                   	push   ebp
c0014ce4:	68 af cb 02 c0       	push   0xc002cbaf
c0014ce9:	e8 78 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014cee:	59                   	pop    ecx
c0014cef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014cf3:	57                   	push   edi
c0014cf4:	e8 25 f2 ff ff       	call   c0013f1e <Virt::swapIDToSector(unsigned long)>
c0014cf9:	31 d2                	xor    edx,edx
c0014cfb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014cfe:	81 c5 00 02 00 00    	add    ebp,0x200
c0014d04:	6a 01                	push   0x1
c0014d06:	52                   	push   edx
c0014d07:	8d 3c 06             	lea    edi,[esi+eax*1]
c0014d0a:	0f be 05 78 0d 03 c0 	movsx  eax,BYTE PTR ds:0xc0030d78
c0014d11:	83 c6 01             	add    esi,0x1
c0014d14:	57                   	push   edi
c0014d15:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0014d1c:	50                   	push   eax
c0014d1d:	e8 4c 6a ff ff       	call   c000b76e <LogicalDisk::read(unsigned long long, int, void*)>
c0014d22:	83 c4 20             	add    esp,0x20
c0014d25:	39 35 6c 0d 03 c0    	cmp    DWORD PTR ds:0xc0030d6c,esi
c0014d2b:	7f b3                	jg     c0014ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c0014d2d:	a1 88 72 03 c0       	mov    eax,ds:0xc0037288
c0014d32:	83 ec 04             	sub    esp,0x4
c0014d35:	83 e8 01             	sub    eax,0x1
c0014d38:	50                   	push   eax
c0014d39:	53                   	push   ebx
c0014d3a:	68 c8 cb 02 c0       	push   0xc002cbc8
c0014d3f:	a3 88 72 03 c0       	mov    ds:0xc0037288,eax
c0014d44:	e8 1d 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014d49:	58                   	pop    eax
c0014d4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014d4e:	52                   	push   edx
c0014d4f:	e8 a7 f1 ff ff       	call   c0013efb <Virt::freeSwapfilePage(unsigned long)>
c0014d54:	0f 20 d8             	mov    eax,cr3
c0014d57:	0f 22 d8             	mov    cr3,eax
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	e9 95 fe ff ff       	jmp    c0014bf7 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c0014d62 <VAS::lockPage(unsigned long)>:
c0014d62:	56                   	push   esi
c0014d63:	53                   	push   ebx
c0014d64:	83 ec 04             	sub    esp,0x4
c0014d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d6f:	50                   	push   eax
c0014d70:	56                   	push   esi
c0014d71:	e8 48 f3 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014d76:	5a                   	pop    edx
c0014d77:	59                   	pop    ecx
c0014d78:	89 c3                	mov    ebx,eax
c0014d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7c:	a8 01                	test   al,0x1
c0014d7e:	74 10                	je     c0014d90 <VAS::lockPage(unsigned long)+0x2e>
c0014d80:	f6 c4 08             	test   ah,0x8
c0014d83:	74 28                	je     c0014dad <VAS::lockPage(unsigned long)+0x4b>
c0014d85:	80 e4 f7             	and    ah,0xf7
c0014d88:	89 03                	mov    DWORD PTR [ebx],eax
c0014d8a:	83 c4 04             	add    esp,0x4
c0014d8d:	5b                   	pop    ebx
c0014d8e:	5e                   	pop    esi
c0014d8f:	c3                   	ret    
c0014d90:	83 ec 08             	sub    esp,0x8
c0014d93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014d98:	50                   	push   eax
c0014d99:	56                   	push   esi
c0014d9a:	e8 0f fe ff ff       	call   c0014bae <VAS::tryLoadBackOffDisk(unsigned long)>
c0014d9f:	83 c4 10             	add    esp,0x10
c0014da2:	84 c0                	test   al,al
c0014da4:	74 19                	je     c0014dbf <VAS::lockPage(unsigned long)+0x5d>
c0014da6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014da8:	f6 c4 08             	test   ah,0x8
c0014dab:	75 d8                	jne    c0014d85 <VAS::lockPage(unsigned long)+0x23>
c0014dad:	c7 44 24 10 38 c9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c938
c0014db5:	83 c4 04             	add    esp,0x4
c0014db8:	5b                   	pop    ebx
c0014db9:	5e                   	pop    esi
c0014dba:	e9 d9 ba ff ff       	jmp    c0010898 <KePanic(char const*)>
c0014dbf:	83 ec 0c             	sub    esp,0xc
c0014dc2:	68 88 c9 02 c0       	push   0xc002c988
c0014dc7:	e8 cc ba ff ff       	call   c0010898 <KePanic(char const*)>
c0014dcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	eb ad                	jmp    c0014d80 <VAS::lockPage(unsigned long)+0x1e>
c0014dd3:	90                   	nop

c0014dd4 <VAS::lockPages(unsigned long, int)>:
c0014dd4:	55                   	push   ebp
c0014dd5:	57                   	push   edi
c0014dd6:	56                   	push   esi
c0014dd7:	53                   	push   ebx
c0014dd8:	83 ec 0c             	sub    esp,0xc
c0014ddb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ddf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014de3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014de7:	85 ff                	test   edi,edi
c0014de9:	7e 1c                	jle    c0014e07 <VAS::lockPages(unsigned long, int)+0x33>
c0014deb:	31 f6                	xor    esi,esi
c0014ded:	83 ec 08             	sub    esp,0x8
c0014df0:	83 c6 01             	add    esi,0x1
c0014df3:	53                   	push   ebx
c0014df4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014dfa:	55                   	push   ebp
c0014dfb:	e8 62 ff ff ff       	call   c0014d62 <VAS::lockPage(unsigned long)>
c0014e00:	83 c4 10             	add    esp,0x10
c0014e03:	39 f7                	cmp    edi,esi
c0014e05:	75 e6                	jne    c0014ded <VAS::lockPages(unsigned long, int)+0x19>
c0014e07:	83 c4 0c             	add    esp,0xc
c0014e0a:	5b                   	pop    ebx
c0014e0b:	5e                   	pop    esi
c0014e0c:	5f                   	pop    edi
c0014e0d:	5d                   	pop    ebp
c0014e0e:	c3                   	ret    
c0014e0f:	90                   	nop

c0014e10 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014e10:	55                   	push   ebp
c0014e11:	57                   	push   edi
c0014e12:	56                   	push   esi
c0014e13:	53                   	push   ebx
c0014e14:	83 ec 28             	sub    esp,0x28
c0014e17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e1b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014e1f:	50                   	push   eax
c0014e20:	e8 ba ef ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0014e25:	83 c4 0c             	add    esp,0xc
c0014e28:	6a 07                	push   0x7
c0014e2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e2e:	52                   	push   edx
c0014e2f:	89 c5                	mov    ebp,eax
c0014e31:	53                   	push   ebx
c0014e32:	e8 89 f7 ff ff       	call   c00145c0 <VAS::allocatePages(int, int)>
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014e3e:	89 c7                	mov    edi,eax
c0014e40:	85 c9                	test   ecx,ecx
c0014e42:	74 2f                	je     c0014e73 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014e44:	31 f6                	xor    esi,esi
c0014e46:	e8 47 bc ff ff       	call   c0010a92 <Phys::allocatePage()>
c0014e4b:	83 c6 01             	add    esi,0x1
c0014e4e:	6a 03                	push   0x3
c0014e50:	55                   	push   ebp
c0014e51:	50                   	push   eax
c0014e52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e56:	53                   	push   ebx
c0014e57:	e8 5c f6 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014e5c:	6a 07                	push   0x7
c0014e5e:	57                   	push   edi
c0014e5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e63:	50                   	push   eax
c0014e64:	53                   	push   ebx
c0014e65:	e8 4e f6 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014e6a:	83 c4 20             	add    esp,0x20
c0014e6d:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014e71:	75 d3                	jne    c0014e46 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014e73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014e77:	89 28                	mov    DWORD PTR [eax],ebp
c0014e79:	83 c4 1c             	add    esp,0x1c
c0014e7c:	89 f8                	mov    eax,edi
c0014e7e:	5b                   	pop    ebx
c0014e7f:	5e                   	pop    esi
c0014e80:	5f                   	pop    edi
c0014e81:	5d                   	pop    ebp
c0014e82:	c3                   	ret    
c0014e83:	90                   	nop

c0014e84 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014e84:	53                   	push   ebx
c0014e85:	83 ec 14             	sub    esp,0x14
c0014e88:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014e8c:	68 b8 c9 02 c0       	push   0xc002c9b8
c0014e91:	e8 d0 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e96:	c7 04 24 18 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca18
c0014e9d:	e8 c4 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ea2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014ea6:	83 c4 18             	add    esp,0x18
c0014ea9:	5b                   	pop    ebx
c0014eaa:	e9 2e f2 ff ff       	jmp    c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c0014eaf:	90                   	nop

c0014eb0 <VAS::scanForEviction()>:
c0014eb0:	57                   	push   edi
c0014eb1:	56                   	push   esi
c0014eb2:	31 f6                	xor    esi,esi
c0014eb4:	53                   	push   ebx
c0014eb5:	83 ec 18             	sub    esp,0x18
c0014eb8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014ebd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ec1:	50                   	push   eax
c0014ec2:	68 94 ca 02 c0       	push   0xc002ca94
c0014ec7:	e8 9a 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ecc:	c7 04 24 dd cb 02 c0 	mov    DWORD PTR [esp],0xc002cbdd
c0014ed3:	e8 8e 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ed8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014ee4:	75 0e                	jne    c0014ef4 <VAS::scanForEviction()+0x44>
c0014ee6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014ee9:	89 da                	mov    edx,ebx
c0014eeb:	c1 ea 16             	shr    edx,0x16
c0014eee:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014ef2:	74 5b                	je     c0014f4f <VAS::scanForEviction()+0x9f>
c0014ef4:	83 ec 08             	sub    esp,0x8
c0014ef7:	53                   	push   ebx
c0014ef8:	57                   	push   edi
c0014ef9:	e8 c0 f1 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	8b 10                	mov    edx,DWORD PTR [eax]
c0014f03:	89 d1                	mov    ecx,edx
c0014f05:	c1 e9 0c             	shr    ecx,0xc
c0014f08:	74 10                	je     c0014f1a <VAS::scanForEviction()+0x6a>
c0014f0a:	89 d1                	mov    ecx,edx
c0014f0c:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014f12:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014f18:	74 40                	je     c0014f5a <VAS::scanForEviction()+0xaa>
c0014f1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014f20:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014f26:	76 2d                	jbe    c0014f55 <VAS::scanForEviction()+0xa5>
c0014f28:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014f2f:	83 c6 01             	add    esi,0x1
c0014f32:	83 fe 03             	cmp    esi,0x3
c0014f35:	74 37                	je     c0014f6e <VAS::scanForEviction()+0xbe>
c0014f37:	31 db                	xor    ebx,ebx
c0014f39:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014f3f:	75 b3                	jne    c0014ef4 <VAS::scanForEviction()+0x44>
c0014f41:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014f44:	89 da                	mov    edx,ebx
c0014f46:	c1 ea 16             	shr    edx,0x16
c0014f49:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014f4d:	75 a5                	jne    c0014ef4 <VAS::scanForEviction()+0x44>
c0014f4f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014f55:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014f58:	eb 84                	jmp    c0014ede <VAS::scanForEviction()+0x2e>
c0014f5a:	f6 c2 01             	test   dl,0x1
c0014f5d:	74 bb                	je     c0014f1a <VAS::scanForEviction()+0x6a>
c0014f5f:	f6 c2 20             	test   dl,0x20
c0014f62:	74 13                	je     c0014f77 <VAS::scanForEviction()+0xc7>
c0014f64:	83 e2 df             	and    edx,0xffffffdf
c0014f67:	89 10                	mov    DWORD PTR [eax],edx
c0014f69:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014f6c:	eb ac                	jmp    c0014f1a <VAS::scanForEviction()+0x6a>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	31 c0                	xor    eax,eax
c0014f73:	5b                   	pop    ebx
c0014f74:	5e                   	pop    esi
c0014f75:	5f                   	pop    edi
c0014f76:	c3                   	ret    
c0014f77:	89 d0                	mov    eax,edx
c0014f79:	83 ec 08             	sub    esp,0x8
c0014f7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014f81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f85:	53                   	push   ebx
c0014f86:	68 f9 cb 02 c0       	push   0xc002cbf9
c0014f8b:	e8 d6 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014f90:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014f93:	58                   	pop    eax
c0014f94:	5a                   	pop    edx
c0014f95:	51                   	push   ecx
c0014f96:	57                   	push   edi
c0014f97:	e8 48 fa ff ff       	call   c00149e4 <VAS::evict(unsigned long)>
c0014f9c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014f9f:	5b                   	pop    ebx
c0014fa0:	5e                   	pop    esi
c0014fa1:	50                   	push   eax
c0014fa2:	68 0d cc 02 c0       	push   0xc002cc0d
c0014fa7:	e8 ba 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014fac:	58                   	pop    eax
c0014fad:	5a                   	pop    edx
c0014fae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fb2:	50                   	push   eax
c0014fb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fb7:	68 20 cc 02 c0       	push   0xc002cc20
c0014fbc:	e8 a5 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014fc1:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014fc4:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014fca:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014fcd:	8b 3d 30 73 03 c0    	mov    edi,DWORD PTR ds:0xc0037330
c0014fd3:	5b                   	pop    ebx
c0014fd4:	5e                   	pop    esi
c0014fd5:	57                   	push   edi
c0014fd6:	68 b4 ca 02 c0       	push   0xc002cab4
c0014fdb:	e8 86 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fe7:	83 c4 10             	add    esp,0x10
c0014fea:	5b                   	pop    ebx
c0014feb:	5e                   	pop    esi
c0014fec:	5f                   	pop    edi
c0014fed:	c3                   	ret    

c0014fee <mapVASFirstTime>:
c0014fee:	55                   	push   ebp
c0014fef:	57                   	push   edi
c0014ff0:	56                   	push   esi
c0014ff1:	53                   	push   ebx
c0014ff2:	83 ec 0c             	sub    esp,0xc
c0014ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ffa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ffd:	83 fa 01             	cmp    edx,0x1
c0015000:	0f 84 cb 00 00 00    	je     c00150d1 <mapVASFirstTime+0xe3>
c0015006:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0015009:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001500e:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0015013:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0015016:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001501c:	c1 e5 15             	shl    ebp,0x15
c001501f:	29 eb                	sub    ebx,ebp
c0015021:	29 ef                	sub    edi,ebp
c0015023:	e8 6a ba ff ff       	call   c0010a92 <Phys::allocatePage()>
c0015028:	83 ec 0c             	sub    esp,0xc
c001502b:	68 03 04 00 00       	push   0x403
c0015030:	6a 01                	push   0x1
c0015032:	53                   	push   ebx
c0015033:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0015039:	50                   	push   eax
c001503a:	56                   	push   esi
c001503b:	e8 72 f6 ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015040:	83 c4 20             	add    esp,0x20
c0015043:	39 fb                	cmp    ebx,edi
c0015045:	75 dc                	jne    c0015023 <mapVASFirstTime+0x35>
c0015047:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001504c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0015051:	29 eb                	sub    ebx,ebp
c0015053:	29 ef                	sub    edi,ebp
c0015055:	e8 38 ba ff ff       	call   c0010a92 <Phys::allocatePage()>
c001505a:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001505e:	83 fa 01             	cmp    edx,0x1
c0015061:	19 d2                	sbb    edx,edx
c0015063:	83 ec 0c             	sub    esp,0xc
c0015066:	83 e2 04             	and    edx,0x4
c0015069:	81 c2 03 04 00 00    	add    edx,0x403
c001506f:	52                   	push   edx
c0015070:	6a 01                	push   0x1
c0015072:	53                   	push   ebx
c0015073:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0015079:	50                   	push   eax
c001507a:	56                   	push   esi
c001507b:	e8 32 f6 ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015080:	83 c4 20             	add    esp,0x20
c0015083:	39 df                	cmp    edi,ebx
c0015085:	75 ce                	jne    c0015055 <mapVASFirstTime+0x67>
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	bb 7c 30 03 c0       	mov    ebx,0xc003307c
c001508f:	6a 04                	push   0x4
c0015091:	81 eb 00 20 03 c0    	sub    ebx,0xc0032000
c0015097:	6a ff                	push   0xffffffff
c0015099:	c1 eb 0c             	shr    ebx,0xc
c001509c:	53                   	push   ebx
c001509d:	68 00 20 03 c0       	push   0xc0032000
c00150a2:	56                   	push   esi
c00150a3:	e8 b0 f1 ff ff       	call   c0014258 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00150a8:	83 c4 14             	add    esp,0x14
c00150ab:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c00150b0:	6a 04                	push   0x4
c00150b2:	6a ff                	push   0xffffffff
c00150b4:	53                   	push   ebx
c00150b5:	68 00 20 03 c0       	push   0xc0032000
c00150ba:	50                   	push   eax
c00150bb:	e8 98 f1 ff ff       	call   c0014258 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00150c0:	0f 20 d8             	mov    eax,cr3
c00150c3:	0f 22 d8             	mov    cr3,eax
c00150c6:	83 c4 20             	add    esp,0x20
c00150c9:	83 c4 0c             	add    esp,0xc
c00150cc:	5b                   	pop    ebx
c00150cd:	5e                   	pop    esi
c00150ce:	5f                   	pop    edi
c00150cf:	5d                   	pop    ebp
c00150d0:	c3                   	ret    
c00150d1:	83 ec 0c             	sub    esp,0xc
c00150d4:	68 2d cc 02 c0       	push   0xc002cc2d
c00150d9:	e8 88 1e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00150de:	83 c4 10             	add    esp,0x10
c00150e1:	83 c4 0c             	add    esp,0xc
c00150e4:	5b                   	pop    ebx
c00150e5:	5e                   	pop    esi
c00150e6:	5f                   	pop    edi
c00150e7:	5d                   	pop    ebp
c00150e8:	c3                   	ret    

c00150e9 <SysAlarm(regs*)>:
c00150e9:	53                   	push   ebx
c00150ea:	83 ec 10             	sub    esp,0x10
c00150ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00150f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00150f4:	68 46 cc 02 c0       	push   0xc002cc46
c00150f9:	e8 68 1e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00150fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015101:	83 c4 0c             	add    esp,0xc
c0015104:	31 d2                	xor    edx,edx
c0015106:	52                   	push   edx
c0015107:	50                   	push   eax
c0015108:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001510e:	e8 c5 09 00 00       	call   c0015ad8 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0015113:	83 c4 18             	add    esp,0x18
c0015116:	5b                   	pop    ebx
c0015117:	c3                   	ret    

c0015118 <SysEject(regs*)>:
c0015118:	83 ec 0c             	sub    esp,0xc
c001511b:	83 ca ff             	or     edx,0xffffffff
c001511e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015122:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015125:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001512a:	83 e9 41             	sub    ecx,0x41
c001512d:	83 f9 19             	cmp    ecx,0x19
c0015130:	77 18                	ja     c001514a <SysEject(regs*)+0x32>
c0015132:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0015139:	85 c9                	test   ecx,ecx
c001513b:	74 0d                	je     c001514a <SysEject(regs*)+0x32>
c001513d:	83 ec 0c             	sub    esp,0xc
c0015140:	51                   	push   ecx
c0015141:	e8 be 65 ff ff       	call   c000b704 <LogicalDisk::eject()>
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	99                   	cdq    
c001514a:	83 c4 0c             	add    esp,0xc
c001514d:	c3                   	ret    

c001514e <SysExit(regs*)>:
c001514e:	83 ec 18             	sub    esp,0x18
c0015151:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015155:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015158:	e8 b7 2a 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c001515d:	83 c8 ff             	or     eax,0xffffffff
c0015160:	83 c4 1c             	add    esp,0x1c
c0015163:	89 c2                	mov    edx,eax
c0015165:	c3                   	ret    

c0015166 <SysGetCwd(regs*)>:
c0015166:	83 ec 10             	sub    esp,0x10
c0015169:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001516d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015170:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015178:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001517b:	e8 e0 39 ff ff       	call   c0008b60 <Fs::getcwd(Process*, char*, int)>
c0015180:	83 c4 1c             	add    esp,0x1c
c0015183:	99                   	cdq    
c0015184:	c3                   	ret    

c0015185 <SysGetPID(regs*)>:
c0015185:	83 ec 14             	sub    esp,0x14
c0015188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001518d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015190:	ff 30                	push   DWORD PTR [eax]
c0015192:	68 5b cc 02 c0       	push   0xc002cc5b
c0015197:	e8 ca 1d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001519c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a6:	83 c4 1c             	add    esp,0x1c
c00151a9:	99                   	cdq    
c00151aa:	c3                   	ret    

c00151ab <SysGetRAMData(regs*)>:
c00151ab:	a1 88 72 03 c0       	mov    eax,ds:0xc0037288
c00151b0:	03 05 78 71 03 c0    	add    eax,DWORD PTR ds:0xc0037178
c00151b6:	8b 0d 7c 71 03 c0    	mov    ecx,DWORD PTR ds:0xc003717c
c00151bc:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00151c2:	99                   	cdq    
c00151c3:	f7 f9                	idiv   ecx
c00151c5:	c1 e0 18             	shl    eax,0x18
c00151c8:	09 c8                	or     eax,ecx
c00151ca:	99                   	cdq    
c00151cb:	c3                   	ret    

c00151cc <SysGetVGAPtr(regs*)>:
c00151cc:	55                   	push   ebp
c00151cd:	57                   	push   edi
c00151ce:	56                   	push   esi
c00151cf:	53                   	push   ebx
c00151d0:	83 ec 1c             	sub    esp,0x1c
c00151d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00151d7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00151da:	83 f8 ff             	cmp    eax,0xffffffff
c00151dd:	74 23                	je     c0015202 <SysGetVGAPtr(regs*)+0x36>
c00151df:	83 ec 0c             	sub    esp,0xc
c00151e2:	50                   	push   eax
c00151e3:	e8 e4 24 00 00       	call   c00176cc <KeProcessFromPID(int)>
c00151e8:	31 d2                	xor    edx,edx
c00151ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	b8 01 00 00 00       	mov    eax,0x1
c00151f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00151fb:	75 11                	jne    c001520e <SysGetVGAPtr(regs*)+0x42>
c00151fd:	e9 80 00 00 00       	jmp    c0015282 <SysGetVGAPtr(regs*)+0xb6>
c0015202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015207:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001520e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015212:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0015216:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c001521c:	74 0c                	je     c001522a <SysGetVGAPtr(regs*)+0x5e>
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	55                   	push   ebp
c0015222:	e8 70 dc ff ff       	call   c0012e97 <setActiveTerminal(VgaText*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001522d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015232:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015235:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015237:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001523a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001523d:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0015243:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0015246:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015249:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001524f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015253:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0015256:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c001525d:	c1 e8 07             	shr    eax,0x7
c0015260:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0015266:	50                   	push   eax
c0015267:	50                   	push   eax
c0015268:	68 6a cc 02 c0       	push   0xc002cc6a
c001526d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015270:	05 ac 0f 00 00       	add    eax,0xfac
c0015275:	50                   	push   eax
c0015276:	e8 d5 b3 fe ff       	call   c0000650 <strcpy>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	31 c0                	xor    eax,eax
c0015280:	31 d2                	xor    edx,edx
c0015282:	83 c4 1c             	add    esp,0x1c
c0015285:	5b                   	pop    ebx
c0015286:	5e                   	pop    esi
c0015287:	5f                   	pop    edi
c0015288:	5d                   	pop    ebp
c0015289:	c3                   	ret    
c001528a:	66 90                	xchg   ax,ax

c001528c <SysKill(regs*)>:
c001528c:	53                   	push   ebx
c001528d:	83 ec 08             	sub    esp,0x8
c0015290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015294:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0015298:	75 16                	jne    c00152b0 <SysKill(regs*)+0x24>
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	68 74 cc 02 c0       	push   0xc002cc74
c00152a2:	e8 f1 b5 ff ff       	call   c0010898 <KePanic(char const*)>
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	e9 89 00 00 00       	jmp    c0015338 <SysKill(regs*)+0xac>
c00152af:	90                   	nop
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	68 4c 73 03 c0       	push   0xc003734c
c00152b8:	e8 5b 45 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00152bd:	8d 76 00             	lea    esi,[esi+0x0]
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	85 c0                	test   eax,eax
c00152c5:	74 19                	je     c00152e0 <SysKill(regs*)+0x54>
c00152c7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00152ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00152cd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00152cf:	74 33                	je     c0015304 <SysKill(regs*)+0x78>
c00152d1:	52                   	push   edx
c00152d2:	52                   	push   edx
c00152d3:	50                   	push   eax
c00152d4:	68 4c 73 03 c0       	push   0xc003734c
c00152d9:	e8 46 4a 01 00       	call   c0029d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00152de:	eb e0                	jmp    c00152c0 <SysKill(regs*)+0x34>
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	68 40 73 03 c0       	push   0xc0037340
c00152e8:	e8 2b 45 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00152ed:	8d 76 00             	lea    esi,[esi+0x0]
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	85 c0                	test   eax,eax
c00152f5:	74 41                	je     c0015338 <SysKill(regs*)+0xac>
c00152f7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00152fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00152fd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00152ff:	75 27                	jne    c0015328 <SysKill(regs*)+0x9c>
c0015301:	8d 76 00             	lea    esi,[esi+0x0]
c0015304:	51                   	push   ecx
c0015305:	51                   	push   ecx
c0015306:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001530e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015311:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0015317:	e8 8b c7 ff ff       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	31 c0                	xor    eax,eax
c0015321:	31 d2                	xor    edx,edx
c0015323:	eb 1b                	jmp    c0015340 <SysKill(regs*)+0xb4>
c0015325:	8d 76 00             	lea    esi,[esi+0x0]
c0015328:	52                   	push   edx
c0015329:	52                   	push   edx
c001532a:	50                   	push   eax
c001532b:	68 40 73 03 c0       	push   0xc0037340
c0015330:	e8 ef 49 01 00       	call   c0029d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015335:	eb b9                	jmp    c00152f0 <SysKill(regs*)+0x64>
c0015337:	90                   	nop
c0015338:	83 c8 ff             	or     eax,0xffffffff
c001533b:	89 c2                	mov    edx,eax
c001533d:	8d 76 00             	lea    esi,[esi+0x0]
c0015340:	83 c4 08             	add    esp,0x8
c0015343:	5b                   	pop    ebx
c0015344:	c3                   	ret    

c0015345 <SysLoadDLL(regs*)>:
c0015345:	56                   	push   esi
c0015346:	31 d2                	xor    edx,edx
c0015348:	53                   	push   ebx
c0015349:	b8 01 00 00 00       	mov    eax,0x1
c001534e:	53                   	push   ebx
c001534f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015353:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015357:	0f 84 82 00 00 00    	je     c00153df <SysLoadDLL(regs*)+0x9a>
c001535d:	83 ec 0c             	sub    esp,0xc
c0015360:	68 14 01 00 00       	push   0x114
c0015365:	e8 da b0 ff ff       	call   c0010444 <malloc>
c001536a:	83 c4 0c             	add    esp,0xc
c001536d:	89 c3                	mov    ebx,eax
c001536f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015374:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001537a:	53                   	push   ebx
c001537b:	e8 60 3b ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	31 d2                	xor    edx,edx
c0015385:	85 db                	test   ebx,ebx
c0015387:	b8 02 00 00 00       	mov    eax,0x2
c001538c:	74 51                	je     c00153df <SysLoadDLL(regs*)+0x9a>
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	53                   	push   ebx
c0015392:	e8 2b 3e ff ff       	call   c00091c2 <File::exists()>
c0015397:	83 c4 10             	add    esp,0x10
c001539a:	84 c0                	test   al,al
c001539c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001539e:	75 11                	jne    c00153b1 <SysLoadDLL(regs*)+0x6c>
c00153a0:	83 ec 0c             	sub    esp,0xc
c00153a3:	53                   	push   ebx
c00153a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	b8 03 00 00 00       	mov    eax,0x3
c00153af:	eb 2c                	jmp    c00153dd <SysLoadDLL(regs*)+0x98>
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	53                   	push   ebx
c00153b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153b8:	83 c4 0c             	add    esp,0xc
c00153bb:	6a 00                	push   0x0
c00153bd:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c00153c3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00153c6:	e8 d3 16 00 00       	call   c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	31 d2                	xor    edx,edx
c00153d0:	88 c1                	mov    cl,al
c00153d2:	31 c0                	xor    eax,eax
c00153d4:	84 c9                	test   cl,cl
c00153d6:	75 07                	jne    c00153df <SysLoadDLL(regs*)+0x9a>
c00153d8:	b8 04 00 00 00       	mov    eax,0x4
c00153dd:	31 d2                	xor    edx,edx
c00153df:	59                   	pop    ecx
c00153e0:	5b                   	pop    ebx
c00153e1:	5e                   	pop    esi
c00153e2:	c3                   	ret    

c00153e3 <SysPause(regs*)>:
c00153e3:	83 ec 18             	sub    esp,0x18
c00153e6:	6a 08                	push   0x8
c00153e8:	e8 f3 20 00 00       	call   c00174e0 <blockTask(TaskState)>
c00153ed:	31 c0                	xor    eax,eax
c00153ef:	31 d2                	xor    edx,edx
c00153f1:	83 c4 1c             	add    esp,0x1c
c00153f4:	c3                   	ret    

c00153f5 <SysPthreadCreate(regs*)>:
c00153f5:	83 ec 18             	sub    esp,0x18
c00153f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015400:	e8 b3 1e 00 00       	call   c00172b8 <Process::createUserThread()>
c0015405:	31 c0                	xor    eax,eax
c0015407:	31 d2                	xor    edx,edx
c0015409:	83 c4 1c             	add    esp,0x1c
c001540c:	c3                   	ret    

c001540d <SysPthreadGetTID(regs*)>:
c001540d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015412:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015415:	99                   	cdq    
c0015416:	c3                   	ret    

c0015417 <SysInternalPthreadGetContext(regs*)>:
c0015417:	31 c0                	xor    eax,eax
c0015419:	31 d2                	xor    edx,edx
c001541b:	c3                   	ret    

c001541c <SysInternalPthreadGetStartLocation(regs*)>:
c001541c:	31 c0                	xor    eax,eax
c001541e:	31 d2                	xor    edx,edx
c0015420:	c3                   	ret    

c0015421 <SysPthreadJoin(regs*)>:
c0015421:	31 c0                	xor    eax,eax
c0015423:	31 d2                	xor    edx,edx
c0015425:	c3                   	ret    

c0015426 <SysPthreadExit(regs*)>:
c0015426:	83 ec 18             	sub    esp,0x18
c0015429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001542d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015430:	e8 df 27 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c0015435:	83 c8 ff             	or     eax,0xffffffff
c0015438:	83 c4 1c             	add    esp,0x1c
c001543b:	89 c2                	mov    edx,eax
c001543d:	c3                   	ret    

c001543e <SysRead(regs*)>:
c001543e:	57                   	push   edi
c001543f:	56                   	push   esi
c0015440:	53                   	push   ebx
c0015441:	83 ec 10             	sub    esp,0x10
c0015444:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015448:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001544b:	83 f8 02             	cmp    eax,0x2
c001544e:	77 10                	ja     c0015460 <SysRead(regs*)+0x22>
c0015450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015455:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015458:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001545e:	eb 0e                	jmp    c001546e <SysRead(regs*)+0x30>
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	50                   	push   eax
c0015464:	e8 18 e8 ff ff       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	89 c1                	mov    ecx,eax
c001546e:	83 c8 ff             	or     eax,0xffffffff
c0015471:	85 c9                	test   ecx,ecx
c0015473:	89 c2                	mov    edx,eax
c0015475:	74 28                	je     c001549f <SysRead(regs*)+0x61>
c0015477:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001547f:	83 ec 0c             	sub    esp,0xc
c0015482:	31 ff                	xor    edi,edi
c0015484:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015488:	8b 01                	mov    eax,DWORD PTR [ecx]
c001548a:	52                   	push   edx
c001548b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001548e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015491:	57                   	push   edi
c0015492:	56                   	push   esi
c0015493:	51                   	push   ecx
c0015494:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001549b:	83 c4 20             	add    esp,0x20
c001549e:	99                   	cdq    
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	5b                   	pop    ebx
c00154a3:	5e                   	pop    esi
c00154a4:	5f                   	pop    edi
c00154a5:	c3                   	ret    

c00154a6 <SysRegisterSignal(regs*)>:
c00154a6:	83 ec 18             	sub    esp,0x18
c00154a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154ad:	6a 00                	push   0x0
c00154af:	6a 00                	push   0x0
c00154b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00154b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154bf:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00154c5:	e8 a7 c5 ff ff       	call   c0011a71 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00154ca:	83 c4 2c             	add    esp,0x2c
c00154cd:	99                   	cdq    
c00154ce:	c3                   	ret    

c00154cf <SysRegistryGetTypeFromPath(regs*)>:
c00154cf:	53                   	push   ebx
c00154d0:	81 ec 40 01 00 00    	sub    esp,0x140
c00154d6:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00154dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00154e0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154e3:	e8 a3 97 ff ff       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	85 c0                	test   eax,eax
c00154ed:	89 c1                	mov    ecx,eax
c00154ef:	74 15                	je     c0015506 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00154f1:	50                   	push   eax
c00154f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00154f6:	50                   	push   eax
c00154f7:	51                   	push   ecx
c00154f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154fb:	e8 70 93 ff ff       	call   c000e870 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0015500:	83 c4 10             	add    esp,0x10
c0015503:	99                   	cdq    
c0015504:	eb 05                	jmp    c001550b <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0015506:	83 c8 ff             	or     eax,0xffffffff
c0015509:	89 c2                	mov    edx,eax
c001550b:	81 c4 38 01 00 00    	add    esp,0x138
c0015511:	5b                   	pop    ebx
c0015512:	c3                   	ret    

c0015513 <SysRegistryReadExtent(regs*)>:
c0015513:	83 ec 1c             	sub    esp,0x1c
c0015516:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001551a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001551d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0015520:	85 c0                	test   eax,eax
c0015522:	79 1f                	jns    c0015543 <SysRegistryReadExtent(regs*)+0x30>
c0015524:	52                   	push   edx
c0015525:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001552a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001552e:	52                   	push   edx
c001552f:	50                   	push   eax
c0015530:	51                   	push   ecx
c0015531:	e8 2c 92 ff ff       	call   c000e762 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015536:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001553a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	eb 14                	jmp    c0015557 <SysRegistryReadExtent(regs*)+0x44>
c0015543:	83 ec 04             	sub    esp,0x4
c0015546:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015549:	50                   	push   eax
c001554a:	51                   	push   ecx
c001554b:	e8 b0 8c ff ff       	call   c000e200 <CmGetString(Reghive_Tag*, int, char*)>
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	31 c0                	xor    eax,eax
c0015555:	31 d2                	xor    edx,edx
c0015557:	83 c4 1c             	add    esp,0x1c
c001555a:	c3                   	ret    

c001555b <SysRegistryPathToExtentLookup(regs*)>:
c001555b:	83 ec 14             	sub    esp,0x14
c001555e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015562:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015565:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015568:	e8 1e 97 ff ff       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001556d:	83 c4 1c             	add    esp,0x1c
c0015570:	99                   	cdq    
c0015571:	c3                   	ret    

c0015572 <SysRegistryEnterDirectory(regs*)>:
c0015572:	83 ec 14             	sub    esp,0x14
c0015575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015579:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001557c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001557f:	e8 f3 8c ff ff       	call   c000e277 <CmEnterDirectory(Reghive_Tag*, int)>
c0015584:	83 c4 1c             	add    esp,0x1c
c0015587:	99                   	cdq    
c0015588:	c3                   	ret    

c0015589 <SysRegistryGetNext(regs*)>:
c0015589:	83 ec 14             	sub    esp,0x14
c001558c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015590:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015593:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015596:	e8 1b 8d ff ff       	call   c000e2b6 <CmGetNext(Reghive_Tag*, int)>
c001559b:	83 c4 1c             	add    esp,0x1c
c001559e:	99                   	cdq    
c001559f:	c3                   	ret    

c00155a0 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00155a0:	57                   	push   edi
c00155a1:	56                   	push   esi
c00155a2:	53                   	push   ebx
c00155a3:	81 ec 34 01 00 00    	sub    esp,0x134
c00155a9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00155b0:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00155b4:	57                   	push   edi
c00155b5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00155b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00155bb:	e8 b0 92 ff ff       	call   c000e870 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00155c0:	89 c3                	mov    ebx,eax
c00155c2:	58                   	pop    eax
c00155c3:	5a                   	pop    edx
c00155c4:	57                   	push   edi
c00155c5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00155c8:	e8 83 b0 fe ff       	call   c0000650 <strcpy>
c00155cd:	81 c4 40 01 00 00    	add    esp,0x140
c00155d3:	89 d8                	mov    eax,ebx
c00155d5:	5b                   	pop    ebx
c00155d6:	99                   	cdq    
c00155d7:	5e                   	pop    esi
c00155d8:	5f                   	pop    edi
c00155d9:	c3                   	ret    

c00155da <SysRegistryOpen(regs*)>:
c00155da:	83 ec 18             	sub    esp,0x18
c00155dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155e1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155e4:	e8 a7 8a ff ff       	call   c000e090 <CmOpen(char const*)>
c00155e9:	83 c4 1c             	add    esp,0x1c
c00155ec:	99                   	cdq    
c00155ed:	c3                   	ret    

c00155ee <SysRegistryClose(regs*)>:
c00155ee:	83 ec 18             	sub    esp,0x18
c00155f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155f8:	e8 b1 8b ff ff       	call   c000e1ae <CmClose(Reghive_Tag*)>
c00155fd:	31 c0                	xor    eax,eax
c00155ff:	31 d2                	xor    edx,edx
c0015601:	83 c4 1c             	add    esp,0x1c
c0015604:	c3                   	ret    

c0015605 <SysRegistryEasyReadString(regs*)>:
c0015605:	57                   	push   edi
c0015606:	56                   	push   esi
c0015607:	53                   	push   ebx
c0015608:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015612:	e8 79 8a ff ff       	call   c000e090 <CmOpen(char const*)>
c0015617:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001561a:	5a                   	pop    edx
c001561b:	59                   	pop    ecx
c001561c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001561f:	89 c3                	mov    ebx,eax
c0015621:	50                   	push   eax
c0015622:	e8 64 96 ff ff       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	89 c1                	mov    ecx,eax
c001562c:	b8 01 00 00 00       	mov    eax,0x1
c0015631:	85 c9                	test   ecx,ecx
c0015633:	7e 16                	jle    c001564b <SysRegistryEasyReadString(regs*)+0x46>
c0015635:	50                   	push   eax
c0015636:	57                   	push   edi
c0015637:	51                   	push   ecx
c0015638:	53                   	push   ebx
c0015639:	e8 c2 8b ff ff       	call   c000e200 <CmGetString(Reghive_Tag*, int, char*)>
c001563e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015641:	e8 68 8b ff ff       	call   c000e1ae <CmClose(Reghive_Tag*)>
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	31 c0                	xor    eax,eax
c001564b:	5b                   	pop    ebx
c001564c:	31 d2                	xor    edx,edx
c001564e:	5e                   	pop    esi
c001564f:	5f                   	pop    edi
c0015650:	c3                   	ret    

c0015651 <SysRegistryEasyReadInteger(regs*)>:
c0015651:	56                   	push   esi
c0015652:	53                   	push   ebx
c0015653:	83 ec 10             	sub    esp,0x10
c0015656:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001565a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001565d:	e8 2e 8a ff ff       	call   c000e090 <CmOpen(char const*)>
c0015662:	5a                   	pop    edx
c0015663:	59                   	pop    ecx
c0015664:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015667:	89 c3                	mov    ebx,eax
c0015669:	50                   	push   eax
c001566a:	e8 1c 96 ff ff       	call   c000ec8b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	89 c1                	mov    ecx,eax
c0015674:	b8 01 00 00 00       	mov    eax,0x1
c0015679:	85 c9                	test   ecx,ecx
c001567b:	7e 18                	jle    c0015695 <SysRegistryEasyReadInteger(regs*)+0x44>
c001567d:	50                   	push   eax
c001567e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015681:	51                   	push   ecx
c0015682:	53                   	push   ebx
c0015683:	e8 da 90 ff ff       	call   c000e762 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001568b:	e8 1e 8b ff ff       	call   c000e1ae <CmClose(Reghive_Tag*)>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	31 c0                	xor    eax,eax
c0015695:	59                   	pop    ecx
c0015696:	31 d2                	xor    edx,edx
c0015698:	5b                   	pop    ebx
c0015699:	5e                   	pop    esi
c001569a:	c3                   	ret    

c001569b <SysSbrk(regs*)>:
c001569b:	56                   	push   esi
c001569c:	53                   	push   ebx
c001569d:	50                   	push   eax
c001569e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156aa:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00156ad:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00156b3:	85 db                	test   ebx,ebx
c00156b5:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00156b8:	74 02                	je     c00156bc <SysSbrk(regs*)+0x21>
c00156ba:	79 06                	jns    c00156c2 <SysSbrk(regs*)+0x27>
c00156bc:	89 f0                	mov    eax,esi
c00156be:	31 d2                	xor    edx,edx
c00156c0:	eb 2a                	jmp    c00156ec <SysSbrk(regs*)+0x51>
c00156c2:	83 c8 ff             	or     eax,0xffffffff
c00156c5:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00156cb:	89 c2                	mov    edx,eax
c00156cd:	77 1d                	ja     c00156ec <SysSbrk(regs*)+0x51>
c00156cf:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00156d5:	50                   	push   eax
c00156d6:	68 07 0c 00 00       	push   0xc07
c00156db:	c1 ea 0c             	shr    edx,0xc
c00156de:	52                   	push   edx
c00156df:	51                   	push   ecx
c00156e0:	e8 db ee ff ff       	call   c00145c0 <VAS::allocatePages(int, int)>
c00156e5:	89 f0                	mov    eax,esi
c00156e7:	31 d2                	xor    edx,edx
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	59                   	pop    ecx
c00156ed:	5b                   	pop    ebx
c00156ee:	5e                   	pop    esi
c00156ef:	c3                   	ret    

c00156f0 <SysSetCwd(regs*)>:
c00156f0:	83 ec 14             	sub    esp,0x14
c00156f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00156fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015702:	e8 5a 3b ff ff       	call   c0009261 <Fs::setcwd(Process*, char*)>
c0015707:	83 c4 1c             	add    esp,0x1c
c001570a:	99                   	cdq    
c001570b:	c3                   	ret    

c001570c <SysSetTime(regs*)>:
c001570c:	55                   	push   ebp
c001570d:	31 d2                	xor    edx,edx
c001570f:	57                   	push   edi
c0015710:	56                   	push   esi
c0015711:	53                   	push   ebx
c0015712:	bb 3c 00 00 00       	mov    ebx,0x3c
c0015717:	83 ec 30             	sub    esp,0x30
c001571a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001571e:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0015721:	89 f0                	mov    eax,esi
c0015723:	f7 f3                	div    ebx
c0015725:	89 d7                	mov    edi,edx
c0015727:	31 d2                	xor    edx,edx
c0015729:	f7 f3                	div    ebx
c001572b:	bb 10 0e 00 00       	mov    ebx,0xe10
c0015730:	89 f0                	mov    eax,esi
c0015732:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015736:	31 d2                	xor    edx,edx
c0015738:	f7 f3                	div    ebx
c001573a:	bb 18 00 00 00       	mov    ebx,0x18
c001573f:	31 d2                	xor    edx,edx
c0015741:	f7 f3                	div    ebx
c0015743:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0015746:	bb 0c 00 00 00       	mov    ebx,0xc
c001574b:	89 c6                	mov    esi,eax
c001574d:	c1 e8 05             	shr    eax,0x5
c0015750:	83 e6 1f             	and    esi,0x1f
c0015753:	46                   	inc    esi
c0015754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015758:	31 d2                	xor    edx,edx
c001575a:	f7 f3                	div    ebx
c001575c:	31 db                	xor    ebx,ebx
c001575e:	57                   	push   edi
c001575f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015767:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c001576b:	55                   	push   ebp
c001576c:	52                   	push   edx
c001576d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0015771:	56                   	push   esi
c0015772:	68 95 cc 02 c0       	push   0xc002cc95
c0015777:	e8 ea 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001577c:	83 c4 1c             	add    esp,0x1c
c001577f:	57                   	push   edi
c0015780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015788:	55                   	push   ebp
c0015789:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001578d:	52                   	push   edx
c001578e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015792:	56                   	push   esi
c0015793:	68 b7 cc 02 c0       	push   0xc002ccb7
c0015798:	e8 c9 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001579d:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00157a2:	31 c9                	xor    ecx,ecx
c00157a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00157a8:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c00157ac:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c00157b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00157b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00157ba:	89 f0                	mov    eax,esi
c00157bc:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00157c0:	88 c1                	mov    cl,al
c00157c2:	89 e8                	mov    eax,ebp
c00157c4:	88 d5                	mov    ch,dl
c00157c6:	83 c4 1c             	add    esp,0x1c
c00157c9:	c1 e0 10             	shl    eax,0x10
c00157cc:	0f b7 d1             	movzx  edx,cx
c00157cf:	09 c2                	or     edx,eax
c00157d1:	89 f8                	mov    eax,edi
c00157d3:	c1 e0 10             	shl    eax,0x10
c00157d6:	89 d1                	mov    ecx,edx
c00157d8:	89 da                	mov    edx,ebx
c00157da:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c00157e0:	09 c2                	or     edx,eax
c00157e2:	52                   	push   edx
c00157e3:	51                   	push   ecx
c00157e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00157e8:	e8 bd 4a ff ff       	call   c000a2aa <Clock::setTimeInDatetimeLocal(datetime_t)>
c00157ed:	83 c4 3c             	add    esp,0x3c
c00157f0:	31 d2                	xor    edx,edx
c00157f2:	5b                   	pop    ebx
c00157f3:	5e                   	pop    esi
c00157f4:	83 f0 01             	xor    eax,0x1
c00157f7:	5f                   	pop    edi
c00157f8:	0f b6 c0             	movzx  eax,al
c00157fb:	5d                   	pop    ebp
c00157fc:	c3                   	ret    

c00157fd <SysSymlink(regs*)>:
c00157fd:	56                   	push   esi
c00157fe:	83 c8 ff             	or     eax,0xffffffff
c0015801:	53                   	push   ebx
c0015802:	89 c2                	mov    edx,eax
c0015804:	81 ec 34 02 00 00    	sub    esp,0x234
c001580a:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015811:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015815:	74 50                	je     c0015867 <SysSymlink(regs*)+0x6a>
c0015817:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001581a:	85 c9                	test   ecx,ecx
c001581c:	74 49                	je     c0015867 <SysSymlink(regs*)+0x6a>
c001581e:	6a 01                	push   0x1
c0015820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015828:	05 0c 01 00 00       	add    eax,0x10c
c001582d:	50                   	push   eax
c001582e:	51                   	push   ecx
c001582f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015833:	56                   	push   esi
c0015834:	e8 7b 33 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015839:	6a 01                	push   0x1
c001583b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015840:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015843:	05 0c 01 00 00       	add    eax,0x10c
c0015848:	50                   	push   eax
c0015849:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001584c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015853:	53                   	push   ebx
c0015854:	e8 5b 33 ff ff       	call   c0008bb4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015859:	83 c4 18             	add    esp,0x18
c001585c:	56                   	push   esi
c001585d:	53                   	push   ebx
c001585e:	e8 7e 2f ff ff       	call   c00087e1 <KeCreateSymlink(char const*, char const*)>
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	99                   	cdq    
c0015867:	81 c4 34 02 00 00    	add    esp,0x234
c001586d:	5b                   	pop    ebx
c001586e:	5e                   	pop    esi
c001586f:	c3                   	ret    

c0015870 <SysTimezone(regs*)>:
c0015870:	83 ec 0c             	sub    esp,0xc
c0015873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015877:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001587b:	75 17                	jne    c0015894 <SysTimezone(regs*)+0x24>
c001587d:	83 ec 0c             	sub    esp,0xc
c0015880:	68 d9 cc 02 c0       	push   0xc002ccd9
c0015885:	e8 dc 16 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001588a:	83 c8 ff             	or     eax,0xffffffff
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	89 c2                	mov    edx,eax
c0015892:	eb 16                	jmp    c00158aa <SysTimezone(regs*)+0x3a>
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001589a:	e8 c2 44 ff ff       	call   c0009d61 <KeSetTimezone(int)>
c001589f:	31 d2                	xor    edx,edx
c00158a1:	83 c4 10             	add    esp,0x10
c00158a4:	83 f0 01             	xor    eax,0x1
c00158a7:	0f b6 c0             	movzx  eax,al
c00158aa:	83 c4 0c             	add    esp,0xc
c00158ad:	c3                   	ret    

c00158ae <SysTruncate(regs*)>:
c00158ae:	55                   	push   ebp
c00158af:	57                   	push   edi
c00158b0:	31 ff                	xor    edi,edi
c00158b2:	56                   	push   esi
c00158b3:	53                   	push   ebx
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158bb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00158be:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00158c2:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00158c5:	89 ce                	mov    esi,ecx
c00158c7:	0f 84 9a 00 00 00    	je     c0015967 <SysTruncate(regs*)+0xb9>
c00158cd:	83 ec 0c             	sub    esp,0xc
c00158d0:	68 14 01 00 00       	push   0x114
c00158d5:	e8 6a ab ff ff       	call   c0010444 <malloc>
c00158da:	83 c4 0c             	add    esp,0xc
c00158dd:	89 c3                	mov    ebx,eax
c00158df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158e7:	55                   	push   ebp
c00158e8:	53                   	push   ebx
c00158e9:	e8 f2 35 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	31 d2                	xor    edx,edx
c00158f3:	85 db                	test   ebx,ebx
c00158f5:	b8 03 00 00 00       	mov    eax,0x3
c00158fa:	0f 84 a2 00 00 00    	je     c00159a2 <SysTruncate(regs*)+0xf4>
c0015900:	51                   	push   ecx
c0015901:	51                   	push   ecx
c0015902:	6a 02                	push   0x2
c0015904:	53                   	push   ebx
c0015905:	e8 f4 35 ff ff       	call   c0008efe <File::open(FileOpenMode)>
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	85 c0                	test   eax,eax
c001590f:	74 13                	je     c0015924 <SysTruncate(regs*)+0x76>
c0015911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015913:	83 ec 0c             	sub    esp,0xc
c0015916:	53                   	push   ebx
c0015917:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	b8 04 00 00 00       	mov    eax,0x4
c0015922:	eb 7c                	jmp    c00159a0 <SysTruncate(regs*)+0xf2>
c0015924:	52                   	push   edx
c0015925:	57                   	push   edi
c0015926:	56                   	push   esi
c0015927:	53                   	push   ebx
c0015928:	e8 e5 36 ff ff       	call   c0009012 <File::truncate(unsigned long long)>
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	85 c0                	test   eax,eax
c0015932:	74 1b                	je     c001594f <SysTruncate(regs*)+0xa1>
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	53                   	push   ebx
c0015938:	e8 1f 36 ff ff       	call   c0008f5c <File::close()>
c001593d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001593f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015942:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	b8 05 00 00 00       	mov    eax,0x5
c001594d:	eb 51                	jmp    c00159a0 <SysTruncate(regs*)+0xf2>
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	53                   	push   ebx
c0015953:	e8 04 36 ff ff       	call   c0008f5c <File::close()>
c0015958:	8b 03                	mov    eax,DWORD PTR [ebx]
c001595a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001595d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	31 c0                	xor    eax,eax
c0015965:	eb 39                	jmp    c00159a0 <SysTruncate(regs*)+0xf2>
c0015967:	31 d2                	xor    edx,edx
c0015969:	83 fd 02             	cmp    ebp,0x2
c001596c:	b8 01 00 00 00       	mov    eax,0x1
c0015971:	7e 2f                	jle    c00159a2 <SysTruncate(regs*)+0xf4>
c0015973:	83 ec 0c             	sub    esp,0xc
c0015976:	51                   	push   ecx
c0015977:	e8 05 e3 ff ff       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	31 d2                	xor    edx,edx
c0015981:	89 c1                	mov    ecx,eax
c0015983:	b8 02 00 00 00       	mov    eax,0x2
c0015988:	85 c9                	test   ecx,ecx
c001598a:	74 16                	je     c00159a2 <SysTruncate(regs*)+0xf4>
c001598c:	50                   	push   eax
c001598d:	57                   	push   edi
c001598e:	56                   	push   esi
c001598f:	51                   	push   ecx
c0015990:	e8 7d 36 ff ff       	call   c0009012 <File::truncate(unsigned long long)>
c0015995:	83 c4 10             	add    esp,0x10
c0015998:	85 c0                	test   eax,eax
c001599a:	0f 95 c0             	setne  al
c001599d:	0f b6 c0             	movzx  eax,al
c00159a0:	31 d2                	xor    edx,edx
c00159a2:	83 c4 0c             	add    esp,0xc
c00159a5:	5b                   	pop    ebx
c00159a6:	5e                   	pop    esi
c00159a7:	5f                   	pop    edi
c00159a8:	5d                   	pop    ebp
c00159a9:	c3                   	ret    

c00159aa <SysWrite(regs*)>:
c00159aa:	57                   	push   edi
c00159ab:	56                   	push   esi
c00159ac:	53                   	push   ebx
c00159ad:	83 ec 10             	sub    esp,0x10
c00159b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159b7:	83 f8 02             	cmp    eax,0x2
c00159ba:	77 10                	ja     c00159cc <SysWrite(regs*)+0x22>
c00159bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159c4:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00159ca:	eb 0e                	jmp    c00159da <SysWrite(regs*)+0x30>
c00159cc:	83 ec 0c             	sub    esp,0xc
c00159cf:	50                   	push   eax
c00159d0:	e8 ac e2 ff ff       	call   c0013c81 <KeGetFileFromDescriptor(int)>
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	89 c1                	mov    ecx,eax
c00159da:	83 c8 ff             	or     eax,0xffffffff
c00159dd:	85 c9                	test   ecx,ecx
c00159df:	89 c2                	mov    edx,eax
c00159e1:	74 28                	je     c0015a0b <SysWrite(regs*)+0x61>
c00159e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00159eb:	83 ec 0c             	sub    esp,0xc
c00159ee:	31 ff                	xor    edi,edi
c00159f0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00159f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00159f6:	52                   	push   edx
c00159f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159fa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00159fd:	57                   	push   edi
c00159fe:	56                   	push   esi
c00159ff:	51                   	push   ecx
c0015a00:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015a03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a07:	83 c4 20             	add    esp,0x20
c0015a0a:	99                   	cdq    
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	5b                   	pop    ebx
c0015a0f:	5e                   	pop    esi
c0015a10:	5f                   	pop    edi
c0015a11:	c3                   	ret    

c0015a12 <SysWsbe(regs*)>:
c0015a12:	55                   	push   ebp
c0015a13:	57                   	push   edi
c0015a14:	56                   	push   esi
c0015a15:	53                   	push   ebx
c0015a16:	83 ec 3c             	sub    esp,0x3c
c0015a19:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015a1d:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015a24:	75 2d                	jne    c0015a53 <SysWsbe(regs*)+0x41>
c0015a26:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015a2d:	75 24                	jne    c0015a53 <SysWsbe(regs*)+0x41>
c0015a2f:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015a36:	75 1b                	jne    c0015a53 <SysWsbe(regs*)+0x41>
c0015a38:	6a 01                	push   0x1
c0015a3a:	6a 00                	push   0x0
c0015a3c:	68 5a ac 00 c0       	push   0xc000ac5a
c0015a41:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0015a47:	e8 20 17 00 00       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	31 c0                	xor    eax,eax
c0015a51:	eb 52                	jmp    c0015aa5 <SysWsbe(regs*)+0x93>
c0015a53:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015a57:	be ee cc 02 c0       	mov    esi,0xc002ccee
c0015a5c:	b9 0b 00 00 00       	mov    ecx,0xb
c0015a61:	fc                   	cld    
c0015a62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a73:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015a79:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a7b:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015a7e:	57                   	push   edi
c0015a7f:	e8 fc aa fe ff       	call   c0000580 <strlen>
c0015a84:	5a                   	pop    edx
c0015a85:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015a89:	52                   	push   edx
c0015a8a:	31 d2                	xor    edx,edx
c0015a8c:	57                   	push   edi
c0015a8d:	52                   	push   edx
c0015a8e:	50                   	push   eax
c0015a8f:	56                   	push   esi
c0015a90:	ff d5                	call   ebp
c0015a92:	83 c4 14             	add    esp,0x14
c0015a95:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a98:	e8 77 21 00 00       	call   c0017c14 <KeTerminateCurrentThread(int)>
c0015a9d:	83 c4 10             	add    esp,0x10
c0015aa0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015aa5:	83 c4 3c             	add    esp,0x3c
c0015aa8:	31 d2                	xor    edx,edx
c0015aaa:	5b                   	pop    ebx
c0015aab:	5e                   	pop    esi
c0015aac:	5f                   	pop    edi
c0015aad:	5d                   	pop    ebp
c0015aae:	c3                   	ret    

c0015aaf <SysYield(regs*)>:
c0015aaf:	83 ec 0c             	sub    esp,0xc
c0015ab2:	fa                   	cli    
c0015ab3:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0015ab9:	e8 62 19 00 00       	call   c0017420 <schedule()>
c0015abe:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0015ac5:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0015acc:	75 01                	jne    c0015acf <SysYield(regs*)+0x20>
c0015ace:	fb                   	sti    
c0015acf:	31 c0                	xor    eax,eax
c0015ad1:	31 d2                	xor    edx,edx
c0015ad3:	83 c4 0c             	add    esp,0xc
c0015ad6:	c3                   	ret    
c0015ad7:	90                   	nop

c0015ad8 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015ad8:	55                   	push   ebp
c0015ad9:	57                   	push   edi
c0015ada:	56                   	push   esi
c0015adb:	53                   	push   ebx
c0015adc:	83 ec 2c             	sub    esp,0x2c
c0015adf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015ae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ae7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015aeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015aef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015af3:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015af6:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015afa:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015afe:	c1 e0 08             	shl    eax,0x8
c0015b01:	09 c6                	or     esi,eax
c0015b03:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015b07:	c1 e0 10             	shl    eax,0x10
c0015b0a:	09 c6                	or     esi,eax
c0015b0c:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015b10:	83 e0 7f             	and    eax,0x7f
c0015b13:	c1 e0 18             	shl    eax,0x18
c0015b16:	09 f0                	or     eax,esi
c0015b18:	89 c5                	mov    ebp,eax
c0015b1a:	89 f8                	mov    eax,edi
c0015b1c:	80 f4 00             	xor    ah,0x0
c0015b1f:	89 c1                	mov    ecx,eax
c0015b21:	89 e8                	mov    eax,ebp
c0015b23:	80 f4 00             	xor    ah,0x0
c0015b26:	89 c3                	mov    ebx,eax
c0015b28:	89 d8                	mov    eax,ebx
c0015b2a:	09 c8                	or     eax,ecx
c0015b2c:	74 42                	je     c0015b70 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015b2e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b32:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015b35:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015b39:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015b3d:	c1 e0 08             	shl    eax,0x8
c0015b40:	09 c6                	or     esi,eax
c0015b42:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015b46:	c1 e0 10             	shl    eax,0x10
c0015b49:	09 c6                	or     esi,eax
c0015b4b:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015b4f:	83 e0 7f             	and    eax,0x7f
c0015b52:	c1 e0 18             	shl    eax,0x18
c0015b55:	09 f0                	or     eax,esi
c0015b57:	89 c3                	mov    ebx,eax
c0015b59:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c0015b5e:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c0015b64:	29 c1                	sub    ecx,eax
c0015b66:	19 d3                	sbb    ebx,edx
c0015b68:	89 c8                	mov    eax,ecx
c0015b6a:	89 da                	mov    edx,ebx
c0015b6c:	eb 0e                	jmp    c0015b7c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015b6e:	66 90                	xchg   ax,ax
c0015b70:	b8 00 00 00 00       	mov    eax,0x0
c0015b75:	ba 00 00 00 00       	mov    edx,0x0
c0015b7a:	66 90                	xchg   ax,ax
c0015b7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b80:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b88:	80 f4 00             	xor    ah,0x0
c0015b8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015b8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b93:	80 f4 00             	xor    ah,0x0
c0015b96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b9a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015b9e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015ba2:	89 e8                	mov    eax,ebp
c0015ba4:	09 f8                	or     eax,edi
c0015ba6:	74 30                	je     c0015bd8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015ba8:	8b 0d 50 6b 03 c0    	mov    ecx,DWORD PTR ds:0xc0036b50
c0015bae:	8b 1d 54 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b54
c0015bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015bbc:	01 c8                	add    eax,ecx
c0015bbe:	11 da                	adc    edx,ebx
c0015bc0:	89 c7                	mov    edi,eax
c0015bc2:	83 e7 ff             	and    edi,0xffffffff
c0015bc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015bc8:	89 d0                	mov    eax,edx
c0015bca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015bcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bd3:	eb 13                	jmp    c0015be8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015bdf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015be7:	90                   	nop
c0015be8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015bec:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015bef:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015bf3:	89 cf                	mov    edi,ecx
c0015bf5:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015bf8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015bfb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015bff:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0015c04:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015c07:	83 e2 00             	and    edx,0x0
c0015c0a:	88 d1                	mov    cl,dl
c0015c0c:	88 da                	mov    dl,bl
c0015c0e:	09 ca                	or     edx,ecx
c0015c10:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015c13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c17:	c1 ea 08             	shr    edx,0x8
c0015c1a:	0f b6 da             	movzx  ebx,dl
c0015c1d:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015c20:	83 e2 00             	and    edx,0x0
c0015c23:	88 d1                	mov    cl,dl
c0015c25:	88 da                	mov    dl,bl
c0015c27:	09 ca                	or     edx,ecx
c0015c29:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015c2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c30:	c1 ea 10             	shr    edx,0x10
c0015c33:	0f b6 da             	movzx  ebx,dl
c0015c36:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015c39:	83 e2 00             	and    edx,0x0
c0015c3c:	88 d1                	mov    cl,dl
c0015c3e:	88 da                	mov    dl,bl
c0015c40:	09 ca                	or     edx,ecx
c0015c42:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015c45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c49:	c1 ea 18             	shr    edx,0x18
c0015c4c:	83 e2 7f             	and    edx,0x7f
c0015c4f:	89 d3                	mov    ebx,edx
c0015c51:	83 e3 7f             	and    ebx,0x7f
c0015c54:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015c57:	83 e2 80             	and    edx,0xffffff80
c0015c5a:	88 d1                	mov    cl,dl
c0015c5c:	88 da                	mov    dl,bl
c0015c5e:	09 ca                	or     edx,ecx
c0015c60:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015c6b:	83 c4 2c             	add    esp,0x2c
c0015c6e:	5b                   	pop    ebx
c0015c6f:	5e                   	pop    esi
c0015c70:	5f                   	pop    edi
c0015c71:	5d                   	pop    ebp
c0015c72:	c3                   	ret    
c0015c73:	90                   	nop

c0015c74 <KeCheckAlarm(ThreadControlBlock*)>:
c0015c74:	55                   	push   ebp
c0015c75:	57                   	push   edi
c0015c76:	56                   	push   esi
c0015c77:	53                   	push   ebx
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015c82:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015c86:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015c8a:	c1 e5 08             	shl    ebp,0x8
c0015c8d:	09 fd                	or     ebp,edi
c0015c8f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015c93:	c1 e7 10             	shl    edi,0x10
c0015c96:	09 ef                	or     edi,ebp
c0015c98:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015c9c:	83 e0 7f             	and    eax,0x7f
c0015c9f:	c1 e0 18             	shl    eax,0x18
c0015ca2:	09 f8                	or     eax,edi
c0015ca4:	89 c1                	mov    ecx,eax
c0015ca6:	89 d0                	mov    eax,edx
c0015ca8:	80 f4 00             	xor    ah,0x0
c0015cab:	89 c3                	mov    ebx,eax
c0015cad:	89 c8                	mov    eax,ecx
c0015caf:	80 f4 00             	xor    ah,0x0
c0015cb2:	89 c6                	mov    esi,eax
c0015cb4:	89 f0                	mov    eax,esi
c0015cb6:	09 d8                	or     eax,ebx
c0015cb8:	0f 84 9e 00 00 00    	je     c0015d5c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc2:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015cc5:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0015cc9:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0015ccd:	c1 e6 08             	shl    esi,0x8
c0015cd0:	09 de                	or     esi,ebx
c0015cd2:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c0015cd6:	c1 e3 10             	shl    ebx,0x10
c0015cd9:	09 f3                	or     ebx,esi
c0015cdb:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015cdf:	83 e0 7f             	and    eax,0x7f
c0015ce2:	c1 e0 18             	shl    eax,0x18
c0015ce5:	09 d8                	or     eax,ebx
c0015ce7:	89 c1                	mov    ecx,eax
c0015ce9:	89 cb                	mov    ebx,ecx
c0015ceb:	89 d1                	mov    ecx,edx
c0015ced:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c0015cf2:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c0015cf8:	39 c8                	cmp    eax,ecx
c0015cfa:	89 d0                	mov    eax,edx
c0015cfc:	19 d8                	sbb    eax,ebx
c0015cfe:	72 5c                	jb     c0015d5c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d04:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015d0b:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015d0e:	83 e2 00             	and    edx,0x0
c0015d11:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015d14:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015d17:	83 e2 00             	and    edx,0x0
c0015d1a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015d1d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015d20:	83 e2 00             	and    edx,0x0
c0015d23:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015d26:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015d29:	83 e2 80             	and    edx,0xffffff80
c0015d2c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015d2f:	83 ec 0c             	sub    esp,0xc
c0015d32:	68 1a cd 02 c0       	push   0xc002cd1a
c0015d37:	e8 2a 12 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d43:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d46:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	6a 0e                	push   0xe
c0015d51:	50                   	push   eax
c0015d52:	e8 50 bd ff ff       	call   c0011aa7 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	66 90                	xchg   ax,ax
c0015d5c:	90                   	nop
c0015d5d:	83 c4 0c             	add    esp,0xc
c0015d60:	5b                   	pop    ebx
c0015d61:	5e                   	pop    esi
c0015d62:	5f                   	pop    edi
c0015d63:	5d                   	pop    ebp
c0015d64:	c3                   	ret    

c0015d65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015d65:	55                   	push   ebp
c0015d66:	57                   	push   edi
c0015d67:	56                   	push   esi
c0015d68:	53                   	push   ebx
c0015d69:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015d6f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015d7a:	74 3b                	je     c0015db7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015d7c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015d84:	74 31                	je     c0015db7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015d86:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015d8e:	75 27                	jne    c0015db7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015d90:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015d97:	05 00 10 00 00       	add    eax,0x1000
c0015d9c:	89 c2                	mov    edx,eax
c0015d9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015da3:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015daa:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015db0:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015db7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015dbe:	83 ec 0c             	sub    esp,0xc
c0015dc1:	6a 01                	push   0x1
c0015dc3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015dc9:	e8 11 e0 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0015dce:	83 c4 10             	add    esp,0x10
c0015dd1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015dd7:	89 c3                	mov    ebx,eax
c0015dd9:	0f 86 27 01 00 00    	jbe    c0015f06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0015ddf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015de7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015dee:	c1 ee 0c             	shr    esi,0xc
c0015df1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015df5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015dfc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015e03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e07:	29 ef                	sub    edi,ebp
c0015e09:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015e0d:	0f 83 fa 00 00 00    	jae    c0015f0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015e13:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015e19:	b8 00 10 00 00       	mov    eax,0x1000
c0015e1e:	0f 47 f8             	cmova  edi,eax
c0015e21:	83 ec 0c             	sub    esp,0xc
c0015e24:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015e2b:	31 d2                	xor    edx,edx
c0015e2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015e2f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015e33:	50                   	push   eax
c0015e34:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015e38:	56                   	push   esi
c0015e39:	52                   	push   edx
c0015e3a:	57                   	push   edi
c0015e3b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015e42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e45:	83 c4 20             	add    esp,0x20
c0015e48:	85 c0                	test   eax,eax
c0015e4a:	75 06                	jne    c0015e52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015e4c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015e50:	74 13                	je     c0015e65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	53                   	push   ebx
c0015e56:	e8 82 e2 ff ff       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	31 c0                	xor    eax,eax
c0015e60:	e9 80 01 00 00       	jmp    c0015fe5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015e65:	fa                   	cli    
c0015e66:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0015e6c:	e8 21 ac ff ff       	call   c0010a92 <Phys::allocatePage()>
c0015e71:	6a 07                	push   0x7
c0015e73:	53                   	push   ebx
c0015e74:	50                   	push   eax
c0015e75:	89 c7                	mov    edi,eax
c0015e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e7f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015e85:	e8 2e e6 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015e8a:	83 c4 0c             	add    esp,0xc
c0015e8d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015e94:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015e9a:	6a 00                	push   0x0
c0015e9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ea4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015eaa:	e8 75 e4 ff ff       	call   c0014324 <VAS::mapOtherVASIn(bool, VAS*)>
c0015eaf:	58                   	pop    eax
c0015eb0:	5a                   	pop    edx
c0015eb1:	68 07 0c 00 00       	push   0xc07
c0015eb6:	55                   	push   ebp
c0015eb7:	57                   	push   edi
c0015eb8:	89 df                	mov    edi,ebx
c0015eba:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015ec1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ec7:	6a 00                	push   0x0
c0015ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ece:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ed1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ed7:	e8 30 e8 ff ff       	call   c001470c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015edc:	b9 00 10 00 00       	mov    ecx,0x1000
c0015ee1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ee3:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0015eea:	83 c4 20             	add    esp,0x20
c0015eed:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0015ef4:	75 01                	jne    c0015ef7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015ef6:	fb                   	sti    
c0015ef7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015efb:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015f01:	e9 ef fe ff ff       	jmp    c0015df5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015f06:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015f0d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015f14:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015f1a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015f20:	0f 86 b1 00 00 00    	jbe    c0015fd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015f26:	fa                   	cli    
c0015f27:	51                   	push   ecx
c0015f28:	31 ff                	xor    edi,edi
c0015f2a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015f31:	c1 ee 0c             	shr    esi,0xc
c0015f34:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0015f3a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015f40:	6a 00                	push   0x0
c0015f42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f4a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015f50:	e8 cf e3 ff ff       	call   c0014324 <VAS::mapOtherVASIn(bool, VAS*)>
c0015f55:	83 c4 10             	add    esp,0x10
c0015f58:	e8 35 ab ff ff       	call   c0010a92 <Phys::allocatePage()>
c0015f5d:	47                   	inc    edi
c0015f5e:	6a 07                	push   0x7
c0015f60:	53                   	push   ebx
c0015f61:	50                   	push   eax
c0015f62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f66:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f6c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015f6f:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015f75:	e8 3e e5 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015f7a:	58                   	pop    eax
c0015f7b:	5a                   	pop    edx
c0015f7c:	68 07 0c 00 00       	push   0xc07
c0015f81:	55                   	push   ebp
c0015f82:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015f88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f8c:	50                   	push   eax
c0015f8d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015f94:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015f9a:	6a 00                	push   0x0
c0015f9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fa4:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015faa:	e8 5d e7 ff ff       	call   c001470c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015faf:	83 c4 1c             	add    esp,0x1c
c0015fb2:	68 00 10 00 00       	push   0x1000
c0015fb7:	6a 00                	push   0x0
c0015fb9:	53                   	push   ebx
c0015fba:	e8 31 a5 fe ff       	call   c00004f0 <memset>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	39 fe                	cmp    esi,edi
c0015fc4:	77 92                	ja     c0015f58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0015fc6:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0015fcd:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0015fd4:	75 01                	jne    c0015fd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015fd6:	fb                   	sti    
c0015fd7:	83 ec 0c             	sub    esp,0xc
c0015fda:	53                   	push   ebx
c0015fdb:	e8 fd e0 ff ff       	call   c00140dd <Virt::freeKernelVirtualPages(unsigned long)>
c0015fe0:	83 c4 10             	add    esp,0x10
c0015fe3:	b0 01                	mov    al,0x1
c0015fe5:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015feb:	5b                   	pop    ebx
c0015fec:	5e                   	pop    esi
c0015fed:	5f                   	pop    edi
c0015fee:	5d                   	pop    ebp
c0015fef:	c3                   	ret    

c0015ff0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015ff0:	55                   	push   ebp
c0015ff1:	57                   	push   edi
c0015ff2:	56                   	push   esi
c0015ff3:	53                   	push   ebx
c0015ff4:	83 ec 68             	sub    esp,0x68
c0015ff7:	68 14 01 00 00       	push   0x114
c0015ffc:	e8 43 a4 ff ff       	call   c0010444 <malloc>
c0016001:	83 c4 0c             	add    esp,0xc
c0016004:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016008:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001600c:	89 c3                	mov    ebx,eax
c001600e:	50                   	push   eax
c001600f:	e8 cc 2e ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0016014:	5e                   	pop    esi
c0016015:	5f                   	pop    edi
c0016016:	6a 01                	push   0x1
c0016018:	53                   	push   ebx
c0016019:	e8 e0 2e ff ff       	call   c0008efe <File::open(FileOpenMode)>
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	85 c0                	test   eax,eax
c0016023:	0f 85 cb 01 00 00    	jne    c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016029:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016031:	83 ec 0c             	sub    esp,0xc
c0016034:	6a 34                	push   0x34
c0016036:	e8 09 a4 ff ff       	call   c0010444 <malloc>
c001603b:	59                   	pop    ecx
c001603c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016040:	89 c7                	mov    edi,eax
c0016042:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016044:	56                   	push   esi
c0016045:	57                   	push   edi
c0016046:	6a 00                	push   0x0
c0016048:	6a 34                	push   0x34
c001604a:	53                   	push   ebx
c001604b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001604e:	83 c4 20             	add    esp,0x20
c0016051:	85 c0                	test   eax,eax
c0016053:	0f 85 9b 01 00 00    	jne    c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016059:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001605f:	0f 85 8f 01 00 00    	jne    c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016065:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016068:	85 c0                	test   eax,eax
c001606a:	0f 84 84 01 00 00    	je     c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016070:	52                   	push   edx
c0016071:	31 d2                	xor    edx,edx
c0016073:	52                   	push   edx
c0016074:	50                   	push   eax
c0016075:	53                   	push   ebx
c0016076:	e8 41 2f ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c001607b:	83 c4 10             	add    esp,0x10
c001607e:	85 c0                	test   eax,eax
c0016080:	0f 85 6e 01 00 00    	jne    c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016086:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016089:	83 ec 0c             	sub    esp,0xc
c001608c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016090:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016094:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016098:	0f af c2             	imul   eax,edx
c001609b:	50                   	push   eax
c001609c:	e8 a3 a3 ff ff       	call   c0010444 <malloc>
c00160a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00160a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00160a6:	31 f6                	xor    esi,esi
c00160a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160b0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00160b4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00160b8:	0f af c2             	imul   eax,edx
c00160bb:	99                   	cdq    
c00160bc:	52                   	push   edx
c00160bd:	50                   	push   eax
c00160be:	53                   	push   ebx
c00160bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00160c2:	83 c4 20             	add    esp,0x20
c00160c5:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00160c9:	0f b7 c6             	movzx  eax,si
c00160cc:	73 71                	jae    c001613f <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00160ce:	55                   	push   ebp
c00160cf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00160d3:	6b c0 28             	imul   eax,eax,0x28
c00160d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160da:	6b d2 28             	imul   edx,edx,0x28
c00160dd:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00160e0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00160e4:	31 d2                	xor    edx,edx
c00160e6:	52                   	push   edx
c00160e7:	50                   	push   eax
c00160e8:	53                   	push   ebx
c00160e9:	e8 ce 2e ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c00160ee:	83 c4 0c             	add    esp,0xc
c00160f1:	6a 20                	push   0x20
c00160f3:	6a 00                	push   0x0
c00160f5:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00160f9:	55                   	push   ebp
c00160fa:	e8 f1 a3 fe ff       	call   c00004f0 <memset>
c00160ff:	58                   	pop    eax
c0016100:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016102:	8d 54 24 38          	lea    edx,[esp+0x38]
c0016106:	52                   	push   edx
c0016107:	55                   	push   ebp
c0016108:	6a 00                	push   0x0
c001610a:	6a 1f                	push   0x1f
c001610c:	53                   	push   ebx
c001610d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016110:	83 c4 18             	add    esp,0x18
c0016113:	55                   	push   ebp
c0016114:	68 2b cd 02 c0       	push   0xc002cd2b
c0016119:	e8 62 a6 fe ff       	call   c0000780 <strcmp>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	85 c0                	test   eax,eax
c0016123:	75 17                	jne    c001613c <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0016125:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0016129:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001612d:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0016133:	83 c8 80             	or     eax,0xffffff80
c0016136:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c001613c:	46                   	inc    esi
c001613d:	eb 86                	jmp    c00160c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001613f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016142:	85 c0                	test   eax,eax
c0016144:	0f 84 aa 00 00 00    	je     c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001614a:	31 d2                	xor    edx,edx
c001614c:	56                   	push   esi
c001614d:	52                   	push   edx
c001614e:	50                   	push   eax
c001614f:	53                   	push   ebx
c0016150:	e8 67 2e ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	85 c0                	test   eax,eax
c001615a:	0f 85 94 00 00 00    	jne    c00161f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0016160:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001616b:	0f af c2             	imul   eax,edx
c001616e:	50                   	push   eax
c001616f:	e8 d0 a2 ff ff       	call   c0010444 <malloc>
c0016174:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016178:	59                   	pop    ecx
c0016179:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001617b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001617f:	50                   	push   eax
c0016180:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016184:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016188:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001618c:	0f af c2             	imul   eax,edx
c001618f:	99                   	cdq    
c0016190:	52                   	push   edx
c0016191:	50                   	push   eax
c0016192:	53                   	push   ebx
c0016193:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016196:	83 c4 20             	add    esp,0x20
c0016199:	31 c9                	xor    ecx,ecx
c001619b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00161a3:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00161a7:	0f b7 e9             	movzx  ebp,cx
c00161aa:	0f 83 89 00 00 00    	jae    c0016239 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00161b0:	c1 e5 05             	shl    ebp,0x5
c00161b3:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00161b7:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00161bb:	75 76                	jne    c0016233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00161bd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00161c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00161c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161cb:	52                   	push   edx
c00161cc:	31 d2                	xor    edx,edx
c00161ce:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00161d1:	52                   	push   edx
c00161d2:	50                   	push   eax
c00161d3:	53                   	push   ebx
c00161d4:	e8 e3 2d ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00161e0:	85 c0                	test   eax,eax
c00161e2:	74 17                	je     c00161fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c00161e4:	83 ec 0c             	sub    esp,0xc
c00161e7:	68 3a cd 02 c0       	push   0xc002cd3a
c00161ec:	e8 75 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	31 c0                	xor    eax,eax
c00161f6:	e9 8e 00 00 00       	jmp    c0016289 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c00161fb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00161ff:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0016202:	83 ec 0c             	sub    esp,0xc
c0016205:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0016208:	50                   	push   eax
c0016209:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001620d:	56                   	push   esi
c001620e:	53                   	push   ebx
c001620f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0016216:	e8 4a fb ff ff       	call   c0015d65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001621b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001621f:	83 c4 20             	add    esp,0x20
c0016222:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0016226:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001622a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001622f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016233:	41                   	inc    ecx
c0016234:	e9 6a ff ff ff       	jmp    c00161a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0016239:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016244:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016248:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001624e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016253:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0016259:	05 00 10 00 00       	add    eax,0x1000
c001625e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016265:	e8 ea a1 ff ff       	call   c0010454 <free>
c001626a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001626d:	e8 e2 a1 ff ff       	call   c0010454 <free>
c0016272:	58                   	pop    eax
c0016273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016277:	e8 d8 a1 ff ff       	call   c0010454 <free>
c001627c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001627f:	e8 d8 2c ff ff       	call   c0008f5c <File::close()>
c0016284:	83 c4 10             	add    esp,0x10
c0016287:	b0 01                	mov    al,0x1
c0016289:	83 c4 5c             	add    esp,0x5c
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	5d                   	pop    ebp
c0016290:	c3                   	ret    

c0016291 <Thr::runtimeReferenceHelper()>:
c0016291:	83 ec 18             	sub    esp,0x18
c0016294:	68 42 cd 02 c0       	push   0xc002cd42
c0016299:	e8 c8 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001629e:	fa                   	cli    
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	eb fe                	jmp    c00162a2 <Thr::runtimeReferenceHelper()+0x11>

c00162a4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00162a4:	57                   	push   edi
c00162a5:	56                   	push   esi
c00162a6:	53                   	push   ebx
c00162a7:	31 db                	xor    ebx,ebx
c00162a9:	39 1d 00 73 03 c0    	cmp    DWORD PTR ds:0xc0037300,ebx
c00162af:	7e 3c                	jle    c00162ed <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00162b1:	8b 34 9d e0 72 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc8d20]
c00162b8:	31 ff                	xor    edi,edi
c00162ba:	39 3c 9d a0 72 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc8d60],edi
c00162c1:	7e 27                	jle    c00162ea <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00162c3:	50                   	push   eax
c00162c4:	50                   	push   eax
c00162c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00162cb:	03 04 9d c0 72 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc8d40]
c00162d2:	50                   	push   eax
c00162d3:	e8 a8 a4 fe ff       	call   c0000780 <strcmp>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	85 c0                	test   eax,eax
c00162dd:	75 05                	jne    c00162e4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00162df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00162e2:	eb 0b                	jmp    c00162ef <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00162e4:	83 c6 10             	add    esi,0x10
c00162e7:	47                   	inc    edi
c00162e8:	eb d0                	jmp    c00162ba <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00162ea:	43                   	inc    ebx
c00162eb:	eb bc                	jmp    c00162a9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00162ed:	31 c0                	xor    eax,eax
c00162ef:	5b                   	pop    ebx
c00162f0:	5e                   	pop    esi
c00162f1:	5f                   	pop    edi
c00162f2:	c3                   	ret    

c00162f3 <Thr::loadKernelSymbolTable(char const*)>:
c00162f3:	55                   	push   ebp
c00162f4:	57                   	push   edi
c00162f5:	56                   	push   esi
c00162f6:	53                   	push   ebx
c00162f7:	83 ec 68             	sub    esp,0x68
c00162fa:	68 14 01 00 00       	push   0x114
c00162ff:	8b 35 58 73 03 c0    	mov    esi,DWORD PTR ds:0xc0037358
c0016305:	e8 3a a1 ff ff       	call   c0010444 <malloc>
c001630a:	83 c4 0c             	add    esp,0xc
c001630d:	56                   	push   esi
c001630e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016312:	89 c3                	mov    ebx,eax
c0016314:	50                   	push   eax
c0016315:	e8 c6 2b ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c001631a:	5e                   	pop    esi
c001631b:	5f                   	pop    edi
c001631c:	6a 01                	push   0x1
c001631e:	53                   	push   ebx
c001631f:	e8 da 2b ff ff       	call   c0008efe <File::open(FileOpenMode)>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	85 c0                	test   eax,eax
c0016329:	74 0a                	je     c0016335 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001632b:	83 ec 0c             	sub    esp,0xc
c001632e:	68 64 cd 02 c0       	push   0xc002cd64
c0016333:	eb 34                	jmp    c0016369 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016335:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001633d:	83 ec 0c             	sub    esp,0xc
c0016340:	6a 34                	push   0x34
c0016342:	e8 fd a0 ff ff       	call   c0010444 <malloc>
c0016347:	59                   	pop    ecx
c0016348:	8d 74 24 34          	lea    esi,[esp+0x34]
c001634c:	89 c7                	mov    edi,eax
c001634e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016350:	56                   	push   esi
c0016351:	57                   	push   edi
c0016352:	6a 00                	push   0x0
c0016354:	6a 34                	push   0x34
c0016356:	53                   	push   ebx
c0016357:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001635a:	83 c4 20             	add    esp,0x20
c001635d:	85 c0                	test   eax,eax
c001635f:	74 17                	je     c0016378 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016361:	83 ec 0c             	sub    esp,0xc
c0016364:	68 7b cd 02 c0       	push   0xc002cd7b
c0016369:	e8 2a a5 ff ff       	call   c0010898 <KePanic(char const*)>
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	31 c0                	xor    eax,eax
c0016373:	e9 31 02 00 00       	jmp    c00165a9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016378:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001637e:	75 e1                	jne    c0016361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016380:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016383:	85 c0                	test   eax,eax
c0016385:	74 da                	je     c0016361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016387:	52                   	push   edx
c0016388:	31 d2                	xor    edx,edx
c001638a:	52                   	push   edx
c001638b:	50                   	push   eax
c001638c:	53                   	push   ebx
c001638d:	e8 2a 2c ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	85 c0                	test   eax,eax
c0016397:	75 c8                	jne    c0016361 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016399:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001639d:	83 ec 0c             	sub    esp,0xc
c00163a0:	31 ed                	xor    ebp,ebp
c00163a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00163a6:	0f af c2             	imul   eax,edx
c00163a9:	50                   	push   eax
c00163aa:	e8 95 a0 ff ff       	call   c0010444 <malloc>
c00163af:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00163b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00163b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163bc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00163c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00163c4:	0f af c2             	imul   eax,edx
c00163c7:	99                   	cdq    
c00163c8:	52                   	push   edx
c00163c9:	50                   	push   eax
c00163ca:	53                   	push   ebx
c00163cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00163ce:	83 c4 20             	add    esp,0x20
c00163d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00163e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163f1:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00163f5:	0f b7 f5             	movzx  esi,bp
c00163f8:	0f 83 a7 00 00 00    	jae    c00164a5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00163fe:	6b f6 28             	imul   esi,esi,0x28
c0016401:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016405:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016408:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001640c:	50                   	push   eax
c001640d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016411:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016415:	8b 16                	mov    edx,DWORD PTR [esi]
c0016417:	6b c0 28             	imul   eax,eax,0x28
c001641a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001641e:	89 d0                	mov    eax,edx
c0016420:	31 d2                	xor    edx,edx
c0016422:	52                   	push   edx
c0016423:	50                   	push   eax
c0016424:	53                   	push   ebx
c0016425:	e8 92 2b ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	6a 20                	push   0x20
c001642f:	6a 00                	push   0x0
c0016431:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016435:	52                   	push   edx
c0016436:	e8 b5 a0 fe ff       	call   c00004f0 <memset>
c001643b:	58                   	pop    eax
c001643c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001643e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016442:	51                   	push   ecx
c0016443:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016447:	52                   	push   edx
c0016448:	6a 00                	push   0x0
c001644a:	6a 1f                	push   0x1f
c001644c:	53                   	push   ebx
c001644d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016450:	83 c4 18             	add    esp,0x18
c0016453:	68 92 cd 02 c0       	push   0xc002cd92
c0016458:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001645c:	52                   	push   edx
c001645d:	e8 1e a3 fe ff       	call   c0000780 <strcmp>
c0016462:	83 c4 10             	add    esp,0x10
c0016465:	85 c0                	test   eax,eax
c0016467:	75 0f                	jne    c0016478 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016469:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001646c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016470:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016478:	50                   	push   eax
c0016479:	50                   	push   eax
c001647a:	68 9a cd 02 c0       	push   0xc002cd9a
c001647f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016483:	50                   	push   eax
c0016484:	e8 f7 a2 fe ff       	call   c0000780 <strcmp>
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	85 c0                	test   eax,eax
c001648e:	75 0f                	jne    c001649f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016490:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016493:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016497:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001649b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001649f:	45                   	inc    ebp
c00164a0:	e9 4c ff ff ff       	jmp    c00163f1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00164a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164aa:	75 10                	jne    c00164bc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	68 a2 cd 02 c0       	push   0xc002cda2
c00164b4:	e8 df a3 ff ff       	call   c0010898 <KePanic(char const*)>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00164c1:	75 10                	jne    c00164d3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	68 a2 cd 02 c0       	push   0xc002cda2
c00164cb:	e8 c8 a3 ff ff       	call   c0010898 <KePanic(char const*)>
c00164d0:	83 c4 10             	add    esp,0x10
c00164d3:	50                   	push   eax
c00164d4:	31 d2                	xor    edx,edx
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	52                   	push   edx
c00164db:	50                   	push   eax
c00164dc:	53                   	push   ebx
c00164dd:	e8 da 2a ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c00164e2:	5a                   	pop    edx
c00164e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164e7:	e8 58 9f ff ff       	call   c0010444 <malloc>
c00164ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164f0:	31 c9                	xor    ecx,ecx
c00164f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164f8:	5e                   	pop    esi
c00164f9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00164fd:	55                   	push   ebp
c00164fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016502:	51                   	push   ecx
c0016503:	52                   	push   edx
c0016504:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016508:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001650c:	53                   	push   ebx
c001650d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016510:	83 c4 14             	add    esp,0x14
c0016513:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016517:	e8 28 9f ff ff       	call   c0010444 <malloc>
c001651c:	89 c6                	mov    esi,eax
c001651e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016520:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016523:	56                   	push   esi
c0016524:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016528:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001652c:	51                   	push   ecx
c001652d:	52                   	push   edx
c001652e:	53                   	push   ebx
c001652f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016536:	83 c4 1c             	add    esp,0x1c
c0016539:	8b 15 00 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037300
c001653f:	c1 e8 04             	shr    eax,0x4
c0016542:	89 04 95 a0 72 03 c0 	mov    DWORD PTR [edx*4-0x3ffc8d60],eax
c0016549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001654d:	31 d2                	xor    edx,edx
c001654f:	52                   	push   edx
c0016550:	50                   	push   eax
c0016551:	53                   	push   ebx
c0016552:	e8 65 2a ff ff       	call   c0008fbc <File::seek(unsigned long long)>
c0016557:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016559:	31 d2                	xor    edx,edx
c001655b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001655e:	56                   	push   esi
c001655f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016563:	52                   	push   edx
c0016564:	50                   	push   eax
c0016565:	53                   	push   ebx
c0016566:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016569:	83 c4 14             	add    esp,0x14
c001656c:	53                   	push   ebx
c001656d:	e8 ea 29 ff ff       	call   c0008f5c <File::close()>
c0016572:	5d                   	pop    ebp
c0016573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016577:	e8 d8 9e ff ff       	call   c0010454 <free>
c001657c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001657f:	e8 d0 9e ff ff       	call   c0010454 <free>
c0016584:	a1 00 73 03 c0       	mov    eax,ds:0xc0037300
c0016589:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	89 34 85 c0 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8d40],esi
c0016597:	8d 50 01             	lea    edx,[eax+0x1]
c001659a:	89 0c 85 e0 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8d20],ecx
c00165a1:	b0 01                	mov    al,0x1
c00165a3:	89 15 00 73 03 c0    	mov    DWORD PTR ds:0xc0037300,edx
c00165a9:	83 c4 5c             	add    esp,0x5c
c00165ac:	5b                   	pop    ebx
c00165ad:	5e                   	pop    esi
c00165ae:	5f                   	pop    edi
c00165af:	5d                   	pop    ebp
c00165b0:	c3                   	ret    

c00165b1 <KeIsELFValid(Elf32_Ehdr*)>:
c00165b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165b5:	31 c0                	xor    eax,eax
c00165b7:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c00165ba:	75 13                	jne    c00165cf <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00165bc:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c00165c0:	75 0d                	jne    c00165cf <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00165c2:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c00165c6:	75 07                	jne    c00165cf <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00165c8:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c00165cc:	0f 94 c0             	sete   al
c00165cf:	c3                   	ret    

c00165d0 <KeGetELFSectionHeader(unsigned char*, int)>:
c00165d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165d4:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c00165d9:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c00165dc:	01 d0                	add    eax,edx
c00165de:	c3                   	ret    

c00165df <KeGetELFProgramHeader(unsigned char*, int)>:
c00165df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165e7:	c1 e0 05             	shl    eax,0x5
c00165ea:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c00165ed:	01 d0                	add    eax,edx
c00165ef:	c3                   	ret    

c00165f0 <KeLookupELFString(unsigned char*, int)>:
c00165f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00165f4:	31 c0                	xor    eax,eax
c00165f6:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c00165fa:	85 d2                	test   edx,edx
c00165fc:	74 14                	je     c0016612 <KeLookupELFString(unsigned char*, int)+0x22>
c00165fe:	52                   	push   edx
c00165ff:	51                   	push   ecx
c0016600:	e8 cb ff ff ff       	call   c00165d0 <KeGetELFSectionHeader(unsigned char*, int)>
c0016605:	5a                   	pop    edx
c0016606:	5a                   	pop    edx
c0016607:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001660a:	89 c8                	mov    eax,ecx
c001660c:	74 04                	je     c0016612 <KeLookupELFString(unsigned char*, int)+0x22>
c001660e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016612:	c3                   	ret    

c0016613 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0016613:	55                   	push   ebp
c0016614:	31 ed                	xor    ebp,ebp
c0016616:	57                   	push   edi
c0016617:	56                   	push   esi
c0016618:	53                   	push   ebx
c0016619:	83 ec 1c             	sub    esp,0x1c
c001661c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016620:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016627:	89 04 24             	mov    DWORD PTR [esp],eax
c001662a:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c001662f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016637:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c001663b:	39 e8                	cmp    eax,ebp
c001663d:	7e 79                	jle    c00166b8 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c001663f:	55                   	push   ebp
c0016640:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016644:	e8 96 ff ff ff       	call   c00165df <KeGetELFProgramHeader(unsigned char*, int)>
c0016649:	5a                   	pop    edx
c001664a:	59                   	pop    ecx
c001664b:	83 38 01             	cmp    DWORD PTR [eax],0x1
c001664e:	75 62                	jne    c00166b2 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0016650:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0016653:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016658:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c001665b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001665e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016662:	75 22                	jne    c0016686 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	01 f3                	add    ebx,esi
c0016669:	68 bc cd 02 c0       	push   0xc002cdbc
c001666e:	e8 25 a2 ff ff       	call   c0010898 <KePanic(char const*)>
c0016673:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001667d:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c0016681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016684:	eb 2c                	jmp    c00166b2 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0016686:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001668a:	89 d9                	mov    ecx,ebx
c001668c:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0016690:	01 f2                	add    edx,esi
c0016692:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016696:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0016699:	89 d7                	mov    edi,edx
c001669b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001669d:	50                   	push   eax
c001669e:	01 da                	add    edx,ebx
c00166a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166a4:	29 d8                	sub    eax,ebx
c00166a6:	50                   	push   eax
c00166a7:	6a 00                	push   0x0
c00166a9:	52                   	push   edx
c00166aa:	e8 41 9e fe ff       	call   c00004f0 <memset>
c00166af:	83 c4 10             	add    esp,0x10
c00166b2:	45                   	inc    ebp
c00166b3:	e9 7b ff ff ff       	jmp    c0016633 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c00166b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00166bb:	83 c4 1c             	add    esp,0x1c
c00166be:	5b                   	pop    ebx
c00166bf:	5e                   	pop    esi
c00166c0:	5f                   	pop    edi
c00166c1:	5d                   	pop    ebp
c00166c2:	c3                   	ret    

c00166c3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c00166c3:	57                   	push   edi
c00166c4:	56                   	push   esi
c00166c5:	53                   	push   ebx
c00166c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166ca:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00166ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166d6:	85 c0                	test   eax,eax
c00166d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166db:	74 04                	je     c00166e1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00166dd:	85 db                	test   ebx,ebx
c00166df:	75 05                	jne    c00166e6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c00166e1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00166e4:	eb 5c                	jmp    c0016742 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c00166e6:	50                   	push   eax
c00166e7:	51                   	push   ecx
c00166e8:	e8 e3 fe ff ff       	call   c00165d0 <KeGetELFSectionHeader(unsigned char*, int)>
c00166ed:	5f                   	pop    edi
c00166ee:	5a                   	pop    edx
c00166ef:	31 d2                	xor    edx,edx
c00166f1:	89 c7                	mov    edi,eax
c00166f3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00166f6:	f7 77 24             	div    DWORD PTR [edi+0x24]
c00166f9:	39 c3                	cmp    ebx,eax
c00166fb:	73 e4                	jae    c00166e1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00166fd:	c1 e3 04             	shl    ebx,0x4
c0016700:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0016703:	01 cb                	add    ebx,ecx
c0016705:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0016709:	85 d2                	test   edx,edx
c001670b:	75 39                	jne    c0016746 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c001670d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0016710:	51                   	push   ecx
c0016711:	e8 ba fe ff ff       	call   c00165d0 <KeGetELFSectionHeader(unsigned char*, int)>
c0016716:	52                   	push   edx
c0016717:	03 0b                	add    ecx,DWORD PTR [ebx]
c0016719:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001671c:	51                   	push   ecx
c001671d:	e8 82 fb ff ff       	call   c00162a4 <Thr::getAddressOfKernelSymbol(char const*)>
c0016722:	83 c4 10             	add    esp,0x10
c0016725:	85 c0                	test   eax,eax
c0016727:	75 32                	jne    c001675b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016729:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c001672d:	75 03                	jne    c0016732 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c001672f:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	68 e5 cd 02 c0       	push   0xc002cde5
c001673a:	e8 27 08 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	31 c0                	xor    eax,eax
c0016744:	eb 15                	jmp    c001675b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016746:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c001674c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001674f:	74 0a                	je     c001675b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016751:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016755:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0016759:	01 d0                	add    eax,edx
c001675b:	5b                   	pop    ebx
c001675c:	5e                   	pop    esi
c001675d:	5f                   	pop    edi
c001675e:	c3                   	ret    

c001675f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c001675f:	55                   	push   ebp
c0016760:	57                   	push   edi
c0016761:	56                   	push   esi
c0016762:	53                   	push   ebx
c0016763:	83 ec 1c             	sub    esp,0x1c
c0016766:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001676a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001676e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016772:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0016775:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0016777:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001677a:	29 ef                	sub    edi,ebp
c001677c:	01 fb                	add    ebx,edi
c001677e:	c1 ea 08             	shr    edx,0x8
c0016781:	74 2d                	je     c00167b0 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0016783:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016788:	50                   	push   eax
c0016789:	50                   	push   eax
c001678a:	55                   	push   ebp
c001678b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001678f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0016793:	50                   	push   eax
c0016794:	52                   	push   edx
c0016795:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016799:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001679c:	51                   	push   ecx
c001679d:	e8 21 ff ff ff       	call   c00166c3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c00167a2:	83 c4 20             	add    esp,0x20
c00167a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00167aa:	74 06                	je     c00167b2 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c00167ac:	31 c0                	xor    eax,eax
c00167ae:	eb 27                	jmp    c00167d7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00167b0:	31 c0                	xor    eax,eax
c00167b2:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c00167b6:	83 fa 01             	cmp    edx,0x1
c00167b9:	75 04                	jne    c00167bf <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c00167bb:	01 03                	add    DWORD PTR [ebx],eax
c00167bd:	eb 16                	jmp    c00167d5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00167bf:	83 fa 02             	cmp    edx,0x2
c00167c2:	75 08                	jne    c00167cc <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c00167c4:	03 03                	add    eax,DWORD PTR [ebx]
c00167c6:	29 d8                	sub    eax,ebx
c00167c8:	89 03                	mov    DWORD PTR [ebx],eax
c00167ca:	eb 09                	jmp    c00167d5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00167cc:	31 c0                	xor    eax,eax
c00167ce:	83 fa 08             	cmp    edx,0x8
c00167d1:	75 04                	jne    c00167d7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00167d3:	01 3b                	add    DWORD PTR [ebx],edi
c00167d5:	b0 01                	mov    al,0x1
c00167d7:	83 c4 1c             	add    esp,0x1c
c00167da:	5b                   	pop    ebx
c00167db:	5e                   	pop    esi
c00167dc:	5f                   	pop    edi
c00167dd:	5d                   	pop    ebp
c00167de:	c3                   	ret    

c00167df <KePerformRelocations(unsigned char*, unsigned long)>:
c00167df:	55                   	push   ebp
c00167e0:	31 ed                	xor    ebp,ebp
c00167e2:	57                   	push   edi
c00167e3:	56                   	push   esi
c00167e4:	53                   	push   ebx
c00167e5:	83 ec 1c             	sub    esp,0x1c
c00167e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167ec:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00167f0:	39 e8                	cmp    eax,ebp
c00167f2:	0f 8e 92 00 00 00    	jle    c001688a <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c00167f8:	55                   	push   ebp
c00167f9:	56                   	push   esi
c00167fa:	e8 d1 fd ff ff       	call   c00165d0 <KeGetELFSectionHeader(unsigned char*, int)>
c00167ff:	5a                   	pop    edx
c0016800:	59                   	pop    ecx
c0016801:	89 c3                	mov    ebx,eax
c0016803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016806:	83 f8 09             	cmp    eax,0x9
c0016809:	75 64                	jne    c001686f <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c001680b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001680e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0016811:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016815:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016818:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001681c:	ff 33                	push   DWORD PTR [ebx]
c001681e:	56                   	push   esi
c001681f:	e8 cc fd ff ff       	call   c00165f0 <KeLookupELFString(unsigned char*, int)>
c0016824:	68 06 ce 02 c0       	push   0xc002ce06
c0016829:	50                   	push   eax
c001682a:	e8 51 9f fe ff       	call   c0000780 <strcmp>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	85 c0                	test   eax,eax
c0016834:	89 c1                	mov    ecx,eax
c0016836:	75 4c                	jne    c0016884 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001683c:	31 d2                	xor    edx,edx
c001683e:	01 f7                	add    edi,esi
c0016840:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0016844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016848:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c001684c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016850:	7d 32                	jge    c0016884 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016852:	57                   	push   edi
c0016853:	83 c7 08             	add    edi,0x8
c0016856:	53                   	push   ebx
c0016857:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001685b:	56                   	push   esi
c001685c:	e8 fe fe ff ff       	call   c001675f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	84 c0                	test   al,al
c0016866:	74 24                	je     c001688c <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0016868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001686c:	41                   	inc    ecx
c001686d:	eb d9                	jmp    c0016848 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c001686f:	83 f8 04             	cmp    eax,0x4
c0016872:	75 10                	jne    c0016884 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	68 0f ce 02 c0       	push   0xc002ce0f
c001687c:	e8 17 a0 ff ff       	call   c0010898 <KePanic(char const*)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	45                   	inc    ebp
c0016885:	e9 62 ff ff ff       	jmp    c00167ec <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c001688a:	b0 01                	mov    al,0x1
c001688c:	83 c4 1c             	add    esp,0x1c
c001688f:	5b                   	pop    ebx
c0016890:	5e                   	pop    esi
c0016891:	5f                   	pop    edi
c0016892:	5d                   	pop    ebp
c0016893:	c3                   	ret    

c0016894 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016894:	57                   	push   edi
c0016895:	56                   	push   esi
c0016896:	53                   	push   ebx
c0016897:	83 ec 10             	sub    esp,0x10
c001689a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001689e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00168a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00168a6:	53                   	push   ebx
c00168a7:	e8 05 fd ff ff       	call   c00165b1 <KeIsELFValid(Elf32_Ehdr*)>
c00168ac:	59                   	pop    ecx
c00168ad:	84 c0                	test   al,al
c00168af:	75 04                	jne    c00168b5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c00168b1:	31 c0                	xor    eax,eax
c00168b3:	eb 4d                	jmp    c0016902 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c00168b5:	81 e6 ff 00 00 00    	and    esi,0xff
c00168bb:	74 07                	je     c00168c4 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c00168bd:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c00168c2:	74 ed                	je     c00168b1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00168c4:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c00168c9:	74 e6                	je     c00168b1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00168cb:	52                   	push   edx
c00168cc:	57                   	push   edi
c00168cd:	56                   	push   esi
c00168ce:	53                   	push   ebx
c00168cf:	e8 3f fd ff ff       	call   c0016613 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c00168d4:	59                   	pop    ecx
c00168d5:	5a                   	pop    edx
c00168d6:	50                   	push   eax
c00168d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168db:	68 30 ce 02 c0       	push   0xc002ce30
c00168e0:	e8 81 06 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	85 f6                	test   esi,esi
c00168ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168ee:	74 12                	je     c0016902 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c00168f0:	50                   	push   eax
c00168f1:	50                   	push   eax
c00168f2:	57                   	push   edi
c00168f3:	53                   	push   ebx
c00168f4:	e8 e6 fe ff ff       	call   c00167df <KePerformRelocations(unsigned char*, unsigned long)>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	84 c0                	test   al,al
c00168fe:	74 b1                	je     c00168b1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016900:	89 f8                	mov    eax,edi
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	5b                   	pop    ebx
c0016906:	5e                   	pop    esi
c0016907:	5f                   	pop    edi
c0016908:	c3                   	ret    

c0016909 <KeLoadDriver(char const*)>:
c0016909:	55                   	push   ebp
c001690a:	57                   	push   edi
c001690b:	56                   	push   esi
c001690c:	53                   	push   ebx
c001690d:	83 ec 34             	sub    esp,0x34
c0016910:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0016914:	57                   	push   edi
c0016915:	68 54 ce 02 c0       	push   0xc002ce54
c001691a:	e8 47 06 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001691f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016926:	e8 19 9b ff ff       	call   c0010444 <malloc>
c001692b:	83 c4 0c             	add    esp,0xc
c001692e:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0016934:	57                   	push   edi
c0016935:	50                   	push   eax
c0016936:	89 c6                	mov    esi,eax
c0016938:	e8 a3 25 ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	85 f6                	test   esi,esi
c0016942:	0f 84 20 01 00 00    	je     c0016a68 <KeLoadDriver(char const*)+0x15f>
c0016948:	50                   	push   eax
c0016949:	8d 44 24 17          	lea    eax,[esp+0x17]
c001694d:	50                   	push   eax
c001694e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016952:	50                   	push   eax
c0016953:	56                   	push   esi
c0016954:	e8 a7 28 ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016961:	0f 85 01 01 00 00    	jne    c0016a68 <KeLoadDriver(char const*)+0x15f>
c0016967:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001696b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001696f:	89 d1                	mov    ecx,edx
c0016971:	09 c1                	or     ecx,eax
c0016973:	0f 84 ef 00 00 00    	je     c0016a68 <KeLoadDriver(char const*)+0x15f>
c0016979:	05 ff 0f 00 00       	add    eax,0xfff
c001697e:	51                   	push   ecx
c001697f:	83 d2 00             	adc    edx,0x0
c0016982:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016986:	6a 03                	push   0x3
c0016988:	50                   	push   eax
c0016989:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c001698f:	e8 2c dc ff ff       	call   c00145c0 <VAS::allocatePages(int, int)>
c0016994:	83 c4 0c             	add    esp,0xc
c0016997:	50                   	push   eax
c0016998:	89 c3                	mov    ebx,eax
c001699a:	57                   	push   edi
c001699b:	68 6a ce 02 c0       	push   0xc002ce6a
c00169a0:	e8 c1 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00169a5:	5f                   	pop    edi
c00169a6:	5d                   	pop    ebp
c00169a7:	6a 01                	push   0x1
c00169a9:	56                   	push   esi
c00169aa:	e8 4f 25 ff ff       	call   c0008efe <File::open(FileOpenMode)>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	85 c0                	test   eax,eax
c00169b4:	74 11                	je     c00169c7 <KeLoadDriver(char const*)+0xbe>
c00169b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	56                   	push   esi
c00169bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	e9 a1 00 00 00       	jmp    c0016a68 <KeLoadDriver(char const*)+0x15f>
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169ce:	e8 71 9a ff ff       	call   c0010444 <malloc>
c00169d3:	5d                   	pop    ebp
c00169d4:	31 ed                	xor    ebp,ebp
c00169d6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00169da:	89 c7                	mov    edi,eax
c00169dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00169de:	52                   	push   edx
c00169df:	57                   	push   edi
c00169e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169e8:	56                   	push   esi
c00169e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169ec:	83 c4 14             	add    esp,0x14
c00169ef:	56                   	push   esi
c00169f0:	e8 67 25 ff ff       	call   c0008f5c <File::close()>
c00169f5:	83 c4 0c             	add    esp,0xc
c00169f8:	53                   	push   ebx
c00169f9:	6a 01                	push   0x1
c00169fb:	57                   	push   edi
c00169fc:	e8 93 fe ff ff       	call   c0016894 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	89 c6                	mov    esi,eax
c0016a06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a0e:	05 ff 0f 00 00       	add    eax,0xfff
c0016a13:	83 d2 00             	adc    edx,0x0
c0016a16:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016a1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a1e:	c1 ea 0c             	shr    edx,0xc
c0016a21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a25:	ba 00 00 00 00       	mov    edx,0x0
c0016a2a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0016a2e:	89 d0                	mov    eax,edx
c0016a30:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016a34:	73 34                	jae    c0016a6a <KeLoadDriver(char const*)+0x161>
c0016a36:	50                   	push   eax
c0016a37:	50                   	push   eax
c0016a38:	89 e8                	mov    eax,ebp
c0016a3a:	c1 e0 0c             	shl    eax,0xc
c0016a3d:	01 d8                	add    eax,ebx
c0016a3f:	50                   	push   eax
c0016a40:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0016a46:	e8 73 d6 ff ff       	call   c00140be <VAS::getPageTableEntry(unsigned long)>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a50:	a8 60                	test   al,0x60
c0016a52:	75 11                	jne    c0016a65 <KeLoadDriver(char const*)+0x15c>
c0016a54:	83 ec 0c             	sub    esp,0xc
c0016a57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a5c:	50                   	push   eax
c0016a5d:	e8 c7 9f ff ff       	call   c0010a29 <Phys::freePage(unsigned long)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	45                   	inc    ebp
c0016a66:	eb 9e                	jmp    c0016a06 <KeLoadDriver(char const*)+0xfd>
c0016a68:	31 f6                	xor    esi,esi
c0016a6a:	83 c4 2c             	add    esp,0x2c
c0016a6d:	89 f0                	mov    eax,esi
c0016a6f:	5b                   	pop    ebx
c0016a70:	5e                   	pop    esi
c0016a71:	5f                   	pop    edi
c0016a72:	5d                   	pop    ebp
c0016a73:	c3                   	ret    

c0016a74 <KeExecuteDriver(unsigned long, void*)>:
c0016a74:	56                   	push   esi
c0016a75:	53                   	push   ebx
c0016a76:	51                   	push   ecx
c0016a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016a7f:	85 db                	test   ebx,ebx
c0016a81:	75 10                	jne    c0016a93 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	68 76 ce 02 c0       	push   0xc002ce76
c0016a8b:	e8 08 9e ff ff       	call   c0010898 <KePanic(char const*)>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016a97:	89 d8                	mov    eax,ebx
c0016a99:	5a                   	pop    edx
c0016a9a:	5b                   	pop    ebx
c0016a9b:	5e                   	pop    esi
c0016a9c:	ff e0                	jmp    eax

c0016a9e <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0016a9e:	57                   	push   edi
c0016a9f:	56                   	push   esi
c0016aa0:	53                   	push   ebx
c0016aa1:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016aa7:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0016aae:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0016ab5:	56                   	push   esi
c0016ab6:	e8 4e fe ff ff       	call   c0016909 <KeLoadDriver(char const*)>
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	85 c0                	test   eax,eax
c0016ac0:	74 16                	je     c0016ad8 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0016ac2:	53                   	push   ebx
c0016ac3:	53                   	push   ebx
c0016ac4:	b3 01                	mov    bl,0x1
c0016ac6:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0016acd:	50                   	push   eax
c0016ace:	e8 a1 ff ff ff       	call   c0016a74 <KeExecuteDriver(unsigned long, void*)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	eb 2d                	jmp    c0016b05 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016ad8:	89 fb                	mov    ebx,edi
c0016ada:	84 db                	test   bl,bl
c0016adc:	74 27                	je     c0016b05 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016ade:	50                   	push   eax
c0016adf:	50                   	push   eax
c0016ae0:	68 a0 ce 02 c0       	push   0xc002cea0
c0016ae5:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016ae9:	53                   	push   ebx
c0016aea:	e8 61 9b fe ff       	call   c0000650 <strcpy>
c0016aef:	5a                   	pop    edx
c0016af0:	59                   	pop    ecx
c0016af1:	56                   	push   esi
c0016af2:	53                   	push   ebx
c0016af3:	e8 78 9d fe ff       	call   c0000870 <strcat>
c0016af8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016afb:	31 db                	xor    ebx,ebx
c0016afd:	e8 96 9d ff ff       	call   c0010898 <KePanic(char const*)>
c0016b02:	83 c4 10             	add    esp,0x10
c0016b05:	81 c4 00 01 00 00    	add    esp,0x100
c0016b0b:	88 d8                	mov    al,bl
c0016b0d:	5b                   	pop    ebx
c0016b0e:	5e                   	pop    esi
c0016b0f:	5f                   	pop    edi
c0016b10:	c3                   	ret    

c0016b11 <KeProcessExec(Process*, char const*)>:
c0016b11:	56                   	push   esi
c0016b12:	53                   	push   ebx
c0016b13:	83 ec 04             	sub    esp,0x4
c0016b16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b1a:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016b20:	85 f6                	test   esi,esi
c0016b22:	74 16                	je     c0016b3a <KeProcessExec(Process*, char const*)+0x29>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	56                   	push   esi
c0016b28:	e8 23 d8 ff ff       	call   c0014350 <VAS::~VAS()>
c0016b2d:	58                   	pop    eax
c0016b2e:	5a                   	pop    edx
c0016b2f:	6a 14                	push   0x14
c0016b31:	56                   	push   esi
c0016b32:	e8 05 75 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	6a 14                	push   0x14
c0016b3f:	e8 00 99 ff ff       	call   c0010444 <malloc>
c0016b44:	89 c6                	mov    esi,eax
c0016b46:	58                   	pop    eax
c0016b47:	5a                   	pop    edx
c0016b48:	6a 00                	push   0x0
c0016b4a:	56                   	push   esi
c0016b4b:	e8 ac dc ff ff       	call   c00147fc <VAS::VAS(bool)>
c0016b50:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016b56:	59                   	pop    ecx
c0016b57:	5e                   	pop    esi
c0016b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b5c:	50                   	push   eax
c0016b5d:	53                   	push   ebx
c0016b5e:	e8 8d f4 ff ff       	call   c0015ff0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016b63:	83 c4 14             	add    esp,0x14
c0016b66:	31 c0                	xor    eax,eax
c0016b68:	5b                   	pop    ebx
c0016b69:	5e                   	pop    esi
c0016b6a:	c3                   	ret    
c0016b6b:	90                   	nop

c0016b6c <userModeEntryPoint(void*)>:
c0016b6c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0016b74:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0016b79:	85 c0                	test   eax,eax
c0016b7b:	75 03                	jne    c0016b80 <userModeEntryPoint(void*)+0x14>
c0016b7d:	fb                   	sti    
c0016b7e:	66 90                	xchg   ax,ax
c0016b80:	fb                   	sti    
c0016b81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b89:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016b8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b93:	e9 a7 96 fe ff       	jmp    c000023f <goToUsermode>

c0016b98 <changeTSS>:
c0016b98:	83 ec 14             	sub    esp,0x14
c0016b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ba0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016ba3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016ba8:	c1 e2 15             	shl    edx,0x15
c0016bab:	29 d0                	sub    eax,edx
c0016bad:	50                   	push   eax
c0016bae:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0016bb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bb9:	05 68 11 00 00       	add    eax,0x1168
c0016bbe:	50                   	push   eax
c0016bbf:	e8 dc ca ff ff       	call   c00136a0 <TSS::setESP(unsigned long)>
c0016bc4:	83 c4 1c             	add    esp,0x1c
c0016bc7:	c3                   	ret    

c0016bc8 <switchToThread(ThreadControlBlock*)>:
c0016bc8:	57                   	push   edi
c0016bc9:	8b 0d 2c 73 03 c0    	mov    ecx,DWORD PTR ds:0xc003732c
c0016bcf:	56                   	push   esi
c0016bd0:	53                   	push   ebx
c0016bd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bd5:	85 c9                	test   ecx,ecx
c0016bd7:	0f 85 9b 00 00 00    	jne    c0016c78 <switchToThread(ThreadControlBlock*)+0xb0>
c0016bdd:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016be1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016be7:	0f 84 87 00 00 00    	je     c0016c74 <switchToThread(ThreadControlBlock*)+0xac>
c0016bed:	b8 00 04 00 00       	mov    eax,0x400
c0016bf2:	29 d0                	sub    eax,edx
c0016bf4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016bf7:	d1 f8                	sar    eax,1
c0016bf9:	01 d0                	add    eax,edx
c0016bfb:	90                   	nop
c0016bfc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016bff:	e8 0d 49 00 00       	call   c001b511 <HalQueryPerformanceCounter()>
c0016c04:	a3 70 73 03 c0       	mov    ds:0xc0037370,eax
c0016c09:	89 c6                	mov    esi,eax
c0016c0b:	89 d7                	mov    edi,edx
c0016c0d:	2b 35 60 73 03 c0    	sub    esi,DWORD PTR ds:0xc0037360
c0016c13:	a3 60 73 03 c0       	mov    ds:0xc0037360,eax
c0016c18:	1b 3d 64 73 03 c0    	sbb    edi,DWORD PTR ds:0xc0037364
c0016c1e:	89 35 68 73 03 c0    	mov    DWORD PTR ds:0xc0037368,esi
c0016c24:	89 15 74 73 03 c0    	mov    DWORD PTR ds:0xc0037374,edx
c0016c2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c30:	89 15 64 73 03 c0    	mov    DWORD PTR ds:0xc0037364,edx
c0016c36:	89 3d 6c 73 03 c0    	mov    DWORD PTR ds:0xc003736c,edi
c0016c3c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016c3f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016c42:	01 c6                	add    esi,eax
c0016c44:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016c47:	11 d7                	adc    edi,edx
c0016c49:	83 ec 0c             	sub    esp,0xc
c0016c4c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016c4f:	53                   	push   ebx
c0016c50:	e8 22 96 fe ff       	call   c0000277 <switchToThreadASM>
c0016c55:	0f 20 c0             	mov    eax,cr0
c0016c58:	83 c8 08             	or     eax,0x8
c0016c5b:	0f 22 c0             	mov    cr0,eax
c0016c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c6a:	5b                   	pop    ebx
c0016c6b:	5e                   	pop    esi
c0016c6c:	5f                   	pop    edi
c0016c6d:	e9 02 f0 ff ff       	jmp    c0015c74 <KeCheckAlarm(ThreadControlBlock*)>
c0016c72:	66 90                	xchg   ax,ax
c0016c74:	31 c0                	xor    eax,eax
c0016c76:	eb 84                	jmp    c0016bfc <switchToThread(ThreadControlBlock*)+0x34>
c0016c78:	5b                   	pop    ebx
c0016c79:	c7 05 28 73 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x1
c0016c83:	5e                   	pop    esi
c0016c84:	5f                   	pop    edi
c0016c85:	c3                   	ret    
c0016c86:	66 90                	xchg   ax,ax

c0016c88 <Process::addArgs(char**)>:
c0016c88:	57                   	push   edi
c0016c89:	56                   	push   esi
c0016c8a:	53                   	push   ebx
c0016c8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016c8f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0016c93:	85 f6                	test   esi,esi
c0016c95:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c0016c9f:	74 4f                	je     c0016cf0 <Process::addArgs(char**)+0x68>
c0016ca1:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ca3:	85 c0                	test   eax,eax
c0016ca5:	74 49                	je     c0016cf0 <Process::addArgs(char**)+0x68>
c0016ca7:	31 db                	xor    ebx,ebx
c0016ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	50                   	push   eax
c0016cb0:	e8 cb 98 fe ff       	call   c0000580 <strlen>
c0016cb5:	83 c0 01             	add    eax,0x1
c0016cb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cbb:	e8 84 97 ff ff       	call   c0010444 <malloc>
c0016cc0:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c0016cc7:	5a                   	pop    edx
c0016cc8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0016ccb:	83 c3 01             	add    ebx,0x1
c0016cce:	59                   	pop    ecx
c0016ccf:	52                   	push   edx
c0016cd0:	50                   	push   eax
c0016cd1:	e8 7a 99 fe ff       	call   c0000650 <strcpy>
c0016cd6:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0016cdc:	83 c4 10             	add    esp,0x10
c0016cdf:	83 c1 01             	add    ecx,0x1
c0016ce2:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0016ce8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0016ceb:	85 c0                	test   eax,eax
c0016ced:	75 bd                	jne    c0016cac <Process::addArgs(char**)+0x24>
c0016cef:	90                   	nop
c0016cf0:	5b                   	pop    ebx
c0016cf1:	5e                   	pop    esi
c0016cf2:	5f                   	pop    edi
c0016cf3:	c3                   	ret    

c0016cf4 <Process::Process(char const*, Process*, char**)>:
c0016cf4:	56                   	push   esi
c0016cf5:	53                   	push   ebx
c0016cf6:	83 ec 14             	sub    esp,0x14
c0016cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cfd:	05 0c 02 00 00       	add    eax,0x20c
c0016d02:	bb 07 00 00 00       	mov    ebx,0x7
c0016d07:	89 c6                	mov    esi,eax
c0016d09:	8d 76 00             	lea    esi,[esi+0x0]
c0016d0c:	85 db                	test   ebx,ebx
c0016d0e:	78 14                	js     c0016d24 <Process::Process(char const*, Process*, char**)+0x30>
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	56                   	push   esi
c0016d14:	e8 17 30 01 00       	call   c0029d30 <ThreadControlBlock::ThreadControlBlock()>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	83 c6 73             	add    esi,0x73
c0016d1f:	83 eb 01             	sub    ebx,0x1
c0016d22:	eb e8                	jmp    c0016d0c <Process::Process(char const*, Process*, char**)+0x18>
c0016d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d28:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016d2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d33:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d41:	e8 2c 85 ff ff       	call   c000f272 <KeNewProcessEnv(Process*)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	89 c2                	mov    edx,eax
c0016d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d4f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d59:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016d62:	a1 7c 0d 03 c0       	mov    eax,ds:0xc0030d7c
c0016d67:	8d 50 01             	lea    edx,[eax+0x1]
c0016d6a:	89 15 7c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d7c,edx
c0016d70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d74:	89 02                	mov    DWORD PTR [edx],eax
c0016d76:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d85:	e8 ba 96 ff ff       	call   c0010444 <malloc>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	89 c3                	mov    ebx,eax
c0016d8f:	83 ec 08             	sub    esp,0x8
c0016d92:	6a 00                	push   0x0
c0016d94:	53                   	push   ebx
c0016d95:	e8 62 da ff ff       	call   c00147fc <VAS::VAS(bool)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016da1:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dab:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016dbd:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016dc3:	e8 37 ac ff ff       	call   c00119ff <KeInitSignals()>
c0016dc8:	89 c2                	mov    edx,eax
c0016dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dce:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016dde:	85 c0                	test   eax,eax
c0016de0:	74 42                	je     c0016e24 <Process::Process(char const*, Process*, char**)+0x130>
c0016de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de6:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016dec:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df6:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e00:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e06:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e10:	05 0c 01 00 00       	add    eax,0x10c
c0016e15:	83 ec 08             	sub    esp,0x8
c0016e18:	52                   	push   edx
c0016e19:	50                   	push   eax
c0016e1a:	e8 31 98 fe ff       	call   c0000650 <strcpy>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	eb 7c                	jmp    c0016ea0 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016e24:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e33:	e8 0c 96 ff ff       	call   c0010444 <malloc>
c0016e38:	83 c4 10             	add    esp,0x10
c0016e3b:	89 c3                	mov    ebx,eax
c0016e3d:	83 ec 08             	sub    esp,0x8
c0016e40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e44:	53                   	push   ebx
c0016e45:	e8 76 c5 ff ff       	call   c00133c0 <VgaText::VgaText(char const*)>
c0016e4a:	83 c4 10             	add    esp,0x10
c0016e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e51:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e5b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016e61:	83 ec 0c             	sub    esp,0xc
c0016e64:	50                   	push   eax
c0016e65:	e8 bc bd ff ff       	call   c0012c26 <addToTerminalCycle(VgaText*)>
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e71:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016e77:	83 ec 0c             	sub    esp,0xc
c0016e7a:	50                   	push   eax
c0016e7b:	e8 17 c0 ff ff       	call   c0012e97 <setActiveTerminal(VgaText*)>
c0016e80:	83 c4 10             	add    esp,0x10
c0016e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e87:	05 0c 01 00 00       	add    eax,0x10c
c0016e8c:	83 ec 08             	sub    esp,0x8
c0016e8f:	68 b4 ce 02 c0       	push   0xc002ceb4
c0016e94:	50                   	push   eax
c0016e95:	e8 b6 97 fe ff       	call   c0000650 <strcpy>
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea4:	83 c0 0c             	add    eax,0xc
c0016ea7:	83 ec 08             	sub    esp,0x8
c0016eaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016eae:	50                   	push   eax
c0016eaf:	e8 9c 97 fe ff       	call   c0000650 <strcpy>
c0016eb4:	83 c4 10             	add    esp,0x10
c0016eb7:	83 ec 08             	sub    esp,0x8
c0016eba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ec2:	e8 c1 fd ff ff       	call   c0016c88 <Process::addArgs(char**)>
c0016ec7:	83 c4 10             	add    esp,0x10
c0016eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ece:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016ed4:	83 e2 7f             	and    edx,0x7f
c0016ed7:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016edd:	83 ec 08             	sub    esp,0x8
c0016ee0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ee4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ee8:	e8 03 f1 ff ff       	call   c0015ff0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016ef4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016ef8:	83 f0 01             	xor    eax,0x1
c0016efb:	88 c2                	mov    dl,al
c0016efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f01:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f0d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f12:	52                   	push   edx
c0016f13:	50                   	push   eax
c0016f14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f18:	68 20 cf 02 c0       	push   0xc002cf20
c0016f1d:	e8 44 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	90                   	nop
c0016f26:	83 c4 14             	add    esp,0x14
c0016f29:	5b                   	pop    ebx
c0016f2a:	5e                   	pop    esi
c0016f2b:	c3                   	ret    

c0016f2c <Process::Process(bool, char const*, Process*, char**)>:
c0016f2c:	56                   	push   esi
c0016f2d:	53                   	push   ebx
c0016f2e:	83 ec 24             	sub    esp,0x24
c0016f31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f35:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f3d:	05 0c 02 00 00       	add    eax,0x20c
c0016f42:	bb 07 00 00 00       	mov    ebx,0x7
c0016f47:	89 c6                	mov    esi,eax
c0016f49:	8d 76 00             	lea    esi,[esi+0x0]
c0016f4c:	85 db                	test   ebx,ebx
c0016f4e:	78 14                	js     c0016f64 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016f50:	83 ec 0c             	sub    esp,0xc
c0016f53:	56                   	push   esi
c0016f54:	e8 d7 2d 01 00       	call   c0029d30 <ThreadControlBlock::ThreadControlBlock()>
c0016f59:	83 c4 10             	add    esp,0x10
c0016f5c:	83 c6 73             	add    esi,0x73
c0016f5f:	83 eb 01             	sub    ebx,0x1
c0016f62:	eb e8                	jmp    c0016f4c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016f64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f68:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016f6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f73:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016f7a:	83 ec 0c             	sub    esp,0xc
c0016f7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f81:	e8 ec 82 ff ff       	call   c000f272 <KeNewProcessEnv(Process*)>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	89 c2                	mov    edx,eax
c0016f8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f8f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f99:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016fa2:	a1 7c 0d 03 c0       	mov    eax,ds:0xc0030d7c
c0016fa7:	8d 50 01             	lea    edx,[eax+0x1]
c0016faa:	89 15 7c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d7c,edx
c0016fb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fb4:	89 02                	mov    DWORD PTR [edx],eax
c0016fb6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016fbe:	83 ec 0c             	sub    esp,0xc
c0016fc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016fc5:	e8 7a 94 ff ff       	call   c0010444 <malloc>
c0016fca:	83 c4 10             	add    esp,0x10
c0016fcd:	89 c3                	mov    ebx,eax
c0016fcf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016fd4:	83 ec 08             	sub    esp,0x8
c0016fd7:	50                   	push   eax
c0016fd8:	53                   	push   ebx
c0016fd9:	e8 1e d8 ff ff       	call   c00147fc <VAS::VAS(bool)>
c0016fde:	83 c4 10             	add    esp,0x10
c0016fe1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fe5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fef:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ffd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017001:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0017007:	e8 f3 a9 ff ff       	call   c00119ff <KeInitSignals()>
c001700c:	89 c2                	mov    edx,eax
c001700e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017012:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0017018:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001701c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017022:	85 c0                	test   eax,eax
c0017024:	74 42                	je     c0017068 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0017026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001702a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017030:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001703a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0017040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017044:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001704a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017054:	05 0c 01 00 00       	add    eax,0x10c
c0017059:	83 ec 08             	sub    esp,0x8
c001705c:	52                   	push   edx
c001705d:	50                   	push   eax
c001705e:	e8 ed 95 fe ff       	call   c0000650 <strcpy>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	eb 7c                	jmp    c00170e4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0017068:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017077:	e8 c8 93 ff ff       	call   c0010444 <malloc>
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	89 c3                	mov    ebx,eax
c0017081:	83 ec 08             	sub    esp,0x8
c0017084:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017088:	53                   	push   ebx
c0017089:	e8 32 c3 ff ff       	call   c00133c0 <VgaText::VgaText(char const*)>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017095:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001709b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001709f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	50                   	push   eax
c00170a9:	e8 78 bb ff ff       	call   c0012c26 <addToTerminalCycle(VgaText*)>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170b5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00170bb:	83 ec 0c             	sub    esp,0xc
c00170be:	50                   	push   eax
c00170bf:	e8 d3 bd ff ff       	call   c0012e97 <setActiveTerminal(VgaText*)>
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170cb:	05 0c 01 00 00       	add    eax,0x10c
c00170d0:	83 ec 08             	sub    esp,0x8
c00170d3:	68 b4 ce 02 c0       	push   0xc002ceb4
c00170d8:	50                   	push   eax
c00170d9:	e8 72 95 fe ff       	call   c0000650 <strcpy>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	8d 76 00             	lea    esi,[esi+0x0]
c00170e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e8:	83 c0 0c             	add    eax,0xc
c00170eb:	83 ec 08             	sub    esp,0x8
c00170ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170f2:	50                   	push   eax
c00170f3:	e8 58 95 fe ff       	call   c0000650 <strcpy>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	83 ec 08             	sub    esp,0x8
c00170fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017102:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017106:	e8 7d fb ff ff       	call   c0016c88 <Process::addArgs(char**)>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	90                   	nop
c001710f:	83 c4 24             	add    esp,0x24
c0017112:	5b                   	pop    ebx
c0017113:	5e                   	pop    esi
c0017114:	c3                   	ret    
c0017115:	8d 76 00             	lea    esi,[esi+0x0]

c0017118 <taskStartupFunction>:
c0017118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001711d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017120:	c3                   	ret    
c0017121:	8d 76 00             	lea    esi,[esi+0x0]

c0017124 <KeDisablePreemption()>:
c0017124:	a1 0c 73 03 c0       	mov    eax,ds:0xc003730c
c0017129:	85 c0                	test   eax,eax
c001712b:	75 13                	jne    c0017140 <KeDisablePreemption()+0x1c>
c001712d:	8a 15 0c 71 03 c0    	mov    dl,BYTE PTR ds:0xc003710c
c0017133:	c6 05 0c 71 03 c0 00 	mov    BYTE PTR ds:0xc003710c,0x0
c001713a:	88 15 08 73 03 c0    	mov    BYTE PTR ds:0xc0037308,dl
c0017140:	83 c0 01             	add    eax,0x1
c0017143:	a3 0c 73 03 c0       	mov    ds:0xc003730c,eax
c0017148:	c3                   	ret    
c0017149:	8d 76 00             	lea    esi,[esi+0x0]

c001714c <KeRestorePreemption()>:
c001714c:	a1 0c 73 03 c0       	mov    eax,ds:0xc003730c
c0017151:	83 e8 01             	sub    eax,0x1
c0017154:	a3 0c 73 03 c0       	mov    ds:0xc003730c,eax
c0017159:	75 0d                	jne    c0017168 <KeRestorePreemption()+0x1c>
c001715b:	a0 08 73 03 c0       	mov    al,ds:0xc0037308
c0017160:	a2 0c 71 03 c0       	mov    ds:0xc003710c,al
c0017165:	8d 76 00             	lea    esi,[esi+0x0]
c0017168:	c3                   	ret    
c0017169:	90                   	nop
c001716a:	66 90                	xchg   ax,ax

c001716c <Process::createThread(void (*)(void*), void*, int)>:
c001716c:	55                   	push   ebp
c001716d:	31 c9                	xor    ecx,ecx
c001716f:	57                   	push   edi
c0017170:	56                   	push   esi
c0017171:	53                   	push   ebx
c0017172:	83 ec 0c             	sub    esp,0xc
c0017175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017179:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0017180:	89 f2                	mov    edx,esi
c0017182:	66 90                	xchg   ax,ax
c0017184:	0f b7 c2             	movzx  eax,dx
c0017187:	80 e2 01             	and    dl,0x1
c001718a:	74 18                	je     c00171a4 <Process::createThread(void (*)(void*), void*, int)+0x38>
c001718c:	d1 f8                	sar    eax,1
c001718e:	83 c1 01             	add    ecx,0x1
c0017191:	83 f9 10             	cmp    ecx,0x10
c0017194:	89 c2                	mov    edx,eax
c0017196:	75 ec                	jne    c0017184 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0017198:	83 c4 0c             	add    esp,0xc
c001719b:	31 db                	xor    ebx,ebx
c001719d:	89 d8                	mov    eax,ebx
c001719f:	5b                   	pop    ebx
c00171a0:	5e                   	pop    esi
c00171a1:	5f                   	pop    edi
c00171a2:	5d                   	pop    ebp
c00171a3:	c3                   	ret    
c00171a4:	b8 01 00 00 00       	mov    eax,0x1
c00171a9:	d3 e0                	shl    eax,cl
c00171ab:	09 c6                	or     esi,eax
c00171ad:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00171b4:	6b c1 73             	imul   eax,ecx,0x73
c00171b7:	01 d8                	add    eax,ebx
c00171b9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00171c0:	75 0a                	jne    c00171cc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00171c2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00171cc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00171d2:	6b f9 73             	imul   edi,ecx,0x73
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00171db:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00171de:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00171e4:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00171ea:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00171f0:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00171f7:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0017201:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017207:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001720b:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0017215:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c001721c:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0017223:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017229:	89 ca                	mov    edx,ecx
c001722b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001722f:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017236:	f7 da                	neg    edx
c0017238:	c1 e2 15             	shl    edx,0x15
c001723b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017241:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017247:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c001724b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017255:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001725b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017265:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001726b:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017271:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001727b:	83 e2 80             	and    edx,0xffffff80
c001727e:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0017284:	68 00 01 00 00       	push   0x100
c0017289:	e8 b6 91 ff ff       	call   c0010444 <malloc>
c001728e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0017291:	58                   	pop    eax
c0017292:	5a                   	pop    edx
c0017293:	53                   	push   ebx
c0017294:	68 b8 ce 02 c0       	push   0xc002ceb8
c0017299:	e8 c8 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001729e:	59                   	pop    ecx
c001729f:	5e                   	pop    esi
c00172a0:	53                   	push   ebx
c00172a1:	68 4c 73 03 c0       	push   0xc003734c
c00172a6:	e8 31 26 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00172ab:	83 c4 10             	add    esp,0x10
c00172ae:	89 d8                	mov    eax,ebx
c00172b0:	83 c4 0c             	add    esp,0xc
c00172b3:	5b                   	pop    ebx
c00172b4:	5e                   	pop    esi
c00172b5:	5f                   	pop    edi
c00172b6:	5d                   	pop    ebp
c00172b7:	c3                   	ret    

c00172b8 <Process::createUserThread()>:
c00172b8:	83 ec 0c             	sub    esp,0xc
c00172bb:	68 80 00 00 00       	push   0x80
c00172c0:	6a 00                	push   0x0
c00172c2:	68 6c 6b 01 c0       	push   0xc0016b6c
c00172c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172cb:	50                   	push   eax
c00172cc:	e8 9b fe ff ff       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c00172d1:	83 c4 1c             	add    esp,0x1c
c00172d4:	c3                   	ret    
c00172d5:	8d 76 00             	lea    esi,[esi+0x0]

c00172d8 <setupMultitasking(void (*)())>:
c00172d8:	56                   	push   esi
c00172d9:	53                   	push   ebx
c00172da:	83 ec 04             	sub    esp,0x4
c00172dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00172e1:	eb 11                	jmp    c00172f4 <setupMultitasking(void (*)())+0x1c>
c00172e3:	90                   	nop
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	68 4c 73 03 c0       	push   0xc003734c
c00172ec:	e8 2f 25 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	68 4c 73 03 c0       	push   0xc003734c
c00172fc:	e8 fb 24 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017301:	83 c4 10             	add    esp,0x10
c0017304:	84 c0                	test   al,al
c0017306:	74 dc                	je     c00172e4 <setupMultitasking(void (*)())+0xc>
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	68 c4 07 00 00       	push   0x7c4
c0017310:	e8 2f 91 ff ff       	call   c0010444 <malloc>
c0017315:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001731c:	6a 00                	push   0x0
c001731e:	68 cc ce 02 c0       	push   0xc002cecc
c0017323:	6a 01                	push   0x1
c0017325:	50                   	push   eax
c0017326:	89 c3                	mov    ebx,eax
c0017328:	e8 ff fb ff ff       	call   c0016f2c <Process::Process(bool, char const*, Process*, char**)>
c001732d:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0017333:	83 c4 14             	add    esp,0x14
c0017336:	89 1d 58 73 03 c0    	mov    DWORD PTR ds:0xc0037358,ebx
c001733c:	50                   	push   eax
c001733d:	e8 55 bb ff ff       	call   c0012e97 <setActiveTerminal(VgaText*)>
c0017342:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017349:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017353:	83 c8 01             	or     eax,0x1
c0017356:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c001735d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017363:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017366:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017370:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017376:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017380:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017386:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017390:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001739a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00173a0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00173a6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00173b0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00173ba:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00173c1:	e8 7e 90 ff ff       	call   c0010444 <malloc>
c00173c6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00173d0:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00173d7:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00173de:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00173e5:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00173ec:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00173f2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00173f8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00173fe:	5a                   	pop    edx
c00173ff:	59                   	pop    ecx
c0017400:	68 b4 ce 02 c0       	push   0xc002ceb4
c0017405:	50                   	push   eax
c0017406:	e8 45 92 fe ff       	call   c0000650 <strcpy>
c001740b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017412:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017416:	83 c4 14             	add    esp,0x14
c0017419:	5b                   	pop    ebx
c001741a:	5e                   	pop    esi
c001741b:	e9 49 8e fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017420 <schedule()>:
c0017420:	8b 15 2c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003732c
c0017426:	85 d2                	test   edx,edx
c0017428:	74 0e                	je     c0017438 <schedule()+0x18>
c001742a:	c7 05 28 73 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x1
c0017434:	c3                   	ret    
c0017435:	8d 76 00             	lea    esi,[esi+0x0]
c0017438:	53                   	push   ebx
c0017439:	83 ec 14             	sub    esp,0x14
c001743c:	68 4c 73 03 c0       	push   0xc003734c
c0017441:	e8 b6 23 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	84 c0                	test   al,al
c001744b:	75 3f                	jne    c001748c <schedule()+0x6c>
c001744d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017452:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017455:	83 fa 01             	cmp    edx,0x1
c0017458:	74 3a                	je     c0017494 <schedule()+0x74>
c001745a:	66 90                	xchg   ax,ax
c001745c:	83 ec 0c             	sub    esp,0xc
c001745f:	68 4c 73 03 c0       	push   0xc003734c
c0017464:	e8 af 23 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017469:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017470:	89 c3                	mov    ebx,eax
c0017472:	e8 a9 23 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017477:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001747e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017481:	e8 42 f7 ff ff       	call   c0016bc8 <switchToThread(ThreadControlBlock*)>
c0017486:	83 c4 10             	add    esp,0x10
c0017489:	8d 76 00             	lea    esi,[esi+0x0]
c001748c:	83 c4 08             	add    esp,0x8
c001748f:	5b                   	pop    ebx
c0017490:	c3                   	ret    
c0017491:	8d 76 00             	lea    esi,[esi+0x0]
c0017494:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001749b:	83 ec 08             	sub    esp,0x8
c001749e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174a3:	50                   	push   eax
c00174a4:	68 4c 73 03 c0       	push   0xc003734c
c00174a9:	e8 2e 24 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00174ae:	83 c4 10             	add    esp,0x10
c00174b1:	eb a9                	jmp    c001745c <schedule()+0x3c>
c00174b3:	90                   	nop

c00174b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00174b4:	83 ec 0c             	sub    esp,0xc
c00174b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00174c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00174c3:	e8 58 ff ff ff       	call   c0017420 <schedule()>
c00174c8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00174d0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00174d5:	85 c0                	test   eax,eax
c00174d7:	75 03                	jne    c00174dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00174d9:	fb                   	sti    
c00174da:	66 90                	xchg   ax,ax
c00174dc:	83 c4 0c             	add    esp,0xc
c00174df:	c3                   	ret    

c00174e0 <blockTask(TaskState)>:
c00174e0:	83 ec 0c             	sub    esp,0xc
c00174e3:	fa                   	cli    
c00174e4:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00174e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00174ed:	83 c0 01             	add    eax,0x1
c00174f0:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00174f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00174fd:	e8 1e ff ff ff       	call   c0017420 <schedule()>
c0017502:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001750a:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017510:	85 d2                	test   edx,edx
c0017512:	75 04                	jne    c0017518 <blockTask(TaskState)+0x38>
c0017514:	fb                   	sti    
c0017515:	8d 76 00             	lea    esi,[esi+0x0]
c0017518:	83 c4 0c             	add    esp,0xc
c001751b:	c3                   	ret    

c001751c <waitTask(int, int*, int)>:
c001751c:	83 ec 18             	sub    esp,0x18
c001751f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017524:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017528:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001752b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001752f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017534:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017537:	6a 07                	push   0x7
c0017539:	e8 a2 ff ff ff       	call   c00174e0 <blockTask(TaskState)>
c001753e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017549:	85 d2                	test   edx,edx
c001754b:	74 0b                	je     c0017558 <waitTask(int, int*, int)+0x3c>
c001754d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017550:	89 02                	mov    DWORD PTR [edx],eax
c0017552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017557:	90                   	nop
c0017558:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001755b:	83 c4 0c             	add    esp,0xc
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <milliTenthSleepUntil(unsigned long long)>:
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756b:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c0017571:	89 d1                	mov    ecx,edx
c0017573:	1b 0d 54 6b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0036b54
c0017579:	73 05                	jae    c0017580 <milliTenthSleepUntil(unsigned long long)+0x20>
c001757b:	90                   	nop
c001757c:	83 c4 0c             	add    esp,0xc
c001757f:	c3                   	ret    
c0017580:	fa                   	cli    
c0017581:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017587:	83 ec 08             	sub    esp,0x8
c001758a:	83 c1 01             	add    ecx,0x1
c001758d:	89 0d 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,ecx
c0017593:	8b 0d 2c 73 03 c0    	mov    ecx,DWORD PTR ds:0xc003732c
c0017599:	83 c1 01             	add    ecx,0x1
c001759c:	89 0d 2c 73 03 c0    	mov    DWORD PTR ds:0xc003732c,ecx
c00175a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00175a8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00175ab:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00175ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b3:	50                   	push   eax
c00175b4:	68 40 73 03 c0       	push   0xc0037340
c00175b9:	e8 1e 23 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175be:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00175c5:	e8 16 ff ff ff       	call   c00174e0 <blockTask(TaskState)>
c00175ca:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	83 e8 01             	sub    eax,0x1
c00175d5:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00175da:	85 c0                	test   eax,eax
c00175dc:	75 0a                	jne    c00175e8 <milliTenthSleepUntil(unsigned long long)+0x88>
c00175de:	8b 15 28 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037328
c00175e4:	85 d2                	test   edx,edx
c00175e6:	75 18                	jne    c0017600 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00175e8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00175f0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00175f5:	85 c0                	test   eax,eax
c00175f7:	75 83                	jne    c001757c <milliTenthSleepUntil(unsigned long long)+0x1c>
c00175f9:	fb                   	sti    
c00175fa:	83 c4 0c             	add    esp,0xc
c00175fd:	c3                   	ret    
c00175fe:	66 90                	xchg   ax,ax
c0017600:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c001760a:	e8 11 fe ff ff       	call   c0017420 <schedule()>
c001760f:	eb d7                	jmp    c00175e8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017611:	8d 76 00             	lea    esi,[esi+0x0]

c0017614 <milliTenthSleep(unsigned long long)>:
c0017614:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c0017619:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001761d:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c0017623:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017627:	e9 34 ff ff ff       	jmp    c0017560 <milliTenthSleepUntil(unsigned long long)>

c001762c <sleep(unsigned long long)>:
c001762c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017634:	b8 10 27 00 00       	mov    eax,0x2710
c0017639:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001763d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017641:	01 ca                	add    edx,ecx
c0017643:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017647:	eb cb                	jmp    c0017614 <milliTenthSleep(unsigned long long)>
c0017649:	8d 76 00             	lea    esi,[esi+0x0]

c001764c <sleep(unsigned int)>:
c001764c:	83 ec 14             	sub    esp,0x14
c001764f:	b8 10 27 00 00       	mov    eax,0x2710
c0017654:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017658:	52                   	push   edx
c0017659:	50                   	push   eax
c001765a:	e8 b5 ff ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c001765f:	83 c4 1c             	add    esp,0x1c
c0017662:	c3                   	ret    
c0017663:	90                   	nop

c0017664 <milliTenthSleep(unsigned int)>:
c0017664:	83 ec 14             	sub    esp,0x14
c0017667:	31 d2                	xor    edx,edx
c0017669:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001766d:	03 05 50 6b 03 c0    	add    eax,DWORD PTR ds:0xc0036b50
c0017673:	13 15 54 6b 03 c0    	adc    edx,DWORD PTR ds:0xc0036b54
c0017679:	52                   	push   edx
c001767a:	50                   	push   eax
c001767b:	e8 e0 fe ff ff       	call   c0017560 <milliTenthSleepUntil(unsigned long long)>
c0017680:	83 c4 1c             	add    esp,0x1c
c0017683:	c3                   	ret    

c0017684 <taskReturned>:
c0017684:	83 ec 18             	sub    esp,0x18
c0017687:	68 54 cf 02 c0       	push   0xc002cf54
c001768c:	e8 07 92 ff ff       	call   c0010898 <KePanic(char const*)>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	83 ec 0c             	sub    esp,0xc
c0017697:	6a 02                	push   0x2
c0017699:	e8 42 fe ff ff       	call   c00174e0 <blockTask(TaskState)>
c001769e:	fa                   	cli    
c001769f:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00176a4:	83 c0 01             	add    eax,0x1
c00176a7:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00176ac:	e8 6f fd ff ff       	call   c0017420 <schedule()>
c00176b1:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00176b9:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c00176bf:	83 c4 10             	add    esp,0x10
c00176c2:	85 d2                	test   edx,edx
c00176c4:	75 ce                	jne    c0017694 <taskReturned+0x10>
c00176c6:	fb                   	sti    
c00176c7:	eb cb                	jmp    c0017694 <taskReturned+0x10>
c00176c9:	8d 76 00             	lea    esi,[esi+0x0]

c00176cc <KeProcessFromPID(int)>:
c00176cc:	57                   	push   edi
c00176cd:	56                   	push   esi
c00176ce:	53                   	push   ebx
c00176cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00176d3:	fa                   	cli    
c00176d4:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c00176da:	83 ec 0c             	sub    esp,0xc
c00176dd:	68 4c 73 03 c0       	push   0xc003734c
c00176e2:	83 c1 01             	add    ecx,0x1
c00176e5:	89 0d 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,ecx
c00176eb:	e8 28 21 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	89 c7                	mov    edi,eax
c00176f5:	eb 15                	jmp    c001770c <KeProcessFromPID(int)+0x40>
c00176f7:	90                   	nop
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	68 4c 73 03 c0       	push   0xc003734c
c0017700:	e8 13 21 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017705:	83 c4 10             	add    esp,0x10
c0017708:	39 f8                	cmp    eax,edi
c001770a:	74 50                	je     c001775c <KeProcessFromPID(int)+0x90>
c001770c:	83 ec 0c             	sub    esp,0xc
c001770f:	68 4c 73 03 c0       	push   0xc003734c
c0017714:	e8 ff 20 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017719:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017720:	89 c3                	mov    ebx,eax
c0017722:	e8 f9 20 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017727:	58                   	pop    eax
c0017728:	5a                   	pop    edx
c0017729:	53                   	push   ebx
c001772a:	68 4c 73 03 c0       	push   0xc003734c
c001772f:	e8 a8 21 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017734:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	39 30                	cmp    DWORD PTR [eax],esi
c001773c:	75 ba                	jne    c00176f8 <KeProcessFromPID(int)+0x2c>
c001773e:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017746:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c001774c:	85 c9                	test   ecx,ecx
c001774e:	74 08                	je     c0017758 <KeProcessFromPID(int)+0x8c>
c0017750:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017753:	90                   	nop
c0017754:	5b                   	pop    ebx
c0017755:	5e                   	pop    esi
c0017756:	5f                   	pop    edi
c0017757:	c3                   	ret    
c0017758:	fb                   	sti    
c0017759:	eb f5                	jmp    c0017750 <KeProcessFromPID(int)+0x84>
c001775b:	90                   	nop
c001775c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017764:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c001776a:	31 c0                	xor    eax,eax
c001776c:	85 d2                	test   edx,edx
c001776e:	75 e4                	jne    c0017754 <KeProcessFromPID(int)+0x88>
c0017770:	fb                   	sti    
c0017771:	5b                   	pop    ebx
c0017772:	5e                   	pop    esi
c0017773:	5f                   	pop    edi
c0017774:	c3                   	ret    
c0017775:	8d 76 00             	lea    esi,[esi+0x0]

c0017778 <unblockTask(ThreadControlBlock*)>:
c0017778:	53                   	push   ebx
c0017779:	83 ec 08             	sub    esp,0x8
c001777c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017780:	fa                   	cli    
c0017781:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017787:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001778a:	83 c2 01             	add    edx,0x1
c001778d:	89 15 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,edx
c0017793:	85 c0                	test   eax,eax
c0017795:	74 6d                	je     c0017804 <unblockTask(ThreadControlBlock*)+0x8c>
c0017797:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001779a:	83 f8 01             	cmp    eax,0x1
c001779d:	74 39                	je     c00177d8 <unblockTask(ThreadControlBlock*)+0x60>
c001779f:	83 ec 0c             	sub    esp,0xc
c00177a2:	68 4c 73 03 c0       	push   0xc003734c
c00177a7:	e8 6c 20 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	85 c0                	test   eax,eax
c00177b1:	75 1d                	jne    c00177d0 <unblockTask(ThreadControlBlock*)+0x58>
c00177b3:	eb 63                	jmp    c0017818 <unblockTask(ThreadControlBlock*)+0xa0>
c00177b5:	8d 76 00             	lea    esi,[esi+0x0]
c00177b8:	83 ec 08             	sub    esp,0x8
c00177bb:	50                   	push   eax
c00177bc:	68 4c 73 03 c0       	push   0xc003734c
c00177c1:	e8 5e 25 01 00       	call   c0029d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00177c6:	83 c4 10             	add    esp,0x10
c00177c9:	85 c0                	test   eax,eax
c00177cb:	74 4b                	je     c0017818 <unblockTask(ThreadControlBlock*)+0xa0>
c00177cd:	8d 76 00             	lea    esi,[esi+0x0]
c00177d0:	39 c3                	cmp    ebx,eax
c00177d2:	75 e4                	jne    c00177b8 <unblockTask(ThreadControlBlock*)+0x40>
c00177d4:	eb 12                	jmp    c00177e8 <unblockTask(ThreadControlBlock*)+0x70>
c00177d6:	66 90                	xchg   ax,ax
c00177d8:	83 ec 0c             	sub    esp,0xc
c00177db:	68 ea ce 02 c0       	push   0xc002ceea
c00177e0:	e8 81 f7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00177f0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00177f5:	85 c0                	test   eax,eax
c00177f7:	75 03                	jne    c00177fc <unblockTask(ThreadControlBlock*)+0x84>
c00177f9:	fb                   	sti    
c00177fa:	66 90                	xchg   ax,ax
c00177fc:	83 c4 08             	add    esp,0x8
c00177ff:	5b                   	pop    ebx
c0017800:	c3                   	ret    
c0017801:	8d 76 00             	lea    esi,[esi+0x0]
c0017804:	83 ec 0c             	sub    esp,0xc
c0017807:	68 d3 ce 02 c0       	push   0xc002ced3
c001780c:	e8 55 f7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	eb d2                	jmp    c00177e8 <unblockTask(ThreadControlBlock*)+0x70>
c0017816:	66 90                	xchg   ax,ax
c0017818:	83 ec 08             	sub    esp,0x8
c001781b:	53                   	push   ebx
c001781c:	68 4c 73 03 c0       	push   0xc003734c
c0017821:	e8 b6 20 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	eb bd                	jmp    c00177e8 <unblockTask(ThreadControlBlock*)+0x70>
c001782b:	90                   	nop

c001782c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001782c:	55                   	push   ebp
c001782d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017832:	57                   	push   edi
c0017833:	56                   	push   esi
c0017834:	53                   	push   ebx
c0017835:	83 ec 1c             	sub    esp,0x1c
c0017838:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001783c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001783f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017842:	d3 c0                	rol    eax,cl
c0017844:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001784b:	21 c8                	and    eax,ecx
c001784d:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017854:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017857:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c001785f:	0f 85 af 01 00 00    	jne    c0017a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017865:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001786b:	85 ed                	test   ebp,ebp
c001786d:	7e 29                	jle    c0017898 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c001786f:	31 f6                	xor    esi,esi
c0017871:	8d 76 00             	lea    esi,[esi+0x0]
c0017874:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	83 c6 01             	add    esi,0x1
c0017881:	57                   	push   edi
c0017882:	e8 cd 8b ff ff       	call   c0010454 <free>
c0017887:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001788a:	83 c4 10             	add    esp,0x10
c001788d:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017893:	7f df                	jg     c0017874 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017895:	8d 76 00             	lea    esi,[esi+0x0]
c0017898:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00178a2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00178a5:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00178ab:	89 f7                	mov    edi,esi
c00178ad:	85 ed                	test   ebp,ebp
c00178af:	74 1b                	je     c00178cc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00178b1:	83 ec 0c             	sub    esp,0xc
c00178b4:	55                   	push   ebp
c00178b5:	e8 d4 78 ff ff       	call   c000f18e <EnvVarContainer::~EnvVarContainer()>
c00178ba:	59                   	pop    ecx
c00178bb:	5e                   	pop    esi
c00178bc:	6a 0c                	push   0xc
c00178be:	55                   	push   ebp
c00178bf:	e8 78 67 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c00178c4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	89 f7                	mov    edi,esi
c00178cc:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00178d2:	85 c0                	test   eax,eax
c00178d4:	0f 84 ae 00 00 00    	je     c0017988 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00178da:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00178dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00178e1:	31 c9                	xor    ecx,ecx
c00178e3:	eb 17                	jmp    c00178fc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00178e5:	8d 76 00             	lea    esi,[esi+0x0]
c00178e8:	83 c1 01             	add    ecx,0x1
c00178eb:	83 f9 10             	cmp    ecx,0x10
c00178ee:	0f 84 94 00 00 00    	je     c0017988 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00178f4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00178fa:	66 90                	xchg   ax,ax
c00178fc:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017903:	d3 fa                	sar    edx,cl
c0017905:	80 e2 01             	and    dl,0x1
c0017908:	74 de                	je     c00178e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001790a:	6b d1 73             	imul   edx,ecx,0x73
c001790d:	01 d0                	add    eax,edx
c001790f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017915:	83 fd 07             	cmp    ebp,0x7
c0017918:	75 ce                	jne    c00178e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001791a:	05 40 02 00 00       	add    eax,0x240
c001791f:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017922:	83 fd ff             	cmp    ebp,0xffffffff
c0017925:	0f 8c f1 00 00 00    	jl     c0017a1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001792b:	0f 84 af 01 00 00    	je     c0017ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017931:	85 ed                	test   ebp,ebp
c0017933:	0f 84 93 01 00 00    	je     c0017acc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0017939:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001793b:	75 ab                	jne    c00178e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001793d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017941:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017947:	01 d0                	add    eax,edx
c0017949:	8d 76 00             	lea    esi,[esi+0x0]
c001794c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017959:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001795c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017962:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017969:	50                   	push   eax
c001796a:	e8 09 fe ff ff       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017975:	89 f7                	mov    edi,esi
c0017977:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001797b:	83 c1 01             	add    ecx,0x1
c001797e:	83 f9 10             	cmp    ecx,0x10
c0017981:	0f 85 6d ff ff ff    	jne    c00178f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017987:	90                   	nop
c0017988:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001798e:	85 c0                	test   eax,eax
c0017990:	74 62                	je     c00179f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017992:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017998:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001799e:	74 54                	je     c00179f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	68 4c 73 03 c0       	push   0xc003734c
c00179a8:	e8 6b 1e 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00179ad:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c00179b4:	89 c7                	mov    edi,eax
c00179b6:	e8 41 1e 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00179bb:	83 c4 10             	add    esp,0x10
c00179be:	84 c0                	test   al,al
c00179c0:	0f 84 ce 00 00 00    	je     c0017a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00179c6:	66 90                	xchg   ax,ax
c00179c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00179cb:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00179d1:	85 d2                	test   edx,edx
c00179d3:	74 0f                	je     c00179e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00179d5:	8b 02                	mov    eax,DWORD PTR [edx]
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	52                   	push   edx
c00179db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00179de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00179ee:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00179f1:	8d 76 00             	lea    esi,[esi+0x0]
c00179f4:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00179fa:	85 db                	test   ebx,ebx
c00179fc:	74 16                	je     c0017a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00179fe:	83 ec 0c             	sub    esp,0xc
c0017a01:	53                   	push   ebx
c0017a02:	e8 49 c9 ff ff       	call   c0014350 <VAS::~VAS()>
c0017a07:	58                   	pop    eax
c0017a08:	5a                   	pop    edx
c0017a09:	6a 14                	push   0x14
c0017a0b:	53                   	push   ebx
c0017a0c:	e8 2b 66 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0017a11:	83 c4 10             	add    esp,0x10
c0017a14:	83 c4 1c             	add    esp,0x1c
c0017a17:	5b                   	pop    ebx
c0017a18:	5e                   	pop    esi
c0017a19:	5f                   	pop    edi
c0017a1a:	5d                   	pop    ebp
c0017a1b:	c3                   	ret    
c0017a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017a20:	83 ec 0c             	sub    esp,0xc
c0017a23:	68 88 cf 02 c0       	push   0xc002cf88
c0017a28:	e8 6b 8e ff ff       	call   c0010898 <KePanic(char const*)>
c0017a2d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	89 f7                	mov    edi,esi
c0017a35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017a39:	e9 aa fe ff ff       	jmp    c00178e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017a3e:	66 90                	xchg   ax,ax
c0017a40:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017a46:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017a4c:	75 1e                	jne    c0017a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017a4e:	83 ec 0c             	sub    esp,0xc
c0017a51:	68 f0 cf 02 c0       	push   0xc002cff0
c0017a56:	e8 0b f5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017a5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017a62:	e8 79 fa ff ff       	call   c00174e0 <blockTask(TaskState)>
c0017a67:	83 c4 10             	add    esp,0x10
c0017a6a:	66 90                	xchg   ax,ax
c0017a6c:	83 ec 08             	sub    esp,0x8
c0017a6f:	56                   	push   esi
c0017a70:	68 4c 73 03 c0       	push   0xc003734c
c0017a75:	e8 62 1e 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017a7a:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017a81:	e8 92 1d 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	39 f8                	cmp    eax,edi
c0017a8b:	0f 84 37 ff ff ff    	je     c00179c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017a91:	8d 76 00             	lea    esi,[esi+0x0]
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	68 4c 73 03 c0       	push   0xc003734c
c0017a9c:	e8 77 1d 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017aa1:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017aa8:	89 c6                	mov    esi,eax
c0017aaa:	e8 71 1d 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	39 f3                	cmp    ebx,esi
c0017ab4:	74 b6                	je     c0017a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017ab6:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017ab9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017abc:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017ac2:	75 a8                	jne    c0017a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017ac4:	e9 77 ff ff ff       	jmp    c0017a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0017ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0017acc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017ad0:	83 ec 0c             	sub    esp,0xc
c0017ad3:	68 bc cf 02 c0       	push   0xc002cfbc
c0017ad8:	e9 4b ff ff ff       	jmp    c0017a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0017add:	8d 76 00             	lea    esi,[esi+0x0]
c0017ae0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017ae4:	8b 36                	mov    esi,DWORD PTR [esi]
c0017ae6:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017ae9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017aec:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017af2:	01 d7                	add    edi,edx
c0017af4:	89 f8                	mov    eax,edi
c0017af6:	e9 51 fe ff ff       	jmp    c001794c <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c0017afb:	90                   	nop

c0017afc <cleanerTaskFunction(void*)>:
c0017afc:	53                   	push   ebx
c0017afd:	83 ec 08             	sub    esp,0x8
c0017b00:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017b08:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017b0d:	85 c0                	test   eax,eax
c0017b0f:	75 03                	jne    c0017b14 <cleanerTaskFunction(void*)+0x18>
c0017b11:	fb                   	sti    
c0017b12:	66 90                	xchg   ax,ax
c0017b14:	fa                   	cli    
c0017b15:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017b1a:	83 c0 01             	add    eax,0x1
c0017b1d:	80 3d 14 73 03 c0 00 	cmp    BYTE PTR ds:0xc0037314,0x0
c0017b24:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017b29:	0f 85 c9 00 00 00    	jne    c0017bf8 <cleanerTaskFunction(void*)+0xfc>
c0017b2f:	83 ec 0c             	sub    esp,0xc
c0017b32:	6a 02                	push   0x2
c0017b34:	e8 7b f9 ff ff       	call   c00174b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	c6 05 14 73 03 c0 00 	mov    BYTE PTR ds:0xc0037314,0x0
c0017b43:	fa                   	cli    
c0017b44:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017b4a:	8b 1d 2c 73 03 c0    	mov    ebx,DWORD PTR ds:0xc003732c
c0017b50:	83 c1 01             	add    ecx,0x1
c0017b53:	89 0d 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,ecx
c0017b59:	83 c3 01             	add    ebx,0x1
c0017b5c:	89 1d 2c 73 03 c0    	mov    DWORD PTR ds:0xc003732c,ebx
c0017b62:	fa                   	cli    
c0017b63:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017b68:	83 c0 01             	add    eax,0x1
c0017b6b:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017b70:	eb 2a                	jmp    c0017b9c <cleanerTaskFunction(void*)+0xa0>
c0017b72:	66 90                	xchg   ax,ax
c0017b74:	83 ec 0c             	sub    esp,0xc
c0017b77:	68 34 73 03 c0       	push   0xc0037334
c0017b7c:	e8 97 1c 01 00       	call   c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b81:	c7 04 24 34 73 03 c0 	mov    DWORD PTR [esp],0xc0037334
c0017b88:	89 c3                	mov    ebx,eax
c0017b8a:	e8 91 1c 01 00       	call   c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b92:	e8 95 fc ff ff       	call   c001782c <cleanupTerminatedTask(ThreadControlBlock*)>
c0017b97:	83 c4 10             	add    esp,0x10
c0017b9a:	66 90                	xchg   ax,ax
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	68 34 73 03 c0       	push   0xc0037334
c0017ba4:	e8 53 1c 01 00       	call   c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	84 c0                	test   al,al
c0017bae:	74 c4                	je     c0017b74 <cleanerTaskFunction(void*)+0x78>
c0017bb0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017bb8:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017bbe:	85 d2                	test   edx,edx
c0017bc0:	75 02                	jne    c0017bc4 <cleanerTaskFunction(void*)+0xc8>
c0017bc2:	fb                   	sti    
c0017bc3:	90                   	nop
c0017bc4:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017bc9:	83 e8 01             	sub    eax,0x1
c0017bcc:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017bd1:	0f 85 29 ff ff ff    	jne    c0017b00 <cleanerTaskFunction(void*)+0x4>
c0017bd7:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0017bdc:	85 c0                	test   eax,eax
c0017bde:	0f 84 1c ff ff ff    	je     c0017b00 <cleanerTaskFunction(void*)+0x4>
c0017be4:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0017bee:	e8 2d f8 ff ff       	call   c0017420 <schedule()>
c0017bf3:	e9 08 ff ff ff       	jmp    c0017b00 <cleanerTaskFunction(void*)+0x4>
c0017bf8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017c00:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017c05:	85 c0                	test   eax,eax
c0017c07:	0f 85 2f ff ff ff    	jne    c0017b3c <cleanerTaskFunction(void*)+0x40>
c0017c0d:	fb                   	sti    
c0017c0e:	e9 29 ff ff ff       	jmp    c0017b3c <cleanerTaskFunction(void*)+0x40>
c0017c13:	90                   	nop

c0017c14 <KeTerminateCurrentThread(int)>:
c0017c14:	83 ec 14             	sub    esp,0x14
c0017c17:	fa                   	cli    
c0017c18:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017c1d:	83 c0 01             	add    eax,0x1
c0017c20:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017c25:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017c2a:	83 c0 01             	add    eax,0x1
c0017c2d:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017c32:	fa                   	cli    
c0017c33:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017c38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c3c:	83 c0 01             	add    eax,0x1
c0017c3f:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c49:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017c4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c51:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017c54:	50                   	push   eax
c0017c55:	68 34 73 03 c0       	push   0xc0037334
c0017c5a:	e8 7d 1c 01 00       	call   c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017c6e:	a1 10 73 03 c0       	mov    eax,ds:0xc0037310
c0017c73:	85 c0                	test   eax,eax
c0017c75:	0f 84 81 00 00 00    	je     c0017cfc <KeTerminateCurrentThread(int)+0xe8>
c0017c7b:	c6 05 14 73 03 c0 01 	mov    BYTE PTR ds:0xc0037314,0x1
c0017c82:	83 ec 0c             	sub    esp,0xc
c0017c85:	50                   	push   eax
c0017c86:	e8 ed fa ff ff       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	66 90                	xchg   ax,ax
c0017c90:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017c98:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017c9d:	85 c0                	test   eax,eax
c0017c9f:	75 03                	jne    c0017ca4 <KeTerminateCurrentThread(int)+0x90>
c0017ca1:	fb                   	sti    
c0017ca2:	66 90                	xchg   ax,ax
c0017ca4:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017ca9:	83 e8 01             	sub    eax,0x1
c0017cac:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017cb1:	75 09                	jne    c0017cbc <KeTerminateCurrentThread(int)+0xa8>
c0017cb3:	83 3d 28 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037328,0x0
c0017cba:	75 54                	jne    c0017d10 <KeTerminateCurrentThread(int)+0xfc>
c0017cbc:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017cc4:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017cca:	85 c9                	test   ecx,ecx
c0017ccc:	75 06                	jne    c0017cd4 <KeTerminateCurrentThread(int)+0xc0>
c0017cce:	66 90                	xchg   ax,ax
c0017cd0:	fb                   	sti    
c0017cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd4:	fa                   	cli    
c0017cd5:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017cda:	83 c0 01             	add    eax,0x1
c0017cdd:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017ce2:	e8 39 f7 ff ff       	call   c0017420 <schedule()>
c0017ce7:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017cef:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017cf5:	85 d2                	test   edx,edx
c0017cf7:	75 db                	jne    c0017cd4 <KeTerminateCurrentThread(int)+0xc0>
c0017cf9:	eb d5                	jmp    c0017cd0 <KeTerminateCurrentThread(int)+0xbc>
c0017cfb:	90                   	nop
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	68 01 cf 02 c0       	push   0xc002cf01
c0017d04:	e8 5d f2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	eb 82                	jmp    c0017c90 <KeTerminateCurrentThread(int)+0x7c>
c0017d0e:	66 90                	xchg   ax,ax
c0017d10:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0017d1a:	e8 01 f7 ff ff       	call   c0017420 <schedule()>
c0017d1f:	eb 9b                	jmp    c0017cbc <KeTerminateCurrentThread(int)+0xa8>
c0017d21:	8d 76 00             	lea    esi,[esi+0x0]

c0017d24 <__static_initialization_and_destruction_0(int, int)>:
c0017d24:	83 ec 0c             	sub    esp,0xc
c0017d27:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d2c:	0f 85 8e 00 00 00    	jne    c0017dc0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017d32:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017d3a:	0f 85 80 00 00 00    	jne    c0017dc0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	68 4c 73 03 c0       	push   0xc003734c
c0017d48:	e8 2f 20 01 00       	call   c0029d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	83 ec 04             	sub    esp,0x4
c0017d53:	68 40 05 03 c0       	push   0xc0030540
c0017d58:	68 4c 73 03 c0       	push   0xc003734c
c0017d5d:	68 2c 9d 02 c0       	push   0xc0029d2c
c0017d62:	e8 85 62 ff ff       	call   c000dfec <__cxa_atexit>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	83 ec 0c             	sub    esp,0xc
c0017d6d:	68 40 73 03 c0       	push   0xc0037340
c0017d72:	e8 05 20 01 00       	call   c0029d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017d77:	83 c4 10             	add    esp,0x10
c0017d7a:	83 ec 04             	sub    esp,0x4
c0017d7d:	68 40 05 03 c0       	push   0xc0030540
c0017d82:	68 40 73 03 c0       	push   0xc0037340
c0017d87:	68 2c 9d 02 c0       	push   0xc0029d2c
c0017d8c:	e8 5b 62 ff ff       	call   c000dfec <__cxa_atexit>
c0017d91:	83 c4 10             	add    esp,0x10
c0017d94:	83 ec 0c             	sub    esp,0xc
c0017d97:	68 34 73 03 c0       	push   0xc0037334
c0017d9c:	e8 db 1f 01 00       	call   c0029d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	83 ec 04             	sub    esp,0x4
c0017da7:	68 40 05 03 c0       	push   0xc0030540
c0017dac:	68 34 73 03 c0       	push   0xc0037334
c0017db1:	68 2c 9d 02 c0       	push   0xc0029d2c
c0017db6:	e8 31 62 ff ff       	call   c000dfec <__cxa_atexit>
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	66 90                	xchg   ax,ax
c0017dc0:	90                   	nop
c0017dc1:	83 c4 0c             	add    esp,0xc
c0017dc4:	c3                   	ret    
c0017dc5:	8d 76 00             	lea    esi,[esi+0x0]

c0017dc8 <_GLOBAL__sub_I_keNextPID>:
c0017dc8:	83 ec 0c             	sub    esp,0xc
c0017dcb:	83 ec 08             	sub    esp,0x8
c0017dce:	68 ff ff 00 00       	push   0xffff
c0017dd3:	6a 01                	push   0x1
c0017dd5:	e8 4a ff ff ff       	call   c0017d24 <__static_initialization_and_destruction_0(int, int)>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	83 c4 0c             	add    esp,0xc
c0017de0:	c3                   	ret    

c0017de1 <Vm::inbv(unsigned short)>:
c0017de1:	55                   	push   ebp
c0017de2:	89 e5                	mov    ebp,esp
c0017de4:	83 ec 14             	sub    esp,0x14
c0017de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dea:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017dee:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017df2:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017df7:	75 07                	jne    c0017e00 <Vm::inbv(unsigned short)+0x1f>
c0017df9:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0017dfe:	eb 16                	jmp    c0017e16 <Vm::inbv(unsigned short)+0x35>
c0017e00:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017e04:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017e08:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017e0c:	89 c2                	mov    edx,eax
c0017e0e:	ec                   	in     al,dx
c0017e0f:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017e12:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017e15:	90                   	nop
c0017e16:	c9                   	leave  
c0017e17:	c3                   	ret    

c0017e18 <Vm::outbv(unsigned short, unsigned char)>:
c0017e18:	55                   	push   ebp
c0017e19:	89 e5                	mov    ebp,esp
c0017e1b:	83 ec 18             	sub    esp,0x18
c0017e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017e24:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017e28:	88 d0                	mov    al,dl
c0017e2a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017e2d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017e31:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017e36:	75 2d                	jne    c0017e65 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017e38:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0017e3d:	8d 50 01             	lea    edx,[eax+0x1]
c0017e40:	89 15 90 73 03 c0    	mov    DWORD PTR ds:0xc0037390,edx
c0017e46:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017e49:	88 90 a0 73 03 c0    	mov    BYTE PTR [eax-0x3ffc8c60],dl
c0017e4f:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0017e54:	83 f8 20             	cmp    eax,0x20
c0017e57:	75 23                	jne    c0017e7c <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017e59:	c7 05 90 73 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x1f
c0017e63:	eb 17                	jmp    c0017e7c <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017e65:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017e69:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017e6d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017e71:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017e74:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017e77:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017e7b:	ee                   	out    dx,al
c0017e7c:	90                   	nop
c0017e7d:	c9                   	leave  
c0017e7e:	c3                   	ret    

c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>:
c0017e7f:	55                   	push   ebp
c0017e80:	89 e5                	mov    ebp,esp
c0017e82:	83 ec 08             	sub    esp,0x8
c0017e85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017e88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017e8b:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c0017e8f:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c0017e93:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c0017e97:	c1 e0 04             	shl    eax,0x4
c0017e9a:	89 c2                	mov    edx,eax
c0017e9c:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0017ea0:	01 d0                	add    eax,edx
c0017ea2:	c9                   	leave  
c0017ea3:	c3                   	ret    

c0017ea4 <Vm::getSegment(unsigned int)>:
c0017ea4:	55                   	push   ebp
c0017ea5:	89 e5                	mov    ebp,esp
c0017ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eaa:	c1 e8 10             	shr    eax,0x10
c0017ead:	5d                   	pop    ebp
c0017eae:	c3                   	ret    

c0017eaf <Vm::getOffset(unsigned int)>:
c0017eaf:	55                   	push   ebp
c0017eb0:	89 e5                	mov    ebp,esp
c0017eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb5:	5d                   	pop    ebp
c0017eb6:	c3                   	ret    

c0017eb7 <Vm::mainloop2()>:
c0017eb7:	55                   	push   ebp
c0017eb8:	89 e5                	mov    ebp,esp
c0017eba:	53                   	push   ebx
c0017ebb:	83 ec 04             	sub    esp,0x4
c0017ebe:	fa                   	cli    
c0017ebf:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017ec4:	83 c0 01             	add    eax,0x1
c0017ec7:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017ecc:	c6 05 89 73 03 c0 01 	mov    BYTE PTR ds:0xc0037389,0x1
c0017ed3:	83 ec 0c             	sub    esp,0xc
c0017ed6:	6a 02                	push   0x2
c0017ed8:	e8 d7 f5 ff ff       	call   c00174b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ee5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee7:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017eeb:	0f b7 d8             	movzx  ebx,ax
c0017eee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ef3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ef5:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017ef9:	0f b7 c8             	movzx  ecx,ax
c0017efc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f03:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017f07:	0f b7 d0             	movzx  edx,ax
c0017f0a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f11:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017f15:	0f b7 c0             	movzx  eax,ax
c0017f18:	53                   	push   ebx
c0017f19:	51                   	push   ecx
c0017f1a:	52                   	push   edx
c0017f1b:	50                   	push   eax
c0017f1c:	e8 ee 82 fe ff       	call   c000020f <goToVM86>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	90                   	nop
c0017f25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017f28:	c9                   	leave  
c0017f29:	c3                   	ret    

c0017f2a <Vm::mainVm8086Loop(void*)>:
c0017f2a:	55                   	push   ebp
c0017f2b:	89 e5                	mov    ebp,esp
c0017f2d:	83 ec 08             	sub    esp,0x8
c0017f30:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017f38:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017f3d:	85 c0                	test   eax,eax
c0017f3f:	75 01                	jne    c0017f42 <Vm::mainVm8086Loop(void*)+0x18>
c0017f41:	fb                   	sti    
c0017f42:	e8 70 ff ff ff       	call   c0017eb7 <Vm::mainloop2()>
c0017f47:	90                   	nop
c0017f48:	c9                   	leave  
c0017f49:	c3                   	ret    

c0017f4a <Vm::mainloop3(unsigned long)>:
c0017f4a:	55                   	push   ebp
c0017f4b:	89 e5                	mov    ebp,esp
c0017f4d:	83 ec 08             	sub    esp,0x8
c0017f50:	fa                   	cli    
c0017f51:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017f56:	83 c0 01             	add    eax,0x1
c0017f59:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017f5e:	c6 05 88 73 03 c0 01 	mov    BYTE PTR ds:0xc0037388,0x1
c0017f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f68:	a3 84 73 03 c0       	mov    ds:0xc0037384,eax
c0017f6d:	83 ec 0c             	sub    esp,0xc
c0017f70:	6a 02                	push   0x2
c0017f72:	e8 3d f5 ff ff       	call   c00174b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	e8 38 ff ff ff       	call   c0017eb7 <Vm::mainloop2()>
c0017f7f:	90                   	nop
c0017f80:	c9                   	leave  
c0017f81:	c3                   	ret    

c0017f82 <Vm::initialise8086()>:
c0017f82:	55                   	push   ebp
c0017f83:	89 e5                	mov    ebp,esp
c0017f85:	83 ec 08             	sub    esp,0x8
c0017f88:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0017f8d:	68 80 00 00 00       	push   0x80
c0017f92:	6a 00                	push   0x0
c0017f94:	68 2a 7f 01 c0       	push   0xc0017f2a
c0017f99:	50                   	push   eax
c0017f9a:	e8 cd f1 ff ff       	call   c001716c <Process::createThread(void (*)(void*), void*, int)>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	a3 8c 73 03 c0       	mov    ds:0xc003738c,eax
c0017fa7:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0017fac:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	6a 07                	push   0x7
c0017fb7:	68 10 01 00 00       	push   0x110
c0017fbc:	6a 00                	push   0x0
c0017fbe:	6a 00                	push   0x0
c0017fc0:	50                   	push   eax
c0017fc1:	e8 ec c6 ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017fc6:	83 c4 20             	add    esp,0x20
c0017fc9:	90                   	nop
c0017fca:	c9                   	leave  
c0017fcb:	c3                   	ret    

c0017fcc <Vm::finish8086()>:
c0017fcc:	55                   	push   ebp
c0017fcd:	89 e5                	mov    ebp,esp
c0017fcf:	83 ec 18             	sub    esp,0x18
c0017fd2:	fa                   	cli    
c0017fd3:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017fd8:	83 c0 01             	add    eax,0x1
c0017fdb:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017fe0:	a0 88 73 03 c0       	mov    al,ds:0xc0037388
c0017fe5:	0f b6 c0             	movzx  eax,al
c0017fe8:	85 c0                	test   eax,eax
c0017fea:	75 19                	jne    c0018005 <Vm::finish8086()+0x39>
c0017fec:	e8 2f f4 ff ff       	call   c0017420 <schedule()>
c0017ff1:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017ff9:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017ffe:	85 c0                	test   eax,eax
c0018000:	75 d0                	jne    c0017fd2 <Vm::finish8086()+0x6>
c0018002:	fb                   	sti    
c0018003:	eb cd                	jmp    c0017fd2 <Vm::finish8086()+0x6>
c0018005:	90                   	nop
c0018006:	a1 84 73 03 c0       	mov    eax,ds:0xc0037384
c001800b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001800e:	c6 05 88 73 03 c0 00 	mov    BYTE PTR ds:0xc0037388,0x0
c0018015:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001801a:	83 ec 0c             	sub    esp,0xc
c001801d:	50                   	push   eax
c001801e:	e8 55 f7 ff ff       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001802e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018033:	85 c0                	test   eax,eax
c0018035:	75 01                	jne    c0018038 <Vm::finish8086()+0x6c>
c0018037:	fb                   	sti    
c0018038:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001803b:	c9                   	leave  
c001803c:	c3                   	ret    

c001803d <Vm::getOutput8086(unsigned char*)>:
c001803d:	55                   	push   ebp
c001803e:	89 e5                	mov    ebp,esp
c0018040:	57                   	push   edi
c0018041:	56                   	push   esi
c0018042:	53                   	push   ebx
c0018043:	83 ec 20             	sub    esp,0x20
c0018046:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c001804b:	89 c2                	mov    edx,eax
c001804d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018050:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018053:	c7 45 e8 a0 73 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00373a0
c001805a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001805d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018060:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018063:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018066:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018069:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c001806c:	89 c6                	mov    esi,eax
c001806e:	89 d7                	mov    edi,edx
c0018070:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018072:	89 c8                	mov    eax,ecx
c0018074:	89 fa                	mov    edx,edi
c0018076:	89 f3                	mov    ebx,esi
c0018078:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001807b:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c001807e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018081:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0018086:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018089:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c0018093:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018096:	83 c4 20             	add    esp,0x20
c0018099:	5b                   	pop    ebx
c001809a:	5e                   	pop    esi
c001809b:	5f                   	pop    edi
c001809c:	5d                   	pop    ebp
c001809d:	c3                   	ret    

c001809e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001809e:	55                   	push   ebp
c001809f:	89 e5                	mov    ebp,esp
c00180a1:	57                   	push   edi
c00180a2:	56                   	push   esi
c00180a3:	53                   	push   ebx
c00180a4:	83 ec 3c             	sub    esp,0x3c
c00180a7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00180aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00180ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00180b0:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00180b3:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00180b7:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00180bb:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00180bf:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00180c3:	a0 80 73 03 c0       	mov    al,ds:0xc0037380
c00180c8:	83 f0 01             	xor    eax,0x1
c00180cb:	0f b6 c0             	movzx  eax,al
c00180ce:	85 c0                	test   eax,eax
c00180d0:	74 07                	je     c00180d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00180d2:	c6 05 80 73 03 c0 01 	mov    BYTE PTR ds:0xc0037380,0x1
c00180d9:	fa                   	cli    
c00180da:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00180df:	83 c0 01             	add    eax,0x1
c00180e2:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00180e7:	a0 89 73 03 c0       	mov    al,ds:0xc0037389
c00180ec:	0f b6 c0             	movzx  eax,al
c00180ef:	85 c0                	test   eax,eax
c00180f1:	75 19                	jne    c001810c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c00180f3:	e8 28 f3 ff ff       	call   c0017420 <schedule()>
c00180f8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018100:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018105:	85 c0                	test   eax,eax
c0018107:	75 d0                	jne    c00180d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0018109:	fb                   	sti    
c001810a:	eb cd                	jmp    c00180d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c001810c:	90                   	nop
c001810d:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018112:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0018115:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018119:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001811e:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018121:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0018125:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001812a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001812d:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018131:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018136:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0018139:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c001813d:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018142:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018146:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c0018150:	83 ec 04             	sub    esp,0x4
c0018153:	6a 20                	push   0x20
c0018155:	6a 00                	push   0x0
c0018157:	68 a0 73 03 c0       	push   0xc00373a0
c001815c:	e8 8f 83 fe ff       	call   c00004f0 <memset>
c0018161:	83 c4 10             	add    esp,0x10
c0018164:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0018167:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c001816b:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c001816f:	83 ec 08             	sub    esp,0x8
c0018172:	52                   	push   edx
c0018173:	50                   	push   eax
c0018174:	e8 06 fd ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001817f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018182:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018185:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0018188:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001818b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001818e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0018191:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018194:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0018197:	89 c6                	mov    esi,eax
c0018199:	89 d7                	mov    edi,edx
c001819b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001819d:	89 c8                	mov    eax,ecx
c001819f:	89 fa                	mov    edx,edi
c00181a1:	89 f3                	mov    ebx,esi
c00181a3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00181a6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00181a9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00181ac:	c6 05 89 73 03 c0 00 	mov    BYTE PTR ds:0xc0037389,0x0
c00181b3:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00181bb:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00181c0:	85 c0                	test   eax,eax
c00181c2:	75 01                	jne    c00181c5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c00181c4:	fb                   	sti    
c00181c5:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c00181ca:	83 ec 0c             	sub    esp,0xc
c00181cd:	50                   	push   eax
c00181ce:	e8 a5 f5 ff ff       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c00181d3:	83 c4 10             	add    esp,0x10
c00181d6:	b0 01                	mov    al,0x1
c00181d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00181db:	5b                   	pop    ebx
c00181dc:	5e                   	pop    esi
c00181dd:	5f                   	pop    edi
c00181de:	5d                   	pop    ebp
c00181df:	c3                   	ret    

c00181e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00181e0:	55                   	push   ebp
c00181e1:	89 e5                	mov    ebp,esp
c00181e3:	56                   	push   esi
c00181e4:	53                   	push   ebx
c00181e5:	83 ec 30             	sub    esp,0x30
c00181e8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00181eb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00181ee:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00181f1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00181f4:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c00181f8:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c00181fc:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0018200:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018204:	a0 80 73 03 c0       	mov    al,ds:0xc0037380
c0018209:	83 f0 01             	xor    eax,0x1
c001820c:	0f b6 c0             	movzx  eax,al
c001820f:	85 c0                	test   eax,eax
c0018211:	74 07                	je     c001821a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0018213:	c6 05 80 73 03 c0 01 	mov    BYTE PTR ds:0xc0037380,0x1
c001821a:	83 ec 08             	sub    esp,0x8
c001821d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018220:	68 18 d0 02 c0       	push   0xc002d018
c0018225:	e8 3c ed fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001822a:	83 c4 10             	add    esp,0x10
c001822d:	fa                   	cli    
c001822e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018233:	83 c0 01             	add    eax,0x1
c0018236:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001823b:	a0 89 73 03 c0       	mov    al,ds:0xc0037389
c0018240:	0f b6 c0             	movzx  eax,al
c0018243:	85 c0                	test   eax,eax
c0018245:	75 19                	jne    c0018260 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0018247:	e8 d4 f1 ff ff       	call   c0017420 <schedule()>
c001824c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018254:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018259:	85 c0                	test   eax,eax
c001825b:	75 d0                	jne    c001822d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c001825d:	fb                   	sti    
c001825e:	eb cd                	jmp    c001822d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0018260:	90                   	nop
c0018261:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018266:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018269:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001826d:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018272:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0018275:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0018279:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001827e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0018281:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018285:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001828a:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001828d:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0018291:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018296:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001829a:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c00182a4:	83 ec 04             	sub    esp,0x4
c00182a7:	6a 20                	push   0x20
c00182a9:	6a 00                	push   0x0
c00182ab:	68 a0 73 03 c0       	push   0xc00373a0
c00182b0:	e8 3b 82 fe ff       	call   c00004f0 <memset>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c00182bf:	83 ec 0c             	sub    esp,0xc
c00182c2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00182c5:	e8 7a 81 ff ff       	call   c0010444 <malloc>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	89 c3                	mov    ebx,eax
c00182cf:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00182d4:	83 ec 04             	sub    esp,0x4
c00182d7:	50                   	push   eax
c00182d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00182db:	53                   	push   ebx
c00182dc:	e8 ff 0b ff ff       	call   c0008ee0 <File::File(char const*, Process*)>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00182e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00182eb:	75 29                	jne    c0018316 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x136>
c00182ed:	83 ec 0c             	sub    esp,0xc
c00182f0:	68 3a d0 02 c0       	push   0xc002d03a
c00182f5:	e8 9e 85 ff ff       	call   c0010898 <KePanic(char const*)>
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018305:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001830a:	85 c0                	test   eax,eax
c001830c:	75 01                	jne    c001830f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12f>
c001830e:	fb                   	sti    
c001830f:	b0 00                	mov    al,0x0
c0018311:	e9 fb 00 00 00       	jmp    c0018411 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0018316:	83 ec 04             	sub    esp,0x4
c0018319:	8d 45 df             	lea    eax,[ebp-0x21]
c001831c:	50                   	push   eax
c001831d:	8d 45 e0             	lea    eax,[ebp-0x20]
c0018320:	50                   	push   eax
c0018321:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018324:	e8 d7 0e ff ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001832f:	0f b6 c0             	movzx  eax,al
c0018332:	85 c0                	test   eax,eax
c0018334:	74 29                	je     c001835f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17f>
c0018336:	83 ec 0c             	sub    esp,0xc
c0018339:	68 4e d0 02 c0       	push   0xc002d04e
c001833e:	e8 55 85 ff ff       	call   c0010898 <KePanic(char const*)>
c0018343:	83 c4 10             	add    esp,0x10
c0018346:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001834e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018353:	85 c0                	test   eax,eax
c0018355:	75 01                	jne    c0018358 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x178>
c0018357:	fb                   	sti    
c0018358:	b0 00                	mov    al,0x0
c001835a:	e9 b2 00 00 00       	jmp    c0018411 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c001835f:	83 ec 08             	sub    esp,0x8
c0018362:	6a 01                	push   0x1
c0018364:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018367:	e8 92 0b ff ff       	call   c0008efe <File::open(FileOpenMode)>
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018372:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0018376:	74 26                	je     c001839e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0018378:	83 ec 0c             	sub    esp,0xc
c001837b:	68 67 d0 02 c0       	push   0xc002d067
c0018380:	e8 13 85 ff ff       	call   c0010898 <KePanic(char const*)>
c0018385:	83 c4 10             	add    esp,0x10
c0018388:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018390:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018395:	85 c0                	test   eax,eax
c0018397:	75 01                	jne    c001839a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ba>
c0018399:	fb                   	sti    
c001839a:	b0 00                	mov    al,0x0
c001839c:	eb 73                	jmp    c0018411 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c001839e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00183a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a3:	83 c0 0c             	add    eax,0xc
c00183a6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00183a8:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c00183ac:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c00183b0:	83 ec 08             	sub    esp,0x8
c00183b3:	52                   	push   edx
c00183b4:	50                   	push   eax
c00183b5:	e8 c5 fa ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	89 c6                	mov    esi,eax
c00183bf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00183c2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00183c5:	83 ec 0c             	sub    esp,0xc
c00183c8:	8d 4d d8             	lea    ecx,[ebp-0x28]
c00183cb:	51                   	push   ecx
c00183cc:	56                   	push   esi
c00183cd:	52                   	push   edx
c00183ce:	50                   	push   eax
c00183cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00183d2:	ff d3                	call   ebx
c00183d4:	83 c4 20             	add    esp,0x20
c00183d7:	83 ec 0c             	sub    esp,0xc
c00183da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00183dd:	e8 7a 0b ff ff       	call   c0008f5c <File::close()>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	c6 05 89 73 03 c0 00 	mov    BYTE PTR ds:0xc0037389,0x0
c00183ec:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00183f4:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00183f9:	85 c0                	test   eax,eax
c00183fb:	75 01                	jne    c00183fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21e>
c00183fd:	fb                   	sti    
c00183fe:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018403:	83 ec 0c             	sub    esp,0xc
c0018406:	50                   	push   eax
c0018407:	e8 6c f3 ff ff       	call   c0017778 <unblockTask(ThreadControlBlock*)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	b0 01                	mov    al,0x1
c0018411:	8d 65 f8             	lea    esp,[ebp-0x8]
c0018414:	5b                   	pop    ebx
c0018415:	5e                   	pop    esi
c0018416:	5d                   	pop    ebp
c0018417:	c3                   	ret    

c0018418 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018418:	55                   	push   ebp
c0018419:	89 e5                	mov    ebp,esp
c001841b:	83 ec 68             	sub    esp,0x68
c001841e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0018421:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0018424:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0018428:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001842c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0018433:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0018436:	83 e8 06             	sub    eax,0x6
c0018439:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001843d:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0018441:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0018445:	52                   	push   edx
c0018446:	50                   	push   eax
c0018447:	e8 33 fa ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c001844c:	83 c4 08             	add    esp,0x8
c001844f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0018452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018455:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018458:	83 e8 06             	sub    eax,0x6
c001845b:	0f b7 d0             	movzx  edx,ax
c001845e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018461:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018467:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001846a:	83 c0 02             	add    eax,0x2
c001846d:	0f b7 c0             	movzx  eax,ax
c0018470:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018473:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0018476:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c001847a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c001847d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018480:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0018484:	88 c2                	mov    dl,al
c0018486:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018489:	88 10                	mov    BYTE PTR [eax],dl
c001848b:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c001848f:	c1 e8 08             	shr    eax,0x8
c0018492:	89 c2                	mov    edx,eax
c0018494:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018497:	83 c0 01             	add    eax,0x1
c001849a:	88 10                	mov    BYTE PTR [eax],dl
c001849c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001849f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184a2:	0f b7 c0             	movzx  eax,ax
c00184a5:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00184a8:	83 c2 02             	add    edx,0x2
c00184ab:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c00184ae:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c00184b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00184b5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00184b8:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c00184bc:	88 c2                	mov    dl,al
c00184be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00184c1:	88 10                	mov    BYTE PTR [eax],dl
c00184c3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c00184c7:	c1 e8 08             	shr    eax,0x8
c00184ca:	89 c2                	mov    edx,eax
c00184cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00184cf:	83 c0 01             	add    eax,0x1
c00184d2:	88 10                	mov    BYTE PTR [eax],dl
c00184d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184da:	0f b7 c0             	movzx  eax,ax
c00184dd:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00184e0:	83 c2 04             	add    edx,0x4
c00184e3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00184e6:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c00184ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00184ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00184f0:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c00184f4:	88 c2                	mov    dl,al
c00184f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00184f9:	88 10                	mov    BYTE PTR [eax],dl
c00184fb:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c00184ff:	c1 e8 08             	shr    eax,0x8
c0018502:	89 c2                	mov    edx,eax
c0018504:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018507:	83 c0 01             	add    eax,0x1
c001850a:	88 10                	mov    BYTE PTR [eax],dl
c001850c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018511:	8b 00                	mov    eax,DWORD PTR [eax]
c0018513:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018516:	0f b6 c0             	movzx  eax,al
c0018519:	85 c0                	test   eax,eax
c001851b:	74 5e                	je     c001857b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c001851d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0018520:	83 c0 04             	add    eax,0x4
c0018523:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018526:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018529:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c001852c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001852f:	8a 00                	mov    al,BYTE PTR [eax]
c0018531:	0f b6 c0             	movzx  eax,al
c0018534:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018537:	83 c2 01             	add    edx,0x1
c001853a:	8a 12                	mov    dl,BYTE PTR [edx]
c001853c:	0f b6 d2             	movzx  edx,dl
c001853f:	c1 e2 08             	shl    edx,0x8
c0018542:	09 d0                	or     eax,edx
c0018544:	80 cc 02             	or     ah,0x2
c0018547:	0f b7 c0             	movzx  eax,ax
c001854a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001854d:	83 c2 04             	add    edx,0x4
c0018550:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0018553:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0018557:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001855a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001855d:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0018561:	88 c2                	mov    dl,al
c0018563:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018566:	88 10                	mov    BYTE PTR [eax],dl
c0018568:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c001856c:	c1 e8 08             	shr    eax,0x8
c001856f:	89 c2                	mov    edx,eax
c0018571:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018574:	83 c0 01             	add    eax,0x1
c0018577:	88 10                	mov    BYTE PTR [eax],dl
c0018579:	eb 5e                	jmp    c00185d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c001857b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001857e:	83 c0 04             	add    eax,0x4
c0018581:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018584:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018587:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c001858a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c001858d:	8a 00                	mov    al,BYTE PTR [eax]
c001858f:	0f b6 c0             	movzx  eax,al
c0018592:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0018595:	83 c2 01             	add    edx,0x1
c0018598:	8a 12                	mov    dl,BYTE PTR [edx]
c001859a:	0f b6 d2             	movzx  edx,dl
c001859d:	c1 e2 08             	shl    edx,0x8
c00185a0:	09 d0                	or     eax,edx
c00185a2:	0f b7 c0             	movzx  eax,ax
c00185a5:	25 ff fd 00 00       	and    eax,0xfdff
c00185aa:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00185ad:	83 c2 04             	add    edx,0x4
c00185b0:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c00185b3:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c00185b7:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00185ba:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00185bd:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c00185c1:	88 c2                	mov    dl,al
c00185c3:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00185c6:	88 10                	mov    BYTE PTR [eax],dl
c00185c8:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c00185cc:	c1 e8 08             	shr    eax,0x8
c00185cf:	89 c2                	mov    edx,eax
c00185d1:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00185d4:	83 c0 01             	add    eax,0x1
c00185d7:	88 10                	mov    BYTE PTR [eax],dl
c00185d9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00185de:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00185e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00185e7:	c1 e0 02             	shl    eax,0x2
c00185ea:	8d 50 02             	lea    edx,[eax+0x2]
c00185ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00185f0:	01 d0                	add    eax,edx
c00185f2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00185f5:	0f b7 d0             	movzx  edx,ax
c00185f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fb:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00185fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018601:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018608:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001860b:	01 d0                	add    eax,edx
c001860d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018610:	0f b7 d0             	movzx  edx,ax
c0018613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018616:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018619:	90                   	nop
c001861a:	c9                   	leave  
c001861b:	c3                   	ret    

c001861c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001861c:	55                   	push   ebp
c001861d:	89 e5                	mov    ebp,esp
c001861f:	83 ec 28             	sub    esp,0x28
c0018622:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018625:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018628:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001862c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018630:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018634:	c1 e0 04             	shl    eax,0x4
c0018637:	89 c2                	mov    edx,eax
c0018639:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001863d:	01 d0                	add    eax,edx
c001863f:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018644:	7e 10                	jle    c0018656 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0018646:	83 ec 0c             	sub    esp,0xc
c0018649:	68 80 d0 02 c0       	push   0xc002d080
c001864e:	e8 45 82 ff ff       	call   c0010898 <KePanic(char const*)>
c0018653:	83 c4 10             	add    esp,0x10
c0018656:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001865a:	c1 e0 04             	shl    eax,0x4
c001865d:	89 c2                	mov    edx,eax
c001865f:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018663:	01 d0                	add    eax,edx
c0018665:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001866b:	8a 00                	mov    al,BYTE PTR [eax]
c001866d:	c9                   	leave  
c001866e:	c3                   	ret    

c001866f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001866f:	55                   	push   ebp
c0018670:	89 e5                	mov    ebp,esp
c0018672:	83 ec 28             	sub    esp,0x28
c0018675:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018678:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001867b:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001867f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018683:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018687:	c1 e0 04             	shl    eax,0x4
c001868a:	89 c2                	mov    edx,eax
c001868c:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018690:	01 d0                	add    eax,edx
c0018692:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018697:	7e 10                	jle    c00186a9 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018699:	83 ec 0c             	sub    esp,0xc
c001869c:	68 80 d0 02 c0       	push   0xc002d080
c00186a1:	e8 f2 81 ff ff       	call   c0010898 <KePanic(char const*)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00186ad:	c1 e0 04             	shl    eax,0x4
c00186b0:	89 c2                	mov    edx,eax
c00186b2:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00186b6:	01 d0                	add    eax,edx
c00186b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00186bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00186be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00186c1:	c9                   	leave  
c00186c2:	c3                   	ret    

c00186c3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00186c3:	55                   	push   ebp
c00186c4:	89 e5                	mov    ebp,esp
c00186c6:	83 ec 28             	sub    esp,0x28
c00186c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00186cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00186cf:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00186d3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00186d7:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00186db:	c1 e0 04             	shl    eax,0x4
c00186de:	89 c2                	mov    edx,eax
c00186e0:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00186e4:	01 d0                	add    eax,edx
c00186e6:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00186eb:	7e 10                	jle    c00186fd <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	68 80 d0 02 c0       	push   0xc002d080
c00186f5:	e8 9e 81 ff ff       	call   c0010898 <KePanic(char const*)>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018701:	c1 e0 04             	shl    eax,0x4
c0018704:	89 c2                	mov    edx,eax
c0018706:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001870a:	01 d0                	add    eax,edx
c001870c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001870f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018712:	8b 00                	mov    eax,DWORD PTR [eax]
c0018714:	c9                   	leave  
c0018715:	c3                   	ret    

c0018716 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018716:	55                   	push   ebp
c0018717:	89 e5                	mov    ebp,esp
c0018719:	83 ec 28             	sub    esp,0x28
c001871c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001871f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018722:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0018725:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018729:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001872d:	88 c8                	mov    al,cl
c001872f:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0018732:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018736:	c1 e0 04             	shl    eax,0x4
c0018739:	89 c2                	mov    edx,eax
c001873b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001873f:	01 d0                	add    eax,edx
c0018741:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018746:	7e 10                	jle    c0018758 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	68 80 d0 02 c0       	push   0xc002d080
c0018750:	e8 43 81 ff ff       	call   c0010898 <KePanic(char const*)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001875c:	c1 e0 04             	shl    eax,0x4
c001875f:	89 c2                	mov    edx,eax
c0018761:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018765:	01 d0                	add    eax,edx
c0018767:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001876a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001876d:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0018770:	88 10                	mov    BYTE PTR [eax],dl
c0018772:	90                   	nop
c0018773:	c9                   	leave  
c0018774:	c3                   	ret    

c0018775 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018775:	55                   	push   ebp
c0018776:	89 e5                	mov    ebp,esp
c0018778:	83 ec 28             	sub    esp,0x28
c001877b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001877e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018781:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018784:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018788:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c001878c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018790:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018794:	c1 e0 04             	shl    eax,0x4
c0018797:	89 c2                	mov    edx,eax
c0018799:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001879d:	01 d0                	add    eax,edx
c001879f:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00187a4:	7e 10                	jle    c00187b6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c00187a6:	83 ec 0c             	sub    esp,0xc
c00187a9:	68 80 d0 02 c0       	push   0xc002d080
c00187ae:	e8 e5 80 ff ff       	call   c0010898 <KePanic(char const*)>
c00187b3:	83 c4 10             	add    esp,0x10
c00187b6:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00187ba:	c1 e0 04             	shl    eax,0x4
c00187bd:	89 c2                	mov    edx,eax
c00187bf:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00187c3:	01 d0                	add    eax,edx
c00187c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00187c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00187cb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00187ce:	66 89 10             	mov    WORD PTR [eax],dx
c00187d1:	90                   	nop
c00187d2:	c9                   	leave  
c00187d3:	c3                   	ret    

c00187d4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00187d4:	55                   	push   ebp
c00187d5:	89 e5                	mov    ebp,esp
c00187d7:	83 ec 28             	sub    esp,0x28
c00187da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00187dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187e0:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00187e4:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00187e8:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00187ec:	c1 e0 04             	shl    eax,0x4
c00187ef:	89 c2                	mov    edx,eax
c00187f1:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00187f5:	01 d0                	add    eax,edx
c00187f7:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00187fc:	7e 10                	jle    c001880e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c00187fe:	83 ec 0c             	sub    esp,0xc
c0018801:	68 80 d0 02 c0       	push   0xc002d080
c0018806:	e8 8d 80 ff ff       	call   c0010898 <KePanic(char const*)>
c001880b:	83 c4 10             	add    esp,0x10
c001880e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018812:	c1 e0 04             	shl    eax,0x4
c0018815:	89 c2                	mov    edx,eax
c0018817:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001881b:	01 d0                	add    eax,edx
c001881d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018820:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018823:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0018826:	89 10                	mov    DWORD PTR [eax],edx
c0018828:	90                   	nop
c0018829:	c9                   	leave  
c001882a:	c3                   	ret    

c001882b <Vm::faultHandler(regs*)>:
c001882b:	55                   	push   ebp
c001882c:	89 e5                	mov    ebp,esp
c001882e:	57                   	push   edi
c001882f:	56                   	push   esi
c0018830:	53                   	push   ebx
c0018831:	81 ec ac 00 00 00    	sub    esp,0xac
c0018837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001883a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001883d:	0f b7 d0             	movzx  edx,ax
c0018840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018843:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018846:	0f b7 c0             	movzx  eax,ax
c0018849:	52                   	push   edx
c001884a:	50                   	push   eax
c001884b:	e8 2f f6 ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c0018850:	83 c4 08             	add    esp,0x8
c0018853:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018859:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001885c:	0f b7 d0             	movzx  edx,ax
c001885f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018862:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018865:	0f b7 c0             	movzx  eax,ax
c0018868:	52                   	push   edx
c0018869:	50                   	push   eax
c001886a:	e8 10 f6 ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c001886f:	83 c4 08             	add    esp,0x8
c0018872:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018878:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001887b:	0f b7 d0             	movzx  edx,ax
c001887e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018881:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018884:	0f b7 c0             	movzx  eax,ax
c0018887:	52                   	push   edx
c0018888:	50                   	push   eax
c0018889:	e8 f1 f5 ff ff       	call   c0017e7f <Vm::realToLinear(unsigned short, unsigned short)>
c001888e:	83 c4 08             	add    esp,0x8
c0018891:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0018894:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001889b:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c001889f:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c00188a3:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c00188a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188aa:	8a 00                	mov    al,BYTE PTR [eax]
c00188ac:	0f b6 c0             	movzx  eax,al
c00188af:	83 e8 26             	sub    eax,0x26
c00188b2:	3d d5 00 00 00       	cmp    eax,0xd5
c00188b7:	0f 87 f8 0c 00 00    	ja     c00195b5 <Vm::faultHandler(regs*)+0xd8a>
c00188bd:	8b 04 85 00 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f00]
c00188c4:	ff e0                	jmp    eax
c00188c6:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c00188ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00188d0:	8d 50 01             	lea    edx,[eax+0x1]
c00188d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188d9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00188dd:	e9 87 0d 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c00188e2:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c00188e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00188ec:	8d 50 01             	lea    edx,[eax+0x1]
c00188ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188f5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00188f9:	e9 6b 0d 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c00188fe:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0018902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018905:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018908:	8d 50 01             	lea    edx,[eax+0x1]
c001890b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001890e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018911:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018915:	e9 4f 0d 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c001891a:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c001891e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018921:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018924:	8d 50 01             	lea    edx,[eax+0x1]
c0018927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001892a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001892d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018931:	e9 33 0d 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c0018936:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c001893a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001893d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018940:	8d 50 01             	lea    edx,[eax+0x1]
c0018943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018946:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018949:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001894d:	e9 17 0d 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c0018952:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0018956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018959:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001895c:	8d 50 01             	lea    edx,[eax+0x1]
c001895f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018962:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018965:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018969:	e9 fb 0c 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c001896e:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0018972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018975:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018978:	8d 50 01             	lea    edx,[eax+0x1]
c001897b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018981:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018985:	e9 df 0c 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c001898a:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c001898e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018991:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018994:	8d 50 01             	lea    edx,[eax+0x1]
c0018997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001899a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001899d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00189a1:	e9 c3 0c 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c00189a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189ac:	8d 50 01             	lea    edx,[eax+0x1]
c00189af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189b5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00189b9:	e9 ab 0c 00 00       	jmp    c0019669 <Vm::faultHandler(regs*)+0xe3e>
c00189be:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00189c2:	85 c0                	test   eax,eax
c00189c4:	74 5b                	je     c0018a21 <Vm::faultHandler(regs*)+0x1f6>
c00189c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00189cc:	83 e8 04             	sub    eax,0x4
c00189cf:	0f b7 d0             	movzx  edx,ax
c00189d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189d5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00189d8:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c00189dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00189e2:	25 ff 0d 00 00       	and    eax,0xdff
c00189e7:	89 c2                	mov    edx,eax
c00189e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00189ec:	89 10                	mov    DWORD PTR [eax],edx
c00189ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00189f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00189f5:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00189f8:	0f b6 c0             	movzx  eax,al
c00189fb:	85 c0                	test   eax,eax
c00189fd:	74 11                	je     c0018a10 <Vm::faultHandler(regs*)+0x1e5>
c00189ff:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a04:	80 cc 02             	or     ah,0x2
c0018a07:	89 c2                	mov    edx,eax
c0018a09:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018a0c:	89 10                	mov    DWORD PTR [eax],edx
c0018a0e:	eb 6a                	jmp    c0018a7a <Vm::faultHandler(regs*)+0x24f>
c0018a10:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a15:	80 e4 fd             	and    ah,0xfd
c0018a18:	89 c2                	mov    edx,eax
c0018a1a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018a1d:	89 10                	mov    DWORD PTR [eax],edx
c0018a1f:	eb 59                	jmp    c0018a7a <Vm::faultHandler(regs*)+0x24f>
c0018a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a24:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018a27:	83 e8 02             	sub    eax,0x2
c0018a2a:	0f b7 d0             	movzx  edx,ax
c0018a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a30:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018a33:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0018a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a3d:	89 c2                	mov    edx,eax
c0018a3f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018a42:	66 89 10             	mov    WORD PTR [eax],dx
c0018a45:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a4c:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018a4f:	0f b6 c0             	movzx  eax,al
c0018a52:	85 c0                	test   eax,eax
c0018a54:	74 13                	je     c0018a69 <Vm::faultHandler(regs*)+0x23e>
c0018a56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018a59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a5c:	80 cc 02             	or     ah,0x2
c0018a5f:	89 c2                	mov    edx,eax
c0018a61:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018a64:	66 89 10             	mov    WORD PTR [eax],dx
c0018a67:	eb 11                	jmp    c0018a7a <Vm::faultHandler(regs*)+0x24f>
c0018a69:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018a6c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a6f:	80 e4 fd             	and    ah,0xfd
c0018a72:	89 c2                	mov    edx,eax
c0018a74:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018a77:	66 89 10             	mov    WORD PTR [eax],dx
c0018a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a80:	8d 50 01             	lea    edx,[eax+0x1]
c0018a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a89:	b0 01                	mov    al,0x1
c0018a8b:	e9 de 0b 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018a90:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018a94:	85 c0                	test   eax,eax
c0018a96:	74 46                	je     c0018ade <Vm::faultHandler(regs*)+0x2b3>
c0018a98:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a9d:	25 ff 0d 00 00       	and    eax,0xdff
c0018aa2:	0d 00 02 02 00       	or     eax,0x20200
c0018aa7:	89 c2                	mov    edx,eax
c0018aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aac:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018aaf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ab4:	25 00 02 00 00       	and    eax,0x200
c0018ab9:	89 c2                	mov    edx,eax
c0018abb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ac2:	85 d2                	test   edx,edx
c0018ac4:	0f 95 c2             	setne  dl
c0018ac7:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018acd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018ad0:	83 c0 04             	add    eax,0x4
c0018ad3:	0f b7 d0             	movzx  edx,ax
c0018ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ad9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018adc:	eb 47                	jmp    c0018b25 <Vm::faultHandler(regs*)+0x2fa>
c0018ade:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018ae1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018ae4:	0f b7 c0             	movzx  eax,ax
c0018ae7:	0d 00 02 02 00       	or     eax,0x20200
c0018aec:	89 c2                	mov    edx,eax
c0018aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018af1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018af4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018af7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018afa:	0f b7 c0             	movzx  eax,ax
c0018afd:	25 00 02 00 00       	and    eax,0x200
c0018b02:	89 c2                	mov    edx,eax
c0018b04:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b0b:	85 d2                	test   edx,edx
c0018b0d:	0f 95 c2             	setne  dl
c0018b10:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b16:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018b19:	83 c0 02             	add    eax,0x2
c0018b1c:	0f b7 d0             	movzx  edx,ax
c0018b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b22:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0018b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b31:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b34:	b0 01                	mov    al,0x1
c0018b36:	e9 33 0b 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018b3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b3e:	83 c0 01             	add    eax,0x1
c0018b41:	8a 00                	mov    al,BYTE PTR [eax]
c0018b43:	0f b6 c0             	movzx  eax,al
c0018b46:	3d ee 00 00 00       	cmp    eax,0xee
c0018b4b:	75 19                	jne    c0018b66 <Vm::faultHandler(regs*)+0x33b>
c0018b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b50:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018b53:	83 ec 0c             	sub    esp,0xc
c0018b56:	50                   	push   eax
c0018b57:	e8 ee f3 ff ff       	call   c0017f4a <Vm::mainloop3(unsigned long)>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	b0 01                	mov    al,0x1
c0018b61:	e9 08 0b 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b69:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018b6c:	0f b7 c8             	movzx  ecx,ax
c0018b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b72:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018b75:	0f b7 d0             	movzx  edx,ax
c0018b78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018b7b:	83 c0 01             	add    eax,0x1
c0018b7e:	8a 00                	mov    al,BYTE PTR [eax]
c0018b80:	0f b6 c0             	movzx  eax,al
c0018b83:	83 ec 0c             	sub    esp,0xc
c0018b86:	51                   	push   ecx
c0018b87:	52                   	push   edx
c0018b88:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018b8b:	50                   	push   eax
c0018b8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018b8f:	e8 84 f8 ff ff       	call   c0018418 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018b94:	83 c4 20             	add    esp,0x20
c0018b97:	b0 01                	mov    al,0x1
c0018b99:	e9 d0 0a 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018b9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ba5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018baf:	8d 50 01             	lea    edx,[eax+0x1]
c0018bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018bb8:	b0 01                	mov    al,0x1
c0018bba:	e9 af 0a 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018bbf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bc6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bcd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bd0:	8d 50 01             	lea    edx,[eax+0x1]
c0018bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018bd9:	b0 01                	mov    al,0x1
c0018bdb:	e9 8e 0a 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018be0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018be3:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018be6:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018be9:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018bec:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018bef:	8a 00                	mov    al,BYTE PTR [eax]
c0018bf1:	0f b6 c0             	movzx  eax,al
c0018bf4:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0018bf7:	83 c2 01             	add    edx,0x1
c0018bfa:	8a 12                	mov    dl,BYTE PTR [edx]
c0018bfc:	0f b6 d2             	movzx  edx,dl
c0018bff:	c1 e2 08             	shl    edx,0x8
c0018c02:	09 d0                	or     eax,edx
c0018c04:	0f b7 d0             	movzx  edx,ax
c0018c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c0d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018c10:	83 c0 02             	add    eax,0x2
c0018c13:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018c16:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018c19:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018c1c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018c1f:	8a 00                	mov    al,BYTE PTR [eax]
c0018c21:	0f b6 c0             	movzx  eax,al
c0018c24:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0018c27:	83 c2 01             	add    edx,0x1
c0018c2a:	8a 12                	mov    dl,BYTE PTR [edx]
c0018c2c:	0f b6 d2             	movzx  edx,dl
c0018c2f:	c1 e2 08             	shl    edx,0x8
c0018c32:	09 d0                	or     eax,edx
c0018c34:	0f b7 d0             	movzx  edx,ax
c0018c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c3a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018c3d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018c40:	83 c0 04             	add    eax,0x4
c0018c43:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0018c46:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018c49:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018c4c:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018c4f:	8a 00                	mov    al,BYTE PTR [eax]
c0018c51:	0f b6 c0             	movzx  eax,al
c0018c54:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0018c57:	83 c2 01             	add    edx,0x1
c0018c5a:	8a 12                	mov    dl,BYTE PTR [edx]
c0018c5c:	0f b6 d2             	movzx  edx,dl
c0018c5f:	c1 e2 08             	shl    edx,0x8
c0018c62:	09 d0                	or     eax,edx
c0018c64:	0f b7 c0             	movzx  eax,ax
c0018c67:	0d 00 02 02 00       	or     eax,0x20200
c0018c6c:	89 c2                	mov    edx,eax
c0018c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c71:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018c74:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018c77:	83 c0 04             	add    eax,0x4
c0018c7a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018c7d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018c80:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018c83:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0018c86:	8a 00                	mov    al,BYTE PTR [eax]
c0018c88:	0f b6 c0             	movzx  eax,al
c0018c8b:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018c8e:	83 c2 01             	add    edx,0x1
c0018c91:	8a 12                	mov    dl,BYTE PTR [edx]
c0018c93:	0f b6 d2             	movzx  edx,dl
c0018c96:	c1 e2 08             	shl    edx,0x8
c0018c99:	09 d0                	or     eax,edx
c0018c9b:	0f b7 c0             	movzx  eax,ax
c0018c9e:	25 00 02 00 00       	and    eax,0x200
c0018ca3:	89 c2                	mov    edx,eax
c0018ca5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cac:	85 d2                	test   edx,edx
c0018cae:	0f 95 c2             	setne  dl
c0018cb1:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018cba:	83 c0 06             	add    eax,0x6
c0018cbd:	0f b7 d0             	movzx  edx,ax
c0018cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cc3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018cc6:	b0 01                	mov    al,0x1
c0018cc8:	e9 a1 09 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018ccd:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018cd9:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018cdd:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018ce1:	85 c0                	test   eax,eax
c0018ce3:	74 7a                	je     c0018d5f <Vm::faultHandler(regs*)+0x534>
c0018ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ce8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ceb:	3d ff ff 00 00       	cmp    eax,0xffff
c0018cf0:	76 6d                	jbe    c0018d5f <Vm::faultHandler(regs*)+0x534>
c0018cf2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cf5:	83 c0 05             	add    eax,0x5
c0018cf8:	8a 00                	mov    al,BYTE PTR [eax]
c0018cfa:	0f b6 c0             	movzx  eax,al
c0018cfd:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018d03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d06:	83 c0 04             	add    eax,0x4
c0018d09:	8a 00                	mov    al,BYTE PTR [eax]
c0018d0b:	0f b6 f8             	movzx  edi,al
c0018d0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d11:	83 c0 03             	add    eax,0x3
c0018d14:	8a 00                	mov    al,BYTE PTR [eax]
c0018d16:	0f b6 f0             	movzx  esi,al
c0018d19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d1c:	83 c0 02             	add    eax,0x2
c0018d1f:	8a 00                	mov    al,BYTE PTR [eax]
c0018d21:	0f b6 d8             	movzx  ebx,al
c0018d24:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d27:	83 c0 01             	add    eax,0x1
c0018d2a:	8a 00                	mov    al,BYTE PTR [eax]
c0018d2c:	0f b6 c8             	movzx  ecx,al
c0018d2f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d32:	8a 00                	mov    al,BYTE PTR [eax]
c0018d34:	0f b6 d0             	movzx  edx,al
c0018d37:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d3a:	8a 00                	mov    al,BYTE PTR [eax]
c0018d3c:	0f b6 c0             	movzx  eax,al
c0018d3f:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018d45:	57                   	push   edi
c0018d46:	56                   	push   esi
c0018d47:	53                   	push   ebx
c0018d48:	51                   	push   ecx
c0018d49:	52                   	push   edx
c0018d4a:	50                   	push   eax
c0018d4b:	68 a0 d0 02 c0       	push   0xc002d0a0
c0018d50:	e8 11 e2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018d55:	83 c4 20             	add    esp,0x20
c0018d58:	b0 00                	mov    al,0x0
c0018d5a:	e9 0f 09 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d62:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d65:	0f b7 c0             	movzx  eax,ax
c0018d68:	83 ec 0c             	sub    esp,0xc
c0018d6b:	50                   	push   eax
c0018d6c:	e8 70 f0 ff ff       	call   c0017de1 <Vm::inbv(unsigned short)>
c0018d71:	83 c4 10             	add    esp,0x10
c0018d74:	0f b6 c8             	movzx  ecx,al
c0018d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018d7d:	0f b7 d0             	movzx  edx,ax
c0018d80:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018d84:	83 ec 04             	sub    esp,0x4
c0018d87:	51                   	push   ecx
c0018d88:	52                   	push   edx
c0018d89:	50                   	push   eax
c0018d8a:	e8 87 f9 ff ff       	call   c0018716 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018d8f:	83 c4 10             	add    esp,0x10
c0018d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d98:	25 00 04 00 00       	and    eax,0x400
c0018d9d:	85 c0                	test   eax,eax
c0018d9f:	74 14                	je     c0018db5 <Vm::faultHandler(regs*)+0x58a>
c0018da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018da4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018da7:	83 e8 01             	sub    eax,0x1
c0018daa:	0f b7 d0             	movzx  edx,ax
c0018dad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018db3:	eb 12                	jmp    c0018dc7 <Vm::faultHandler(regs*)+0x59c>
c0018db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018dbb:	83 c0 01             	add    eax,0x1
c0018dbe:	0f b7 d0             	movzx  edx,ax
c0018dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018dcd:	8d 50 01             	lea    edx,[eax+0x1]
c0018dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dd3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018dd6:	b0 01                	mov    al,0x1
c0018dd8:	e9 91 08 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018ddd:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018de6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018de9:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018ded:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018df1:	85 c0                	test   eax,eax
c0018df3:	74 7a                	je     c0018e6f <Vm::faultHandler(regs*)+0x644>
c0018df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e00:	76 6d                	jbe    c0018e6f <Vm::faultHandler(regs*)+0x644>
c0018e02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e05:	83 c0 05             	add    eax,0x5
c0018e08:	8a 00                	mov    al,BYTE PTR [eax]
c0018e0a:	0f b6 c0             	movzx  eax,al
c0018e0d:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018e13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e16:	83 c0 04             	add    eax,0x4
c0018e19:	8a 00                	mov    al,BYTE PTR [eax]
c0018e1b:	0f b6 f8             	movzx  edi,al
c0018e1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e21:	83 c0 03             	add    eax,0x3
c0018e24:	8a 00                	mov    al,BYTE PTR [eax]
c0018e26:	0f b6 f0             	movzx  esi,al
c0018e29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e2c:	83 c0 02             	add    eax,0x2
c0018e2f:	8a 00                	mov    al,BYTE PTR [eax]
c0018e31:	0f b6 d8             	movzx  ebx,al
c0018e34:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e37:	83 c0 01             	add    eax,0x1
c0018e3a:	8a 00                	mov    al,BYTE PTR [eax]
c0018e3c:	0f b6 c8             	movzx  ecx,al
c0018e3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e42:	8a 00                	mov    al,BYTE PTR [eax]
c0018e44:	0f b6 d0             	movzx  edx,al
c0018e47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e4a:	8a 00                	mov    al,BYTE PTR [eax]
c0018e4c:	0f b6 c0             	movzx  eax,al
c0018e4f:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018e55:	57                   	push   edi
c0018e56:	56                   	push   esi
c0018e57:	53                   	push   ebx
c0018e58:	51                   	push   ecx
c0018e59:	52                   	push   edx
c0018e5a:	50                   	push   eax
c0018e5b:	68 a0 d0 02 c0       	push   0xc002d0a0
c0018e60:	e8 01 e1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018e65:	83 c4 20             	add    esp,0x20
c0018e68:	b0 00                	mov    al,0x0
c0018e6a:	e9 ff 07 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018e6f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018e73:	85 c0                	test   eax,eax
c0018e75:	74 6f                	je     c0018ee6 <Vm::faultHandler(regs*)+0x6bb>
c0018e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e7a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018e7d:	0f b7 c0             	movzx  eax,ax
c0018e80:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018e84:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0018e88:	89 c2                	mov    edx,eax
c0018e8a:	ed                   	in     eax,dx
c0018e8b:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018e8e:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018e97:	0f b7 d0             	movzx  edx,ax
c0018e9a:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018e9e:	83 ec 04             	sub    esp,0x4
c0018ea1:	51                   	push   ecx
c0018ea2:	52                   	push   edx
c0018ea3:	50                   	push   eax
c0018ea4:	e8 2b f9 ff ff       	call   c00187d4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018eb2:	25 00 04 00 00       	and    eax,0x400
c0018eb7:	85 c0                	test   eax,eax
c0018eb9:	74 17                	je     c0018ed2 <Vm::faultHandler(regs*)+0x6a7>
c0018ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ebe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ec1:	83 e8 04             	sub    eax,0x4
c0018ec4:	0f b7 d0             	movzx  edx,ax
c0018ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018ecd:	e9 83 00 00 00       	jmp    c0018f55 <Vm::faultHandler(regs*)+0x72a>
c0018ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ed5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ed8:	83 c0 04             	add    eax,0x4
c0018edb:	0f b7 d0             	movzx  edx,ax
c0018ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018ee4:	eb 6f                	jmp    c0018f55 <Vm::faultHandler(regs*)+0x72a>
c0018ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018eec:	0f b7 c0             	movzx  eax,ax
c0018eef:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018ef3:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018ef7:	89 c2                	mov    edx,eax
c0018ef9:	66 ed                	in     ax,dx
c0018efb:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018eff:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018f02:	0f b7 c8             	movzx  ecx,ax
c0018f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f0b:	0f b7 d0             	movzx  edx,ax
c0018f0e:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018f12:	83 ec 04             	sub    esp,0x4
c0018f15:	51                   	push   ecx
c0018f16:	52                   	push   edx
c0018f17:	50                   	push   eax
c0018f18:	e8 58 f8 ff ff       	call   c0018775 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f26:	25 00 04 00 00       	and    eax,0x400
c0018f2b:	85 c0                	test   eax,eax
c0018f2d:	74 14                	je     c0018f43 <Vm::faultHandler(regs*)+0x718>
c0018f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f32:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f35:	83 e8 02             	sub    eax,0x2
c0018f38:	0f b7 d0             	movzx  edx,ax
c0018f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018f41:	eb 12                	jmp    c0018f55 <Vm::faultHandler(regs*)+0x72a>
c0018f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f46:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f49:	83 c0 02             	add    eax,0x2
c0018f4c:	0f b7 d0             	movzx  edx,ax
c0018f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f5b:	8d 50 01             	lea    edx,[eax+0x1]
c0018f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f64:	b0 01                	mov    al,0x1
c0018f66:	e9 03 07 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0018f6b:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018f71:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018f75:	83 f8 06             	cmp    eax,0x6
c0018f78:	77 4f                	ja     c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018f7a:	8b 04 85 58 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ba8]
c0018f81:	ff e0                	jmp    eax
c0018f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018f89:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018f8d:	eb 3a                	jmp    c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f95:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018f99:	eb 2e                	jmp    c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018fa1:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018fa5:	eb 22                	jmp    c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018fad:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018fb1:	eb 16                	jmp    c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fb8:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018fbc:	eb 0b                	jmp    c0018fc9 <Vm::faultHandler(regs*)+0x79e>
c0018fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fc1:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018fc4:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018fc8:	90                   	nop
c0018fc9:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	74 7a                	je     c001904b <Vm::faultHandler(regs*)+0x820>
c0018fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fd4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018fd7:	3d ff ff 00 00       	cmp    eax,0xffff
c0018fdc:	76 6d                	jbe    c001904b <Vm::faultHandler(regs*)+0x820>
c0018fde:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018fe1:	83 c0 05             	add    eax,0x5
c0018fe4:	8a 00                	mov    al,BYTE PTR [eax]
c0018fe6:	0f b6 c0             	movzx  eax,al
c0018fe9:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018fef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ff2:	83 c0 04             	add    eax,0x4
c0018ff5:	8a 00                	mov    al,BYTE PTR [eax]
c0018ff7:	0f b6 f8             	movzx  edi,al
c0018ffa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ffd:	83 c0 03             	add    eax,0x3
c0019000:	8a 00                	mov    al,BYTE PTR [eax]
c0019002:	0f b6 f0             	movzx  esi,al
c0019005:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019008:	83 c0 02             	add    eax,0x2
c001900b:	8a 00                	mov    al,BYTE PTR [eax]
c001900d:	0f b6 d8             	movzx  ebx,al
c0019010:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019013:	83 c0 01             	add    eax,0x1
c0019016:	8a 00                	mov    al,BYTE PTR [eax]
c0019018:	0f b6 c8             	movzx  ecx,al
c001901b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001901e:	8a 00                	mov    al,BYTE PTR [eax]
c0019020:	0f b6 d0             	movzx  edx,al
c0019023:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019026:	8a 00                	mov    al,BYTE PTR [eax]
c0019028:	0f b6 c0             	movzx  eax,al
c001902b:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0019031:	57                   	push   edi
c0019032:	56                   	push   esi
c0019033:	53                   	push   ebx
c0019034:	51                   	push   ecx
c0019035:	52                   	push   edx
c0019036:	50                   	push   eax
c0019037:	68 a0 d0 02 c0       	push   0xc002d0a0
c001903c:	e8 25 df fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019041:	83 c4 20             	add    esp,0x20
c0019044:	b0 00                	mov    al,0x0
c0019046:	e9 23 06 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c001904b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001904e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019051:	0f b7 d0             	movzx  edx,ax
c0019054:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0019058:	83 ec 08             	sub    esp,0x8
c001905b:	52                   	push   edx
c001905c:	50                   	push   eax
c001905d:	e8 ba f5 ff ff       	call   c001861c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	0f b6 d0             	movzx  edx,al
c0019068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001906b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001906e:	0f b7 c0             	movzx  eax,ax
c0019071:	83 ec 08             	sub    esp,0x8
c0019074:	52                   	push   edx
c0019075:	50                   	push   eax
c0019076:	e8 9d ed ff ff       	call   c0017e18 <Vm::outbv(unsigned short, unsigned char)>
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019081:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019084:	25 00 04 00 00       	and    eax,0x400
c0019089:	85 c0                	test   eax,eax
c001908b:	74 14                	je     c00190a1 <Vm::faultHandler(regs*)+0x876>
c001908d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019090:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019093:	83 e8 01             	sub    eax,0x1
c0019096:	0f b7 d0             	movzx  edx,ax
c0019099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001909c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001909f:	eb 12                	jmp    c00190b3 <Vm::faultHandler(regs*)+0x888>
c00190a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00190a7:	83 c0 01             	add    eax,0x1
c00190aa:	0f b7 d0             	movzx  edx,ax
c00190ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00190b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00190b9:	8d 50 01             	lea    edx,[eax+0x1]
c00190bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00190c2:	b0 01                	mov    al,0x1
c00190c4:	e9 a5 05 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c00190c9:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00190cf:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00190d3:	83 f8 06             	cmp    eax,0x6
c00190d6:	77 4f                	ja     c0019127 <Vm::faultHandler(regs*)+0x8fc>
c00190d8:	8b 04 85 74 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b8c]
c00190df:	ff e0                	jmp    eax
c00190e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00190e7:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00190eb:	eb 3a                	jmp    c0019127 <Vm::faultHandler(regs*)+0x8fc>
c00190ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00190f3:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00190f7:	eb 2e                	jmp    c0019127 <Vm::faultHandler(regs*)+0x8fc>
c00190f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00190ff:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0019103:	eb 22                	jmp    c0019127 <Vm::faultHandler(regs*)+0x8fc>
c0019105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001910b:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001910f:	eb 16                	jmp    c0019127 <Vm::faultHandler(regs*)+0x8fc>
c0019111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019114:	8b 00                	mov    eax,DWORD PTR [eax]
c0019116:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001911a:	eb 0b                	jmp    c0019127 <Vm::faultHandler(regs*)+0x8fc>
c001911c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001911f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0019122:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0019126:	90                   	nop
c0019127:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c001912b:	85 c0                	test   eax,eax
c001912d:	74 7a                	je     c00191a9 <Vm::faultHandler(regs*)+0x97e>
c001912f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019132:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019135:	3d ff ff 00 00       	cmp    eax,0xffff
c001913a:	76 6d                	jbe    c00191a9 <Vm::faultHandler(regs*)+0x97e>
c001913c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001913f:	83 c0 05             	add    eax,0x5
c0019142:	8a 00                	mov    al,BYTE PTR [eax]
c0019144:	0f b6 c0             	movzx  eax,al
c0019147:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001914d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019150:	83 c0 04             	add    eax,0x4
c0019153:	8a 00                	mov    al,BYTE PTR [eax]
c0019155:	0f b6 f8             	movzx  edi,al
c0019158:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001915b:	83 c0 03             	add    eax,0x3
c001915e:	8a 00                	mov    al,BYTE PTR [eax]
c0019160:	0f b6 f0             	movzx  esi,al
c0019163:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019166:	83 c0 02             	add    eax,0x2
c0019169:	8a 00                	mov    al,BYTE PTR [eax]
c001916b:	0f b6 d8             	movzx  ebx,al
c001916e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019171:	83 c0 01             	add    eax,0x1
c0019174:	8a 00                	mov    al,BYTE PTR [eax]
c0019176:	0f b6 c8             	movzx  ecx,al
c0019179:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001917c:	8a 00                	mov    al,BYTE PTR [eax]
c001917e:	0f b6 d0             	movzx  edx,al
c0019181:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019184:	8a 00                	mov    al,BYTE PTR [eax]
c0019186:	0f b6 c0             	movzx  eax,al
c0019189:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001918f:	57                   	push   edi
c0019190:	56                   	push   esi
c0019191:	53                   	push   ebx
c0019192:	51                   	push   ecx
c0019193:	52                   	push   edx
c0019194:	50                   	push   eax
c0019195:	68 a0 d0 02 c0       	push   0xc002d0a0
c001919a:	e8 c7 dd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001919f:	83 c4 20             	add    esp,0x20
c00191a2:	b0 00                	mov    al,0x0
c00191a4:	e9 c5 04 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c00191a9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00191ad:	85 c0                	test   eax,eax
c00191af:	74 6c                	je     c001921d <Vm::faultHandler(regs*)+0x9f2>
c00191b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00191b7:	0f b7 d0             	movzx  edx,ax
c00191ba:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00191be:	83 ec 08             	sub    esp,0x8
c00191c1:	52                   	push   edx
c00191c2:	50                   	push   eax
c00191c3:	e8 fb f4 ff ff       	call   c00186c3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00191c8:	83 c4 10             	add    esp,0x10
c00191cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00191ce:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00191d1:	0f b7 d2             	movzx  edx,dx
c00191d4:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c00191d8:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c00191db:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c00191de:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c00191e2:	ef                   	out    dx,eax
c00191e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00191e9:	25 00 04 00 00       	and    eax,0x400
c00191ee:	85 c0                	test   eax,eax
c00191f0:	74 17                	je     c0019209 <Vm::faultHandler(regs*)+0x9de>
c00191f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191f5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00191f8:	83 e8 04             	sub    eax,0x4
c00191fb:	0f b7 d0             	movzx  edx,ax
c00191fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019201:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019204:	e9 80 00 00 00       	jmp    c0019289 <Vm::faultHandler(regs*)+0xa5e>
c0019209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001920c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001920f:	83 c0 04             	add    eax,0x4
c0019212:	0f b7 d0             	movzx  edx,ax
c0019215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019218:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001921b:	eb 6c                	jmp    c0019289 <Vm::faultHandler(regs*)+0xa5e>
c001921d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019220:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019223:	0f b7 d0             	movzx  edx,ax
c0019226:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c001922a:	83 ec 08             	sub    esp,0x8
c001922d:	52                   	push   edx
c001922e:	50                   	push   eax
c001922f:	e8 3b f4 ff ff       	call   c001866f <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	0f b7 c0             	movzx  eax,ax
c001923a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001923d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019240:	0f b7 d2             	movzx  edx,dx
c0019243:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0019247:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c001924b:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c001924e:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0019252:	66 ef                	out    dx,ax
c0019254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019257:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001925a:	25 00 04 00 00       	and    eax,0x400
c001925f:	85 c0                	test   eax,eax
c0019261:	74 14                	je     c0019277 <Vm::faultHandler(regs*)+0xa4c>
c0019263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019266:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019269:	83 e8 02             	sub    eax,0x2
c001926c:	0f b7 d0             	movzx  edx,ax
c001926f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019272:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019275:	eb 12                	jmp    c0019289 <Vm::faultHandler(regs*)+0xa5e>
c0019277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001927a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001927d:	83 c0 02             	add    eax,0x2
c0019280:	0f b7 d0             	movzx  edx,ax
c0019283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019286:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001928c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001928f:	8d 50 01             	lea    edx,[eax+0x1]
c0019292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019295:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019298:	b0 01                	mov    al,0x1
c001929a:	e9 cf 03 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c001929f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192a2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192a5:	b0 00                	mov    al,0x0
c00192a7:	89 c2                	mov    edx,eax
c00192a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00192af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192b2:	83 c0 01             	add    eax,0x1
c00192b5:	8a 00                	mov    al,BYTE PTR [eax]
c00192b7:	0f b6 c0             	movzx  eax,al
c00192ba:	83 ec 0c             	sub    esp,0xc
c00192bd:	50                   	push   eax
c00192be:	e8 1e eb ff ff       	call   c0017de1 <Vm::inbv(unsigned short)>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	88 c1                	mov    cl,al
c00192c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192cb:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00192ce:	0f b6 c1             	movzx  eax,cl
c00192d1:	09 c2                	or     edx,eax
c00192d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192d6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00192d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192df:	8d 50 02             	lea    edx,[eax+0x2]
c00192e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192e5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00192e8:	b0 01                	mov    al,0x1
c00192ea:	e9 7f 03 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c00192ef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00192f3:	85 c0                	test   eax,eax
c00192f5:	74 24                	je     c001931b <Vm::faultHandler(regs*)+0xaf0>
c00192f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00192fa:	83 c0 01             	add    eax,0x1
c00192fd:	8a 00                	mov    al,BYTE PTR [eax]
c00192ff:	0f b6 c0             	movzx  eax,al
c0019302:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0019306:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c001930a:	89 c2                	mov    edx,eax
c001930c:	ed                   	in     eax,dx
c001930d:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0019310:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0019313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019316:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019319:	eb 42                	jmp    c001935d <Vm::faultHandler(regs*)+0xb32>
c001931b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001931e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019321:	25 00 00 ff ff       	and    eax,0xffff0000
c0019326:	89 c2                	mov    edx,eax
c0019328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001932b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001932e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019331:	83 c0 01             	add    eax,0x1
c0019334:	8a 00                	mov    al,BYTE PTR [eax]
c0019336:	0f b6 c0             	movzx  eax,al
c0019339:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c001933d:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0019341:	89 c2                	mov    edx,eax
c0019343:	66 ed                	in     ax,dx
c0019345:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0019349:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c001934c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001934f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0019352:	0f b7 c1             	movzx  eax,cx
c0019355:	09 c2                	or     edx,eax
c0019357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001935a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019360:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019363:	8d 50 02             	lea    edx,[eax+0x2]
c0019366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019369:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001936c:	b0 01                	mov    al,0x1
c001936e:	e9 fb 02 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0019373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019376:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019379:	0f b6 d0             	movzx  edx,al
c001937c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001937f:	83 c0 01             	add    eax,0x1
c0019382:	8a 00                	mov    al,BYTE PTR [eax]
c0019384:	0f b6 c0             	movzx  eax,al
c0019387:	83 ec 08             	sub    esp,0x8
c001938a:	52                   	push   edx
c001938b:	50                   	push   eax
c001938c:	e8 87 ea ff ff       	call   c0017e18 <Vm::outbv(unsigned short, unsigned char)>
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019397:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001939a:	8d 50 02             	lea    edx,[eax+0x2]
c001939d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00193a3:	b0 01                	mov    al,0x1
c00193a5:	e9 c4 02 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c00193aa:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00193ae:	85 c0                	test   eax,eax
c00193b0:	74 28                	je     c00193da <Vm::faultHandler(regs*)+0xbaf>
c00193b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193b5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00193b8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00193bb:	83 c2 01             	add    edx,0x1
c00193be:	8a 12                	mov    dl,BYTE PTR [edx]
c00193c0:	0f b6 d2             	movzx  edx,dl
c00193c3:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c00193c7:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c00193cd:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c00193d3:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c00193d7:	ef                   	out    dx,eax
c00193d8:	eb 31                	jmp    c001940b <Vm::faultHandler(regs*)+0xbe0>
c00193da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193dd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00193e0:	0f b7 c0             	movzx  eax,ax
c00193e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00193e6:	83 c2 01             	add    edx,0x1
c00193e9:	8a 12                	mov    dl,BYTE PTR [edx]
c00193eb:	0f b6 d2             	movzx  edx,dl
c00193ee:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c00193f5:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00193fc:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c0019402:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0019409:	66 ef                	out    dx,ax
c001940b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001940e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019411:	8d 50 02             	lea    edx,[eax+0x2]
c0019414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019417:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001941a:	b0 01                	mov    al,0x1
c001941c:	e9 4d 02 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0019421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019424:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019427:	b0 00                	mov    al,0x0
c0019429:	89 c2                	mov    edx,eax
c001942b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001942e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019434:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019437:	0f b7 c0             	movzx  eax,ax
c001943a:	83 ec 0c             	sub    esp,0xc
c001943d:	50                   	push   eax
c001943e:	e8 9e e9 ff ff       	call   c0017de1 <Vm::inbv(unsigned short)>
c0019443:	83 c4 10             	add    esp,0x10
c0019446:	88 c1                	mov    cl,al
c0019448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001944b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001944e:	0f b6 c1             	movzx  eax,cl
c0019451:	09 c2                	or     edx,eax
c0019453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019456:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001945c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001945f:	8d 50 01             	lea    edx,[eax+0x1]
c0019462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019465:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019468:	b0 01                	mov    al,0x1
c001946a:	e9 ff 01 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c001946f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019473:	85 c0                	test   eax,eax
c0019475:	74 2e                	je     c00194a5 <Vm::faultHandler(regs*)+0xc7a>
c0019477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001947a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001947d:	0f b7 c0             	movzx  eax,ax
c0019480:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0019487:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c001948e:	89 c2                	mov    edx,eax
c0019490:	ed                   	in     eax,dx
c0019491:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0019497:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c001949d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194a0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00194a3:	eb 4c                	jmp    c00194f1 <Vm::faultHandler(regs*)+0xcc6>
c00194a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00194ab:	25 00 00 ff ff       	and    eax,0xffff0000
c00194b0:	89 c2                	mov    edx,eax
c00194b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194b5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00194b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194bb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00194be:	0f b7 c0             	movzx  eax,ax
c00194c1:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c00194c8:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c00194cf:	89 c2                	mov    edx,eax
c00194d1:	66 ed                	in     ax,dx
c00194d3:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c00194da:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c00194e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194e3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00194e6:	0f b7 c1             	movzx  eax,cx
c00194e9:	09 c2                	or     edx,eax
c00194eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00194f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00194f7:	8d 50 01             	lea    edx,[eax+0x1]
c00194fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019500:	b0 01                	mov    al,0x1
c0019502:	e9 67 01 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0019507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001950a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001950d:	0f b6 d0             	movzx  edx,al
c0019510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019513:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019516:	0f b7 c0             	movzx  eax,ax
c0019519:	83 ec 08             	sub    esp,0x8
c001951c:	52                   	push   edx
c001951d:	50                   	push   eax
c001951e:	e8 f5 e8 ff ff       	call   c0017e18 <Vm::outbv(unsigned short, unsigned char)>
c0019523:	83 c4 10             	add    esp,0x10
c0019526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019529:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001952c:	8d 50 01             	lea    edx,[eax+0x1]
c001952f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019532:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019535:	b0 01                	mov    al,0x1
c0019537:	e9 32 01 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c001953c:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019540:	85 c0                	test   eax,eax
c0019542:	74 2c                	je     c0019570 <Vm::faultHandler(regs*)+0xd45>
c0019544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019547:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001954a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001954d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019550:	0f b7 d2             	movzx  edx,dx
c0019553:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c001955a:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c0019560:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0019566:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c001956d:	ef                   	out    dx,eax
c001956e:	eb 2f                	jmp    c001959f <Vm::faultHandler(regs*)+0xd74>
c0019570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019573:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019576:	0f b7 c0             	movzx  eax,ax
c0019579:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001957c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001957f:	0f b7 d2             	movzx  edx,dx
c0019582:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0019589:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0019590:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0019596:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c001959d:	66 ef                	out    dx,ax
c001959f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195a5:	8d 50 01             	lea    edx,[eax+0x1]
c00195a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00195ae:	b0 01                	mov    al,0x1
c00195b0:	e9 b9 00 00 00       	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c00195b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195b8:	83 c0 05             	add    eax,0x5
c00195bb:	8a 00                	mov    al,BYTE PTR [eax]
c00195bd:	0f b6 c0             	movzx  eax,al
c00195c0:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00195c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195c9:	83 c0 04             	add    eax,0x4
c00195cc:	8a 00                	mov    al,BYTE PTR [eax]
c00195ce:	0f b6 f8             	movzx  edi,al
c00195d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195d4:	83 c0 03             	add    eax,0x3
c00195d7:	8a 00                	mov    al,BYTE PTR [eax]
c00195d9:	0f b6 f0             	movzx  esi,al
c00195dc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195df:	83 c0 02             	add    eax,0x2
c00195e2:	8a 00                	mov    al,BYTE PTR [eax]
c00195e4:	0f b6 d8             	movzx  ebx,al
c00195e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195ea:	83 c0 01             	add    eax,0x1
c00195ed:	8a 00                	mov    al,BYTE PTR [eax]
c00195ef:	0f b6 c8             	movzx  ecx,al
c00195f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195f5:	8a 00                	mov    al,BYTE PTR [eax]
c00195f7:	0f b6 d0             	movzx  edx,al
c00195fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195fd:	8a 00                	mov    al,BYTE PTR [eax]
c00195ff:	0f b6 c0             	movzx  eax,al
c0019602:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0019608:	57                   	push   edi
c0019609:	56                   	push   esi
c001960a:	53                   	push   ebx
c001960b:	51                   	push   ecx
c001960c:	52                   	push   edx
c001960d:	50                   	push   eax
c001960e:	68 d0 d0 02 c0       	push   0xc002d0d0
c0019613:	e8 4e d9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019618:	83 c4 20             	add    esp,0x20
c001961b:	83 ec 0c             	sub    esp,0xc
c001961e:	6a 60                	push   0x60
c0019620:	e8 bc e7 ff ff       	call   c0017de1 <Vm::inbv(unsigned short)>
c0019625:	83 c4 10             	add    esp,0x10
c0019628:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001962b:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001962f:	83 f8 1c             	cmp    eax,0x1c
c0019632:	74 09                	je     c001963d <Vm::faultHandler(regs*)+0xe12>
c0019634:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019638:	83 f8 5a             	cmp    eax,0x5a
c001963b:	75 24                	jne    c0019661 <Vm::faultHandler(regs*)+0xe36>
c001963d:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019641:	83 f8 1c             	cmp    eax,0x1c
c0019644:	74 09                	je     c001964f <Vm::faultHandler(regs*)+0xe24>
c0019646:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001964a:	83 f8 5a             	cmp    eax,0x5a
c001964d:	75 15                	jne    c0019664 <Vm::faultHandler(regs*)+0xe39>
c001964f:	83 ec 0c             	sub    esp,0xc
c0019652:	6a 60                	push   0x60
c0019654:	e8 88 e7 ff ff       	call   c0017de1 <Vm::inbv(unsigned short)>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001965f:	eb dc                	jmp    c001963d <Vm::faultHandler(regs*)+0xe12>
c0019661:	90                   	nop
c0019662:	eb b7                	jmp    c001961b <Vm::faultHandler(regs*)+0xdf0>
c0019664:	90                   	nop
c0019665:	b0 00                	mov    al,0x0
c0019667:	eb 05                	jmp    c001966e <Vm::faultHandler(regs*)+0xe43>
c0019669:	e9 39 f2 ff ff       	jmp    c00188a7 <Vm::faultHandler(regs*)+0x7c>
c001966e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019671:	5b                   	pop    ebx
c0019672:	5e                   	pop    esi
c0019673:	5f                   	pop    edi
c0019674:	5d                   	pop    ebp
c0019675:	c3                   	ret    

c0019676 <IOAPIC::close(int, int, void*)>:
c0019676:	b8 00 00 00 00       	mov    eax,0x0
c001967b:	c3                   	ret    

c001967c <apicGetBase()>:
c001967c:	55                   	push   ebp
c001967d:	89 e5                	mov    ebp,esp
c001967f:	83 ec 18             	sub    esp,0x18
c0019682:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019687:	83 e0 08             	and    eax,0x8
c001968a:	0f b6 c0             	movzx  eax,al
c001968d:	85 c0                	test   eax,eax
c001968f:	75 07                	jne    c0019698 <apicGetBase()+0x1c>
c0019691:	b8 00 00 00 00       	mov    eax,0x0
c0019696:	eb 1b                	jmp    c00196b3 <apicGetBase()+0x37>
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	6a 1b                	push   0x1b
c001969d:	e8 74 15 00 00       	call   c001ac16 <x86rdmsr(unsigned int)>
c00196a2:	83 c4 10             	add    esp,0x10
c00196a5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00196a8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00196ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00196ae:	25 00 00 ff ff       	and    eax,0xffff0000
c00196b3:	c9                   	leave  
c00196b4:	c3                   	ret    
c00196b5:	90                   	nop

c00196b6 <IOAPIC::IOAPIC()>:
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196bd:	83 ec 08             	sub    esp,0x8
c00196c0:	68 90 d4 02 c0       	push   0xc002d490
c00196c5:	50                   	push   eax
c00196c6:	e8 e5 11 ff ff       	call   c000a8b0 <Device::Device(char const*)>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c00196d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196d7:	89 10                	mov    DWORD PTR [eax],edx
c00196d9:	90                   	nop
c00196da:	83 c4 0c             	add    esp,0xc
c00196dd:	c3                   	ret    

c00196de <apicOpen()>:
c00196de:	55                   	push   ebp
c00196df:	89 e5                	mov    ebp,esp
c00196e1:	53                   	push   ebx
c00196e2:	83 ec 34             	sub    esp,0x34
c00196e5:	83 ec 0c             	sub    esp,0xc
c00196e8:	68 98 d4 02 c0       	push   0xc002d498
c00196ed:	e8 74 d8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00196f2:	83 c4 10             	add    esp,0x10
c00196f5:	a0 00 74 03 c0       	mov    al,ds:0xc0037400
c00196fa:	83 f0 01             	xor    eax,0x1
c00196fd:	0f b6 c0             	movzx  eax,al
c0019700:	85 c0                	test   eax,eax
c0019702:	0f 84 a3 00 00 00    	je     c00197ab <apicOpen()+0xcd>
c0019708:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001970c:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c0019711:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019715:	0f b6 c0             	movzx  eax,al
c0019718:	39 c2                	cmp    edx,eax
c001971a:	0f 83 84 00 00 00    	jae    c00197a4 <apicOpen()+0xc6>
c0019720:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0019727:	83 ec 0c             	sub    esp,0xc
c001972a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001972d:	e8 12 6d ff ff       	call   c0010444 <malloc>
c0019732:	83 c4 10             	add    esp,0x10
c0019735:	89 c3                	mov    ebx,eax
c0019737:	83 ec 0c             	sub    esp,0xc
c001973a:	53                   	push   ebx
c001973b:	e8 76 ff ff ff       	call   c00196b6 <IOAPIC::IOAPIC()>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0019746:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001974a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001974d:	89 14 85 e0 73 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8c20],edx
c0019754:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c0019759:	83 c0 01             	add    eax,0x1
c001975c:	a3 c0 73 03 c0       	mov    ds:0xc00373c0,eax
c0019761:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0019766:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001976c:	83 ec 08             	sub    esp,0x8
c001976f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019772:	50                   	push   eax
c0019773:	e8 d6 0f ff ff       	call   c000a74e <Device::addChild(Device*)>
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001977e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019780:	83 c0 08             	add    eax,0x8
c0019783:	8b 00                	mov    eax,DWORD PTR [eax]
c0019785:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019789:	6a 00                	push   0x0
c001978b:	6a 00                	push   0x0
c001978d:	52                   	push   edx
c001978e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019791:	ff d0                	call   eax
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0019799:	83 c0 01             	add    eax,0x1
c001979c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001979f:	e9 68 ff ff ff       	jmp    c001970c <apicOpen()+0x2e>
c00197a4:	c6 05 00 74 03 c0 01 	mov    BYTE PTR ds:0xc0037400,0x1
c00197ab:	e8 cc fe ff ff       	call   c001967c <apicGetBase()>
c00197b0:	05 f0 00 00 00       	add    eax,0xf0
c00197b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00197b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00197bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00197bd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00197c0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00197c7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00197ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00197d1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00197d4:	89 10                	mov    DWORD PTR [eax],edx
c00197d6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00197dd:	a1 8c 6d 03 c0       	mov    eax,ds:0xc0036d8c
c00197e2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00197e5:	7d 7c                	jge    c0019863 <apicOpen()+0x185>
c00197e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00197ea:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c00197f1:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00197f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00197f7:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c00197fe:	c1 e8 08             	shr    eax,0x8
c0019801:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0019805:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019808:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c001980f:	c1 e8 18             	shr    eax,0x18
c0019812:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0019815:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019819:	3d ff 00 00 00       	cmp    eax,0xff
c001981e:	75 3a                	jne    c001985a <apicOpen()+0x17c>
c0019820:	e8 57 fe ff ff       	call   c001967c <apicGetBase()>
c0019825:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0019829:	83 fa 01             	cmp    edx,0x1
c001982c:	75 07                	jne    c0019835 <apicOpen()+0x157>
c001982e:	ba 60 03 00 00       	mov    edx,0x360
c0019833:	eb 05                	jmp    c001983a <apicOpen()+0x15c>
c0019835:	ba 50 03 00 00       	mov    edx,0x350
c001983a:	01 d0                	add    eax,edx
c001983c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001983f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019842:	8b 00                	mov    eax,DWORD PTR [eax]
c0019844:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0019847:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001984e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0019852:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019855:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019858:	89 10                	mov    DWORD PTR [eax],edx
c001985a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001985e:	e9 7a ff ff ff       	jmp    c00197dd <apicOpen()+0xff>
c0019863:	90                   	nop
c0019864:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0019867:	c9                   	leave  
c0019868:	c3                   	ret    
c0019869:	90                   	nop

c001986a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001986a:	55                   	push   ebp
c001986b:	89 e5                	mov    ebp,esp
c001986d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019870:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019876:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019879:	72 1d                	jb     c0019898 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001987b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001987e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019887:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001988d:	01 d0                	add    eax,edx
c001988f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019892:	73 04                	jae    c0019898 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019894:	b0 01                	mov    al,0x1
c0019896:	eb 02                	jmp    c001989a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0019898:	b0 00                	mov    al,0x0
c001989a:	5d                   	pop    ebp
c001989b:	c3                   	ret    

c001989c <IOAPIC::read(int)>:
c001989c:	55                   	push   ebp
c001989d:	89 e5                	mov    ebp,esp
c001989f:	83 ec 10             	sub    esp,0x10
c00198a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00198ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00198ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00198b1:	0f b6 d0             	movzx  edx,al
c00198b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00198b7:	89 10                	mov    DWORD PTR [eax],edx
c00198b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00198bc:	83 c0 10             	add    eax,0x10
c00198bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00198c1:	c9                   	leave  
c00198c2:	c3                   	ret    
c00198c3:	90                   	nop

c00198c4 <IOAPIC::open(int, int, void*)>:
c00198c4:	55                   	push   ebp
c00198c5:	89 e5                	mov    ebp,esp
c00198c7:	57                   	push   edi
c00198c8:	56                   	push   esi
c00198c9:	53                   	push   ebx
c00198ca:	83 ec 04             	sub    esp,0x4
c00198cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00198d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00198d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00198e2:	8b 14 85 80 6e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9180]
c00198e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00198f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00198fb:	8b 14 85 00 6f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9100]
c0019902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019905:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001990b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001990e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019917:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001991d:	0f b6 f0             	movzx  esi,al
c0019920:	89 d0                	mov    eax,edx
c0019922:	ba 00 00 00 00       	mov    edx,0x0
c0019927:	89 c7                	mov    edi,eax
c0019929:	83 e7 ff             	and    edi,0xffffffff
c001992c:	89 f9                	mov    ecx,edi
c001992e:	0f b6 da             	movzx  ebx,dl
c0019931:	89 c8                	mov    eax,ecx
c0019933:	89 da                	mov    edx,ebx
c0019935:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0019938:	8d 5e 08             	lea    ebx,[esi+0x8]
c001993b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001993f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0019943:	83 e0 00             	and    eax,0x0
c0019946:	09 d0                	or     eax,edx
c0019948:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001994c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001994f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019955:	8d 50 01             	lea    edx,[eax+0x1]
c0019958:	88 d1                	mov    cl,dl
c001995a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001995d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0019963:	0f b6 d0             	movzx  edx,al
c0019966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019969:	83 c2 08             	add    edx,0x8
c001996c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019970:	0f b6 c9             	movzx  ecx,cl
c0019973:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019979:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001997d:	6a 01                	push   0x1
c001997f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019982:	e8 15 ff ff ff       	call   c001989c <IOAPIC::read(int)>
c0019987:	83 c4 08             	add    esp,0x8
c001998a:	c1 f8 10             	sar    eax,0x10
c001998d:	0f b6 c0             	movzx  eax,al
c0019990:	8d 50 01             	lea    edx,[eax+0x1]
c0019993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019996:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001999c:	b8 00 00 00 00       	mov    eax,0x0
c00199a1:	8d 65 f4             	lea    esp,[ebp-0xc]
c00199a4:	5b                   	pop    ebx
c00199a5:	5e                   	pop    esi
c00199a6:	5f                   	pop    edi
c00199a7:	5d                   	pop    ebp
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <IOAPIC::write(int, int)>:
c00199aa:	55                   	push   ebp
c00199ab:	89 e5                	mov    ebp,esp
c00199ad:	83 ec 10             	sub    esp,0x10
c00199b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00199b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00199b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00199bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00199bf:	0f b6 d0             	movzx  edx,al
c00199c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00199c5:	89 10                	mov    DWORD PTR [eax],edx
c00199c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00199ca:	8d 50 10             	lea    edx,[eax+0x10]
c00199cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00199d0:	89 02                	mov    DWORD PTR [edx],eax
c00199d2:	90                   	nop
c00199d3:	c9                   	leave  
c00199d4:	c3                   	ret    
c00199d5:	90                   	nop

c00199d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00199d6:	55                   	push   ebp
c00199d7:	89 e5                	mov    ebp,esp
c00199d9:	53                   	push   ebx
c00199da:	83 ec 2c             	sub    esp,0x2c
c00199dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00199e0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00199e3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00199e6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00199e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00199ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00199ef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00199f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00199f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00199f8:	88 d8                	mov    al,bl
c00199fa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00199fd:	88 c8                	mov    al,cl
c00199ff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0019a02:	88 d0                	mov    al,dl
c0019a04:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0019a07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0019a0b:	83 c0 08             	add    eax,0x8
c0019a0e:	d1 e0                	shl    eax,1
c0019a10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019a13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0019a17:	83 c0 08             	add    eax,0x8
c0019a1a:	d1 e0                	shl    eax,1
c0019a1c:	83 c0 01             	add    eax,0x1
c0019a1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0019a22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019a25:	50                   	push   eax
c0019a26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a29:	e8 6e fe ff ff       	call   c001989c <IOAPIC::read(int)>
c0019a2e:	83 c4 08             	add    esp,0x8
c0019a31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019a34:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0019a3b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019a3e:	c1 e0 18             	shl    eax,0x18
c0019a41:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0019a44:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0019a47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019a4a:	52                   	push   edx
c0019a4b:	50                   	push   eax
c0019a4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a4f:	e8 56 ff ff ff       	call   c00199aa <IOAPIC::write(int, int)>
c0019a54:	83 c4 0c             	add    esp,0xc
c0019a57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019a5a:	50                   	push   eax
c0019a5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a5e:	e8 39 fe ff ff       	call   c001989c <IOAPIC::read(int)>
c0019a63:	83 c4 08             	add    esp,0x8
c0019a66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019a69:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019a70:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0019a77:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019a7e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0019a82:	85 c0                	test   eax,eax
c0019a84:	74 09                	je     c0019a8f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0019a86:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019a8d:	eb 07                	jmp    c0019a96 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019a8f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0019a96:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019a9a:	85 c0                	test   eax,eax
c0019a9c:	74 09                	je     c0019aa7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019a9e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0019aa5:	eb 07                	jmp    c0019aae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0019aa7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019aae:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0019ab5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019ab9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019abc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019abf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019ac2:	52                   	push   edx
c0019ac3:	50                   	push   eax
c0019ac4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019ac7:	e8 de fe ff ff       	call   c00199aa <IOAPIC::write(int, int)>
c0019acc:	83 c4 0c             	add    esp,0xc
c0019acf:	90                   	nop
c0019ad0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0019ad3:	c9                   	leave  
c0019ad4:	c3                   	ret    
c0019ad5:	90                   	nop

c0019ad6 <noCopro(unsigned long)>:
c0019ad6:	c3                   	ret    

c0019ad7 <HalRestart()>:
c0019ad7:	e4 64                	in     al,0x64
c0019ad9:	a8 02                	test   al,0x2
c0019adb:	75 fa                	jne    c0019ad7 <HalRestart()>
c0019add:	b0 fe                	mov    al,0xfe
c0019adf:	e6 64                	out    0x64,al
c0019ae1:	c3                   	ret    

c0019ae2 <HalShutdown()>:
c0019ae2:	c3                   	ret    

c0019ae3 <HalSleep()>:
c0019ae3:	c3                   	ret    

c0019ae4 <CPU::close(int, int, void*)>:
c0019ae4:	31 c0                	xor    eax,eax
c0019ae6:	c3                   	ret    

c0019ae7 <x86ReadCMOS(unsigned char)>:
c0019ae7:	83 ec 14             	sub    esp,0x14
c0019aea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019aee:	88 04 24             	mov    BYTE PTR [esp],al
c0019af1:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c0019af6:	0f b6 c0             	movzx  eax,al
c0019af9:	85 c0                	test   eax,eax
c0019afb:	74 04                	je     c0019b01 <x86ReadCMOS(unsigned char)+0x1a>
c0019afd:	b2 00                	mov    dl,0x0
c0019aff:	eb 02                	jmp    c0019b03 <x86ReadCMOS(unsigned char)+0x1c>
c0019b01:	b2 80                	mov    dl,0x80
c0019b03:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019b06:	09 d0                	or     eax,edx
c0019b08:	0f b6 c0             	movzx  eax,al
c0019b0b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0019b12:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019b16:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b1a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019b1f:	ee                   	out    dx,al
c0019b20:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0019b27:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019b2c:	89 c2                	mov    edx,eax
c0019b2e:	ec                   	in     al,dx
c0019b2f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019b33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019b37:	83 c4 14             	add    esp,0x14
c0019b3a:	c3                   	ret    

c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>:
c0019b3b:	83 ec 18             	sub    esp,0x18
c0019b3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019b46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0019b4a:	88 d0                	mov    al,dl
c0019b4c:	88 04 24             	mov    BYTE PTR [esp],al
c0019b4f:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c0019b54:	0f b6 c0             	movzx  eax,al
c0019b57:	85 c0                	test   eax,eax
c0019b59:	74 04                	je     c0019b5f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019b5b:	b2 00                	mov    dl,0x0
c0019b5d:	eb 02                	jmp    c0019b61 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0019b5f:	b2 80                	mov    dl,0x80
c0019b61:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019b65:	09 d0                	or     eax,edx
c0019b67:	0f b6 c0             	movzx  eax,al
c0019b6a:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019b71:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019b75:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019b79:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019b7e:	ee                   	out    dx,al
c0019b7f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019b83:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019b8a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019b8e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0019b92:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0019b97:	ee                   	out    dx,al
c0019b98:	90                   	nop
c0019b99:	83 c4 18             	add    esp,0x18
c0019b9c:	c3                   	ret    

c0019b9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019b9d:	60                   	pusha  
c0019b9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ba2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ba6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019baa:	9c                   	pushf  
c0019bab:	fa                   	cli    
c0019bac:	0f 09                	wbinvd 
c0019bae:	0f 30                	wrmsr  
c0019bb0:	9d                   	popf   
c0019bb1:	89 c2                	mov    edx,eax
c0019bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb7:	89 10                	mov    DWORD PTR [eax],edx
c0019bb9:	61                   	popa   
c0019bba:	90                   	nop
c0019bbb:	c3                   	ret    

c0019bbc <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019bbc:	60                   	pusha  
c0019bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc1:	89 c1                	mov    ecx,eax
c0019bc3:	9c                   	pushf  
c0019bc4:	fa                   	cli    
c0019bc5:	0f 09                	wbinvd 
c0019bc7:	31 c0                	xor    eax,eax
c0019bc9:	31 d2                	xor    edx,edx
c0019bcb:	0f 32                	rdmsr  
c0019bcd:	9d                   	popf   
c0019bce:	89 c2                	mov    edx,eax
c0019bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd4:	89 10                	mov    DWORD PTR [eax],edx
c0019bd6:	61                   	popa   
c0019bd7:	90                   	nop
c0019bd8:	c3                   	ret    

c0019bd9 <AMD_K6_writeback(int, int, int)>:
c0019bd9:	83 ec 20             	sub    esp,0x20
c0019bdc:	a1 70 71 03 c0       	mov    eax,ds:0xc0037170
c0019be1:	c1 e8 14             	shr    eax,0x14
c0019be4:	c1 e8 02             	shr    eax,0x2
c0019be7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019beb:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019bf0:	0f 85 9e 00 00 00    	jne    c0019c94 <AMD_K6_writeback(int, int, int)+0xbb>
c0019bf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bfe:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019c03:	75 19                	jne    c0019c1e <AMD_K6_writeback(int, int, int)+0x45>
c0019c05:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0019c0a:	7f 0a                	jg     c0019c16 <AMD_K6_writeback(int, int, int)+0x3d>
c0019c0c:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0019c14:	eb 08                	jmp    c0019c1e <AMD_K6_writeback(int, int, int)+0x45>
c0019c16:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0019c1e:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019c23:	7c 6e                	jl     c0019c93 <AMD_K6_writeback(int, int, int)+0xba>
c0019c25:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019c2a:	7e 09                	jle    c0019c35 <AMD_K6_writeback(int, int, int)+0x5c>
c0019c2c:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019c31:	74 36                	je     c0019c69 <AMD_K6_writeback(int, int, int)+0x90>
c0019c33:	eb 5e                	jmp    c0019c93 <AMD_K6_writeback(int, int, int)+0xba>
c0019c35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c39:	50                   	push   eax
c0019c3a:	68 82 00 00 c0       	push   0xc0000082
c0019c3f:	e8 78 ff ff ff       	call   c0019bbc <AMD_K6_read_msr(unsigned int, REGS*)>
c0019c44:	83 c4 08             	add    esp,0x8
c0019c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c4b:	d1 e0                	shl    eax,1
c0019c4d:	83 e0 7f             	and    eax,0x7f
c0019c50:	89 c2                	mov    edx,eax
c0019c52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c56:	50                   	push   eax
c0019c57:	6a 00                	push   0x0
c0019c59:	52                   	push   edx
c0019c5a:	68 82 00 00 c0       	push   0xc0000082
c0019c5f:	e8 39 ff ff ff       	call   c0019b9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019c64:	83 c4 10             	add    esp,0x10
c0019c67:	eb 2b                	jmp    c0019c94 <AMD_K6_writeback(int, int, int)+0xbb>
c0019c69:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c6d:	50                   	push   eax
c0019c6e:	68 82 00 00 c0       	push   0xc0000082
c0019c73:	e8 44 ff ff ff       	call   c0019bbc <AMD_K6_read_msr(unsigned int, REGS*)>
c0019c78:	83 c4 08             	add    esp,0x8
c0019c7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c7f:	50                   	push   eax
c0019c80:	6a 00                	push   0x0
c0019c82:	6a 00                	push   0x0
c0019c84:	68 82 00 00 c0       	push   0xc0000082
c0019c89:	e8 0f ff ff ff       	call   c0019b9d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	eb 01                	jmp    c0019c94 <AMD_K6_writeback(int, int, int)+0xbb>
c0019c93:	90                   	nop
c0019c94:	90                   	nop
c0019c95:	83 c4 20             	add    esp,0x20
c0019c98:	c3                   	ret    

c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019c99:	56                   	push   esi
c0019c9a:	53                   	push   ebx
c0019c9b:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c0019ca0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0019ca4:	75 32                	jne    c0019cd8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019ca6:	8b 15 20 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037420
c0019cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb0:	89 10                	mov    DWORD PTR [eax],edx
c0019cb2:	8b 15 1c 74 03 c0    	mov    edx,DWORD PTR ds:0xc003741c
c0019cb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cbc:	89 10                	mov    DWORD PTR [eax],edx
c0019cbe:	8b 15 18 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037418
c0019cc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cc8:	89 10                	mov    DWORD PTR [eax],edx
c0019cca:	8b 15 14 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037414
c0019cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cd4:	89 10                	mov    DWORD PTR [eax],edx
c0019cd6:	eb 5c                	jmp    c0019d34 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019cd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cdc:	ba 00 00 00 00       	mov    edx,0x0
c0019ce1:	89 d1                	mov    ecx,edx
c0019ce3:	0f a2                	cpuid  
c0019ce5:	89 c6                	mov    esi,eax
c0019ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ceb:	89 30                	mov    DWORD PTR [eax],esi
c0019ced:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cf1:	89 18                	mov    DWORD PTR [eax],ebx
c0019cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cf7:	89 08                	mov    DWORD PTR [eax],ecx
c0019cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cfd:	89 10                	mov    DWORD PTR [eax],edx
c0019cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d03:	a3 20 10 03 c0       	mov    ds:0xc0031020,eax
c0019d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d0e:	a3 20 74 03 c0       	mov    ds:0xc0037420,eax
c0019d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d19:	a3 1c 74 03 c0       	mov    ds:0xc003741c,eax
c0019d1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d24:	a3 18 74 03 c0       	mov    ds:0xc0037418,eax
c0019d29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d2f:	a3 14 74 03 c0       	mov    ds:0xc0037414,eax
c0019d34:	5b                   	pop    ebx
c0019d35:	5e                   	pop    esi
c0019d36:	c3                   	ret    

c0019d37 <cpuidCheckEDX(unsigned int)>:
c0019d37:	83 ec 10             	sub    esp,0x10
c0019d3a:	89 e0                	mov    eax,esp
c0019d3c:	50                   	push   eax
c0019d3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d41:	50                   	push   eax
c0019d42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d46:	50                   	push   eax
c0019d47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d4b:	50                   	push   eax
c0019d4c:	6a 01                	push   0x1
c0019d4e:	e8 46 ff ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d53:	83 c4 14             	add    esp,0x14
c0019d56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019d59:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019d5d:	0f 95 c0             	setne  al
c0019d60:	83 c4 10             	add    esp,0x10
c0019d63:	c3                   	ret    

c0019d64 <cpuidCheckECX(unsigned int)>:
c0019d64:	83 ec 10             	sub    esp,0x10
c0019d67:	89 e0                	mov    eax,esp
c0019d69:	50                   	push   eax
c0019d6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d6e:	50                   	push   eax
c0019d6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d73:	50                   	push   eax
c0019d74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d78:	50                   	push   eax
c0019d79:	6a 01                	push   0x1
c0019d7b:	e8 19 ff ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d80:	83 c4 14             	add    esp,0x14
c0019d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d87:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019d8b:	0f 95 c0             	setne  al
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	c3                   	ret    

c0019d92 <cpuidCheckExtendedEBX(unsigned int)>:
c0019d92:	83 ec 10             	sub    esp,0x10
c0019d95:	89 e0                	mov    eax,esp
c0019d97:	50                   	push   eax
c0019d98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d9c:	50                   	push   eax
c0019d9d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019da1:	50                   	push   eax
c0019da2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019da6:	50                   	push   eax
c0019da7:	6a 07                	push   0x7
c0019da9:	e8 eb fe ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019dae:	83 c4 14             	add    esp,0x14
c0019db1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019db5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019db9:	0f 95 c0             	setne  al
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	c3                   	ret    

c0019dc0 <cpuidCheckExtendedECX(unsigned int)>:
c0019dc0:	83 ec 10             	sub    esp,0x10
c0019dc3:	89 e0                	mov    eax,esp
c0019dc5:	50                   	push   eax
c0019dc6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019dca:	50                   	push   eax
c0019dcb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dcf:	50                   	push   eax
c0019dd0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dd4:	50                   	push   eax
c0019dd5:	6a 07                	push   0x7
c0019dd7:	e8 bd fe ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019ddc:	83 c4 14             	add    esp,0x14
c0019ddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019de7:	0f 95 c0             	setne  al
c0019dea:	83 c4 10             	add    esp,0x10
c0019ded:	c3                   	ret    

c0019dee <HalDetectFeatures()>:
c0019dee:	57                   	push   edi
c0019def:	56                   	push   esi
c0019df0:	53                   	push   ebx
c0019df1:	81 ec 90 00 00 00    	sub    esp,0x90
c0019df7:	83 ec 04             	sub    esp,0x4
c0019dfa:	6a 08                	push   0x8
c0019dfc:	6a 00                	push   0x0
c0019dfe:	68 4c 74 03 c0       	push   0xc003744c
c0019e03:	e8 e8 66 fe ff       	call   c00004f0 <memset>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019e10:	83 c8 04             	or     eax,0x4
c0019e13:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019e18:	83 ec 0c             	sub    esp,0xc
c0019e1b:	68 d4 d4 02 c0       	push   0xc002d4d4
c0019e20:	e8 41 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019e25:	83 c4 10             	add    esp,0x10
c0019e28:	e8 cc 63 fe ff       	call   c00001f9 <detectCPUID>
c0019e2d:	85 c0                	test   eax,eax
c0019e2f:	0f 95 c0             	setne  al
c0019e32:	83 e0 01             	and    eax,0x1
c0019e35:	83 e0 01             	and    eax,0x1
c0019e38:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019e3b:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019e40:	83 e0 fd             	and    eax,0xfffffffd
c0019e43:	88 c2                	mov    dl,al
c0019e45:	88 c8                	mov    al,cl
c0019e47:	09 d0                	or     eax,edx
c0019e49:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019e4e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019e53:	83 e0 02             	and    eax,0x2
c0019e56:	0f b6 c0             	movzx  eax,al
c0019e59:	85 c0                	test   eax,eax
c0019e5b:	0f 84 84 02 00 00    	je     c001a0e5 <HalDetectFeatures()+0x2f7>
c0019e61:	83 ec 0c             	sub    esp,0xc
c0019e64:	6a 20                	push   0x20
c0019e66:	e8 cc fe ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c0019e6b:	83 c4 10             	add    esp,0x10
c0019e6e:	83 e0 01             	and    eax,0x1
c0019e71:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e78:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019e7d:	83 e0 f7             	and    eax,0xfffffff7
c0019e80:	88 c2                	mov    dl,al
c0019e82:	88 c8                	mov    al,cl
c0019e84:	09 d0                	or     eax,edx
c0019e86:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019e8b:	83 ec 0c             	sub    esp,0xc
c0019e8e:	68 00 00 00 04       	push   0x4000000
c0019e93:	e8 9f fe ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c0019e98:	83 c4 10             	add    esp,0x10
c0019e9b:	89 c1                	mov    ecx,eax
c0019e9d:	83 e1 01             	and    ecx,0x1
c0019ea0:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c0019ea5:	83 e0 fe             	and    eax,0xfffffffe
c0019ea8:	88 c2                	mov    dl,al
c0019eaa:	88 c8                	mov    al,cl
c0019eac:	09 d0                	or     eax,edx
c0019eae:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c0019eb3:	83 ec 0c             	sub    esp,0xc
c0019eb6:	68 80 00 00 00       	push   0x80
c0019ebb:	e8 77 fe ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	89 c1                	mov    ecx,eax
c0019ec5:	c1 e1 07             	shl    ecx,0x7
c0019ec8:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c0019ecd:	83 e0 7f             	and    eax,0x7f
c0019ed0:	88 c2                	mov    dl,al
c0019ed2:	88 c8                	mov    al,cl
c0019ed4:	09 d0                	or     eax,edx
c0019ed6:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	68 00 00 80 00       	push   0x800000
c0019ee3:	e8 4f fe ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c0019ee8:	83 c4 10             	add    esp,0x10
c0019eeb:	83 e0 01             	and    eax,0x1
c0019eee:	89 c1                	mov    ecx,eax
c0019ef0:	c1 e1 05             	shl    ecx,0x5
c0019ef3:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019ef8:	83 e0 df             	and    eax,0xffffffdf
c0019efb:	88 c2                	mov    dl,al
c0019efd:	88 c8                	mov    al,cl
c0019eff:	09 d0                	or     eax,edx
c0019f01:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	6a 01                	push   0x1
c0019f0b:	e8 34 40 ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	0f b6 c0             	movzx  eax,al
c0019f16:	85 c0                	test   eax,eax
c0019f18:	75 17                	jne    c0019f31 <HalDetectFeatures()+0x143>
c0019f1a:	83 ec 0c             	sub    esp,0xc
c0019f1d:	68 00 04 00 00       	push   0x400
c0019f22:	e8 1d 40 ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019f27:	83 c4 10             	add    esp,0x10
c0019f2a:	0f b6 c0             	movzx  eax,al
c0019f2d:	85 c0                	test   eax,eax
c0019f2f:	74 04                	je     c0019f35 <HalDetectFeatures()+0x147>
c0019f31:	b0 01                	mov    al,0x1
c0019f33:	eb 02                	jmp    c0019f37 <HalDetectFeatures()+0x149>
c0019f35:	b0 00                	mov    al,0x0
c0019f37:	0f b6 c0             	movzx  eax,al
c0019f3a:	85 c0                	test   eax,eax
c0019f3c:	74 0f                	je     c0019f4d <HalDetectFeatures()+0x15f>
c0019f3e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019f43:	83 e0 fe             	and    eax,0xfffffffe
c0019f46:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019f4b:	eb 28                	jmp    c0019f75 <HalDetectFeatures()+0x187>
c0019f4d:	83 ec 0c             	sub    esp,0xc
c0019f50:	68 00 02 00 00       	push   0x200
c0019f55:	e8 dd fd ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	89 c1                	mov    ecx,eax
c0019f5f:	83 e1 01             	and    ecx,0x1
c0019f62:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019f67:	83 e0 fe             	and    eax,0xfffffffe
c0019f6a:	88 c2                	mov    dl,al
c0019f6c:	88 c8                	mov    al,cl
c0019f6e:	09 d0                	or     eax,edx
c0019f70:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019f75:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019f7a:	83 e0 01             	and    eax,0x1
c0019f7d:	0f b6 c0             	movzx  eax,al
c0019f80:	85 c0                	test   eax,eax
c0019f82:	74 1c                	je     c0019fa0 <HalDetectFeatures()+0x1b2>
c0019f84:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019f89:	83 e0 08             	and    eax,0x8
c0019f8c:	0f b6 c0             	movzx  eax,al
c0019f8f:	85 c0                	test   eax,eax
c0019f91:	75 0d                	jne    c0019fa0 <HalDetectFeatures()+0x1b2>
c0019f93:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019f98:	83 e0 fe             	and    eax,0xfffffffe
c0019f9b:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c0019fa0:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019fa8:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019fb0:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019fb8:	85 c0                	test   eax,eax
c0019fba:	0f 84 ab 00 00 00    	je     c001a06b <HalDetectFeatures()+0x27d>
c0019fc0:	83 ec 0c             	sub    esp,0xc
c0019fc3:	6a 01                	push   0x1
c0019fc5:	e8 9a fd ff ff       	call   c0019d64 <cpuidCheckECX(unsigned int)>
c0019fca:	83 c4 10             	add    esp,0x10
c0019fcd:	83 e0 01             	and    eax,0x1
c0019fd0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019fd3:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c0019fd8:	83 e0 fd             	and    eax,0xfffffffd
c0019fdb:	88 c2                	mov    dl,al
c0019fdd:	88 c8                	mov    al,cl
c0019fdf:	09 d0                	or     eax,edx
c0019fe1:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c0019fe6:	83 ec 0c             	sub    esp,0xc
c0019fe9:	68 00 02 00 00       	push   0x200
c0019fee:	e8 71 fd ff ff       	call   c0019d64 <cpuidCheckECX(unsigned int)>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	83 e0 01             	and    eax,0x1
c0019ff9:	89 c1                	mov    ecx,eax
c0019ffb:	c1 e1 04             	shl    ecx,0x4
c0019ffe:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a003:	83 e0 ef             	and    eax,0xffffffef
c001a006:	88 c2                	mov    dl,al
c001a008:	88 c8                	mov    al,cl
c001a00a:	09 d0                	or     eax,edx
c001a00c:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a011:	83 ec 0c             	sub    esp,0xc
c001a014:	68 00 00 08 00       	push   0x80000
c001a019:	e8 46 fd ff ff       	call   c0019d64 <cpuidCheckECX(unsigned int)>
c001a01e:	83 c4 10             	add    esp,0x10
c001a021:	83 e0 01             	and    eax,0x1
c001a024:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a02b:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a030:	83 e0 fb             	and    eax,0xfffffffb
c001a033:	88 c2                	mov    dl,al
c001a035:	88 c8                	mov    al,cl
c001a037:	09 d0                	or     eax,edx
c001a039:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a03e:	83 ec 0c             	sub    esp,0xc
c001a041:	68 00 00 10 00       	push   0x100000
c001a046:	e8 19 fd ff ff       	call   c0019d64 <cpuidCheckECX(unsigned int)>
c001a04b:	83 c4 10             	add    esp,0x10
c001a04e:	83 e0 01             	and    eax,0x1
c001a051:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a058:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a05d:	83 e0 f7             	and    eax,0xfffffff7
c001a060:	88 c2                	mov    dl,al
c001a062:	88 c8                	mov    al,cl
c001a064:	09 d0                	or     eax,edx
c001a066:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a06b:	83 ec 0c             	sub    esp,0xc
c001a06e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a072:	50                   	push   eax
c001a073:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a077:	50                   	push   eax
c001a078:	8d 44 24 34          	lea    eax,[esp+0x34]
c001a07c:	50                   	push   eax
c001a07d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a081:	50                   	push   eax
c001a082:	68 00 00 00 80       	push   0x80000000
c001a087:	e8 0d fc ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a08c:	83 c4 20             	add    esp,0x20
c001a08f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a093:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a098:	76 4b                	jbe    c001a0e5 <HalDetectFeatures()+0x2f7>
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0a1:	50                   	push   eax
c001a0a2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0a6:	50                   	push   eax
c001a0a7:	8d 44 24 34          	lea    eax,[esp+0x34]
c001a0ab:	50                   	push   eax
c001a0ac:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a0b0:	50                   	push   eax
c001a0b1:	68 01 00 00 80       	push   0x80000001
c001a0b6:	e8 de fb ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a0bb:	83 c4 20             	add    esp,0x20
c001a0be:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a0c3:	83 e0 bf             	and    eax,0xffffffbf
c001a0c6:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a0cb:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a0d0:	83 e0 fd             	and    eax,0xfffffffd
c001a0d3:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a0d8:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a0dd:	83 e0 fe             	and    eax,0xfffffffe
c001a0e0:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a0e5:	83 ec 0c             	sub    esp,0xc
c001a0e8:	68 00 04 00 00       	push   0x400
c001a0ed:	e8 52 3e ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a0f2:	83 c4 10             	add    esp,0x10
c001a0f5:	0f b6 c0             	movzx  eax,al
c001a0f8:	85 c0                	test   eax,eax
c001a0fa:	74 0d                	je     c001a109 <HalDetectFeatures()+0x31b>
c001a0fc:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a101:	83 e0 fb             	and    eax,0xfffffffb
c001a104:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a109:	c6 05 48 74 03 c0 01 	mov    BYTE PTR ds:0xc0037448,0x1
c001a110:	83 ec 04             	sub    esp,0x4
c001a113:	6a 0d                	push   0xd
c001a115:	6a 00                	push   0x0
c001a117:	68 30 74 03 c0       	push   0xc0037430
c001a11c:	e8 cf 63 fe ff       	call   c00004f0 <memset>
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a129:	83 e0 02             	and    eax,0x2
c001a12c:	0f b6 c0             	movzx  eax,al
c001a12f:	85 c0                	test   eax,eax
c001a131:	0f 84 16 08 00 00    	je     c001a94d <HalDetectFeatures()+0xb5f>
c001a137:	83 ec 0c             	sub    esp,0xc
c001a13a:	6a 10                	push   0x10
c001a13c:	e8 f6 fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a141:	83 c4 10             	add    esp,0x10
c001a144:	83 e0 01             	and    eax,0x1
c001a147:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a14e:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a153:	83 e0 f7             	and    eax,0xfffffff7
c001a156:	88 c2                	mov    dl,al
c001a158:	88 c8                	mov    al,cl
c001a15a:	09 d0                	or     eax,edx
c001a15c:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a161:	83 ec 0c             	sub    esp,0xc
c001a164:	6a 40                	push   0x40
c001a166:	e8 cc fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	83 e0 01             	and    eax,0x1
c001a171:	89 c1                	mov    ecx,eax
c001a173:	c1 e1 04             	shl    ecx,0x4
c001a176:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a17b:	83 e0 ef             	and    eax,0xffffffef
c001a17e:	88 c2                	mov    dl,al
c001a180:	88 c8                	mov    al,cl
c001a182:	09 d0                	or     eax,edx
c001a184:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	6a 08                	push   0x8
c001a18e:	e8 a4 fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	83 e0 01             	and    eax,0x1
c001a199:	89 c1                	mov    ecx,eax
c001a19b:	c1 e1 05             	shl    ecx,0x5
c001a19e:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a1a3:	83 e0 df             	and    eax,0xffffffdf
c001a1a6:	88 c2                	mov    dl,al
c001a1a8:	88 c8                	mov    al,cl
c001a1aa:	09 d0                	or     eax,edx
c001a1ac:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a1b1:	83 ec 0c             	sub    esp,0xc
c001a1b4:	68 00 20 00 00       	push   0x2000
c001a1b9:	e8 79 fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a1be:	83 c4 10             	add    esp,0x10
c001a1c1:	83 e0 01             	and    eax,0x1
c001a1c4:	89 c1                	mov    ecx,eax
c001a1c6:	c1 e1 06             	shl    ecx,0x6
c001a1c9:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a1ce:	83 e0 bf             	and    eax,0xffffffbf
c001a1d1:	88 c2                	mov    dl,al
c001a1d3:	88 c8                	mov    al,cl
c001a1d5:	09 d0                	or     eax,edx
c001a1d7:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	68 00 00 01 00       	push   0x10000
c001a1e4:	e8 4e fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	89 c1                	mov    ecx,eax
c001a1ee:	c1 e1 07             	shl    ecx,0x7
c001a1f1:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a1f6:	83 e0 7f             	and    eax,0x7f
c001a1f9:	88 c2                	mov    dl,al
c001a1fb:	88 c8                	mov    al,cl
c001a1fd:	09 d0                	or     eax,edx
c001a1ff:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a204:	83 ec 0c             	sub    esp,0xc
c001a207:	6a 01                	push   0x1
c001a209:	e8 29 fb ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a20e:	83 c4 10             	add    esp,0x10
c001a211:	83 e0 01             	and    eax,0x1
c001a214:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a21b:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a220:	83 e0 f7             	and    eax,0xfffffff7
c001a223:	88 c2                	mov    dl,al
c001a225:	88 c8                	mov    al,cl
c001a227:	09 d0                	or     eax,edx
c001a229:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a22e:	83 ec 0c             	sub    esp,0xc
c001a231:	68 00 08 00 00       	push   0x800
c001a236:	e8 fc fa ff ff       	call   c0019d37 <cpuidCheckEDX(unsigned int)>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	89 c1                	mov    ecx,eax
c001a240:	83 e1 01             	and    ecx,0x1
c001a243:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a248:	83 e0 fe             	and    eax,0xfffffffe
c001a24b:	88 c2                	mov    dl,al
c001a24d:	88 c8                	mov    al,cl
c001a24f:	09 d0                	or     eax,edx
c001a251:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a256:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a25b:	83 e0 40             	and    eax,0x40
c001a25e:	0f b6 c0             	movzx  eax,al
c001a261:	85 c0                	test   eax,eax
c001a263:	74 0a                	je     c001a26f <HalDetectFeatures()+0x481>
c001a265:	c7 05 28 74 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0037428,0x100
c001a26f:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a274:	83 e0 80             	and    eax,0xffffff80
c001a277:	0f b6 c0             	movzx  eax,al
c001a27a:	85 c0                	test   eax,eax
c001a27c:	74 0a                	je     c001a288 <HalDetectFeatures()+0x49a>
c001a27e:	c7 05 24 74 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0037424,0x80
c001a288:	83 ec 0c             	sub    esp,0xc
c001a28b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a28f:	50                   	push   eax
c001a290:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a294:	50                   	push   eax
c001a295:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a299:	50                   	push   eax
c001a29a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a29e:	50                   	push   eax
c001a29f:	6a 00                	push   0x0
c001a2a1:	e8 f3 f9 ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a2a6:	83 c4 20             	add    esp,0x20
c001a2a9:	c7 44 24 48 30 74 03 c0 	mov    DWORD PTR [esp+0x48],0xc0037430
c001a2b1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a2b9:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001a2c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a2c5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001a2c9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001a2cd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001a2d1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a2d5:	89 c6                	mov    esi,eax
c001a2d7:	89 d7                	mov    edi,edx
c001a2d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2db:	89 c8                	mov    eax,ecx
c001a2dd:	89 fa                	mov    edx,edi
c001a2df:	89 f3                	mov    ebx,esi
c001a2e1:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001a2e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a2ed:	b8 34 74 03 c0       	mov    eax,0xc0037434
c001a2f2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a2f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a2fe:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001a306:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a30a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a30e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a312:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a316:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a31a:	89 c6                	mov    esi,eax
c001a31c:	89 d7                	mov    edi,edx
c001a31e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a320:	89 c8                	mov    eax,ecx
c001a322:	89 fa                	mov    edx,edi
c001a324:	89 f3                	mov    ebx,esi
c001a326:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001a32a:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001a32e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a332:	b8 38 74 03 c0       	mov    eax,0xc0037438
c001a337:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001a33e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a342:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001a346:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001a34e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a355:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001a359:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001a35d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a364:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001a368:	89 c6                	mov    esi,eax
c001a36a:	89 d7                	mov    edi,edx
c001a36c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a36e:	89 c8                	mov    eax,ecx
c001a370:	89 fa                	mov    edx,edi
c001a372:	89 f3                	mov    ebx,esi
c001a374:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001a378:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001a37c:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001a380:	83 ec 08             	sub    esp,0x8
c001a383:	68 e9 d4 02 c0       	push   0xc002d4e9
c001a388:	68 30 74 03 c0       	push   0xc0037430
c001a38d:	e8 ee 63 fe ff       	call   c0000780 <strcmp>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	85 c0                	test   eax,eax
c001a397:	74 19                	je     c001a3b2 <HalDetectFeatures()+0x5c4>
c001a399:	83 ec 08             	sub    esp,0x8
c001a39c:	68 f6 d4 02 c0       	push   0xc002d4f6
c001a3a1:	68 30 74 03 c0       	push   0xc0037430
c001a3a6:	e8 d5 63 fe ff       	call   c0000780 <strcmp>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	85 c0                	test   eax,eax
c001a3b0:	75 04                	jne    c001a3b6 <HalDetectFeatures()+0x5c8>
c001a3b2:	b0 01                	mov    al,0x1
c001a3b4:	eb 02                	jmp    c001a3b8 <HalDetectFeatures()+0x5ca>
c001a3b6:	b0 00                	mov    al,0x0
c001a3b8:	0f b6 c0             	movzx  eax,al
c001a3bb:	85 c0                	test   eax,eax
c001a3bd:	74 0f                	je     c001a3ce <HalDetectFeatures()+0x5e0>
c001a3bf:	c7 05 44 74 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x2
c001a3c9:	e9 0d 03 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a3ce:	83 ec 08             	sub    esp,0x8
c001a3d1:	68 03 d5 02 c0       	push   0xc002d503
c001a3d6:	68 30 74 03 c0       	push   0xc0037430
c001a3db:	e8 a0 63 fe ff       	call   c0000780 <strcmp>
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	85 c0                	test   eax,eax
c001a3e5:	74 19                	je     c001a400 <HalDetectFeatures()+0x612>
c001a3e7:	83 ec 08             	sub    esp,0x8
c001a3ea:	68 10 d5 02 c0       	push   0xc002d510
c001a3ef:	68 30 74 03 c0       	push   0xc0037430
c001a3f4:	e8 87 63 fe ff       	call   c0000780 <strcmp>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	85 c0                	test   eax,eax
c001a3fe:	75 04                	jne    c001a404 <HalDetectFeatures()+0x616>
c001a400:	b0 01                	mov    al,0x1
c001a402:	eb 02                	jmp    c001a406 <HalDetectFeatures()+0x618>
c001a404:	b0 00                	mov    al,0x0
c001a406:	0f b6 c0             	movzx  eax,al
c001a409:	85 c0                	test   eax,eax
c001a40b:	74 0f                	je     c001a41c <HalDetectFeatures()+0x62e>
c001a40d:	c7 05 44 74 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x4
c001a417:	e9 bf 02 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a41c:	83 ec 08             	sub    esp,0x8
c001a41f:	68 1d d5 02 c0       	push   0xc002d51d
c001a424:	68 30 74 03 c0       	push   0xc0037430
c001a429:	e8 52 63 fe ff       	call   c0000780 <strcmp>
c001a42e:	83 c4 10             	add    esp,0x10
c001a431:	85 c0                	test   eax,eax
c001a433:	74 19                	je     c001a44e <HalDetectFeatures()+0x660>
c001a435:	83 ec 08             	sub    esp,0x8
c001a438:	68 2a d5 02 c0       	push   0xc002d52a
c001a43d:	68 30 74 03 c0       	push   0xc0037430
c001a442:	e8 39 63 fe ff       	call   c0000780 <strcmp>
c001a447:	83 c4 10             	add    esp,0x10
c001a44a:	85 c0                	test   eax,eax
c001a44c:	75 04                	jne    c001a452 <HalDetectFeatures()+0x664>
c001a44e:	b0 01                	mov    al,0x1
c001a450:	eb 02                	jmp    c001a454 <HalDetectFeatures()+0x666>
c001a452:	b0 00                	mov    al,0x0
c001a454:	0f b6 c0             	movzx  eax,al
c001a457:	85 c0                	test   eax,eax
c001a459:	74 0f                	je     c001a46a <HalDetectFeatures()+0x67c>
c001a45b:	c7 05 44 74 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x5
c001a465:	e9 71 02 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a46a:	83 ec 08             	sub    esp,0x8
c001a46d:	68 37 d5 02 c0       	push   0xc002d537
c001a472:	68 30 74 03 c0       	push   0xc0037430
c001a477:	e8 04 63 fe ff       	call   c0000780 <strcmp>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	85 c0                	test   eax,eax
c001a481:	0f 94 c0             	sete   al
c001a484:	0f b6 c0             	movzx  eax,al
c001a487:	85 c0                	test   eax,eax
c001a489:	74 0f                	je     c001a49a <HalDetectFeatures()+0x6ac>
c001a48b:	c7 05 44 74 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x1
c001a495:	e9 41 02 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a49a:	83 ec 08             	sub    esp,0x8
c001a49d:	68 44 d5 02 c0       	push   0xc002d544
c001a4a2:	68 30 74 03 c0       	push   0xc0037430
c001a4a7:	e8 d4 62 fe ff       	call   c0000780 <strcmp>
c001a4ac:	83 c4 10             	add    esp,0x10
c001a4af:	85 c0                	test   eax,eax
c001a4b1:	0f 94 c0             	sete   al
c001a4b4:	0f b6 c0             	movzx  eax,al
c001a4b7:	85 c0                	test   eax,eax
c001a4b9:	74 0f                	je     c001a4ca <HalDetectFeatures()+0x6dc>
c001a4bb:	c7 05 44 74 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x3
c001a4c5:	e9 11 02 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a4ca:	83 ec 08             	sub    esp,0x8
c001a4cd:	68 03 d5 02 c0       	push   0xc002d503
c001a4d2:	68 30 74 03 c0       	push   0xc0037430
c001a4d7:	e8 a4 62 fe ff       	call   c0000780 <strcmp>
c001a4dc:	83 c4 10             	add    esp,0x10
c001a4df:	85 c0                	test   eax,eax
c001a4e1:	0f 94 c0             	sete   al
c001a4e4:	0f b6 c0             	movzx  eax,al
c001a4e7:	85 c0                	test   eax,eax
c001a4e9:	74 0f                	je     c001a4fa <HalDetectFeatures()+0x70c>
c001a4eb:	c7 05 44 74 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x6
c001a4f5:	e9 e1 01 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a4fa:	83 ec 08             	sub    esp,0x8
c001a4fd:	68 51 d5 02 c0       	push   0xc002d551
c001a502:	68 30 74 03 c0       	push   0xc0037430
c001a507:	e8 74 62 fe ff       	call   c0000780 <strcmp>
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	85 c0                	test   eax,eax
c001a511:	0f 94 c0             	sete   al
c001a514:	0f b6 c0             	movzx  eax,al
c001a517:	85 c0                	test   eax,eax
c001a519:	74 0f                	je     c001a52a <HalDetectFeatures()+0x73c>
c001a51b:	c7 05 44 74 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x7
c001a525:	e9 b1 01 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a52a:	83 ec 08             	sub    esp,0x8
c001a52d:	68 5e d5 02 c0       	push   0xc002d55e
c001a532:	68 30 74 03 c0       	push   0xc0037430
c001a537:	e8 44 62 fe ff       	call   c0000780 <strcmp>
c001a53c:	83 c4 10             	add    esp,0x10
c001a53f:	85 c0                	test   eax,eax
c001a541:	0f 94 c0             	sete   al
c001a544:	0f b6 c0             	movzx  eax,al
c001a547:	85 c0                	test   eax,eax
c001a549:	74 0f                	je     c001a55a <HalDetectFeatures()+0x76c>
c001a54b:	c7 05 44 74 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x8
c001a555:	e9 81 01 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a55a:	83 ec 08             	sub    esp,0x8
c001a55d:	68 6b d5 02 c0       	push   0xc002d56b
c001a562:	68 30 74 03 c0       	push   0xc0037430
c001a567:	e8 14 62 fe ff       	call   c0000780 <strcmp>
c001a56c:	83 c4 10             	add    esp,0x10
c001a56f:	85 c0                	test   eax,eax
c001a571:	0f 94 c0             	sete   al
c001a574:	0f b6 c0             	movzx  eax,al
c001a577:	85 c0                	test   eax,eax
c001a579:	74 0f                	je     c001a58a <HalDetectFeatures()+0x79c>
c001a57b:	c7 05 44 74 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x9
c001a585:	e9 51 01 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a58a:	83 ec 08             	sub    esp,0x8
c001a58d:	68 78 d5 02 c0       	push   0xc002d578
c001a592:	68 30 74 03 c0       	push   0xc0037430
c001a597:	e8 e4 61 fe ff       	call   c0000780 <strcmp>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	85 c0                	test   eax,eax
c001a5a1:	0f 94 c0             	sete   al
c001a5a4:	0f b6 c0             	movzx  eax,al
c001a5a7:	85 c0                	test   eax,eax
c001a5a9:	74 0f                	je     c001a5ba <HalDetectFeatures()+0x7cc>
c001a5ab:	c7 05 44 74 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xa
c001a5b5:	e9 21 01 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a5ba:	83 ec 08             	sub    esp,0x8
c001a5bd:	68 85 d5 02 c0       	push   0xc002d585
c001a5c2:	68 30 74 03 c0       	push   0xc0037430
c001a5c7:	e8 b4 61 fe ff       	call   c0000780 <strcmp>
c001a5cc:	83 c4 10             	add    esp,0x10
c001a5cf:	85 c0                	test   eax,eax
c001a5d1:	0f 94 c0             	sete   al
c001a5d4:	0f b6 c0             	movzx  eax,al
c001a5d7:	85 c0                	test   eax,eax
c001a5d9:	74 0f                	je     c001a5ea <HalDetectFeatures()+0x7fc>
c001a5db:	c7 05 44 74 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xb
c001a5e5:	e9 f1 00 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a5ea:	83 ec 08             	sub    esp,0x8
c001a5ed:	68 92 d5 02 c0       	push   0xc002d592
c001a5f2:	68 30 74 03 c0       	push   0xc0037430
c001a5f7:	e8 84 61 fe ff       	call   c0000780 <strcmp>
c001a5fc:	83 c4 10             	add    esp,0x10
c001a5ff:	85 c0                	test   eax,eax
c001a601:	0f 94 c0             	sete   al
c001a604:	0f b6 c0             	movzx  eax,al
c001a607:	85 c0                	test   eax,eax
c001a609:	74 0f                	je     c001a61a <HalDetectFeatures()+0x82c>
c001a60b:	c7 05 44 74 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xc
c001a615:	e9 c1 00 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a61a:	83 ec 08             	sub    esp,0x8
c001a61d:	68 9f d5 02 c0       	push   0xc002d59f
c001a622:	68 30 74 03 c0       	push   0xc0037430
c001a627:	e8 54 61 fe ff       	call   c0000780 <strcmp>
c001a62c:	83 c4 10             	add    esp,0x10
c001a62f:	85 c0                	test   eax,eax
c001a631:	0f 94 c0             	sete   al
c001a634:	0f b6 c0             	movzx  eax,al
c001a637:	85 c0                	test   eax,eax
c001a639:	74 0f                	je     c001a64a <HalDetectFeatures()+0x85c>
c001a63b:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a645:	e9 91 00 00 00       	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a64a:	83 ec 08             	sub    esp,0x8
c001a64d:	68 ac d5 02 c0       	push   0xc002d5ac
c001a652:	68 30 74 03 c0       	push   0xc0037430
c001a657:	e8 24 61 fe ff       	call   c0000780 <strcmp>
c001a65c:	83 c4 10             	add    esp,0x10
c001a65f:	85 c0                	test   eax,eax
c001a661:	0f 94 c0             	sete   al
c001a664:	0f b6 c0             	movzx  eax,al
c001a667:	85 c0                	test   eax,eax
c001a669:	74 0c                	je     c001a677 <HalDetectFeatures()+0x889>
c001a66b:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a675:	eb 64                	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a677:	83 ec 08             	sub    esp,0x8
c001a67a:	68 b9 d5 02 c0       	push   0xc002d5b9
c001a67f:	68 30 74 03 c0       	push   0xc0037430
c001a684:	e8 f7 60 fe ff       	call   c0000780 <strcmp>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	85 c0                	test   eax,eax
c001a68e:	0f 94 c0             	sete   al
c001a691:	0f b6 c0             	movzx  eax,al
c001a694:	85 c0                	test   eax,eax
c001a696:	74 0c                	je     c001a6a4 <HalDetectFeatures()+0x8b6>
c001a698:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a6a2:	eb 37                	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a6a4:	83 ec 08             	sub    esp,0x8
c001a6a7:	68 c6 d5 02 c0       	push   0xc002d5c6
c001a6ac:	68 30 74 03 c0       	push   0xc0037430
c001a6b1:	e8 ca 60 fe ff       	call   c0000780 <strcmp>
c001a6b6:	83 c4 10             	add    esp,0x10
c001a6b9:	85 c0                	test   eax,eax
c001a6bb:	0f 94 c0             	sete   al
c001a6be:	0f b6 c0             	movzx  eax,al
c001a6c1:	85 c0                	test   eax,eax
c001a6c3:	74 0c                	je     c001a6d1 <HalDetectFeatures()+0x8e3>
c001a6c5:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a6cf:	eb 0a                	jmp    c001a6db <HalDetectFeatures()+0x8ed>
c001a6d1:	c7 05 44 74 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x0
c001a6db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6df:	83 f8 06             	cmp    eax,0x6
c001a6e2:	0f 86 cc 00 00 00    	jbe    c001a7b4 <HalDetectFeatures()+0x9c6>
c001a6e8:	83 ec 0c             	sub    esp,0xc
c001a6eb:	68 80 00 00 00       	push   0x80
c001a6f0:	e8 9d f6 ff ff       	call   c0019d92 <cpuidCheckExtendedEBX(unsigned int)>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	89 c1                	mov    ecx,eax
c001a6fa:	83 e1 01             	and    ecx,0x1
c001a6fd:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a702:	83 e0 fe             	and    eax,0xfffffffe
c001a705:	88 c2                	mov    dl,al
c001a707:	88 c8                	mov    al,cl
c001a709:	09 d0                	or     eax,edx
c001a70b:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	68 00 00 10 00       	push   0x100000
c001a718:	e8 75 f6 ff ff       	call   c0019d92 <cpuidCheckExtendedEBX(unsigned int)>
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	83 e0 01             	and    eax,0x1
c001a723:	89 c1                	mov    ecx,eax
c001a725:	c1 e1 06             	shl    ecx,0x6
c001a728:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a72d:	83 e0 bf             	and    eax,0xffffffbf
c001a730:	88 c2                	mov    dl,al
c001a732:	88 c8                	mov    al,cl
c001a734:	09 d0                	or     eax,edx
c001a736:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a73b:	83 ec 0c             	sub    esp,0xc
c001a73e:	68 00 00 04 00       	push   0x40000
c001a743:	e8 4a f6 ff ff       	call   c0019d92 <cpuidCheckExtendedEBX(unsigned int)>
c001a748:	83 c4 10             	add    esp,0x10
c001a74b:	83 e0 01             	and    eax,0x1
c001a74e:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a751:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a756:	83 e0 fd             	and    eax,0xfffffffd
c001a759:	88 c2                	mov    dl,al
c001a75b:	88 c8                	mov    al,cl
c001a75d:	09 d0                	or     eax,edx
c001a75f:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a764:	83 ec 0c             	sub    esp,0xc
c001a767:	6a 04                	push   0x4
c001a769:	e8 52 f6 ff ff       	call   c0019dc0 <cpuidCheckExtendedECX(unsigned int)>
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	83 e0 01             	and    eax,0x1
c001a774:	89 c1                	mov    ecx,eax
c001a776:	c1 e1 05             	shl    ecx,0x5
c001a779:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a77e:	83 e0 df             	and    eax,0xffffffdf
c001a781:	88 c2                	mov    dl,al
c001a783:	88 c8                	mov    al,cl
c001a785:	09 d0                	or     eax,edx
c001a787:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a78c:	83 ec 0c             	sub    esp,0xc
c001a78f:	6a 20                	push   0x20
c001a791:	e8 2a f6 ff ff       	call   c0019dc0 <cpuidCheckExtendedECX(unsigned int)>
c001a796:	83 c4 10             	add    esp,0x10
c001a799:	83 e0 01             	and    eax,0x1
c001a79c:	89 c1                	mov    ecx,eax
c001a79e:	c1 e1 04             	shl    ecx,0x4
c001a7a1:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a7a6:	83 e0 ef             	and    eax,0xffffffef
c001a7a9:	88 c2                	mov    dl,al
c001a7ab:	88 c8                	mov    al,cl
c001a7ad:	09 d0                	or     eax,edx
c001a7af:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a7b4:	83 ec 0c             	sub    esp,0xc
c001a7b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7bb:	50                   	push   eax
c001a7bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7c0:	50                   	push   eax
c001a7c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7c5:	50                   	push   eax
c001a7c6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a7ca:	50                   	push   eax
c001a7cb:	6a 01                	push   0x1
c001a7cd:	e8 c7 f4 ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a7d2:	83 c4 20             	add    esp,0x20
c001a7d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7d9:	83 e0 0f             	and    eax,0xf
c001a7dc:	a2 40 74 03 c0       	mov    ds:0xc0037440,al
c001a7e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7e5:	c1 e8 04             	shr    eax,0x4
c001a7e8:	83 e0 0f             	and    eax,0xf
c001a7eb:	a2 3e 74 03 c0       	mov    ds:0xc003743e,al
c001a7f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7f4:	c1 e8 08             	shr    eax,0x8
c001a7f7:	83 e0 0f             	and    eax,0xf
c001a7fa:	a2 3d 74 03 c0       	mov    ds:0xc003743d,al
c001a7ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a803:	c1 e8 0c             	shr    eax,0xc
c001a806:	83 e0 03             	and    eax,0x3
c001a809:	a2 3f 74 03 c0       	mov    ds:0xc003743f,al
c001a80e:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001a813:	0f b6 c0             	movzx  eax,al
c001a816:	83 f8 06             	cmp    eax,0x6
c001a819:	74 0d                	je     c001a828 <HalDetectFeatures()+0xa3a>
c001a81b:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001a820:	0f b6 c0             	movzx  eax,al
c001a823:	83 f8 0f             	cmp    eax,0xf
c001a826:	75 18                	jne    c001a840 <HalDetectFeatures()+0xa52>
c001a828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a82c:	c1 e8 10             	shr    eax,0x10
c001a82f:	c1 e0 04             	shl    eax,0x4
c001a832:	88 c2                	mov    dl,al
c001a834:	a0 3e 74 03 c0       	mov    al,ds:0xc003743e
c001a839:	09 d0                	or     eax,edx
c001a83b:	a2 3e 74 03 c0       	mov    ds:0xc003743e,al
c001a840:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001a845:	0f b6 c0             	movzx  eax,al
c001a848:	83 f8 0f             	cmp    eax,0xf
c001a84b:	75 15                	jne    c001a862 <HalDetectFeatures()+0xa74>
c001a84d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a851:	c1 e8 14             	shr    eax,0x14
c001a854:	88 c2                	mov    dl,al
c001a856:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001a85b:	01 d0                	add    eax,edx
c001a85d:	a2 3d 74 03 c0       	mov    ds:0xc003743d,al
c001a862:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a86a:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a872:	85 c0                	test   eax,eax
c001a874:	74 2d                	je     c001a8a3 <HalDetectFeatures()+0xab5>
c001a876:	83 ec 0c             	sub    esp,0xc
c001a879:	68 00 00 00 40       	push   0x40000000
c001a87e:	e8 e1 f4 ff ff       	call   c0019d64 <cpuidCheckECX(unsigned int)>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	83 e0 01             	and    eax,0x1
c001a889:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a890:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a895:	83 e0 fb             	and    eax,0xfffffffb
c001a898:	88 c2                	mov    dl,al
c001a89a:	88 c8                	mov    al,cl
c001a89c:	09 d0                	or     eax,edx
c001a89e:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a8a3:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a8a8:	83 c8 04             	or     eax,0x4
c001a8ab:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a8b0:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a8b5:	83 c8 08             	or     eax,0x8
c001a8b8:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a8bd:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a8c2:	83 c8 10             	or     eax,0x10
c001a8c5:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a8ca:	83 ec 0c             	sub    esp,0xc
c001a8cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8d1:	50                   	push   eax
c001a8d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8d6:	50                   	push   eax
c001a8d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8db:	50                   	push   eax
c001a8dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a8e0:	50                   	push   eax
c001a8e1:	68 00 00 00 80       	push   0x80000000
c001a8e6:	e8 ae f3 ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a8eb:	83 c4 20             	add    esp,0x20
c001a8ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8f2:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a8f7:	0f 86 96 01 00 00    	jbe    c001aa93 <HalDetectFeatures()+0xca5>
c001a8fd:	83 ec 0c             	sub    esp,0xc
c001a900:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a904:	50                   	push   eax
c001a905:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a909:	50                   	push   eax
c001a90a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a90e:	50                   	push   eax
c001a90f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a913:	50                   	push   eax
c001a914:	68 01 00 00 80       	push   0x80000001
c001a919:	e8 7b f3 ff ff       	call   c0019c99 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a91e:	83 c4 20             	add    esp,0x20
c001a921:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a926:	83 e0 7f             	and    eax,0x7f
c001a929:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a92e:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a933:	83 e0 fb             	and    eax,0xfffffffb
c001a936:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a93b:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a940:	83 e0 fd             	and    eax,0xfffffffd
c001a943:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a948:	e9 46 01 00 00       	jmp    c001aa93 <HalDetectFeatures()+0xca5>
c001a94d:	83 ec 08             	sub    esp,0x8
c001a950:	68 37 d5 02 c0       	push   0xc002d537
c001a955:	68 30 74 03 c0       	push   0xc0037430
c001a95a:	e8 f1 5c fe ff       	call   c0000650 <strcpy>
c001a95f:	83 c4 10             	add    esp,0x10
c001a962:	c7 05 44 74 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x1
c001a96c:	e8 52 58 fe ff       	call   c00001c3 <is486>
c001a971:	85 c0                	test   eax,eax
c001a973:	0f 95 c0             	setne  al
c001a976:	0f b6 c0             	movzx  eax,al
c001a979:	85 c0                	test   eax,eax
c001a97b:	0f 84 8d 00 00 00    	je     c001aa0e <HalDetectFeatures()+0xc20>
c001a981:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a986:	83 c8 04             	or     eax,0x4
c001a989:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a98e:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a993:	83 c8 08             	or     eax,0x8
c001a996:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a99b:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a9a0:	83 c8 10             	or     eax,0x10
c001a9a3:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a9a8:	0f 20 c0             	mov    eax,cr0
c001a9ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a9af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a9b3:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a9ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9c1:	83 e0 04             	and    eax,0x4
c001a9c4:	74 1e                	je     c001a9e4 <HalDetectFeatures()+0xbf6>
c001a9c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9cd:	83 e0 10             	and    eax,0x10
c001a9d0:	75 12                	jne    c001a9e4 <HalDetectFeatures()+0xbf6>
c001a9d2:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a9d7:	83 e0 f7             	and    eax,0xfffffff7
c001a9da:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a9df:	e9 af 00 00 00       	jmp    c001aa93 <HalDetectFeatures()+0xca5>
c001a9e4:	e8 b5 57 fe ff       	call   c000019e <hasLegacyFPU>
c001a9e9:	83 e0 01             	and    eax,0x1
c001a9ec:	83 e0 01             	and    eax,0x1
c001a9ef:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a9f6:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a9fb:	83 e0 f7             	and    eax,0xfffffff7
c001a9fe:	88 c2                	mov    dl,al
c001aa00:	88 c8                	mov    al,cl
c001aa02:	09 d0                	or     eax,edx
c001aa04:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001aa09:	e9 85 00 00 00       	jmp    c001aa93 <HalDetectFeatures()+0xca5>
c001aa0e:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aa13:	83 e0 fb             	and    eax,0xfffffffb
c001aa16:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aa1b:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aa20:	83 e0 f7             	and    eax,0xfffffff7
c001aa23:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aa28:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aa2d:	83 e0 ef             	and    eax,0xffffffef
c001aa30:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aa35:	0f 20 c0             	mov    eax,cr0
c001aa38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa40:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001aa47:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa4e:	83 e0 04             	and    eax,0x4
c001aa51:	74 1b                	je     c001aa6e <HalDetectFeatures()+0xc80>
c001aa53:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa5a:	83 e0 10             	and    eax,0x10
c001aa5d:	75 0f                	jne    c001aa6e <HalDetectFeatures()+0xc80>
c001aa5f:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aa64:	83 e0 f7             	and    eax,0xfffffff7
c001aa67:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001aa6c:	eb 25                	jmp    c001aa93 <HalDetectFeatures()+0xca5>
c001aa6e:	e8 2b 57 fe ff       	call   c000019e <hasLegacyFPU>
c001aa73:	83 e0 01             	and    eax,0x1
c001aa76:	83 e0 01             	and    eax,0x1
c001aa79:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001aa80:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aa85:	83 e0 f7             	and    eax,0xfffffff7
c001aa88:	88 c2                	mov    dl,al
c001aa8a:	88 c8                	mov    al,cl
c001aa8c:	09 d0                	or     eax,edx
c001aa8e:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001aa93:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aa98:	83 e0 08             	and    eax,0x8
c001aa9b:	0f b6 c0             	movzx  eax,al
c001aa9e:	85 c0                	test   eax,eax
c001aaa0:	75 25                	jne    c001aac7 <HalDetectFeatures()+0xcd9>
c001aaa2:	e8 f7 56 fe ff       	call   c000019e <hasLegacyFPU>
c001aaa7:	83 e0 01             	and    eax,0x1
c001aaaa:	83 e0 01             	and    eax,0x1
c001aaad:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001aab4:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aab9:	83 e0 f7             	and    eax,0xfffffff7
c001aabc:	88 c2                	mov    dl,al
c001aabe:	88 c8                	mov    al,cl
c001aac0:	09 d0                	or     eax,edx
c001aac2:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001aac7:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aacc:	83 e0 08             	and    eax,0x8
c001aacf:	0f b6 c0             	movzx  eax,al
c001aad2:	85 c0                	test   eax,eax
c001aad4:	74 0d                	je     c001aae3 <HalDetectFeatures()+0xcf5>
c001aad6:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001aadb:	83 c8 10             	or     eax,0x10
c001aade:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001aae3:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001aae8:	83 e0 10             	and    eax,0x10
c001aaeb:	0f b6 c0             	movzx  eax,al
c001aaee:	85 c0                	test   eax,eax
c001aaf0:	75 23                	jne    c001ab15 <HalDetectFeatures()+0xd27>
c001aaf2:	e8 df 9d 00 00       	call   c00248d6 <x87Detect>
c001aaf7:	83 e0 01             	and    eax,0x1
c001aafa:	83 e0 01             	and    eax,0x1
c001aafd:	89 c1                	mov    ecx,eax
c001aaff:	c1 e1 04             	shl    ecx,0x4
c001ab02:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ab07:	83 e0 ef             	and    eax,0xffffffef
c001ab0a:	88 c2                	mov    dl,al
c001ab0c:	88 c8                	mov    al,cl
c001ab0e:	09 d0                	or     eax,edx
c001ab10:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ab15:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ab1a:	83 e0 01             	and    eax,0x1
c001ab1d:	0f b6 c0             	movzx  eax,al
c001ab20:	85 c0                	test   eax,eax
c001ab22:	75 2d                	jne    c001ab51 <HalDetectFeatures()+0xd63>
c001ab24:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ab29:	83 e0 02             	and    eax,0x2
c001ab2c:	0f b6 c0             	movzx  eax,al
c001ab2f:	85 c0                	test   eax,eax
c001ab31:	75 1e                	jne    c001ab51 <HalDetectFeatures()+0xd63>
c001ab33:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ab38:	83 e0 04             	and    eax,0x4
c001ab3b:	0f b6 c0             	movzx  eax,al
c001ab3e:	85 c0                	test   eax,eax
c001ab40:	75 0f                	jne    c001ab51 <HalDetectFeatures()+0xd63>
c001ab42:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ab47:	83 e0 08             	and    eax,0x8
c001ab4a:	0f b6 c0             	movzx  eax,al
c001ab4d:	85 c0                	test   eax,eax
c001ab4f:	74 0d                	je     c001ab5e <HalDetectFeatures()+0xd70>
c001ab51:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ab56:	83 c8 80             	or     eax,0xffffff80
c001ab59:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ab5e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ab63:	83 e0 10             	and    eax,0x10
c001ab66:	0f b6 c0             	movzx  eax,al
c001ab69:	85 c0                	test   eax,eax
c001ab6b:	74 2f                	je     c001ab9c <HalDetectFeatures()+0xdae>
c001ab6d:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ab72:	83 e0 80             	and    eax,0xffffff80
c001ab75:	0f b6 c0             	movzx  eax,al
c001ab78:	85 c0                	test   eax,eax
c001ab7a:	75 20                	jne    c001ab9c <HalDetectFeatures()+0xdae>
c001ab7c:	e8 0f 9d 00 00       	call   c0024890 <sseDetect>
c001ab81:	83 e0 01             	and    eax,0x1
c001ab84:	89 c1                	mov    ecx,eax
c001ab86:	c1 e1 07             	shl    ecx,0x7
c001ab89:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ab8e:	83 e0 7f             	and    eax,0x7f
c001ab91:	88 c2                	mov    dl,al
c001ab93:	88 c8                	mov    al,cl
c001ab95:	09 d0                	or     eax,edx
c001ab97:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ab9c:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001aba1:	83 e0 80             	and    eax,0xffffff80
c001aba4:	0f b6 c0             	movzx  eax,al
c001aba7:	85 c0                	test   eax,eax
c001aba9:	74 1c                	je     c001abc7 <HalDetectFeatures()+0xdd9>
c001abab:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001abb0:	83 e0 20             	and    eax,0x20
c001abb3:	0f b6 c0             	movzx  eax,al
c001abb6:	85 c0                	test   eax,eax
c001abb8:	75 0d                	jne    c001abc7 <HalDetectFeatures()+0xdd9>
c001abba:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001abbf:	83 e0 df             	and    eax,0xffffffdf
c001abc2:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001abc7:	c6 05 48 74 03 c0 00 	mov    BYTE PTR ds:0xc0037448,0x0
c001abce:	90                   	nop
c001abcf:	81 c4 90 00 00 00    	add    esp,0x90
c001abd5:	5b                   	pop    ebx
c001abd6:	5e                   	pop    esi
c001abd7:	5f                   	pop    edi
c001abd8:	c3                   	ret    

c001abd9 <HalEnableNMI()>:
c001abd9:	c6 05 2c 74 03 c0 01 	mov    BYTE PTR ds:0xc003742c,0x1
c001abe0:	6a 10                	push   0x10
c001abe2:	e8 00 ef ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001abe7:	83 c4 04             	add    esp,0x4
c001abea:	90                   	nop
c001abeb:	c3                   	ret    

c001abec <HalDisableNMI()>:
c001abec:	c6 05 2c 74 03 c0 00 	mov    BYTE PTR ds:0xc003742c,0x0
c001abf3:	6a 10                	push   0x10
c001abf5:	e8 ed ee ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001abfa:	83 c4 04             	add    esp,0x4
c001abfd:	90                   	nop
c001abfe:	c3                   	ret    

c001abff <HalGetNMIState()>:
c001abff:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c001ac04:	c3                   	ret    

c001ac05 <HalIsAPICEnabled()>:
c001ac05:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ac0a:	83 e0 01             	and    eax,0x1
c001ac0d:	0f b6 c0             	movzx  eax,al
c001ac10:	85 c0                	test   eax,eax
c001ac12:	0f 95 c0             	setne  al
c001ac15:	c3                   	ret    

c001ac16 <x86rdmsr(unsigned int)>:
c001ac16:	83 ec 1c             	sub    esp,0x1c
c001ac19:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ac1e:	83 e0 08             	and    eax,0x8
c001ac21:	0f b6 c0             	movzx  eax,al
c001ac24:	85 c0                	test   eax,eax
c001ac26:	75 10                	jne    c001ac38 <x86rdmsr(unsigned int)+0x22>
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	68 d2 d5 02 c0       	push   0xc002d5d2
c001ac30:	e8 63 5c ff ff       	call   c0010898 <KePanic(char const*)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3c:	89 c1                	mov    ecx,eax
c001ac3e:	0f 32                	rdmsr  
c001ac40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac50:	83 c4 1c             	add    esp,0x1c
c001ac53:	c3                   	ret    

c001ac54 <x86wrmsr(unsigned int, unsigned long long)>:
c001ac54:	83 ec 1c             	sub    esp,0x1c
c001ac57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac67:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ac6c:	83 e0 08             	and    eax,0x8
c001ac6f:	0f b6 c0             	movzx  eax,al
c001ac72:	85 c0                	test   eax,eax
c001ac74:	75 10                	jne    c001ac86 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001ac76:	83 ec 0c             	sub    esp,0xc
c001ac79:	68 d8 d5 02 c0       	push   0xc002d5d8
c001ac7e:	e8 15 5c ff ff       	call   c0010898 <KePanic(char const*)>
c001ac83:	83 c4 10             	add    esp,0x10
c001ac86:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ac8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac92:	0f 30                	wrmsr  
c001ac94:	90                   	nop
c001ac95:	83 c4 1c             	add    esp,0x1c
c001ac98:	c3                   	ret    

c001ac99 <HalHandleGeneralProtectionFault(void*, void*)>:
c001ac99:	83 ec 0c             	sub    esp,0xc
c001ac9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001aca1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aca3:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001aca6:	0f b6 c0             	movzx  eax,al
c001aca9:	85 c0                	test   eax,eax
c001acab:	74 11                	je     c001acbe <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001acad:	83 ec 0c             	sub    esp,0xc
c001acb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acb4:	e8 72 db ff ff       	call   c001882b <Vm::faultHandler(regs*)>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	eb 02                	jmp    c001acc0 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001acbe:	b0 00                	mov    al,0x0
c001acc0:	83 c4 0c             	add    esp,0xc
c001acc3:	c3                   	ret    

c001acc4 <HalFindRSDP()>:
c001acc4:	83 ec 1c             	sub    esp,0x1c
c001acc7:	a1 7c 71 03 c0       	mov    eax,ds:0xc003717c
c001accc:	3d ff 07 00 00       	cmp    eax,0x7ff
c001acd1:	7e 17                	jle    c001acea <HalFindRSDP()+0x26>
c001acd3:	83 ec 0c             	sub    esp,0xc
c001acd6:	68 00 04 00 00       	push   0x400
c001acdb:	e8 64 32 ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	0f b6 c0             	movzx  eax,al
c001ace6:	85 c0                	test   eax,eax
c001ace8:	74 04                	je     c001acee <HalFindRSDP()+0x2a>
c001acea:	b0 01                	mov    al,0x1
c001acec:	eb 02                	jmp    c001acf0 <HalFindRSDP()+0x2c>
c001acee:	b0 00                	mov    al,0x0
c001acf0:	0f b6 c0             	movzx  eax,al
c001acf3:	85 c0                	test   eax,eax
c001acf5:	74 1d                	je     c001ad14 <HalFindRSDP()+0x50>
c001acf7:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001acfc:	83 e0 fb             	and    eax,0xfffffffb
c001acff:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	68 de d5 02 c0       	push   0xc002d5de
c001ad0c:	e8 55 c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad19:	83 e0 04             	and    eax,0x4
c001ad1c:	0f b6 c0             	movzx  eax,al
c001ad1f:	85 c0                	test   eax,eax
c001ad21:	75 17                	jne    c001ad3a <HalFindRSDP()+0x76>
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	68 ed d5 02 c0       	push   0xc002d5ed
c001ad2b:	e8 36 c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	b8 00 00 00 00       	mov    eax,0x0
c001ad38:	eb 63                	jmp    c001ad9d <HalFindRSDP()+0xd9>
c001ad3a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001ad42:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001ad4a:	77 2f                	ja     c001ad7b <HalFindRSDP()+0xb7>
c001ad4c:	83 ec 04             	sub    esp,0x4
c001ad4f:	6a 08                	push   0x8
c001ad51:	68 f7 d5 02 c0       	push   0xc002d5f7
c001ad56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad5a:	e8 21 56 fe ff       	call   c0000380 <memcmp>
c001ad5f:	83 c4 10             	add    esp,0x10
c001ad62:	85 c0                	test   eax,eax
c001ad64:	0f 94 c0             	sete   al
c001ad67:	0f b6 c0             	movzx  eax,al
c001ad6a:	85 c0                	test   eax,eax
c001ad6c:	74 06                	je     c001ad74 <HalFindRSDP()+0xb0>
c001ad6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad72:	eb 29                	jmp    c001ad9d <HalFindRSDP()+0xd9>
c001ad74:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001ad79:	eb c7                	jmp    c001ad42 <HalFindRSDP()+0x7e>
c001ad7b:	83 ec 0c             	sub    esp,0xc
c001ad7e:	68 00 d6 02 c0       	push   0xc002d600
c001ad83:	e8 de c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ad88:	83 c4 10             	add    esp,0x10
c001ad8b:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad90:	83 e0 fb             	and    eax,0xfffffffb
c001ad93:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ad98:	b8 00 00 00 00       	mov    eax,0x0
c001ad9d:	83 c4 1c             	add    esp,0x1c
c001ada0:	c3                   	ret    

c001ada1 <HalHandlePageFault(void*, void*)>:
c001ada1:	83 ec 1c             	sub    esp,0x1c
c001ada4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001ada9:	8b 00                	mov    eax,DWORD PTR [eax]
c001adab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adae:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001adb4:	0f 20 d2             	mov    edx,cr2
c001adb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001adbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adbf:	83 ec 08             	sub    esp,0x8
c001adc2:	52                   	push   edx
c001adc3:	50                   	push   eax
c001adc4:	e8 e5 9d ff ff       	call   c0014bae <VAS::tryLoadBackOffDisk(unsigned long)>
c001adc9:	83 c4 10             	add    esp,0x10
c001adcc:	83 c4 1c             	add    esp,0x1c
c001adcf:	c3                   	ret    

c001add0 <HalHandleOpcodeFault(void*, void*)>:
c001add0:	83 ec 1c             	sub    esp,0x1c
c001add3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001add7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001addb:	a0 48 74 03 c0       	mov    al,ds:0xc0037448
c001ade0:	0f b6 c0             	movzx  eax,al
c001ade3:	85 c0                	test   eax,eax
c001ade5:	74 25                	je     c001ae0c <HalHandleOpcodeFault(void*, void*)+0x3c>
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	68 0c d8 02 c0       	push   0xc002d80c
c001adef:	e8 72 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001adf4:	83 c4 10             	add    esp,0x10
c001adf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adfb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001adfe:	8d 50 19             	lea    edx,[eax+0x19]
c001ae01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001ae08:	b0 01                	mov    al,0x1
c001ae0a:	eb 02                	jmp    c001ae0e <HalHandleOpcodeFault(void*, void*)+0x3e>
c001ae0c:	b0 00                	mov    al,0x0
c001ae0e:	83 c4 1c             	add    esp,0x1c
c001ae11:	c3                   	ret    

c001ae12 <HalDisplayDebugInfo(void*)>:
c001ae12:	83 ec 2c             	sub    esp,0x2c
c001ae15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae1d:	0f 20 c0             	mov    eax,cr0
c001ae20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae24:	0f 20 d0             	mov    eax,cr2
c001ae27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae2b:	0f 20 d8             	mov    eax,cr3
c001ae2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae32:	0f 20 e0             	mov    eax,cr4
c001ae35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ae40:	83 ec 08             	sub    esp,0x8
c001ae43:	50                   	push   eax
c001ae44:	68 1a d6 02 c0       	push   0xc002d61a
c001ae49:	e8 18 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae55:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001ae58:	83 ec 08             	sub    esp,0x8
c001ae5b:	50                   	push   eax
c001ae5c:	68 0b d6 02 c0       	push   0xc002d60b
c001ae61:	e8 00 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae66:	83 c4 10             	add    esp,0x10
c001ae69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae6d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001ae70:	83 ec 08             	sub    esp,0x8
c001ae73:	50                   	push   eax
c001ae74:	68 16 d6 02 c0       	push   0xc002d616
c001ae79:	e8 e8 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ae88:	83 ec 08             	sub    esp,0x8
c001ae8b:	50                   	push   eax
c001ae8c:	68 25 d6 02 c0       	push   0xc002d625
c001ae91:	e8 d0 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae96:	83 c4 10             	add    esp,0x10
c001ae99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae9d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001aea0:	83 ec 08             	sub    esp,0x8
c001aea3:	50                   	push   eax
c001aea4:	68 30 d6 02 c0       	push   0xc002d630
c001aea9:	e8 b8 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	83 ec 08             	sub    esp,0x8
c001aeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeb8:	68 3b d6 02 c0       	push   0xc002d63b
c001aebd:	e8 a4 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aec2:	83 c4 10             	add    esp,0x10
c001aec5:	83 ec 08             	sub    esp,0x8
c001aec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aecc:	68 46 d6 02 c0       	push   0xc002d646
c001aed1:	e8 90 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aedd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001aee0:	c1 e0 05             	shl    eax,0x5
c001aee3:	8d 90 80 0d 03 c0    	lea    edx,[eax-0x3ffcf280]
c001aee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeed:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001aef0:	83 ec 04             	sub    esp,0x4
c001aef3:	52                   	push   edx
c001aef4:	50                   	push   eax
c001aef5:	68 51 d6 02 c0       	push   0xc002d651
c001aefa:	e8 67 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aeff:	83 c4 10             	add    esp,0x10
c001af02:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af07:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af0d:	83 ec 0c             	sub    esp,0xc
c001af10:	50                   	push   eax
c001af11:	e8 81 7f ff ff       	call   c0012e97 <setActiveTerminal(VgaText*)>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af1e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af24:	83 ec 08             	sub    esp,0x8
c001af27:	68 60 d6 02 c0       	push   0xc002d660
c001af2c:	50                   	push   eax
c001af2d:	e8 a2 82 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001af32:	83 c4 10             	add    esp,0x10
c001af35:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af3a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af44:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001af47:	83 ec 08             	sub    esp,0x8
c001af4a:	52                   	push   edx
c001af4b:	50                   	push   eax
c001af4c:	e8 3d 82 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001af51:	83 c4 10             	add    esp,0x10
c001af54:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af59:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af5f:	83 ec 08             	sub    esp,0x8
c001af62:	68 6e d6 02 c0       	push   0xc002d66e
c001af67:	50                   	push   eax
c001af68:	e8 67 82 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001af6d:	83 c4 10             	add    esp,0x10
c001af70:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af75:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af7b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001af80:	8b 12                	mov    edx,DWORD PTR [edx]
c001af82:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001af85:	83 c2 0c             	add    edx,0xc
c001af88:	83 ec 08             	sub    esp,0x8
c001af8b:	52                   	push   edx
c001af8c:	50                   	push   eax
c001af8d:	e8 42 82 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001af92:	83 c4 10             	add    esp,0x10
c001af95:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001af9a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001afa0:	83 ec 08             	sub    esp,0x8
c001afa3:	68 77 d6 02 c0       	push   0xc002d677
c001afa8:	50                   	push   eax
c001afa9:	e8 26 82 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001afae:	83 c4 10             	add    esp,0x10
c001afb1:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001afb6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001afbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afc0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001afc3:	83 ec 08             	sub    esp,0x8
c001afc6:	52                   	push   edx
c001afc7:	50                   	push   eax
c001afc8:	e8 c1 81 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001afcd:	83 c4 10             	add    esp,0x10
c001afd0:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001afd5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001afdb:	83 ec 08             	sub    esp,0x8
c001afde:	68 7f d6 02 c0       	push   0xc002d67f
c001afe3:	50                   	push   eax
c001afe4:	e8 eb 81 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001aff1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aff7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001affb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001affe:	83 ec 08             	sub    esp,0x8
c001b001:	52                   	push   edx
c001b002:	50                   	push   eax
c001b003:	e8 86 81 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b008:	83 c4 10             	add    esp,0x10
c001b00b:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b010:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b016:	83 ec 08             	sub    esp,0x8
c001b019:	68 87 d6 02 c0       	push   0xc002d687
c001b01e:	50                   	push   eax
c001b01f:	e8 b0 81 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b02c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b032:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b036:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001b039:	83 ec 08             	sub    esp,0x8
c001b03c:	52                   	push   edx
c001b03d:	50                   	push   eax
c001b03e:	e8 4b 81 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b04b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b051:	83 ec 08             	sub    esp,0x8
c001b054:	68 8f d6 02 c0       	push   0xc002d68f
c001b059:	50                   	push   eax
c001b05a:	e8 75 81 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b05f:	83 c4 10             	add    esp,0x10
c001b062:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b067:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b06d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b071:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001b074:	83 ec 08             	sub    esp,0x8
c001b077:	52                   	push   edx
c001b078:	50                   	push   eax
c001b079:	e8 10 81 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b07e:	83 c4 10             	add    esp,0x10
c001b081:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b086:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b08c:	83 ec 08             	sub    esp,0x8
c001b08f:	68 97 d6 02 c0       	push   0xc002d697
c001b094:	50                   	push   eax
c001b095:	e8 3a 81 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b09a:	83 c4 10             	add    esp,0x10
c001b09d:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b0a2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b0a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0ac:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001b0af:	83 ec 08             	sub    esp,0x8
c001b0b2:	52                   	push   edx
c001b0b3:	50                   	push   eax
c001b0b4:	e8 d5 80 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b0c1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b0c7:	83 ec 08             	sub    esp,0x8
c001b0ca:	68 9f d6 02 c0       	push   0xc002d69f
c001b0cf:	50                   	push   eax
c001b0d0:	e8 ff 80 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b0d5:	83 c4 10             	add    esp,0x10
c001b0d8:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b0dd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b0e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0e7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b0ea:	83 ec 08             	sub    esp,0x8
c001b0ed:	52                   	push   edx
c001b0ee:	50                   	push   eax
c001b0ef:	e8 9a 80 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b0fc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b102:	83 ec 08             	sub    esp,0x8
c001b105:	68 a7 d6 02 c0       	push   0xc002d6a7
c001b10a:	50                   	push   eax
c001b10b:	e8 c4 80 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b118:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b11e:	83 ec 08             	sub    esp,0x8
c001b121:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b125:	50                   	push   eax
c001b126:	e8 63 80 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b133:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b139:	83 ec 08             	sub    esp,0x8
c001b13c:	68 b0 d6 02 c0       	push   0xc002d6b0
c001b141:	50                   	push   eax
c001b142:	e8 8d 80 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b14f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b155:	83 ec 08             	sub    esp,0x8
c001b158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15c:	50                   	push   eax
c001b15d:	e8 2c 80 ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b162:	83 c4 10             	add    esp,0x10
c001b165:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b16a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b170:	83 ec 08             	sub    esp,0x8
c001b173:	68 b8 d6 02 c0       	push   0xc002d6b8
c001b178:	50                   	push   eax
c001b179:	e8 56 80 ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b186:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b18c:	83 ec 08             	sub    esp,0x8
c001b18f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b193:	50                   	push   eax
c001b194:	e8 f5 7f ff ff       	call   c001318e <VgaText::putx(unsigned int)>
c001b199:	83 c4 10             	add    esp,0x10
c001b19c:	fa                   	cli    
c001b19d:	f4                   	hlt    
c001b19e:	eb fe                	jmp    c001b19e <HalDisplayDebugInfo(void*)+0x38c>

c001b1a0 <HalReceivedNMI()>:
c001b1a0:	83 ec 1c             	sub    esp,0x1c
c001b1a3:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001b1aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ae:	89 c2                	mov    edx,eax
c001b1b0:	ec                   	in     al,dx
c001b1b1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001b1b5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001b1b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b1bd:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001b1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1c8:	89 c2                	mov    edx,eax
c001b1ca:	ec                   	in     al,dx
c001b1cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b1cf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b1d3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b1d7:	83 ec 0c             	sub    esp,0xc
c001b1da:	68 c0 d6 02 c0       	push   0xc002d6c0
c001b1df:	e8 82 bd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b1ec:	83 e0 10             	and    eax,0x10
c001b1ef:	74 10                	je     c001b201 <HalReceivedNMI()+0x61>
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	68 d1 d6 02 c0       	push   0xc002d6d1
c001b1f9:	e8 9a 56 ff ff       	call   c0010898 <KePanic(char const*)>
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001b206:	83 e0 40             	and    eax,0x40
c001b209:	74 10                	je     c001b21b <HalReceivedNMI()+0x7b>
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	68 de d6 02 c0       	push   0xc002d6de
c001b213:	e8 80 56 ff ff       	call   c0010898 <KePanic(char const*)>
c001b218:	83 c4 10             	add    esp,0x10
c001b21b:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b21f:	0f be c0             	movsx  eax,al
c001b222:	85 c0                	test   eax,eax
c001b224:	79 10                	jns    c001b236 <HalReceivedNMI()+0x96>
c001b226:	83 ec 0c             	sub    esp,0xc
c001b229:	68 e8 d6 02 c0       	push   0xc002d6e8
c001b22e:	e8 65 56 ff ff       	call   c0010898 <KePanic(char const*)>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	90                   	nop
c001b237:	83 c4 1c             	add    esp,0x1c
c001b23a:	c3                   	ret    

c001b23b <HalSystemIdle()>:
c001b23b:	56                   	push   esi
c001b23c:	53                   	push   ebx
c001b23d:	83 ec 14             	sub    esp,0x14
c001b240:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001b245:	83 e0 10             	and    eax,0x10
c001b248:	0f b6 c0             	movzx  eax,al
c001b24b:	85 c0                	test   eax,eax
c001b24d:	74 43                	je     c001b292 <HalSystemIdle()+0x57>
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	68 e1 00 00 00       	push   0xe1
c001b257:	e8 ba f9 ff ff       	call   c001ac16 <x86rdmsr(unsigned int)>
c001b25c:	83 c4 10             	add    esp,0x10
c001b25f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b263:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b267:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b26b:	83 e0 02             	and    eax,0x2
c001b26e:	89 c3                	mov    ebx,eax
c001b270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b274:	83 e0 00             	and    eax,0x0
c001b277:	89 c6                	mov    esi,eax
c001b279:	83 ec 04             	sub    esp,0x4
c001b27c:	56                   	push   esi
c001b27d:	53                   	push   ebx
c001b27e:	68 e1 00 00 00       	push   0xe1
c001b283:	e8 cc f9 ff ff       	call   c001ac54 <x86wrmsr(unsigned int, unsigned long long)>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	e8 04 4f fe ff       	call   c0000194 <doTPAUSE>
c001b290:	eb 01                	jmp    c001b293 <HalSystemIdle()+0x58>
c001b292:	f4                   	hlt    
c001b293:	90                   	nop
c001b294:	83 c4 14             	add    esp,0x14
c001b297:	5b                   	pop    ebx
c001b298:	5e                   	pop    esi
c001b299:	c3                   	ret    

c001b29a <i386SaveCoprocessor(void*)>:
c001b29a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b29e:	83 c0 3f             	add    eax,0x3f
c001b2a1:	83 e0 c0             	and    eax,0xffffffc0
c001b2a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2a8:	ff 25 10 74 03 c0    	jmp    DWORD PTR ds:0xc0037410

c001b2ae <i386LoadCoprocessor(void*)>:
c001b2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2b2:	83 c0 3f             	add    eax,0x3f
c001b2b5:	83 e0 c0             	and    eax,0xffffffc0
c001b2b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2bc:	ff 25 0c 74 03 c0    	jmp    DWORD PTR ds:0xc003740c

c001b2c2 <x87EmulHandler(regs*, void*)>:
c001b2c2:	53                   	push   ebx
c001b2c3:	83 ec 08             	sub    esp,0x8
c001b2c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2cb:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001b2cf:	74 10                	je     c001b2e1 <x87EmulHandler(regs*, void*)+0x1f>
c001b2d1:	83 ec 0c             	sub    esp,0xc
c001b2d4:	68 f5 d6 02 c0       	push   0xc002d6f5
c001b2d9:	e8 ba 55 ff ff       	call   c0010898 <KePanic(char const*)>
c001b2de:	83 c4 10             	add    esp,0x10
c001b2e1:	0f 20 c0             	mov    eax,cr0
c001b2e4:	a8 08                	test   al,0x8
c001b2e6:	74 59                	je     c001b341 <x87EmulHandler(regs*, void*)+0x7f>
c001b2e8:	0f 06                	clts   
c001b2ea:	a1 08 74 03 c0       	mov    eax,ds:0xc0037408
c001b2ef:	85 c0                	test   eax,eax
c001b2f1:	74 0e                	je     c001b301 <x87EmulHandler(regs*, void*)+0x3f>
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b2f9:	e8 9c ff ff ff       	call   c001b29a <i386SaveCoprocessor(void*)>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001b307:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001b30b:	75 12                	jne    c001b31f <x87EmulHandler(regs*, void*)+0x5d>
c001b30d:	83 ec 0c             	sub    esp,0xc
c001b310:	68 40 02 00 00       	push   0x240
c001b315:	e8 2a 51 ff ff       	call   c0010444 <malloc>
c001b31a:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001b31d:	eb 10                	jmp    c001b32f <x87EmulHandler(regs*, void*)+0x6d>
c001b31f:	a1 08 74 03 c0       	mov    eax,ds:0xc0037408
c001b324:	83 ec 0c             	sub    esp,0xc
c001b327:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b32a:	e8 7f ff ff ff       	call   c001b2ae <i386LoadCoprocessor(void*)>
c001b32f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	a3 08 74 03 c0       	mov    ds:0xc0037408,eax
c001b33c:	83 c4 08             	add    esp,0x8
c001b33f:	5b                   	pop    ebx
c001b340:	c3                   	ret    
c001b341:	83 ec 0c             	sub    esp,0xc
c001b344:	68 09 d7 02 c0       	push   0xc002d709
c001b349:	e8 18 bc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b34e:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001b356:	83 c4 18             	add    esp,0x18
c001b359:	5b                   	pop    ebx
c001b35a:	e9 b5 c8 ff ff       	jmp    c0017c14 <KeTerminateCurrentThread(int)>

c001b35f <HalInitialiseCoprocessor()>:
c001b35f:	83 ec 10             	sub    esp,0x10
c001b362:	6a 00                	push   0x0
c001b364:	68 c2 b2 01 c0       	push   0xc001b2c2
c001b369:	6a 07                	push   0x7
c001b36b:	c7 05 08 74 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037408,0x0
c001b375:	e8 fb 07 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b37a:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001b37f:	83 c4 10             	add    esp,0x10
c001b382:	a8 80                	test   al,0x80
c001b384:	74 29                	je     c001b3af <HalInitialiseCoprocessor()+0x50>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	68 1f d7 02 c0       	push   0xc002d71f
c001b38e:	e8 d3 bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b393:	c7 05 10 74 03 c0 a8 48 02 c0 	mov    DWORD PTR ds:0xc0037410,0xc00248a8
c001b39d:	c7 05 0c 74 03 c0 b0 48 02 c0 	mov    DWORD PTR ds:0xc003740c,0xc00248b0
c001b3a7:	83 c4 1c             	add    esp,0x1c
c001b3aa:	e9 09 95 00 00       	jmp    c00248b8 <sseInit>
c001b3af:	a8 10                	test   al,0x10
c001b3b1:	74 29                	je     c001b3dc <HalInitialiseCoprocessor()+0x7d>
c001b3b3:	83 ec 0c             	sub    esp,0xc
c001b3b6:	68 2a d7 02 c0       	push   0xc002d72a
c001b3bb:	e8 a6 bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b3c0:	c7 05 10 74 03 c0 f7 48 02 c0 	mov    DWORD PTR ds:0xc0037410,0xc00248f7
c001b3ca:	c7 05 0c 74 03 c0 fe 48 02 c0 	mov    DWORD PTR ds:0xc003740c,0xc00248fe
c001b3d4:	83 c4 1c             	add    esp,0x1c
c001b3d7:	e9 29 95 00 00       	jmp    c0024905 <x87Init>
c001b3dc:	c7 05 10 74 03 c0 d6 9a 01 c0 	mov    DWORD PTR ds:0xc0037410,0xc0019ad6
c001b3e6:	c7 05 0c 74 03 c0 d6 9a 01 c0 	mov    DWORD PTR ds:0xc003740c,0xc0019ad6
c001b3f0:	0f 20 c0             	mov    eax,cr0
c001b3f3:	83 c8 04             	or     eax,0x4
c001b3f6:	0f 22 c0             	mov    cr0,eax
c001b3f9:	83 c4 0c             	add    esp,0xc
c001b3fc:	c3                   	ret    

c001b3fd <HalPanic(char const*)>:
c001b3fd:	53                   	push   ebx
c001b3fe:	83 ec 10             	sub    esp,0x10
c001b401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b405:	fa                   	cli    
c001b406:	53                   	push   ebx
c001b407:	68 35 d7 02 c0       	push   0xc002d735
c001b40c:	e8 55 bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b411:	a1 04 74 03 c0       	mov    eax,ds:0xc0037404
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	85 c0                	test   eax,eax
c001b41b:	74 09                	je     c001b426 <HalPanic(char const*)+0x29>
c001b41d:	83 ec 0c             	sub    esp,0xc
c001b420:	53                   	push   ebx
c001b421:	ff d0                	call   eax
c001b423:	83 c4 10             	add    esp,0x10
c001b426:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c001b42b:	85 c0                	test   eax,eax
c001b42d:	0f 84 dc 00 00 00    	je     c001b50f <HalPanic(char const*)+0x112>
c001b433:	52                   	push   edx
c001b434:	6a 01                	push   0x1
c001b436:	6a 0f                	push   0xf
c001b438:	50                   	push   eax
c001b439:	e8 98 78 ff ff       	call   c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b43e:	59                   	pop    ecx
c001b43f:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b445:	e8 98 7a ff ff       	call   c0012ee2 <VgaText::clearScreen()>
c001b44a:	58                   	pop    eax
c001b44b:	5a                   	pop    edx
c001b44c:	68 09 c7 02 c0       	push   0xc002c709
c001b451:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b457:	e8 b2 78 ff ff       	call   c0012d0e <VgaText::setTitle(char*)>
c001b45c:	83 c4 0c             	add    esp,0xc
c001b45f:	6a 01                	push   0x1
c001b461:	6a 0f                	push   0xf
c001b463:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b469:	e8 68 78 ff ff       	call   c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b46e:	59                   	pop    ecx
c001b46f:	58                   	pop    eax
c001b470:	68 4e d7 02 c0       	push   0xc002d74e
c001b475:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b47b:	e8 54 7d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b480:	83 c4 0c             	add    esp,0xc
c001b483:	6a 0f                	push   0xf
c001b485:	6a 01                	push   0x1
c001b487:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b48d:	e8 44 78 ff ff       	call   c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b492:	58                   	pop    eax
c001b493:	5a                   	pop    edx
c001b494:	68 57 d7 02 c0       	push   0xc002d757
c001b499:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b49f:	e8 30 7d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b4a4:	83 c4 0c             	add    esp,0xc
c001b4a7:	6a 01                	push   0x1
c001b4a9:	6a 0f                	push   0xf
c001b4ab:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b4b1:	e8 20 78 ff ff       	call   c0012cd6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b4b6:	59                   	pop    ecx
c001b4b7:	58                   	pop    eax
c001b4b8:	68 9b d7 02 c0       	push   0xc002d79b
c001b4bd:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b4c3:	e8 0c 7d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b4c8:	58                   	pop    eax
c001b4c9:	5a                   	pop    edx
c001b4ca:	68 64 d7 02 c0       	push   0xc002d764
c001b4cf:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b4d5:	e8 fa 7c ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b4da:	59                   	pop    ecx
c001b4db:	58                   	pop    eax
c001b4dc:	68 9e d7 02 c0       	push   0xc002d79e
c001b4e1:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b4e7:	e8 e8 7c ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b4ec:	58                   	pop    eax
c001b4ed:	5a                   	pop    edx
c001b4ee:	53                   	push   ebx
c001b4ef:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b4f5:	e8 da 7c ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b4fa:	59                   	pop    ecx
c001b4fb:	5b                   	pop    ebx
c001b4fc:	68 9b d7 02 c0       	push   0xc002d79b
c001b501:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b507:	e8 c8 7c ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c001b50c:	83 c4 10             	add    esp,0x10
c001b50f:	eb fe                	jmp    c001b50f <HalPanic(char const*)+0x112>

c001b511 <HalQueryPerformanceCounter()>:
c001b511:	31 c0                	xor    eax,eax
c001b513:	31 d2                	xor    edx,edx
c001b515:	f6 05 4e 74 03 c0 08 	test   BYTE PTR ds:0xc003744e,0x8
c001b51c:	75 02                	jne    c001b520 <HalQueryPerformanceCounter()+0xf>
c001b51e:	0f 31                	rdtsc  
c001b520:	c3                   	ret    

c001b521 <HalInitialise()>:
c001b521:	53                   	push   ebx
c001b522:	83 ec 08             	sub    esp,0x8
c001b525:	e8 c4 e8 ff ff       	call   c0019dee <HalDetectFeatures()>
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	68 d7 9a 01 c0       	push   0xc0019ad7
c001b532:	e8 9b 5c ff ff       	call   c00111d2 <KeRegisterRestartHandler(void (*)())>
c001b537:	c7 04 24 e2 9a 01 c0 	mov    DWORD PTR [esp],0xc0019ae2
c001b53e:	e8 85 5c ff ff       	call   c00111c8 <KeRegisterShutdownHandler(void (*)())>
c001b543:	c7 04 24 e3 9a 01 c0 	mov    DWORD PTR [esp],0xc0019ae3
c001b54a:	e8 8d 5c ff ff       	call   c00111dc <KeRegisterSleepHandler(void (*)())>
c001b54f:	e8 d4 1b ff ff       	call   c000d128 <scanMADT()>
c001b554:	83 c4 10             	add    esp,0x10
c001b557:	80 3d 40 6e 03 c0 00 	cmp    BYTE PTR ds:0xc0036e40,0x0
c001b55e:	75 0d                	jne    c001b56d <HalInitialise()+0x4c>
c001b560:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001b565:	83 e0 fe             	and    eax,0xfffffffe
c001b568:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001b56d:	e8 ea 08 00 00       	call   c001be5c <picOpen()>
c001b572:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001b579:	74 0a                	je     c001b585 <HalInitialise()+0x64>
c001b57b:	e8 2c 08 00 00       	call   c001bdac <picDisable()>
c001b580:	e8 59 e1 ff ff       	call   c00196de <apicOpen()>
c001b585:	50                   	push   eax
c001b586:	bb 0f 00 00 00       	mov    ebx,0xf
c001b58b:	6a 00                	push   0x0
c001b58d:	68 6c f5 00 c0       	push   0xc000f56c
c001b592:	6a 02                	push   0x2
c001b594:	e8 dc 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	6a 00                	push   0x0
c001b59e:	68 e4 f4 00 c0       	push   0xc000f4e4
c001b5a3:	6a 06                	push   0x6
c001b5a5:	e8 cb 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5aa:	83 c4 0c             	add    esp,0xc
c001b5ad:	6a 00                	push   0x0
c001b5af:	68 7c f5 00 c0       	push   0xc000f57c
c001b5b4:	6a 08                	push   0x8
c001b5b6:	e8 ba 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5bb:	83 c4 0c             	add    esp,0xc
c001b5be:	6a 00                	push   0x0
c001b5c0:	68 3c f4 00 c0       	push   0xc000f43c
c001b5c5:	6a 0d                	push   0xd
c001b5c7:	e8 a9 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5cc:	83 c4 0c             	add    esp,0xc
c001b5cf:	6a 00                	push   0x0
c001b5d1:	68 90 f4 00 c0       	push   0xc000f490
c001b5d6:	6a 0e                	push   0xe
c001b5d8:	e8 98 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5dd:	83 c4 0c             	add    esp,0xc
c001b5e0:	6a 00                	push   0x0
c001b5e2:	68 38 f5 00 c0       	push   0xc000f538
c001b5e7:	6a 00                	push   0x0
c001b5e9:	e8 87 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5ee:	83 c4 0c             	add    esp,0xc
c001b5f1:	6a 00                	push   0x0
c001b5f3:	68 38 f5 00 c0       	push   0xc000f538
c001b5f8:	6a 01                	push   0x1
c001b5fa:	e8 76 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b5ff:	83 c4 0c             	add    esp,0xc
c001b602:	6a 00                	push   0x0
c001b604:	68 38 f5 00 c0       	push   0xc000f538
c001b609:	6a 03                	push   0x3
c001b60b:	e8 65 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b610:	83 c4 0c             	add    esp,0xc
c001b613:	6a 00                	push   0x0
c001b615:	68 38 f5 00 c0       	push   0xc000f538
c001b61a:	6a 04                	push   0x4
c001b61c:	e8 54 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b621:	83 c4 0c             	add    esp,0xc
c001b624:	6a 00                	push   0x0
c001b626:	68 38 f5 00 c0       	push   0xc000f538
c001b62b:	6a 05                	push   0x5
c001b62d:	e8 43 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b632:	83 c4 0c             	add    esp,0xc
c001b635:	6a 00                	push   0x0
c001b637:	68 38 f5 00 c0       	push   0xc000f538
c001b63c:	6a 00                	push   0x0
c001b63e:	e8 32 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b643:	83 c4 0c             	add    esp,0xc
c001b646:	6a 00                	push   0x0
c001b648:	68 38 f5 00 c0       	push   0xc000f538
c001b64d:	6a 01                	push   0x1
c001b64f:	e8 21 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b654:	83 c4 0c             	add    esp,0xc
c001b657:	6a 00                	push   0x0
c001b659:	68 38 f5 00 c0       	push   0xc000f538
c001b65e:	6a 09                	push   0x9
c001b660:	e8 10 05 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b665:	83 c4 0c             	add    esp,0xc
c001b668:	6a 00                	push   0x0
c001b66a:	68 38 f5 00 c0       	push   0xc000f538
c001b66f:	6a 0a                	push   0xa
c001b671:	e8 ff 04 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b676:	83 c4 0c             	add    esp,0xc
c001b679:	6a 00                	push   0x0
c001b67b:	68 38 f5 00 c0       	push   0xc000f538
c001b680:	6a 0b                	push   0xb
c001b682:	e8 ee 04 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	50                   	push   eax
c001b68b:	6a 00                	push   0x0
c001b68d:	68 38 f5 00 c0       	push   0xc000f538
c001b692:	53                   	push   ebx
c001b693:	43                   	inc    ebx
c001b694:	e8 dc 04 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	83 fb 1e             	cmp    ebx,0x1e
c001b69f:	75 e9                	jne    c001b68a <HalInitialise()+0x169>
c001b6a1:	50                   	push   eax
c001b6a2:	6a 00                	push   0x0
c001b6a4:	68 70 2b 01 c0       	push   0xc0012b70
c001b6a9:	6a 60                	push   0x60
c001b6ab:	e8 c5 04 00 00       	call   c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b6b0:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001b6b5:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b6bf:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b6c6:	e8 79 4d ff ff       	call   c0010444 <malloc>
c001b6cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6ce:	89 c3                	mov    ebx,eax
c001b6d0:	e8 ef 0e 00 00       	call   c001c5c4 <RTC::RTC()>
c001b6d5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b6df:	5a                   	pop    edx
c001b6e0:	59                   	pop    ecx
c001b6e1:	53                   	push   ebx
c001b6e2:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c001b6e8:	e8 61 f0 fe ff       	call   c000a74e <Device::addChild(Device*)>
c001b6ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ef:	6a 00                	push   0x0
c001b6f1:	6a 00                	push   0x0
c001b6f3:	6a 00                	push   0x0
c001b6f5:	53                   	push   ebx
c001b6f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6f9:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001b6fe:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b704:	83 c4 28             	add    esp,0x28
c001b707:	5b                   	pop    ebx
c001b708:	c3                   	ret    

c001b709 <HalMakeBeep(int)>:
c001b709:	53                   	push   ebx
c001b70a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b70e:	85 db                	test   ebx,ebx
c001b710:	75 07                	jne    c001b719 <HalMakeBeep(int)+0x10>
c001b712:	e4 61                	in     al,0x61
c001b714:	83 e0 fc             	and    eax,0xfffffffc
c001b717:	eb 26                	jmp    c001b73f <HalMakeBeep(int)+0x36>
c001b719:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b71e:	99                   	cdq    
c001b71f:	f7 fb                	idiv   ebx
c001b721:	89 c1                	mov    ecx,eax
c001b723:	b0 b6                	mov    al,0xb6
c001b725:	e6 43                	out    0x43,al
c001b727:	88 c8                	mov    al,cl
c001b729:	e6 42                	out    0x42,al
c001b72b:	89 c8                	mov    eax,ecx
c001b72d:	c1 e8 08             	shr    eax,0x8
c001b730:	e6 42                	out    0x42,al
c001b732:	e4 61                	in     al,0x61
c001b734:	89 c2                	mov    edx,eax
c001b736:	83 ca 03             	or     edx,0x3
c001b739:	38 d0                	cmp    al,dl
c001b73b:	74 04                	je     c001b741 <HalMakeBeep(int)+0x38>
c001b73d:	88 d0                	mov    al,dl
c001b73f:	e6 61                	out    0x61,al
c001b741:	5b                   	pop    ebx
c001b742:	c3                   	ret    

c001b743 <HalGetRand()>:
c001b743:	31 c0                	xor    eax,eax
c001b745:	c3                   	ret    

c001b746 <HalEndOfInterrupt(int)>:
c001b746:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001b74d:	74 1d                	je     c001b76c <HalEndOfInterrupt(int)+0x26>
c001b74f:	83 ec 18             	sub    esp,0x18
c001b752:	6a 1b                	push   0x1b
c001b754:	e8 bd f4 ff ff       	call   c001ac16 <x86rdmsr(unsigned int)>
c001b759:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b75e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b768:	83 c4 1c             	add    esp,0x1c
c001b76b:	c3                   	ret    
c001b76c:	e9 6f 08 00 00       	jmp    c001bfe0 <picEOI(int)>
c001b771:	90                   	nop

c001b772 <CPU::CPU()>:
c001b772:	83 ec 0c             	sub    esp,0xc
c001b775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b779:	83 ec 08             	sub    esp,0x8
c001b77c:	68 26 d5 02 c0       	push   0xc002d526
c001b781:	50                   	push   eax
c001b782:	e8 29 f1 fe ff       	call   c000a8b0 <Device::Device(char const*)>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	ba 38 d8 02 c0       	mov    edx,0xc002d838
c001b78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b793:	89 10                	mov    DWORD PTR [eax],edx
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a7:	05 64 01 00 00       	add    eax,0x164
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	50                   	push   eax
c001b7b0:	e8 19 3e ff ff       	call   c000f5ce <GDT::GDT()>
c001b7b5:	83 c4 10             	add    esp,0x10
c001b7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bc:	05 68 09 00 00       	add    eax,0x968
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	50                   	push   eax
c001b7c5:	e8 56 40 ff ff       	call   c000f820 <IDT::IDT()>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d1:	05 68 11 00 00       	add    eax,0x1168
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	50                   	push   eax
c001b7da:	e8 b1 7e ff ff       	call   c0013690 <TSS::TSS()>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e6:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b7f0:	90                   	nop
c001b7f1:	83 c4 0c             	add    esp,0xc
c001b7f4:	c3                   	ret    
c001b7f5:	90                   	nop

c001b7f6 <CPU::setupSMEP()>:
c001b7f6:	0f 20 e0             	mov    eax,cr4
c001b7f9:	0d 00 00 10 00       	or     eax,0x100000
c001b7fe:	0f 22 e0             	mov    cr4,eax
c001b801:	c3                   	ret    

c001b802 <CPU::setupUMIP()>:
c001b802:	0f 20 e0             	mov    eax,cr4
c001b805:	80 cc 08             	or     ah,0x8
c001b808:	0f 22 e0             	mov    cr4,eax
c001b80b:	c3                   	ret    

c001b80c <CPU::setupTSC()>:
c001b80c:	0f 20 e0             	mov    eax,cr4
c001b80f:	83 c8 04             	or     eax,0x4
c001b812:	0f 22 e0             	mov    cr4,eax
c001b815:	c3                   	ret    

c001b816 <CPU::setupLargePages()>:
c001b816:	0f 20 e0             	mov    eax,cr4
c001b819:	83 c8 10             	or     eax,0x10
c001b81c:	0f 22 e0             	mov    cr4,eax
c001b81f:	c3                   	ret    

c001b820 <CPU::setupPAT()>:
c001b820:	f6 05 4c 74 03 c0 08 	test   BYTE PTR ds:0xc003744c,0x8
c001b827:	74 28                	je     c001b851 <CPU::setupPAT()+0x31>
c001b829:	53                   	push   ebx
c001b82a:	83 ec 14             	sub    esp,0x14
c001b82d:	68 77 02 00 00       	push   0x277
c001b832:	e8 df f3 ff ff       	call   c001ac16 <x86rdmsr(unsigned int)>
c001b837:	83 c4 0c             	add    esp,0xc
c001b83a:	83 e2 f8             	and    edx,0xfffffff8
c001b83d:	83 ca 01             	or     edx,0x1
c001b840:	52                   	push   edx
c001b841:	50                   	push   eax
c001b842:	68 77 02 00 00       	push   0x277
c001b847:	e8 08 f4 ff ff       	call   c001ac54 <x86wrmsr(unsigned int, unsigned long long)>
c001b84c:	83 c4 18             	add    esp,0x18
c001b84f:	5b                   	pop    ebx
c001b850:	c3                   	ret    
c001b851:	c3                   	ret    

c001b852 <CPU::setupMTRR()>:
c001b852:	c3                   	ret    
c001b853:	90                   	nop

c001b854 <CPU::setupGlobalPages()>:
c001b854:	0f 20 e0             	mov    eax,cr4
c001b857:	0c 80                	or     al,0x80
c001b859:	0f 22 e0             	mov    cr4,eax
c001b85c:	c3                   	ret    
c001b85d:	90                   	nop

c001b85e <CPU::allowUsermodeDataAccess()>:
c001b85e:	f6 05 4f 74 03 c0 40 	test   BYTE PTR ds:0xc003744f,0x40
c001b865:	74 03                	je     c001b86a <CPU::allowUsermodeDataAccess()+0xc>
c001b867:	0f 01 cb             	stac   
c001b86a:	c3                   	ret    
c001b86b:	90                   	nop

c001b86c <CPU::prohibitUsermodeDataAccess()>:
c001b86c:	f6 05 4f 74 03 c0 40 	test   BYTE PTR ds:0xc003744f,0x40
c001b873:	74 03                	je     c001b878 <CPU::prohibitUsermodeDataAccess()+0xc>
c001b875:	0f 01 ca             	clac   
c001b878:	c3                   	ret    
c001b879:	90                   	nop

c001b87a <CPU::setupSMAP()>:
c001b87a:	0f 20 e0             	mov    eax,cr4
c001b87d:	0d 00 00 20 00       	or     eax,0x200000
c001b882:	0f 22 e0             	mov    cr4,eax
c001b885:	eb e5                	jmp    c001b86c <CPU::prohibitUsermodeDataAccess()>
c001b887:	90                   	nop

c001b888 <CPU::setupFeatures()>:
c001b888:	53                   	push   ebx
c001b889:	83 ec 08             	sub    esp,0x8
c001b88c:	f6 05 4f 74 03 c0 20 	test   BYTE PTR ds:0xc003744f,0x20
c001b893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b897:	74 18                	je     c001b8b1 <CPU::setupFeatures()+0x29>
c001b899:	83 ec 0c             	sub    esp,0xc
c001b89c:	68 a9 d7 02 c0       	push   0xc002d7a9
c001b8a1:	e8 c0 b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b8a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8a9:	e8 54 ff ff ff       	call   c001b802 <CPU::setupUMIP()>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	f6 05 4e 74 03 c0 08 	test   BYTE PTR ds:0xc003744e,0x8
c001b8b8:	74 18                	je     c001b8d2 <CPU::setupFeatures()+0x4a>
c001b8ba:	83 ec 0c             	sub    esp,0xc
c001b8bd:	68 b3 d7 02 c0       	push   0xc002d7b3
c001b8c2:	e8 9f b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b8c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8ca:	e8 3d ff ff ff       	call   c001b80c <CPU::setupTSC()>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	f6 05 4e 74 03 c0 20 	test   BYTE PTR ds:0xc003744e,0x20
c001b8d9:	74 18                	je     c001b8f3 <CPU::setupFeatures()+0x6b>
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	68 bc d7 02 c0       	push   0xc002d7bc
c001b8e3:	e8 7e b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b8e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8eb:	e8 26 ff ff ff       	call   c001b816 <CPU::setupLargePages()>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	f6 05 4e 74 03 c0 40 	test   BYTE PTR ds:0xc003744e,0x40
c001b8fa:	74 18                	je     c001b914 <CPU::setupFeatures()+0x8c>
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	68 c5 d7 02 c0       	push   0xc002d7c5
c001b904:	e8 5d b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b90c:	e8 43 ff ff ff       	call   c001b854 <CPU::setupGlobalPages()>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	f6 05 4e 74 03 c0 80 	test   BYTE PTR ds:0xc003744e,0x80
c001b91b:	74 18                	je     c001b935 <CPU::setupFeatures()+0xad>
c001b91d:	83 ec 0c             	sub    esp,0xc
c001b920:	68 d7 d7 02 c0       	push   0xc002d7d7
c001b925:	e8 3c b6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b92a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b92d:	e8 ee fe ff ff       	call   c001b820 <CPU::setupPAT()>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	f6 05 50 74 03 c0 04 	test   BYTE PTR ds:0xc0037450,0x4
c001b93c:	74 11                	je     c001b94f <CPU::setupFeatures()+0xc7>
c001b93e:	c7 44 24 10 e0 d7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002d7e0
c001b946:	83 c4 08             	add    esp,0x8
c001b949:	5b                   	pop    ebx
c001b94a:	e9 17 b6 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001b94f:	83 c4 08             	add    esp,0x8
c001b952:	5b                   	pop    ebx
c001b953:	c3                   	ret    

c001b954 <CPU::open(int, int, void*)>:
c001b954:	55                   	push   ebp
c001b955:	57                   	push   edi
c001b956:	56                   	push   esi
c001b957:	53                   	push   ebx
c001b958:	83 ec 18             	sub    esp,0x18
c001b95b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b95f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b963:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b967:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b96d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b973:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b979:	50                   	push   eax
c001b97a:	e8 b1 3c ff ff       	call   c000f630 <GDT::setup()>
c001b97f:	83 c4 0c             	add    esp,0xc
c001b982:	6a 00                	push   0x0
c001b984:	68 ef be ad de       	push   0xdeadbeef
c001b989:	55                   	push   ebp
c001b98a:	e8 45 7d ff ff       	call   c00136d4 <TSS::setup(unsigned long, unsigned long)>
c001b98f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b992:	e8 1d 7d ff ff       	call   c00136b4 <TSS::flush()>
c001b997:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b99d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9a0:	e8 f1 3e ff ff       	call   c000f896 <IDT::setup()>
c001b9a5:	b8 00 04 00 00       	mov    eax,0x400
c001b9aa:	0f 23 f8             	mov    dr7,eax
c001b9ad:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b9b7:	e8 d6 50 ff ff       	call   c0010a92 <Phys::allocatePage()>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	85 f6                	test   esi,esi
c001b9c1:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b9c7:	89 38                	mov    DWORD PTR [eax],edi
c001b9c9:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b9cf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b9d2:	74 10                	je     c001b9e4 <CPU::open(int, int, void*)+0x90>
c001b9d4:	50                   	push   eax
c001b9d5:	50                   	push   eax
c001b9d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b9dc:	56                   	push   esi
c001b9dd:	e8 94 86 ff ff       	call   c0014076 <VAS::setCPUSpecific(unsigned long)>
c001b9e2:	eb 0d                	jmp    c001b9f1 <CPU::open(int, int, void*)+0x9d>
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	68 ea d7 02 c0       	push   0xc002d7ea
c001b9ec:	e8 a7 4e ff ff       	call   c0010898 <KePanic(char const*)>
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	68 f8 d7 02 c0       	push   0xc002d7f8
c001b9fc:	e8 90 25 ff ff       	call   c000df91 <KeSetBootMessage(char const*)>
c001ba01:	e8 1b fb ff ff       	call   c001b521 <HalInitialise()>
c001ba06:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ba0d:	e8 32 25 ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ba12:	0f b6 c0             	movzx  eax,al
c001ba15:	83 f8 01             	cmp    eax,0x1
c001ba18:	19 c0                	sbb    eax,eax
c001ba1a:	25 aa 00 00 00       	and    eax,0xaa
c001ba1f:	83 c0 1e             	add    eax,0x1e
c001ba22:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba25:	e8 8b 03 ff ff       	call   c000bdb5 <setupTimer(int)>
c001ba2a:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ba30:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ba37:	e8 08 25 ff ff       	call   c000df44 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	84 c0                	test   al,al
c001ba41:	74 0c                	je     c001ba4f <CPU::open(int, int, void*)+0xfb>
c001ba43:	83 ec 0c             	sub    esp,0xc
c001ba46:	53                   	push   ebx
c001ba47:	e8 3c fe ff ff       	call   c001b888 <CPU::setupFeatures()>
c001ba4c:	83 c4 10             	add    esp,0x10
c001ba4f:	83 c4 0c             	add    esp,0xc
c001ba52:	31 c0                	xor    eax,eax
c001ba54:	5b                   	pop    ebx
c001ba55:	5e                   	pop    esi
c001ba56:	5f                   	pop    edi
c001ba57:	5d                   	pop    ebp
c001ba58:	c3                   	ret    

c001ba59 <convertLegacyIRQNumber(int)>:
c001ba59:	83 ec 0c             	sub    esp,0xc
c001ba5c:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001ba63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba67:	74 0c                	je     c001ba75 <convertLegacyIRQNumber(int)+0x1c>
c001ba69:	83 f8 0f             	cmp    eax,0xf
c001ba6c:	7f 0b                	jg     c001ba79 <convertLegacyIRQNumber(int)+0x20>
c001ba6e:	0f b6 80 88 05 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcfa78]
c001ba75:	83 c4 0c             	add    esp,0xc
c001ba78:	c3                   	ret    
c001ba79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba7d:	83 ec 0c             	sub    esp,0xc
c001ba80:	68 5c d8 02 c0       	push   0xc002d85c
c001ba85:	e8 0e 4e ff ff       	call   c0010898 <KePanic(char const*)>
c001ba8a:	83 c4 10             	add    esp,0x10
c001ba8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba91:	83 c4 0c             	add    esp,0xc
c001ba94:	c3                   	ret    

c001ba95 <KeSetupInterrupts()>:
c001ba95:	31 c0                	xor    eax,eax
c001ba97:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001baa1:	83 c0 10             	add    eax,0x10
c001baa4:	c7 80 50 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8bb0],0x0
c001baae:	c7 80 54 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7bac],0x0
c001bab8:	c7 80 54 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8bac],0x0
c001bac2:	c7 80 58 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba8],0x0
c001bacc:	c7 80 58 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba8],0x0
c001bad6:	c7 80 5c 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba4],0x0
c001bae0:	c7 80 5c 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba4],0x0
c001baea:	3d 00 10 00 00       	cmp    eax,0x1000
c001baef:	75 a6                	jne    c001ba97 <KeSetupInterrupts()+0x2>
c001baf1:	c3                   	ret    

c001baf2 <int_handler>:
c001baf2:	55                   	push   ebp
c001baf3:	57                   	push   edi
c001baf4:	56                   	push   esi
c001baf5:	53                   	push   ebx
c001baf6:	83 ec 0c             	sub    esp,0xc
c001baf9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bafd:	eb 02                	jmp    c001bb01 <int_handler+0xf>
c001baff:	fa                   	cli    
c001bb00:	f4                   	hlt    
c001bb01:	e8 8c 4d ff ff       	call   c0010892 <KeIsKernelInPanic()>
c001bb06:	84 c0                	test   al,al
c001bb08:	75 f5                	jne    c001baff <int_handler+0xd>
c001bb0a:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001bb0d:	8d 46 e0             	lea    eax,[esi-0x20]
c001bb10:	83 f8 17             	cmp    eax,0x17
c001bb13:	76 40                	jbe    c001bb55 <int_handler+0x63>
c001bb15:	c1 e6 04             	shl    esi,0x4
c001bb18:	31 db                	xor    ebx,ebx
c001bb1a:	8d ae 60 84 03 c0    	lea    ebp,[esi-0x3ffc7ba0]
c001bb20:	81 c6 60 74 03 c0    	add    esi,0xc0037460
c001bb26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bb2a:	85 c0                	test   eax,eax
c001bb2c:	74 13                	je     c001bb41 <int_handler+0x4f>
c001bb2e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bb32:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bb35:	74 2c                	je     c001bb63 <int_handler+0x71>
c001bb37:	83 ec 08             	sub    esp,0x8
c001bb3a:	52                   	push   edx
c001bb3b:	57                   	push   edi
c001bb3c:	ff d0                	call   eax
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	83 c3 01             	add    ebx,0x1
c001bb44:	83 fb 04             	cmp    ebx,0x4
c001bb47:	75 dd                	jne    c001bb26 <int_handler+0x34>
c001bb49:	83 c4 0c             	add    esp,0xc
c001bb4c:	31 c0                	xor    eax,eax
c001bb4e:	5b                   	pop    ebx
c001bb4f:	31 d2                	xor    edx,edx
c001bb51:	5e                   	pop    esi
c001bb52:	5f                   	pop    edi
c001bb53:	5d                   	pop    ebp
c001bb54:	c3                   	ret    
c001bb55:	83 ec 0c             	sub    esp,0xc
c001bb58:	50                   	push   eax
c001bb59:	e8 e8 fb ff ff       	call   c001b746 <HalEndOfInterrupt(int)>
c001bb5e:	83 c4 10             	add    esp,0x10
c001bb61:	eb b2                	jmp    c001bb15 <int_handler+0x23>
c001bb63:	83 ec 08             	sub    esp,0x8
c001bb66:	52                   	push   edx
c001bb67:	57                   	push   edi
c001bb68:	ff d0                	call   eax
c001bb6a:	83 c4 10             	add    esp,0x10
c001bb6d:	83 c4 0c             	add    esp,0xc
c001bb70:	5b                   	pop    ebx
c001bb71:	5e                   	pop    esi
c001bb72:	5f                   	pop    edi
c001bb73:	5d                   	pop    ebp
c001bb74:	c3                   	ret    

c001bb75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001bb75:	56                   	push   esi
c001bb76:	31 c0                	xor    eax,eax
c001bb78:	53                   	push   ebx
c001bb79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb85:	89 ca                	mov    edx,ecx
c001bb87:	c1 e2 04             	shl    edx,0x4
c001bb8a:	83 bc 82 60 84 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc7ba0],0x0
c001bb92:	74 17                	je     c001bbab <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bb94:	83 c0 01             	add    eax,0x1
c001bb97:	83 f8 04             	cmp    eax,0x4
c001bb9a:	75 ee                	jne    c001bb8a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bb9c:	c7 44 24 0c bd d8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002d8bd
c001bba4:	5b                   	pop    ebx
c001bba5:	5e                   	pop    esi
c001bba6:	e9 ed 4c ff ff       	jmp    c0010898 <KePanic(char const*)>
c001bbab:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bbae:	89 1c 85 60 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ba0],ebx
c001bbb5:	5b                   	pop    ebx
c001bbb6:	89 34 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],esi
c001bbbd:	5e                   	pop    esi
c001bbbe:	c3                   	ret    

c001bbbf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bbbf:	55                   	push   ebp
c001bbc0:	57                   	push   edi
c001bbc1:	56                   	push   esi
c001bbc2:	53                   	push   ebx
c001bbc3:	83 ec 0c             	sub    esp,0xc
c001bbc6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bbca:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001bbd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbd5:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bbd8:	74 57                	je     c001bc31 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001bbda:	84 c0                	test   al,al
c001bbdc:	89 c7                	mov    edi,eax
c001bbde:	74 1d                	je     c001bbfd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001bbe0:	83 fe 0f             	cmp    esi,0xf
c001bbe3:	0f 8f d9 00 00 00    	jg     c001bcc2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001bbe9:	0f b6 b6 88 05 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcfa78]
c001bbf0:	0f b7 bc 36 20 6e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc91e0]
c001bbf8:	d1 ef                	shr    edi,1
c001bbfa:	83 e7 01             	and    edi,0x1
c001bbfd:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c001bc02:	83 ec 08             	sub    esp,0x8
c001bc05:	31 db                	xor    ebx,ebx
c001bc07:	50                   	push   eax
c001bc08:	68 ca d8 02 c0       	push   0xc002d8ca
c001bc0d:	e8 54 b3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001bc12:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	85 c0                	test   eax,eax
c001bc1c:	7f 59                	jg     c001bc77 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001bc1e:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc21:	83 ec 0c             	sub    esp,0xc
c001bc24:	68 e1 d8 02 c0       	push   0xc002d8e1
c001bc29:	e8 6a 4c ff ff       	call   c0010898 <KePanic(char const*)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	89 e8                	mov    eax,ebp
c001bc33:	31 d2                	xor    edx,edx
c001bc35:	c1 e0 04             	shl    eax,0x4
c001bc38:	8b 8c 90 60 84 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc7ba0]
c001bc3f:	85 c9                	test   ecx,ecx
c001bc41:	0f 84 92 00 00 00    	je     c001bcd9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001bc47:	83 c2 01             	add    edx,0x1
c001bc4a:	83 fa 04             	cmp    edx,0x4
c001bc4d:	75 e9                	jne    c001bc38 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001bc4f:	83 ec 0c             	sub    esp,0xc
c001bc52:	68 98 d8 02 c0       	push   0xc002d898
c001bc57:	e8 3c 4c ff ff       	call   c0010898 <KePanic(char const*)>
c001bc5c:	83 c4 10             	add    esp,0x10
c001bc5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc64:	83 c4 0c             	add    esp,0xc
c001bc67:	5b                   	pop    ebx
c001bc68:	5e                   	pop    esi
c001bc69:	5f                   	pop    edi
c001bc6a:	5d                   	pop    ebp
c001bc6b:	c3                   	ret    
c001bc6c:	83 c3 01             	add    ebx,0x1
c001bc6f:	39 1d c0 73 03 c0    	cmp    DWORD PTR ds:0xc00373c0,ebx
c001bc75:	7e a7                	jle    c001bc1e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001bc77:	8b 2c 9d e0 73 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffc8c20]
c001bc7e:	83 ec 08             	sub    esp,0x8
c001bc81:	56                   	push   esi
c001bc82:	55                   	push   ebp
c001bc83:	e8 e2 db ff ff       	call   c001986a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	84 c0                	test   al,al
c001bc8d:	74 dd                	je     c001bc6c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001bc8f:	89 f8                	mov    eax,edi
c001bc91:	83 ec 04             	sub    esp,0x4
c001bc94:	8b 1c 9d e0 73 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffc8c20]
c001bc9b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc9e:	0f b6 f8             	movzx  edi,al
c001bca1:	57                   	push   edi
c001bca2:	89 e8                	mov    eax,ebp
c001bca4:	6a 00                	push   0x0
c001bca6:	0f b6 c0             	movzx  eax,al
c001bca9:	50                   	push   eax
c001bcaa:	89 f0                	mov    eax,esi
c001bcac:	6a 00                	push   0x0
c001bcae:	0f b6 c0             	movzx  eax,al
c001bcb1:	6a 00                	push   0x0
c001bcb3:	50                   	push   eax
c001bcb4:	53                   	push   ebx
c001bcb5:	e8 1c dd ff ff       	call   c00199d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bcba:	83 c4 20             	add    esp,0x20
c001bcbd:	e9 6f ff ff ff       	jmp    c001bc31 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001bcc2:	83 ec 0c             	sub    esp,0xc
c001bcc5:	31 ff                	xor    edi,edi
c001bcc7:	68 5c d8 02 c0       	push   0xc002d85c
c001bccc:	e8 c7 4b ff ff       	call   c0010898 <KePanic(char const*)>
c001bcd1:	83 c4 10             	add    esp,0x10
c001bcd4:	e9 24 ff ff ff       	jmp    c001bbfd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001bcd9:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001bcdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bce0:	89 14 85 60 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ba0],edx
c001bce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bceb:	89 14 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],edx
c001bcf2:	83 c4 0c             	add    esp,0xc
c001bcf5:	89 f0                	mov    eax,esi
c001bcf7:	5b                   	pop    ebx
c001bcf8:	5e                   	pop    esi
c001bcf9:	5f                   	pop    edi
c001bcfa:	5d                   	pop    ebp
c001bcfb:	c3                   	ret    

c001bcfc <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001bcfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd04:	c1 e0 04             	shl    eax,0x4
c001bd07:	8d 50 10             	lea    edx,[eax+0x10]
c001bd0a:	39 88 60 84 03 c0    	cmp    DWORD PTR [eax-0x3ffc7ba0],ecx
c001bd10:	74 08                	je     c001bd1a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bd12:	83 c0 04             	add    eax,0x4
c001bd15:	39 d0                	cmp    eax,edx
c001bd17:	75 f1                	jne    c001bd0a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bd19:	c3                   	ret    
c001bd1a:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001bd24:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bd2e:	eb e2                	jmp    c001bd12 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bd30 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bd30:	56                   	push   esi
c001bd31:	53                   	push   ebx
c001bd32:	83 ec 04             	sub    esp,0x4
c001bd35:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd42:	74 09                	je     c001bd4d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd44:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001bd4b:	75 34                	jne    c001bd81 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001bd4d:	8d 43 20             	lea    eax,[ebx+0x20]
c001bd50:	c1 e0 04             	shl    eax,0x4
c001bd53:	8d 50 10             	lea    edx,[eax+0x10]
c001bd56:	39 b0 60 84 03 c0    	cmp    DWORD PTR [eax-0x3ffc7ba0],esi
c001bd5c:	74 0d                	je     c001bd6b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001bd5e:	83 c0 04             	add    eax,0x4
c001bd61:	39 d0                	cmp    eax,edx
c001bd63:	75 f1                	jne    c001bd56 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001bd65:	83 c4 04             	add    esp,0x4
c001bd68:	5b                   	pop    ebx
c001bd69:	5e                   	pop    esi
c001bd6a:	c3                   	ret    
c001bd6b:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001bd75:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bd7f:	eb dd                	jmp    c001bd5e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001bd81:	83 fb 0f             	cmp    ebx,0xf
c001bd84:	7f 09                	jg     c001bd8f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001bd86:	0f b6 9b 88 05 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcfa78]
c001bd8d:	eb be                	jmp    c001bd4d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd8f:	83 ec 0c             	sub    esp,0xc
c001bd92:	68 ee d8 02 c0       	push   0xc002d8ee
c001bd97:	e8 fc 4a ff ff       	call   c0010898 <KePanic(char const*)>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	eb ac                	jmp    c001bd4d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bda1:	66 90                	xchg   ax,ax
c001bda3:	90                   	nop

c001bda4 <picIoWait()>:
c001bda4:	eb 00                	jmp    c001bda6 <picIoWait()+0x2>
c001bda6:	eb 00                	jmp    c001bda8 <picIoWait()+0x4>
c001bda8:	90                   	nop
c001bda9:	c3                   	ret    
c001bdaa:	66 90                	xchg   ax,ax

c001bdac <picDisable()>:
c001bdac:	83 ec 10             	sub    esp,0x10
c001bdaf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001bdb6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001bdbb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bdbf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bdc4:	ee                   	out    dx,al
c001bdc5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001bdcc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001bdd1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bdd5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001bdda:	ee                   	out    dx,al
c001bddb:	90                   	nop
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	c3                   	ret    

c001bde0 <picGetIRQReg(int)>:
c001bde0:	83 ec 10             	sub    esp,0x10
c001bde3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bde7:	0f b6 c0             	movzx  eax,al
c001bdea:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bdf1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001bdf5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bdf9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bdfe:	ee                   	out    dx,al
c001bdff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be03:	0f b6 c0             	movzx  eax,al
c001be06:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001be0d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001be11:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001be15:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001be1a:	ee                   	out    dx,al
c001be1b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001be22:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001be27:	89 c2                	mov    edx,eax
c001be29:	ec                   	in     al,dx
c001be2a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001be2e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001be32:	0f b6 c0             	movzx  eax,al
c001be35:	c1 e0 08             	shl    eax,0x8
c001be38:	89 c1                	mov    ecx,eax
c001be3a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001be41:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001be46:	89 c2                	mov    edx,eax
c001be48:	ec                   	in     al,dx
c001be49:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001be4d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001be51:	0f b6 c0             	movzx  eax,al
c001be54:	09 c8                	or     eax,ecx
c001be56:	83 c4 10             	add    esp,0x10
c001be59:	c3                   	ret    
c001be5a:	66 90                	xchg   ax,ax

c001be5c <picOpen()>:
c001be5c:	83 ec 50             	sub    esp,0x50
c001be5f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001be66:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001be6b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be73:	ee                   	out    dx,al
c001be74:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001be7b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001be80:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001be84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be88:	ee                   	out    dx,al
c001be89:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001be91:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001be99:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001bea0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bea4:	89 c2                	mov    edx,eax
c001bea6:	ec                   	in     al,dx
c001bea7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001beab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001beaf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001beb3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001beba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bebe:	89 c2                	mov    edx,eax
c001bec0:	ec                   	in     al,dx
c001bec1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bec5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bec9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001becd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001bed4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001bed9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001bedd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bee1:	ee                   	out    dx,al
c001bee2:	e8 bd fe ff ff       	call   c001bda4 <picIoWait()>
c001bee7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001beee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001bef3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001bef7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001befb:	ee                   	out    dx,al
c001befc:	e8 a3 fe ff ff       	call   c001bda4 <picIoWait()>
c001bf01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bf05:	0f b6 c0             	movzx  eax,al
c001bf08:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001bf0f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001bf13:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001bf17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf1b:	ee                   	out    dx,al
c001bf1c:	e8 83 fe ff ff       	call   c001bda4 <picIoWait()>
c001bf21:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf25:	0f b6 c0             	movzx  eax,al
c001bf28:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001bf2f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bf33:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bf37:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bf3b:	ee                   	out    dx,al
c001bf3c:	e8 63 fe ff ff       	call   c001bda4 <picIoWait()>
c001bf41:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001bf48:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001bf4d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001bf51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf55:	ee                   	out    dx,al
c001bf56:	e8 49 fe ff ff       	call   c001bda4 <picIoWait()>
c001bf5b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001bf62:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001bf67:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001bf6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bf6f:	ee                   	out    dx,al
c001bf70:	e8 2f fe ff ff       	call   c001bda4 <picIoWait()>
c001bf75:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001bf7c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001bf81:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001bf85:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf89:	ee                   	out    dx,al
c001bf8a:	e8 15 fe ff ff       	call   c001bda4 <picIoWait()>
c001bf8f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001bf96:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001bf9b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001bf9f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfa3:	ee                   	out    dx,al
c001bfa4:	e8 fb fd ff ff       	call   c001bda4 <picIoWait()>
c001bfa9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001bfae:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001bfb5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001bfb9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001bfbd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bfc1:	ee                   	out    dx,al
c001bfc2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001bfc7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001bfce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bfd2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001bfd6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bfda:	ee                   	out    dx,al
c001bfdb:	90                   	nop
c001bfdc:	83 c4 50             	add    esp,0x50
c001bfdf:	c3                   	ret    

c001bfe0 <picEOI(int)>:
c001bfe0:	83 ec 10             	sub    esp,0x10
c001bfe3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bfe8:	75 1e                	jne    c001c008 <picEOI(int)+0x28>
c001bfea:	6a 0b                	push   0xb
c001bfec:	e8 ef fd ff ff       	call   c001bde0 <picGetIRQReg(int)>
c001bff1:	83 c4 04             	add    esp,0x4
c001bff4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bff9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001bffe:	25 80 00 00 00       	and    eax,0x80
c001c003:	74 73                	je     c001c078 <picEOI(int)+0x98>
c001c005:	8d 76 00             	lea    esi,[esi+0x0]
c001c008:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001c00d:	75 31                	jne    c001c040 <picEOI(int)+0x60>
c001c00f:	6a 0b                	push   0xb
c001c011:	e8 ca fd ff ff       	call   c001bde0 <picGetIRQReg(int)>
c001c016:	83 c4 04             	add    esp,0x4
c001c019:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c022:	98                   	cwde   
c001c023:	85 c0                	test   eax,eax
c001c025:	78 19                	js     c001c040 <picEOI(int)+0x60>
c001c027:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001c02e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001c033:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c037:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c03c:	ee                   	out    dx,al
c001c03d:	eb 3d                	jmp    c001c07c <picEOI(int)+0x9c>
c001c03f:	90                   	nop
c001c040:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001c045:	7e 19                	jle    c001c060 <picEOI(int)+0x80>
c001c047:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001c04e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001c053:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c057:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c05c:	ee                   	out    dx,al
c001c05d:	8d 76 00             	lea    esi,[esi+0x0]
c001c060:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001c067:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001c06c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c070:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c075:	ee                   	out    dx,al
c001c076:	eb 04                	jmp    c001c07c <picEOI(int)+0x9c>
c001c078:	90                   	nop
c001c079:	8d 76 00             	lea    esi,[esi+0x0]
c001c07c:	83 c4 10             	add    esp,0x10
c001c07f:	c3                   	ret    

c001c080 <RTC::open(int, int, void*)>:
c001c080:	31 c0                	xor    eax,eax
c001c082:	c3                   	ret    
c001c083:	90                   	nop

c001c084 <RTC::close(int, int, void*)>:
c001c084:	31 c0                	xor    eax,eax
c001c086:	c3                   	ret    
c001c087:	90                   	nop

c001c088 <RTC::timeInSecondsUTC()>:
c001c088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c08c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001c092:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c098:	c3                   	ret    
c001c099:	90                   	nop

c001c09a <RTC::timeInDatetimeUTC()>:
c001c09a:	53                   	push   ebx
c001c09b:	83 ec 14             	sub    esp,0x14
c001c09e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c0a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c0a8:	50                   	push   eax
c001c0a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001c0ac:	83 c4 0c             	add    esp,0xc
c001c0af:	52                   	push   edx
c001c0b0:	50                   	push   eax
c001c0b1:	53                   	push   ebx
c001c0b2:	e8 b5 e2 fe ff       	call   c000a36c <KeSecondsToDatetime(unsigned long long)>
c001c0b7:	89 d8                	mov    eax,ebx
c001c0b9:	83 c4 14             	add    esp,0x14
c001c0bc:	5b                   	pop    ebx
c001c0bd:	c2 04 00             	ret    0x4

c001c0c0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001c0c0:	56                   	push   esi
c001c0c1:	53                   	push   ebx
c001c0c2:	83 ec 14             	sub    esp,0x14
c001c0c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c0c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0cb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001c0ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c0d2:	52                   	push   edx
c001c0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0db:	50                   	push   eax
c001c0dc:	e8 8b e2 fe ff       	call   c000a36c <KeSecondsToDatetime(unsigned long long)>
c001c0e1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001c0e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c0f1:	89 f0                	mov    eax,esi
c001c0f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c0f7:	83 c4 20             	add    esp,0x20
c001c0fa:	5b                   	pop    ebx
c001c0fb:	5e                   	pop    esi
c001c0fc:	ff e0                	jmp    eax

c001c0fe <RTC::~RTC()>:
c001c0fe:	83 ec 0c             	sub    esp,0xc
c001c101:	ba 18 d9 02 c0       	mov    edx,0xc002d918
c001c106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10a:	89 10                	mov    DWORD PTR [eax],edx
c001c10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c110:	83 ec 0c             	sub    esp,0xc
c001c113:	50                   	push   eax
c001c114:	e8 2b dd fe ff       	call   c0009e44 <Clock::~Clock()>
c001c119:	83 c4 10             	add    esp,0x10
c001c11c:	90                   	nop
c001c11d:	83 c4 0c             	add    esp,0xc
c001c120:	c3                   	ret    
c001c121:	90                   	nop

c001c122 <RTC::~RTC()>:
c001c122:	83 ec 0c             	sub    esp,0xc
c001c125:	83 ec 0c             	sub    esp,0xc
c001c128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c12c:	e8 cd ff ff ff       	call   c001c0fe <RTC::~RTC()>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	83 ec 08             	sub    esp,0x8
c001c137:	68 60 01 00 00       	push   0x160
c001c13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c140:	e8 f7 1e ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c001c145:	83 c4 10             	add    esp,0x10
c001c148:	83 c4 0c             	add    esp,0xc
c001c14b:	c3                   	ret    

c001c14c <RTC::get_update_in_progress_flag()>:
c001c14c:	83 ec 18             	sub    esp,0x18
c001c14f:	6a 0a                	push   0xa
c001c151:	e8 91 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c156:	83 c4 1c             	add    esp,0x1c
c001c159:	0f b6 c0             	movzx  eax,al
c001c15c:	c1 e8 07             	shr    eax,0x7
c001c15f:	c3                   	ret    

c001c160 <RTC::completeRTCRefresh()>:
c001c160:	55                   	push   ebp
c001c161:	57                   	push   edi
c001c162:	56                   	push   esi
c001c163:	53                   	push   ebx
c001c164:	83 ec 3c             	sub    esp,0x3c
c001c167:	8b 1d 50 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b50
c001c16d:	83 ec 0c             	sub    esp,0xc
c001c170:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c174:	e8 d3 ff ff ff       	call   c001c14c <RTC::get_update_in_progress_flag()>
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	84 c0                	test   al,al
c001c17e:	74 0e                	je     c001c18e <RTC::completeRTCRefresh()+0x2e>
c001c180:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c186:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c001c18c:	73 df                	jae    c001c16d <RTC::completeRTCRefresh()+0xd>
c001c18e:	83 ec 0c             	sub    esp,0xc
c001c191:	6a 00                	push   0x0
c001c193:	e8 4f d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c198:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c19f:	89 c7                	mov    edi,eax
c001c1a1:	e8 41 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c1a6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c1ad:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001c1b1:	e8 31 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c1b6:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c1bd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001c1c1:	e8 21 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c1c6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c1cd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c1d1:	e8 11 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c1d6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c1dd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001c1e1:	e8 01 d9 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c1e6:	0f b6 c0             	movzx  eax,al
c001c1e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	8b 1d 50 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b50
c001c1f6:	83 ec 0c             	sub    esp,0xc
c001c1f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c1fd:	e8 4a ff ff ff       	call   c001c14c <RTC::get_update_in_progress_flag()>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	84 c0                	test   al,al
c001c207:	74 0e                	je     c001c217 <RTC::completeRTCRefresh()+0xb7>
c001c209:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c20f:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c001c215:	73 df                	jae    c001c1f6 <RTC::completeRTCRefresh()+0x96>
c001c217:	83 ec 0c             	sub    esp,0xc
c001c21a:	6a 00                	push   0x0
c001c21c:	e8 c6 d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c221:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c228:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c22c:	e8 b6 d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c231:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c238:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c23c:	e8 a6 d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c241:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c248:	88 c3                	mov    bl,al
c001c24a:	e8 98 d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c24f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c256:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c25a:	e8 88 d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c25f:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c266:	89 c6                	mov    esi,eax
c001c268:	e8 7a d8 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c26d:	89 f9                	mov    ecx,edi
c001c26f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c273:	83 c4 10             	add    esp,0x10
c001c276:	0f b6 e8             	movzx  ebp,al
c001c279:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c27e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001c282:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c286:	74 27                	je     c001c2af <RTC::completeRTCRefresh()+0x14f>
c001c288:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001c28c:	89 f0                	mov    eax,esi
c001c28e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c292:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c296:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c29a:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001c29e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001c2a2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c2a6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c2aa:	e9 41 ff ff ff       	jmp    c001c1f0 <RTC::completeRTCRefresh()+0x90>
c001c2af:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c2b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c2bc:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001c2c0:	75 c6                	jne    c001c288 <RTC::completeRTCRefresh()+0x128>
c001c2c2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2c7:	89 f1                	mov    ecx,esi
c001c2c9:	0f b6 fb             	movzx  edi,bl
c001c2cc:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001c2d0:	0f b6 c9             	movzx  ecx,cl
c001c2d3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001c2d7:	89 f1                	mov    ecx,esi
c001c2d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c2e1:	0f 94 c2             	sete   dl
c001c2e4:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001c2e8:	0f 94 c0             	sete   al
c001c2eb:	21 d0                	and    eax,edx
c001c2ed:	31 d2                	xor    edx,edx
c001c2ef:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001c2f3:	0f 94 c2             	sete   dl
c001c2f6:	85 c2                	test   edx,eax
c001c2f8:	74 8e                	je     c001c288 <RTC::completeRTCRefresh()+0x128>
c001c2fa:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001c2fe:	75 88                	jne    c001c288 <RTC::completeRTCRefresh()+0x128>
c001c300:	83 ec 0c             	sub    esp,0xc
c001c303:	6a 0b                	push   0xb
c001c305:	e8 dd d7 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c30a:	83 c4 10             	add    esp,0x10
c001c30d:	a8 04                	test   al,0x4
c001c30f:	75 7a                	jne    c001c38b <RTC::completeRTCRefresh()+0x22b>
c001c311:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c315:	c1 ef 04             	shr    edi,0x4
c001c318:	83 e6 0f             	and    esi,0xf
c001c31b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c31f:	c1 ed 04             	shr    ebp,0x4
c001c322:	6b ed 0a             	imul   ebp,ebp,0xa
c001c325:	c1 ea 04             	shr    edx,0x4
c001c328:	6b d2 0a             	imul   edx,edx,0xa
c001c32b:	83 e1 0f             	and    ecx,0xf
c001c32e:	01 d1                	add    ecx,edx
c001c330:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c334:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c338:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c33c:	c1 ea 04             	shr    edx,0x4
c001c33f:	6b d2 0a             	imul   edx,edx,0xa
c001c342:	83 e1 0f             	and    ecx,0xf
c001c345:	01 d1                	add    ecx,edx
c001c347:	89 fa                	mov    edx,edi
c001c349:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001c34d:	83 e2 07             	and    edx,0x7
c001c350:	89 d9                	mov    ecx,ebx
c001c352:	6b d2 0a             	imul   edx,edx,0xa
c001c355:	83 e1 0f             	and    ecx,0xf
c001c358:	83 e3 80             	and    ebx,0xffffff80
c001c35b:	01 d1                	add    ecx,edx
c001c35d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c361:	09 cb                	or     ebx,ecx
c001c363:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c367:	c1 ea 04             	shr    edx,0x4
c001c36a:	6b d2 0a             	imul   edx,edx,0xa
c001c36d:	83 e1 0f             	and    ecx,0xf
c001c370:	01 d1                	add    ecx,edx
c001c372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c376:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001c37a:	c1 ea 04             	shr    edx,0x4
c001c37d:	6b d2 0a             	imul   edx,edx,0xa
c001c380:	01 d6                	add    esi,edx
c001c382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c386:	83 e2 0f             	and    edx,0xf
c001c389:	01 d5                	add    ebp,edx
c001c38b:	a8 02                	test   al,0x2
c001c38d:	75 15                	jne    c001c3a4 <RTC::completeRTCRefresh()+0x244>
c001c38f:	f6 c3 80             	test   bl,0x80
c001c392:	74 10                	je     c001c3a4 <RTC::completeRTCRefresh()+0x244>
c001c394:	83 e3 7f             	and    ebx,0x7f
c001c397:	b9 18 00 00 00       	mov    ecx,0x18
c001c39c:	8d 43 0c             	lea    eax,[ebx+0xc]
c001c39f:	99                   	cdq    
c001c3a0:	f7 f9                	idiv   ecx
c001c3a2:	88 d3                	mov    bl,dl
c001c3a4:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001c3aa:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001c3b0:	77 06                	ja     c001c3b8 <RTC::completeRTCRefresh()+0x258>
c001c3b2:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001c3b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3bd:	31 c9                	xor    ecx,ecx
c001c3bf:	31 d2                	xor    edx,edx
c001c3c1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c3c5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001c3c9:	89 cd                	mov    ebp,ecx
c001c3cb:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001c3cf:	c1 e7 10             	shl    edi,0x10
c001c3d2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001c3d8:	c1 e0 10             	shl    eax,0x10
c001c3db:	09 c5                	or     ebp,eax
c001c3dd:	89 e9                	mov    ecx,ebp
c001c3df:	0f b7 c2             	movzx  eax,dx
c001c3e2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001c3e6:	09 f8                	or     eax,edi
c001c3e8:	89 c2                	mov    edx,eax
c001c3ea:	50                   	push   eax
c001c3eb:	50                   	push   eax
c001c3ec:	88 d9                	mov    cl,bl
c001c3ee:	51                   	push   ecx
c001c3ef:	52                   	push   edx
c001c3f0:	e8 87 db fe ff       	call   c0009f7c <KeDatetimeToSeconds(datetime_t)>
c001c3f5:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001c3f9:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001c3ff:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001c405:	83 c4 4c             	add    esp,0x4c
c001c408:	5b                   	pop    ebx
c001c409:	5e                   	pop    esi
c001c40a:	5f                   	pop    edi
c001c40b:	5d                   	pop    ebp
c001c40c:	c3                   	ret    
c001c40d:	90                   	nop

c001c40e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001c40e:	55                   	push   ebp
c001c40f:	57                   	push   edi
c001c410:	56                   	push   esi
c001c411:	53                   	push   ebx
c001c412:	83 ec 34             	sub    esp,0x34
c001c415:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c419:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c41d:	6a 00                	push   0x0
c001c41f:	6a 00                	push   0x0
c001c421:	e8 15 d7 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c426:	5d                   	pop    ebp
c001c427:	89 fb                	mov    ebx,edi
c001c429:	58                   	pop    eax
c001c42a:	6a 00                	push   0x0
c001c42c:	6a 02                	push   0x2
c001c42e:	e8 08 d7 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c433:	89 f8                	mov    eax,edi
c001c435:	89 f9                	mov    ecx,edi
c001c437:	0f b6 c4             	movzx  eax,ah
c001c43a:	31 d2                	xor    edx,edx
c001c43c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c440:	c1 e9 10             	shr    ecx,0x10
c001c443:	89 f0                	mov    eax,esi
c001c445:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c449:	89 f0                	mov    eax,esi
c001c44b:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001c44f:	0f b6 c4             	movzx  eax,ah
c001c452:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c456:	89 f0                	mov    eax,esi
c001c458:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c45c:	c1 e8 10             	shr    eax,0x10
c001c45f:	b9 64 00 00 00       	mov    ecx,0x64
c001c464:	f7 f1                	div    ecx
c001c466:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001c46d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c471:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c475:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c479:	e8 69 d6 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	a8 04                	test   al,0x4
c001c483:	89 c5                	mov    ebp,eax
c001c485:	75 6e                	jne    c001c4f5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001c487:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c48b:	31 d2                	xor    edx,edx
c001c48d:	0f b6 c1             	movzx  eax,cl
c001c490:	b9 0a 00 00 00       	mov    ecx,0xa
c001c495:	f7 f1                	div    ecx
c001c497:	c1 e0 04             	shl    eax,0x4
c001c49a:	09 d0                	or     eax,edx
c001c49c:	31 d2                	xor    edx,edx
c001c49e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c4a7:	f7 f1                	div    ecx
c001c4a9:	c1 e0 04             	shl    eax,0x4
c001c4ac:	09 d0                	or     eax,edx
c001c4ae:	31 d2                	xor    edx,edx
c001c4b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4b4:	0f b6 c3             	movzx  eax,bl
c001c4b7:	f7 f1                	div    ecx
c001c4b9:	c1 e0 04             	shl    eax,0x4
c001c4bc:	09 d0                	or     eax,edx
c001c4be:	31 d2                	xor    edx,edx
c001c4c0:	89 c3                	mov    ebx,eax
c001c4c2:	89 f0                	mov    eax,esi
c001c4c4:	0f b6 c0             	movzx  eax,al
c001c4c7:	f7 f1                	div    ecx
c001c4c9:	c1 e0 04             	shl    eax,0x4
c001c4cc:	09 d0                	or     eax,edx
c001c4ce:	31 d2                	xor    edx,edx
c001c4d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4d9:	f7 f1                	div    ecx
c001c4db:	c1 e0 04             	shl    eax,0x4
c001c4de:	09 d0                	or     eax,edx
c001c4e0:	31 d2                	xor    edx,edx
c001c4e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4ea:	f7 f1                	div    ecx
c001c4ec:	c1 e0 04             	shl    eax,0x4
c001c4ef:	09 d0                	or     eax,edx
c001c4f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4f5:	83 e5 02             	and    ebp,0x2
c001c4f8:	75 1e                	jne    c001c518 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c4fa:	0f b6 c3             	movzx  eax,bl
c001c4fd:	83 f8 0b             	cmp    eax,0xb
c001c500:	76 10                	jbe    c001c512 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001c502:	8d 53 f4             	lea    edx,[ebx-0xc]
c001c505:	84 d2                	test   dl,dl
c001c507:	88 d3                	mov    bl,dl
c001c509:	75 02                	jne    c001c50d <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001c50b:	b3 0c                	mov    bl,0xc
c001c50d:	83 cb 80             	or     ebx,0xffffff80
c001c510:	eb 06                	jmp    c001c518 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c512:	85 c0                	test   eax,eax
c001c514:	75 02                	jne    c001c518 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c516:	b3 0c                	mov    bl,0xc
c001c518:	50                   	push   eax
c001c519:	0f b6 db             	movzx  ebx,bl
c001c51c:	50                   	push   eax
c001c51d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c522:	52                   	push   edx
c001c523:	6a 00                	push   0x0
c001c525:	e8 11 d6 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c52a:	5a                   	pop    edx
c001c52b:	59                   	pop    ecx
c001c52c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c531:	50                   	push   eax
c001c532:	6a 02                	push   0x2
c001c534:	e8 02 d6 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c539:	5e                   	pop    esi
c001c53a:	5f                   	pop    edi
c001c53b:	53                   	push   ebx
c001c53c:	6a 04                	push   0x4
c001c53e:	e8 f8 d5 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c543:	5d                   	pop    ebp
c001c544:	58                   	pop    eax
c001c545:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001c54a:	52                   	push   edx
c001c54b:	6a 07                	push   0x7
c001c54d:	e8 e9 d5 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c552:	58                   	pop    eax
c001c553:	5a                   	pop    edx
c001c554:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c559:	50                   	push   eax
c001c55a:	6a 08                	push   0x8
c001c55c:	e8 da d5 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c561:	59                   	pop    ecx
c001c562:	5b                   	pop    ebx
c001c563:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c568:	55                   	push   ebp
c001c569:	6a 09                	push   0x9
c001c56b:	e8 cb d5 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c570:	5e                   	pop    esi
c001c571:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c575:	e8 e6 fb ff ff       	call   c001c160 <RTC::completeRTCRefresh()>
c001c57a:	83 c4 3c             	add    esp,0x3c
c001c57d:	b0 01                	mov    al,0x1
c001c57f:	5b                   	pop    ebx
c001c580:	5e                   	pop    esi
c001c581:	5f                   	pop    edi
c001c582:	5d                   	pop    ebp
c001c583:	c3                   	ret    

c001c584 <rtcIRQHandler(regs*, void*)>:
c001c584:	53                   	push   ebx
c001c585:	83 ec 14             	sub    esp,0x14
c001c588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c58c:	6a 0c                	push   0xc
c001c58e:	e8 54 d5 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c593:	83 c4 10             	add    esp,0x10
c001c596:	a8 80                	test   al,0x80
c001c598:	74 24                	je     c001c5be <rtcIRQHandler(regs*, void*)+0x3a>
c001c59a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c5a1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c5a8:	66 ff 05 60 94 03 c0 	inc    WORD PTR ds:0xc0039460
c001c5af:	75 0d                	jne    c001c5be <rtcIRQHandler(regs*, void*)+0x3a>
c001c5b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c5b5:	83 c4 08             	add    esp,0x8
c001c5b8:	5b                   	pop    ebx
c001c5b9:	e9 a2 fb ff ff       	jmp    c001c160 <RTC::completeRTCRefresh()>
c001c5be:	83 c4 08             	add    esp,0x8
c001c5c1:	5b                   	pop    ebx
c001c5c2:	c3                   	ret    
c001c5c3:	90                   	nop

c001c5c4 <RTC::RTC()>:
c001c5c4:	83 ec 1c             	sub    esp,0x1c
c001c5c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5cb:	83 ec 08             	sub    esp,0x8
c001c5ce:	68 fb d8 02 c0       	push   0xc002d8fb
c001c5d3:	50                   	push   eax
c001c5d4:	e8 35 d8 fe ff       	call   c0009e0e <Clock::Clock(char const*)>
c001c5d9:	83 c4 10             	add    esp,0x10
c001c5dc:	ba 18 d9 02 c0       	mov    edx,0xc002d918
c001c5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5e5:	89 10                	mov    DWORD PTR [eax],edx
c001c5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5eb:	83 ec 0c             	sub    esp,0xc
c001c5ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5f2:	6a 01                	push   0x1
c001c5f4:	68 84 c5 01 c0       	push   0xc001c584
c001c5f9:	6a 08                	push   0x8
c001c5fb:	50                   	push   eax
c001c5fc:	e8 f9 e0 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c601:	83 c4 20             	add    esp,0x20
c001c604:	89 c2                	mov    edx,eax
c001c606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c60a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c610:	fa                   	cli    
c001c611:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001c616:	83 c0 01             	add    eax,0x1
c001c619:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	6a 0b                	push   0xb
c001c623:	e8 bf d4 ff ff       	call   c0019ae7 <x86ReadCMOS(unsigned char)>
c001c628:	83 c4 10             	add    esp,0x10
c001c62b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c62f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c633:	83 c8 10             	or     eax,0x10
c001c636:	0f b6 c0             	movzx  eax,al
c001c639:	83 ec 08             	sub    esp,0x8
c001c63c:	50                   	push   eax
c001c63d:	6a 0b                	push   0xb
c001c63f:	e8 f7 d4 ff ff       	call   c0019b3b <x86WriteCMOS(unsigned char, unsigned char)>
c001c644:	83 c4 10             	add    esp,0x10
c001c647:	83 ec 0c             	sub    esp,0xc
c001c64a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c64e:	e8 0d fb ff ff       	call   c001c160 <RTC::completeRTCRefresh()>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001c65e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001c663:	85 c0                	test   eax,eax
c001c665:	75 01                	jne    c001c668 <RTC::RTC()+0xa4>
c001c667:	fb                   	sti    
c001c668:	90                   	nop
c001c669:	83 c4 1c             	add    esp,0x1c
c001c66c:	c3                   	ret    
c001c66d:	66 90                	xchg   ax,ax
c001c66f:	90                   	nop

c001c670 <HalConsoleScroll(int, int)>:
c001c670:	83 ec 10             	sub    esp,0x10
c001c673:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c67b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c683:	90                   	nop
c001c684:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c689:	0f 8f e1 00 00 00    	jg     c001c770 <HalConsoleScroll(int, int)+0x100>
c001c68f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c697:	90                   	nop
c001c698:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c6a0:	0f 8f be 00 00 00    	jg     c001c764 <HalConsoleScroll(int, int)+0xf4>
c001c6a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c6aa:	89 d0                	mov    eax,edx
c001c6ac:	c1 e0 02             	shl    eax,0x2
c001c6af:	01 d0                	add    eax,edx
c001c6b1:	c1 e0 05             	shl    eax,0x5
c001c6b4:	89 c2                	mov    edx,eax
c001c6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6ba:	01 d0                	add    eax,edx
c001c6bc:	89 c2                	mov    edx,eax
c001c6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c6c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c6c9:	89 d0                	mov    eax,edx
c001c6cb:	c1 e0 02             	shl    eax,0x2
c001c6ce:	01 d0                	add    eax,edx
c001c6d0:	c1 e0 05             	shl    eax,0x5
c001c6d3:	89 c2                	mov    edx,eax
c001c6d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6d9:	01 d0                	add    eax,edx
c001c6db:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c6e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e5:	01 d0                	add    eax,edx
c001c6e7:	8a 11                	mov    dl,BYTE PTR [ecx]
c001c6e9:	88 10                	mov    BYTE PTR [eax],dl
c001c6eb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c6f0:	75 66                	jne    c001c758 <HalConsoleScroll(int, int)+0xe8>
c001c6f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6f6:	83 e0 01             	and    eax,0x1
c001c6f9:	74 39                	je     c001c734 <HalConsoleScroll(int, int)+0xc4>
c001c6fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6ff:	83 e0 0f             	and    eax,0xf
c001c702:	88 c2                	mov    dl,al
c001c704:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c708:	c1 e0 04             	shl    eax,0x4
c001c70b:	09 d0                	or     eax,edx
c001c70d:	88 c1                	mov    cl,al
c001c70f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c713:	89 d0                	mov    eax,edx
c001c715:	c1 e0 02             	shl    eax,0x2
c001c718:	01 d0                	add    eax,edx
c001c71a:	c1 e0 05             	shl    eax,0x5
c001c71d:	89 c2                	mov    edx,eax
c001c71f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c723:	01 d0                	add    eax,edx
c001c725:	89 c2                	mov    edx,eax
c001c727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c72b:	01 d0                	add    eax,edx
c001c72d:	88 ca                	mov    dl,cl
c001c72f:	88 10                	mov    BYTE PTR [eax],dl
c001c731:	eb 25                	jmp    c001c758 <HalConsoleScroll(int, int)+0xe8>
c001c733:	90                   	nop
c001c734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c738:	89 d0                	mov    eax,edx
c001c73a:	c1 e0 02             	shl    eax,0x2
c001c73d:	01 d0                	add    eax,edx
c001c73f:	c1 e0 05             	shl    eax,0x5
c001c742:	89 c2                	mov    edx,eax
c001c744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c748:	01 d0                	add    eax,edx
c001c74a:	89 c2                	mov    edx,eax
c001c74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c750:	01 d0                	add    eax,edx
c001c752:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c755:	8d 76 00             	lea    esi,[esi+0x0]
c001c758:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c75d:	e9 36 ff ff ff       	jmp    c001c698 <HalConsoleScroll(int, int)+0x28>
c001c762:	66 90                	xchg   ax,ax
c001c764:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c769:	e9 16 ff ff ff       	jmp    c001c684 <HalConsoleScroll(int, int)+0x14>
c001c76e:	66 90                	xchg   ax,ax
c001c770:	90                   	nop
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	c3                   	ret    
c001c775:	8d 76 00             	lea    esi,[esi+0x0]

c001c778 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c778:	83 ec 14             	sub    esp,0x14
c001c77b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c77f:	88 04 24             	mov    BYTE PTR [esp],al
c001c782:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c785:	0f b6 c0             	movzx  eax,al
c001c788:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c78c:	89 d1                	mov    ecx,edx
c001c78e:	83 e1 0f             	and    ecx,0xf
c001c791:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c795:	c1 e2 04             	shl    edx,0x4
c001c798:	0f b6 d2             	movzx  edx,dl
c001c79b:	09 ca                	or     edx,ecx
c001c79d:	c1 e2 08             	shl    edx,0x8
c001c7a0:	09 d0                	or     eax,edx
c001c7a2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c7a7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c7af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c7b3:	89 d0                	mov    eax,edx
c001c7b5:	c1 e0 02             	shl    eax,0x2
c001c7b8:	01 d0                	add    eax,edx
c001c7ba:	c1 e0 04             	shl    eax,0x4
c001c7bd:	89 c2                	mov    edx,eax
c001c7bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7c3:	01 d0                	add    eax,edx
c001c7c5:	d1 e0                	shl    eax,1
c001c7c7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c7cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7cf:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001c7d4:	66 89 10             	mov    WORD PTR [eax],dx
c001c7d7:	90                   	nop
c001c7d8:	83 c4 14             	add    esp,0x14
c001c7db:	c3                   	ret    

c001c7dc <HalConsoleCursorUpdate(int, int)>:
c001c7dc:	83 ec 20             	sub    esp,0x20
c001c7df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7e3:	89 c2                	mov    edx,eax
c001c7e5:	c1 e2 02             	shl    edx,0x2
c001c7e8:	01 d0                	add    eax,edx
c001c7ea:	c1 e0 04             	shl    eax,0x4
c001c7ed:	89 c2                	mov    edx,eax
c001c7ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7f3:	01 d0                	add    eax,edx
c001c7f5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c7fa:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c801:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c806:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c80a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c80e:	ee                   	out    dx,al
c001c80f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c814:	0f b6 c0             	movzx  eax,al
c001c817:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c81e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c822:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c826:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c82a:	ee                   	out    dx,al
c001c82b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c832:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c837:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c83b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c83f:	ee                   	out    dx,al
c001c840:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c845:	c1 e8 08             	shr    eax,0x8
c001c848:	0f b6 c0             	movzx  eax,al
c001c84b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c852:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c856:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c85a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85e:	ee                   	out    dx,al
c001c85f:	90                   	nop
c001c860:	83 c4 20             	add    esp,0x20
c001c863:	c3                   	ret    

c001c864 <ACPIDriver::initialise()>:
c001c864:	90                   	nop
c001c865:	c3                   	ret    
c001c866:	66 90                	xchg   ax,ax

c001c868 <ACPIDriver::detect()>:
c001c868:	90                   	nop
c001c869:	c3                   	ret    
c001c86a:	66 90                	xchg   ax,ax

c001c86c <ACPIDriver::deinitialise()>:
c001c86c:	90                   	nop
c001c86d:	c3                   	ret    
c001c86e:	66 90                	xchg   ax,ax

c001c870 <ACPIDriver::setPowerState(DevicePowerState)>:
c001c870:	90                   	nop
c001c871:	c3                   	ret    
c001c872:	66 90                	xchg   ax,ax

c001c874 <ACPIDriver::getHumanReadableName()>:
c001c874:	b8 12 b1 02 c0       	mov    eax,0xc002b112
c001c879:	c3                   	ret    

c001c87a <DMA8237::detect()>:
c001c87a:	c3                   	ret    
c001c87b:	90                   	nop

c001c87c <DMA8237::deinitialise()>:
c001c87c:	c3                   	ret    
c001c87d:	90                   	nop

c001c87e <DMA8237::setPowerState(DevicePowerState)>:
c001c87e:	c3                   	ret    
c001c87f:	90                   	nop

c001c880 <DMA8237::getHumanReadableName()>:
c001c880:	b8 68 d9 02 c0       	mov    eax,0xc002d968
c001c885:	c3                   	ret    

c001c886 <DMA8237::initialise()>:
c001c886:	53                   	push   ebx
c001c887:	83 ec 08             	sub    esp,0x8
c001c88a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c88e:	6a 01                	push   0x1
c001c890:	6a 10                	push   0x10
c001c892:	6a 00                	push   0x0
c001c894:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c897:	e8 58 b5 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c89c:	6a 02                	push   0x2
c001c89e:	6a 20                	push   0x20
c001c8a0:	68 c0 00 00 00       	push   0xc0
c001c8a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c8a8:	e8 47 b5 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c8ad:	83 c4 20             	add    esp,0x20
c001c8b0:	6a 01                	push   0x1
c001c8b2:	6a 03                	push   0x3
c001c8b4:	68 81 00 00 00       	push   0x81
c001c8b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c8bc:	e8 33 b5 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c8c1:	6a 01                	push   0x1
c001c8c3:	6a 01                	push   0x1
c001c8c5:	68 87 00 00 00       	push   0x87
c001c8ca:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c8cd:	e8 22 b5 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c8d2:	83 c4 20             	add    esp,0x20
c001c8d5:	6a 01                	push   0x1
c001c8d7:	6a 03                	push   0x3
c001c8d9:	68 89 00 00 00       	push   0x89
c001c8de:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c8e1:	e8 0e b5 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c8e6:	6a 01                	push   0x1
c001c8e8:	6a 01                	push   0x1
c001c8ea:	68 8f 00 00 00       	push   0x8f
c001c8ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001c8f2:	e8 fd b4 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c8f7:	31 c0                	xor    eax,eax
c001c8f9:	c6 43 08 ee          	mov    BYTE PTR [ebx+0x8],0xee
c001c8fd:	e6 0d                	out    0xd,al
c001c8ff:	e6 da                	out    0xda,al
c001c901:	83 c4 28             	add    esp,0x28
c001c904:	5b                   	pop    ebx
c001c905:	c3                   	ret    

c001c906 <DMAChannel::DMAChannel(int)>:
c001c906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c90a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001c911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c915:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c920:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c924:	89 10                	mov    DWORD PTR [eax],edx
c001c926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c92a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001c931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c935:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c940:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001c944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c948:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c001c94c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001c951:	0f 9f c2             	setg   dl
c001c954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c958:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
c001c95b:	90                   	nop
c001c95c:	c3                   	ret    
c001c95d:	90                   	nop

c001c95e <DMAChannel::~DMAChannel()>:
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c965:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c968:	85 c0                	test   eax,eax
c001c96a:	74 1b                	je     c001c987 <DMAChannel::~DMAChannel()+0x29>
c001c96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c970:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001c973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c977:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c97a:	83 ec 08             	sub    esp,0x8
c001c97d:	52                   	push   edx
c001c97e:	50                   	push   eax
c001c97f:	e8 0e 40 ff ff       	call   c0010992 <Phys::freeDMA(unsigned long, unsigned long)>
c001c984:	83 c4 10             	add    esp,0x10
c001c987:	90                   	nop
c001c988:	83 c4 0c             	add    esp,0xc
c001c98b:	c3                   	ret    

c001c98c <DMAChannel::getAddress()>:
c001c98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c993:	c3                   	ret    

c001c994 <DMAChannel::getChannelNum()>:
c001c994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c998:	8b 00                	mov    eax,DWORD PTR [eax]
c001c99a:	c3                   	ret    
c001c99b:	90                   	nop

c001c99c <DMAChannel::setLength(unsigned int)>:
c001c99c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a4:	3d 00 00 01 00       	cmp    eax,0x10000
c001c9a9:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001c9ac:	76 0d                	jbe    c001c9bb <DMAChannel::setLength(unsigned int)+0x1f>
c001c9ae:	c7 44 24 04 88 d9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d988
c001c9b6:	e9 dd 3e ff ff       	jmp    c0010898 <KePanic(char const*)>
c001c9bb:	c3                   	ret    

c001c9bc <DMAChannel::setAddress(unsigned int)>:
c001c9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c9c7:	c3                   	ret    

c001c9c8 <DMAChannel::allocateAddressAndSet(unsigned short)>:
c001c9c8:	56                   	push   esi
c001c9c9:	53                   	push   ebx
c001c9ca:	83 ec 10             	sub    esp,0x10
c001c9cd:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
c001c9d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c9d6:	56                   	push   esi
c001c9d7:	e8 c8 3e ff ff       	call   c00108a4 <Phys::allocateDMA(unsigned long)>
c001c9dc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001c9df:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c001c9e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001c9e5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001c9e8:	83 c4 14             	add    esp,0x14
c001c9eb:	5b                   	pop    ebx
c001c9ec:	5e                   	pop    esi
c001c9ed:	c3                   	ret    

c001c9ee <DMAChannel::stop()>:
c001c9ee:	c3                   	ret    
c001c9ef:	90                   	nop

c001c9f0 <DMAChannel::mask(bool)>:
c001c9f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9f4:	b1 04                	mov    cl,0x4
c001c9f6:	8b 02                	mov    eax,DWORD PTR [edx]
c001c9f8:	83 e0 03             	and    eax,0x3
c001c9fb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ca00:	75 02                	jne    c001ca04 <DMAChannel::mask(bool)+0x14>
c001ca02:	31 c9                	xor    ecx,ecx
c001ca04:	0f b6 52 0e          	movzx  edx,BYTE PTR [edx+0xe]
c001ca08:	09 c8                	or     eax,ecx
c001ca0a:	83 fa 01             	cmp    edx,0x1
c001ca0d:	19 d2                	sbb    edx,edx
c001ca0f:	80 e2 36             	and    dl,0x36
c001ca12:	81 c2 d4 00 00 00    	add    edx,0xd4
c001ca18:	ee                   	out    dx,al
c001ca19:	c3                   	ret    

c001ca1a <DMAChannel::unmask()>:
c001ca1a:	6a 00                	push   0x0
c001ca1c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ca20:	e8 cb ff ff ff       	call   c001c9f0 <DMAChannel::mask(bool)>
c001ca25:	58                   	pop    eax
c001ca26:	5a                   	pop    edx
c001ca27:	c3                   	ret    

c001ca28 <DMAChannel::setMode(unsigned char)>:
c001ca28:	53                   	push   ebx
c001ca29:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ca2d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ca31:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
c001ca35:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
c001ca38:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ca3c:	74 27                	je     c001ca65 <DMAChannel::setMode(unsigned char)+0x3d>
c001ca3e:	6a 01                	push   0x1
c001ca40:	53                   	push   ebx
c001ca41:	e8 aa ff ff ff       	call   c001c9f0 <DMAChannel::mask(bool)>
c001ca46:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
c001ca49:	5a                   	pop    edx
c001ca4a:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001ca4e:	59                   	pop    ecx
c001ca4f:	83 fa 01             	cmp    edx,0x1
c001ca52:	19 d2                	sbb    edx,edx
c001ca54:	80 e2 35             	and    dl,0x35
c001ca57:	81 c2 d6 00 00 00    	add    edx,0xd6
c001ca5d:	ee                   	out    dx,al
c001ca5e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ca62:	5b                   	pop    ebx
c001ca63:	eb b5                	jmp    c001ca1a <DMAChannel::unmask()>
c001ca65:	5b                   	pop    ebx
c001ca66:	c3                   	ret    
c001ca67:	90                   	nop

c001ca68 <DMAChannel::start()>:
c001ca68:	55                   	push   ebp
c001ca69:	57                   	push   edi
c001ca6a:	56                   	push   esi
c001ca6b:	53                   	push   ebx
c001ca6c:	83 ec 1c             	sub    esp,0x1c
c001ca6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca75:	83 f8 07             	cmp    eax,0x7
c001ca78:	77 5b                	ja     c001cad5 <DMAChannel::start()+0x6d>
c001ca7a:	8a 88 fc d9 02 c0    	mov    cl,BYTE PTR [eax-0x3ffd2604]
c001ca80:	0f b6 b0 04 da 02 c0 	movzx  esi,BYTE PTR [eax-0x3ffd25fc]
c001ca87:	8a 80 f4 d9 02 c0    	mov    al,BYTE PTR [eax-0x3ffd260c]
c001ca8d:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c001ca91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca95:	fa                   	cli    
c001ca96:	6a 01                	push   0x1
c001ca98:	53                   	push   ebx
c001ca99:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001ca9f:	e8 4c ff ff ff       	call   c001c9f0 <DMAChannel::mask(bool)>
c001caa4:	0f b6 7b 0e          	movzx  edi,BYTE PTR [ebx+0xe]
c001caa8:	58                   	pop    eax
c001caa9:	5a                   	pop    edx
c001caaa:	83 ff 01             	cmp    edi,0x1
c001caad:	19 d2                	sbb    edx,edx
c001caaf:	31 c0                	xor    eax,eax
c001cab1:	80 e2 34             	and    dl,0x34
c001cab4:	81 c2 d8 00 00 00    	add    edx,0xd8
c001caba:	89 d5                	mov    ebp,edx
c001cabc:	ee                   	out    dx,al
c001cabd:	89 f0                	mov    eax,esi
c001cabf:	85 ff                	test   edi,edi
c001cac1:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c001cac4:	0f b6 d0             	movzx  edx,al
c001cac7:	74 20                	je     c001cae9 <DMAChannel::start()+0x81>
c001cac9:	89 c8                	mov    eax,ecx
c001cacb:	d1 e8                	shr    eax,1
c001cacd:	ee                   	out    dx,al
c001cace:	89 c8                	mov    eax,ecx
c001cad0:	c1 e8 09             	shr    eax,0x9
c001cad3:	eb 1c                	jmp    c001caf1 <DMAChannel::start()+0x89>
c001cad5:	c7 44 24 30 a4 d9 02 c0 	mov    DWORD PTR [esp+0x30],0xc002d9a4
c001cadd:	83 c4 1c             	add    esp,0x1c
c001cae0:	5b                   	pop    ebx
c001cae1:	5e                   	pop    esi
c001cae2:	5f                   	pop    edi
c001cae3:	5d                   	pop    ebp
c001cae4:	e9 af 3d ff ff       	jmp    c0010898 <KePanic(char const*)>
c001cae9:	88 c8                	mov    al,cl
c001caeb:	ee                   	out    dx,al
c001caec:	89 c8                	mov    eax,ecx
c001caee:	c1 e8 08             	shr    eax,0x8
c001caf1:	ee                   	out    dx,al
c001caf2:	31 c0                	xor    eax,eax
c001caf4:	89 ea                	mov    edx,ebp
c001caf6:	ee                   	out    dx,al
c001caf7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cafa:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001caff:	48                   	dec    eax
c001cb00:	ee                   	out    dx,al
c001cb01:	c1 e8 08             	shr    eax,0x8
c001cb04:	ee                   	out    dx,al
c001cb05:	89 c8                	mov    eax,ecx
c001cb07:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001cb0c:	c1 e8 10             	shr    eax,0x10
c001cb0f:	ee                   	out    dx,al
c001cb10:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001cb14:	74 12                	je     c001cb28 <DMAChannel::start()+0xc0>
c001cb16:	83 ff 01             	cmp    edi,0x1
c001cb19:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
c001cb1c:	19 d2                	sbb    edx,edx
c001cb1e:	80 e2 35             	and    dl,0x35
c001cb21:	81 c2 d6 00 00 00    	add    edx,0xd6
c001cb27:	ee                   	out    dx,al
c001cb28:	c6 43 0d 01          	mov    BYTE PTR [ebx+0xd],0x1
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	53                   	push   ebx
c001cb30:	e8 e5 fe ff ff       	call   c001ca1a <DMAChannel::unmask()>
c001cb35:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cb3c:	83 c4 10             	add    esp,0x10
c001cb3f:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cb46:	75 01                	jne    c001cb49 <DMAChannel::start()+0xe1>
c001cb48:	fb                   	sti    
c001cb49:	83 c4 1c             	add    esp,0x1c
c001cb4c:	5b                   	pop    ebx
c001cb4d:	5e                   	pop    esi
c001cb4e:	5f                   	pop    edi
c001cb4f:	5d                   	pop    ebp
c001cb50:	c3                   	ret    
c001cb51:	90                   	nop

c001cb52 <DMA8237::getAvailable()>:
c001cb52:	fa                   	cli    
c001cb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb57:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cb5d:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
c001cb61:	31 c0                	xor    eax,eax
c001cb63:	0f a3 c2             	bt     edx,eax
c001cb66:	73 09                	jae    c001cb71 <DMA8237::getAvailable()+0x1f>
c001cb68:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cb6f:	eb 10                	jmp    c001cb81 <DMA8237::getAvailable()+0x2f>
c001cb71:	40                   	inc    eax
c001cb72:	83 f8 08             	cmp    eax,0x8
c001cb75:	75 ec                	jne    c001cb63 <DMA8237::getAvailable()+0x11>
c001cb77:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cb7e:	83 c8 ff             	or     eax,0xffffffff
c001cb81:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cb88:	75 01                	jne    c001cb8b <DMA8237::getAvailable()+0x39>
c001cb8a:	fb                   	sti    
c001cb8b:	c3                   	ret    

c001cb8c <DMA8237::tryLockChannelWithBase(int)>:
c001cb8c:	56                   	push   esi
c001cb8d:	53                   	push   ebx
c001cb8e:	83 ec 14             	sub    esp,0x14
c001cb91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb95:	fa                   	cli    
c001cb96:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cb9a:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cba0:	8d 43 03             	lea    eax,[ebx+0x3]
c001cba3:	39 d8                	cmp    eax,ebx
c001cba5:	7c 4c                	jl     c001cbf3 <DMA8237::tryLockChannelWithBase(int)+0x67>
c001cba7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c001cbaa:	89 f1                	mov    ecx,esi
c001cbac:	0f b6 c9             	movzx  ecx,cl
c001cbaf:	0f a3 d9             	bt     ecx,ebx
c001cbb2:	73 3c                	jae    c001cbf0 <DMA8237::tryLockChannelWithBase(int)+0x64>
c001cbb4:	88 d9                	mov    cl,bl
c001cbb6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cbbb:	d3 c0                	rol    eax,cl
c001cbbd:	83 ec 0c             	sub    esp,0xc
c001cbc0:	21 f0                	and    eax,esi
c001cbc2:	88 42 08             	mov    BYTE PTR [edx+0x8],al
c001cbc5:	6a 18                	push   0x18
c001cbc7:	e8 78 38 ff ff       	call   c0010444 <malloc>
c001cbcc:	5a                   	pop    edx
c001cbcd:	59                   	pop    ecx
c001cbce:	53                   	push   ebx
c001cbcf:	50                   	push   eax
c001cbd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbd4:	e8 2d fd ff ff       	call   c001c906 <DMAChannel::DMAChannel(int)>
c001cbd9:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cbe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbe4:	83 c4 10             	add    esp,0x10
c001cbe7:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cbee:	eb 13                	jmp    c001cc03 <DMA8237::tryLockChannelWithBase(int)+0x77>
c001cbf0:	43                   	inc    ebx
c001cbf1:	eb b0                	jmp    c001cba3 <DMA8237::tryLockChannelWithBase(int)+0x17>
c001cbf3:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cbfa:	31 c0                	xor    eax,eax
c001cbfc:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cc03:	75 01                	jne    c001cc06 <DMA8237::tryLockChannelWithBase(int)+0x7a>
c001cc05:	fb                   	sti    
c001cc06:	83 c4 14             	add    esp,0x14
c001cc09:	5b                   	pop    ebx
c001cc0a:	5e                   	pop    esi
c001cc0b:	c3                   	ret    

c001cc0c <DMA8237::lockChannelWithBase(int)>:
c001cc0c:	83 ec 0c             	sub    esp,0xc
c001cc0f:	50                   	push   eax
c001cc10:	50                   	push   eax
c001cc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc19:	e8 6e ff ff ff       	call   c001cb8c <DMA8237::tryLockChannelWithBase(int)>
c001cc1e:	83 c4 10             	add    esp,0x10
c001cc21:	85 c0                	test   eax,eax
c001cc23:	74 ea                	je     c001cc0f <DMA8237::lockChannelWithBase(int)+0x3>
c001cc25:	83 c4 0c             	add    esp,0xc
c001cc28:	c3                   	ret    
c001cc29:	90                   	nop

c001cc2a <DMA8237::tryLockChannel8()>:
c001cc2a:	83 ec 14             	sub    esp,0x14
c001cc2d:	6a 00                	push   0x0
c001cc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc33:	e8 54 ff ff ff       	call   c001cb8c <DMA8237::tryLockChannelWithBase(int)>
c001cc38:	83 c4 1c             	add    esp,0x1c
c001cc3b:	c3                   	ret    

c001cc3c <DMA8237::tryLockChannel16()>:
c001cc3c:	83 ec 14             	sub    esp,0x14
c001cc3f:	6a 04                	push   0x4
c001cc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc45:	e8 42 ff ff ff       	call   c001cb8c <DMA8237::tryLockChannelWithBase(int)>
c001cc4a:	83 c4 1c             	add    esp,0x1c
c001cc4d:	c3                   	ret    

c001cc4e <DMA8237::tryLockChannel(int)>:
c001cc4e:	56                   	push   esi
c001cc4f:	53                   	push   ebx
c001cc50:	83 ec 14             	sub    esp,0x14
c001cc53:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cc57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cc5b:	83 fb 07             	cmp    ebx,0x7
c001cc5e:	76 14                	jbe    c001cc74 <DMA8237::tryLockChannel(int)+0x26>
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	68 b4 d9 02 c0       	push   0xc002d9b4
c001cc68:	e8 f9 a2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cc6d:	83 c4 10             	add    esp,0x10
c001cc70:	31 c0                	xor    eax,eax
c001cc72:	eb 63                	jmp    c001ccd7 <DMA8237::tryLockChannel(int)+0x89>
c001cc74:	fa                   	cli    
c001cc75:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c001cc78:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cc7e:	89 f0                	mov    eax,esi
c001cc80:	0f b6 c0             	movzx  eax,al
c001cc83:	0f a3 d8             	bt     eax,ebx
c001cc86:	73 3c                	jae    c001ccc4 <DMA8237::tryLockChannel(int)+0x76>
c001cc88:	88 d9                	mov    cl,bl
c001cc8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cc8f:	d3 c0                	rol    eax,cl
c001cc91:	83 ec 0c             	sub    esp,0xc
c001cc94:	21 f0                	and    eax,esi
c001cc96:	88 42 08             	mov    BYTE PTR [edx+0x8],al
c001cc99:	6a 18                	push   0x18
c001cc9b:	e8 a4 37 ff ff       	call   c0010444 <malloc>
c001cca0:	5a                   	pop    edx
c001cca1:	59                   	pop    ecx
c001cca2:	53                   	push   ebx
c001cca3:	50                   	push   eax
c001cca4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cca8:	e8 59 fc ff ff       	call   c001c906 <DMAChannel::DMAChannel(int)>
c001ccad:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001ccb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001ccc2:	eb 10                	jmp    c001ccd4 <DMA8237::tryLockChannel(int)+0x86>
c001ccc4:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cccb:	31 c0                	xor    eax,eax
c001cccd:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001ccd4:	75 01                	jne    c001ccd7 <DMA8237::tryLockChannel(int)+0x89>
c001ccd6:	fb                   	sti    
c001ccd7:	83 c4 14             	add    esp,0x14
c001ccda:	5b                   	pop    ebx
c001ccdb:	5e                   	pop    esi
c001ccdc:	c3                   	ret    
c001ccdd:	90                   	nop

c001ccde <DMA8237::lockChannel8()>:
c001ccde:	83 ec 14             	sub    esp,0x14
c001cce1:	6a 00                	push   0x0
c001cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce7:	e8 20 ff ff ff       	call   c001cc0c <DMA8237::lockChannelWithBase(int)>
c001ccec:	83 c4 1c             	add    esp,0x1c
c001ccef:	c3                   	ret    

c001ccf0 <DMA8237::lockChannel16()>:
c001ccf0:	83 ec 14             	sub    esp,0x14
c001ccf3:	6a 04                	push   0x4
c001ccf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf9:	e8 0e ff ff ff       	call   c001cc0c <DMA8237::lockChannelWithBase(int)>
c001ccfe:	83 c4 1c             	add    esp,0x1c
c001cd01:	c3                   	ret    

c001cd02 <DMA8237::lockChannel(int)>:
c001cd02:	83 ec 0c             	sub    esp,0xc
c001cd05:	50                   	push   eax
c001cd06:	50                   	push   eax
c001cd07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0f:	e8 3a ff ff ff       	call   c001cc4e <DMA8237::tryLockChannel(int)>
c001cd14:	83 c4 10             	add    esp,0x10
c001cd17:	85 c0                	test   eax,eax
c001cd19:	74 ea                	je     c001cd05 <DMA8237::lockChannel(int)+0x3>
c001cd1b:	83 c4 0c             	add    esp,0xc
c001cd1e:	c3                   	ret    
c001cd1f:	90                   	nop

c001cd20 <DMA8237::unlockChannel(DMAChannel*)>:
c001cd20:	56                   	push   esi
c001cd21:	53                   	push   ebx
c001cd22:	53                   	push   ebx
c001cd23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cd27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd2b:	85 f6                	test   esi,esi
c001cd2d:	75 10                	jne    c001cd3f <DMA8237::unlockChannel(DMAChannel*)+0x1f>
c001cd2f:	83 ec 0c             	sub    esp,0xc
c001cd32:	68 c3 d9 02 c0       	push   0xc002d9c3
c001cd37:	e8 5c 3b ff ff       	call   c0010898 <KePanic(char const*)>
c001cd3c:	83 c4 10             	add    esp,0x10
c001cd3f:	fa                   	cli    
c001cd40:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cd46:	0f b6 43 08          	movzx  eax,BYTE PTR [ebx+0x8]
c001cd4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cd4c:	89 c2                	mov    edx,eax
c001cd4e:	0f a3 c8             	bt     eax,ecx
c001cd51:	72 21                	jb     c001cd74 <DMA8237::unlockChannel(DMAChannel*)+0x54>
c001cd53:	b8 01 00 00 00       	mov    eax,0x1
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	d3 e0                	shl    eax,cl
c001cd5d:	09 d0                	or     eax,edx
c001cd5f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001cd62:	56                   	push   esi
c001cd63:	e8 f6 fb ff ff       	call   c001c95e <DMAChannel::~DMAChannel()>
c001cd68:	5a                   	pop    edx
c001cd69:	59                   	pop    ecx
c001cd6a:	6a 18                	push   0x18
c001cd6c:	56                   	push   esi
c001cd6d:	e8 ca 12 ff ff       	call   c000e03c <operator delete(void*, unsigned long)>
c001cd72:	eb 0d                	jmp    c001cd81 <DMA8237::unlockChannel(DMAChannel*)+0x61>
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	68 da d9 02 c0       	push   0xc002d9da
c001cd7c:	e8 17 3b ff ff       	call   c0010898 <KePanic(char const*)>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cd8b:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cd92:	75 01                	jne    c001cd95 <DMA8237::unlockChannel(DMAChannel*)+0x75>
c001cd94:	fb                   	sti    
c001cd95:	58                   	pop    eax
c001cd96:	5b                   	pop    ebx
c001cd97:	5e                   	pop    esi
c001cd98:	c3                   	ret    
c001cd99:	66 90                	xchg   ax,ax
c001cd9b:	90                   	nop

c001cd9c <ISADriver::detect()>:
c001cd9c:	c3                   	ret    
c001cd9d:	90                   	nop

c001cd9e <ISADriver::deinitialise()>:
c001cd9e:	c3                   	ret    
c001cd9f:	90                   	nop

c001cda0 <ISADriver::setPowerState(DevicePowerState)>:
c001cda0:	c3                   	ret    
c001cda1:	90                   	nop

c001cda2 <ISADriver::getHumanReadableName()>:
c001cda2:	b8 2d b1 02 c0       	mov    eax,0xc002b12d
c001cda7:	c3                   	ret    

c001cda8 <ISADriver::detectCOMPort(unsigned short)>:
c001cda8:	55                   	push   ebp
c001cda9:	57                   	push   edi
c001cdaa:	56                   	push   esi
c001cdab:	53                   	push   ebx
c001cdac:	83 ec 14             	sub    esp,0x14
c001cdaf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdb3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cdb7:	6a 08                	push   0x8
c001cdb9:	0f b7 c3             	movzx  eax,bx
c001cdbc:	50                   	push   eax
c001cdbd:	e8 b6 ad fe ff       	call   c0007b78 <KeIsPortInUse(unsigned short, int)>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	84 c0                	test   al,al
c001cdc7:	0f 85 93 00 00 00    	jne    c001ce60 <ISADriver::detectCOMPort(unsigned short)+0xb8>
c001cdcd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001cdd0:	89 ea                	mov    edx,ebp
c001cdd2:	ee                   	out    dx,al
c001cdd3:	8d 73 03             	lea    esi,[ebx+0x3]
c001cdd6:	b0 80                	mov    al,0x80
c001cdd8:	89 f2                	mov    edx,esi
c001cdda:	ee                   	out    dx,al
c001cddb:	b1 03                	mov    cl,0x3
c001cddd:	89 da                	mov    edx,ebx
c001cddf:	88 c8                	mov    al,cl
c001cde1:	ee                   	out    dx,al
c001cde2:	31 c0                	xor    eax,eax
c001cde4:	89 ea                	mov    edx,ebp
c001cde6:	ee                   	out    dx,al
c001cde7:	88 c8                	mov    al,cl
c001cde9:	89 f2                	mov    edx,esi
c001cdeb:	ee                   	out    dx,al
c001cdec:	8d 53 02             	lea    edx,[ebx+0x2]
c001cdef:	b0 c7                	mov    al,0xc7
c001cdf1:	ee                   	out    dx,al
c001cdf2:	8d 4b 04             	lea    ecx,[ebx+0x4]
c001cdf5:	b0 0b                	mov    al,0xb
c001cdf7:	89 ca                	mov    edx,ecx
c001cdf9:	ee                   	out    dx,al
c001cdfa:	b0 1e                	mov    al,0x1e
c001cdfc:	ee                   	out    dx,al
c001cdfd:	b0 ae                	mov    al,0xae
c001cdff:	89 da                	mov    edx,ebx
c001ce01:	ee                   	out    dx,al
c001ce02:	ec                   	in     al,dx
c001ce03:	3c ae                	cmp    al,0xae
c001ce05:	75 59                	jne    c001ce60 <ISADriver::detectCOMPort(unsigned short)+0xb8>
c001ce07:	b0 0f                	mov    al,0xf
c001ce09:	89 ca                	mov    edx,ecx
c001ce0b:	ee                   	out    dx,al
c001ce0c:	83 ec 0c             	sub    esp,0xc
c001ce0f:	68 8c 00 00 00       	push   0x8c
c001ce14:	e8 2b 36 ff ff       	call   c0010444 <malloc>
c001ce19:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce1c:	89 c6                	mov    esi,eax
c001ce1e:	e8 25 d1 00 00       	call   c0029f48 <SerialHardware::SerialHardware()>
c001ce23:	66 89 5e 40          	mov    WORD PTR [esi+0x40],bx
c001ce27:	c7 46 70 00 00 00 00 	mov    DWORD PTR [esi+0x70],0x0
c001ce2e:	c7 04 24 2c 01 00 00 	mov    DWORD PTR [esp],0x12c
c001ce35:	e8 0a 36 ff ff       	call   c0010444 <malloc>
c001ce3a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce3d:	89 c3                	mov    ebx,eax
c001ce3f:	e8 88 d1 00 00       	call   c0029fcc <UART16550::UART16550()>
c001ce44:	58                   	pop    eax
c001ce45:	5a                   	pop    edx
c001ce46:	53                   	push   ebx
c001ce47:	56                   	push   esi
c001ce48:	e8 2f d1 00 00       	call   c0029f7c <SerialHardware::setDriver(SerialDriver*)>
c001ce4d:	59                   	pop    ecx
c001ce4e:	5b                   	pop    ebx
c001ce4f:	56                   	push   esi
c001ce50:	ff 77 04             	push   DWORD PTR [edi+0x4]
c001ce53:	e8 cc ad fe ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c001ce58:	83 c4 10             	add    esp,0x10
c001ce5b:	ff 47 08             	inc    DWORD PTR [edi+0x8]
c001ce5e:	66 90                	xchg   ax,ax
c001ce60:	83 c4 0c             	add    esp,0xc
c001ce63:	5b                   	pop    ebx
c001ce64:	5e                   	pop    esi
c001ce65:	5f                   	pop    edi
c001ce66:	5d                   	pop    ebp
c001ce67:	c3                   	ret    

c001ce68 <ISADriver::initialise()>:
c001ce68:	57                   	push   edi
c001ce69:	56                   	push   esi
c001ce6a:	53                   	push   ebx
c001ce6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce6f:	83 ec 0c             	sub    esp,0xc
c001ce72:	68 8c 00 00 00       	push   0x8c
c001ce77:	e8 c8 35 ff ff       	call   c0010444 <malloc>
c001ce7c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce7f:	89 c6                	mov    esi,eax
c001ce81:	e8 ae d1 00 00       	call   c002a034 <LegacyDMAHardware::LegacyDMAHardware()>
c001ce86:	c7 04 24 0c 00 00 00 	mov    DWORD PTR [esp],0xc
c001ce8d:	e8 b2 35 ff ff       	call   c0010444 <malloc>
c001ce92:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce95:	89 c7                	mov    edi,eax
c001ce97:	e8 1c d2 00 00       	call   c002a0b8 <DMA8237::DMA8237()>
c001ce9c:	59                   	pop    ecx
c001ce9d:	58                   	pop    eax
c001ce9e:	57                   	push   edi
c001ce9f:	56                   	push   esi
c001cea0:	e8 c3 d1 00 00       	call   c002a068 <LegacyDMAHardware::setDriver(LegacyDMADriver*)>
c001cea5:	58                   	pop    eax
c001cea6:	5a                   	pop    edx
c001cea7:	56                   	push   esi
c001cea8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001ceab:	e8 74 ad fe ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c001ceb0:	59                   	pop    ecx
c001ceb1:	5e                   	pop    esi
c001ceb2:	68 f8 03 00 00       	push   0x3f8
c001ceb7:	53                   	push   ebx
c001ceb8:	e8 eb fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cebd:	5f                   	pop    edi
c001cebe:	58                   	pop    eax
c001cebf:	68 f8 02 00 00       	push   0x2f8
c001cec4:	53                   	push   ebx
c001cec5:	e8 de fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001ceca:	58                   	pop    eax
c001cecb:	5a                   	pop    edx
c001cecc:	68 e8 03 00 00       	push   0x3e8
c001ced1:	53                   	push   ebx
c001ced2:	e8 d1 fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001ced7:	59                   	pop    ecx
c001ced8:	5e                   	pop    esi
c001ced9:	68 e8 02 00 00       	push   0x2e8
c001cede:	53                   	push   ebx
c001cedf:	e8 c4 fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cee4:	83 c4 10             	add    esp,0x10
c001cee7:	83 7b 08 02          	cmp    DWORD PTR [ebx+0x8],0x2
c001ceeb:	7e 37                	jle    c001cf24 <ISADriver::initialise()+0xbc>
c001ceed:	50                   	push   eax
c001ceee:	50                   	push   eax
c001ceef:	68 f8 05 00 00       	push   0x5f8
c001cef4:	53                   	push   ebx
c001cef5:	e8 ae fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cefa:	5a                   	pop    edx
c001cefb:	59                   	pop    ecx
c001cefc:	68 f8 04 00 00       	push   0x4f8
c001cf01:	53                   	push   ebx
c001cf02:	e8 a1 fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cf07:	5e                   	pop    esi
c001cf08:	5f                   	pop    edi
c001cf09:	68 e8 05 00 00       	push   0x5e8
c001cf0e:	53                   	push   ebx
c001cf0f:	e8 94 fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cf14:	58                   	pop    eax
c001cf15:	5a                   	pop    edx
c001cf16:	68 e8 04 00 00       	push   0x4e8
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 87 fe ff ff       	call   c001cda8 <ISADriver::detectCOMPort(unsigned short)>
c001cf21:	83 c4 10             	add    esp,0x10
c001cf24:	5b                   	pop    ebx
c001cf25:	5e                   	pop    esi
c001cf26:	5f                   	pop    edi
c001cf27:	c3                   	ret    

c001cf28 <ISAPnPDriver::detect()>:
c001cf28:	c3                   	ret    
c001cf29:	90                   	nop

c001cf2a <ISAPnPDriver::deinitialise()>:
c001cf2a:	c3                   	ret    
c001cf2b:	90                   	nop

c001cf2c <ISAPnPDriver::setPowerState(DevicePowerState)>:
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop

c001cf2e <ISAPnPDriver::getHumanReadableName()>:
c001cf2e:	b8 17 b1 02 c0       	mov    eax,0xc002b117
c001cf33:	c3                   	ret    

c001cf34 <ISAPnPDriver::sendInitiationKey()>:
c001cf34:	57                   	push   edi
c001cf35:	b9 08 00 00 00       	mov    ecx,0x8
c001cf3a:	56                   	push   esi
c001cf3b:	be e0 dc 02 c0       	mov    esi,0xc002dce0
c001cf40:	83 ec 20             	sub    esp,0x20
c001cf43:	89 e7                	mov    edi,esp
c001cf45:	fc                   	cld    
c001cf46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001cf48:	fa                   	cli    
c001cf49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cf4d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cf50:	31 c0                	xor    eax,eax
c001cf52:	ee                   	out    dx,al
c001cf53:	ee                   	out    dx,al
c001cf54:	8a 04 0c             	mov    al,BYTE PTR [esp+ecx*1]
c001cf57:	ee                   	out    dx,al
c001cf58:	41                   	inc    ecx
c001cf59:	83 f9 20             	cmp    ecx,0x20
c001cf5c:	75 f6                	jne    c001cf54 <ISAPnPDriver::sendInitiationKey()+0x20>
c001cf5e:	31 c0                	xor    eax,eax
c001cf60:	ee                   	out    dx,al
c001cf61:	ee                   	out    dx,al
c001cf62:	31 c9                	xor    ecx,ecx
c001cf64:	8a 04 0c             	mov    al,BYTE PTR [esp+ecx*1]
c001cf67:	ee                   	out    dx,al
c001cf68:	41                   	inc    ecx
c001cf69:	83 f9 20             	cmp    ecx,0x20
c001cf6c:	75 f6                	jne    c001cf64 <ISAPnPDriver::sendInitiationKey()+0x30>
c001cf6e:	fb                   	sti    
c001cf6f:	83 c4 20             	add    esp,0x20
c001cf72:	5e                   	pop    esi
c001cf73:	5f                   	pop    edi
c001cf74:	c3                   	ret    
c001cf75:	90                   	nop

c001cf76 <ISAPnPDriver::isolateCard()>:
c001cf76:	57                   	push   edi
c001cf77:	31 ff                	xor    edi,edi
c001cf79:	56                   	push   esi
c001cf7a:	31 f6                	xor    esi,esi
c001cf7c:	53                   	push   ebx
c001cf7d:	bb 40 00 00 00       	mov    ebx,0x40
c001cf82:	83 ec 1c             	sub    esp,0x1c
c001cf85:	68 48 db 02 c0       	push   0xc002db48
c001cf8a:	e8 d7 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf93:	83 c4 10             	add    esp,0x10
c001cf96:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cf99:	8d 76 00             	lea    esi,[esi+0x0]
c001cf9c:	ec                   	in     al,dx
c001cf9d:	0f b6 c8             	movzx  ecx,al
c001cfa0:	ec                   	in     al,dx
c001cfa1:	01 f6                	add    esi,esi
c001cfa3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cfa7:	11 ff                	adc    edi,edi
c001cfa9:	83 f9 55             	cmp    ecx,0x55
c001cfac:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cfb0:	75 06                	jne    c001cfb8 <ISAPnPDriver::isolateCard()+0x42>
c001cfb2:	3c aa                	cmp    al,0xaa
c001cfb4:	74 0e                	je     c001cfc4 <ISAPnPDriver::isolateCard()+0x4e>
c001cfb6:	66 90                	xchg   ax,ax
c001cfb8:	81 f9 aa 00 00 00    	cmp    ecx,0xaa
c001cfbe:	75 14                	jne    c001cfd4 <ISAPnPDriver::isolateCard()+0x5e>
c001cfc0:	3c 55                	cmp    al,0x55
c001cfc2:	75 10                	jne    c001cfd4 <ISAPnPDriver::isolateCard()+0x5e>
c001cfc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfcc:	83 c9 01             	or     ecx,0x1
c001cfcf:	89 ce                	mov    esi,ecx
c001cfd1:	89 c7                	mov    edi,eax
c001cfd3:	90                   	nop
c001cfd4:	4b                   	dec    ebx
c001cfd5:	75 c5                	jne    c001cf9c <ISAPnPDriver::isolateCard()+0x26>
c001cfd7:	b9 08 00 00 00       	mov    ecx,0x8
c001cfdc:	ec                   	in     al,dx
c001cfdd:	ec                   	in     al,dx
c001cfde:	49                   	dec    ecx
c001cfdf:	75 fb                	jne    c001cfdc <ISAPnPDriver::isolateCard()+0x66>
c001cfe1:	83 ec 0c             	sub    esp,0xc
c001cfe4:	68 e6 db 02 c0       	push   0xc002dbe6
c001cfe9:	e8 78 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cfee:	83 c4 20             	add    esp,0x20
c001cff1:	89 f0                	mov    eax,esi
c001cff3:	5b                   	pop    ebx
c001cff4:	89 fa                	mov    edx,edi
c001cff6:	5e                   	pop    esi
c001cff7:	5f                   	pop    edi
c001cff8:	c3                   	ret    
c001cff9:	90                   	nop

c001cffa <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>:
c001cffa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d002:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
c001d005:	ee                   	out    dx,al
c001d006:	66 8b 51 0a          	mov    dx,WORD PTR [ecx+0xa]
c001d00a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d00e:	ee                   	out    dx,al
c001d00f:	c3                   	ret    

c001d010 <ISAPnPDriver::changeReadPortBase()>:
c001d010:	56                   	push   esi
c001d011:	53                   	push   ebx
c001d012:	83 ec 10             	sub    esp,0x10
c001d015:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d019:	68 09 dc 02 c0       	push   0xc002dc09
c001d01e:	e8 43 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d023:	0f b7 5e 0c          	movzx  ebx,WORD PTR [esi+0xc]
c001d027:	90                   	nop
c001d028:	83 c3 04             	add    ebx,0x4
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	81 fb f2 03 00 00    	cmp    ebx,0x3f2
c001d034:	7f 5e                	jg     c001d094 <ISAPnPDriver::changeReadPortBase()+0x84>
c001d036:	51                   	push   ecx
c001d037:	51                   	push   ecx
c001d038:	53                   	push   ebx
c001d039:	68 1d dc 02 c0       	push   0xc002dc1d
c001d03e:	e8 23 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d043:	58                   	pop    eax
c001d044:	5a                   	pop    edx
c001d045:	6a 01                	push   0x1
c001d047:	53                   	push   ebx
c001d048:	e8 2b ab fe ff       	call   c0007b78 <KeIsPortInUse(unsigned short, int)>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	84 c0                	test   al,al
c001d052:	75 30                	jne    c001d084 <ISAPnPDriver::changeReadPortBase()+0x74>
c001d054:	66 89 5e 0c          	mov    WORD PTR [esi+0xc],bx
c001d058:	52                   	push   edx
c001d059:	52                   	push   edx
c001d05a:	53                   	push   ebx
c001d05b:	68 37 dc 02 c0       	push   0xc002dc37
c001d060:	e8 01 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d065:	0f b7 46 0c          	movzx  eax,WORD PTR [esi+0xc]
c001d069:	83 c4 0c             	add    esp,0xc
c001d06c:	c1 f8 03             	sar    eax,0x3
c001d06f:	0f b6 c0             	movzx  eax,al
c001d072:	50                   	push   eax
c001d073:	6a 00                	push   0x0
c001d075:	56                   	push   esi
c001d076:	e8 7f ff ff ff       	call   c001cffa <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d07b:	83 c4 14             	add    esp,0x14
c001d07e:	5b                   	pop    ebx
c001d07f:	5e                   	pop    esi
c001d080:	c3                   	ret    
c001d081:	8d 76 00             	lea    esi,[esi+0x0]
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	68 18 c6 02 c0       	push   0xc002c618
c001d08c:	e8 d5 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d091:	eb 95                	jmp    c001d028 <ISAPnPDriver::changeReadPortBase()+0x18>
c001d093:	90                   	nop
c001d094:	c7 44 24 10 5a dc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dc5a
c001d09c:	58                   	pop    eax
c001d09d:	5b                   	pop    ebx
c001d09e:	5e                   	pop    esi
c001d09f:	e9 c2 9e fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001d0a4 <ISAPnPDriver::resetAllCards()>:
c001d0a4:	6a 05                	push   0x5
c001d0a6:	6a 02                	push   0x2
c001d0a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d0ac:	e8 49 ff ff ff       	call   c001cffa <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d0b1:	83 c4 0c             	add    esp,0xc
c001d0b4:	c3                   	ret    
c001d0b5:	90                   	nop

c001d0b6 <ISAPnPDriver::readRegister(unsigned char)>:
c001d0b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d0ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0be:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
c001d0c1:	ee                   	out    dx,al
c001d0c2:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
c001d0c5:	ec                   	in     al,dx
c001d0c6:	c3                   	ret    
c001d0c7:	90                   	nop

c001d0c8 <ISAPnPDriver::initialise()>:
c001d0c8:	55                   	push   ebp
c001d0c9:	57                   	push   edi
c001d0ca:	31 ff                	xor    edi,edi
c001d0cc:	56                   	push   esi
c001d0cd:	31 f6                	xor    esi,esi
c001d0cf:	53                   	push   ebx
c001d0d0:	83 ec 28             	sub    esp,0x28
c001d0d3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d0d7:	68 6e dc 02 c0       	push   0xc002dc6e
c001d0dc:	e8 85 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d0e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0e4:	e8 bb ff ff ff       	call   c001d0a4 <ISAPnPDriver::resetAllCards()>
c001d0e9:	c7 04 24 71 dc 02 c0 	mov    DWORD PTR [esp],0xc002dc71
c001d0f0:	e8 71 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d0f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f8:	e8 37 fe ff ff       	call   c001cf34 <ISAPnPDriver::sendInitiationKey()>
c001d0fd:	c7 04 24 c0 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2c0
c001d104:	e8 5d 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d109:	83 c4 0c             	add    esp,0xc
c001d10c:	6a 00                	push   0x0
c001d10e:	6a 03                	push   0x3
c001d110:	53                   	push   ebx
c001d111:	e8 e4 fe ff ff       	call   c001cffa <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d116:	c7 04 24 01 c6 02 c0 	mov    DWORD PTR [esp],0xc002c601
c001d11d:	e8 44 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d122:	66 c7 43 0c 03 02    	mov    WORD PTR [ebx+0xc],0x203
c001d128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d12b:	e8 e0 fe ff ff       	call   c001d010 <ISAPnPDriver::changeReadPortBase()>
c001d130:	c7 04 24 74 dc 02 c0 	mov    DWORD PTR [esp],0xc002dc74
c001d137:	e8 2a 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d13c:	83 c4 10             	add    esp,0x10
c001d13f:	90                   	nop
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	53                   	push   ebx
c001d144:	e8 2d fe ff ff       	call   c001cf76 <ISAPnPDriver::isolateCard()>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	89 d1                	mov    ecx,edx
c001d14e:	89 c2                	mov    edx,eax
c001d150:	89 c8                	mov    eax,ecx
c001d152:	09 d0                	or     eax,edx
c001d154:	75 2e                	jne    c001d184 <ISAPnPDriver::initialise()+0xbc>
c001d156:	85 f6                	test   esi,esi
c001d158:	0f 85 ae 00 00 00    	jne    c001d20c <ISAPnPDriver::initialise()+0x144>
c001d15e:	83 ec 0c             	sub    esp,0xc
c001d161:	47                   	inc    edi
c001d162:	53                   	push   ebx
c001d163:	e8 a8 fe ff ff       	call   c001d010 <ISAPnPDriver::changeReadPortBase()>
c001d168:	83 c4 10             	add    esp,0x10
c001d16b:	83 ff 13             	cmp    edi,0x13
c001d16e:	7e d0                	jle    c001d140 <ISAPnPDriver::initialise()+0x78>
c001d170:	c7 44 24 30 77 dc 02 c0 	mov    DWORD PTR [esp+0x30],0xc002dc77
c001d178:	83 c4 1c             	add    esp,0x1c
c001d17b:	5b                   	pop    ebx
c001d17c:	5e                   	pop    esi
c001d17d:	5f                   	pop    edi
c001d17e:	5d                   	pop    ebp
c001d17f:	e9 e2 9d fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001d184:	50                   	push   eax
c001d185:	46                   	inc    esi
c001d186:	52                   	push   edx
c001d187:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d18f:	51                   	push   ecx
c001d190:	68 8a dc 02 c0       	push   0xc002dc8a
c001d195:	e8 cc 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d19a:	5a                   	pop    edx
c001d19b:	59                   	pop    ecx
c001d19c:	6a 06                	push   0x6
c001d19e:	53                   	push   ebx
c001d19f:	e8 12 ff ff ff       	call   c001d0b6 <ISAPnPDriver::readRegister(unsigned char)>
c001d1a4:	0f b6 e8             	movzx  ebp,al
c001d1a7:	58                   	pop    eax
c001d1a8:	5a                   	pop    edx
c001d1a9:	55                   	push   ebp
c001d1aa:	68 c2 dc 02 c0       	push   0xc002dcc2
c001d1af:	e8 b2 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d1b4:	c7 04 24 88 01 00 00 	mov    DWORD PTR [esp],0x188
c001d1bb:	e8 84 32 ff ff       	call   c0010444 <malloc>
c001d1c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1c7:	e8 78 cf 00 00       	call   c002a144 <UnknownHardware::UnknownHardware()>
c001d1cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1d4:	51                   	push   ecx
c001d1d5:	52                   	push   edx
c001d1d6:	55                   	push   ebp
c001d1d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1db:	50                   	push   eax
c001d1dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d1e0:	e8 8f cf 00 00       	call   c002a174 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>
c001d1e5:	83 c4 18             	add    esp,0x18
c001d1e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1ec:	50                   	push   eax
c001d1ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d1f0:	e8 2f aa fe ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c001d1f5:	83 c4 0c             	add    esp,0xc
c001d1f8:	6a 00                	push   0x0
c001d1fa:	6a 03                	push   0x3
c001d1fc:	53                   	push   ebx
c001d1fd:	e8 f8 fd ff ff       	call   c001cffa <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d202:	83 c4 10             	add    esp,0x10
c001d205:	e9 36 ff ff ff       	jmp    c001d140 <ISAPnPDriver::initialise()+0x78>
c001d20a:	66 90                	xchg   ax,ax
c001d20c:	6a 01                	push   0x1
c001d20e:	6a 01                	push   0x1
c001d210:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c001d214:	50                   	push   eax
c001d215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d218:	e8 d7 ab fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d21d:	6a 01                	push   0x1
c001d21f:	6a 01                	push   0x1
c001d221:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
c001d225:	50                   	push   eax
c001d226:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d229:	e8 c6 ab fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d22e:	83 c4 20             	add    esp,0x20
c001d231:	6a 01                	push   0x1
c001d233:	6a 01                	push   0x1
c001d235:	0f b7 43 0c          	movzx  eax,WORD PTR [ebx+0xc]
c001d239:	50                   	push   eax
c001d23a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d23d:	e8 b2 ab fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d242:	83 c4 2c             	add    esp,0x2c
c001d245:	5b                   	pop    ebx
c001d246:	5e                   	pop    esi
c001d247:	5f                   	pop    edi
c001d248:	5d                   	pop    ebp
c001d249:	c3                   	ret    
c001d24a:	66 90                	xchg   ax,ax

c001d24c <PCIDriver::deinitialise()>:
c001d24c:	90                   	nop
c001d24d:	c3                   	ret    
c001d24e:	66 90                	xchg   ax,ax

c001d250 <PCIDriver::setPowerState(DevicePowerState)>:
c001d250:	90                   	nop
c001d251:	c3                   	ret    
c001d252:	66 90                	xchg   ax,ax

c001d254 <PCIDriver::getHumanReadableName()>:
c001d254:	b8 0a b1 02 c0       	mov    eax,0xc002b10a
c001d259:	c3                   	ret    
c001d25a:	66 90                	xchg   ax,ax

c001d25c <PCIDriver::readBAR8(unsigned int, int)>:
c001d25c:	83 ec 10             	sub    esp,0x10
c001d25f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d263:	83 e0 01             	and    eax,0x1
c001d266:	74 2c                	je     c001d294 <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001d268:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d26c:	83 e0 fc             	and    eax,0xfffffffc
c001d26f:	89 c2                	mov    edx,eax
c001d271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d275:	01 d0                	add    eax,edx
c001d277:	0f b7 c0             	movzx  eax,ax
c001d27a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d27f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d284:	89 c2                	mov    edx,eax
c001d286:	ec                   	in     al,dx
c001d287:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d28b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d28f:	eb 1f                	jmp    c001d2b0 <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001d291:	8d 76 00             	lea    esi,[esi+0x0]
c001d294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d298:	83 e0 f0             	and    eax,0xfffffff0
c001d29b:	89 c2                	mov    edx,eax
c001d29d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2a1:	01 d0                	add    eax,edx
c001d2a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ab:	8a 00                	mov    al,BYTE PTR [eax]
c001d2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b0:	83 c4 10             	add    esp,0x10
c001d2b3:	c3                   	ret    

c001d2b4 <PCIDriver::readBAR16(unsigned int, int)>:
c001d2b4:	83 ec 10             	sub    esp,0x10
c001d2b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2bb:	83 e0 01             	and    eax,0x1
c001d2be:	74 2c                	je     c001d2ec <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001d2c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2c4:	83 e0 fc             	and    eax,0xfffffffc
c001d2c7:	89 c2                	mov    edx,eax
c001d2c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2cd:	01 d0                	add    eax,edx
c001d2cf:	0f b7 c0             	movzx  eax,ax
c001d2d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d2d7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d2dc:	89 c2                	mov    edx,eax
c001d2de:	66 ed                	in     ax,dx
c001d2e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d2e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2e9:	eb 1d                	jmp    c001d308 <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001d2eb:	90                   	nop
c001d2ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2f0:	83 e0 f0             	and    eax,0xfffffff0
c001d2f3:	89 c2                	mov    edx,eax
c001d2f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2f9:	01 d0                	add    eax,edx
c001d2fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d303:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d306:	66 90                	xchg   ax,ax
c001d308:	83 c4 10             	add    esp,0x10
c001d30b:	c3                   	ret    

c001d30c <PCIDriver::readBAR32(unsigned int, int)>:
c001d30c:	83 ec 10             	sub    esp,0x10
c001d30f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d313:	83 e0 01             	and    eax,0x1
c001d316:	74 2c                	je     c001d344 <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001d318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d31c:	83 e0 fc             	and    eax,0xfffffffc
c001d31f:	89 c2                	mov    edx,eax
c001d321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d325:	01 d0                	add    eax,edx
c001d327:	0f b7 c0             	movzx  eax,ax
c001d32a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d32f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d334:	89 c2                	mov    edx,eax
c001d336:	ed                   	in     eax,dx
c001d337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d33b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d33f:	eb 1f                	jmp    c001d360 <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001d341:	8d 76 00             	lea    esi,[esi+0x0]
c001d344:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d348:	83 e0 f0             	and    eax,0xfffffff0
c001d34b:	89 c2                	mov    edx,eax
c001d34d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d351:	01 d0                	add    eax,edx
c001d353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d357:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d35b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d35d:	8d 76 00             	lea    esi,[esi+0x0]
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	c3                   	ret    

c001d364 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001d364:	83 ec 14             	sub    esp,0x14
c001d367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36b:	88 04 24             	mov    BYTE PTR [esp],al
c001d36e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d372:	83 e0 01             	and    eax,0x1
c001d375:	74 2d                	je     c001d3a4 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001d377:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001d37b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d37f:	83 e0 fc             	and    eax,0xfffffffc
c001d382:	89 c1                	mov    ecx,eax
c001d384:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d388:	01 c8                	add    eax,ecx
c001d38a:	0f b7 c0             	movzx  eax,ax
c001d38d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d392:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001d396:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d39a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001d39f:	ee                   	out    dx,al
c001d3a0:	eb 1e                	jmp    c001d3c0 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001d3a2:	66 90                	xchg   ax,ax
c001d3a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3a8:	83 e0 f0             	and    eax,0xfffffff0
c001d3ab:	89 c2                	mov    edx,eax
c001d3ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3b1:	01 d0                	add    eax,edx
c001d3b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d3be:	88 10                	mov    BYTE PTR [eax],dl
c001d3c0:	90                   	nop
c001d3c1:	83 c4 14             	add    esp,0x14
c001d3c4:	c3                   	ret    
c001d3c5:	90                   	nop
c001d3c6:	66 90                	xchg   ax,ax

c001d3c8 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001d3c8:	83 ec 14             	sub    esp,0x14
c001d3cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c001d3d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3d7:	83 e0 01             	and    eax,0x1
c001d3da:	74 30                	je     c001d40c <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001d3dc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d3e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3e4:	83 e2 fc             	and    edx,0xfffffffc
c001d3e7:	89 d1                	mov    ecx,edx
c001d3e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d3ed:	01 ca                	add    edx,ecx
c001d3ef:	0f b7 d2             	movzx  edx,dx
c001d3f2:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001d3f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001d3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d400:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001d405:	66 ef                	out    dx,ax
c001d407:	eb 23                	jmp    c001d42c <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001d409:	8d 76 00             	lea    esi,[esi+0x0]
c001d40c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d410:	83 e0 f0             	and    eax,0xfffffff0
c001d413:	89 c2                	mov    edx,eax
c001d415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d419:	01 d0                	add    eax,edx
c001d41b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d423:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d426:	66 89 10             	mov    WORD PTR [eax],dx
c001d429:	8d 76 00             	lea    esi,[esi+0x0]
c001d42c:	90                   	nop
c001d42d:	83 c4 14             	add    esp,0x14
c001d430:	c3                   	ret    
c001d431:	90                   	nop
c001d432:	66 90                	xchg   ax,ax

c001d434 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001d434:	83 ec 10             	sub    esp,0x10
c001d437:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d43b:	83 e0 01             	and    eax,0x1
c001d43e:	74 2c                	je     c001d46c <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001d440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d444:	83 e0 fc             	and    eax,0xfffffffc
c001d447:	89 c2                	mov    edx,eax
c001d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44d:	01 d0                	add    eax,edx
c001d44f:	0f b7 c0             	movzx  eax,ax
c001d452:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d457:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d45b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d45f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d463:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d468:	ef                   	out    dx,eax
c001d469:	eb 21                	jmp    c001d48c <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001d46b:	90                   	nop
c001d46c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d470:	83 e0 f0             	and    eax,0xfffffff0
c001d473:	89 c2                	mov    edx,eax
c001d475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d479:	01 d0                	add    eax,edx
c001d47b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d483:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d487:	89 10                	mov    DWORD PTR [eax],edx
c001d489:	8d 76 00             	lea    esi,[esi+0x0]
c001d48c:	90                   	nop
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	c3                   	ret    
c001d491:	90                   	nop
c001d492:	66 90                	xchg   ax,ax

c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d494:	53                   	push   ebx
c001d495:	83 ec 30             	sub    esp,0x30
c001d498:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d49c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d4a0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001d4a4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d4a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4ac:	88 d8                	mov    al,bl
c001d4ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d4b2:	88 c8                	mov    al,cl
c001d4b4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d4b8:	88 d0                	mov    al,dl
c001d4ba:	88 04 24             	mov    BYTE PTR [esp],al
c001d4bd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d4c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d4cf:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d4d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d4dc:	c1 e0 10             	shl    eax,0x10
c001d4df:	89 c2                	mov    edx,eax
c001d4e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4e5:	c1 e0 0b             	shl    eax,0xb
c001d4e8:	09 c2                	or     edx,eax
c001d4ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ee:	c1 e0 08             	shl    eax,0x8
c001d4f1:	09 c2                	or     edx,eax
c001d4f3:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d4f7:	25 fc 00 00 00       	and    eax,0xfc
c001d4fc:	09 d0                	or     eax,edx
c001d4fe:	0d 00 00 00 80       	or     eax,0x80000000
c001d503:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d507:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001d50e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001d51f:	ef                   	out    dx,eax
c001d520:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001d527:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d52c:	89 c2                	mov    edx,eax
c001d52e:	ed                   	in     eax,dx
c001d52f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d533:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d537:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d53b:	83 e0 02             	and    eax,0x2
c001d53e:	c1 e0 03             	shl    eax,0x3
c001d541:	88 c1                	mov    cl,al
c001d543:	d3 ea                	shr    edx,cl
c001d545:	89 d0                	mov    eax,edx
c001d547:	83 c4 30             	add    esp,0x30
c001d54a:	5b                   	pop    ebx
c001d54b:	c3                   	ret    

c001d54c <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d54c:	56                   	push   esi
c001d54d:	53                   	push   ebx
c001d54e:	83 ec 54             	sub    esp,0x54
c001d551:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001d555:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001d559:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001d55d:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001d561:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001d565:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c001d569:	89 f2                	mov    edx,esi
c001d56b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d56f:	88 da                	mov    dl,bl
c001d571:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001d575:	88 ca                	mov    dl,cl
c001d577:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d57b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001d57f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d584:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d588:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d58d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001d591:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d596:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d59a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d59e:	c1 e0 10             	shl    eax,0x10
c001d5a1:	89 c2                	mov    edx,eax
c001d5a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d5a7:	c1 e0 0b             	shl    eax,0xb
c001d5aa:	09 c2                	or     edx,eax
c001d5ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d5b0:	c1 e0 08             	shl    eax,0x8
c001d5b3:	09 c2                	or     edx,eax
c001d5b5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d5ba:	25 fc 00 00 00       	and    eax,0xfc
c001d5bf:	09 d0                	or     eax,edx
c001d5c1:	0d 00 00 00 80       	or     eax,0x80000000
c001d5c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d5ca:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001d5d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d5d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d5d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5dd:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001d5e2:	ef                   	out    dx,eax
c001d5e3:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001d5ea:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001d5ef:	89 c2                	mov    edx,eax
c001d5f1:	ed                   	in     eax,dx
c001d5f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d5f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d5fa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001d5fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d603:	83 e0 02             	and    eax,0x2
c001d606:	74 18                	je     c001d620 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd4>
c001d608:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001d610:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d614:	c1 e0 10             	shl    eax,0x10
c001d617:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d61b:	eb 13                	jmp    c001d630 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe4>
c001d61d:	8d 76 00             	lea    esi,[esi+0x0]
c001d620:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001d628:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d62c:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d630:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001d637:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d63b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d63f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d643:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001d648:	ef                   	out    dx,eax
c001d649:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001d650:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d654:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d658:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d65c:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001d661:	ef                   	out    dx,eax
c001d662:	90                   	nop
c001d663:	83 c4 54             	add    esp,0x54
c001d666:	5b                   	pop    ebx
c001d667:	5e                   	pop    esi
c001d668:	c3                   	ret    
c001d669:	90                   	nop
c001d66a:	66 90                	xchg   ax,ax

c001d66c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d673:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d677:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d67b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d67f:	88 c8                	mov    al,cl
c001d681:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d685:	88 d0                	mov    al,dl
c001d687:	88 04 24             	mov    BYTE PTR [esp],al
c001d68a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d68e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d693:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d698:	6a 00                	push   0x0
c001d69a:	51                   	push   ecx
c001d69b:	52                   	push   edx
c001d69c:	50                   	push   eax
c001d69d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6a1:	e8 ee fd ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a6:	83 c4 14             	add    esp,0x14
c001d6a9:	83 c4 0c             	add    esp,0xc
c001d6ac:	c3                   	ret    
c001d6ad:	90                   	nop
c001d6ae:	66 90                	xchg   ax,ax

c001d6b0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6b7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d6bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d6bf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d6c3:	88 c8                	mov    al,cl
c001d6c5:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d6c9:	88 d0                	mov    al,dl
c001d6cb:	88 04 24             	mov    BYTE PTR [esp],al
c001d6ce:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d6d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d6d7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6dc:	6a 0e                	push   0xe
c001d6de:	51                   	push   ecx
c001d6df:	52                   	push   edx
c001d6e0:	50                   	push   eax
c001d6e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6e5:	e8 aa fd ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ea:	83 c4 14             	add    esp,0x14
c001d6ed:	0f b6 c0             	movzx  eax,al
c001d6f0:	83 c4 0c             	add    esp,0xc
c001d6f3:	c3                   	ret    

c001d6f4 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d6f4:	83 ec 1c             	sub    esp,0x1c
c001d6f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6fb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d703:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d707:	88 c8                	mov    al,cl
c001d709:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d70d:	88 d0                	mov    al,dl
c001d70f:	88 04 24             	mov    BYTE PTR [esp],al
c001d712:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d716:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d71b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d720:	6a 0a                	push   0xa
c001d722:	51                   	push   ecx
c001d723:	52                   	push   edx
c001d724:	50                   	push   eax
c001d725:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d729:	e8 66 fd ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d72e:	83 c4 14             	add    esp,0x14
c001d731:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001d735:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d739:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d73e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d743:	6a 0a                	push   0xa
c001d745:	51                   	push   ecx
c001d746:	52                   	push   edx
c001d747:	50                   	push   eax
c001d748:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d74c:	e8 43 fd ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d751:	83 c4 14             	add    esp,0x14
c001d754:	0f b7 c0             	movzx  eax,ax
c001d757:	c1 f8 08             	sar    eax,0x8
c001d75a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d75e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d763:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001d768:	c1 e2 08             	shl    edx,0x8
c001d76b:	09 d0                	or     eax,edx
c001d76d:	83 c4 1c             	add    esp,0x1c
c001d770:	c3                   	ret    
c001d771:	90                   	nop
c001d772:	66 90                	xchg   ax,ax

c001d774 <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d774:	83 ec 0c             	sub    esp,0xc
c001d777:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d77b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d77f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d783:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d787:	88 c8                	mov    al,cl
c001d789:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d78d:	88 d0                	mov    al,dl
c001d78f:	88 04 24             	mov    BYTE PTR [esp],al
c001d792:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d796:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d79b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d7a0:	6a 08                	push   0x8
c001d7a2:	51                   	push   ecx
c001d7a3:	52                   	push   edx
c001d7a4:	50                   	push   eax
c001d7a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d7a9:	e8 e6 fc ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7ae:	83 c4 14             	add    esp,0x14
c001d7b1:	0f b7 c0             	movzx  eax,ax
c001d7b4:	c1 f8 08             	sar    eax,0x8
c001d7b7:	83 c4 0c             	add    esp,0xc
c001d7ba:	c3                   	ret    
c001d7bb:	90                   	nop

c001d7bc <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d7bc:	83 ec 0c             	sub    esp,0xc
c001d7bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7c3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d7c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7cb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d7cf:	88 c8                	mov    al,cl
c001d7d1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d7d5:	88 d0                	mov    al,dl
c001d7d7:	88 04 24             	mov    BYTE PTR [esp],al
c001d7da:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d7de:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d7e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d7e8:	6a 08                	push   0x8
c001d7ea:	51                   	push   ecx
c001d7eb:	52                   	push   edx
c001d7ec:	50                   	push   eax
c001d7ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d7f1:	e8 9e fc ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7f6:	83 c4 14             	add    esp,0x14
c001d7f9:	83 c4 0c             	add    esp,0xc
c001d7fc:	c3                   	ret    
c001d7fd:	90                   	nop
c001d7fe:	66 90                	xchg   ax,ax

c001d800 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d807:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d80f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d813:	88 c8                	mov    al,cl
c001d815:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d819:	88 d0                	mov    al,dl
c001d81b:	88 04 24             	mov    BYTE PTR [esp],al
c001d81e:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d822:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d827:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d82c:	6a 3c                	push   0x3c
c001d82e:	51                   	push   ecx
c001d82f:	52                   	push   edx
c001d830:	50                   	push   eax
c001d831:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d835:	e8 5a fc ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d83a:	83 c4 14             	add    esp,0x14
c001d83d:	83 c4 0c             	add    esp,0xc
c001d840:	c3                   	ret    
c001d841:	90                   	nop
c001d842:	66 90                	xchg   ax,ax

c001d844 <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d844:	83 ec 0c             	sub    esp,0xc
c001d847:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d84b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d84f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d853:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d857:	88 c8                	mov    al,cl
c001d859:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d85d:	88 d0                	mov    al,dl
c001d85f:	88 04 24             	mov    BYTE PTR [esp],al
c001d862:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d866:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d86b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d870:	6a 18                	push   0x18
c001d872:	51                   	push   ecx
c001d873:	52                   	push   edx
c001d874:	50                   	push   eax
c001d875:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d879:	e8 16 fc ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d87e:	83 c4 14             	add    esp,0x14
c001d881:	0f b7 c0             	movzx  eax,ax
c001d884:	c1 f8 08             	sar    eax,0x8
c001d887:	83 c4 0c             	add    esp,0xc
c001d88a:	c3                   	ret    
c001d88b:	90                   	nop

c001d88c <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d88c:	56                   	push   esi
c001d88d:	53                   	push   ebx
c001d88e:	83 ec 10             	sub    esp,0x10
c001d891:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d895:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d899:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d89d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d8a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d8a5:	88 d8                	mov    al,bl
c001d8a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d8ab:	88 c8                	mov    al,cl
c001d8ad:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001d8b1:	88 d0                	mov    al,dl
c001d8b3:	88 04 24             	mov    BYTE PTR [esp],al
c001d8b6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d8ba:	c1 e0 02             	shl    eax,0x2
c001d8bd:	83 c0 12             	add    eax,0x12
c001d8c0:	0f b6 d8             	movzx  ebx,al
c001d8c3:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d8c7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d8cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d8d1:	53                   	push   ebx
c001d8d2:	51                   	push   ecx
c001d8d3:	52                   	push   edx
c001d8d4:	50                   	push   eax
c001d8d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8d9:	e8 b6 fb ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8de:	83 c4 14             	add    esp,0x14
c001d8e1:	0f b7 c0             	movzx  eax,ax
c001d8e4:	c1 e0 10             	shl    eax,0x10
c001d8e7:	89 c6                	mov    esi,eax
c001d8e9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d8ed:	83 c0 04             	add    eax,0x4
c001d8f0:	c1 e0 02             	shl    eax,0x2
c001d8f3:	0f b6 d8             	movzx  ebx,al
c001d8f6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d8fa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d8ff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d904:	53                   	push   ebx
c001d905:	51                   	push   ecx
c001d906:	52                   	push   edx
c001d907:	50                   	push   eax
c001d908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d90c:	e8 83 fb ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d911:	83 c4 14             	add    esp,0x14
c001d914:	0f b7 c0             	movzx  eax,ax
c001d917:	09 f0                	or     eax,esi
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	5b                   	pop    ebx
c001d91d:	5e                   	pop    esi
c001d91e:	c3                   	ret    
c001d91f:	90                   	nop

c001d920 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>:
c001d920:	83 ec 0c             	sub    esp,0xc
c001d923:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d927:	0f b6 c0             	movzx  eax,al
c001d92a:	83 f8 40             	cmp    eax,0x40
c001d92d:	0f 87 65 05 00 00    	ja     c001de98 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x578>
c001d933:	8b 04 85 70 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a90]
c001d93a:	ff e0                	jmp    eax
c001d93c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d940:	0f b6 c0             	movzx  eax,al
c001d943:	83 f8 01             	cmp    eax,0x1
c001d946:	75 0c                	jne    c001d954 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x34>
c001d948:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c001d94d:	e9 72 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d952:	66 90                	xchg   ax,ax
c001d954:	b8 58 dd 02 c0       	mov    eax,0xc002dd58
c001d959:	e9 66 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d95e:	66 90                	xchg   ax,ax
c001d960:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d964:	0f b6 c0             	movzx  eax,al
c001d967:	83 f8 08             	cmp    eax,0x8
c001d96a:	77 6c                	ja     c001d9d8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xb8>
c001d96c:	8b 04 85 74 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd198c]
c001d973:	ff e0                	jmp    eax
c001d975:	8d 76 00             	lea    esi,[esi+0x0]
c001d978:	b8 69 dd 02 c0       	mov    eax,0xc002dd69
c001d97d:	e9 42 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d982:	66 90                	xchg   ax,ax
c001d984:	b8 7d dd 02 c0       	mov    eax,0xc002dd7d
c001d989:	e9 36 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d98e:	66 90                	xchg   ax,ax
c001d990:	b8 90 dd 02 c0       	mov    eax,0xc002dd90
c001d995:	e9 2a 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d99a:	66 90                	xchg   ax,ax
c001d99c:	b8 ab dd 02 c0       	mov    eax,0xc002ddab
c001d9a1:	e9 1e 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9a6:	66 90                	xchg   ax,ax
c001d9a8:	b8 c2 dd 02 c0       	mov    eax,0xc002ddc2
c001d9ad:	e9 12 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9b2:	66 90                	xchg   ax,ax
c001d9b4:	b8 d6 dd 02 c0       	mov    eax,0xc002ddd6
c001d9b9:	e9 06 05 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9be:	66 90                	xchg   ax,ax
c001d9c0:	b8 e9 dd 02 c0       	mov    eax,0xc002dde9
c001d9c5:	e9 fa 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9ca:	66 90                	xchg   ax,ax
c001d9cc:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c001d9d1:	e9 ee 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9d6:	66 90                	xchg   ax,ax
c001d9d8:	b8 fd dd 02 c0       	mov    eax,0xc002ddfd
c001d9dd:	e9 e2 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9e2:	66 90                	xchg   ax,ax
c001d9e4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d9e8:	0f b6 c0             	movzx  eax,al
c001d9eb:	85 c0                	test   eax,eax
c001d9ed:	75 0d                	jne    c001d9fc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xdc>
c001d9ef:	b8 15 de 02 c0       	mov    eax,0xc002de15
c001d9f4:	e9 cb 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d9fc:	b8 2d de 02 c0       	mov    eax,0xc002de2d
c001da01:	e9 be 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da06:	66 90                	xchg   ax,ax
c001da08:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001da0c:	0f b6 c0             	movzx  eax,al
c001da0f:	83 f8 01             	cmp    eax,0x1
c001da12:	74 14                	je     c001da28 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x108>
c001da14:	83 f8 02             	cmp    eax,0x2
c001da17:	74 1b                	je     c001da34 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x114>
c001da19:	85 c0                	test   eax,eax
c001da1b:	75 23                	jne    c001da40 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x120>
c001da1d:	b8 f4 e3 02 c0       	mov    eax,0xc002e3f4
c001da22:	e9 9d 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da27:	90                   	nop
c001da28:	b8 44 de 02 c0       	mov    eax,0xc002de44
c001da2d:	e9 92 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da32:	66 90                	xchg   ax,ax
c001da34:	b8 57 de 02 c0       	mov    eax,0xc002de57
c001da39:	e9 86 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da3e:	66 90                	xchg   ax,ax
c001da40:	b8 69 de 02 c0       	mov    eax,0xc002de69
c001da45:	e9 7a 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da4a:	66 90                	xchg   ax,ax
c001da4c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001da50:	0f b6 c0             	movzx  eax,al
c001da53:	83 f8 01             	cmp    eax,0x1
c001da56:	74 24                	je     c001da7c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x15c>
c001da58:	83 f8 01             	cmp    eax,0x1
c001da5b:	7f 07                	jg     c001da64 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x144>
c001da5d:	85 c0                	test   eax,eax
c001da5f:	74 0f                	je     c001da70 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x150>
c001da61:	eb 3d                	jmp    c001daa0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001da63:	90                   	nop
c001da64:	83 f8 02             	cmp    eax,0x2
c001da67:	74 1f                	je     c001da88 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x168>
c001da69:	83 f8 03             	cmp    eax,0x3
c001da6c:	74 26                	je     c001da94 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x174>
c001da6e:	eb 30                	jmp    c001daa0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001da70:	b8 80 de 02 c0       	mov    eax,0xc002de80
c001da75:	e9 4a 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da7a:	66 90                	xchg   ax,ax
c001da7c:	b8 95 de 02 c0       	mov    eax,0xc002de95
c001da81:	e9 3e 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da86:	66 90                	xchg   ax,ax
c001da88:	b8 aa de 02 c0       	mov    eax,0xc002deaa
c001da8d:	e9 32 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da92:	66 90                	xchg   ax,ax
c001da94:	b8 bf de 02 c0       	mov    eax,0xc002debf
c001da99:	e9 26 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da9e:	66 90                	xchg   ax,ax
c001daa0:	b8 d0 de 02 c0       	mov    eax,0xc002ded0
c001daa5:	e9 1a 04 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001daaa:	66 90                	xchg   ax,ax
c001daac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dab0:	0f b6 c0             	movzx  eax,al
c001dab3:	85 c0                	test   eax,eax
c001dab5:	74 09                	je     c001dac0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1a0>
c001dab7:	83 f8 01             	cmp    eax,0x1
c001daba:	74 10                	je     c001dacc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1ac>
c001dabc:	eb 1a                	jmp    c001dad8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1b8>
c001dabe:	66 90                	xchg   ax,ax
c001dac0:	b8 ea de 02 c0       	mov    eax,0xc002deea
c001dac5:	e9 fa 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001daca:	66 90                	xchg   ax,ax
c001dacc:	b8 fd de 02 c0       	mov    eax,0xc002defd
c001dad1:	e9 ee 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dad6:	66 90                	xchg   ax,ax
c001dad8:	b8 19 df 02 c0       	mov    eax,0xc002df19
c001dadd:	e9 e2 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dae2:	66 90                	xchg   ax,ax
c001dae4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dae8:	0f b6 c0             	movzx  eax,al
c001daeb:	83 f8 0a             	cmp    eax,0xa
c001daee:	0f 87 84 00 00 00    	ja     c001db78 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x258>
c001daf4:	8b 04 85 98 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1968]
c001dafb:	ff e0                	jmp    eax
c001dafd:	8d 76 00             	lea    esi,[esi+0x0]
c001db00:	b8 b6 df 02 c0       	mov    eax,0xc002dfb6
c001db05:	e9 ba 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db0a:	66 90                	xchg   ax,ax
c001db0c:	b8 2f df 02 c0       	mov    eax,0xc002df2f
c001db11:	e9 ae 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db16:	66 90                	xchg   ax,ax
c001db18:	b8 3e df 02 c0       	mov    eax,0xc002df3e
c001db1d:	e9 a2 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db22:	66 90                	xchg   ax,ax
c001db24:	b8 4e df 02 c0       	mov    eax,0xc002df4e
c001db29:	e9 96 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db2e:	66 90                	xchg   ax,ax
c001db30:	b8 5d df 02 c0       	mov    eax,0xc002df5d
c001db35:	e9 8a 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db3a:	66 90                	xchg   ax,ax
c001db3c:	b8 6f df 02 c0       	mov    eax,0xc002df6f
c001db41:	e9 7e 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db46:	66 90                	xchg   ax,ax
c001db48:	b8 7d df 02 c0       	mov    eax,0xc002df7d
c001db4d:	e9 72 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db52:	66 90                	xchg   ax,ax
c001db54:	b8 8a df 02 c0       	mov    eax,0xc002df8a
c001db59:	e9 66 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db5e:	66 90                	xchg   ax,ax
c001db60:	b8 99 df 02 c0       	mov    eax,0xc002df99
c001db65:	e9 5a 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db6a:	66 90                	xchg   ax,ax
c001db6c:	b8 a8 df 02 c0       	mov    eax,0xc002dfa8
c001db71:	e9 4e 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db76:	66 90                	xchg   ax,ax
c001db78:	b8 c6 df 02 c0       	mov    eax,0xc002dfc6
c001db7d:	e9 42 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db82:	66 90                	xchg   ax,ax
c001db84:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001db88:	0f b6 c0             	movzx  eax,al
c001db8b:	83 f8 05             	cmp    eax,0x5
c001db8e:	77 54                	ja     c001dbe4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x2c4>
c001db90:	8b 04 85 c4 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd193c]
c001db97:	ff e0                	jmp    eax
c001db99:	8d 76 00             	lea    esi,[esi+0x0]
c001db9c:	b8 d7 df 02 c0       	mov    eax,0xc002dfd7
c001dba1:	e9 1e 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dba6:	66 90                	xchg   ax,ax
c001dba8:	b8 ed df 02 c0       	mov    eax,0xc002dfed
c001dbad:	e9 12 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbb2:	66 90                	xchg   ax,ax
c001dbb4:	b8 18 e4 02 c0       	mov    eax,0xc002e418
c001dbb9:	e9 06 03 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbbe:	66 90                	xchg   ax,ax
c001dbc0:	b8 05 e0 02 c0       	mov    eax,0xc002e005
c001dbc5:	e9 fa 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbca:	66 90                	xchg   ax,ax
c001dbcc:	b8 0f e0 02 c0       	mov    eax,0xc002e00f
c001dbd1:	e9 ee 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbd6:	66 90                	xchg   ax,ax
c001dbd8:	b8 27 e0 02 c0       	mov    eax,0xc002e027
c001dbdd:	e9 e2 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbe2:	66 90                	xchg   ax,ax
c001dbe4:	b8 41 e0 02 c0       	mov    eax,0xc002e041
c001dbe9:	e9 d6 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbee:	66 90                	xchg   ax,ax
c001dbf0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dbf4:	0f b6 c0             	movzx  eax,al
c001dbf7:	83 f8 06             	cmp    eax,0x6
c001dbfa:	77 60                	ja     c001dc5c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x33c>
c001dbfc:	8b 04 85 dc e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1924]
c001dc03:	ff e0                	jmp    eax
c001dc05:	8d 76 00             	lea    esi,[esi+0x0]
c001dc08:	b8 38 e4 02 c0       	mov    eax,0xc002e438
c001dc0d:	e9 b2 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc12:	66 90                	xchg   ax,ax
c001dc14:	b8 5e e0 02 c0       	mov    eax,0xc002e05e
c001dc19:	e9 a6 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc1e:	66 90                	xchg   ax,ax
c001dc20:	b8 71 e0 02 c0       	mov    eax,0xc002e071
c001dc25:	e9 9a 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc2a:	66 90                	xchg   ax,ax
c001dc2c:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c001dc31:	e9 8e 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc36:	66 90                	xchg   ax,ax
c001dc38:	b8 7b e0 02 c0       	mov    eax,0xc002e07b
c001dc3d:	e9 82 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc42:	66 90                	xchg   ax,ax
c001dc44:	b8 93 e0 02 c0       	mov    eax,0xc002e093
c001dc49:	e9 76 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc4e:	66 90                	xchg   ax,ax
c001dc50:	b8 aa e0 02 c0       	mov    eax,0xc002e0aa
c001dc55:	e9 6a 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc5a:	66 90                	xchg   ax,ax
c001dc5c:	b8 b4 e0 02 c0       	mov    eax,0xc002e0b4
c001dc61:	e9 5e 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc66:	66 90                	xchg   ax,ax
c001dc68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dc6c:	0f b6 c0             	movzx  eax,al
c001dc6f:	83 f8 04             	cmp    eax,0x4
c001dc72:	77 48                	ja     c001dcbc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x39c>
c001dc74:	8b 04 85 f8 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1908]
c001dc7b:	ff e0                	jmp    eax
c001dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc80:	b8 ca e0 02 c0       	mov    eax,0xc002e0ca
c001dc85:	e9 3a 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc8a:	66 90                	xchg   ax,ax
c001dc8c:	b8 e2 e0 02 c0       	mov    eax,0xc002e0e2
c001dc91:	e9 2e 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc96:	66 90                	xchg   ax,ax
c001dc98:	b8 f4 e0 02 c0       	mov    eax,0xc002e0f4
c001dc9d:	e9 22 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dca2:	66 90                	xchg   ax,ax
c001dca4:	b8 09 e1 02 c0       	mov    eax,0xc002e109
c001dca9:	e9 16 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcae:	66 90                	xchg   ax,ax
c001dcb0:	b8 21 e1 02 c0       	mov    eax,0xc002e121
c001dcb5:	e9 0a 02 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcba:	66 90                	xchg   ax,ax
c001dcbc:	b8 3a e1 02 c0       	mov    eax,0xc002e13a
c001dcc1:	e9 fe 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcc6:	66 90                	xchg   ax,ax
c001dcc8:	b8 56 e1 02 c0       	mov    eax,0xc002e156
c001dccd:	e9 f2 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcd2:	66 90                	xchg   ax,ax
c001dcd4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dcd8:	0f b6 c0             	movzx  eax,al
c001dcdb:	83 f8 40             	cmp    eax,0x40
c001dcde:	77 6c                	ja     c001dd4c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x42c>
c001dce0:	8b 04 85 0c e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18f4]
c001dce7:	ff e0                	jmp    eax
c001dce9:	8d 76 00             	lea    esi,[esi+0x0]
c001dcec:	b8 6a e1 02 c0       	mov    eax,0xc002e16a
c001dcf1:	e9 ce 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcf6:	66 90                	xchg   ax,ax
c001dcf8:	b8 79 e1 02 c0       	mov    eax,0xc002e179
c001dcfd:	e9 c2 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd02:	66 90                	xchg   ax,ax
c001dd04:	b8 88 e1 02 c0       	mov    eax,0xc002e188
c001dd09:	e9 b6 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd0e:	66 90                	xchg   ax,ax
c001dd10:	b8 9a e1 02 c0       	mov    eax,0xc002e19a
c001dd15:	e9 aa 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd1a:	66 90                	xchg   ax,ax
c001dd1c:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c001dd21:	e9 9e 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd26:	66 90                	xchg   ax,ax
c001dd28:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c001dd2d:	e9 92 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd32:	66 90                	xchg   ax,ax
c001dd34:	b8 d2 e1 02 c0       	mov    eax,0xc002e1d2
c001dd39:	e9 86 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd3e:	66 90                	xchg   ax,ax
c001dd40:	b8 e1 e1 02 c0       	mov    eax,0xc002e1e1
c001dd45:	e9 7a 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd4a:	66 90                	xchg   ax,ax
c001dd4c:	b8 ee e1 02 c0       	mov    eax,0xc002e1ee
c001dd51:	e9 6e 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd56:	66 90                	xchg   ax,ax
c001dd58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dd5c:	0f b6 c0             	movzx  eax,al
c001dd5f:	83 f8 09             	cmp    eax,0x9
c001dd62:	0f 87 84 00 00 00    	ja     c001ddec <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x4cc>
c001dd68:	8b 04 85 10 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17f0]
c001dd6f:	ff e0                	jmp    eax
c001dd71:	8d 76 00             	lea    esi,[esi+0x0]
c001dd74:	b8 fe e1 02 c0       	mov    eax,0xc002e1fe
c001dd79:	e9 46 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd7e:	66 90                	xchg   ax,ax
c001dd80:	b8 16 e2 02 c0       	mov    eax,0xc002e216
c001dd85:	e9 3a 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd8a:	66 90                	xchg   ax,ax
c001dd8c:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c001dd91:	e9 2e 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd96:	66 90                	xchg   ax,ax
c001dd98:	b8 38 e2 02 c0       	mov    eax,0xc002e238
c001dd9d:	e9 22 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dda2:	66 90                	xchg   ax,ax
c001dda4:	b8 4b e2 02 c0       	mov    eax,0xc002e24b
c001dda9:	e9 16 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddae:	66 90                	xchg   ax,ax
c001ddb0:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c001ddb5:	e9 0a 01 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddba:	66 90                	xchg   ax,ax
c001ddbc:	b8 75 e2 02 c0       	mov    eax,0xc002e275
c001ddc1:	e9 fe 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddc6:	66 90                	xchg   ax,ax
c001ddc8:	b8 8f e2 02 c0       	mov    eax,0xc002e28f
c001ddcd:	e9 f2 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddd2:	66 90                	xchg   ax,ax
c001ddd4:	b8 a2 e2 02 c0       	mov    eax,0xc002e2a2
c001ddd9:	e9 e6 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddde:	66 90                	xchg   ax,ax
c001dde0:	b8 b7 e2 02 c0       	mov    eax,0xc002e2b7
c001dde5:	e9 da 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddea:	66 90                	xchg   ax,ax
c001ddec:	b8 cc e2 02 c0       	mov    eax,0xc002e2cc
c001ddf1:	e9 ce 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddf6:	66 90                	xchg   ax,ax
c001ddf8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ddfc:	0f b6 c0             	movzx  eax,al
c001ddff:	83 f8 21             	cmp    eax,0x21
c001de02:	77 54                	ja     c001de58 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x538>
c001de04:	8b 04 85 38 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17c8]
c001de0b:	ff e0                	jmp    eax
c001de0d:	8d 76 00             	lea    esi,[esi+0x0]
c001de10:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c001de15:	e9 aa 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de1a:	66 90                	xchg   ax,ax
c001de1c:	b8 e6 e2 02 c0       	mov    eax,0xc002e2e6
c001de21:	e9 9e 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de26:	66 90                	xchg   ax,ax
c001de28:	b8 f8 e2 02 c0       	mov    eax,0xc002e2f8
c001de2d:	e9 92 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de32:	66 90                	xchg   ax,ax
c001de34:	b8 0a e3 02 c0       	mov    eax,0xc002e30a
c001de39:	e9 86 00 00 00       	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de3e:	66 90                	xchg   ax,ax
c001de40:	b8 23 e3 02 c0       	mov    eax,0xc002e323
c001de45:	eb 7d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de47:	90                   	nop
c001de48:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c001de4d:	eb 75                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de4f:	90                   	nop
c001de50:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c001de55:	eb 6d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de57:	90                   	nop
c001de58:	b8 3c e3 02 c0       	mov    eax,0xc002e33c
c001de5d:	eb 65                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de5f:	90                   	nop
c001de60:	b8 54 e3 02 c0       	mov    eax,0xc002e354
c001de65:	eb 5d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de67:	90                   	nop
c001de68:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c001de6d:	eb 55                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de6f:	90                   	nop
c001de70:	b8 6f e3 02 c0       	mov    eax,0xc002e36f
c001de75:	eb 4d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de77:	90                   	nop
c001de78:	b8 08 e5 02 c0       	mov    eax,0xc002e508
c001de7d:	eb 45                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de7f:	90                   	nop
c001de80:	b8 89 e3 02 c0       	mov    eax,0xc002e389
c001de85:	eb 3d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de87:	90                   	nop
c001de88:	b8 2c e5 02 c0       	mov    eax,0xc002e52c
c001de8d:	eb 35                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de8f:	90                   	nop
c001de90:	b8 e1 e1 02 c0       	mov    eax,0xc002e1e1
c001de95:	eb 2d                	jmp    c001dec4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de97:	90                   	nop
c001de98:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001de9c:	0f b6 c8             	movzx  ecx,al
c001de9f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dea3:	0f b6 d0             	movzx  edx,al
c001dea6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001deaa:	0f b6 c0             	movzx  eax,al
c001dead:	51                   	push   ecx
c001deae:	52                   	push   edx
c001deaf:	50                   	push   eax
c001deb0:	68 50 e5 02 c0       	push   0xc002e550
c001deb5:	e8 ac 90 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	b8 a4 e3 02 c0       	mov    eax,0xc002e3a4
c001dec2:	66 90                	xchg   ax,ax
c001dec4:	83 c4 0c             	add    esp,0xc
c001dec7:	c3                   	ret    

c001dec8 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>:
c001dec8:	55                   	push   ebp
c001dec9:	89 e5                	mov    ebp,esp
c001decb:	56                   	push   esi
c001decc:	53                   	push   ebx
c001decd:	83 c4 80             	add    esp,0xffffff80
c001ded0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ded3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ded6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ded9:	88 45 84             	mov    BYTE PTR [ebp-0x7c],al
c001dedc:	88 c8                	mov    al,cl
c001dede:	88 45 80             	mov    BYTE PTR [ebp-0x80],al
c001dee1:	88 d0                	mov    al,dl
c001dee3:	88 85 7c ff ff ff    	mov    BYTE PTR [ebp-0x84],al
c001dee9:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001def0:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001def4:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001def8:	6a 0c                	push   0xc
c001defa:	51                   	push   ecx
c001defb:	52                   	push   edx
c001defc:	50                   	push   eax
c001defd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df00:	e8 8f f5 ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df05:	83 c4 14             	add    esp,0x14
c001df08:	0f b7 c0             	movzx  eax,ax
c001df0b:	c1 f8 10             	sar    eax,0x10
c001df0e:	25 ff 00 00 00       	and    eax,0xff
c001df13:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001df16:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c001df1a:	0f 85 7c 02 00 00    	jne    c001e19c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2d4>
c001df20:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001df27:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001df2b:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001df2f:	51                   	push   ecx
c001df30:	52                   	push   edx
c001df31:	50                   	push   eax
c001df32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df35:	e8 32 f7 ff ff       	call   c001d66c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df3a:	83 c4 10             	add    esp,0x10
c001df3d:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c001df41:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c001df45:	3d ff ff 00 00       	cmp    eax,0xffff
c001df4a:	0f 84 50 02 00 00    	je     c001e1a0 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2d8>
c001df50:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001df57:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001df5b:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001df5f:	51                   	push   ecx
c001df60:	52                   	push   edx
c001df61:	50                   	push   eax
c001df62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df65:	e8 8a f7 ff ff       	call   c001d6f4 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>
c001df6a:	83 c4 10             	add    esp,0x10
c001df6d:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
c001df71:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001df78:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001df7c:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001df80:	51                   	push   ecx
c001df81:	52                   	push   edx
c001df82:	50                   	push   eax
c001df83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df86:	e8 75 f8 ff ff       	call   c001d800 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001df91:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001df98:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001df9c:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001dfa0:	6a 3c                	push   0x3c
c001dfa2:	51                   	push   ecx
c001dfa3:	52                   	push   edx
c001dfa4:	50                   	push   eax
c001dfa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfa8:	e8 e7 f4 ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfad:	83 c4 14             	add    esp,0x14
c001dfb0:	0f b7 c0             	movzx  eax,ax
c001dfb3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001dfb6:	c1 6d e0 08          	shr    DWORD PTR [ebp-0x20],0x8
c001dfba:	81 65 e0 ff 00 00 00 	and    DWORD PTR [ebp-0x20],0xff
c001dfc1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001dfc4:	88 45 b1             	mov    BYTE PTR [ebp-0x4f],al
c001dfc7:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001dfcc:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dfd2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001dfd8:	85 c0                	test   eax,eax
c001dfda:	74 7c                	je     c001e058 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x190>
c001dfdc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dfe3:	90                   	nop
c001dfe4:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001dfe9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dfef:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001dff5:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dff8:	7d 5e                	jge    c001e058 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x190>
c001dffa:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001dffe:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e003:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e009:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001e00c:	83 c1 2a             	add    ecx,0x2a
c001e00f:	8b 44 c8 0c          	mov    eax,DWORD PTR [eax+ecx*8+0xc]
c001e013:	0f b7 c0             	movzx  eax,ax
c001e016:	39 c2                	cmp    edx,eax
c001e018:	75 36                	jne    c001e050 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x188>
c001e01a:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e01f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e025:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e028:	83 c2 2a             	add    edx,0x2a
c001e02b:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e02f:	0f b6 c0             	movzx  eax,al
c001e032:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c001e035:	75 19                	jne    c001e050 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x188>
c001e037:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e03c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e042:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e045:	83 c2 2a             	add    edx,0x2a
c001e048:	8a 44 d0 0f          	mov    al,BYTE PTR [eax+edx*8+0xf]
c001e04c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e04f:	90                   	nop
c001e050:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e054:	eb 8e                	jmp    c001dfe4 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x11c>
c001e056:	66 90                	xchg   ax,ax
c001e058:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e05f:	90                   	nop
c001e060:	83 7d ec 05          	cmp    DWORD PTR [ebp-0x14],0x5
c001e064:	7f 36                	jg     c001e09c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1d4>
c001e066:	0f b6 9d 7c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0x84]
c001e06d:	0f b6 4d 80          	movzx  ecx,BYTE PTR [ebp-0x80]
c001e071:	0f b6 55 84          	movzx  edx,BYTE PTR [ebp-0x7c]
c001e075:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e078:	0f b6 c0             	movzx  eax,al
c001e07b:	53                   	push   ebx
c001e07c:	51                   	push   ecx
c001e07d:	52                   	push   edx
c001e07e:	50                   	push   eax
c001e07f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e082:	e8 05 f8 ff ff       	call   c001d88c <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e087:	83 c4 14             	add    esp,0x14
c001e08a:	89 c2                	mov    edx,eax
c001e08c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e08f:	89 54 85 98          	mov    DWORD PTR [ebp+eax*4-0x68],edx
c001e093:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
c001e097:	eb c7                	jmp    c001e060 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x198>
c001e099:	8d 76 00             	lea    esi,[esi+0x0]
c001e09c:	8a 45 84             	mov    al,BYTE PTR [ebp-0x7c]
c001e09f:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
c001e0a2:	8a 45 80             	mov    al,BYTE PTR [ebp-0x80]
c001e0a5:	88 45 95             	mov    BYTE PTR [ebp-0x6b],al
c001e0a8:	8a 85 7c ff ff ff    	mov    al,BYTE PTR [ebp-0x84]
c001e0ae:	88 45 96             	mov    BYTE PTR [ebp-0x6a],al
c001e0b1:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001e0b5:	c1 f8 08             	sar    eax,0x8
c001e0b8:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
c001e0bb:	66 8b 45 e4          	mov    ax,WORD PTR [ebp-0x1c]
c001e0bf:	88 45 91             	mov    BYTE PTR [ebp-0x6f],al
c001e0c2:	8a 45 96             	mov    al,BYTE PTR [ebp-0x6a]
c001e0c5:	0f b6 c8             	movzx  ecx,al
c001e0c8:	8a 45 95             	mov    al,BYTE PTR [ebp-0x6b]
c001e0cb:	0f b6 d0             	movzx  edx,al
c001e0ce:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
c001e0d1:	0f b6 c0             	movzx  eax,al
c001e0d4:	6a 02                	push   0x2
c001e0d6:	51                   	push   ecx
c001e0d7:	52                   	push   edx
c001e0d8:	50                   	push   eax
c001e0d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0dc:	e8 b3 f3 ff ff       	call   c001d494 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0e1:	83 c4 14             	add    esp,0x14
c001e0e4:	66 89 45 b2          	mov    WORD PTR [ebp-0x4e],ax
c001e0e8:	0f b6 8d 7c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0x84]
c001e0ef:	0f b6 55 80          	movzx  edx,BYTE PTR [ebp-0x80]
c001e0f3:	0f b6 45 84          	movzx  eax,BYTE PTR [ebp-0x7c]
c001e0f7:	51                   	push   ecx
c001e0f8:	52                   	push   edx
c001e0f9:	50                   	push   eax
c001e0fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0fd:	e8 72 f6 ff ff       	call   c001d774 <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	88 45 97             	mov    BYTE PTR [ebp-0x69],al
c001e108:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c001e10c:	66 89 45 92          	mov    WORD PTR [ebp-0x6e],ax
c001e110:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e113:	88 45 b0             	mov    BYTE PTR [ebp-0x50],al
c001e116:	b8 24 00 00 00       	mov    eax,0x24
c001e11b:	83 e0 fc             	and    eax,0xfffffffc
c001e11e:	89 c1                	mov    ecx,eax
c001e120:	b8 00 00 00 00       	mov    eax,0x0
c001e125:	8d 76 00             	lea    esi,[esi+0x0]
c001e128:	8b 54 05 90          	mov    edx,DWORD PTR [ebp+eax*1-0x70]
c001e12c:	89 54 05 b4          	mov    DWORD PTR [ebp+eax*1-0x4c],edx
c001e130:	83 c0 04             	add    eax,0x4
c001e133:	39 c8                	cmp    eax,ecx
c001e135:	72 f1                	jb     c001e128 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x260>
c001e137:	c7 45 d8 88 01 00 00 	mov    DWORD PTR [ebp-0x28],0x188
c001e13e:	83 ec 0c             	sub    esp,0xc
c001e141:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001e144:	e8 fb 22 ff ff       	call   c0010444 <malloc>
c001e149:	83 c4 10             	add    esp,0x10
c001e14c:	89 c3                	mov    ebx,eax
c001e14e:	83 ec 08             	sub    esp,0x8
c001e151:	83 ec 24             	sub    esp,0x24
c001e154:	89 e1                	mov    ecx,esp
c001e156:	b8 24 00 00 00       	mov    eax,0x24
c001e15b:	83 e0 fc             	and    eax,0xfffffffc
c001e15e:	89 c6                	mov    esi,eax
c001e160:	b8 00 00 00 00       	mov    eax,0x0
c001e165:	8d 76 00             	lea    esi,[esi+0x0]
c001e168:	8b 54 05 b4          	mov    edx,DWORD PTR [ebp+eax*1-0x4c]
c001e16c:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001e16f:	83 c0 04             	add    eax,0x4
c001e172:	39 f0                	cmp    eax,esi
c001e174:	72 f2                	jb     c001e168 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2a0>
c001e176:	53                   	push   ebx
c001e177:	e8 9c c0 00 00       	call   c002a218 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>
c001e17c:	83 c4 30             	add    esp,0x30
c001e17f:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001e182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e188:	83 ec 08             	sub    esp,0x8
c001e18b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001e18e:	50                   	push   eax
c001e18f:	e8 90 9a fe ff       	call   c0007c24 <Hardware::addChild(Hardware*)>
c001e194:	83 c4 10             	add    esp,0x10
c001e197:	eb 0b                	jmp    c001e1a4 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2dc>
c001e199:	8d 76 00             	lea    esi,[esi+0x0]
c001e19c:	90                   	nop
c001e19d:	eb 05                	jmp    c001e1a4 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x2dc>
c001e19f:	90                   	nop
c001e1a0:	90                   	nop
c001e1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1a4:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e1a7:	5b                   	pop    ebx
c001e1a8:	5e                   	pop    esi
c001e1a9:	5d                   	pop    ebp
c001e1aa:	c3                   	ret    
c001e1ab:	90                   	nop

c001e1ac <PCIDriver::checkDevice(unsigned char, unsigned char)>:
c001e1ac:	83 ec 2c             	sub    esp,0x2c
c001e1af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e1b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e1b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e1bb:	88 d0                	mov    al,dl
c001e1bd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e1c1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e1c6:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e1cb:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e1d5:	51                   	push   ecx
c001e1d6:	52                   	push   edx
c001e1d7:	50                   	push   eax
c001e1d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1dc:	e8 8b f4 ff ff       	call   c001d66c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e1e9:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e1ee:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e1f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e1f8:	51                   	push   ecx
c001e1f9:	52                   	push   edx
c001e1fa:	50                   	push   eax
c001e1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1ff:	e8 c4 fc ff ff       	call   c001dec8 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e20c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e211:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e216:	51                   	push   ecx
c001e217:	52                   	push   edx
c001e218:	50                   	push   eax
c001e219:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e21d:	e8 8e f4 ff ff       	call   c001d6b0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e222:	83 c4 10             	add    esp,0x10
c001e225:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e229:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001e22d:	0f be c0             	movsx  eax,al
c001e230:	85 c0                	test   eax,eax
c001e232:	0f 89 70 00 00 00    	jns    c001e2a8 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xfc>
c001e238:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e23d:	8d 76 00             	lea    esi,[esi+0x0]
c001e240:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e245:	83 f8 07             	cmp    eax,0x7
c001e248:	77 5e                	ja     c001e2a8 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xfc>
c001e24a:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e24f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e254:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e259:	51                   	push   ecx
c001e25a:	52                   	push   edx
c001e25b:	50                   	push   eax
c001e25c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e260:	e8 07 f4 ff ff       	call   c001d66c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	0f b7 c0             	movzx  eax,ax
c001e26b:	3d ff ff 00 00       	cmp    eax,0xffff
c001e270:	0f 95 c0             	setne  al
c001e273:	0f b6 c0             	movzx  eax,al
c001e276:	85 c0                	test   eax,eax
c001e278:	74 1e                	je     c001e298 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xec>
c001e27a:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e27f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e284:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e289:	51                   	push   ecx
c001e28a:	52                   	push   edx
c001e28b:	50                   	push   eax
c001e28c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e290:	e8 33 fc ff ff       	call   c001dec8 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e29c:	83 c0 01             	add    eax,0x1
c001e29f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2a3:	eb 9b                	jmp    c001e240 <PCIDriver::checkDevice(unsigned char, unsigned char)+0x94>
c001e2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e2a8:	90                   	nop
c001e2a9:	83 c4 2c             	add    esp,0x2c
c001e2ac:	c3                   	ret    
c001e2ad:	90                   	nop
c001e2ae:	66 90                	xchg   ax,ax

c001e2b0 <PCIDriver::checkBus(unsigned char)>:
c001e2b0:	83 ec 2c             	sub    esp,0x2c
c001e2b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e2b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e2bb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e2c0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e2c5:	83 f8 1f             	cmp    eax,0x1f
c001e2c8:	77 2a                	ja     c001e2f4 <PCIDriver::checkBus(unsigned char)+0x44>
c001e2ca:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001e2cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e2d4:	83 ec 04             	sub    esp,0x4
c001e2d7:	52                   	push   edx
c001e2d8:	50                   	push   eax
c001e2d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2dd:	e8 ca fe ff ff       	call   c001e1ac <PCIDriver::checkDevice(unsigned char, unsigned char)>
c001e2e2:	83 c4 10             	add    esp,0x10
c001e2e5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e2e9:	83 c0 01             	add    eax,0x1
c001e2ec:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2f0:	eb ce                	jmp    c001e2c0 <PCIDriver::checkBus(unsigned char)+0x10>
c001e2f2:	66 90                	xchg   ax,ax
c001e2f4:	90                   	nop
c001e2f5:	83 c4 2c             	add    esp,0x2c
c001e2f8:	c3                   	ret    
c001e2f9:	90                   	nop
c001e2fa:	66 90                	xchg   ax,ax

c001e2fc <PCIDriver::enumerateDevices()>:
c001e2fc:	83 ec 1c             	sub    esp,0x1c
c001e2ff:	6a 00                	push   0x0
c001e301:	6a 00                	push   0x0
c001e303:	6a 00                	push   0x0
c001e305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e309:	e8 a2 f3 ff ff       	call   c001d6b0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e30e:	83 c4 10             	add    esp,0x10
c001e311:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e316:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001e31b:	25 80 00 00 00       	and    eax,0x80
c001e320:	75 16                	jne    c001e338 <PCIDriver::enumerateDevices()+0x3c>
c001e322:	83 ec 08             	sub    esp,0x8
c001e325:	6a 00                	push   0x0
c001e327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e32b:	e8 80 ff ff ff       	call   c001e2b0 <PCIDriver::checkBus(unsigned char)>
c001e330:	83 c4 10             	add    esp,0x10
c001e333:	eb 63                	jmp    c001e398 <PCIDriver::enumerateDevices()+0x9c>
c001e335:	8d 76 00             	lea    esi,[esi+0x0]
c001e338:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e33d:	8d 76 00             	lea    esi,[esi+0x0]
c001e340:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e345:	83 f8 07             	cmp    eax,0x7
c001e348:	77 4e                	ja     c001e398 <PCIDriver::enumerateDevices()+0x9c>
c001e34a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e34f:	50                   	push   eax
c001e350:	6a 00                	push   0x0
c001e352:	6a 00                	push   0x0
c001e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e358:	e8 0f f3 ff ff       	call   c001d66c <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	0f b7 c0             	movzx  eax,ax
c001e363:	3d ff ff 00 00       	cmp    eax,0xffff
c001e368:	0f 95 c0             	setne  al
c001e36b:	0f b6 c0             	movzx  eax,al
c001e36e:	85 c0                	test   eax,eax
c001e370:	75 22                	jne    c001e394 <PCIDriver::enumerateDevices()+0x98>
c001e372:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e377:	83 ec 08             	sub    esp,0x8
c001e37a:	50                   	push   eax
c001e37b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e37f:	e8 2c ff ff ff       	call   c001e2b0 <PCIDriver::checkBus(unsigned char)>
c001e384:	83 c4 10             	add    esp,0x10
c001e387:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e38b:	83 c0 01             	add    eax,0x1
c001e38e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e392:	eb ac                	jmp    c001e340 <PCIDriver::enumerateDevices()+0x44>
c001e394:	90                   	nop
c001e395:	8d 76 00             	lea    esi,[esi+0x0]
c001e398:	90                   	nop
c001e399:	83 c4 1c             	add    esp,0x1c
c001e39c:	c3                   	ret    
c001e39d:	90                   	nop
c001e39e:	66 90                	xchg   ax,ax

c001e3a0 <PCIDriver::initialise()>:
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3aa:	6a 04                	push   0x4
c001e3ac:	6a 08                	push   0x8
c001e3ae:	68 f8 0c 00 00       	push   0xcf8
c001e3b3:	50                   	push   eax
c001e3b4:	e8 3b 9a fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001e3b9:	83 c4 10             	add    esp,0x10
c001e3bc:	83 ec 0c             	sub    esp,0xc
c001e3bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3c3:	e8 34 ff ff ff       	call   c001e2fc <PCIDriver::enumerateDevices()>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3d1:	83 c0 08             	add    eax,0x8
c001e3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3d6:	83 ec 0c             	sub    esp,0xc
c001e3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3dd:	ff d0                	call   eax
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	90                   	nop
c001e3e3:	83 c4 0c             	add    esp,0xc
c001e3e6:	c3                   	ret    
c001e3e7:	90                   	nop

c001e3e8 <PCIDriver::detect()>:
c001e3e8:	83 ec 2c             	sub    esp,0x2c
c001e3eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3f2:	83 c0 74             	add    eax,0x74
c001e3f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3f9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e3fd:	83 ec 08             	sub    esp,0x8
c001e400:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e404:	50                   	push   eax
c001e405:	e8 82 a6 00 00       	call   c0028a8c <std::vector<Hardware*>::begin()>
c001e40a:	83 c4 0c             	add    esp,0xc
c001e40d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e411:	83 ec 08             	sub    esp,0x8
c001e414:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e418:	50                   	push   eax
c001e419:	e8 92 a6 00 00       	call   c0028ab0 <std::vector<Hardware*>::end()>
c001e41e:	83 c4 0c             	add    esp,0xc
c001e421:	8d 76 00             	lea    esi,[esi+0x0]
c001e424:	83 ec 08             	sub    esp,0x8
c001e427:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e42b:	50                   	push   eax
c001e42c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e430:	50                   	push   eax
c001e431:	e8 4a a3 00 00       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	0f b6 c0             	movzx  eax,al
c001e43c:	85 c0                	test   eax,eax
c001e43e:	74 3c                	je     c001e47c <PCIDriver::detect()+0x94>
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e447:	50                   	push   eax
c001e448:	e8 47 a3 00 00       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c001e44d:	83 c4 10             	add    esp,0x10
c001e450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e454:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e458:	83 ec 08             	sub    esp,0x8
c001e45b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001e45f:	52                   	push   edx
c001e460:	50                   	push   eax
c001e461:	e8 6e a6 00 00       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c001e466:	83 c4 0c             	add    esp,0xc
c001e469:	83 ec 0c             	sub    esp,0xc
c001e46c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e470:	50                   	push   eax
c001e471:	e8 f6 a2 00 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	eb a9                	jmp    c001e424 <PCIDriver::detect()+0x3c>
c001e47b:	90                   	nop
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e483:	50                   	push   eax
c001e484:	e8 e3 a2 00 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e493:	50                   	push   eax
c001e494:	e8 d3 a2 00 00       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c001e499:	83 c4 10             	add    esp,0x10
c001e49c:	90                   	nop
c001e49d:	83 c4 2c             	add    esp,0x2c
c001e4a0:	c3                   	ret    
c001e4a1:	90                   	nop

c001e4a2 <UART16550::detect()>:
c001e4a2:	c3                   	ret    
c001e4a3:	90                   	nop

c001e4a4 <UART16550::deinitialise()>:
c001e4a4:	c3                   	ret    
c001e4a5:	90                   	nop

c001e4a6 <UART16550::setPowerState(DevicePowerState)>:
c001e4a6:	c3                   	ret    
c001e4a7:	90                   	nop

c001e4a8 <UART16550::getHumanReadableName()>:
c001e4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e4af:	b8 20 ea 02 c0       	mov    eax,0xc002ea20
c001e4b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c001e4b7:	83 f9 07             	cmp    ecx,0x7
c001e4ba:	77 05                	ja     c001e4c1 <UART16550::getHumanReadableName()+0x19>
c001e4bc:	6b d2 30             	imul   edx,edx,0x30
c001e4bf:	01 d0                	add    eax,edx
c001e4c1:	c3                   	ret    

c001e4c2 <UART16550::areInterruptsSupported()>:
c001e4c2:	b0 01                	mov    al,0x1
c001e4c4:	c3                   	ret    
c001e4c5:	90                   	nop

c001e4c6 <UART16550::areInterruptsEnabled()>:
c001e4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ca:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
c001e4cd:	c3                   	ret    

c001e4ce <UART16550::enableInterrupts(bool)>:
c001e4ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4d6:	88 42 1c             	mov    BYTE PTR [edx+0x1c],al
c001e4d9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001e4dc:	42                   	inc    edx
c001e4dd:	84 c0                	test   al,al
c001e4df:	74 04                	je     c001e4e5 <UART16550::enableInterrupts(bool)+0x17>
c001e4e1:	b0 0f                	mov    al,0xf
c001e4e3:	eb 02                	jmp    c001e4e7 <UART16550::enableInterrupts(bool)+0x19>
c001e4e5:	31 c0                	xor    eax,eax
c001e4e7:	ee                   	out    dx,al
c001e4e8:	c3                   	ret    
c001e4e9:	90                   	nop

c001e4ea <UART16550::getBaud()>:
c001e4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001e4f1:	c3                   	ret    

c001e4f2 <UART16550::write(unsigned char)>:
c001e4f2:	53                   	push   ebx
c001e4f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4fb:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001e4fe:	8d 51 05             	lea    edx,[ecx+0x5]
c001e501:	ec                   	in     al,dx
c001e502:	88 c2                	mov    dl,al
c001e504:	80 e2 20             	and    dl,0x20
c001e507:	74 09                	je     c001e512 <UART16550::write(unsigned char)+0x20>
c001e509:	88 d8                	mov    al,bl
c001e50b:	89 ca                	mov    edx,ecx
c001e50d:	ee                   	out    dx,al
c001e50e:	b0 01                	mov    al,0x1
c001e510:	eb 02                	jmp    c001e514 <UART16550::write(unsigned char)+0x22>
c001e512:	31 c0                	xor    eax,eax
c001e514:	5b                   	pop    ebx
c001e515:	c3                   	ret    

c001e516 <UART16550::getHardwareBufferSize()>:
c001e516:	b8 0e 00 00 00       	mov    eax,0xe
c001e51b:	c3                   	ret    

c001e51c <UART16550::getNumberBytesInIRQBuffer()>:
c001e51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e520:	8b 80 28 01 00 00    	mov    eax,DWORD PTR [eax+0x128]
c001e526:	c3                   	ret    
c001e527:	90                   	nop

c001e528 <UART16550::getMaximumBytesInIRQBuffer()>:
c001e528:	b8 00 01 00 00       	mov    eax,0x100
c001e52d:	c3                   	ret    

c001e52e <UART16550::emptyBuffer()>:
c001e52e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e532:	c7 80 28 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x128],0x0
c001e53c:	c3                   	ret    
c001e53d:	90                   	nop

c001e53e <UART16550::isDataReady()>:
c001e53e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e542:	b0 01                	mov    al,0x1
c001e544:	83 ba 28 01 00 00 00 	cmp    DWORD PTR [edx+0x128],0x0
c001e54b:	75 0a                	jne    c001e557 <UART16550::isDataReady()+0x19>
c001e54d:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e550:	8d 50 05             	lea    edx,[eax+0x5]
c001e553:	ec                   	in     al,dx
c001e554:	83 e0 01             	and    eax,0x1
c001e557:	c3                   	ret    

c001e558 <UART16550::isParityModeSupported(SerialParityMode)>:
c001e558:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c001e55d:	0f 96 c0             	setbe  al
c001e560:	c3                   	ret    
c001e561:	90                   	nop

c001e562 <UART16550::getPartityMode()>:
c001e562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e566:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e569:	c3                   	ret    

c001e56a <UART16550::isTransmissionSizeValid(int)>:
c001e56a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e56e:	83 e8 05             	sub    eax,0x5
c001e571:	83 f8 03             	cmp    eax,0x3
c001e574:	0f 96 c0             	setbe  al
c001e577:	c3                   	ret    

c001e578 <UART16550::getTransmissionSize()>:
c001e578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e57c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e57f:	c3                   	ret    

c001e580 <UART16550::isNumberOfStopBitsValid(int)>:
c001e580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e584:	48                   	dec    eax
c001e585:	83 f8 01             	cmp    eax,0x1
c001e588:	0f 96 c0             	setbe  al
c001e58b:	c3                   	ret    

c001e58c <UART16550::getNumberOfStopBits()>:
c001e58c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e590:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e593:	c3                   	ret    

c001e594 <UART16550::supportsHardwareStopBits()>:
c001e594:	b0 01                	mov    al,0x1
c001e596:	c3                   	ret    
c001e597:	90                   	nop

c001e598 <UART16550::supportsHardwareParity()>:
c001e598:	b0 01                	mov    al,0x1
c001e59a:	c3                   	ret    
c001e59b:	90                   	nop

c001e59c <UART16550::isBreakOn()>:
c001e59c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5a0:	8a 40 1d             	mov    al,BYTE PTR [eax+0x1d]
c001e5a3:	c3                   	ret    

c001e5a4 <UART16550::enableLookback(bool)>:
c001e5a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5a8:	8a 48 1e             	mov    cl,BYTE PTR [eax+0x1e]
c001e5ab:	89 ca                	mov    edx,ecx
c001e5ad:	81 e2 ef 00 00 00    	and    edx,0xef
c001e5b3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5b8:	74 05                	je     c001e5bf <UART16550::enableLookback(bool)+0x1b>
c001e5ba:	83 c9 10             	or     ecx,0x10
c001e5bd:	89 ca                	mov    edx,ecx
c001e5bf:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001e5c2:	c3                   	ret    
c001e5c3:	90                   	nop

c001e5c4 <UART16550::isLoopbackOn()>:
c001e5c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5c8:	0f b6 40 1e          	movzx  eax,BYTE PTR [eax+0x1e]
c001e5cc:	c1 e8 04             	shr    eax,0x4
c001e5cf:	83 e0 01             	and    eax,0x1
c001e5d2:	c3                   	ret    
c001e5d3:	90                   	nop

c001e5d4 <UART16550::setDataTerminalRead(bool)>:
c001e5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5d8:	8a 48 1e             	mov    cl,BYTE PTR [eax+0x1e]
c001e5db:	89 ca                	mov    edx,ecx
c001e5dd:	81 e2 fe 00 00 00    	and    edx,0xfe
c001e5e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5e8:	74 05                	je     c001e5ef <UART16550::setDataTerminalRead(bool)+0x1b>
c001e5ea:	83 c9 01             	or     ecx,0x1
c001e5ed:	89 ca                	mov    edx,ecx
c001e5ef:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001e5f2:	c3                   	ret    
c001e5f3:	90                   	nop

c001e5f4 <UART16550::setRequestToSend(bool)>:
c001e5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5f8:	8a 48 1e             	mov    cl,BYTE PTR [eax+0x1e]
c001e5fb:	89 ca                	mov    edx,ecx
c001e5fd:	81 e2 fd 00 00 00    	and    edx,0xfd
c001e603:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e608:	74 05                	je     c001e60f <UART16550::setRequestToSend(bool)+0x1b>
c001e60a:	83 c9 02             	or     ecx,0x2
c001e60d:	89 ca                	mov    edx,ecx
c001e60f:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001e612:	c3                   	ret    
c001e613:	90                   	nop

c001e614 <UART16550::setAux1(bool)>:
c001e614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e618:	8a 48 1e             	mov    cl,BYTE PTR [eax+0x1e]
c001e61b:	89 ca                	mov    edx,ecx
c001e61d:	81 e2 fb 00 00 00    	and    edx,0xfb
c001e623:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e628:	74 05                	je     c001e62f <UART16550::setAux1(bool)+0x1b>
c001e62a:	83 c9 04             	or     ecx,0x4
c001e62d:	89 ca                	mov    edx,ecx
c001e62f:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001e632:	c3                   	ret    
c001e633:	90                   	nop

c001e634 <UART16550::setAux2(bool)>:
c001e634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e638:	8a 48 1e             	mov    cl,BYTE PTR [eax+0x1e]
c001e63b:	89 ca                	mov    edx,ecx
c001e63d:	81 e2 f7 00 00 00    	and    edx,0xf7
c001e643:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e648:	74 05                	je     c001e64f <UART16550::setAux2(bool)+0x1b>
c001e64a:	83 c9 08             	or     ecx,0x8
c001e64d:	89 ca                	mov    edx,ecx
c001e64f:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001e652:	c3                   	ret    
c001e653:	90                   	nop

c001e654 <UART16550::didAnyErrorsOccur()>:
c001e654:	83 ec 18             	sub    esp,0x18
c001e657:	68 e8 e8 02 c0       	push   0xc002e8e8
c001e65c:	e8 37 22 ff ff       	call   c0010898 <KePanic(char const*)>
c001e661:	31 c0                	xor    eax,eax
c001e663:	83 c4 1c             	add    esp,0x1c
c001e666:	c3                   	ret    
c001e667:	90                   	nop

c001e668 <UART16550::clearAllErrors()>:
c001e668:	c7 44 24 04 05 e9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e905
c001e670:	e9 23 22 ff ff       	jmp    c0010898 <KePanic(char const*)>
c001e675:	90                   	nop

c001e676 <UART16550::clearFirstError()>:
c001e676:	c7 44 24 04 1f e9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e91f
c001e67e:	e9 15 22 ff ff       	jmp    c0010898 <KePanic(char const*)>
c001e683:	90                   	nop

c001e684 <UART16550::getFirstError()>:
c001e684:	83 ec 18             	sub    esp,0x18
c001e687:	68 3a e9 02 c0       	push   0xc002e93a
c001e68c:	e8 07 22 ff ff       	call   c0010898 <KePanic(char const*)>
c001e691:	b8 01 00 00 00       	mov    eax,0x1
c001e696:	83 c4 1c             	add    esp,0x1c
c001e699:	c3                   	ret    

c001e69a <UART16550::waitForData()>:
c001e69a:	53                   	push   ebx
c001e69b:	83 ec 08             	sub    esp,0x8
c001e69e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	53                   	push   ebx
c001e6a8:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001e6ab:	83 c4 10             	add    esp,0x10
c001e6ae:	84 c0                	test   al,al
c001e6b0:	75 1f                	jne    c001e6d1 <UART16550::waitForData()+0x37>
c001e6b2:	fa                   	cli    
c001e6b3:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001e6b9:	e8 62 8d ff ff       	call   c0017420 <schedule()>
c001e6be:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001e6c5:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001e6cc:	75 d4                	jne    c001e6a2 <UART16550::waitForData()+0x8>
c001e6ce:	fb                   	sti    
c001e6cf:	eb d1                	jmp    c001e6a2 <UART16550::waitForData()+0x8>
c001e6d1:	83 c4 08             	add    esp,0x8
c001e6d4:	5b                   	pop    ebx
c001e6d5:	c3                   	ret    

c001e6d6 <UART16550::initialise()>:
c001e6d6:	53                   	push   ebx
c001e6d7:	83 ec 08             	sub    esp,0x8
c001e6da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001e6e1:	83 78 70 00          	cmp    DWORD PTR [eax+0x70],0x0
c001e6e5:	75 09                	jne    c001e6f0 <UART16550::initialise()+0x1a>
c001e6e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e6ea:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c001e6ee:	eb 10                	jmp    c001e700 <UART16550::initialise()+0x2a>
c001e6f0:	83 ec 0c             	sub    esp,0xc
c001e6f3:	68 53 e9 02 c0       	push   0xc002e953
c001e6f8:	e8 9b 21 ff ff       	call   c0010898 <KePanic(char const*)>
c001e6fd:	83 c4 10             	add    esp,0x10
c001e700:	6a 01                	push   0x1
c001e702:	6a 08                	push   0x8
c001e704:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
c001e708:	50                   	push   eax
c001e709:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001e70c:	e8 e3 96 fe ff       	call   c0007df4 <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001e711:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001e716:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001e719:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c001e71c:	8d 50 01             	lea    edx,[eax+0x1]
c001e71f:	b0 c7                	mov    al,0xc7
c001e721:	89 15 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,edx
c001e727:	8d 51 02             	lea    edx,[ecx+0x2]
c001e72a:	ee                   	out    dx,al
c001e72b:	c6 43 1e 0f          	mov    BYTE PTR [ebx+0x1e],0xf
c001e72f:	8d 51 04             	lea    edx,[ecx+0x4]
c001e732:	b0 0f                	mov    al,0xf
c001e734:	ee                   	out    dx,al
c001e735:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001e739:	83 c4 18             	add    esp,0x18
c001e73c:	5b                   	pop    ebx
c001e73d:	e9 8a bb 00 00       	jmp    c002a2cc <SerialDriver::disableInterrupts()>

c001e742 <UART16550::recomputeLineControlRegister()>:
c001e742:	56                   	push   esi
c001e743:	53                   	push   ebx
c001e744:	b3 40                	mov    bl,0x40
c001e746:	52                   	push   edx
c001e747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e74b:	80 7e 1d 00          	cmp    BYTE PTR [esi+0x1d],0x0
c001e74f:	75 02                	jne    c001e753 <UART16550::recomputeLineControlRegister()+0x11>
c001e751:	31 db                	xor    ebx,ebx
c001e753:	83 7e 0c 04          	cmp    DWORD PTR [esi+0xc],0x4
c001e757:	77 1e                	ja     c001e777 <UART16550::recomputeLineControlRegister()+0x35>
c001e759:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001e75c:	ff 24 85 00 ea 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd1600]
c001e763:	83 cb 08             	or     ebx,0x8
c001e766:	eb 1f                	jmp    c001e787 <UART16550::recomputeLineControlRegister()+0x45>
c001e768:	83 cb 18             	or     ebx,0x18
c001e76b:	eb 1a                	jmp    c001e787 <UART16550::recomputeLineControlRegister()+0x45>
c001e76d:	83 cb 28             	or     ebx,0x28
c001e770:	eb 15                	jmp    c001e787 <UART16550::recomputeLineControlRegister()+0x45>
c001e772:	83 cb 38             	or     ebx,0x38
c001e775:	eb 10                	jmp    c001e787 <UART16550::recomputeLineControlRegister()+0x45>
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	68 73 e9 02 c0       	push   0xc002e973
c001e77f:	e8 14 21 ff ff       	call   c0010898 <KePanic(char const*)>
c001e784:	83 c4 10             	add    esp,0x10
c001e787:	83 7e 14 02          	cmp    DWORD PTR [esi+0x14],0x2
c001e78b:	75 03                	jne    c001e790 <UART16550::recomputeLineControlRegister()+0x4e>
c001e78d:	83 cb 04             	or     ebx,0x4
c001e790:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e793:	83 f8 06             	cmp    eax,0x6
c001e796:	74 18                	je     c001e7b0 <UART16550::recomputeLineControlRegister()+0x6e>
c001e798:	7f 07                	jg     c001e7a1 <UART16550::recomputeLineControlRegister()+0x5f>
c001e79a:	83 f8 05             	cmp    eax,0x5
c001e79d:	74 2b                	je     c001e7ca <UART16550::recomputeLineControlRegister()+0x88>
c001e79f:	eb 19                	jmp    c001e7ba <UART16550::recomputeLineControlRegister()+0x78>
c001e7a1:	83 f8 07             	cmp    eax,0x7
c001e7a4:	74 0f                	je     c001e7b5 <UART16550::recomputeLineControlRegister()+0x73>
c001e7a6:	83 f8 08             	cmp    eax,0x8
c001e7a9:	75 0f                	jne    c001e7ba <UART16550::recomputeLineControlRegister()+0x78>
c001e7ab:	83 cb 03             	or     ebx,0x3
c001e7ae:	eb 1a                	jmp    c001e7ca <UART16550::recomputeLineControlRegister()+0x88>
c001e7b0:	83 cb 01             	or     ebx,0x1
c001e7b3:	eb 15                	jmp    c001e7ca <UART16550::recomputeLineControlRegister()+0x88>
c001e7b5:	83 cb 02             	or     ebx,0x2
c001e7b8:	eb 10                	jmp    c001e7ca <UART16550::recomputeLineControlRegister()+0x88>
c001e7ba:	83 ec 0c             	sub    esp,0xc
c001e7bd:	68 aa e9 02 c0       	push   0xc002e9aa
c001e7c2:	e8 d1 20 ff ff       	call   c0010898 <KePanic(char const*)>
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e7cd:	88 d8                	mov    al,bl
c001e7cf:	83 c2 03             	add    edx,0x3
c001e7d2:	ee                   	out    dx,al
c001e7d3:	58                   	pop    eax
c001e7d4:	5b                   	pop    ebx
c001e7d5:	5e                   	pop    esi
c001e7d6:	c3                   	ret    
c001e7d7:	90                   	nop

c001e7d8 <UART16550::setParityMode(SerialParityMode)>:
c001e7d8:	56                   	push   esi
c001e7d9:	53                   	push   ebx
c001e7da:	83 ec 0c             	sub    esp,0xc
c001e7dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e7e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e7e7:	56                   	push   esi
c001e7e8:	53                   	push   ebx
c001e7e9:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001e7ec:	83 c4 10             	add    esp,0x10
c001e7ef:	84 c0                	test   al,al
c001e7f1:	74 0f                	je     c001e802 <UART16550::setParityMode(SerialParityMode)+0x2a>
c001e7f3:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c001e7f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001e7fa:	5a                   	pop    edx
c001e7fb:	5b                   	pop    ebx
c001e7fc:	5e                   	pop    esi
c001e7fd:	e9 40 ff ff ff       	jmp    c001e742 <UART16550::recomputeLineControlRegister()>
c001e802:	58                   	pop    eax
c001e803:	5b                   	pop    ebx
c001e804:	5e                   	pop    esi
c001e805:	c3                   	ret    

c001e806 <UART16550::setTransmissionSize(int)>:
c001e806:	56                   	push   esi
c001e807:	53                   	push   ebx
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e80f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e813:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e815:	56                   	push   esi
c001e816:	53                   	push   ebx
c001e817:	ff 50 5c             	call   DWORD PTR [eax+0x5c]
c001e81a:	83 c4 10             	add    esp,0x10
c001e81d:	84 c0                	test   al,al
c001e81f:	74 0f                	je     c001e830 <UART16550::setTransmissionSize(int)+0x2a>
c001e821:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e824:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001e828:	5a                   	pop    edx
c001e829:	5b                   	pop    ebx
c001e82a:	5e                   	pop    esi
c001e82b:	e9 12 ff ff ff       	jmp    c001e742 <UART16550::recomputeLineControlRegister()>
c001e830:	58                   	pop    eax
c001e831:	5b                   	pop    ebx
c001e832:	5e                   	pop    esi
c001e833:	c3                   	ret    

c001e834 <UART16550::setNumberOfStopBits(int)>:
c001e834:	56                   	push   esi
c001e835:	53                   	push   ebx
c001e836:	83 ec 0c             	sub    esp,0xc
c001e839:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e83d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e841:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e843:	56                   	push   esi
c001e844:	53                   	push   ebx
c001e845:	ff 50 68             	call   DWORD PTR [eax+0x68]
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	84 c0                	test   al,al
c001e84d:	74 0f                	je     c001e85e <UART16550::setNumberOfStopBits(int)+0x2a>
c001e84f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001e852:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001e856:	5a                   	pop    edx
c001e857:	5b                   	pop    ebx
c001e858:	5e                   	pop    esi
c001e859:	e9 e4 fe ff ff       	jmp    c001e742 <UART16550::recomputeLineControlRegister()>
c001e85e:	58                   	pop    eax
c001e85f:	5b                   	pop    ebx
c001e860:	5e                   	pop    esi
c001e861:	c3                   	ret    

c001e862 <UART16550::enableBreak(bool)>:
c001e862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e866:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c001e86a:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
c001e86d:	e9 d0 fe ff ff       	jmp    c001e742 <UART16550::recomputeLineControlRegister()>

c001e872 <UART16550::getBaudDivisor(int)>:
c001e872:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e876:	b8 01 00 00 00       	mov    eax,0x1
c001e87b:	81 f9 ff c1 01 00    	cmp    ecx,0x1c1ff
c001e881:	7f 11                	jg     c001e894 <UART16550::getBaudDivisor(int)+0x22>
c001e883:	85 c9                	test   ecx,ecx
c001e885:	b8 ff ff 00 00       	mov    eax,0xffff
c001e88a:	7e 08                	jle    c001e894 <UART16550::getBaudDivisor(int)+0x22>
c001e88c:	b8 00 c2 01 00       	mov    eax,0x1c200
c001e891:	99                   	cdq    
c001e892:	f7 f9                	idiv   ecx
c001e894:	c3                   	ret    
c001e895:	90                   	nop

c001e896 <UART16550::setBaud(int)>:
c001e896:	56                   	push   esi
c001e897:	53                   	push   ebx
c001e898:	50                   	push   eax
c001e899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e89d:	ff 76 18             	push   DWORD PTR [esi+0x18]
c001e8a0:	56                   	push   esi
c001e8a1:	e8 cc ff ff ff       	call   c001e872 <UART16550::getBaudDivisor(int)>
c001e8a6:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c001e8a9:	8d 51 03             	lea    edx,[ecx+0x3]
c001e8ac:	89 c3                	mov    ebx,eax
c001e8ae:	b0 80                	mov    al,0x80
c001e8b0:	ee                   	out    dx,al
c001e8b1:	88 d8                	mov    al,bl
c001e8b3:	89 ca                	mov    edx,ecx
c001e8b5:	ee                   	out    dx,al
c001e8b6:	8d 51 01             	lea    edx,[ecx+0x1]
c001e8b9:	89 d8                	mov    eax,ebx
c001e8bb:	c1 f8 08             	sar    eax,0x8
c001e8be:	ee                   	out    dx,al
c001e8bf:	83 c4 0c             	add    esp,0xc
c001e8c2:	5b                   	pop    ebx
c001e8c3:	5e                   	pop    esi
c001e8c4:	e9 79 fe ff ff       	jmp    c001e742 <UART16550::recomputeLineControlRegister()>
c001e8c9:	90                   	nop

c001e8ca <UART16550::getClosestSupportedBaud(int)>:
c001e8ca:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8ce:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8d2:	e8 9b ff ff ff       	call   c001e872 <UART16550::getBaudDivisor(int)>
c001e8d7:	5a                   	pop    edx
c001e8d8:	59                   	pop    ecx
c001e8d9:	89 c1                	mov    ecx,eax
c001e8db:	b8 00 c2 01 00       	mov    eax,0x1c200
c001e8e0:	99                   	cdq    
c001e8e1:	f7 f9                	idiv   ecx
c001e8e3:	c3                   	ret    

c001e8e4 <UART16550::fillIRQBuffer()>:
c001e8e4:	55                   	push   ebp
c001e8e5:	57                   	push   edi
c001e8e6:	56                   	push   esi
c001e8e7:	53                   	push   ebx
c001e8e8:	83 ec 1c             	sub    esp,0x1c
c001e8eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e8ef:	8b 69 08             	mov    ebp,DWORD PTR [ecx+0x8]
c001e8f2:	8d 45 05             	lea    eax,[ebp+0x5]
c001e8f5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001e8fa:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001e8ff:	ec                   	in     al,dx
c001e900:	a8 01                	test   al,0x1
c001e902:	74 3b                	je     c001e93f <UART16550::fillIRQBuffer()+0x5b>
c001e904:	8b b9 28 01 00 00    	mov    edi,DWORD PTR [ecx+0x128]
c001e90a:	89 ea                	mov    edx,ebp
c001e90c:	0f b6 99 24 01 00 00 	movzx  ebx,BYTE PTR [ecx+0x124]
c001e913:	8d 77 01             	lea    esi,[edi+0x1]
c001e916:	89 b1 28 01 00 00    	mov    DWORD PTR [ecx+0x128],esi
c001e91c:	ec                   	in     al,dx
c001e91d:	01 cb                	add    ebx,ecx
c001e91f:	81 fe ff 00 00 00    	cmp    esi,0xff
c001e925:	88 44 1f 24          	mov    BYTE PTR [edi+ebx*1+0x24],al
c001e929:	7e cf                	jle    c001e8fa <UART16550::fillIRQBuffer()+0x16>
c001e92b:	c7 44 24 30 e1 e9 02 c0 	mov    DWORD PTR [esp+0x30],0xc002e9e1
c001e933:	83 c4 1c             	add    esp,0x1c
c001e936:	5b                   	pop    ebx
c001e937:	5e                   	pop    esi
c001e938:	5f                   	pop    edi
c001e939:	5d                   	pop    ebp
c001e93a:	e9 59 1f ff ff       	jmp    c0010898 <KePanic(char const*)>
c001e93f:	83 c4 1c             	add    esp,0x1c
c001e942:	5b                   	pop    ebx
c001e943:	5e                   	pop    esi
c001e944:	5f                   	pop    edi
c001e945:	5d                   	pop    ebp
c001e946:	c3                   	ret    
c001e947:	90                   	nop

c001e948 <UART16550::read()>:
c001e948:	53                   	push   ebx
c001e949:	83 ec 08             	sub    esp,0x8
c001e94c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e950:	8b 93 28 01 00 00    	mov    edx,DWORD PTR [ebx+0x128]
c001e956:	85 d2                	test   edx,edx
c001e958:	75 2b                	jne    c001e985 <UART16550::read()+0x3d>
c001e95a:	fa                   	cli    
c001e95b:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	53                   	push   ebx
c001e965:	e8 7a ff ff ff       	call   c001e8e4 <UART16550::fillIRQBuffer()>
c001e96a:	e8 b1 8a ff ff       	call   c0017420 <schedule()>
c001e96f:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001e980:	75 ce                	jne    c001e950 <UART16550::read()+0x8>
c001e982:	fb                   	sti    
c001e983:	eb cb                	jmp    c001e950 <UART16550::read()+0x8>
c001e985:	0f b6 83 24 01 00 00 	movzx  eax,BYTE PTR [ebx+0x124]
c001e98c:	4a                   	dec    edx
c001e98d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e990:	88 8b 24 01 00 00    	mov    BYTE PTR [ebx+0x124],cl
c001e996:	8a 44 03 24          	mov    al,BYTE PTR [ebx+eax*1+0x24]
c001e99a:	89 93 28 01 00 00    	mov    DWORD PTR [ebx+0x128],edx
c001e9a0:	83 c4 08             	add    esp,0x8
c001e9a3:	5b                   	pop    ebx
c001e9a4:	c3                   	ret    
c001e9a5:	90                   	nop

c001e9a6 <UART16550::recomputeModemControlRegister()>:
c001e9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9aa:	8a 42 1e             	mov    al,BYTE PTR [edx+0x1e]
c001e9ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001e9b0:	83 c2 04             	add    edx,0x4
c001e9b3:	ee                   	out    dx,al
c001e9b4:	c3                   	ret    
c001e9b5:	66 90                	xchg   ax,ax
c001e9b7:	90                   	nop

c001e9b8 <FAT::getName()>:
c001e9b8:	b8 80 ec 02 c0       	mov    eax,0xc002ec80
c001e9bd:	c3                   	ret    
c001e9be:	66 90                	xchg   ax,ax

c001e9c0 <FAT::tell(void*, unsigned long long*)>:
c001e9c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e9c5:	75 09                	jne    c001e9d0 <FAT::tell(void*, unsigned long long*)+0x10>
c001e9c7:	b8 04 00 00 00       	mov    eax,0x4
c001e9cc:	c3                   	ret    
c001e9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e9d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e9d5:	75 09                	jne    c001e9e0 <FAT::tell(void*, unsigned long long*)+0x20>
c001e9d7:	b8 04 00 00 00       	mov    eax,0x4
c001e9dc:	c3                   	ret    
c001e9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e9e7:	ba 00 00 00 00       	mov    edx,0x0
c001e9ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9f0:	89 01                	mov    DWORD PTR [ecx],eax
c001e9f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e9f5:	b8 00 00 00 00       	mov    eax,0x0
c001e9fa:	c3                   	ret    
c001e9fb:	90                   	nop

c001e9fc <FAT::stat(void*, unsigned long long*)>:
c001e9fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ea01:	75 09                	jne    c001ea0c <FAT::stat(void*, unsigned long long*)+0x10>
c001ea03:	b8 04 00 00 00       	mov    eax,0x4
c001ea08:	c3                   	ret    
c001ea09:	8d 76 00             	lea    esi,[esi+0x0]
c001ea0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ea11:	75 09                	jne    c001ea1c <FAT::stat(void*, unsigned long long*)+0x20>
c001ea13:	b8 04 00 00 00       	mov    eax,0x4
c001ea18:	c3                   	ret    
c001ea19:	8d 76 00             	lea    esi,[esi+0x0]
c001ea1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ea23:	ba 00 00 00 00       	mov    edx,0x0
c001ea28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea2c:	89 01                	mov    DWORD PTR [ecx],eax
c001ea2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea31:	b8 00 00 00 00       	mov    eax,0x0
c001ea36:	c3                   	ret    
c001ea37:	90                   	nop

c001ea38 <FAT::~FAT()>:
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	ba cc ec 02 c0       	mov    edx,0xc002eccc
c001ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea44:	89 10                	mov    DWORD PTR [eax],edx
c001ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4a:	83 ec 0c             	sub    esp,0xc
c001ea4d:	50                   	push   eax
c001ea4e:	e8 db a0 fe ff       	call   c0008b2e <Filesystem::~Filesystem()>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	90                   	nop
c001ea57:	83 c4 0c             	add    esp,0xc
c001ea5a:	c3                   	ret    
c001ea5b:	90                   	nop

c001ea5c <FAT::~FAT()>:
c001ea5c:	83 ec 0c             	sub    esp,0xc
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea66:	e8 cd ff ff ff       	call   c001ea38 <FAT::~FAT()>
c001ea6b:	83 c4 10             	add    esp,0x10
c001ea6e:	83 ec 08             	sub    esp,0x8
c001ea71:	6a 08                	push   0x8
c001ea73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea77:	e8 c0 f5 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c001ea7c:	83 c4 10             	add    esp,0x10
c001ea7f:	83 c4 0c             	add    esp,0xc
c001ea82:	c3                   	ret    
c001ea83:	90                   	nop

c001ea84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ea84:	83 ec 1c             	sub    esp,0x1c
c001ea87:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ea8e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ea93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea97:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ea9e:	83 f8 ff             	cmp    eax,0xffffffff
c001eaa1:	75 35                	jne    c001ead8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001eaa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eaa7:	88 c2                	mov    dl,al
c001eaa9:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eaae:	01 d0                	add    eax,edx
c001eab0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eab4:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001eaba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eabe:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001eac5:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eaca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001eace:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001ead5:	eb 19                	jmp    c001eaf0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ead7:	90                   	nop
c001ead8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eadc:	88 c2                	mov    dl,al
c001eade:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eae2:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001eae9:	01 d0                	add    eax,edx
c001eaeb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eaef:	90                   	nop
c001eaf0:	83 ec 04             	sub    esp,0x4
c001eaf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001eaf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001eafb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001eaff:	50                   	push   eax
c001eb00:	e8 cf 66 fe ff       	call   c00051d4 <f_getlabel>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001eb11:	75 09                	jne    c001eb1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001eb13:	b8 00 00 00 00       	mov    eax,0x0
c001eb18:	eb 0a                	jmp    c001eb24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001eb1a:	66 90                	xchg   ax,ax
c001eb1c:	b8 01 00 00 00       	mov    eax,0x1
c001eb21:	8d 76 00             	lea    esi,[esi+0x0]
c001eb24:	83 c4 1c             	add    esp,0x1c
c001eb27:	c3                   	ret    

c001eb28 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001eb28:	53                   	push   ebx
c001eb29:	83 ec 58             	sub    esp,0x58
c001eb2c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001eb34:	8d 54 24 10          	lea    edx,[esp+0x10]
c001eb38:	b9 00 00 00 00       	mov    ecx,0x0
c001eb3d:	b8 3c 00 00 00       	mov    eax,0x3c
c001eb42:	83 e0 f8             	and    eax,0xfffffff8
c001eb45:	89 c3                	mov    ebx,eax
c001eb47:	b8 00 00 00 00       	mov    eax,0x0
c001eb4c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001eb50:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001eb54:	83 c0 08             	add    eax,0x8
c001eb57:	39 d8                	cmp    eax,ebx
c001eb59:	72 f1                	jb     c001eb4c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001eb5b:	01 c2                	add    edx,eax
c001eb5d:	89 0a                	mov    DWORD PTR [edx],ecx
c001eb5f:	83 c2 04             	add    edx,0x4
c001eb62:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eb66:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001eb6d:	83 f8 ff             	cmp    eax,0xffffffff
c001eb70:	75 36                	jne    c001eba8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001eb72:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eb76:	88 c2                	mov    dl,al
c001eb78:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eb7d:	01 d0                	add    eax,edx
c001eb7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eb83:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001eb89:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eb8d:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001eb94:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eb99:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001eb9d:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001eba4:	eb 1a                	jmp    c001ebc0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001eba6:	66 90                	xchg   ax,ax
c001eba8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ebac:	88 c2                	mov    dl,al
c001ebae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ebb2:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ebb9:	01 d0                	add    eax,edx
c001ebbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ebbf:	90                   	nop
c001ebc0:	83 ec 08             	sub    esp,0x8
c001ebc3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ebc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ebcb:	50                   	push   eax
c001ebcc:	e8 9f 1c fe ff       	call   c0000870 <strcat>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	83 ec 0c             	sub    esp,0xc
c001ebd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ebdb:	50                   	push   eax
c001ebdc:	e8 47 67 fe ff       	call   c0005328 <f_setlabel>
c001ebe1:	83 c4 10             	add    esp,0x10
c001ebe4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ebe8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ebed:	75 09                	jne    c001ebf8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001ebef:	b8 00 00 00 00       	mov    eax,0x0
c001ebf4:	eb 0a                	jmp    c001ec00 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001ebf6:	66 90                	xchg   ax,ax
c001ebf8:	b8 01 00 00 00       	mov    eax,0x1
c001ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ec00:	83 c4 58             	add    esp,0x58
c001ec03:	5b                   	pop    ebx
c001ec04:	c3                   	ret    
c001ec05:	90                   	nop
c001ec06:	66 90                	xchg   ax,ax

c001ec08 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ec08:	83 ec 2c             	sub    esp,0x2c
c001ec0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ec13:	83 ec 08             	sub    esp,0x8
c001ec16:	68 a4 ec 02 c0       	push   0xc002eca4
c001ec1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec1f:	e8 5c 1b fe ff       	call   c0000780 <strcmp>
c001ec24:	83 c4 10             	add    esp,0x10
c001ec27:	85 c0                	test   eax,eax
c001ec29:	0f 94 c0             	sete   al
c001ec2c:	0f b6 c0             	movzx  eax,al
c001ec2f:	85 c0                	test   eax,eax
c001ec31:	74 0d                	je     c001ec40 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ec33:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ec3b:	e9 c0 00 00 00       	jmp    c001ed00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec40:	83 ec 08             	sub    esp,0x8
c001ec43:	68 96 ec 02 c0       	push   0xc002ec96
c001ec48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec4c:	e8 2f 1b fe ff       	call   c0000780 <strcmp>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	85 c0                	test   eax,eax
c001ec56:	0f 94 c0             	sete   al
c001ec59:	0f b6 c0             	movzx  eax,al
c001ec5c:	85 c0                	test   eax,eax
c001ec5e:	74 10                	je     c001ec70 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ec60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ec68:	e9 93 00 00 00       	jmp    c001ed00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec70:	83 ec 08             	sub    esp,0x8
c001ec73:	68 9c ec 02 c0       	push   0xc002ec9c
c001ec78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec7c:	e8 ff 1a fe ff       	call   c0000780 <strcmp>
c001ec81:	83 c4 10             	add    esp,0x10
c001ec84:	85 c0                	test   eax,eax
c001ec86:	0f 94 c0             	sete   al
c001ec89:	0f b6 c0             	movzx  eax,al
c001ec8c:	85 c0                	test   eax,eax
c001ec8e:	74 0c                	je     c001ec9c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001ec90:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ec98:	eb 66                	jmp    c001ed00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	83 ec 08             	sub    esp,0x8
c001ec9f:	68 fc a6 02 c0       	push   0xc002a6fc
c001eca4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eca8:	e8 d3 1a fe ff       	call   c0000780 <strcmp>
c001ecad:	83 c4 10             	add    esp,0x10
c001ecb0:	85 c0                	test   eax,eax
c001ecb2:	0f 94 c0             	sete   al
c001ecb5:	0f b6 c0             	movzx  eax,al
c001ecb8:	85 c0                	test   eax,eax
c001ecba:	74 0c                	je     c001ecc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001ecbc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ecc4:	eb 3a                	jmp    c001ed00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ecc6:	66 90                	xchg   ax,ax
c001ecc8:	83 ec 08             	sub    esp,0x8
c001eccb:	68 a2 ec 02 c0       	push   0xc002eca2
c001ecd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecd4:	e8 a7 1a fe ff       	call   c0000780 <strcmp>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	85 c0                	test   eax,eax
c001ecde:	0f 94 c0             	sete   al
c001ece1:	0f b6 c0             	movzx  eax,al
c001ece4:	85 c0                	test   eax,eax
c001ece6:	74 0c                	je     c001ecf4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001ece8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ecf0:	eb 0e                	jmp    c001ed00 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ecf2:	66 90                	xchg   ax,ax
c001ecf4:	b8 08 00 00 00       	mov    eax,0x8
c001ecf9:	e9 ea 00 00 00       	jmp    c001ede8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ecfe:	66 90                	xchg   ax,ax
c001ed00:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ed07:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ed0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed10:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ed17:	83 f8 ff             	cmp    eax,0xffffffff
c001ed1a:	75 34                	jne    c001ed50 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001ed1c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ed20:	88 c2                	mov    dl,al
c001ed22:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ed27:	01 d0                	add    eax,edx
c001ed29:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ed2d:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001ed33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed37:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001ed3e:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ed43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ed47:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001ed4e:	eb 18                	jmp    c001ed68 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001ed50:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ed54:	88 c2                	mov    dl,al
c001ed56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed5a:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ed61:	01 d0                	add    eax,edx
c001ed63:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ed67:	90                   	nop
c001ed68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed6c:	88 04 24             	mov    BYTE PTR [esp],al
c001ed6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ed73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ed7f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ed84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	68 00 20 00 00       	push   0x2000
c001ed94:	e8 ab 16 ff ff       	call   c0010444 <malloc>
c001ed99:	83 c4 10             	add    esp,0x10
c001ed9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eda0:	68 00 20 00 00       	push   0x2000
c001eda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001edad:	50                   	push   eax
c001edae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001edb2:	50                   	push   eax
c001edb3:	e8 6d 68 fe ff       	call   c0005625 <f_mkfs>
c001edb8:	83 c4 10             	add    esp,0x10
c001edbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001edbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001edc4:	75 0a                	jne    c001edd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001edc6:	b8 00 00 00 00       	mov    eax,0x0
c001edcb:	eb 1b                	jmp    c001ede8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001edcd:	8d 76 00             	lea    esi,[esi+0x0]
c001edd0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001edd5:	75 09                	jne    c001ede0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001edd7:	b8 09 00 00 00       	mov    eax,0x9
c001eddc:	eb 0a                	jmp    c001ede8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001edde:	66 90                	xchg   ax,ax
c001ede0:	b8 01 00 00 00       	mov    eax,0x1
c001ede5:	8d 76 00             	lea    esi,[esi+0x0]
c001ede8:	83 c4 2c             	add    esp,0x2c
c001edeb:	c3                   	ret    

c001edec <FAT::tryMount(LogicalDisk*, int)>:
c001edec:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001edf2:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001edf7:	83 f8 14             	cmp    eax,0x14
c001edfa:	75 18                	jne    c001ee14 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001edfc:	83 ec 0c             	sub    esp,0xc
c001edff:	68 a8 ec 02 c0       	push   0xc002eca8
c001ee04:	e8 8f 1a ff ff       	call   c0010898 <KePanic(char const*)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	b0 00                	mov    al,0x0
c001ee0e:	e9 ed 01 00 00       	jmp    c001f000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ee13:	90                   	nop
c001ee14:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ee1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ee21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee27:	3d 00 02 00 00       	cmp    eax,0x200
c001ee2c:	74 0a                	je     c001ee38 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ee2e:	b0 00                	mov    al,0x0
c001ee30:	e9 cb 01 00 00       	jmp    c001f000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ee35:	8d 76 00             	lea    esi,[esi+0x0]
c001ee38:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001ee40:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001ee47:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ee4e:	83 f8 ff             	cmp    eax,0xffffffff
c001ee51:	74 09                	je     c001ee5c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ee53:	b0 01                	mov    al,0x1
c001ee55:	e9 a6 01 00 00       	jmp    c001f000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ee5a:	66 90                	xchg   ax,ax
c001ee5c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001ee66:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001ee6e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001ee75:	88 c2                	mov    dl,al
c001ee77:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ee7c:	01 d0                	add    eax,edx
c001ee7e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001ee85:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001ee8b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001ee92:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001ee99:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ee9e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001eea5:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	68 34 02 00 00       	push   0x234
c001eeb4:	e8 8b 15 ff ff       	call   c0010444 <malloc>
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001eec3:	83 ec 04             	sub    esp,0x4
c001eec6:	6a 00                	push   0x0
c001eec8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001eecf:	50                   	push   eax
c001eed0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001eed7:	e8 43 4f fe ff       	call   c0003e1f <f_mount>
c001eedc:	83 c4 10             	add    esp,0x10
c001eedf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001eee6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001eeee:	74 1c                	je     c001ef0c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001eefa:	e8 65 15 ff ff       	call   c0010464 <rfree>
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	b0 00                	mov    al,0x0
c001ef04:	e9 f7 00 00 00       	jmp    c001f000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ef09:	8d 76 00             	lea    esi,[esi+0x0]
c001ef0c:	83 ec 04             	sub    esp,0x4
c001ef0f:	68 00 01 00 00       	push   0x100
c001ef14:	6a 00                	push   0x0
c001ef16:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ef1d:	50                   	push   eax
c001ef1e:	e8 cd 15 fe ff       	call   c00004f0 <memset>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	83 ec 08             	sub    esp,0x8
c001ef29:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ef30:	50                   	push   eax
c001ef31:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ef38:	50                   	push   eax
c001ef39:	e8 32 19 fe ff       	call   c0000870 <strcat>
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	83 ec 08             	sub    esp,0x8
c001ef44:	68 b6 ec 02 c0       	push   0xc002ecb6
c001ef49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ef50:	50                   	push   eax
c001ef51:	e8 1a 19 fe ff       	call   c0000870 <strcat>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	83 ec 04             	sub    esp,0x4
c001ef5c:	6a 01                	push   0x1
c001ef5e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001ef65:	50                   	push   eax
c001ef66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef6a:	50                   	push   eax
c001ef6b:	e8 11 4f fe ff       	call   c0003e81 <f_open>
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001ef7a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001ef81:	85 c0                	test   eax,eax
c001ef83:	74 0b                	je     c001ef90 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ef85:	78 31                	js     c001efb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ef87:	83 e8 04             	sub    eax,0x4
c001ef8a:	83 f8 01             	cmp    eax,0x1
c001ef8d:	77 29                	ja     c001efb8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ef8f:	90                   	nop
c001ef90:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef9f:	50                   	push   eax
c001efa0:	e8 8c 56 fe ff       	call   c0004631 <f_close>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	90                   	nop
c001efa9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001efb1:	85 c0                	test   eax,eax
c001efb3:	74 43                	je     c001eff8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001efb5:	eb 31                	jmp    c001efe8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001efb7:	90                   	nop
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001efc2:	e8 9d 14 ff ff       	call   c0010464 <rfree>
c001efc7:	83 c4 10             	add    esp,0x10
c001efca:	83 ec 04             	sub    esp,0x4
c001efcd:	6a 00                	push   0x0
c001efcf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001efd6:	50                   	push   eax
c001efd7:	6a 00                	push   0x0
c001efd9:	e8 41 4e fe ff       	call   c0003e1f <f_mount>
c001efde:	83 c4 10             	add    esp,0x10
c001efe1:	b0 00                	mov    al,0x0
c001efe3:	eb 1b                	jmp    c001f000 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001efe5:	8d 76 00             	lea    esi,[esi+0x0]
c001efe8:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001efed:	83 c0 01             	add    eax,0x1
c001eff0:	a3 80 94 03 c0       	mov    ds:0xc0039480,eax
c001eff5:	8d 76 00             	lea    esi,[esi+0x0]
c001eff8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001efff:	90                   	nop
c001f000:	81 c4 4c 03 00 00    	add    esp,0x34c
c001f006:	c3                   	ret    
c001f007:	90                   	nop

c001f008 <FAT::allocateSwapfile(char const*, int)>:
c001f008:	55                   	push   ebp
c001f009:	57                   	push   edi
c001f00a:	56                   	push   esi
c001f00b:	53                   	push   ebx
c001f00c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001f012:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001f01d:	83 ec 0c             	sub    esp,0xc
c001f020:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001f027:	e8 18 14 ff ff       	call   c0010444 <malloc>
c001f02c:	83 c4 10             	add    esp,0x10
c001f02f:	89 c7                	mov    edi,eax
c001f031:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001f036:	83 ec 04             	sub    esp,0x4
c001f039:	50                   	push   eax
c001f03a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001f041:	57                   	push   edi
c001f042:	e8 99 9e fe ff       	call   c0008ee0 <File::File(char const*, Process*)>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001f051:	83 ec 04             	sub    esp,0x4
c001f054:	8d 44 24 13          	lea    eax,[esp+0x13]
c001f058:	50                   	push   eax
c001f059:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f05d:	50                   	push   eax
c001f05e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f065:	e8 96 a1 fe ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c001f06a:	83 c4 10             	add    esp,0x10
c001f06d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001f074:	c1 e0 14             	shl    eax,0x14
c001f077:	89 c7                	mov    edi,eax
c001f079:	89 c5                	mov    ebp,eax
c001f07b:	c1 fd 1f             	sar    ebp,0x1f
c001f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f086:	89 f9                	mov    ecx,edi
c001f088:	31 c1                	xor    ecx,eax
c001f08a:	89 cb                	mov    ebx,ecx
c001f08c:	89 e9                	mov    ecx,ebp
c001f08e:	31 d1                	xor    ecx,edx
c001f090:	89 ce                	mov    esi,ecx
c001f092:	89 f0                	mov    eax,esi
c001f094:	09 d8                	or     eax,ebx
c001f096:	0f 84 9c 00 00 00    	je     c001f138 <FAT::allocateSwapfile(char const*, int)+0x130>
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f0a6:	e8 21 a0 fe ff       	call   c00090cc <File::unlink()>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	83 ec 08             	sub    esp,0x8
c001f0b1:	6a 12                	push   0x12
c001f0b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f0ba:	e8 3f 9e fe ff       	call   c0008efe <File::open(FileOpenMode)>
c001f0bf:	83 c4 10             	add    esp,0x10
c001f0c2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f0c9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f0cf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001f0d6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001f0dd:	c1 e0 14             	shl    eax,0x14
c001f0e0:	83 ec 04             	sub    esp,0x4
c001f0e3:	6a 01                	push   0x1
c001f0e5:	50                   	push   eax
c001f0e6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001f0ed:	e8 c6 63 fe ff       	call   c00054b8 <f_expand>
c001f0f2:	83 c4 10             	add    esp,0x10
c001f0f5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0fe:	83 c0 10             	add    eax,0x10
c001f101:	8b 00                	mov    eax,DWORD PTR [eax]
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	8d 54 24 24          	lea    edx,[esp+0x24]
c001f10a:	52                   	push   edx
c001f10b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001f10f:	52                   	push   edx
c001f110:	6a 00                	push   0x0
c001f112:	68 00 04 00 00       	push   0x400
c001f117:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001f11e:	ff d0                	call   eax
c001f120:	83 c4 20             	add    esp,0x20
c001f123:	83 ec 0c             	sub    esp,0xc
c001f126:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f12d:	e8 2a 9e fe ff       	call   c0008f5c <File::close()>
c001f132:	83 c4 10             	add    esp,0x10
c001f135:	8d 76 00             	lea    esi,[esi+0x0]
c001f138:	83 ec 08             	sub    esp,0x8
c001f13b:	6a 01                	push   0x1
c001f13d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f144:	e8 b5 9d fe ff       	call   c0008efe <File::open(FileOpenMode)>
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f153:	8b 00                	mov    eax,DWORD PTR [eax]
c001f155:	83 c0 0c             	add    eax,0xc
c001f158:	8b 00                	mov    eax,DWORD PTR [eax]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001f161:	52                   	push   edx
c001f162:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001f166:	52                   	push   edx
c001f167:	6a 00                	push   0x0
c001f169:	6a 04                	push   0x4
c001f16b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001f172:	ff d0                	call   eax
c001f174:	83 c4 20             	add    esp,0x20
c001f177:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f17e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f184:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001f18b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001f192:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001f195:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f1a6:	e8 b1 9d fe ff       	call   c0008f5c <File::close()>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001f1b5:	ba 00 00 00 00       	mov    edx,0x0
c001f1ba:	81 c4 3c 04 00 00    	add    esp,0x43c
c001f1c0:	5b                   	pop    ebx
c001f1c1:	5e                   	pop    esi
c001f1c2:	5f                   	pop    edi
c001f1c3:	5d                   	pop    ebp
c001f1c4:	c3                   	ret    
c001f1c5:	90                   	nop
c001f1c6:	66 90                	xchg   ax,ax

c001f1c8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f1c8:	57                   	push   edi
c001f1c9:	56                   	push   esi
c001f1ca:	53                   	push   ebx
c001f1cb:	81 ec 50 02 00 00    	sub    esp,0x250
c001f1d1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001f1d9:	74 0d                	je     c001f1e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001f1db:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001f1e3:	75 0f                	jne    c001f1f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001f1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f1e8:	b8 04 00 00 00       	mov    eax,0x4
c001f1ed:	e9 3a 01 00 00       	jmp    c001f32c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f1f2:	66 90                	xchg   ax,ax
c001f1f4:	83 ec 08             	sub    esp,0x8
c001f1f7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001f1fe:	50                   	push   eax
c001f1ff:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001f206:	e8 f2 56 fe ff       	call   c00048fd <f_readdir>
c001f20b:	83 c4 10             	add    esp,0x10
c001f20e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001f215:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f226:	83 c0 16             	add    eax,0x16
c001f229:	50                   	push   eax
c001f22a:	e8 51 13 fe ff       	call   c0000580 <strlen>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	ba 00 00 00 00       	mov    edx,0x0
c001f237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f23b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001f23f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001f246:	0f b6 c0             	movzx  eax,al
c001f249:	83 e0 10             	and    eax,0x10
c001f24c:	74 0a                	je     c001f258 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001f24e:	b8 02 00 00 00       	mov    eax,0x2
c001f253:	eb 0b                	jmp    c001f260 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001f255:	8d 76 00             	lea    esi,[esi+0x0]
c001f258:	b8 01 00 00 00       	mov    eax,0x1
c001f25d:	8d 76 00             	lea    esi,[esi+0x0]
c001f260:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f264:	83 ec 08             	sub    esp,0x8
c001f267:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001f26e:	83 c0 16             	add    eax,0x16
c001f271:	50                   	push   eax
c001f272:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f276:	83 c0 10             	add    eax,0x10
c001f279:	50                   	push   eax
c001f27a:	e8 d1 13 fe ff       	call   c0000650 <strcpy>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001f289:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001f290:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f294:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001f29b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001f2a2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001f2a9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001f2b0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001f2b7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001f2be:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001f2c5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001f2cc:	89 c6                	mov    esi,eax
c001f2ce:	89 d7                	mov    edi,edx
c001f2d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2d2:	89 c8                	mov    eax,ecx
c001f2d4:	89 fa                	mov    edx,edi
c001f2d6:	89 f3                	mov    ebx,esi
c001f2d8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001f2df:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001f2e6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001f2ed:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001f2f4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f2fa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001f301:	0f be c0             	movsx  eax,al
c001f304:	85 c0                	test   eax,eax
c001f306:	75 08                	jne    c001f310 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001f308:	b8 07 00 00 00       	mov    eax,0x7
c001f30d:	eb 1d                	jmp    c001f32c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f30f:	90                   	nop
c001f310:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001f317:	85 c0                	test   eax,eax
c001f319:	75 09                	jne    c001f324 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001f31b:	b8 00 00 00 00       	mov    eax,0x0
c001f320:	eb 0a                	jmp    c001f32c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f322:	66 90                	xchg   ax,ax
c001f324:	b8 01 00 00 00       	mov    eax,0x1
c001f329:	8d 76 00             	lea    esi,[esi+0x0]
c001f32c:	81 c4 50 02 00 00    	add    esp,0x250
c001f332:	5b                   	pop    ebx
c001f333:	5e                   	pop    esi
c001f334:	5f                   	pop    edi
c001f335:	c3                   	ret    
c001f336:	66 90                	xchg   ax,ax

c001f338 <FAT::read(void*, unsigned long, void*, int*)>:
c001f338:	83 ec 1c             	sub    esp,0x1c
c001f33b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f340:	74 0a                	je     c001f34c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001f342:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f347:	75 0b                	jne    c001f354 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001f349:	8d 76 00             	lea    esi,[esi+0x0]
c001f34c:	b8 04 00 00 00       	mov    eax,0x4
c001f351:	eb 41                	jmp    c001f394 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001f353:	90                   	nop
c001f354:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f358:	50                   	push   eax
c001f359:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f361:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f365:	e8 da 4d fe ff       	call   c0004144 <f_read>
c001f36a:	83 c4 10             	add    esp,0x10
c001f36d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f371:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f375:	89 c2                	mov    edx,eax
c001f377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f37b:	89 10                	mov    DWORD PTR [eax],edx
c001f37d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f381:	85 c0                	test   eax,eax
c001f383:	75 07                	jne    c001f38c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001f385:	b8 00 00 00 00       	mov    eax,0x0
c001f38a:	eb 08                	jmp    c001f394 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001f38c:	b8 01 00 00 00       	mov    eax,0x1
c001f391:	8d 76 00             	lea    esi,[esi+0x0]
c001f394:	83 c4 1c             	add    esp,0x1c
c001f397:	c3                   	ret    

c001f398 <FAT::write(void*, unsigned long, void*, int*)>:
c001f398:	83 ec 1c             	sub    esp,0x1c
c001f39b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f3a0:	74 0a                	je     c001f3ac <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001f3a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f3a7:	75 0b                	jne    c001f3b4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001f3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f3ac:	b8 04 00 00 00       	mov    eax,0x4
c001f3b1:	eb 41                	jmp    c001f3f4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001f3b3:	90                   	nop
c001f3b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f3b8:	50                   	push   eax
c001f3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f3c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f3c5:	e8 5b 4f fe ff       	call   c0004325 <f_write>
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3d5:	89 c2                	mov    edx,eax
c001f3d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f3db:	89 10                	mov    DWORD PTR [eax],edx
c001f3dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3e1:	85 c0                	test   eax,eax
c001f3e3:	75 07                	jne    c001f3ec <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001f3e5:	b8 00 00 00 00       	mov    eax,0x0
c001f3ea:	eb 08                	jmp    c001f3f4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001f3ec:	b8 01 00 00 00       	mov    eax,0x1
c001f3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3f4:	83 c4 1c             	add    esp,0x1c
c001f3f7:	c3                   	ret    

c001f3f8 <FAT::close(void*)>:
c001f3f8:	83 ec 1c             	sub    esp,0x1c
c001f3fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f400:	75 0a                	jne    c001f40c <FAT::close(void*)+0x14>
c001f402:	b8 04 00 00 00       	mov    eax,0x4
c001f407:	eb 3f                	jmp    c001f448 <FAT::close(void*)+0x50>
c001f409:	8d 76 00             	lea    esi,[esi+0x0]
c001f40c:	83 ec 0c             	sub    esp,0xc
c001f40f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f413:	e8 19 52 fe ff       	call   c0004631 <f_close>
c001f418:	83 c4 10             	add    esp,0x10
c001f41b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f41f:	83 ec 0c             	sub    esp,0xc
c001f422:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f426:	e8 29 10 ff ff       	call   c0010454 <free>
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f432:	85 c0                	test   eax,eax
c001f434:	75 0a                	jne    c001f440 <FAT::close(void*)+0x48>
c001f436:	b8 00 00 00 00       	mov    eax,0x0
c001f43b:	eb 0b                	jmp    c001f448 <FAT::close(void*)+0x50>
c001f43d:	8d 76 00             	lea    esi,[esi+0x0]
c001f440:	b8 01 00 00 00       	mov    eax,0x1
c001f445:	8d 76 00             	lea    esi,[esi+0x0]
c001f448:	83 c4 1c             	add    esp,0x1c
c001f44b:	c3                   	ret    

c001f44c <FAT::closeDir(void*)>:
c001f44c:	83 ec 1c             	sub    esp,0x1c
c001f44f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f454:	75 0a                	jne    c001f460 <FAT::closeDir(void*)+0x14>
c001f456:	b8 04 00 00 00       	mov    eax,0x4
c001f45b:	eb 3f                	jmp    c001f49c <FAT::closeDir(void*)+0x50>
c001f45d:	8d 76 00             	lea    esi,[esi+0x0]
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f467:	e8 6f 54 fe ff       	call   c00048db <f_closedir>
c001f46c:	83 c4 10             	add    esp,0x10
c001f46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f473:	83 ec 0c             	sub    esp,0xc
c001f476:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f47a:	e8 d5 0f ff ff       	call   c0010454 <free>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f486:	85 c0                	test   eax,eax
c001f488:	75 0a                	jne    c001f494 <FAT::closeDir(void*)+0x48>
c001f48a:	b8 00 00 00 00       	mov    eax,0x0
c001f48f:	eb 0b                	jmp    c001f49c <FAT::closeDir(void*)+0x50>
c001f491:	8d 76 00             	lea    esi,[esi+0x0]
c001f494:	b8 01 00 00 00       	mov    eax,0x1
c001f499:	8d 76 00             	lea    esi,[esi+0x0]
c001f49c:	83 c4 1c             	add    esp,0x1c
c001f49f:	c3                   	ret    

c001f4a0 <FAT::truncate(void*, unsigned long long)>:
c001f4a0:	83 ec 2c             	sub    esp,0x2c
c001f4a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f4a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f4ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f4af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4b3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f4b8:	75 0a                	jne    c001f4c4 <FAT::truncate(void*, unsigned long long)+0x24>
c001f4ba:	b8 04 00 00 00       	mov    eax,0x4
c001f4bf:	eb 47                	jmp    c001f508 <FAT::truncate(void*, unsigned long long)+0x68>
c001f4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f4c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001f4cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f4cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f4d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4db:	83 ec 08             	sub    esp,0x8
c001f4de:	50                   	push   eax
c001f4df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f4e3:	e8 78 51 fe ff       	call   c0004660 <f_lseek>
c001f4e8:	83 c4 10             	add    esp,0x10
c001f4eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f4ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f4f3:	85 c0                	test   eax,eax
c001f4f5:	75 09                	jne    c001f500 <FAT::truncate(void*, unsigned long long)+0x60>
c001f4f7:	b8 00 00 00 00       	mov    eax,0x0
c001f4fc:	eb 0a                	jmp    c001f508 <FAT::truncate(void*, unsigned long long)+0x68>
c001f4fe:	66 90                	xchg   ax,ax
c001f500:	b8 01 00 00 00       	mov    eax,0x1
c001f505:	8d 76 00             	lea    esi,[esi+0x0]
c001f508:	83 c4 2c             	add    esp,0x2c
c001f50b:	c3                   	ret    

c001f50c <FAT::seek(void*, unsigned long long)>:
c001f50c:	83 ec 2c             	sub    esp,0x2c
c001f50f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f51b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f51f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f524:	75 0a                	jne    c001f530 <FAT::seek(void*, unsigned long long)+0x24>
c001f526:	b8 04 00 00 00       	mov    eax,0x4
c001f52b:	eb 33                	jmp    c001f560 <FAT::seek(void*, unsigned long long)+0x54>
c001f52d:	8d 76 00             	lea    esi,[esi+0x0]
c001f530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f534:	83 ec 08             	sub    esp,0x8
c001f537:	50                   	push   eax
c001f538:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f53c:	e8 1f 51 fe ff       	call   c0004660 <f_lseek>
c001f541:	83 c4 10             	add    esp,0x10
c001f544:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f54c:	85 c0                	test   eax,eax
c001f54e:	75 08                	jne    c001f558 <FAT::seek(void*, unsigned long long)+0x4c>
c001f550:	b8 00 00 00 00       	mov    eax,0x0
c001f555:	eb 09                	jmp    c001f560 <FAT::seek(void*, unsigned long long)+0x54>
c001f557:	90                   	nop
c001f558:	b8 01 00 00 00       	mov    eax,0x1
c001f55d:	8d 76 00             	lea    esi,[esi+0x0]
c001f560:	83 c4 2c             	add    esp,0x2c
c001f563:	c3                   	ret    

c001f564 <fatWrapperReadDisk>:
c001f564:	53                   	push   ebx
c001f565:	83 ec 18             	sub    esp,0x18
c001f568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f56c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f570:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f575:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001f57c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f584:	ba 00 00 00 00       	mov    edx,0x0
c001f589:	83 ec 0c             	sub    esp,0xc
c001f58c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f590:	53                   	push   ebx
c001f591:	52                   	push   edx
c001f592:	50                   	push   eax
c001f593:	51                   	push   ecx
c001f594:	e8 d5 c1 fe ff       	call   c000b76e <LogicalDisk::read(unsigned long long, int, void*)>
c001f599:	83 c4 20             	add    esp,0x20
c001f59c:	83 c4 18             	add    esp,0x18
c001f59f:	5b                   	pop    ebx
c001f5a0:	c3                   	ret    
c001f5a1:	8d 76 00             	lea    esi,[esi+0x0]

c001f5a4 <fatWrapperWriteDisk>:
c001f5a4:	53                   	push   ebx
c001f5a5:	83 ec 18             	sub    esp,0x18
c001f5a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f5b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f5b5:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001f5bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f5c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5c4:	ba 00 00 00 00       	mov    edx,0x0
c001f5c9:	83 ec 0c             	sub    esp,0xc
c001f5cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f5d0:	53                   	push   ebx
c001f5d1:	52                   	push   edx
c001f5d2:	50                   	push   eax
c001f5d3:	51                   	push   ecx
c001f5d4:	e8 01 c2 fe ff       	call   c000b7da <LogicalDisk::write(unsigned long long, int, void*)>
c001f5d9:	83 c4 20             	add    esp,0x20
c001f5dc:	83 c4 18             	add    esp,0x18
c001f5df:	5b                   	pop    ebx
c001f5e0:	c3                   	ret    
c001f5e1:	8d 76 00             	lea    esi,[esi+0x0]

c001f5e4 <fatWrapperIoctl>:
c001f5e4:	53                   	push   ebx
c001f5e5:	83 ec 28             	sub    esp,0x28
c001f5e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f5ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001f5f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f5f4:	88 d0                	mov    al,dl
c001f5f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f5fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f5ff:	83 f8 02             	cmp    eax,0x2
c001f602:	75 34                	jne    c001f638 <fatWrapperIoctl+0x54>
c001f604:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f608:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f60c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f611:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c001f618:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f61e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f624:	89 c2                	mov    edx,eax
c001f626:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f62a:	66 89 10             	mov    WORD PTR [eax],dx
c001f62d:	b8 00 00 00 00       	mov    eax,0x0
c001f632:	e9 c5 00 00 00       	jmp    c001f6fc <fatWrapperIoctl+0x118>
c001f637:	90                   	nop
c001f638:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f63d:	83 f8 01             	cmp    eax,0x1
c001f640:	75 6a                	jne    c001f6ac <fatWrapperIoctl+0xc8>
c001f642:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f64a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f64f:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c001f656:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f65c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001f662:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001f668:	89 c8                	mov    eax,ecx
c001f66a:	89 da                	mov    edx,ebx
c001f66c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001f670:	c1 e0 0a             	shl    eax,0xa
c001f673:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f678:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c001f67f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001f685:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001f68b:	89 cb                	mov    ebx,ecx
c001f68d:	c1 fb 1f             	sar    ebx,0x1f
c001f690:	53                   	push   ebx
c001f691:	51                   	push   ecx
c001f692:	52                   	push   edx
c001f693:	50                   	push   eax
c001f694:	e8 7b 55 00 00       	call   c0024c14 <__udivdi3>
c001f699:	83 c4 10             	add    esp,0x10
c001f69c:	89 c2                	mov    edx,eax
c001f69e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f6a2:	89 10                	mov    DWORD PTR [eax],edx
c001f6a4:	b8 00 00 00 00       	mov    eax,0x0
c001f6a9:	eb 51                	jmp    c001f6fc <fatWrapperIoctl+0x118>
c001f6ab:	90                   	nop
c001f6ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f6b1:	85 c0                	test   eax,eax
c001f6b3:	75 07                	jne    c001f6bc <fatWrapperIoctl+0xd8>
c001f6b5:	b8 00 00 00 00       	mov    eax,0x0
c001f6ba:	eb 40                	jmp    c001f6fc <fatWrapperIoctl+0x118>
c001f6bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f6c1:	83 f8 03             	cmp    eax,0x3
c001f6c4:	75 1a                	jne    c001f6e0 <fatWrapperIoctl+0xfc>
c001f6c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f6ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6d2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f6d8:	b8 00 00 00 00       	mov    eax,0x0
c001f6dd:	eb 1d                	jmp    c001f6fc <fatWrapperIoctl+0x118>
c001f6df:	90                   	nop
c001f6e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f6e5:	83 f8 04             	cmp    eax,0x4
c001f6e8:	75 0a                	jne    c001f6f4 <fatWrapperIoctl+0x110>
c001f6ea:	b8 00 00 00 00       	mov    eax,0x0
c001f6ef:	eb 0b                	jmp    c001f6fc <fatWrapperIoctl+0x118>
c001f6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6f4:	b8 04 00 00 00       	mov    eax,0x4
c001f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f6fc:	83 c4 28             	add    esp,0x28
c001f6ff:	5b                   	pop    ebx
c001f700:	c3                   	ret    
c001f701:	90                   	nop
c001f702:	66 90                	xchg   ax,ax

c001f704 <FAT::FAT()>:
c001f704:	83 ec 1c             	sub    esp,0x1c
c001f707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f70b:	83 ec 0c             	sub    esp,0xc
c001f70e:	50                   	push   eax
c001f70f:	e8 f6 93 fe ff       	call   c0008b0a <Filesystem::Filesystem()>
c001f714:	83 c4 10             	add    esp,0x10
c001f717:	ba cc ec 02 c0       	mov    edx,0xc002eccc
c001f71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f720:	89 10                	mov    DWORD PTR [eax],edx
c001f722:	c7 05 80 94 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0039480,0x0
c001f72c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f734:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f739:	7f 19                	jg     c001f754 <FAT::FAT()+0x50>
c001f73b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f73f:	c7 04 85 a0 94 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc6b60],0xffffffff
c001f74a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001f74f:	eb e3                	jmp    c001f734 <FAT::FAT()+0x30>
c001f751:	8d 76 00             	lea    esi,[esi+0x0]
c001f754:	90                   	nop
c001f755:	83 c4 1c             	add    esp,0x1c
c001f758:	c3                   	ret    
c001f759:	90                   	nop
c001f75a:	66 90                	xchg   ax,ax

c001f75c <FAT::fixFilepath(char*)>:
c001f75c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f760:	8a 00                	mov    al,BYTE PTR [eax]
c001f762:	0f be c0             	movsx  eax,al
c001f765:	83 f8 40             	cmp    eax,0x40
c001f768:	7e 2e                	jle    c001f798 <FAT::fixFilepath(char*)+0x3c>
c001f76a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f76e:	8a 00                	mov    al,BYTE PTR [eax]
c001f770:	83 e8 41             	sub    eax,0x41
c001f773:	88 c2                	mov    dl,al
c001f775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f779:	88 10                	mov    BYTE PTR [eax],dl
c001f77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f77f:	8a 00                	mov    al,BYTE PTR [eax]
c001f781:	0f be c0             	movsx  eax,al
c001f784:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001f78b:	83 c0 30             	add    eax,0x30
c001f78e:	88 c2                	mov    dl,al
c001f790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f794:	88 10                	mov    BYTE PTR [eax],dl
c001f796:	66 90                	xchg   ax,ax
c001f798:	90                   	nop
c001f799:	c3                   	ret    
c001f79a:	66 90                	xchg   ax,ax

c001f79c <FAT::open(char const*, void**, FileOpenMode)>:
c001f79c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f7a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f7aa:	74 0c                	je     c001f7b8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001f7ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f7b4:	75 0e                	jne    c001f7c4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001f7b6:	66 90                	xchg   ax,ax
c001f7b8:	b8 04 00 00 00       	mov    eax,0x4
c001f7bd:	e9 46 01 00 00       	jmp    c001f908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f7c2:	66 90                	xchg   ax,ax
c001f7c4:	83 ec 08             	sub    esp,0x8
c001f7c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f7ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7d2:	50                   	push   eax
c001f7d3:	e8 78 0e fe ff       	call   c0000650 <strcpy>
c001f7d8:	83 c4 10             	add    esp,0x10
c001f7db:	83 ec 08             	sub    esp,0x8
c001f7de:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f7e2:	50                   	push   eax
c001f7e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f7ea:	e8 6d ff ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001f7ef:	83 c4 10             	add    esp,0x10
c001f7f2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f7fa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f801:	83 e0 01             	and    eax,0x1
c001f804:	74 12                	je     c001f818 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001f806:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f80d:	83 c8 01             	or     eax,0x1
c001f810:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f817:	90                   	nop
c001f818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f81f:	83 e0 04             	and    eax,0x4
c001f822:	74 24                	je     c001f848 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001f824:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f82b:	83 c8 30             	or     eax,0x30
c001f82e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f835:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f83c:	83 c8 02             	or     eax,0x2
c001f83f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f846:	66 90                	xchg   ax,ax
c001f848:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f84f:	83 e0 02             	and    eax,0x2
c001f852:	74 14                	je     c001f868 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001f854:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f85b:	83 c8 02             	or     eax,0x2
c001f85e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f865:	8d 76 00             	lea    esi,[esi+0x0]
c001f868:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f86f:	83 e0 08             	and    eax,0x8
c001f872:	74 14                	je     c001f888 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001f874:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f87b:	83 c8 04             	or     eax,0x4
c001f87e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f885:	8d 76 00             	lea    esi,[esi+0x0]
c001f888:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f88f:	83 e0 10             	and    eax,0x10
c001f892:	74 14                	je     c001f8a8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001f894:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f89b:	83 c8 08             	or     eax,0x8
c001f89e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	68 28 02 00 00       	push   0x228
c001f8b0:	e8 8f 0b ff ff       	call   c0010444 <malloc>
c001f8b5:	83 c4 10             	add    esp,0x10
c001f8b8:	89 c2                	mov    edx,eax
c001f8ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8c1:	89 10                	mov    DWORD PTR [eax],edx
c001f8c3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f8cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8d4:	83 ec 04             	sub    esp,0x4
c001f8d7:	52                   	push   edx
c001f8d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f8dc:	52                   	push   edx
c001f8dd:	50                   	push   eax
c001f8de:	e8 9e 45 fe ff       	call   c0003e81 <f_open>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f8ed:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f8f5:	74 09                	je     c001f900 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001f8f7:	b8 01 00 00 00       	mov    eax,0x1
c001f8fc:	eb 0a                	jmp    c001f908 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f8fe:	66 90                	xchg   ax,ax
c001f900:	b8 00 00 00 00       	mov    eax,0x0
c001f905:	8d 76 00             	lea    esi,[esi+0x0]
c001f908:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f90e:	c3                   	ret    
c001f90f:	90                   	nop

c001f910 <FAT::openDir(char const*, void**)>:
c001f910:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f916:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f91e:	74 0c                	je     c001f92c <FAT::openDir(char const*, void**)+0x1c>
c001f920:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f928:	75 0e                	jne    c001f938 <FAT::openDir(char const*, void**)+0x28>
c001f92a:	66 90                	xchg   ax,ax
c001f92c:	b8 04 00 00 00       	mov    eax,0x4
c001f931:	e9 82 00 00 00       	jmp    c001f9b8 <FAT::openDir(char const*, void**)+0xa8>
c001f936:	66 90                	xchg   ax,ax
c001f938:	83 ec 08             	sub    esp,0x8
c001f93b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f942:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f946:	50                   	push   eax
c001f947:	e8 04 0d fe ff       	call   c0000650 <strcpy>
c001f94c:	83 c4 10             	add    esp,0x10
c001f94f:	83 ec 08             	sub    esp,0x8
c001f952:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f956:	50                   	push   eax
c001f957:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f95e:	e8 f9 fd ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001f963:	83 c4 10             	add    esp,0x10
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	6a 30                	push   0x30
c001f96b:	e8 d4 0a ff ff       	call   c0010444 <malloc>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	89 c2                	mov    edx,eax
c001f975:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f97c:	89 10                	mov    DWORD PTR [eax],edx
c001f97e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f985:	8b 00                	mov    eax,DWORD PTR [eax]
c001f987:	83 ec 08             	sub    esp,0x8
c001f98a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f98e:	52                   	push   edx
c001f98f:	50                   	push   eax
c001f990:	e8 7b 4e fe ff       	call   c0004810 <f_opendir>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f99f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f9a7:	74 07                	je     c001f9b0 <FAT::openDir(char const*, void**)+0xa0>
c001f9a9:	b8 01 00 00 00       	mov    eax,0x1
c001f9ae:	eb 08                	jmp    c001f9b8 <FAT::openDir(char const*, void**)+0xa8>
c001f9b0:	b8 00 00 00 00       	mov    eax,0x0
c001f9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f9be:	c3                   	ret    
c001f9bf:	90                   	nop

c001f9c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f9c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f9c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f9ce:	75 0c                	jne    c001f9dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001f9d0:	b8 04 00 00 00       	mov    eax,0x4
c001f9d5:	e9 d6 00 00 00       	jmp    c001fab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f9da:	66 90                	xchg   ax,ax
c001f9dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f9e4:	75 0a                	jne    c001f9f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001f9e6:	b8 04 00 00 00       	mov    eax,0x4
c001f9eb:	e9 c0 00 00 00       	jmp    c001fab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f9f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f9f8:	75 0a                	jne    c001fa04 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001f9fa:	b8 04 00 00 00       	mov    eax,0x4
c001f9ff:	e9 ac 00 00 00       	jmp    c001fab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001fa04:	83 ec 08             	sub    esp,0x8
c001fa07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fa0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001fa15:	50                   	push   eax
c001fa16:	e8 35 0c fe ff       	call   c0000650 <strcpy>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	83 ec 08             	sub    esp,0x8
c001fa21:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001fa28:	50                   	push   eax
c001fa29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fa30:	e8 27 fd ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fa35:	83 c4 10             	add    esp,0x10
c001fa38:	83 ec 08             	sub    esp,0x8
c001fa3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa3f:	50                   	push   eax
c001fa40:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001fa47:	50                   	push   eax
c001fa48:	e8 42 4f fe ff       	call   c000498f <f_stat>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001fa57:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001fa5e:	85 c0                	test   eax,eax
c001fa60:	74 0a                	je     c001fa6c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001fa62:	83 f8 04             	cmp    eax,0x4
c001fa65:	74 39                	je     c001faa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001fa67:	eb 3f                	jmp    c001faa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001fa69:	8d 76 00             	lea    esi,[esi+0x0]
c001fa6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa70:	0f b6 c0             	movzx  eax,al
c001fa73:	83 e0 10             	and    eax,0x10
c001fa76:	0f 95 c2             	setne  dl
c001fa79:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001fa80:	88 10                	mov    BYTE PTR [eax],dl
c001fa82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa86:	ba 00 00 00 00       	mov    edx,0x0
c001fa8b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001fa92:	89 01                	mov    DWORD PTR [ecx],eax
c001fa94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fa97:	b8 00 00 00 00       	mov    eax,0x0
c001fa9c:	eb 12                	jmp    c001fab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001fa9e:	66 90                	xchg   ax,ax
c001faa0:	b8 02 00 00 00       	mov    eax,0x2
c001faa5:	eb 09                	jmp    c001fab0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001faa7:	90                   	nop
c001faa8:	b8 01 00 00 00       	mov    eax,0x1
c001faad:	8d 76 00             	lea    esi,[esi+0x0]
c001fab0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001fab6:	c3                   	ret    
c001fab7:	90                   	nop

c001fab8 <FAT::unlink(char const*)>:
c001fab8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fabe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fac6:	75 08                	jne    c001fad0 <FAT::unlink(char const*)+0x18>
c001fac8:	b8 04 00 00 00       	mov    eax,0x4
c001facd:	eb 61                	jmp    c001fb30 <FAT::unlink(char const*)+0x78>
c001facf:	90                   	nop
c001fad0:	83 ec 08             	sub    esp,0x8
c001fad3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fada:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fade:	50                   	push   eax
c001fadf:	e8 6c 0b fe ff       	call   c0000650 <strcpy>
c001fae4:	83 c4 10             	add    esp,0x10
c001fae7:	83 ec 08             	sub    esp,0x8
c001faea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001faee:	50                   	push   eax
c001faef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001faf6:	e8 61 fc ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fafb:	83 c4 10             	add    esp,0x10
c001fafe:	83 ec 0c             	sub    esp,0xc
c001fb01:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fb05:	50                   	push   eax
c001fb06:	e8 f6 50 fe ff       	call   c0004c01 <f_unlink>
c001fb0b:	83 c4 10             	add    esp,0x10
c001fb0e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fb15:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fb1c:	85 c0                	test   eax,eax
c001fb1e:	75 08                	jne    c001fb28 <FAT::unlink(char const*)+0x70>
c001fb20:	b8 00 00 00 00       	mov    eax,0x0
c001fb25:	eb 09                	jmp    c001fb30 <FAT::unlink(char const*)+0x78>
c001fb27:	90                   	nop
c001fb28:	b8 01 00 00 00       	mov    eax,0x1
c001fb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001fb30:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fb36:	c3                   	ret    
c001fb37:	90                   	nop

c001fb38 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001fb38:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001fb3e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001fb45:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001fb4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb50:	88 d0                	mov    al,dl
c001fb52:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fb56:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001fb5e:	75 0c                	jne    c001fb6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001fb60:	b8 04 00 00 00       	mov    eax,0x4
c001fb65:	e9 7e 01 00 00       	jmp    c001fce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001fb6a:	66 90                	xchg   ax,ax
c001fb6c:	83 ec 08             	sub    esp,0x8
c001fb6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001fb76:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fb7a:	50                   	push   eax
c001fb7b:	e8 d0 0a fe ff       	call   c0000650 <strcpy>
c001fb80:	83 c4 10             	add    esp,0x10
c001fb83:	83 ec 08             	sub    esp,0x8
c001fb86:	8d 44 24 20          	lea    eax,[esp+0x20]
c001fb8a:	50                   	push   eax
c001fb8b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001fb92:	e8 c5 fb ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fba2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001fbaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbaf:	83 e0 01             	and    eax,0x1
c001fbb2:	74 14                	je     c001fbc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001fbb4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fbbb:	83 c8 01             	or     eax,0x1
c001fbbe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fbc5:	8d 76 00             	lea    esi,[esi+0x0]
c001fbc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbcd:	83 e0 02             	and    eax,0x2
c001fbd0:	74 12                	je     c001fbe4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001fbd2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fbd9:	83 c8 20             	or     eax,0x20
c001fbdc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fbe3:	90                   	nop
c001fbe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fbe9:	83 e0 04             	and    eax,0x4
c001fbec:	74 12                	je     c001fc00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001fbee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fbf5:	83 c8 04             	or     eax,0x4
c001fbf8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fbff:	90                   	nop
c001fc00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fc05:	83 e0 08             	and    eax,0x8
c001fc08:	74 12                	je     c001fc1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001fc0a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fc11:	83 c8 02             	or     eax,0x2
c001fc14:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fc1b:	90                   	nop
c001fc1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc21:	83 e0 01             	and    eax,0x1
c001fc24:	74 12                	je     c001fc38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001fc26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fc2d:	83 c8 01             	or     eax,0x1
c001fc30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fc37:	90                   	nop
c001fc38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc3d:	83 e0 02             	and    eax,0x2
c001fc40:	74 12                	je     c001fc54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001fc42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fc49:	83 c8 20             	or     eax,0x20
c001fc4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fc53:	90                   	nop
c001fc54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc59:	83 e0 04             	and    eax,0x4
c001fc5c:	74 12                	je     c001fc70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001fc5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fc65:	83 c8 04             	or     eax,0x4
c001fc68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fc6f:	90                   	nop
c001fc70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc75:	83 e0 08             	and    eax,0x8
c001fc78:	74 12                	je     c001fc8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001fc7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fc81:	83 c8 02             	or     eax,0x2
c001fc84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fc8b:	90                   	nop
c001fc8c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001fc93:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fc9a:	09 d0                	or     eax,edx
c001fc9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fca3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001fcab:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001fcb3:	83 ec 04             	sub    esp,0x4
c001fcb6:	52                   	push   edx
c001fcb7:	50                   	push   eax
c001fcb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fcbc:	50                   	push   eax
c001fcbd:	e8 b2 53 fe ff       	call   c0005074 <f_chmod>
c001fcc2:	83 c4 10             	add    esp,0x10
c001fcc5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001fccc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001fcd3:	85 c0                	test   eax,eax
c001fcd5:	75 09                	jne    c001fce0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001fcd7:	b8 00 00 00 00       	mov    eax,0x0
c001fcdc:	eb 0a                	jmp    c001fce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001fcde:	66 90                	xchg   ax,ax
c001fce0:	b8 01 00 00 00       	mov    eax,0x1
c001fce5:	8d 76 00             	lea    esi,[esi+0x0]
c001fce8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001fcee:	c3                   	ret    
c001fcef:	90                   	nop

c001fcf0 <FAT::rename(char const*, char const*)>:
c001fcf0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001fcf6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001fcfe:	74 0c                	je     c001fd0c <FAT::rename(char const*, char const*)+0x1c>
c001fd00:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001fd08:	75 0e                	jne    c001fd18 <FAT::rename(char const*, char const*)+0x28>
c001fd0a:	66 90                	xchg   ax,ax
c001fd0c:	b8 04 00 00 00       	mov    eax,0x4
c001fd11:	e9 9e 00 00 00       	jmp    c001fdb4 <FAT::rename(char const*, char const*)+0xc4>
c001fd16:	66 90                	xchg   ax,ax
c001fd18:	83 ec 08             	sub    esp,0x8
c001fd1b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fd22:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fd29:	50                   	push   eax
c001fd2a:	e8 21 09 fe ff       	call   c0000650 <strcpy>
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	83 ec 08             	sub    esp,0x8
c001fd35:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001fd3c:	50                   	push   eax
c001fd3d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fd44:	e8 13 fa ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fd49:	83 c4 10             	add    esp,0x10
c001fd4c:	83 ec 08             	sub    esp,0x8
c001fd4f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001fd56:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd5a:	50                   	push   eax
c001fd5b:	e8 f0 08 fe ff       	call   c0000650 <strcpy>
c001fd60:	83 c4 10             	add    esp,0x10
c001fd63:	83 ec 08             	sub    esp,0x8
c001fd66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd6a:	50                   	push   eax
c001fd6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fd72:	e8 e5 f9 ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	83 ec 08             	sub    esp,0x8
c001fd7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd81:	50                   	push   eax
c001fd82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fd89:	50                   	push   eax
c001fd8a:	e8 2d 51 fe ff       	call   c0004ebc <f_rename>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001fd99:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001fda0:	85 c0                	test   eax,eax
c001fda2:	75 08                	jne    c001fdac <FAT::rename(char const*, char const*)+0xbc>
c001fda4:	b8 00 00 00 00       	mov    eax,0x0
c001fda9:	eb 09                	jmp    c001fdb4 <FAT::rename(char const*, char const*)+0xc4>
c001fdab:	90                   	nop
c001fdac:	b8 01 00 00 00       	mov    eax,0x1
c001fdb1:	8d 76 00             	lea    esi,[esi+0x0]
c001fdb4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fdba:	c3                   	ret    
c001fdbb:	90                   	nop

c001fdbc <FAT::mkdir(char const*)>:
c001fdbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fdc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fdca:	75 08                	jne    c001fdd4 <FAT::mkdir(char const*)+0x18>
c001fdcc:	b8 04 00 00 00       	mov    eax,0x4
c001fdd1:	eb 61                	jmp    c001fe34 <FAT::mkdir(char const*)+0x78>
c001fdd3:	90                   	nop
c001fdd4:	83 ec 08             	sub    esp,0x8
c001fdd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fdde:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fde2:	50                   	push   eax
c001fde3:	e8 68 08 fe ff       	call   c0000650 <strcpy>
c001fde8:	83 c4 10             	add    esp,0x10
c001fdeb:	83 ec 08             	sub    esp,0x8
c001fdee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fdf2:	50                   	push   eax
c001fdf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fdfa:	e8 5d f9 ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 ec 0c             	sub    esp,0xc
c001fe05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe09:	50                   	push   eax
c001fe0a:	e8 12 4f fe ff       	call   c0004d21 <f_mkdir>
c001fe0f:	83 c4 10             	add    esp,0x10
c001fe12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fe19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fe20:	85 c0                	test   eax,eax
c001fe22:	75 08                	jne    c001fe2c <FAT::mkdir(char const*)+0x70>
c001fe24:	b8 00 00 00 00       	mov    eax,0x0
c001fe29:	eb 09                	jmp    c001fe34 <FAT::mkdir(char const*)+0x78>
c001fe2b:	90                   	nop
c001fe2c:	b8 01 00 00 00       	mov    eax,0x1
c001fe31:	8d 76 00             	lea    esi,[esi+0x0]
c001fe34:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fe3a:	c3                   	ret    
c001fe3b:	90                   	nop

c001fe3c <FAT::exists(char const*)>:
c001fe3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001fe42:	83 ec 08             	sub    esp,0x8
c001fe45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fe4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fe50:	50                   	push   eax
c001fe51:	e8 fa 07 fe ff       	call   c0000650 <strcpy>
c001fe56:	83 c4 10             	add    esp,0x10
c001fe59:	83 ec 08             	sub    esp,0x8
c001fe5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe60:	50                   	push   eax
c001fe61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fe68:	e8 ef f8 ff ff       	call   c001f75c <FAT::fixFilepath(char*)>
c001fe6d:	83 c4 10             	add    esp,0x10
c001fe70:	83 ec 08             	sub    esp,0x8
c001fe73:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001fe7a:	50                   	push   eax
c001fe7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fe7f:	50                   	push   eax
c001fe80:	e8 0a 4b fe ff       	call   c000498f <f_stat>
c001fe85:	83 c4 10             	add    esp,0x10
c001fe88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001fe8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001fe96:	85 c0                	test   eax,eax
c001fe98:	75 06                	jne    c001fea0 <FAT::exists(char const*)+0x64>
c001fe9a:	b0 01                	mov    al,0x1
c001fe9c:	eb 06                	jmp    c001fea4 <FAT::exists(char const*)+0x68>
c001fe9e:	66 90                	xchg   ax,ax
c001fea0:	b0 00                	mov    al,0x0
c001fea2:	66 90                	xchg   ax,ax
c001fea4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001feaa:	c3                   	ret    
c001feab:	90                   	nop

c001feac <isoReadDiscSectorHelper>:
c001feac:	83 ec 2c             	sub    esp,0x2c
c001feaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001feb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001feb7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001febc:	83 e8 41             	sub    eax,0x41
c001febf:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001fec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001feca:	ba 00 00 00 00       	mov    edx,0x0
c001fecf:	83 ec 0c             	sub    esp,0xc
c001fed2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fed6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001feda:	52                   	push   edx
c001fedb:	50                   	push   eax
c001fedc:	51                   	push   ecx
c001fedd:	e8 8c b8 fe ff       	call   c000b76e <LogicalDisk::read(unsigned long long, int, void*)>
c001fee2:	83 c4 20             	add    esp,0x20
c001fee5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fee9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001feee:	74 0c                	je     c001fefc <isoReadDiscSectorHelper+0x50>
c001fef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fef4:	c1 e0 0b             	shl    eax,0xb
c001fef7:	eb 0b                	jmp    c001ff04 <isoReadDiscSectorHelper+0x58>
c001fef9:	8d 76 00             	lea    esi,[esi+0x0]
c001fefc:	b8 00 00 00 00       	mov    eax,0x0
c001ff01:	8d 76 00             	lea    esi,[esi+0x0]
c001ff04:	83 c4 2c             	add    esp,0x2c
c001ff07:	c3                   	ret    

c001ff08 <iso_kprintf>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	83 ec 08             	sub    esp,0x8
c001ff0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff12:	68 5c d6 02 c0       	push   0xc002d65c
c001ff17:	e8 4a 70 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ff1c:	83 c4 10             	add    esp,0x10
c001ff1f:	90                   	nop
c001ff20:	83 c4 0c             	add    esp,0xc
c001ff23:	c3                   	ret    

c001ff24 <iso_kprintfd>:
c001ff24:	83 ec 0c             	sub    esp,0xc
c001ff27:	83 ec 08             	sub    esp,0x8
c001ff2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff2e:	68 1a cc 02 c0       	push   0xc002cc1a
c001ff33:	e8 2e 70 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ff38:	83 c4 10             	add    esp,0x10
c001ff3b:	90                   	nop
c001ff3c:	83 c4 0c             	add    esp,0xc
c001ff3f:	c3                   	ret    

c001ff40 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ff40:	b8 08 00 00 00       	mov    eax,0x8
c001ff45:	c3                   	ret    

c001ff46 <ISO9660::truncate(void*, unsigned long long)>:
c001ff46:	b8 01 00 00 00       	mov    eax,0x1
c001ff4b:	c3                   	ret    

c001ff4c <ISO9660::getName()>:
c001ff4c:	b8 30 ed 02 c0       	mov    eax,0xc002ed30
c001ff51:	c3                   	ret    

c001ff52 <ISO9660::closeDir(void*)>:
c001ff52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff56:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff58:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ff5b:	90                   	nop

c001ff5c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ff5c:	b8 01 00 00 00       	mov    eax,0x1
c001ff61:	c3                   	ret    

c001ff62 <ISO9660::unlink(char const*)>:
c001ff62:	b8 01 00 00 00       	mov    eax,0x1
c001ff67:	c3                   	ret    

c001ff68 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ff68:	b8 03 00 00 00       	mov    eax,0x3
c001ff6d:	c3                   	ret    

c001ff6e <ISO9660::rename(char const*, char const*)>:
c001ff6e:	b8 01 00 00 00       	mov    eax,0x1
c001ff73:	c3                   	ret    

c001ff74 <ISO9660::mkdir(char const*)>:
c001ff74:	b8 01 00 00 00       	mov    eax,0x1
c001ff79:	c3                   	ret    

c001ff7a <ISO9660::~ISO9660()>:
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	ba 70 ee 02 c0       	mov    edx,0xc002ee70
c001ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff86:	89 10                	mov    DWORD PTR [eax],edx
c001ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	50                   	push   eax
c001ff90:	e8 99 8b fe ff       	call   c0008b2e <Filesystem::~Filesystem()>
c001ff95:	83 c4 10             	add    esp,0x10
c001ff98:	90                   	nop
c001ff99:	83 c4 0c             	add    esp,0xc
c001ff9c:	c3                   	ret    
c001ff9d:	90                   	nop

c001ff9e <ISO9660::~ISO9660()>:
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	83 ec 0c             	sub    esp,0xc
c001ffa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa8:	e8 cd ff ff ff       	call   c001ff7a <ISO9660::~ISO9660()>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	83 ec 08             	sub    esp,0x8
c001ffb3:	6a 08                	push   0x8
c001ffb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb9:	e8 7e e0 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c001ffbe:	83 c4 10             	add    esp,0x10
c001ffc1:	83 c4 0c             	add    esp,0xc
c001ffc4:	c3                   	ret    
c001ffc5:	90                   	nop

c001ffc6 <ISO9660::exists(char const*)>:
c001ffc6:	83 ec 18             	sub    esp,0x18
c001ffc9:	68 4b ed 02 c0       	push   0xc002ed4b
c001ffce:	e8 c5 08 ff ff       	call   c0010898 <KePanic(char const*)>
c001ffd3:	31 c0                	xor    eax,eax
c001ffd5:	83 c4 1c             	add    esp,0x1c
c001ffd8:	c3                   	ret    
c001ffd9:	90                   	nop

c001ffda <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ffda:	56                   	push   esi
c001ffdb:	53                   	push   ebx
c001ffdc:	53                   	push   ebx
c001ffdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffe1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ffe5:	85 db                	test   ebx,ebx
c001ffe7:	0f 84 ca 00 00 00    	je     c00200b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ffed:	85 f6                	test   esi,esi
c001ffef:	0f 84 c2 00 00 00    	je     c00200b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001fff5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001fffa:	b8 03 00 00 00       	mov    eax,0x3
c001ffff:	0f 85 b7 00 00 00    	jne    c00200bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0020005:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0020007:	38 0d 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,cl
c002000d:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c0020014:	74 1b                	je     c0020031 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020016:	85 c0                	test   eax,eax
c0020018:	74 10                	je     c002002a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	68 69 ed 02 c0       	push   0xc002ed69
c0020022:	e8 71 08 ff ff       	call   c0010898 <KePanic(char const*)>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	8a 03                	mov    al,BYTE PTR [ebx]
c002002c:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c0020031:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020034:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c002003b:	85 c0                	test   eax,eax
c002003d:	74 09                	je     c0020048 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c002003f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0020046:	74 48                	je     c0020090 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	68 79 ed 02 c0       	push   0xc002ed79
c0020050:	e8 11 6f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020055:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020058:	83 c4 10             	add    esp,0x10
c002005b:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0020062:	85 c0                	test   eax,eax
c0020064:	74 17                	je     c002007d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0020066:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	68 99 ed 02 c0       	push   0xc002ed99
c0020075:	e8 ec 6e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c0020084:	83 ec 0c             	sub    esp,0xc
c0020087:	50                   	push   eax
c0020088:	e8 ba 6b fe ff       	call   c0006c47 <init_percd>
c002008d:	83 c4 10             	add    esp,0x10
c0020090:	51                   	push   ecx
c0020091:	83 c3 03             	add    ebx,0x3
c0020094:	51                   	push   ecx
c0020095:	6a 00                	push   0x0
c0020097:	53                   	push   ebx
c0020098:	e8 6d 66 fe ff       	call   c000670a <iso_open>
c002009d:	83 c4 10             	add    esp,0x10
c00200a0:	89 c2                	mov    edx,eax
c00200a2:	b8 01 00 00 00       	mov    eax,0x1
c00200a7:	83 fa ff             	cmp    edx,0xffffffff
c00200aa:	74 10                	je     c00200bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00200ac:	83 c2 32             	add    edx,0x32
c00200af:	31 c0                	xor    eax,eax
c00200b1:	01 d2                	add    edx,edx
c00200b3:	89 16                	mov    DWORD PTR [esi],edx
c00200b5:	eb 05                	jmp    c00200bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00200b7:	b8 04 00 00 00       	mov    eax,0x4
c00200bc:	5a                   	pop    edx
c00200bd:	5b                   	pop    ebx
c00200be:	5e                   	pop    esi
c00200bf:	c3                   	ret    

c00200c0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00200c0:	53                   	push   ebx
c00200c1:	83 ec 08             	sub    esp,0x8
c00200c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00200cc:	85 c0                	test   eax,eax
c00200ce:	74 2d                	je     c00200fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00200d0:	85 db                	test   ebx,ebx
c00200d2:	74 29                	je     c00200fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00200d4:	52                   	push   edx
c00200d5:	b9 02 00 00 00       	mov    ecx,0x2
c00200da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200de:	99                   	cdq    
c00200df:	f7 f9                	idiv   ecx
c00200e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00200e5:	83 e8 32             	sub    eax,0x32
c00200e8:	50                   	push   eax
c00200e9:	e8 c4 66 fe ff       	call   c00067b2 <iso_read>
c00200ee:	83 c4 10             	add    esp,0x10
c00200f1:	89 03                	mov    DWORD PTR [ebx],eax
c00200f3:	09 d0                	or     eax,edx
c00200f5:	0f 94 c0             	sete   al
c00200f8:	0f b6 c0             	movzx  eax,al
c00200fb:	eb 05                	jmp    c0020102 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00200fd:	b8 04 00 00 00       	mov    eax,0x4
c0020102:	83 c4 08             	add    esp,0x8
c0020105:	5b                   	pop    ebx
c0020106:	c3                   	ret    
c0020107:	90                   	nop

c0020108 <ISO9660::seek(void*, unsigned long long)>:
c0020108:	57                   	push   edi
c0020109:	b8 04 00 00 00       	mov    eax,0x4
c002010e:	56                   	push   esi
c002010f:	51                   	push   ecx
c0020110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020114:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020118:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002011c:	85 d2                	test   edx,edx
c002011e:	74 26                	je     c0020146 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0020120:	89 d0                	mov    eax,edx
c0020122:	b9 02 00 00 00       	mov    ecx,0x2
c0020127:	6a 00                	push   0x0
c0020129:	99                   	cdq    
c002012a:	f7 f9                	idiv   ecx
c002012c:	57                   	push   edi
c002012d:	56                   	push   esi
c002012e:	83 e8 32             	sub    eax,0x32
c0020131:	50                   	push   eax
c0020132:	e8 91 67 fe ff       	call   c00068c8 <iso_seek>
c0020137:	83 c4 10             	add    esp,0x10
c002013a:	31 f0                	xor    eax,esi
c002013c:	31 fa                	xor    edx,edi
c002013e:	09 d0                	or     eax,edx
c0020140:	0f 95 c0             	setne  al
c0020143:	0f b6 c0             	movzx  eax,al
c0020146:	5a                   	pop    edx
c0020147:	5e                   	pop    esi
c0020148:	5f                   	pop    edi
c0020149:	c3                   	ret    

c002014a <ISO9660::tell(void*, unsigned long long*)>:
c002014a:	53                   	push   ebx
c002014b:	83 ec 08             	sub    esp,0x8
c002014e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020152:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020156:	85 c0                	test   eax,eax
c0020158:	74 24                	je     c002017e <ISO9660::tell(void*, unsigned long long*)+0x34>
c002015a:	85 db                	test   ebx,ebx
c002015c:	74 20                	je     c002017e <ISO9660::tell(void*, unsigned long long*)+0x34>
c002015e:	b9 02 00 00 00       	mov    ecx,0x2
c0020163:	99                   	cdq    
c0020164:	f7 f9                	idiv   ecx
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	83 e8 32             	sub    eax,0x32
c002016c:	50                   	push   eax
c002016d:	e8 da 67 fe ff       	call   c000694c <iso_tell>
c0020172:	83 c4 10             	add    esp,0x10
c0020175:	89 03                	mov    DWORD PTR [ebx],eax
c0020177:	31 c0                	xor    eax,eax
c0020179:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c002017c:	eb 05                	jmp    c0020183 <ISO9660::tell(void*, unsigned long long*)+0x39>
c002017e:	b8 04 00 00 00       	mov    eax,0x4
c0020183:	83 c4 08             	add    esp,0x8
c0020186:	5b                   	pop    ebx
c0020187:	c3                   	ret    

c0020188 <ISO9660::stat(void*, unsigned long long*)>:
c0020188:	56                   	push   esi
c0020189:	53                   	push   ebx
c002018a:	83 ec 10             	sub    esp,0x10
c002018d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020191:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020195:	68 bd ed 02 c0       	push   0xc002edbd
c002019a:	e8 c7 6d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	85 db                	test   ebx,ebx
c00201a4:	74 2a                	je     c00201d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00201a6:	85 f6                	test   esi,esi
c00201a8:	74 26                	je     c00201d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00201aa:	89 d8                	mov    eax,ebx
c00201ac:	b9 02 00 00 00       	mov    ecx,0x2
c00201b1:	99                   	cdq    
c00201b2:	83 ec 0c             	sub    esp,0xc
c00201b5:	f7 f9                	idiv   ecx
c00201b7:	83 e8 32             	sub    eax,0x32
c00201ba:	50                   	push   eax
c00201bb:	e8 bd 67 fe ff       	call   c000697d <iso_total>
c00201c0:	83 c4 10             	add    esp,0x10
c00201c3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00201ca:	89 06                	mov    DWORD PTR [esi],eax
c00201cc:	31 c0                	xor    eax,eax
c00201ce:	eb 05                	jmp    c00201d5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00201d0:	b8 04 00 00 00       	mov    eax,0x4
c00201d5:	5a                   	pop    edx
c00201d6:	5b                   	pop    ebx
c00201d7:	5e                   	pop    esi
c00201d8:	c3                   	ret    
c00201d9:	90                   	nop

c00201da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00201da:	55                   	push   ebp
c00201db:	57                   	push   edi
c00201dc:	56                   	push   esi
c00201dd:	53                   	push   ebx
c00201de:	83 ec 18             	sub    esp,0x18
c00201e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00201e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00201e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00201ed:	68 c5 ed 02 c0       	push   0xc002edc5
c00201f2:	e8 6f 6d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	85 ff                	test   edi,edi
c00201fc:	0f 94 c0             	sete   al
c00201ff:	85 f6                	test   esi,esi
c0020201:	0f 94 c2             	sete   dl
c0020204:	09 d0                	or     eax,edx
c0020206:	a8 01                	test   al,0x1
c0020208:	0f 85 dd 00 00 00    	jne    c00202eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002020e:	85 db                	test   ebx,ebx
c0020210:	0f 84 d5 00 00 00    	je     c00202eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0020216:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020219:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002021f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0020226:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c002022d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002022f:	38 0d 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,cl
c0020235:	74 1b                	je     c0020252 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0020237:	85 c0                	test   eax,eax
c0020239:	74 10                	je     c002024b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	68 69 ed 02 c0       	push   0xc002ed69
c0020243:	e8 50 06 ff ff       	call   c0010898 <KePanic(char const*)>
c0020248:	83 c4 10             	add    esp,0x10
c002024b:	8a 03                	mov    al,BYTE PTR [ebx]
c002024d:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c0020252:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020255:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c002025c:	85 c0                	test   eax,eax
c002025e:	74 09                	je     c0020269 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0020260:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0020267:	74 51                	je     c00202ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	68 cd ed 02 c0       	push   0xc002edcd
c0020271:	e8 f0 6c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020276:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	83 3c 85 dc 69 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc9624],0x0
c0020284:	74 21                	je     c00202a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	68 ed ed 02 c0       	push   0xc002eded
c002028e:	e8 d3 6c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020293:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020296:	83 c4 10             	add    esp,0x10
c0020299:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c00202a0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00202a7:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c00202ae:	83 ec 0c             	sub    esp,0xc
c00202b1:	50                   	push   eax
c00202b2:	e8 90 69 fe ff       	call   c0006c47 <init_percd>
c00202b7:	83 c4 10             	add    esp,0x10
c00202ba:	52                   	push   edx
c00202bb:	83 c3 03             	add    ebx,0x3
c00202be:	52                   	push   edx
c00202bf:	6a 00                	push   0x0
c00202c1:	53                   	push   ebx
c00202c2:	e8 43 64 fe ff       	call   c000670a <iso_open>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	83 f8 ff             	cmp    eax,0xffffffff
c00202cd:	89 c5                	mov    ebp,eax
c00202cf:	75 21                	jne    c00202f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00202d1:	50                   	push   eax
c00202d2:	50                   	push   eax
c00202d3:	6a 01                	push   0x1
c00202d5:	53                   	push   ebx
c00202d6:	e8 2f 64 fe ff       	call   c000670a <iso_open>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	ba 02 00 00 00       	mov    edx,0x2
c00202e3:	40                   	inc    eax
c00202e4:	74 2b                	je     c0020311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00202e6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00202e9:	eb 24                	jmp    c002030f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00202eb:	ba 04 00 00 00       	mov    edx,0x4
c00202f0:	eb 1f                	jmp    c0020311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	50                   	push   eax
c00202f6:	e8 82 66 fe ff       	call   c000697d <iso_total>
c00202fb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0020302:	89 07                	mov    DWORD PTR [edi],eax
c0020304:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020307:	e8 88 64 fe ff       	call   c0006794 <iso_close>
c002030c:	83 c4 10             	add    esp,0x10
c002030f:	31 d2                	xor    edx,edx
c0020311:	83 c4 0c             	add    esp,0xc
c0020314:	89 d0                	mov    eax,edx
c0020316:	5b                   	pop    ebx
c0020317:	5e                   	pop    esi
c0020318:	5f                   	pop    edi
c0020319:	5d                   	pop    ebp
c002031a:	c3                   	ret    
c002031b:	90                   	nop

c002031c <ISO9660::close(void*)>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	b8 04 00 00 00       	mov    eax,0x4
c0020324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020328:	85 d2                	test   edx,edx
c002032a:	74 1b                	je     c0020347 <ISO9660::close(void*)+0x2b>
c002032c:	89 d0                	mov    eax,edx
c002032e:	b9 02 00 00 00       	mov    ecx,0x2
c0020333:	99                   	cdq    
c0020334:	83 ec 0c             	sub    esp,0xc
c0020337:	f7 f9                	idiv   ecx
c0020339:	83 e8 32             	sub    eax,0x32
c002033c:	50                   	push   eax
c002033d:	e8 52 64 fe ff       	call   c0006794 <iso_close>
c0020342:	83 c4 10             	add    esp,0x10
c0020345:	31 c0                	xor    eax,eax
c0020347:	83 c4 0c             	add    esp,0xc
c002034a:	c3                   	ret    
c002034b:	90                   	nop

c002034c <ISO9660::openDir(char const*, void**)>:
c002034c:	56                   	push   esi
c002034d:	53                   	push   ebx
c002034e:	50                   	push   eax
c002034f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020353:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020357:	85 db                	test   ebx,ebx
c0020359:	0f 84 bd 00 00 00    	je     c002041c <ISO9660::openDir(char const*, void**)+0xd0>
c002035f:	85 f6                	test   esi,esi
c0020361:	0f 84 b5 00 00 00    	je     c002041c <ISO9660::openDir(char const*, void**)+0xd0>
c0020367:	8a 13                	mov    dl,BYTE PTR [ebx]
c0020369:	38 15 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,dl
c002036f:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c0020376:	74 1b                	je     c0020393 <ISO9660::openDir(char const*, void**)+0x47>
c0020378:	85 c0                	test   eax,eax
c002037a:	74 10                	je     c002038c <ISO9660::openDir(char const*, void**)+0x40>
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	68 69 ed 02 c0       	push   0xc002ed69
c0020384:	e8 0f 05 ff ff       	call   c0010898 <KePanic(char const*)>
c0020389:	83 c4 10             	add    esp,0x10
c002038c:	8a 03                	mov    al,BYTE PTR [ebx]
c002038e:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c0020393:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0020396:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c002039d:	85 c0                	test   eax,eax
c002039f:	74 10                	je     c00203b1 <ISO9660::openDir(char const*, void**)+0x65>
c00203a1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00203a8:	74 1a                	je     c00203c4 <ISO9660::openDir(char const*, void**)+0x78>
c00203aa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00203b1:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	50                   	push   eax
c00203bc:	e8 86 68 fe ff       	call   c0006c47 <init_percd>
c00203c1:	83 c4 10             	add    esp,0x10
c00203c4:	50                   	push   eax
c00203c5:	83 c3 03             	add    ebx,0x3
c00203c8:	50                   	push   eax
c00203c9:	6a 01                	push   0x1
c00203cb:	53                   	push   ebx
c00203cc:	e8 39 63 fe ff       	call   c000670a <iso_open>
c00203d1:	83 c4 10             	add    esp,0x10
c00203d4:	83 f8 ff             	cmp    eax,0xffffffff
c00203d7:	89 c3                	mov    ebx,eax
c00203d9:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00203de:	75 1c                	jne    c00203fc <ISO9660::openDir(char const*, void**)+0xb0>
c00203e0:	53                   	push   ebx
c00203e1:	53                   	push   ebx
c00203e2:	68 11 ee 02 c0       	push   0xc002ee11
c00203e7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c00203ed:	e8 e2 2d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c00203f2:	83 c4 10             	add    esp,0x10
c00203f5:	b8 01 00 00 00       	mov    eax,0x1
c00203fa:	eb 25                	jmp    c0020421 <ISO9660::openDir(char const*, void**)+0xd5>
c00203fc:	51                   	push   ecx
c00203fd:	01 db                	add    ebx,ebx
c00203ff:	51                   	push   ecx
c0020400:	83 c3 65             	add    ebx,0x65
c0020403:	68 24 ee 02 c0       	push   0xc002ee24
c0020408:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c002040e:	e8 c1 2d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c0020413:	83 c4 10             	add    esp,0x10
c0020416:	31 c0                	xor    eax,eax
c0020418:	89 1e                	mov    DWORD PTR [esi],ebx
c002041a:	eb 05                	jmp    c0020421 <ISO9660::openDir(char const*, void**)+0xd5>
c002041c:	b8 04 00 00 00       	mov    eax,0x4
c0020421:	5a                   	pop    edx
c0020422:	5b                   	pop    ebx
c0020423:	5e                   	pop    esi
c0020424:	c3                   	ret    
c0020425:	90                   	nop

c0020426 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020426:	55                   	push   ebp
c0020427:	57                   	push   edi
c0020428:	56                   	push   esi
c0020429:	53                   	push   ebx
c002042a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020430:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0020437:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c002043e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0020445:	85 db                	test   ebx,ebx
c0020447:	0f 84 e4 00 00 00    	je     c0020531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c002044d:	85 ed                	test   ebp,ebp
c002044f:	0f 84 dc 00 00 00    	je     c0020531 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0020455:	83 ec 0c             	sub    esp,0xc
c0020458:	68 37 ee 02 c0       	push   0xc002ee37
c002045d:	e8 04 6b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020462:	89 d8                	mov    eax,ebx
c0020464:	b9 02 00 00 00       	mov    ecx,0x2
c0020469:	99                   	cdq    
c002046a:	f7 f9                	idiv   ecx
c002046c:	83 e8 32             	sub    eax,0x32
c002046f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020472:	e8 58 65 fe ff       	call   c00069cf <iso_readdir>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	85 c0                	test   eax,eax
c002047c:	89 c3                	mov    ebx,eax
c002047e:	75 38                	jne    c00204b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0020480:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0020485:	53                   	push   ebx
c0020486:	53                   	push   ebx
c0020487:	68 42 ee 02 c0       	push   0xc002ee42
c002048c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c0020492:	e8 3d 2d ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c0020497:	83 c4 0c             	add    esp,0xc
c002049a:	68 10 01 00 00       	push   0x110
c002049f:	6a 00                	push   0x0
c00204a1:	57                   	push   edi
c00204a2:	e8 49 00 fe ff       	call   c00004f0 <memset>
c00204a7:	83 c4 10             	add    esp,0x10
c00204aa:	b8 01 00 00 00       	mov    eax,0x1
c00204af:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00204b6:	eb 7e                	jmp    c0020536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00204b8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00204be:	8d 70 08             	lea    esi,[eax+0x8]
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	56                   	push   esi
c00204c5:	e8 b6 00 fe ff       	call   c0000580 <strlen>
c00204ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00204d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204d6:	83 c4 10             	add    esp,0x10
c00204d9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c00204dd:	75 0a                	jne    c00204e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c00204df:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c00204e2:	b8 02 00 00 00       	mov    eax,0x2
c00204e7:	74 05                	je     c00204ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c00204e9:	b8 01 00 00 00       	mov    eax,0x1
c00204ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204f2:	50                   	push   eax
c00204f3:	50                   	push   eax
c00204f4:	56                   	push   esi
c00204f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00204fd:	50                   	push   eax
c00204fe:	e8 4d 01 fe ff       	call   c0000650 <strcpy>
c0020503:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002050a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002050c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0020513:	5a                   	pop    edx
c0020514:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0020519:	59                   	pop    ecx
c002051a:	68 55 ee 02 c0       	push   0xc002ee55
c002051f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c0020525:	e8 aa 2c ff ff       	call   c00131d4 <VgaText::puts(char const*)>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	31 c0                	xor    eax,eax
c002052f:	eb 05                	jmp    c0020536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0020531:	b8 04 00 00 00       	mov    eax,0x4
c0020536:	81 c4 1c 01 00 00    	add    esp,0x11c
c002053c:	5b                   	pop    ebx
c002053d:	5e                   	pop    esi
c002053e:	5f                   	pop    edi
c002053f:	5d                   	pop    ebp
c0020540:	c3                   	ret    

c0020541 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020541:	57                   	push   edi
c0020542:	56                   	push   esi
c0020543:	53                   	push   ebx
c0020544:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020548:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002054c:	39 35 84 95 03 c0    	cmp    DWORD PTR ds:0xc0039584,esi
c0020552:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020556:	0f be cb             	movsx  ecx,bl
c0020559:	75 0b                	jne    c0020566 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c002055b:	0f be 05 28 10 03 c0 	movsx  eax,BYTE PTR ds:0xc0031028
c0020562:	39 c8                	cmp    eax,ecx
c0020564:	74 47                	je     c00205ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	31 d2                	xor    edx,edx
c002056b:	68 a0 95 03 c0       	push   0xc00395a0
c0020570:	6a 01                	push   0x1
c0020572:	52                   	push   edx
c0020573:	56                   	push   esi
c0020574:	ff 34 8d dc 69 03 c0 	push   DWORD PTR [ecx*4-0x3ffc9624]
c002057b:	e8 ee b1 fe ff       	call   c000b76e <LogicalDisk::read(unsigned long long, int, void*)>
c0020580:	83 c4 20             	add    esp,0x20
c0020583:	85 c0                	test   eax,eax
c0020585:	75 0e                	jne    c0020595 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0020587:	89 35 84 95 03 c0    	mov    DWORD PTR ds:0xc0039584,esi
c002058d:	88 1d 28 10 03 c0    	mov    BYTE PTR ds:0xc0031028,bl
c0020593:	eb 18                	jmp    c00205ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0020595:	50                   	push   eax
c0020596:	68 00 08 00 00       	push   0x800
c002059b:	6a 00                	push   0x0
c002059d:	57                   	push   edi
c002059e:	e8 4d ff fd ff       	call   c00004f0 <memset>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	b8 01 00 00 00       	mov    eax,0x1
c00205ab:	eb 0e                	jmp    c00205bb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00205ad:	be a0 95 03 c0       	mov    esi,0xc00395a0
c00205b2:	b9 00 08 00 00       	mov    ecx,0x800
c00205b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205b9:	31 c0                	xor    eax,eax
c00205bb:	5b                   	pop    ebx
c00205bc:	5e                   	pop    esi
c00205bd:	5f                   	pop    edi
c00205be:	c3                   	ret    
c00205bf:	90                   	nop

c00205c0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00205c0:	53                   	push   ebx
c00205c1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00205c7:	c7 05 84 95 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0039584,0xdeadbeef
c00205d1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00205d8:	8d 58 41             	lea    ebx,[eax+0x41]
c00205db:	0f be db             	movsx  ebx,bl
c00205de:	53                   	push   ebx
c00205df:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205e3:	50                   	push   eax
c00205e4:	6a 10                	push   0x10
c00205e6:	e8 56 ff ff ff       	call   c0020541 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	31 d2                	xor    edx,edx
c00205f0:	85 c0                	test   eax,eax
c00205f2:	75 33                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00205f4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00205f9:	75 2c                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00205fb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020600:	75 25                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020602:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020607:	75 1e                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020609:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002060e:	75 17                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020610:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020615:	75 10                	jne    c0020627 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020617:	83 ec 0c             	sub    esp,0xc
c002061a:	53                   	push   ebx
c002061b:	e8 27 66 fe ff       	call   c0006c47 <init_percd>
c0020620:	83 c4 10             	add    esp,0x10
c0020623:	40                   	inc    eax
c0020624:	0f 95 c2             	setne  dl
c0020627:	81 c4 08 08 00 00    	add    esp,0x808
c002062d:	88 d0                	mov    al,dl
c002062f:	5b                   	pop    ebx
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <ISO9660::ISO9660()>:
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020639:	83 ec 0c             	sub    esp,0xc
c002063c:	50                   	push   eax
c002063d:	e8 c8 84 fe ff       	call   c0008b0a <Filesystem::Filesystem()>
c0020642:	83 c4 10             	add    esp,0x10
c0020645:	ba 70 ee 02 c0       	mov    edx,0xc002ee70
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	89 10                	mov    DWORD PTR [eax],edx
c0020650:	e8 04 67 fe ff       	call   c0006d59 <fs_iso9660_init>
c0020655:	90                   	nop
c0020656:	83 c4 0c             	add    esp,0xc
c0020659:	c3                   	ret    

c002065a <SoundCard::beginPlayback()>:
c002065a:	c7 44 24 04 d4 ee 02 c0 	mov    DWORD PTR [esp+0x4],0xc002eed4
c0020662:	e9 31 02 ff ff       	jmp    c0010898 <KePanic(char const*)>
c0020667:	90                   	nop

c0020668 <SoundCard::stopPlayback()>:
c0020668:	c7 44 24 04 d4 ee 02 c0 	mov    DWORD PTR [esp+0x4],0xc002eed4
c0020670:	e9 23 02 ff ff       	jmp    c0010898 <KePanic(char const*)>
c0020675:	90                   	nop

c0020676 <SoundCard::SoundCard(char const*)>:
c0020676:	83 ec 1c             	sub    esp,0x1c
c0020679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002067d:	83 ec 08             	sub    esp,0x8
c0020680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020684:	50                   	push   eax
c0020685:	e8 26 a2 fe ff       	call   c000a8b0 <Device::Device(char const*)>
c002068a:	83 c4 10             	add    esp,0x10
c002068d:	ba 20 ef 02 c0       	mov    edx,0xc002ef20
c0020692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020696:	89 10                	mov    DWORD PTR [eax],edx
c0020698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002069c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00206a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206a7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00206b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206b5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00206bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206c3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00206cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206d1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00206db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00206e3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00206e8:	7f 1a                	jg     c0020704 <SoundCard::SoundCard(char const*)+0x8e>
c00206ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00206f2:	83 c2 54             	add    edx,0x54
c00206f5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00206fd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0020702:	eb df                	jmp    c00206e3 <SoundCard::SoundCard(char const*)+0x6d>
c0020704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020708:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002070f:	90                   	nop
c0020710:	83 c4 1c             	add    esp,0x1c
c0020713:	c3                   	ret    

c0020714 <SoundCard::~SoundCard()>:
c0020714:	83 ec 0c             	sub    esp,0xc
c0020717:	ba 20 ef 02 c0       	mov    edx,0xc002ef20
c002071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020720:	89 10                	mov    DWORD PTR [eax],edx
c0020722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020726:	83 ec 0c             	sub    esp,0xc
c0020729:	50                   	push   eax
c002072a:	e8 21 9f fe ff       	call   c000a650 <Device::~Device()>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	90                   	nop
c0020733:	83 c4 0c             	add    esp,0xc
c0020736:	c3                   	ret    
c0020737:	90                   	nop

c0020738 <SoundCard::~SoundCard()>:
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	83 ec 0c             	sub    esp,0xc
c002073e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020742:	e8 cd ff ff ff       	call   c0020714 <SoundCard::~SoundCard()>
c0020747:	83 c4 10             	add    esp,0x10
c002074a:	83 ec 08             	sub    esp,0x8
c002074d:	68 e8 01 00 00       	push   0x1e8
c0020752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020756:	e8 e1 d8 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002075b:	83 c4 10             	add    esp,0x10
c002075e:	83 c4 0c             	add    esp,0xc
c0020761:	c3                   	ret    

c0020762 <SoundCard::configureRates(int, int, int)>:
c0020762:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020766:	31 c0                	xor    eax,eax
c0020768:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002076f:	75 20                	jne    c0020791 <SoundCard::configureRates(int, int, int)+0x2f>
c0020771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020775:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002077f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0020785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020789:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002078f:	b0 01                	mov    al,0x1
c0020791:	c3                   	ret    

c0020792 <SoundCard::getSamples16(int, short*)>:
c0020792:	55                   	push   ebp
c0020793:	57                   	push   edi
c0020794:	31 ff                	xor    edi,edi
c0020796:	56                   	push   esi
c0020797:	53                   	push   ebx
c0020798:	31 db                	xor    ebx,ebx
c002079a:	83 ec 10             	sub    esp,0x10
c002079d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00207a1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00207a5:	8d 04 36             	lea    eax,[esi+esi*1]
c00207a8:	50                   	push   eax
c00207a9:	6a 00                	push   0x0
c00207ab:	55                   	push   ebp
c00207ac:	e8 3f fd fd ff       	call   c00004f0 <memset>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207b8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c00207bf:	85 c0                	test   eax,eax
c00207c1:	74 1a                	je     c00207dd <SoundCard::getSamples16(int, short*)+0x4b>
c00207c3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00207c7:	75 14                	jne    c00207dd <SoundCard::getSamples16(int, short*)+0x4b>
c00207c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00207cd:	55                   	push   ebp
c00207ce:	56                   	push   esi
c00207cf:	50                   	push   eax
c00207d0:	e8 8f 03 00 00       	call   c0020b64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00207d5:	83 c4 10             	add    esp,0x10
c00207d8:	39 c3                	cmp    ebx,eax
c00207da:	0f 4c d8             	cmovl  ebx,eax
c00207dd:	47                   	inc    edi
c00207de:	83 ff 20             	cmp    edi,0x20
c00207e1:	75 d1                	jne    c00207b4 <SoundCard::getSamples16(int, short*)+0x22>
c00207e3:	83 c4 0c             	add    esp,0xc
c00207e6:	89 d8                	mov    eax,ebx
c00207e8:	5b                   	pop    ebx
c00207e9:	5e                   	pop    esi
c00207ea:	5f                   	pop    edi
c00207eb:	5d                   	pop    ebp
c00207ec:	c3                   	ret    
c00207ed:	90                   	nop

c00207ee <SoundCard::getSamples32(int, int*)>:
c00207ee:	55                   	push   ebp
c00207ef:	57                   	push   edi
c00207f0:	31 ff                	xor    edi,edi
c00207f2:	56                   	push   esi
c00207f3:	31 f6                	xor    esi,esi
c00207f5:	53                   	push   ebx
c00207f6:	83 ec 10             	sub    esp,0x10
c00207f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207fd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020801:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0020805:	c1 e0 02             	shl    eax,0x2
c0020808:	50                   	push   eax
c0020809:	6a 00                	push   0x0
c002080b:	55                   	push   ebp
c002080c:	e8 df fc fd ff       	call   c00004f0 <memset>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002081b:	85 c0                	test   eax,eax
c002081d:	74 1a                	je     c0020839 <SoundCard::getSamples32(int, int*)+0x4b>
c002081f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0020823:	75 14                	jne    c0020839 <SoundCard::getSamples32(int, int*)+0x4b>
c0020825:	53                   	push   ebx
c0020826:	55                   	push   ebp
c0020827:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002082b:	50                   	push   eax
c002082c:	e8 03 04 00 00       	call   c0020c34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0020831:	83 c4 10             	add    esp,0x10
c0020834:	39 c6                	cmp    esi,eax
c0020836:	0f 4c f0             	cmovl  esi,eax
c0020839:	47                   	inc    edi
c002083a:	83 ff 20             	cmp    edi,0x20
c002083d:	75 d5                	jne    c0020814 <SoundCard::getSamples32(int, int*)+0x26>
c002083f:	85 f6                	test   esi,esi
c0020841:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0020848:	75 0f                	jne    c0020859 <SoundCard::getSamples32(int, int*)+0x6b>
c002084a:	85 c0                	test   eax,eax
c002084c:	74 1b                	je     c0020869 <SoundCard::getSamples32(int, int*)+0x7b>
c002084e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020850:	83 ec 0c             	sub    esp,0xc
c0020853:	53                   	push   ebx
c0020854:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0020857:	eb 0d                	jmp    c0020866 <SoundCard::getSamples32(int, int*)+0x78>
c0020859:	85 c0                	test   eax,eax
c002085b:	75 0c                	jne    c0020869 <SoundCard::getSamples32(int, int*)+0x7b>
c002085d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002085f:	83 ec 0c             	sub    esp,0xc
c0020862:	53                   	push   ebx
c0020863:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0020866:	83 c4 10             	add    esp,0x10
c0020869:	83 c4 0c             	add    esp,0xc
c002086c:	89 f0                	mov    eax,esi
c002086e:	5b                   	pop    ebx
c002086f:	5e                   	pop    esi
c0020870:	5f                   	pop    edi
c0020871:	5d                   	pop    ebp
c0020872:	c3                   	ret    
c0020873:	90                   	nop

c0020874 <SoundCard::addChannel(SoundPort*)>:
c0020874:	83 ec 0c             	sub    esp,0xc
c0020877:	31 c0                	xor    eax,eax
c0020879:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002087d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0020885:	74 1b                	je     c00208a2 <SoundCard::addChannel(SoundPort*)+0x2e>
c0020887:	40                   	inc    eax
c0020888:	83 f8 20             	cmp    eax,0x20
c002088b:	75 f0                	jne    c002087d <SoundCard::addChannel(SoundPort*)+0x9>
c002088d:	83 ec 0c             	sub    esp,0xc
c0020890:	68 f9 ee 02 c0       	push   0xc002eef9
c0020895:	e8 fe ff fe ff       	call   c0010898 <KePanic(char const*)>
c002089a:	83 c4 10             	add    esp,0x10
c002089d:	83 c8 ff             	or     eax,0xffffffff
c00208a0:	eb 0b                	jmp    c00208ad <SoundCard::addChannel(SoundPort*)+0x39>
c00208a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00208a6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00208ad:	83 c4 0c             	add    esp,0xc
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <SoundCard::removeChannel(int)>:
c00208b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00208ba:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00208c5:	c3                   	ret    
c00208c6:	66 90                	xchg   ax,ax

c00208c8 <SoundPort::SoundPort(int, int, int, int)>:
c00208c8:	83 ec 0c             	sub    esp,0xc
c00208cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00208d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00208de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208e6:	89 10                	mov    DWORD PTR [eax],edx
c00208e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00208f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0020903:	75 13                	jne    c0020918 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0020905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020909:	8b 00                	mov    eax,DWORD PTR [eax]
c002090b:	05 a0 0f 00 00       	add    eax,0xfa0
c0020910:	d1 e0                	shl    eax,1
c0020912:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020916:	66 90                	xchg   ax,ax
c0020918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002091c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020920:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0020923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020927:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020932:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0020935:	c1 e0 02             	shl    eax,0x2
c0020938:	83 ec 0c             	sub    esp,0xc
c002093b:	50                   	push   eax
c002093c:	e8 03 fb fe ff       	call   c0010444 <malloc>
c0020941:	83 c4 10             	add    esp,0x10
c0020944:	89 c2                	mov    edx,eax
c0020946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002094a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002094d:	90                   	nop
c002094e:	83 c4 0c             	add    esp,0xc
c0020951:	c3                   	ret    
c0020952:	66 90                	xchg   ax,ax

c0020954 <SoundPort::~SoundPort()>:
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002095e:	85 c0                	test   eax,eax
c0020960:	74 1e                	je     c0020980 <SoundPort::~SoundPort()+0x2c>
c0020962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020966:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020969:	83 ec 0c             	sub    esp,0xc
c002096c:	50                   	push   eax
c002096d:	e8 e2 fa fe ff       	call   c0010454 <free>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020979:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020980:	90                   	nop
c0020981:	83 c4 0c             	add    esp,0xc
c0020984:	c3                   	ret    
c0020985:	90                   	nop
c0020986:	66 90                	xchg   ax,ax

c0020988 <SoundPort::unpause()>:
c0020988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002098c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0020990:	c3                   	ret    
c0020991:	90                   	nop
c0020992:	66 90                	xchg   ax,ax

c0020994 <SoundPort::pause()>:
c0020994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020998:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002099c:	c3                   	ret    
c002099d:	90                   	nop
c002099e:	66 90                	xchg   ax,ax

c00209a0 <SoundPort::getBufferUsed()>:
c00209a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00209a7:	c3                   	ret    

c00209a8 <SoundPort::getBufferSize()>:
c00209a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00209af:	c3                   	ret    

c00209b0 <SoundPort::buffer8(signed char*, int)>:
c00209b0:	55                   	push   ebp
c00209b1:	57                   	push   edi
c00209b2:	56                   	push   esi
c00209b3:	53                   	push   ebx
c00209b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00209b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00209bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00209bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00209c2:	74 70                	je     c0020a34 <SoundPort::buffer8(signed char*, int)+0x84>
c00209c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00209c8:	85 c9                	test   ecx,ecx
c00209ca:	7e 68                	jle    c0020a34 <SoundPort::buffer8(signed char*, int)+0x84>
c00209cc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c00209d0:	8d 48 01             	lea    ecx,[eax+0x1]
c00209d3:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00209d6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00209d9:	89 f1                	mov    ecx,esi
c00209db:	c1 e1 18             	shl    ecx,0x18
c00209de:	29 f1                	sub    ecx,esi
c00209e0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00209e3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00209e6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00209e9:	74 51                	je     c0020a3c <SoundPort::buffer8(signed char*, int)+0x8c>
c00209eb:	31 ff                	xor    edi,edi
c00209ed:	eb 25                	jmp    c0020a14 <SoundPort::buffer8(signed char*, int)+0x64>
c00209ef:	90                   	nop
c00209f0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c00209f5:	8d 59 01             	lea    ebx,[ecx+0x1]
c00209f8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c00209fb:	89 f3                	mov    ebx,esi
c00209fd:	c1 e3 18             	shl    ebx,0x18
c0020a00:	29 f3                	sub    ebx,esi
c0020a02:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c0020a05:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0020a08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a0e:	74 1c                	je     c0020a2c <SoundPort::buffer8(signed char*, int)+0x7c>
c0020a10:	89 c7                	mov    edi,eax
c0020a12:	66 90                	xchg   ax,ax
c0020a14:	8d 47 01             	lea    eax,[edi+0x1]
c0020a17:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0020a1b:	75 d3                	jne    c00209f0 <SoundPort::buffer8(signed char*, int)+0x40>
c0020a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a21:	8d 76 00             	lea    esi,[esi+0x0]
c0020a24:	5b                   	pop    ebx
c0020a25:	5e                   	pop    esi
c0020a26:	5f                   	pop    edi
c0020a27:	5d                   	pop    ebp
c0020a28:	c3                   	ret    
c0020a29:	8d 76 00             	lea    esi,[esi+0x0]
c0020a2c:	5b                   	pop    ebx
c0020a2d:	8d 47 02             	lea    eax,[edi+0x2]
c0020a30:	5e                   	pop    esi
c0020a31:	5f                   	pop    edi
c0020a32:	5d                   	pop    ebp
c0020a33:	c3                   	ret    
c0020a34:	5b                   	pop    ebx
c0020a35:	31 c0                	xor    eax,eax
c0020a37:	5e                   	pop    esi
c0020a38:	5f                   	pop    edi
c0020a39:	5d                   	pop    ebp
c0020a3a:	c3                   	ret    
c0020a3b:	90                   	nop
c0020a3c:	b8 01 00 00 00       	mov    eax,0x1
c0020a41:	eb e1                	jmp    c0020a24 <SoundPort::buffer8(signed char*, int)+0x74>
c0020a43:	90                   	nop

c0020a44 <SoundPort::buffer16(short*, int)>:
c0020a44:	55                   	push   ebp
c0020a45:	57                   	push   edi
c0020a46:	56                   	push   esi
c0020a47:	53                   	push   ebx
c0020a48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a4c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020a50:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0020a53:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0020a56:	74 70                	je     c0020ac8 <SoundPort::buffer16(short*, int)+0x84>
c0020a58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020a5c:	85 c9                	test   ecx,ecx
c0020a5e:	7e 68                	jle    c0020ac8 <SoundPort::buffer16(short*, int)+0x84>
c0020a60:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c0020a64:	8d 48 01             	lea    ecx,[eax+0x1]
c0020a67:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020a6a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020a6d:	89 f1                	mov    ecx,esi
c0020a6f:	c1 e1 10             	shl    ecx,0x10
c0020a72:	29 f1                	sub    ecx,esi
c0020a74:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0020a77:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a7a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a7d:	74 51                	je     c0020ad0 <SoundPort::buffer16(short*, int)+0x8c>
c0020a7f:	31 ff                	xor    edi,edi
c0020a81:	eb 25                	jmp    c0020aa8 <SoundPort::buffer16(short*, int)+0x64>
c0020a83:	90                   	nop
c0020a84:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c0020a89:	8d 59 01             	lea    ebx,[ecx+0x1]
c0020a8c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c0020a8f:	89 f3                	mov    ebx,esi
c0020a91:	c1 e3 10             	shl    ebx,0x10
c0020a94:	29 f3                	sub    ebx,esi
c0020a96:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c0020a99:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0020a9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020aa2:	74 1c                	je     c0020ac0 <SoundPort::buffer16(short*, int)+0x7c>
c0020aa4:	89 c7                	mov    edi,eax
c0020aa6:	66 90                	xchg   ax,ax
c0020aa8:	8d 47 01             	lea    eax,[edi+0x1]
c0020aab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0020aaf:	75 d3                	jne    c0020a84 <SoundPort::buffer16(short*, int)+0x40>
c0020ab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ab8:	5b                   	pop    ebx
c0020ab9:	5e                   	pop    esi
c0020aba:	5f                   	pop    edi
c0020abb:	5d                   	pop    ebp
c0020abc:	c3                   	ret    
c0020abd:	8d 76 00             	lea    esi,[esi+0x0]
c0020ac0:	5b                   	pop    ebx
c0020ac1:	8d 47 02             	lea    eax,[edi+0x2]
c0020ac4:	5e                   	pop    esi
c0020ac5:	5f                   	pop    edi
c0020ac6:	5d                   	pop    ebp
c0020ac7:	c3                   	ret    
c0020ac8:	5b                   	pop    ebx
c0020ac9:	31 c0                	xor    eax,eax
c0020acb:	5e                   	pop    esi
c0020acc:	5f                   	pop    edi
c0020acd:	5d                   	pop    ebp
c0020ace:	c3                   	ret    
c0020acf:	90                   	nop
c0020ad0:	b8 01 00 00 00       	mov    eax,0x1
c0020ad5:	eb e1                	jmp    c0020ab8 <SoundPort::buffer16(short*, int)+0x74>
c0020ad7:	90                   	nop

c0020ad8 <SoundPort::buffer32(int*, int)>:
c0020ad8:	55                   	push   ebp
c0020ad9:	57                   	push   edi
c0020ada:	56                   	push   esi
c0020adb:	53                   	push   ebx
c0020adc:	83 ec 04             	sub    esp,0x4
c0020adf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ae7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020aeb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020aee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020af1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020af4:	74 5a                	je     c0020b50 <SoundPort::buffer32(int*, int)+0x78>
c0020af6:	85 c0                	test   eax,eax
c0020af8:	7e 56                	jle    c0020b50 <SoundPort::buffer32(int*, int)+0x78>
c0020afa:	8d 71 01             	lea    esi,[ecx+0x1]
c0020afd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020b00:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0020b03:	8b 37                	mov    esi,DWORD PTR [edi]
c0020b05:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0020b08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020b0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020b0e:	74 4c                	je     c0020b5c <SoundPort::buffer32(int*, int)+0x84>
c0020b10:	31 f6                	xor    esi,esi
c0020b12:	eb 1c                	jmp    c0020b30 <SoundPort::buffer32(int*, int)+0x58>
c0020b14:	8d 69 01             	lea    ebp,[ecx+0x1]
c0020b17:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0020b1a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0020b1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0020b20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0020b24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020b27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020b2a:	74 18                	je     c0020b44 <SoundPort::buffer32(int*, int)+0x6c>
c0020b2c:	89 de                	mov    esi,ebx
c0020b2e:	66 90                	xchg   ax,ax
c0020b30:	8d 5e 01             	lea    ebx,[esi+0x1]
c0020b33:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0020b36:	75 dc                	jne    c0020b14 <SoundPort::buffer32(int*, int)+0x3c>
c0020b38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b3b:	90                   	nop
c0020b3c:	83 c4 04             	add    esp,0x4
c0020b3f:	5b                   	pop    ebx
c0020b40:	5e                   	pop    esi
c0020b41:	5f                   	pop    edi
c0020b42:	5d                   	pop    ebp
c0020b43:	c3                   	ret    
c0020b44:	8d 46 02             	lea    eax,[esi+0x2]
c0020b47:	83 c4 04             	add    esp,0x4
c0020b4a:	5b                   	pop    ebx
c0020b4b:	5e                   	pop    esi
c0020b4c:	5f                   	pop    edi
c0020b4d:	5d                   	pop    ebp
c0020b4e:	c3                   	ret    
c0020b4f:	90                   	nop
c0020b50:	83 c4 04             	add    esp,0x4
c0020b53:	31 c0                	xor    eax,eax
c0020b55:	5b                   	pop    ebx
c0020b56:	5e                   	pop    esi
c0020b57:	5f                   	pop    edi
c0020b58:	5d                   	pop    ebp
c0020b59:	c3                   	ret    
c0020b5a:	66 90                	xchg   ax,ax
c0020b5c:	b8 01 00 00 00       	mov    eax,0x1
c0020b61:	eb d9                	jmp    c0020b3c <SoundPort::buffer32(int*, int)+0x64>
c0020b63:	90                   	nop

c0020b64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0020b64:	55                   	push   ebp
c0020b65:	57                   	push   edi
c0020b66:	56                   	push   esi
c0020b67:	53                   	push   ebx
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020b6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020b73:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020b77:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020b7b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0020b81:	39 03                	cmp    DWORD PTR [ebx],eax
c0020b83:	74 13                	je     c0020b98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0020b85:	83 ec 0c             	sub    esp,0xc
c0020b88:	68 4c ef 02 c0       	push   0xc002ef4c
c0020b8d:	e8 06 fd fe ff       	call   c0010898 <KePanic(char const*)>
c0020b92:	83 c4 10             	add    esp,0x10
c0020b95:	8d 76 00             	lea    esi,[esi+0x0]
c0020b98:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0020b9e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020ba1:	74 11                	je     c0020bb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0020ba3:	83 ec 0c             	sub    esp,0xc
c0020ba6:	68 8b ef 02 c0       	push   0xc002ef8b
c0020bab:	e8 e8 fc fe ff       	call   c0010898 <KePanic(char const*)>
c0020bb0:	83 c4 10             	add    esp,0x10
c0020bb3:	90                   	nop
c0020bb4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0020bba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0020bbd:	74 11                	je     c0020bd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0020bbf:	83 ec 0c             	sub    esp,0xc
c0020bc2:	68 8b ef 02 c0       	push   0xc002ef8b
c0020bc7:	e8 cc fc fe ff       	call   c0010898 <KePanic(char const*)>
c0020bcc:	83 c4 10             	add    esp,0x10
c0020bcf:	90                   	nop
c0020bd0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0020bd3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0020bd7:	85 f6                	test   esi,esi
c0020bd9:	7e 2d                	jle    c0020c08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0020bdb:	31 c0                	xor    eax,eax
c0020bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0020be0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020be3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0020be6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0020bec:	85 c9                	test   ecx,ecx
c0020bee:	0f 49 d1             	cmovns edx,ecx
c0020bf1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0020bf5:	c1 fa 0f             	sar    edx,0xf
c0020bf8:	01 d1                	add    ecx,edx
c0020bfa:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0020bfe:	83 c0 01             	add    eax,0x1
c0020c01:	39 f0                	cmp    eax,esi
c0020c03:	75 db                	jne    c0020be0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0020c05:	8d 76 00             	lea    esi,[esi+0x0]
c0020c08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020c0b:	83 ec 04             	sub    esp,0x4
c0020c0e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020c11:	29 f0                	sub    eax,esi
c0020c13:	c1 e0 02             	shl    eax,0x2
c0020c16:	50                   	push   eax
c0020c17:	8d 04 b2             	lea    eax,[edx+esi*4]
c0020c1a:	50                   	push   eax
c0020c1b:	52                   	push   edx
c0020c1c:	e8 af f7 fd ff       	call   c00003d0 <memmove>
c0020c21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020c24:	29 f0                	sub    eax,esi
c0020c26:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0020c29:	83 c4 1c             	add    esp,0x1c
c0020c2c:	89 f0                	mov    eax,esi
c0020c2e:	5b                   	pop    ebx
c0020c2f:	5e                   	pop    esi
c0020c30:	5f                   	pop    edi
c0020c31:	5d                   	pop    ebp
c0020c32:	c3                   	ret    
c0020c33:	90                   	nop

c0020c34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0020c34:	55                   	push   ebp
c0020c35:	57                   	push   edi
c0020c36:	56                   	push   esi
c0020c37:	53                   	push   ebx
c0020c38:	83 ec 0c             	sub    esp,0xc
c0020c3b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020c3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020c43:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0020c47:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020c4b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0020c51:	39 03                	cmp    DWORD PTR [ebx],eax
c0020c53:	74 13                	je     c0020c68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0020c55:	83 ec 0c             	sub    esp,0xc
c0020c58:	68 6c ef 02 c0       	push   0xc002ef6c
c0020c5d:	e8 36 fc fe ff       	call   c0010898 <KePanic(char const*)>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	8d 76 00             	lea    esi,[esi+0x0]
c0020c68:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0020c6e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020c71:	74 11                	je     c0020c84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0020c73:	83 ec 0c             	sub    esp,0xc
c0020c76:	68 a7 ef 02 c0       	push   0xc002efa7
c0020c7b:	e8 18 fc fe ff       	call   c0010898 <KePanic(char const*)>
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	90                   	nop
c0020c84:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0020c8a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0020c8d:	74 11                	je     c0020ca0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0020c8f:	83 ec 0c             	sub    esp,0xc
c0020c92:	68 a7 ef 02 c0       	push   0xc002efa7
c0020c97:	e8 fc fb fe ff       	call   c0010898 <KePanic(char const*)>
c0020c9c:	83 c4 10             	add    esp,0x10
c0020c9f:	90                   	nop
c0020ca0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0020ca3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0020ca7:	85 ff                	test   edi,edi
c0020ca9:	7e 21                	jle    c0020ccc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0020cab:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0020cb2:	31 c0                	xor    eax,eax
c0020cb4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020cb7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0020cba:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0020cbd:	01 d5                	add    ebp,edx
c0020cbf:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0020cc2:	83 c0 04             	add    eax,0x4
c0020cc5:	39 c1                	cmp    ecx,eax
c0020cc7:	75 eb                	jne    c0020cb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0020cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0020ccc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020ccf:	83 ec 04             	sub    esp,0x4
c0020cd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020cd5:	29 f8                	sub    eax,edi
c0020cd7:	c1 e0 02             	shl    eax,0x2
c0020cda:	50                   	push   eax
c0020cdb:	8d 04 ba             	lea    eax,[edx+edi*4]
c0020cde:	50                   	push   eax
c0020cdf:	52                   	push   edx
c0020ce0:	e8 eb f6 fd ff       	call   c00003d0 <memmove>
c0020ce5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020ce8:	29 f8                	sub    eax,edi
c0020cea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0020ced:	83 c4 1c             	add    esp,0x1c
c0020cf0:	89 f8                	mov    eax,edi
c0020cf2:	5b                   	pop    ebx
c0020cf3:	5e                   	pop    esi
c0020cf4:	5f                   	pop    edi
c0020cf5:	5d                   	pop    ebp
c0020cf6:	c3                   	ret    
c0020cf7:	90                   	nop

c0020cf8 <PCI::open(int, int, void*)>:
c0020cf8:	83 ec 18             	sub    esp,0x18
c0020cfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020d03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d09:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d0b:	50                   	push   eax
c0020d0c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020d0f:	31 c0                	xor    eax,eax
c0020d11:	83 c4 1c             	add    esp,0x1c
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <PCI::close(int, int, void*)>:
c0020d16:	31 c0                	xor    eax,eax
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <PCI::PCI()>:
c0020d1a:	83 ec 0c             	sub    esp,0xc
c0020d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d21:	83 ec 08             	sub    esp,0x8
c0020d24:	68 0a b1 02 c0       	push   0xc002b10a
c0020d29:	50                   	push   eax
c0020d2a:	e8 8d 89 fe ff       	call   c00096bc <Bus::Bus(char const*)>
c0020d2f:	83 c4 10             	add    esp,0x10
c0020d32:	ba c4 f0 02 c0       	mov    edx,0xc002f0c4
c0020d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3b:	89 10                	mov    DWORD PTR [eax],edx
c0020d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d41:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0020d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4f:	a3 a0 9d 03 c0       	mov    ds:0xc0039da0,eax
c0020d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d5e:	0f b6 d0             	movzx  edx,al
c0020d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d65:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d76:	0f b6 d0             	movzx  edx,al
c0020d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d7d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d8c:	8d 50 01             	lea    edx,[eax+0x1]
c0020d8f:	88 d1                	mov    cl,dl
c0020d91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d95:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020d9b:	0f b6 d0             	movzx  edx,al
c0020d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020da6:	83 c9 c0             	or     ecx,0xffffffc0
c0020da9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020dad:	90                   	nop
c0020dae:	83 c4 0c             	add    esp,0xc
c0020db1:	c3                   	ret    

c0020db2 <PCI::readBAR8(unsigned int, int)>:
c0020db2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dba:	f6 c2 01             	test   dl,0x1
c0020dbd:	74 07                	je     c0020dc6 <PCI::readBAR8(unsigned int, int)+0x14>
c0020dbf:	83 e2 fc             	and    edx,0xfffffffc
c0020dc2:	01 c2                	add    edx,eax
c0020dc4:	ec                   	in     al,dx
c0020dc5:	c3                   	ret    
c0020dc6:	83 e2 f0             	and    edx,0xfffffff0
c0020dc9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0020dcc:	c3                   	ret    
c0020dcd:	90                   	nop

c0020dce <PCI::readBAR16(unsigned int, int)>:
c0020dce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dd6:	f6 c2 01             	test   dl,0x1
c0020dd9:	74 08                	je     c0020de3 <PCI::readBAR16(unsigned int, int)+0x15>
c0020ddb:	83 e2 fc             	and    edx,0xfffffffc
c0020dde:	01 c2                	add    edx,eax
c0020de0:	66 ed                	in     ax,dx
c0020de2:	c3                   	ret    
c0020de3:	83 e2 f0             	and    edx,0xfffffff0
c0020de6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0020dea:	c3                   	ret    
c0020deb:	90                   	nop

c0020dec <PCI::readBAR32(unsigned int, int)>:
c0020dec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020df4:	f6 c2 01             	test   dl,0x1
c0020df7:	74 07                	je     c0020e00 <PCI::readBAR32(unsigned int, int)+0x14>
c0020df9:	83 e2 fc             	and    edx,0xfffffffc
c0020dfc:	01 c2                	add    edx,eax
c0020dfe:	ed                   	in     eax,dx
c0020dff:	c3                   	ret    
c0020e00:	83 e2 f0             	and    edx,0xfffffff0
c0020e03:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0020e06:	c3                   	ret    
c0020e07:	90                   	nop

c0020e08 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0020e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e14:	f6 c2 01             	test   dl,0x1
c0020e17:	74 07                	je     c0020e20 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0020e19:	83 e2 fc             	and    edx,0xfffffffc
c0020e1c:	01 ca                	add    edx,ecx
c0020e1e:	ee                   	out    dx,al
c0020e1f:	c3                   	ret    
c0020e20:	83 e2 f0             	and    edx,0xfffffff0
c0020e23:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0020e26:	c3                   	ret    
c0020e27:	90                   	nop

c0020e28 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0020e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e34:	f6 c2 01             	test   dl,0x1
c0020e37:	74 08                	je     c0020e41 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0020e39:	83 e2 fc             	and    edx,0xfffffffc
c0020e3c:	01 ca                	add    edx,ecx
c0020e3e:	66 ef                	out    dx,ax
c0020e40:	c3                   	ret    
c0020e41:	83 e2 f0             	and    edx,0xfffffff0
c0020e44:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0020e48:	c3                   	ret    
c0020e49:	90                   	nop

c0020e4a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0020e4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e56:	f6 c2 01             	test   dl,0x1
c0020e59:	74 07                	je     c0020e62 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0020e5b:	83 e2 fc             	and    edx,0xfffffffc
c0020e5e:	01 ca                	add    edx,ecx
c0020e60:	ef                   	out    dx,eax
c0020e61:	c3                   	ret    
c0020e62:	83 e2 f0             	and    edx,0xfffffff0
c0020e65:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0020e68:	c3                   	ret    
c0020e69:	90                   	nop

c0020e6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020e6a:	55                   	push   ebp
c0020e6b:	57                   	push   edi
c0020e6c:	56                   	push   esi
c0020e6d:	53                   	push   ebx
c0020e6e:	83 ec 0c             	sub    esp,0xc
c0020e71:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c0020e76:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0020e7a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020e7e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020e82:	83 fe 07             	cmp    esi,0x7
c0020e85:	76 10                	jbe    c0020e97 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0020e87:	83 ec 0c             	sub    esp,0xc
c0020e8a:	68 c3 ef 02 c0       	push   0xc002efc3
c0020e8f:	e8 04 fa fe ff       	call   c0010898 <KePanic(char const*)>
c0020e94:	83 c4 10             	add    esp,0x10
c0020e97:	0f b6 db             	movzx  ebx,bl
c0020e9a:	83 fb 0f             	cmp    ebx,0xf
c0020e9d:	76 10                	jbe    c0020eaf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c0020e9f:	83 ec 0c             	sub    esp,0xc
c0020ea2:	68 f3 ef 02 c0       	push   0xc002eff3
c0020ea7:	e8 ec f9 fe ff       	call   c0010898 <KePanic(char const*)>
c0020eac:	83 c4 10             	add    esp,0x10
c0020eaf:	8d 04 36             	lea    eax,[esi+esi*1]
c0020eb2:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020eb7:	83 c8 f0             	or     eax,0xfffffff0
c0020eba:	ee                   	out    dx,al
c0020ebb:	ba fa 0c 00 00       	mov    edx,0xcfa
c0020ec0:	89 e8                	mov    eax,ebp
c0020ec2:	ee                   	out    dx,al
c0020ec3:	89 f9                	mov    ecx,edi
c0020ec5:	89 d8                	mov    eax,ebx
c0020ec7:	0f b6 d9             	movzx  ebx,cl
c0020eca:	83 c4 0c             	add    esp,0xc
c0020ecd:	c1 e0 08             	shl    eax,0x8
c0020ed0:	83 e3 fc             	and    ebx,0xfffffffc
c0020ed3:	09 d8                	or     eax,ebx
c0020ed5:	5b                   	pop    ebx
c0020ed6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0020edb:	5e                   	pop    esi
c0020edc:	5f                   	pop    edi
c0020edd:	5d                   	pop    ebp
c0020ede:	c3                   	ret    
c0020edf:	90                   	nop

c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020ee0:	57                   	push   edi
c0020ee1:	56                   	push   esi
c0020ee2:	53                   	push   ebx
c0020ee3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020ee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020eeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020ef3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0020ef9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020efd:	83 ff 01             	cmp    edi,0x1
c0020f00:	75 3f                	jne    c0020f41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c0020f02:	89 de                	mov    esi,ebx
c0020f04:	0f b6 c0             	movzx  eax,al
c0020f07:	c1 e0 10             	shl    eax,0x10
c0020f0a:	81 e6 fc 00 00 00    	and    esi,0xfc
c0020f10:	0f b6 c9             	movzx  ecx,cl
c0020f13:	09 f0                	or     eax,esi
c0020f15:	c1 e1 08             	shl    ecx,0x8
c0020f18:	0f b6 d2             	movzx  edx,dl
c0020f1b:	c1 e2 0b             	shl    edx,0xb
c0020f1e:	09 c8                	or     eax,ecx
c0020f20:	09 d0                	or     eax,edx
c0020f22:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020f27:	0d 00 00 00 80       	or     eax,0x80000000
c0020f2c:	ef                   	out    dx,eax
c0020f2d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020f32:	ed                   	in     eax,dx
c0020f33:	83 e3 02             	and    ebx,0x2
c0020f36:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0020f3d:	d3 e8                	shr    eax,cl
c0020f3f:	eb 44                	jmp    c0020f85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020f41:	83 ff 02             	cmp    edi,0x2
c0020f44:	75 2d                	jne    c0020f73 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c0020f46:	83 ec 0c             	sub    esp,0xc
c0020f49:	0f b6 fb             	movzx  edi,bl
c0020f4c:	57                   	push   edi
c0020f4d:	0f b6 c9             	movzx  ecx,cl
c0020f50:	51                   	push   ecx
c0020f51:	0f b6 d2             	movzx  edx,dl
c0020f54:	52                   	push   edx
c0020f55:	0f b6 c0             	movzx  eax,al
c0020f58:	50                   	push   eax
c0020f59:	56                   	push   esi
c0020f5a:	e8 0b ff ff ff       	call   c0020e6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f5f:	89 c2                	mov    edx,eax
c0020f61:	ed                   	in     eax,dx
c0020f62:	83 e3 02             	and    ebx,0x2
c0020f65:	83 c4 20             	add    esp,0x20
c0020f68:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0020f6f:	d3 e8                	shr    eax,cl
c0020f71:	eb 12                	jmp    c0020f85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020f73:	83 ec 0c             	sub    esp,0xc
c0020f76:	68 56 b1 02 c0       	push   0xc002b156
c0020f7b:	e8 18 f9 fe ff       	call   c0010898 <KePanic(char const*)>
c0020f80:	83 c4 10             	add    esp,0x10
c0020f83:	31 c0                	xor    eax,eax
c0020f85:	5b                   	pop    ebx
c0020f86:	5e                   	pop    esi
c0020f87:	5f                   	pop    edi
c0020f88:	c3                   	ret    
c0020f89:	90                   	nop

c0020f8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020f8a:	83 ec 18             	sub    esp,0x18
c0020f8d:	6a 00                	push   0x0
c0020f8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f94:	50                   	push   eax
c0020f95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f9a:	50                   	push   eax
c0020f9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fa0:	50                   	push   eax
c0020fa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020fa5:	e8 36 ff ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020faa:	83 c4 2c             	add    esp,0x2c
c0020fad:	c3                   	ret    

c0020fae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020fae:	83 ec 18             	sub    esp,0x18
c0020fb1:	6a 0e                	push   0xe
c0020fb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fb8:	50                   	push   eax
c0020fb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fbe:	50                   	push   eax
c0020fbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fc4:	50                   	push   eax
c0020fc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020fc9:	e8 12 ff ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020fce:	83 c4 2c             	add    esp,0x2c
c0020fd1:	0f b6 c0             	movzx  eax,al
c0020fd4:	c3                   	ret    
c0020fd5:	90                   	nop

c0020fd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020fd6:	55                   	push   ebp
c0020fd7:	57                   	push   edi
c0020fd8:	56                   	push   esi
c0020fd9:	53                   	push   ebx
c0020fda:	83 ec 18             	sub    esp,0x18
c0020fdd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0020fe2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0020fe7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0020fec:	6a 0a                	push   0xa
c0020fee:	56                   	push   esi
c0020fef:	55                   	push   ebp
c0020ff0:	57                   	push   edi
c0020ff1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ff5:	e8 e6 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ffa:	83 c4 14             	add    esp,0x14
c0020ffd:	6a 0a                	push   0xa
c0020fff:	56                   	push   esi
c0021000:	55                   	push   ebp
c0021001:	57                   	push   edi
c0021002:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021006:	89 c3                	mov    ebx,eax
c0021008:	0f b6 db             	movzx  ebx,bl
c002100b:	e8 d0 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021010:	83 c4 2c             	add    esp,0x2c
c0021013:	25 00 ff 00 00       	and    eax,0xff00
c0021018:	09 d8                	or     eax,ebx
c002101a:	5b                   	pop    ebx
c002101b:	5e                   	pop    esi
c002101c:	5f                   	pop    edi
c002101d:	5d                   	pop    ebp
c002101e:	c3                   	ret    
c002101f:	90                   	nop

c0021020 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021020:	83 ec 18             	sub    esp,0x18
c0021023:	6a 08                	push   0x8
c0021025:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002102a:	50                   	push   eax
c002102b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021030:	50                   	push   eax
c0021031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021036:	50                   	push   eax
c0021037:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002103b:	e8 a0 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021040:	83 c4 2c             	add    esp,0x2c
c0021043:	0f b6 c4             	movzx  eax,ah
c0021046:	c3                   	ret    
c0021047:	90                   	nop

c0021048 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021048:	83 ec 18             	sub    esp,0x18
c002104b:	6a 08                	push   0x8
c002104d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021052:	50                   	push   eax
c0021053:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021058:	50                   	push   eax
c0021059:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002105e:	50                   	push   eax
c002105f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021063:	e8 78 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021068:	83 c4 2c             	add    esp,0x2c
c002106b:	c3                   	ret    

c002106c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002106c:	83 ec 18             	sub    esp,0x18
c002106f:	6a 3c                	push   0x3c
c0021071:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021076:	50                   	push   eax
c0021077:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002107c:	50                   	push   eax
c002107d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021082:	50                   	push   eax
c0021083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021087:	e8 54 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002108c:	83 c4 2c             	add    esp,0x2c
c002108f:	c3                   	ret    

c0021090 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021090:	83 ec 18             	sub    esp,0x18
c0021093:	6a 18                	push   0x18
c0021095:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002109a:	50                   	push   eax
c002109b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00210a0:	50                   	push   eax
c00210a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00210a6:	50                   	push   eax
c00210a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00210ab:	e8 30 fe ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00210b0:	83 c4 2c             	add    esp,0x2c
c00210b3:	0f b6 c4             	movzx  eax,ah
c00210b6:	c3                   	ret    
c00210b7:	90                   	nop

c00210b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00210b8:	55                   	push   ebp
c00210b9:	57                   	push   edi
c00210ba:	56                   	push   esi
c00210bb:	53                   	push   ebx
c00210bc:	83 ec 28             	sub    esp,0x28
c00210bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00210c3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00210c8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00210cd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00210d2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00210d9:	8d 43 12             	lea    eax,[ebx+0x12]
c00210dc:	83 c3 10             	add    ebx,0x10
c00210df:	0f b6 c0             	movzx  eax,al
c00210e2:	0f b6 db             	movzx  ebx,bl
c00210e5:	50                   	push   eax
c00210e6:	51                   	push   ecx
c00210e7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00210eb:	57                   	push   edi
c00210ec:	55                   	push   ebp
c00210ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00210f1:	e8 ea fd ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00210f6:	83 c4 14             	add    esp,0x14
c00210f9:	53                   	push   ebx
c00210fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00210fe:	51                   	push   ecx
c00210ff:	89 c6                	mov    esi,eax
c0021101:	57                   	push   edi
c0021102:	55                   	push   ebp
c0021103:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021107:	c1 e6 10             	shl    esi,0x10
c002110a:	e8 d1 fd ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002110f:	83 c4 3c             	add    esp,0x3c
c0021112:	5b                   	pop    ebx
c0021113:	0f b7 c0             	movzx  eax,ax
c0021116:	09 f0                	or     eax,esi
c0021118:	5e                   	pop    esi
c0021119:	5f                   	pop    edi
c002111a:	5d                   	pop    ebp
c002111b:	c3                   	ret    

c002111c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002111c:	55                   	push   ebp
c002111d:	57                   	push   edi
c002111e:	56                   	push   esi
c002111f:	53                   	push   ebx
c0021120:	83 ec 0c             	sub    esp,0xc
c0021123:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002112b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002112f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021133:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c0021139:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002113d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021141:	83 f9 01             	cmp    ecx,0x1
c0021144:	75 5d                	jne    c00211a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c0021146:	0f b6 c8             	movzx  ecx,al
c0021149:	89 f0                	mov    eax,esi
c002114b:	25 fc 00 00 00       	and    eax,0xfc
c0021150:	0f b6 d2             	movzx  edx,dl
c0021153:	c1 e1 10             	shl    ecx,0x10
c0021156:	c1 e2 0b             	shl    edx,0xb
c0021159:	09 c1                	or     ecx,eax
c002115b:	89 f8                	mov    eax,edi
c002115d:	0f b6 f8             	movzx  edi,al
c0021160:	c1 e7 08             	shl    edi,0x8
c0021163:	09 f9                	or     ecx,edi
c0021165:	09 d1                	or     ecx,edx
c0021167:	ba f8 0c 00 00       	mov    edx,0xcf8
c002116c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021172:	89 c8                	mov    eax,ecx
c0021174:	ef                   	out    dx,eax
c0021175:	ba fc 0c 00 00       	mov    edx,0xcfc
c002117a:	ed                   	in     eax,dx
c002117b:	83 e6 02             	and    esi,0x2
c002117e:	0f b7 db             	movzx  ebx,bx
c0021181:	74 0a                	je     c002118d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c0021183:	c1 e3 10             	shl    ebx,0x10
c0021186:	0f b7 d0             	movzx  edx,ax
c0021189:	09 d3                	or     ebx,edx
c002118b:	eb 05                	jmp    c0021192 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002118d:	66 31 c0             	xor    ax,ax
c0021190:	09 c3                	or     ebx,eax
c0021192:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021197:	89 c8                	mov    eax,ecx
c0021199:	ef                   	out    dx,eax
c002119a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002119f:	89 d8                	mov    eax,ebx
c00211a1:	eb 41                	jmp    c00211e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c00211a3:	83 f9 02             	cmp    ecx,0x2
c00211a6:	75 45                	jne    c00211ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c00211a8:	89 f1                	mov    ecx,esi
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	0f b6 f1             	movzx  esi,cl
c00211b0:	89 f9                	mov    ecx,edi
c00211b2:	56                   	push   esi
c00211b3:	0f b6 f9             	movzx  edi,cl
c00211b6:	57                   	push   edi
c00211b7:	0f b6 d2             	movzx  edx,dl
c00211ba:	52                   	push   edx
c00211bb:	0f b6 c0             	movzx  eax,al
c00211be:	50                   	push   eax
c00211bf:	55                   	push   ebp
c00211c0:	e8 a5 fc ff ff       	call   c0020e6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00211c5:	89 c2                	mov    edx,eax
c00211c7:	ed                   	in     eax,dx
c00211c8:	83 c4 20             	add    esp,0x20
c00211cb:	f6 c2 02             	test   dl,0x2
c00211ce:	0f b7 db             	movzx  ebx,bx
c00211d1:	74 0c                	je     c00211df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c00211d3:	0f b7 c8             	movzx  ecx,ax
c00211d6:	89 d8                	mov    eax,ebx
c00211d8:	c1 e0 10             	shl    eax,0x10
c00211db:	09 c8                	or     eax,ecx
c00211dd:	eb 05                	jmp    c00211e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c00211df:	66 31 c0             	xor    ax,ax
c00211e2:	09 d8                	or     eax,ebx
c00211e4:	ef                   	out    dx,eax
c00211e5:	83 c4 0c             	add    esp,0xc
c00211e8:	5b                   	pop    ebx
c00211e9:	5e                   	pop    esi
c00211ea:	5f                   	pop    edi
c00211eb:	5d                   	pop    ebp
c00211ec:	c3                   	ret    
c00211ed:	c7 44 24 20 56 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b156
c00211f5:	83 c4 0c             	add    esp,0xc
c00211f8:	5b                   	pop    ebx
c00211f9:	5e                   	pop    esi
c00211fa:	5f                   	pop    edi
c00211fb:	5d                   	pop    ebp
c00211fc:	e9 97 f6 fe ff       	jmp    c0010898 <KePanic(char const*)>
c0021201:	90                   	nop

c0021202 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0021202:	55                   	push   ebp
c0021203:	57                   	push   edi
c0021204:	56                   	push   esi
c0021205:	53                   	push   ebx
c0021206:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002120c:	80 3d ac 9d 03 c0 00 	cmp    BYTE PTR ds:0xc0039dac,0x0
c0021213:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002121a:	0f 85 bd 00 00 00    	jne    c00212dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	68 14 01 00 00       	push   0x114
c0021228:	e8 17 f2 fe ff       	call   c0010444 <malloc>
c002122d:	83 c4 0c             	add    esp,0xc
c0021230:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0021236:	68 23 f0 02 c0       	push   0xc002f023
c002123b:	50                   	push   eax
c002123c:	89 c3                	mov    ebx,eax
c002123e:	e8 9d 7c fe ff       	call   c0008ee0 <File::File(char const*, Process*)>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	85 db                	test   ebx,ebx
c0021248:	0f 84 6b 02 00 00    	je     c00214b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002124e:	57                   	push   edi
c002124f:	57                   	push   edi
c0021250:	6a 01                	push   0x1
c0021252:	53                   	push   ebx
c0021253:	e8 a6 7c fe ff       	call   c0008efe <File::open(FileOpenMode)>
c0021258:	83 c4 10             	add    esp,0x10
c002125b:	85 c0                	test   eax,eax
c002125d:	0f 85 56 02 00 00    	jne    c00214b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c0021263:	52                   	push   edx
c0021264:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0021268:	50                   	push   eax
c0021269:	8d 44 24 48          	lea    eax,[esp+0x48]
c002126d:	50                   	push   eax
c002126e:	53                   	push   ebx
c002126f:	e8 8c 7f fe ff       	call   c0009200 <File::stat(unsigned long long*, bool*)>
c0021274:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021278:	40                   	inc    eax
c0021279:	89 04 24             	mov    DWORD PTR [esp],eax
c002127c:	e8 c3 f1 fe ff       	call   c0010444 <malloc>
c0021281:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0021285:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0021289:	59                   	pop    ecx
c002128a:	a3 a8 9d 03 c0       	mov    ds:0xc0039da8,eax
c002128f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021291:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c0021295:	51                   	push   ecx
c0021296:	50                   	push   eax
c0021297:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002129b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002129f:	53                   	push   ebx
c00212a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00212a3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00212a7:	83 c4 20             	add    esp,0x20
c00212aa:	89 c8                	mov    eax,ecx
c00212ac:	99                   	cdq    
c00212ad:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c00212b1:	0f 85 02 02 00 00    	jne    c00214b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c00212b7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c00212bb:	0f 85 f8 01 00 00    	jne    c00214b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c00212c1:	83 ec 0c             	sub    esp,0xc
c00212c4:	53                   	push   ebx
c00212c5:	e8 92 7c fe ff       	call   c0008f5c <File::close()>
c00212ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00212ce:	83 c4 10             	add    esp,0x10
c00212d1:	c6 05 ac 9d 03 c0 01 	mov    BYTE PTR ds:0xc0039dac,0x1
c00212d8:	a3 a4 9d 03 c0       	mov    ds:0xc0039da4,eax
c00212dd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00212e5:	31 c9                	xor    ecx,ecx
c00212e7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c00212ee:	8b 2d a4 9d 03 c0    	mov    ebp,DWORD PTR ds:0xc0039da4
c00212f4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00212fb:	8b 15 a8 9d 03 c0    	mov    edx,DWORD PTR ds:0xc0039da8
c0021301:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0021306:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002130e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0021313:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002131b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002131f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c0021327:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002132b:	39 cd                	cmp    ebp,ecx
c002132d:	0f 8e 86 01 00 00    	jle    c00214b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c0021333:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c0021336:	d4 40                	aam    0x40
c0021338:	d5 39                	aad    0x39
c002133a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002133e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c0021342:	d4 40                	aam    0x40
c0021344:	d5 39                	aad    0x39
c0021346:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002134a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002134e:	d4 40                	aam    0x40
c0021350:	d5 39                	aad    0x39
c0021352:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0021356:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002135a:	d4 40                	aam    0x40
c002135c:	d5 39                	aad    0x39
c002135e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0021362:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c0021366:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002136a:	3c 56                	cmp    al,0x56
c002136c:	74 47                	je     c00213b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002136e:	d4 40                	aam    0x40
c0021370:	d5 39                	aad    0x39
c0021372:	8d 58 d0             	lea    ebx,[eax-0x30]
c0021375:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c0021379:	0f b6 db             	movzx  ebx,bl
c002137c:	c1 e3 04             	shl    ebx,0x4
c002137f:	d4 40                	aam    0x40
c0021381:	d5 39                	aad    0x39
c0021383:	83 e8 30             	sub    eax,0x30
c0021386:	0f b6 c0             	movzx  eax,al
c0021389:	09 c3                	or     ebx,eax
c002138b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002138f:	c1 e3 04             	shl    ebx,0x4
c0021392:	d4 40                	aam    0x40
c0021394:	d5 39                	aad    0x39
c0021396:	83 e8 30             	sub    eax,0x30
c0021399:	0f b6 c0             	movzx  eax,al
c002139c:	09 c3                	or     ebx,eax
c002139e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c00213a2:	c1 e3 04             	shl    ebx,0x4
c00213a5:	d4 40                	aam    0x40
c00213a7:	d5 39                	aad    0x39
c00213a9:	83 e8 30             	sub    eax,0x30
c00213ac:	0f b6 c0             	movzx  eax,al
c00213af:	09 c3                	or     ebx,eax
c00213b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00213b5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c00213b9:	80 fb 58             	cmp    bl,0x58
c00213bc:	74 49                	je     c0021407 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c00213be:	88 d8                	mov    al,bl
c00213c0:	d4 40                	aam    0x40
c00213c2:	d5 39                	aad    0x39
c00213c4:	83 e8 30             	sub    eax,0x30
c00213c7:	0f b6 f8             	movzx  edi,al
c00213ca:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c00213ce:	c1 e7 04             	shl    edi,0x4
c00213d1:	d4 40                	aam    0x40
c00213d3:	d5 39                	aad    0x39
c00213d5:	83 e8 30             	sub    eax,0x30
c00213d8:	0f b6 c0             	movzx  eax,al
c00213db:	09 c7                	or     edi,eax
c00213dd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c00213e1:	c1 e7 04             	shl    edi,0x4
c00213e4:	d4 40                	aam    0x40
c00213e6:	d5 39                	aad    0x39
c00213e8:	83 e8 30             	sub    eax,0x30
c00213eb:	0f b6 c0             	movzx  eax,al
c00213ee:	09 c7                	or     edi,eax
c00213f0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c00213f4:	c1 e7 04             	shl    edi,0x4
c00213f7:	d4 40                	aam    0x40
c00213f9:	d5 39                	aad    0x39
c00213fb:	83 e8 30             	sub    eax,0x30
c00213fe:	0f b6 c0             	movzx  eax,al
c0021401:	09 c7                	or     edi,eax
c0021403:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c0021407:	8d 41 10             	lea    eax,[ecx+0x10]
c002140a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002140e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c0021412:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0021416:	83 f9 0a             	cmp    ecx,0xa
c0021419:	74 07                	je     c0021422 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002141b:	47                   	inc    edi
c002141c:	39 c5                	cmp    ebp,eax
c002141e:	75 16                	jne    c0021436 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c0021420:	89 e8                	mov    eax,ebp
c0021422:	83 f9 0a             	cmp    ecx,0xa
c0021425:	0f 94 c1             	sete   cl
c0021428:	0f b6 c9             	movzx  ecx,cl
c002142b:	01 c1                	add    ecx,eax
c002142d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c0021432:	75 0f                	jne    c0021443 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c0021434:	eb 1c                	jmp    c0021452 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c0021436:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0021439:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002143d:	40                   	inc    eax
c002143e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c0021441:	eb cb                	jmp    c002140e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c0021443:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021447:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002144c:	0f 85 d9 fe ff ff    	jne    c002132b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0021452:	80 fb 58             	cmp    bl,0x58
c0021455:	74 10                	je     c0021467 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0021457:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002145c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c0021461:	0f 85 c4 fe ff ff    	jne    c002132b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0021467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002146b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002146f:	83 e8 30             	sub    eax,0x30
c0021472:	c1 e0 04             	shl    eax,0x4
c0021475:	83 eb 30             	sub    ebx,0x30
c0021478:	09 d8                	or     eax,ebx
c002147a:	0f b6 c0             	movzx  eax,al
c002147d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0021481:	0f 85 a4 fe ff ff    	jne    c002132b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c0021487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002148b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002148f:	83 e8 30             	sub    eax,0x30
c0021492:	c1 e0 04             	shl    eax,0x4
c0021495:	83 eb 30             	sub    ebx,0x30
c0021498:	09 d8                	or     eax,ebx
c002149a:	0f b6 c0             	movzx  eax,al
c002149d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00214a1:	0f 85 84 fe ff ff    	jne    c002132b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c00214a7:	50                   	push   eax
c00214a8:	50                   	push   eax
c00214a9:	8d 44 24 48          	lea    eax,[esp+0x48]
c00214ad:	50                   	push   eax
c00214ae:	56                   	push   esi
c00214af:	e8 9c f1 fd ff       	call   c0000650 <strcpy>
c00214b4:	83 c4 10             	add    esp,0x10
c00214b7:	eb 05                	jmp    c00214be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c00214b9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00214bc:	31 f6                	xor    esi,esi
c00214be:	81 c4 4c 01 00 00    	add    esp,0x14c
c00214c4:	89 f0                	mov    eax,esi
c00214c6:	5b                   	pop    ebx
c00214c7:	5e                   	pop    esi
c00214c8:	5f                   	pop    edi
c00214c9:	5d                   	pop    ebp
c00214ca:	c3                   	ret    
c00214cb:	90                   	nop

c00214cc <PCI::checkBus(unsigned char)>:
c00214cc:	56                   	push   esi
c00214cd:	53                   	push   ebx
c00214ce:	31 db                	xor    ebx,ebx
c00214d0:	51                   	push   ecx
c00214d1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00214d6:	52                   	push   edx
c00214d7:	53                   	push   ebx
c00214d8:	43                   	inc    ebx
c00214d9:	56                   	push   esi
c00214da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214de:	e8 6f 03 00 00       	call   c0021852 <PCI::checkDevice(unsigned char, unsigned char)>
c00214e3:	83 c4 10             	add    esp,0x10
c00214e6:	83 fb 20             	cmp    ebx,0x20
c00214e9:	75 eb                	jne    c00214d6 <PCI::checkBus(unsigned char)+0xa>
c00214eb:	58                   	pop    eax
c00214ec:	5b                   	pop    ebx
c00214ed:	5e                   	pop    esi
c00214ee:	c3                   	ret    
c00214ef:	90                   	nop

c00214f0 <PCI::foundDevice(PCIDeviceInfo)>:
c00214f0:	55                   	push   ebp
c00214f1:	57                   	push   edi
c00214f2:	56                   	push   esi
c00214f3:	53                   	push   ebx
c00214f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00214fa:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c0021502:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0021509:	3d ff ff 00 00       	cmp    eax,0xffff
c002150e:	0f 84 b6 01 00 00    	je     c00216ca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c0021514:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c002151c:	66 81 fd 06 04       	cmp    bp,0x406
c0021521:	75 32                	jne    c0021555 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c0021523:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002152b:	50                   	push   eax
c002152c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c0021534:	50                   	push   eax
c0021535:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002153d:	50                   	push   eax
c002153e:	53                   	push   ebx
c002153f:	e8 4c fb ff ff       	call   c0021090 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021544:	59                   	pop    ecx
c0021545:	5e                   	pop    esi
c0021546:	0f b6 c0             	movzx  eax,al
c0021549:	50                   	push   eax
c002154a:	53                   	push   ebx
c002154b:	e8 7c ff ff ff       	call   c00214cc <PCI::checkBus(unsigned char)>
c0021550:	e9 15 01 00 00       	jmp    c002166a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c0021555:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c002155d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c0021563:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c002156a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c0021571:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021575:	85 c0                	test   eax,eax
c0021577:	74 34                	je     c00215ad <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c0021579:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002157c:	85 d2                	test   edx,edx
c002157e:	74 29                	je     c00215a9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0021580:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021586:	31 cf                	xor    edi,ecx
c0021588:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002158e:	75 19                	jne    c00215a9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0021590:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c0021596:	75 11                	jne    c00215a9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c0021598:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c002159f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00215a3:	0f 84 21 01 00 00    	je     c00216ca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c00215a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00215ab:	eb c8                	jmp    c0021575 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c00215ad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00215b1:	be 56 f0 02 c0       	mov    esi,0xc002f056
c00215b6:	b9 07 00 00 00       	mov    ecx,0x7
c00215bb:	fc                   	cld    
c00215bc:	31 d2                	xor    edx,edx
c00215be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00215c0:	b9 12 00 00 00       	mov    ecx,0x12
c00215c5:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c00215cc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00215d0:	83 ec 0c             	sub    esp,0xc
c00215d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00215d5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c00215dd:	b9 0a 00 00 00       	mov    ecx,0xa
c00215e2:	f7 f1                	div    ecx
c00215e4:	83 c0 30             	add    eax,0x30
c00215e7:	83 c2 30             	add    edx,0x30
c00215ea:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00215ee:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c00215f6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c00215fa:	31 d2                	xor    edx,edx
c00215fc:	f7 f1                	div    ecx
c00215fe:	83 c0 30             	add    eax,0x30
c0021601:	83 c2 30             	add    edx,0x30
c0021604:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0021608:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c002160c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021610:	50                   	push   eax
c0021611:	e8 7b c9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021616:	83 c4 10             	add    esp,0x10
c0021619:	81 fd 01 06 00 00    	cmp    ebp,0x601
c002161f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c0021626:	75 47                	jne    c002166f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0021628:	83 ec 0c             	sub    esp,0xc
c002162b:	68 64 01 00 00       	push   0x164
c0021630:	e8 0f ee fe ff       	call   c0010444 <malloc>
c0021635:	89 04 24             	mov    DWORD PTR [esp],eax
c0021638:	89 c5                	mov    ebp,eax
c002163a:	e8 37 11 00 00       	call   c0022776 <SATABus::SATABus()>
c002163f:	58                   	pop    eax
c0021640:	5a                   	pop    edx
c0021641:	55                   	push   ebp
c0021642:	53                   	push   ebx
c0021643:	e8 06 91 fe ff       	call   c000a74e <Device::addChild(Device*)>
c0021648:	83 ec 1c             	sub    esp,0x1c
c002164b:	b9 09 00 00 00       	mov    ecx,0x9
c0021650:	89 e7                	mov    edi,esp
c0021652:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021654:	55                   	push   ebp
c0021655:	e8 3a 90 fe ff       	call   c000a694 <Device::preOpenPCI(PCIDeviceInfo)>
c002165a:	83 c4 30             	add    esp,0x30
c002165d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021660:	6a 00                	push   0x0
c0021662:	6a 00                	push   0x0
c0021664:	6a 00                	push   0x0
c0021666:	55                   	push   ebp
c0021667:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002166a:	83 c4 10             	add    esp,0x10
c002166d:	eb 5b                	jmp    c00216ca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002166f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c0021675:	75 19                	jne    c0021690 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c0021677:	83 ec 0c             	sub    esp,0xc
c002167a:	68 70 02 00 00       	push   0x270
c002167f:	e8 c0 ed fe ff       	call   c0010444 <malloc>
c0021684:	89 04 24             	mov    DWORD PTR [esp],eax
c0021687:	89 c5                	mov    ebp,eax
c0021689:	e8 94 02 00 00       	call   c0021922 <IDE::IDE()>
c002168e:	eb af                	jmp    c002163f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c0021690:	83 ec 0c             	sub    esp,0xc
c0021693:	68 58 01 00 00       	push   0x158
c0021698:	e8 a7 ed fe ff       	call   c0010444 <malloc>
c002169d:	89 c5                	mov    ebp,eax
c002169f:	58                   	pop    eax
c00216a0:	5a                   	pop    edx
c00216a1:	68 3c f0 02 c0       	push   0xc002f03c
c00216a6:	55                   	push   ebp
c00216a7:	e8 56 93 fe ff       	call   c000aa02 <DriverlessDevice::DriverlessDevice(char const*)>
c00216ac:	59                   	pop    ecx
c00216ad:	5f                   	pop    edi
c00216ae:	55                   	push   ebp
c00216af:	53                   	push   ebx
c00216b0:	e8 99 90 fe ff       	call   c000a74e <Device::addChild(Device*)>
c00216b5:	83 ec 1c             	sub    esp,0x1c
c00216b8:	b9 09 00 00 00       	mov    ecx,0x9
c00216bd:	89 e7                	mov    edi,esp
c00216bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00216c1:	55                   	push   ebp
c00216c2:	e8 cd 8f fe ff       	call   c000a694 <Device::preOpenPCI(PCIDeviceInfo)>
c00216c7:	83 c4 30             	add    esp,0x30
c00216ca:	81 c4 8c 00 00 00    	add    esp,0x8c
c00216d0:	5b                   	pop    ebx
c00216d1:	5e                   	pop    esi
c00216d2:	5f                   	pop    edi
c00216d3:	5d                   	pop    ebp
c00216d4:	c3                   	ret    
c00216d5:	90                   	nop

c00216d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00216d6:	55                   	push   ebp
c00216d7:	57                   	push   edi
c00216d8:	56                   	push   esi
c00216d9:	53                   	push   ebx
c00216da:	83 ec 68             	sub    esp,0x68
c00216dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00216e4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00216e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00216ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00216f3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00216f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00216fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0021703:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c0021708:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002170c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c0021711:	6a 0c                	push   0xc
c0021713:	57                   	push   edi
c0021714:	53                   	push   ebx
c0021715:	56                   	push   esi
c0021716:	55                   	push   ebp
c0021717:	e8 c4 f7 ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002171c:	83 c4 20             	add    esp,0x20
c002171f:	57                   	push   edi
c0021720:	53                   	push   ebx
c0021721:	56                   	push   esi
c0021722:	55                   	push   ebp
c0021723:	e8 ae f8 ff ff       	call   c0020fd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021728:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002172d:	57                   	push   edi
c002172e:	53                   	push   ebx
c002172f:	56                   	push   esi
c0021730:	55                   	push   ebp
c0021731:	e8 36 f9 ff ff       	call   c002106c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021736:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002173a:	83 c4 14             	add    esp,0x14
c002173d:	6a 3c                	push   0x3c
c002173f:	57                   	push   edi
c0021740:	53                   	push   ebx
c0021741:	56                   	push   esi
c0021742:	55                   	push   ebp
c0021743:	e8 98 f7 ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021748:	0f b6 c4             	movzx  eax,ah
c002174b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002174f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021753:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0021757:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c002175c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0021762:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0021768:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002176c:	83 c4 20             	add    esp,0x20
c002176f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0021774:	74 30                	je     c00217a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0021776:	31 c0                	xor    eax,eax
c0021778:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002177c:	7e 28                	jle    c00217a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002177e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0021786:	39 cb                	cmp    ebx,ecx
c0021788:	75 19                	jne    c00217a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002178a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0021792:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0021796:	75 0b                	jne    c00217a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0021798:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002179f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00217a3:	40                   	inc    eax
c00217a4:	eb d2                	jmp    c0021778 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00217a6:	31 d2                	xor    edx,edx
c00217a8:	83 ec 0c             	sub    esp,0xc
c00217ab:	57                   	push   edi
c00217ac:	53                   	push   ebx
c00217ad:	56                   	push   esi
c00217ae:	52                   	push   edx
c00217af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00217b3:	55                   	push   ebp
c00217b4:	e8 ff f8 ff ff       	call   c00210b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00217b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00217bd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00217c1:	42                   	inc    edx
c00217c2:	83 c4 20             	add    esp,0x20
c00217c5:	83 fa 06             	cmp    edx,0x6
c00217c8:	75 de                	jne    c00217a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00217ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217d5:	c1 e2 08             	shl    edx,0x8
c00217d8:	0f b6 c4             	movzx  eax,ah
c00217db:	09 d0                	or     eax,edx
c00217dd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00217e2:	6a 02                	push   0x2
c00217e4:	57                   	push   edi
c00217e5:	53                   	push   ebx
c00217e6:	56                   	push   esi
c00217e7:	55                   	push   ebp
c00217e8:	e8 f3 f6 ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00217ed:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00217f2:	83 c4 20             	add    esp,0x20
c00217f5:	57                   	push   edi
c00217f6:	53                   	push   ebx
c00217f7:	56                   	push   esi
c00217f8:	55                   	push   ebp
c00217f9:	e8 22 f8 ff ff       	call   c0021020 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00217fe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021802:	57                   	push   edi
c0021803:	53                   	push   ebx
c0021804:	56                   	push   esi
c0021805:	55                   	push   ebp
c0021806:	e8 7f f7 ff ff       	call   c0020f8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002180b:	b9 09 00 00 00       	mov    ecx,0x9
c0021810:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0021815:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0021819:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002181d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0021821:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0021825:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0021829:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002182d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0021831:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0021835:	83 ec 0c             	sub    esp,0xc
c0021838:	fc                   	cld    
c0021839:	8d 74 24 58          	lea    esi,[esp+0x58]
c002183d:	89 e7                	mov    edi,esp
c002183f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021841:	55                   	push   ebp
c0021842:	e8 a9 fc ff ff       	call   c00214f0 <PCI::foundDevice(PCIDeviceInfo)>
c0021847:	81 c4 8c 00 00 00    	add    esp,0x8c
c002184d:	5b                   	pop    ebx
c002184e:	5e                   	pop    esi
c002184f:	5f                   	pop    edi
c0021850:	5d                   	pop    ebp
c0021851:	c3                   	ret    

c0021852 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021852:	55                   	push   ebp
c0021853:	57                   	push   edi
c0021854:	56                   	push   esi
c0021855:	53                   	push   ebx
c0021856:	83 ec 0c             	sub    esp,0xc
c0021859:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002185e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021867:	6a 00                	push   0x0
c0021869:	56                   	push   esi
c002186a:	57                   	push   edi
c002186b:	55                   	push   ebp
c002186c:	e8 19 f7 ff ff       	call   c0020f8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021871:	6a 00                	push   0x0
c0021873:	56                   	push   esi
c0021874:	57                   	push   edi
c0021875:	55                   	push   ebp
c0021876:	e8 5b fe ff ff       	call   c00216d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002187b:	83 c4 20             	add    esp,0x20
c002187e:	6a 00                	push   0x0
c0021880:	56                   	push   esi
c0021881:	57                   	push   edi
c0021882:	55                   	push   ebp
c0021883:	e8 26 f7 ff ff       	call   c0020fae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021888:	83 c4 10             	add    esp,0x10
c002188b:	a8 80                	test   al,0x80
c002188d:	74 2d                	je     c00218bc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002188f:	bb 01 00 00 00       	mov    ebx,0x1
c0021894:	53                   	push   ebx
c0021895:	56                   	push   esi
c0021896:	57                   	push   edi
c0021897:	55                   	push   ebp
c0021898:	e8 ed f6 ff ff       	call   c0020f8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	0f b7 c0             	movzx  eax,ax
c00218a3:	3d ff ff 00 00       	cmp    eax,0xffff
c00218a8:	74 0c                	je     c00218b6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00218aa:	53                   	push   ebx
c00218ab:	56                   	push   esi
c00218ac:	57                   	push   edi
c00218ad:	55                   	push   ebp
c00218ae:	e8 23 fe ff ff       	call   c00216d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00218b3:	83 c4 10             	add    esp,0x10
c00218b6:	43                   	inc    ebx
c00218b7:	83 fb 08             	cmp    ebx,0x8
c00218ba:	75 d8                	jne    c0021894 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00218bc:	83 c4 0c             	add    esp,0xc
c00218bf:	5b                   	pop    ebx
c00218c0:	5e                   	pop    esi
c00218c1:	5f                   	pop    edi
c00218c2:	5d                   	pop    ebp
c00218c3:	c3                   	ret    

c00218c4 <PCI::detect()>:
c00218c4:	56                   	push   esi
c00218c5:	53                   	push   ebx
c00218c6:	53                   	push   ebx
c00218c7:	31 db                	xor    ebx,ebx
c00218c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00218cd:	6a 00                	push   0x0
c00218cf:	6a 00                	push   0x0
c00218d1:	6a 00                	push   0x0
c00218d3:	56                   	push   esi
c00218d4:	e8 d5 f6 ff ff       	call   c0020fae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00218d9:	83 c4 10             	add    esp,0x10
c00218dc:	a8 80                	test   al,0x80
c00218de:	75 21                	jne    c0021901 <PCI::detect()+0x3d>
c00218e0:	51                   	push   ecx
c00218e1:	51                   	push   ecx
c00218e2:	6a 00                	push   0x0
c00218e4:	56                   	push   esi
c00218e5:	e8 e2 fb ff ff       	call   c00214cc <PCI::checkBus(unsigned char)>
c00218ea:	83 c4 10             	add    esp,0x10
c00218ed:	eb 2a                	jmp    c0021919 <PCI::detect()+0x55>
c00218ef:	52                   	push   edx
c00218f0:	52                   	push   edx
c00218f1:	53                   	push   ebx
c00218f2:	43                   	inc    ebx
c00218f3:	56                   	push   esi
c00218f4:	e8 d3 fb ff ff       	call   c00214cc <PCI::checkBus(unsigned char)>
c00218f9:	83 c4 10             	add    esp,0x10
c00218fc:	83 fb 08             	cmp    ebx,0x8
c00218ff:	74 18                	je     c0021919 <PCI::detect()+0x55>
c0021901:	53                   	push   ebx
c0021902:	6a 00                	push   0x0
c0021904:	6a 00                	push   0x0
c0021906:	56                   	push   esi
c0021907:	e8 7e f6 ff ff       	call   c0020f8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	0f b7 c0             	movzx  eax,ax
c0021912:	3d ff ff 00 00       	cmp    eax,0xffff
c0021917:	74 d6                	je     c00218ef <PCI::detect()+0x2b>
c0021919:	58                   	pop    eax
c002191a:	5b                   	pop    ebx
c002191b:	5e                   	pop    esi
c002191c:	c3                   	ret    
c002191d:	90                   	nop

c002191e <IDE::close(int, int, void*)>:
c002191e:	83 c8 ff             	or     eax,0xffffffff
c0021921:	c3                   	ret    

c0021922 <IDE::IDE()>:
c0021922:	83 ec 0c             	sub    esp,0xc
c0021925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021929:	83 ec 08             	sub    esp,0x8
c002192c:	68 e8 f0 02 c0       	push   0xc002f0e8
c0021931:	50                   	push   eax
c0021932:	e8 71 91 fe ff       	call   c000aaa8 <HardDiskController::HardDiskController(char const*)>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	ba 14 f2 02 c0       	mov    edx,0xc002f214
c002193f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021943:	89 10                	mov    DWORD PTR [eax],edx
c0021945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021949:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021950:	90                   	nop
c0021951:	83 c4 0c             	add    esp,0xc
c0021954:	c3                   	ret    
c0021955:	90                   	nop

c0021956 <IDE::prepareInterrupt(unsigned char)>:
c0021956:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002195b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002195f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021967:	c3                   	ret    

c0021968 <selectDrive(unsigned char, unsigned char)>:
c0021968:	c3                   	ret    
c0021969:	90                   	nop

c002196a <IDE::getBase(unsigned char)>:
c002196a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002196f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021973:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002197b:	c3                   	ret    

c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002197c:	55                   	push   ebp
c002197d:	57                   	push   edi
c002197e:	56                   	push   esi
c002197f:	53                   	push   ebx
c0021980:	83 ec 1c             	sub    esp,0x1c
c0021983:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021987:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002198b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002198f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021993:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021996:	80 f9 03             	cmp    cl,0x3
c0021999:	77 4f                	ja     c00219ea <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002199b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002199f:	0f b6 f2             	movzx  esi,dl
c00219a2:	0f b6 db             	movzx  ebx,bl
c00219a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00219a8:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00219ad:	80 ca 80             	or     dl,0x80
c00219b0:	52                   	push   edx
c00219b1:	6a 0c                	push   0xc
c00219b3:	56                   	push   esi
c00219b4:	57                   	push   edi
c00219b5:	e8 c2 ff ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219ba:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00219bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219c3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00219c7:	ee                   	out    dx,al
c00219c8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00219cd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00219d1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00219d5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00219dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00219e1:	83 c4 2c             	add    esp,0x2c
c00219e4:	5b                   	pop    ebx
c00219e5:	5e                   	pop    esi
c00219e6:	5f                   	pop    edi
c00219e7:	5d                   	pop    ebp
c00219e8:	eb 92                	jmp    c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219ea:	0f b6 cb             	movzx  ecx,bl
c00219ed:	83 f9 07             	cmp    ecx,0x7
c00219f0:	77 12                	ja     c0021a04 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c00219f2:	0f b6 d2             	movzx  edx,dl
c00219f5:	0f b6 db             	movzx  ebx,bl
c00219f8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c0021a00:	01 da                	add    edx,ebx
c0021a02:	eb 2f                	jmp    c0021a33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021a04:	83 f9 0d             	cmp    ecx,0xd
c0021a07:	77 13                	ja     c0021a1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c0021a09:	0f b6 d2             	movzx  edx,dl
c0021a0c:	0f b6 db             	movzx  ebx,bl
c0021a0f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021a16:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021a1a:	eb 17                	jmp    c0021a33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021a1c:	83 f9 15             	cmp    ecx,0x15
c0021a1f:	77 13                	ja     c0021a34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c0021a21:	0f b6 d2             	movzx  edx,dl
c0021a24:	0f b6 db             	movzx  ebx,bl
c0021a27:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021a2f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021a33:	ee                   	out    dx,al
c0021a34:	83 c4 1c             	add    esp,0x1c
c0021a37:	5b                   	pop    ebx
c0021a38:	5e                   	pop    esi
c0021a39:	5f                   	pop    edi
c0021a3a:	5d                   	pop    ebp
c0021a3b:	c3                   	ret    

c0021a3c <IDE::read(unsigned char, unsigned char)>:
c0021a3c:	57                   	push   edi
c0021a3d:	56                   	push   esi
c0021a3e:	53                   	push   ebx
c0021a3f:	83 ec 10             	sub    esp,0x10
c0021a42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021a4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a4e:	8d 42 f8             	lea    eax,[edx-0x8]
c0021a51:	3c 03                	cmp    al,0x3
c0021a53:	77 48                	ja     c0021a9d <IDE::read(unsigned char, unsigned char)+0x61>
c0021a55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a59:	0f b6 f1             	movzx  esi,cl
c0021a5c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c0021a5f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c0021a64:	0c 80                	or     al,0x80
c0021a66:	50                   	push   eax
c0021a67:	6a 0c                	push   0xc
c0021a69:	56                   	push   esi
c0021a6a:	53                   	push   ebx
c0021a6b:	e8 0c ff ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021a74:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c0021a79:	0f b6 d2             	movzx  edx,dl
c0021a7c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0021a80:	ec                   	in     al,dx
c0021a81:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021a85:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c0021a8a:	52                   	push   edx
c0021a8b:	6a 0c                	push   0xc
c0021a8d:	56                   	push   esi
c0021a8e:	53                   	push   ebx
c0021a8f:	e8 e8 fe ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a94:	83 c4 20             	add    esp,0x20
c0021a97:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021a9b:	eb 4c                	jmp    c0021ae9 <IDE::read(unsigned char, unsigned char)+0xad>
c0021a9d:	0f b6 f2             	movzx  esi,dl
c0021aa0:	83 fe 07             	cmp    esi,0x7
c0021aa3:	77 12                	ja     c0021ab7 <IDE::read(unsigned char, unsigned char)+0x7b>
c0021aa5:	0f b6 c9             	movzx  ecx,cl
c0021aa8:	0f b6 d2             	movzx  edx,dl
c0021aab:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c0021ab3:	01 c2                	add    edx,eax
c0021ab5:	eb 31                	jmp    c0021ae8 <IDE::read(unsigned char, unsigned char)+0xac>
c0021ab7:	83 fe 0d             	cmp    esi,0xd
c0021aba:	77 13                	ja     c0021acf <IDE::read(unsigned char, unsigned char)+0x93>
c0021abc:	0f b6 c9             	movzx  ecx,cl
c0021abf:	0f b6 d2             	movzx  edx,dl
c0021ac2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c0021ac9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021acd:	eb 19                	jmp    c0021ae8 <IDE::read(unsigned char, unsigned char)+0xac>
c0021acf:	31 c0                	xor    eax,eax
c0021ad1:	83 fe 15             	cmp    esi,0x15
c0021ad4:	77 13                	ja     c0021ae9 <IDE::read(unsigned char, unsigned char)+0xad>
c0021ad6:	0f b6 c9             	movzx  ecx,cl
c0021ad9:	0f b6 d2             	movzx  edx,dl
c0021adc:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c0021ae4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021ae8:	ec                   	in     al,dx
c0021ae9:	83 c4 10             	add    esp,0x10
c0021aec:	5b                   	pop    ebx
c0021aed:	5e                   	pop    esi
c0021aee:	5f                   	pop    edi
c0021aef:	c3                   	ret    

c0021af0 <IDE::waitInterrupt(unsigned char)>:
c0021af0:	55                   	push   ebp
c0021af1:	57                   	push   edi
c0021af2:	56                   	push   esi
c0021af3:	53                   	push   ebx
c0021af4:	31 db                	xor    ebx,ebx
c0021af6:	83 ec 0c             	sub    esp,0xc
c0021af9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021afd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021b02:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021b0a:	89 e8                	mov    eax,ebp
c0021b0c:	84 c0                	test   al,al
c0021b0e:	75 31                	jne    c0021b41 <IDE::waitInterrupt(unsigned char)+0x51>
c0021b10:	52                   	push   edx
c0021b11:	6a 0c                	push   0xc
c0021b13:	56                   	push   esi
c0021b14:	57                   	push   edi
c0021b15:	e8 22 ff ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0021b1a:	83 c4 10             	add    esp,0x10
c0021b1d:	a8 01                	test   al,0x1
c0021b1f:	75 28                	jne    c0021b49 <IDE::waitInterrupt(unsigned char)+0x59>
c0021b21:	f6 c3 04             	test   bl,0x4
c0021b24:	75 13                	jne    c0021b39 <IDE::waitInterrupt(unsigned char)+0x49>
c0021b26:	83 fb 32             	cmp    ebx,0x32
c0021b29:	7e 0e                	jle    c0021b39 <IDE::waitInterrupt(unsigned char)+0x49>
c0021b2b:	50                   	push   eax
c0021b2c:	50                   	push   eax
c0021b2d:	6a 00                	push   0x0
c0021b2f:	6a 64                	push   0x64
c0021b31:	e8 de 5a ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0021b36:	83 c4 10             	add    esp,0x10
c0021b39:	83 fb 3c             	cmp    ebx,0x3c
c0021b3c:	74 0b                	je     c0021b49 <IDE::waitInterrupt(unsigned char)+0x59>
c0021b3e:	43                   	inc    ebx
c0021b3f:	eb c1                	jmp    c0021b02 <IDE::waitInterrupt(unsigned char)+0x12>
c0021b41:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0021b49:	83 c4 0c             	add    esp,0xc
c0021b4c:	89 e8                	mov    eax,ebp
c0021b4e:	5b                   	pop    ebx
c0021b4f:	5e                   	pop    esi
c0021b50:	5f                   	pop    edi
c0021b51:	5d                   	pop    ebp
c0021b52:	c3                   	ret    

c0021b53 <ideChannel0IRQHandler(regs*, void*)>:
c0021b53:	83 ec 10             	sub    esp,0x10
c0021b56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b5a:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0021b61:	6a 07                	push   0x7
c0021b63:	6a 00                	push   0x0
c0021b65:	50                   	push   eax
c0021b66:	e8 d1 fe ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0021b6b:	83 c4 1c             	add    esp,0x1c
c0021b6e:	c3                   	ret    

c0021b6f <ideChannel1IRQHandler(regs*, void*)>:
c0021b6f:	83 ec 10             	sub    esp,0x10
c0021b72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b76:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0021b7d:	6a 07                	push   0x7
c0021b7f:	6a 01                	push   0x1
c0021b81:	50                   	push   eax
c0021b82:	e8 b5 fe ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0021b87:	83 c4 1c             	add    esp,0x1c
c0021b8a:	c3                   	ret    
c0021b8b:	90                   	nop

c0021b8c <IDE::enableIRQs(unsigned char, bool)>:
c0021b8c:	57                   	push   edi
c0021b8d:	b8 02 00 00 00       	mov    eax,0x2
c0021b92:	56                   	push   esi
c0021b93:	53                   	push   ebx
c0021b94:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021b99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021b9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021ba1:	74 02                	je     c0021ba5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c0021ba3:	31 c0                	xor    eax,eax
c0021ba5:	0f b6 db             	movzx  ebx,bl
c0021ba8:	bf 04 00 00 00       	mov    edi,0x4
c0021bad:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c0021bb4:	50                   	push   eax
c0021bb5:	6a 0c                	push   0xc
c0021bb7:	53                   	push   ebx
c0021bb8:	56                   	push   esi
c0021bb9:	e8 be fd ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bbe:	83 c4 10             	add    esp,0x10
c0021bc1:	50                   	push   eax
c0021bc2:	6a 0c                	push   0xc
c0021bc4:	53                   	push   ebx
c0021bc5:	56                   	push   esi
c0021bc6:	e8 71 fe ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0021bcb:	83 c4 10             	add    esp,0x10
c0021bce:	4f                   	dec    edi
c0021bcf:	75 f0                	jne    c0021bc1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c0021bd1:	5b                   	pop    ebx
c0021bd2:	5e                   	pop    esi
c0021bd3:	5f                   	pop    edi
c0021bd4:	c3                   	ret    
c0021bd5:	90                   	nop

c0021bd6 <IDE::open(int, int, void*)>:
c0021bd6:	55                   	push   ebp
c0021bd7:	57                   	push   edi
c0021bd8:	56                   	push   esi
c0021bd9:	53                   	push   ebx
c0021bda:	83 ec 1c             	sub    esp,0x1c
c0021bdd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021be1:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0021be8:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021bf1:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021bfa:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021c01:	0f 85 80 02 00 00    	jne    c0021e87 <IDE::open(int, int, void*)+0x2b1>
c0021c07:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0021c0d:	a8 70                	test   al,0x70
c0021c0f:	75 44                	jne    c0021c55 <IDE::open(int, int, void*)+0x7f>
c0021c11:	ba 20 84 00 00       	mov    edx,0x8420
c0021c16:	0f a3 c2             	bt     edx,eax
c0021c19:	73 3a                	jae    c0021c55 <IDE::open(int, int, void*)+0x7f>
c0021c1b:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0021c21:	83 ec 0c             	sub    esp,0xc
c0021c24:	83 e0 fc             	and    eax,0xfffffffc
c0021c27:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021c2e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0021c34:	83 e0 fc             	and    eax,0xfffffffc
c0021c37:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021c3e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0021c44:	83 e0 fc             	and    eax,0xfffffffc
c0021c47:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021c4e:	68 82 b4 02 c0       	push   0xc002b482
c0021c53:	eb 60                	jmp    c0021cb5 <IDE::open(int, int, void*)+0xdf>
c0021c55:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021c5f:	be 64 00 00 00       	mov    esi,0x64
c0021c64:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021c6e:	57                   	push   edi
c0021c6f:	57                   	push   edi
c0021c70:	68 00 f1 02 c0       	push   0xc002f100
c0021c75:	8d 7c 24 12          	lea    edi,[esp+0x12]
c0021c79:	57                   	push   edi
c0021c7a:	e8 d1 e9 fd ff       	call   c0000650 <strcpy>
c0021c7f:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c0021c86:	31 d2                	xor    edx,edx
c0021c88:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021c8b:	89 c8                	mov    eax,ecx
c0021c8d:	f7 f6                	div    esi
c0021c8f:	be 0a 00 00 00       	mov    esi,0xa
c0021c94:	31 d2                	xor    edx,edx
c0021c96:	83 c0 30             	add    eax,0x30
c0021c99:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0021c9d:	89 c8                	mov    eax,ecx
c0021c9f:	f7 f6                	div    esi
c0021ca1:	89 d1                	mov    ecx,edx
c0021ca3:	31 d2                	xor    edx,edx
c0021ca5:	f7 f6                	div    esi
c0021ca7:	83 c1 30             	add    ecx,0x30
c0021caa:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c0021cae:	83 c2 30             	add    edx,0x30
c0021cb1:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0021cb5:	e8 d7 c2 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021cba:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021cc1:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021cc6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021ccd:	83 c4 10             	add    esp,0x10
c0021cd0:	89 fa                	mov    edx,edi
c0021cd2:	c1 e1 10             	shl    ecx,0x10
c0021cd5:	c1 e0 0b             	shl    eax,0xb
c0021cd8:	09 c1                	or     ecx,eax
c0021cda:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021ce1:	c1 e0 08             	shl    eax,0x8
c0021ce4:	09 c1                	or     ecx,eax
c0021ce6:	89 c8                	mov    eax,ecx
c0021ce8:	0d 08 00 00 80       	or     eax,0x80000008
c0021ced:	ef                   	out    dx,eax
c0021cee:	be fc 0c 00 00       	mov    esi,0xcfc
c0021cf3:	89 f2                	mov    edx,esi
c0021cf5:	ed                   	in     eax,dx
c0021cf6:	c1 e8 10             	shr    eax,0x10
c0021cf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0021cfe:	0f 84 e1 00 00 00    	je     c0021de5 <IDE::open(int, int, void*)+0x20f>
c0021d04:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021d0a:	89 fa                	mov    edx,edi
c0021d0c:	89 c8                	mov    eax,ecx
c0021d0e:	ef                   	out    dx,eax
c0021d0f:	b0 fe                	mov    al,0xfe
c0021d11:	89 f2                	mov    edx,esi
c0021d13:	ee                   	out    dx,al
c0021d14:	89 c8                	mov    eax,ecx
c0021d16:	89 fa                	mov    edx,edi
c0021d18:	ef                   	out    dx,eax
c0021d19:	89 f2                	mov    edx,esi
c0021d1b:	ed                   	in     eax,dx
c0021d1c:	3c fe                	cmp    al,0xfe
c0021d1e:	0f 85 83 00 00 00    	jne    c0021da7 <IDE::open(int, int, void*)+0x1d1>
c0021d24:	83 ec 0c             	sub    esp,0xc
c0021d27:	68 b8 b4 02 c0       	push   0xc002b4b8
c0021d2c:	e8 60 c2 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021d31:	c7 04 24 06 f1 02 c0 	mov    DWORD PTR [esp],0xc002f106
c0021d38:	e8 29 52 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021d3d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021d47:	c7 04 24 a8 b7 02 c0 	mov    DWORD PTR [esp],0xc002b7a8
c0021d4e:	e8 3e c2 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021d53:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021d5a:	89 fa                	mov    edx,edi
c0021d5c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021d63:	c1 e1 10             	shl    ecx,0x10
c0021d66:	c1 e0 08             	shl    eax,0x8
c0021d69:	09 c1                	or     ecx,eax
c0021d6b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021d72:	c1 e0 0b             	shl    eax,0xb
c0021d75:	09 c1                	or     ecx,eax
c0021d77:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021d7d:	89 c8                	mov    eax,ecx
c0021d7f:	ef                   	out    dx,eax
c0021d80:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c0021d86:	89 f2                	mov    edx,esi
c0021d88:	89 e8                	mov    eax,ebp
c0021d8a:	ee                   	out    dx,al
c0021d8b:	89 c8                	mov    eax,ecx
c0021d8d:	89 fa                	mov    edx,edi
c0021d8f:	ef                   	out    dx,eax
c0021d90:	89 f2                	mov    edx,esi
c0021d92:	ed                   	in     eax,dx
c0021d93:	0f b6 c0             	movzx  eax,al
c0021d96:	83 c4 10             	add    esp,0x10
c0021d99:	39 e8                	cmp    eax,ebp
c0021d9b:	74 58                	je     c0021df5 <IDE::open(int, int, void*)+0x21f>
c0021d9d:	83 ec 0c             	sub    esp,0xc
c0021da0:	68 1b f1 02 c0       	push   0xc002f11b
c0021da5:	eb 46                	jmp    c0021ded <IDE::open(int, int, void*)+0x217>
c0021da7:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0021db0:	75 29                	jne    c0021ddb <IDE::open(int, int, void*)+0x205>
c0021db2:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c0021db9:	3d 8a 00 00 00       	cmp    eax,0x8a
c0021dbe:	74 05                	je     c0021dc5 <IDE::open(int, int, void*)+0x1ef>
c0021dc0:	83 c0 80             	add    eax,0xffffff80
c0021dc3:	75 16                	jne    c0021ddb <IDE::open(int, int, void*)+0x205>
c0021dc5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021dcc:	83 ec 0c             	sub    esp,0xc
c0021dcf:	68 df c6 02 c0       	push   0xc002c6df
c0021dd4:	e8 b8 c1 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021dd9:	eb 17                	jmp    c0021df2 <IDE::open(int, int, void*)+0x21c>
c0021ddb:	83 ec 0c             	sub    esp,0xc
c0021dde:	68 23 f1 02 c0       	push   0xc002f123
c0021de3:	eb 08                	jmp    c0021ded <IDE::open(int, int, void*)+0x217>
c0021de5:	83 ec 0c             	sub    esp,0xc
c0021de8:	68 54 f1 02 c0       	push   0xc002f154
c0021ded:	e8 a6 ea fe ff       	call   c0010898 <KePanic(char const*)>
c0021df2:	83 c4 10             	add    esp,0x10
c0021df5:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c0021dfc:	0f 84 bf 00 00 00    	je     c0021ec1 <IDE::open(int, int, void*)+0x2eb>
c0021e02:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	83 e0 fc             	and    eax,0xfffffffc
c0021e0e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021e15:	83 c0 08             	add    eax,0x8
c0021e18:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021e1f:	68 7e f1 02 c0       	push   0xc002f17e
c0021e24:	e8 3d 51 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021e29:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0021e30:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021e37:	50                   	push   eax
c0021e38:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021e3f:	50                   	push   eax
c0021e40:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021e47:	50                   	push   eax
c0021e48:	ff 35 a0 9d 03 c0    	push   DWORD PTR ds:0xc0039da0
c0021e4e:	e8 8d f0 ff ff       	call   c0020ee0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e53:	83 c4 18             	add    esp,0x18
c0021e56:	83 c8 07             	or     eax,0x7
c0021e59:	0f b7 c0             	movzx  eax,ax
c0021e5c:	50                   	push   eax
c0021e5d:	6a 04                	push   0x4
c0021e5f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021e66:	50                   	push   eax
c0021e67:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021e6e:	50                   	push   eax
c0021e6f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021e76:	50                   	push   eax
c0021e77:	ff 35 a0 9d 03 c0    	push   DWORD PTR ds:0xc0039da0
c0021e7d:	e8 9a f2 ff ff       	call   c002111c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c0021e82:	83 c4 20             	add    esp,0x20
c0021e85:	eb 3a                	jmp    c0021ec1 <IDE::open(int, int, void*)+0x2eb>
c0021e87:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021e8e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0021e94:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021e9b:	05 06 02 00 00       	add    eax,0x206
c0021ea0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021ea7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0021eae:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021eb5:	05 06 02 00 00       	add    eax,0x206
c0021eba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021ec1:	83 ec 0c             	sub    esp,0xc
c0021ec4:	68 47 bd 02 c0       	push   0xc002bd47
c0021ec9:	e8 c3 c0 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021ece:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021ed4:	83 c4 10             	add    esp,0x10
c0021ed7:	89 c2                	mov    edx,eax
c0021ed9:	83 e2 0f             	and    edx,0xf
c0021edc:	83 fa 08             	cmp    edx,0x8
c0021edf:	75 0a                	jne    c0021eeb <IDE::open(int, int, void*)+0x315>
c0021ee1:	83 e8 02             	sub    eax,0x2
c0021ee4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021eeb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021ef1:	89 c2                	mov    edx,eax
c0021ef3:	83 e2 0f             	and    edx,0xf
c0021ef6:	83 fa 08             	cmp    edx,0x8
c0021ef9:	75 0a                	jne    c0021f05 <IDE::open(int, int, void*)+0x32f>
c0021efb:	83 e8 02             	sub    eax,0x2
c0021efe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021f05:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021f0c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021f13:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021f16:	89 d0                	mov    eax,edx
c0021f18:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021f1c:	8d 7a 01             	lea    edi,[edx+0x1]
c0021f1f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021f23:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021f27:	83 e1 3f             	and    ecx,0x3f
c0021f2a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021f2e:	89 f9                	mov    ecx,edi
c0021f30:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021f37:	8d 78 02             	lea    edi,[eax+0x2]
c0021f3a:	0f b6 c9             	movzx  ecx,cl
c0021f3d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021f40:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021f44:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021f48:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c0021f4c:	83 e2 3f             	and    edx,0x3f
c0021f4f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021f53:	89 f9                	mov    ecx,edi
c0021f55:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0021f5b:	8d 78 03             	lea    edi,[eax+0x3]
c0021f5e:	0f b6 d1             	movzx  edx,cl
c0021f61:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021f64:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021f68:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021f6c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021f70:	83 e1 3f             	and    ecx,0x3f
c0021f73:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021f77:	89 fa                	mov    edx,edi
c0021f79:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021f7f:	8d 78 04             	lea    edi,[eax+0x4]
c0021f82:	0f b6 ca             	movzx  ecx,dl
c0021f85:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021f88:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0021f8c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021f90:	89 fa                	mov    edx,edi
c0021f92:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021f98:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c0021f9c:	83 e2 3f             	and    edx,0x3f
c0021f9f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021fa3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021faa:	66 85 f6             	test   si,si
c0021fad:	74 24                	je     c0021fd3 <IDE::open(int, int, void*)+0x3fd>
c0021faf:	89 f9                	mov    ecx,edi
c0021fb1:	83 c0 05             	add    eax,0x5
c0021fb4:	0f b6 d1             	movzx  edx,cl
c0021fb7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021fba:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021fbe:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021fc2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021fc8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c0021fcc:	83 e0 3f             	and    eax,0x3f
c0021fcf:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0021fd3:	83 ec 0c             	sub    esp,0xc
c0021fd6:	68 96 f1 02 c0       	push   0xc002f196
c0021fdb:	e8 b1 bf fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0021fe0:	58                   	pop    eax
c0021fe1:	5a                   	pop    edx
c0021fe2:	6a 00                	push   0x0
c0021fe4:	53                   	push   ebx
c0021fe5:	e8 6c f9 ff ff       	call   c0021956 <IDE::prepareInterrupt(unsigned char)>
c0021fea:	59                   	pop    ecx
c0021feb:	5e                   	pop    esi
c0021fec:	6a 01                	push   0x1
c0021fee:	53                   	push   ebx
c0021fef:	e8 62 f9 ff ff       	call   c0021956 <IDE::prepareInterrupt(unsigned char)>
c0021ff4:	c7 04 24 dc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6dc
c0021ffb:	e8 91 bf fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022000:	83 c4 0c             	add    esp,0xc
c0022003:	6a 00                	push   0x0
c0022005:	6a 00                	push   0x0
c0022007:	53                   	push   ebx
c0022008:	e8 7f fb ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c002200d:	83 c4 0c             	add    esp,0xc
c0022010:	6a 00                	push   0x0
c0022012:	6a 01                	push   0x1
c0022014:	53                   	push   ebx
c0022015:	e8 72 fb ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c002201a:	c7 04 24 98 f1 02 c0 	mov    DWORD PTR [esp],0xc002f198
c0022021:	e8 6b bf fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022026:	83 c4 10             	add    esp,0x10
c0022029:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022030:	74 3c                	je     c002206e <IDE::open(int, int, void*)+0x498>
c0022032:	83 ec 0c             	sub    esp,0xc
c0022035:	53                   	push   ebx
c0022036:	6a 01                	push   0x1
c0022038:	68 53 1b 02 c0       	push   0xc0021b53
c002203d:	6a 0e                	push   0xe
c002203f:	53                   	push   ebx
c0022040:	e8 b5 86 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022045:	83 c4 14             	add    esp,0x14
c0022048:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002204e:	53                   	push   ebx
c002204f:	6a 01                	push   0x1
c0022051:	68 6f 1b 02 c0       	push   0xc0021b6f
c0022056:	6a 0f                	push   0xf
c0022058:	53                   	push   ebx
c0022059:	e8 9c 86 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002205e:	83 c4 14             	add    esp,0x14
c0022061:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022067:	68 ae b9 02 c0       	push   0xc002b9ae
c002206c:	eb 40                	jmp    c00220ae <IDE::open(int, int, void*)+0x4d8>
c002206e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022078:	83 ec 0c             	sub    esp,0xc
c002207b:	53                   	push   ebx
c002207c:	6a 00                	push   0x0
c002207e:	68 53 1b 02 c0       	push   0xc0021b53
c0022083:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022089:	53                   	push   ebx
c002208a:	e8 6b 86 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002208f:	83 c4 14             	add    esp,0x14
c0022092:	53                   	push   ebx
c0022093:	6a 00                	push   0x0
c0022095:	68 6f 1b 02 c0       	push   0xc0021b6f
c002209a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00220a0:	53                   	push   ebx
c00220a1:	e8 54 86 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00220a6:	83 c4 14             	add    esp,0x14
c00220a9:	68 ce c6 02 c0       	push   0xc002c6ce
c00220ae:	e8 de be fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00220b3:	83 c4 10             	add    esp,0x10
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	68 9a f1 02 c0       	push   0xc002f19a
c00220be:	e8 ce be fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00220c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00220c8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00220cb:	c7 04 24 51 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb51
c00220d2:	e8 ba be fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00220d7:	83 c4 0c             	add    esp,0xc
c00220da:	6a 07                	push   0x7
c00220dc:	6a 00                	push   0x0
c00220de:	53                   	push   ebx
c00220df:	e8 58 f9 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00220e4:	83 c4 0c             	add    esp,0xc
c00220e7:	6a 07                	push   0x7
c00220e9:	6a 01                	push   0x1
c00220eb:	53                   	push   ebx
c00220ec:	e8 4b f9 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00220f1:	c7 04 24 d8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3d8
c00220f8:	e8 94 be fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00220fd:	83 c4 0c             	add    esp,0xc
c0022100:	6a 01                	push   0x1
c0022102:	6a 00                	push   0x0
c0022104:	53                   	push   ebx
c0022105:	e8 82 fa ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c002210a:	83 c4 0c             	add    esp,0xc
c002210d:	6a 01                	push   0x1
c002210f:	6a 01                	push   0x1
c0022111:	53                   	push   ebx
c0022112:	e8 75 fa ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c0022117:	c7 04 24 9d f1 02 c0 	mov    DWORD PTR [esp],0xc002f19d
c002211e:	e8 6e be fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022123:	83 c4 2c             	add    esp,0x2c
c0022126:	31 c0                	xor    eax,eax
c0022128:	5b                   	pop    ebx
c0022129:	5e                   	pop    esi
c002212a:	5f                   	pop    edi
c002212b:	5d                   	pop    ebp
c002212c:	c3                   	ret    
c002212d:	90                   	nop

c002212e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002212e:	55                   	push   ebp
c002212f:	57                   	push   edi
c0022130:	56                   	push   esi
c0022131:	53                   	push   ebx
c0022132:	83 ec 1c             	sub    esp,0x1c
c0022135:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022139:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002213d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022141:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022145:	8d 42 f8             	lea    eax,[edx-0x8]
c0022148:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002214c:	3c 03                	cmp    al,0x3
c002214e:	77 5a                	ja     c00221aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c0022150:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022154:	0f b6 db             	movzx  ebx,bl
c0022157:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002215b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002215e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022163:	0c 80                	or     al,0x80
c0022165:	50                   	push   eax
c0022166:	6a 0c                	push   0xc
c0022168:	53                   	push   ebx
c0022169:	56                   	push   esi
c002216a:	e8 0d f8 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002216f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022173:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c0022178:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002217c:	0f b6 d2             	movzx  edx,dl
c002217f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0022183:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022185:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002218a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002218e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022192:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002219a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002219e:	83 c4 2c             	add    esp,0x2c
c00221a1:	5b                   	pop    ebx
c00221a2:	5e                   	pop    esi
c00221a3:	5f                   	pop    edi
c00221a4:	5d                   	pop    ebp
c00221a5:	e9 d2 f7 ff ff       	jmp    c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221aa:	0f b6 c2             	movzx  eax,dl
c00221ad:	83 f8 07             	cmp    eax,0x7
c00221b0:	77 12                	ja     c00221c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c00221b2:	0f b6 db             	movzx  ebx,bl
c00221b5:	0f b6 c2             	movzx  eax,dl
c00221b8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c00221c0:	01 c2                	add    edx,eax
c00221c2:	eb 2f                	jmp    c00221f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c00221c4:	83 f8 0d             	cmp    eax,0xd
c00221c7:	77 13                	ja     c00221dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c00221c9:	0f b6 db             	movzx  ebx,bl
c00221cc:	0f b6 d2             	movzx  edx,dl
c00221cf:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c00221d6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00221da:	eb 17                	jmp    c00221f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c00221dc:	83 f8 15             	cmp    eax,0x15
c00221df:	77 14                	ja     c00221f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c00221e1:	0f b6 db             	movzx  ebx,bl
c00221e4:	0f b6 d2             	movzx  edx,dl
c00221e7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c00221ef:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00221f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00221f5:	83 c4 1c             	add    esp,0x1c
c00221f8:	5b                   	pop    ebx
c00221f9:	5e                   	pop    esi
c00221fa:	5f                   	pop    edi
c00221fb:	5d                   	pop    ebp
c00221fc:	c3                   	ret    
c00221fd:	90                   	nop

c00221fe <IDE::detect()>:
c00221fe:	55                   	push   ebp
c00221ff:	57                   	push   edi
c0022200:	56                   	push   esi
c0022201:	53                   	push   ebx
c0022202:	81 ec 28 02 00 00    	sub    esp,0x228
c0022208:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c002220f:	68 9f f1 02 c0       	push   0xc002f19f
c0022214:	e8 78 bd fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022219:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c002221f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0022223:	83 c4 10             	add    esp,0x10
c0022226:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c002222b:	0f 85 26 04 00 00    	jne    c0022657 <IDE::detect()+0x459>
c0022231:	83 ec 0c             	sub    esp,0xc
c0022234:	31 f6                	xor    esi,esi
c0022236:	68 a2 f1 02 c0       	push   0xc002f1a2
c002223b:	31 ff                	xor    edi,edi
c002223d:	e8 4f bd fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022242:	83 c4 10             	add    esp,0x10
c0022245:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002224c:	83 ec 0c             	sub    esp,0xc
c002224f:	68 a5 f1 02 c0       	push   0xc002f1a5
c0022254:	e8 38 bd fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0022263:	83 ec 0c             	sub    esp,0xc
c0022266:	31 ed                	xor    ebp,ebp
c0022268:	68 a8 f1 02 c0       	push   0xc002f1a8
c002226d:	e8 1f bd fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022272:	89 f8                	mov    eax,edi
c0022274:	c1 e0 06             	shl    eax,0x6
c0022277:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002227f:	c7 04 24 ab f1 02 c0 	mov    DWORD PTR [esp],0xc002f1ab
c0022286:	e8 06 bd fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c002228b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002228f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0022293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022297:	c1 e0 04             	shl    eax,0x4
c002229a:	83 c8 a0             	or     eax,0xffffffa0
c002229d:	0f b6 c0             	movzx  eax,al
c00222a0:	50                   	push   eax
c00222a1:	6a 06                	push   0x6
c00222a3:	56                   	push   esi
c00222a4:	53                   	push   ebx
c00222a5:	e8 d2 f6 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222aa:	83 c4 1c             	add    esp,0x1c
c00222ad:	6a 0c                	push   0xc
c00222af:	56                   	push   esi
c00222b0:	53                   	push   ebx
c00222b1:	e8 86 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00222b6:	83 c4 0c             	add    esp,0xc
c00222b9:	6a 0c                	push   0xc
c00222bb:	56                   	push   esi
c00222bc:	53                   	push   ebx
c00222bd:	e8 7a f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00222c2:	83 c4 0c             	add    esp,0xc
c00222c5:	6a 0c                	push   0xc
c00222c7:	56                   	push   esi
c00222c8:	53                   	push   ebx
c00222c9:	e8 6e f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00222ce:	83 c4 0c             	add    esp,0xc
c00222d1:	6a 0c                	push   0xc
c00222d3:	56                   	push   esi
c00222d4:	53                   	push   ebx
c00222d5:	e8 62 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00222da:	c7 04 24 ae f1 02 c0 	mov    DWORD PTR [esp],0xc002f1ae
c00222e1:	e8 ab bc fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00222e6:	68 ec 00 00 00       	push   0xec
c00222eb:	6a 07                	push   0x7
c00222ed:	56                   	push   esi
c00222ee:	53                   	push   ebx
c00222ef:	e8 88 f6 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222f4:	83 c4 1c             	add    esp,0x1c
c00222f7:	6a 0c                	push   0xc
c00222f9:	56                   	push   esi
c00222fa:	53                   	push   ebx
c00222fb:	e8 3c f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0022300:	83 c4 0c             	add    esp,0xc
c0022303:	6a 0c                	push   0xc
c0022305:	56                   	push   esi
c0022306:	53                   	push   ebx
c0022307:	e8 30 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c002230c:	83 c4 0c             	add    esp,0xc
c002230f:	6a 0c                	push   0xc
c0022311:	56                   	push   esi
c0022312:	53                   	push   ebx
c0022313:	e8 24 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0022318:	83 c4 0c             	add    esp,0xc
c002231b:	6a 0c                	push   0xc
c002231d:	56                   	push   esi
c002231e:	53                   	push   ebx
c002231f:	e8 18 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0022324:	c7 04 24 b1 f1 02 c0 	mov    DWORD PTR [esp],0xc002f1b1
c002232b:	e8 61 bc fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022330:	83 c4 0c             	add    esp,0xc
c0022333:	6a 0c                	push   0xc
c0022335:	56                   	push   esi
c0022336:	53                   	push   ebx
c0022337:	e8 00 f7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c002233c:	83 c4 10             	add    esp,0x10
c002233f:	84 c0                	test   al,al
c0022341:	75 1f                	jne    c0022362 <IDE::detect()+0x164>
c0022343:	83 ec 0c             	sub    esp,0xc
c0022346:	68 b4 f1 02 c0       	push   0xc002f1b4
c002234b:	e8 41 bc fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022350:	e9 e0 02 00 00       	jmp    c0022635 <IDE::detect()+0x437>
c0022355:	a8 80                	test   al,0x80
c0022357:	74 21                	je     c002237a <IDE::detect()+0x17c>
c0022359:	45                   	inc    ebp
c002235a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c0022360:	7f 1e                	jg     c0022380 <IDE::detect()+0x182>
c0022362:	50                   	push   eax
c0022363:	6a 0c                	push   0xc
c0022365:	56                   	push   esi
c0022366:	53                   	push   ebx
c0022367:	e8 d0 f6 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c002236c:	83 c4 10             	add    esp,0x10
c002236f:	a8 01                	test   al,0x1
c0022371:	74 e2                	je     c0022355 <IDE::detect()+0x157>
c0022373:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0022378:	eb 23                	jmp    c002239d <IDE::detect()+0x19f>
c002237a:	a8 08                	test   al,0x8
c002237c:	74 db                	je     c0022359 <IDE::detect()+0x15b>
c002237e:	eb 18                	jmp    c0022398 <IDE::detect()+0x19a>
c0022380:	50                   	push   eax
c0022381:	50                   	push   eax
c0022382:	6a 00                	push   0x0
c0022384:	6a 32                	push   0x32
c0022386:	e8 89 52 ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c002238b:	83 c4 10             	add    esp,0x10
c002238e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c0022394:	75 cc                	jne    c0022362 <IDE::detect()+0x164>
c0022396:	eb db                	jmp    c0022373 <IDE::detect()+0x175>
c0022398:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c002239d:	83 ec 0c             	sub    esp,0xc
c00223a0:	68 b7 f1 02 c0       	push   0xc002f1b7
c00223a5:	e8 e7 bb fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00223aa:	83 c4 10             	add    esp,0x10
c00223ad:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c00223b2:	74 56                	je     c002240a <IDE::detect()+0x20c>
c00223b4:	51                   	push   ecx
c00223b5:	6a 04                	push   0x4
c00223b7:	56                   	push   esi
c00223b8:	53                   	push   ebx
c00223b9:	e8 7e f6 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00223be:	83 c4 0c             	add    esp,0xc
c00223c1:	6a 05                	push   0x5
c00223c3:	56                   	push   esi
c00223c4:	53                   	push   ebx
c00223c5:	89 c5                	mov    ebp,eax
c00223c7:	e8 70 f6 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00223cc:	89 e9                	mov    ecx,ebp
c00223ce:	83 c4 10             	add    esp,0x10
c00223d1:	0f b6 e9             	movzx  ebp,cl
c00223d4:	83 fd 14             	cmp    ebp,0x14
c00223d7:	75 04                	jne    c00223dd <IDE::detect()+0x1df>
c00223d9:	3c eb                	cmp    al,0xeb
c00223db:	74 11                	je     c00223ee <IDE::detect()+0x1f0>
c00223dd:	83 fd 69             	cmp    ebp,0x69
c00223e0:	0f 85 52 02 00 00    	jne    c0022638 <IDE::detect()+0x43a>
c00223e6:	3c 96                	cmp    al,0x96
c00223e8:	0f 85 4a 02 00 00    	jne    c0022638 <IDE::detect()+0x43a>
c00223ee:	68 a1 00 00 00       	push   0xa1
c00223f3:	6a 07                	push   0x7
c00223f5:	56                   	push   esi
c00223f6:	53                   	push   ebx
c00223f7:	e8 80 f5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223fc:	58                   	pop    eax
c00223fd:	5a                   	pop    edx
c00223fe:	6a 00                	push   0x0
c0022400:	6a 0a                	push   0xa
c0022402:	e8 0d 52 ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0022407:	83 c4 10             	add    esp,0x10
c002240a:	83 ec 0c             	sub    esp,0xc
c002240d:	89 fd                	mov    ebp,edi
c002240f:	68 ba f1 02 c0       	push   0xc002f1ba
c0022414:	e8 78 bb fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022419:	8d 54 24 20          	lea    edx,[esp+0x20]
c002241d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0022424:	c1 e5 06             	shl    ebp,0x6
c0022427:	52                   	push   edx
c0022428:	01 dd                	add    ebp,ebx
c002242a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002242e:	6a 00                	push   0x0
c0022430:	56                   	push   esi
c0022431:	53                   	push   ebx
c0022432:	e8 f7 fc ff ff       	call   c002212e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022437:	83 c4 14             	add    esp,0x14
c002243a:	68 be f1 02 c0       	push   0xc002f1be
c002243f:	e8 4d bb fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022444:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022449:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c0022450:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c0022457:	89 f0                	mov    eax,esi
c0022459:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c002245f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022463:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c0022469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002246d:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c0022474:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c002247c:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c0022483:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c002248b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c0022491:	c7 04 24 c2 f1 02 c0 	mov    DWORD PTR [esp],0xc002f1c2
c0022498:	e8 f4 ba fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c002249d:	83 c4 10             	add    esp,0x10
c00224a0:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c00224a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224ab:	74 09                	je     c00224b6 <IDE::detect()+0x2b8>
c00224ad:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c00224b4:	eb 07                	jmp    c00224bd <IDE::detect()+0x2bf>
c00224b6:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00224bd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00224c1:	89 f8                	mov    eax,edi
c00224c3:	83 ec 0c             	sub    esp,0xc
c00224c6:	c1 e0 06             	shl    eax,0x6
c00224c9:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00224cc:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c00224d2:	68 c6 f1 02 c0       	push   0xc002f1c6
c00224d7:	e8 b5 ba fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00224dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00224e0:	89 e8                	mov    eax,ebp
c00224e2:	83 c4 10             	add    esp,0x10
c00224e5:	8d 6a 28             	lea    ebp,[edx+0x28]
c00224e8:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c00224eb:	83 c2 02             	add    edx,0x2
c00224ee:	83 c0 02             	add    eax,0x2
c00224f1:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c00224f7:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c00224fa:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c0022500:	39 d5                	cmp    ebp,edx
c0022502:	75 e4                	jne    c00224e8 <IDE::detect()+0x2ea>
c0022504:	89 f8                	mov    eax,edi
c0022506:	c1 e0 06             	shl    eax,0x6
c0022509:	01 d8                	add    eax,ebx
c002250b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022512:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c0022519:	c1 ea 09             	shr    edx,0x9
c002251c:	83 e2 01             	and    edx,0x1
c002251f:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c0022526:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002252c:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c0022530:	74 0c                	je     c002253e <IDE::detect()+0x340>
c0022532:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c002253b:	0f 95 c2             	setne  dl
c002253e:	89 fd                	mov    ebp,edi
c0022540:	83 ec 0c             	sub    esp,0xc
c0022543:	c1 e5 06             	shl    ebp,0x6
c0022546:	01 dd                	add    ebp,ebx
c0022548:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c002254e:	68 ca f1 02 c0       	push   0xc002f1ca
c0022553:	e8 39 ba fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022558:	83 c4 10             	add    esp,0x10
c002255b:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0022560:	75 66                	jne    c00225c8 <IDE::detect()+0x3ca>
c0022562:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c0022569:	0f 84 b8 00 00 00    	je     c0022627 <IDE::detect()+0x429>
c002256f:	83 ec 0c             	sub    esp,0xc
c0022572:	68 ce f1 02 c0       	push   0xc002f1ce
c0022577:	e8 15 ba fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c002257c:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c0022583:	e8 bc de fe ff       	call   c0010444 <malloc>
c0022588:	89 04 24             	mov    DWORD PTR [esp],eax
c002258b:	89 c5                	mov    ebp,eax
c002258d:	e8 44 05 00 00       	call   c0022ad6 <ATA::ATA()>
c0022592:	c7 04 24 d2 f1 02 c0 	mov    DWORD PTR [esp],0xc002f1d2
c0022599:	e8 f3 b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c002259e:	59                   	pop    ecx
c002259f:	58                   	pop    eax
c00225a0:	55                   	push   ebp
c00225a1:	53                   	push   ebx
c00225a2:	e8 a7 81 fe ff       	call   c000a74e <Device::addChild(Device*)>
c00225a7:	c7 04 24 d7 f1 02 c0 	mov    DWORD PTR [esp],0xc002f1d7
c00225ae:	e8 de b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00225b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00225b6:	53                   	push   ebx
c00225b7:	57                   	push   edi
c00225b8:	6a 00                	push   0x0
c00225ba:	55                   	push   ebp
c00225bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00225be:	83 c4 14             	add    esp,0x14
c00225c1:	68 dc f1 02 c0       	push   0xc002f1dc
c00225c6:	eb 57                	jmp    c002261f <IDE::detect()+0x421>
c00225c8:	83 ec 0c             	sub    esp,0xc
c00225cb:	68 e1 f1 02 c0       	push   0xc002f1e1
c00225d0:	e8 bc b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00225d5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00225dc:	e8 63 de fe ff       	call   c0010444 <malloc>
c00225e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00225e4:	89 c5                	mov    ebp,eax
c00225e6:	e8 b1 0c 00 00       	call   c002329c <ATAPI::ATAPI()>
c00225eb:	c7 04 24 e7 f1 02 c0 	mov    DWORD PTR [esp],0xc002f1e7
c00225f2:	e8 9a b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c00225f7:	58                   	pop    eax
c00225f8:	5a                   	pop    edx
c00225f9:	55                   	push   ebp
c00225fa:	53                   	push   ebx
c00225fb:	e8 4e 81 fe ff       	call   c000a74e <Device::addChild(Device*)>
c0022600:	c7 04 24 ee f1 02 c0 	mov    DWORD PTR [esp],0xc002f1ee
c0022607:	e8 85 b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c002260c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002260f:	53                   	push   ebx
c0022610:	57                   	push   edi
c0022611:	6a 00                	push   0x0
c0022613:	55                   	push   ebp
c0022614:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022617:	83 c4 14             	add    esp,0x14
c002261a:	68 f5 f1 02 c0       	push   0xc002f1f5
c002261f:	e8 6d b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	83 ec 0c             	sub    esp,0xc
c002262a:	47                   	inc    edi
c002262b:	68 fc f1 02 c0       	push   0xc002f1fc
c0022630:	e8 5c b9 fe ff       	call   c000df91 <KeSetBootMessage(char const*)>
c0022635:	83 c4 10             	add    esp,0x10
c0022638:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c002263c:	74 0c                	je     c002264a <IDE::detect()+0x44c>
c002263e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0022645:	e9 19 fc ff ff       	jmp    c0022263 <IDE::detect()+0x65>
c002264a:	4e                   	dec    esi
c002264b:	74 0a                	je     c0022657 <IDE::detect()+0x459>
c002264d:	be 01 00 00 00       	mov    esi,0x1
c0022652:	e9 f5 fb ff ff       	jmp    c002224c <IDE::detect()+0x4e>
c0022657:	81 c4 1c 02 00 00    	add    esp,0x21c
c002265d:	5b                   	pop    ebx
c002265e:	5e                   	pop    esi
c002265f:	5f                   	pop    edi
c0022660:	5d                   	pop    ebp
c0022661:	c3                   	ret    

c0022662 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022662:	55                   	push   ebp
c0022663:	57                   	push   edi
c0022664:	56                   	push   esi
c0022665:	53                   	push   ebx
c0022666:	83 ec 1c             	sub    esp,0x1c
c0022669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002266d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022671:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022679:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002267d:	88 c3                	mov    bl,al
c002267f:	25 ff 00 00 00       	and    eax,0xff
c0022684:	0f 84 88 00 00 00    	je     c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002268a:	83 ec 0c             	sub    esp,0xc
c002268d:	89 c7                	mov    edi,eax
c002268f:	68 00 f2 02 c0       	push   0xc002f200
c0022694:	e8 cd 48 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022699:	83 c4 10             	add    esp,0x10
c002269c:	83 ff 01             	cmp    edi,0x1
c002269f:	74 6b                	je     c002270c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c00226a1:	83 ff 02             	cmp    edi,0x2
c00226a4:	75 58                	jne    c00226fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c00226a6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00226ab:	50                   	push   eax
c00226ac:	6a 01                	push   0x1
c00226ae:	01 ff                	add    edi,edi
c00226b0:	09 fe                	or     esi,edi
c00226b2:	89 f0                	mov    eax,esi
c00226b4:	0f b6 f0             	movzx  esi,al
c00226b7:	c1 e6 06             	shl    esi,0x6
c00226ba:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c00226c2:	50                   	push   eax
c00226c3:	55                   	push   ebp
c00226c4:	e8 73 f3 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00226c9:	83 c4 10             	add    esp,0x10
c00226cc:	a8 01                	test   al,0x1
c00226ce:	74 02                	je     c00226d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c00226d0:	b3 07                	mov    bl,0x7
c00226d2:	a8 02                	test   al,0x2
c00226d4:	74 02                	je     c00226d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c00226d6:	b3 03                	mov    bl,0x3
c00226d8:	a8 04                	test   al,0x4
c00226da:	74 02                	je     c00226de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c00226dc:	b3 14                	mov    bl,0x14
c00226de:	a8 08                	test   al,0x8
c00226e0:	74 02                	je     c00226e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c00226e2:	b3 03                	mov    bl,0x3
c00226e4:	a8 10                	test   al,0x10
c00226e6:	74 02                	je     c00226ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c00226e8:	b3 15                	mov    bl,0x15
c00226ea:	a8 20                	test   al,0x20
c00226ec:	74 02                	je     c00226f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c00226ee:	b3 03                	mov    bl,0x3
c00226f0:	a8 40                	test   al,0x40
c00226f2:	74 02                	je     c00226f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00226f4:	b3 16                	mov    bl,0x16
c00226f6:	a8 80                	test   al,0x80
c00226f8:	74 18                	je     c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c00226fa:	b3 0d                	mov    bl,0xd
c00226fc:	eb 14                	jmp    c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c00226fe:	83 ff 03             	cmp    edi,0x3
c0022701:	74 0d                	je     c0022710 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c0022703:	83 ff 04             	cmp    edi,0x4
c0022706:	75 0a                	jne    c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022708:	b3 08                	mov    bl,0x8
c002270a:	eb 06                	jmp    c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002270c:	b3 13                	mov    bl,0x13
c002270e:	eb 02                	jmp    c0022712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022710:	b3 17                	mov    bl,0x17
c0022712:	83 c4 1c             	add    esp,0x1c
c0022715:	88 d8                	mov    al,bl
c0022717:	5b                   	pop    ebx
c0022718:	5e                   	pop    esi
c0022719:	5f                   	pop    edi
c002271a:	5d                   	pop    ebp
c002271b:	c3                   	ret    

c002271c <IDE::polling(unsigned char, unsigned int)>:
c002271c:	57                   	push   edi
c002271d:	56                   	push   esi
c002271e:	53                   	push   ebx
c002271f:	bb 04 00 00 00       	mov    ebx,0x4
c0022724:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022728:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002272d:	52                   	push   edx
c002272e:	6a 0c                	push   0xc
c0022730:	56                   	push   esi
c0022731:	57                   	push   edi
c0022732:	e8 05 f3 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0022737:	83 c4 10             	add    esp,0x10
c002273a:	4b                   	dec    ebx
c002273b:	75 f0                	jne    c002272d <IDE::polling(unsigned char, unsigned int)+0x11>
c002273d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022742:	50                   	push   eax
c0022743:	6a 0c                	push   0xc
c0022745:	56                   	push   esi
c0022746:	57                   	push   edi
c0022747:	e8 f0 f2 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c002274c:	83 c4 10             	add    esp,0x10
c002274f:	a8 01                	test   al,0x1
c0022751:	75 17                	jne    c002276a <IDE::polling(unsigned char, unsigned int)+0x4e>
c0022753:	a8 20                	test   al,0x20
c0022755:	75 0f                	jne    c0022766 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0022757:	4b                   	dec    ebx
c0022758:	74 10                	je     c002276a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002275a:	a8 80                	test   al,0x80
c002275c:	75 e4                	jne    c0022742 <IDE::polling(unsigned char, unsigned int)+0x26>
c002275e:	a8 08                	test   al,0x8
c0022760:	74 e0                	je     c0022742 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022762:	31 c0                	xor    eax,eax
c0022764:	eb 06                	jmp    c002276c <IDE::polling(unsigned char, unsigned int)+0x50>
c0022766:	b0 01                	mov    al,0x1
c0022768:	eb 02                	jmp    c002276c <IDE::polling(unsigned char, unsigned int)+0x50>
c002276a:	b0 02                	mov    al,0x2
c002276c:	5b                   	pop    ebx
c002276d:	5e                   	pop    esi
c002276e:	5f                   	pop    edi
c002276f:	c3                   	ret    

c0022770 <SATABus::close(int, int, void*)>:
c0022770:	31 c0                	xor    eax,eax
c0022772:	c3                   	ret    
c0022773:	90                   	nop

c0022774 <SATABus::detect()>:
c0022774:	c3                   	ret    
c0022775:	90                   	nop

c0022776 <SATABus::SATABus()>:
c0022776:	83 ec 0c             	sub    esp,0xc
c0022779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002277d:	83 ec 08             	sub    esp,0x8
c0022780:	68 38 f2 02 c0       	push   0xc002f238
c0022785:	50                   	push   eax
c0022786:	e8 1d 83 fe ff       	call   c000aaa8 <HardDiskController::HardDiskController(char const*)>
c002278b:	83 c4 10             	add    esp,0x10
c002278e:	ba 64 f2 02 c0       	mov    edx,0xc002f264
c0022793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022797:	89 10                	mov    DWORD PTR [eax],edx
c0022799:	83 ec 0c             	sub    esp,0xc
c002279c:	6a 50                	push   0x50
c002279e:	e8 d6 e3 fe ff       	call   c0010b79 <Phys::allocateContiguousPages(int)>
c00227a3:	83 c4 10             	add    esp,0x10
c00227a6:	89 c2                	mov    edx,eax
c00227a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	6a 50                	push   0x50
c00227b7:	e8 23 16 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c00227bc:	83 c4 10             	add    esp,0x10
c00227bf:	89 c2                	mov    edx,eax
c00227c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00227cb:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c00227d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00227d4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00227da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00227de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00227e4:	83 ec 0c             	sub    esp,0xc
c00227e7:	6a 03                	push   0x3
c00227e9:	6a 50                	push   0x50
c00227eb:	51                   	push   ecx
c00227ec:	52                   	push   edx
c00227ed:	50                   	push   eax
c00227ee:	e8 bf 1e ff ff       	call   c00146b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00227f3:	83 c4 20             	add    esp,0x20
c00227f6:	90                   	nop
c00227f7:	83 c4 0c             	add    esp,0xc
c00227fa:	c3                   	ret    
c00227fb:	90                   	nop

c00227fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00227fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022800:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022803:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022806:	09 c2                	or     edx,eax
c0022808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002280c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022812:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022814:	31 c0                	xor    eax,eax
c0022816:	c1 e9 08             	shr    ecx,0x8
c0022819:	83 e1 0f             	and    ecx,0xf
c002281c:	39 c8                	cmp    eax,ecx
c002281e:	74 0a                	je     c002282a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0022820:	f6 c2 01             	test   dl,0x1
c0022823:	74 08                	je     c002282d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022825:	d1 ea                	shr    edx,1
c0022827:	40                   	inc    eax
c0022828:	eb f2                	jmp    c002281c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002282a:	83 c8 ff             	or     eax,0xffffffff
c002282d:	c3                   	ret    

c002282e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002282e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022832:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022835:	89 c2                	mov    edx,eax
c0022837:	c1 ea 08             	shr    edx,0x8
c002283a:	83 e2 0f             	and    edx,0xf
c002283d:	4a                   	dec    edx
c002283e:	75 32                	jne    c0022872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022840:	83 e0 0f             	and    eax,0xf
c0022843:	83 f8 03             	cmp    eax,0x3
c0022846:	75 2a                	jne    c0022872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022848:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002284b:	b8 02 00 00 00       	mov    eax,0x2
c0022850:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022856:	74 1c                	je     c0022874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022858:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002285e:	b8 04 00 00 00       	mov    eax,0x4
c0022863:	74 0f                	je     c0022874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022865:	31 c0                	xor    eax,eax
c0022867:	83 fa 03             	cmp    edx,0x3
c002286a:	0f 94 c0             	sete   al
c002286d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022871:	c3                   	ret    
c0022872:	31 c0                	xor    eax,eax
c0022874:	c3                   	ret    
c0022875:	90                   	nop

c0022876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002287a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002287d:	0f ba e2 0f          	bt     edx,0xf
c0022881:	72 f7                	jb     c002287a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022883:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022886:	83 ca 10             	or     edx,0x10
c0022889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002288c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002288f:	83 ca 01             	or     edx,0x1
c0022892:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022895:	c3                   	ret    

c0022896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002289a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002289d:	83 e2 fe             	and    edx,0xfffffffe
c00228a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00228a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00228a6:	83 e2 ef             	and    edx,0xffffffef
c00228a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00228ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00228af:	0f ba e2 0e          	bt     edx,0xe
c00228b3:	72 f7                	jb     c00228ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00228b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00228b8:	0f ba e2 0f          	bt     edx,0xf
c00228bc:	72 ee                	jb     c00228ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00228be:	c3                   	ret    
c00228bf:	90                   	nop

c00228c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00228c0:	55                   	push   ebp
c00228c1:	57                   	push   edi
c00228c2:	56                   	push   esi
c00228c3:	53                   	push   ebx
c00228c4:	83 ec 1c             	sub    esp,0x1c
c00228c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00228cf:	53                   	push   ebx
c00228d0:	57                   	push   edi
c00228d1:	e8 c0 ff ff ff       	call   c0022896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00228d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00228da:	83 ec 0c             	sub    esp,0xc
c00228dd:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c00228e3:	c1 e5 0a             	shl    ebp,0xa
c00228e6:	01 e8                	add    eax,ebp
c00228e8:	89 03                	mov    DWORD PTR [ebx],eax
c00228ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00228ec:	68 00 04 00 00       	push   0x400
c00228f1:	6a 00                	push   0x0
c00228f3:	50                   	push   eax
c00228f4:	e8 f7 db fd ff       	call   c00004f0 <memset>
c00228f9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c00228ff:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022903:	83 c4 1c             	add    esp,0x1c
c0022906:	01 e8                	add    eax,ebp
c0022908:	89 03                	mov    DWORD PTR [ebx],eax
c002290a:	c1 e6 08             	shl    esi,0x8
c002290d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022914:	81 c6 00 80 00 00    	add    esi,0x8000
c002291a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0022920:	01 f0                	add    eax,esi
c0022922:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022925:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022928:	68 00 01 00 00       	push   0x100
c002292d:	6a 00                	push   0x0
c002292f:	50                   	push   eax
c0022930:	e8 bb db fd ff       	call   c00004f0 <memset>
c0022935:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002293b:	31 d2                	xor    edx,edx
c002293d:	01 f0                	add    eax,esi
c002293f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022942:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022949:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002294f:	01 ee                	add    esi,ebp
c0022951:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022955:	83 c4 10             	add    esp,0x10
c0022958:	c1 e5 0d             	shl    ebp,0xd
c002295b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c0022961:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c0022967:	83 c6 20             	add    esi,0x20
c002296a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002296e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0022974:	01 e8                	add    eax,ebp
c0022976:	01 d0                	add    eax,edx
c0022978:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002297b:	52                   	push   edx
c002297c:	68 00 01 00 00       	push   0x100
c0022981:	6a 00                	push   0x0
c0022983:	50                   	push   eax
c0022984:	e8 67 db fd ff       	call   c00004f0 <memset>
c0022989:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002298f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c0022996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002299a:	83 c4 10             	add    esp,0x10
c002299d:	01 e8                	add    eax,ebp
c002299f:	01 d0                	add    eax,edx
c00229a1:	81 c2 00 01 00 00    	add    edx,0x100
c00229a7:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c00229aa:	81 fa 00 20 00 00    	cmp    edx,0x2000
c00229b0:	75 af                	jne    c0022961 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c00229b2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00229b9:	50                   	push   eax
c00229ba:	50                   	push   eax
c00229bb:	53                   	push   ebx
c00229bc:	57                   	push   edi
c00229bd:	e8 b4 fe ff ff       	call   c0022876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00229c2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00229c9:	83 c4 2c             	add    esp,0x2c
c00229cc:	5b                   	pop    ebx
c00229cd:	5e                   	pop    esi
c00229ce:	5f                   	pop    edi
c00229cf:	5d                   	pop    ebp
c00229d0:	c3                   	ret    
c00229d1:	90                   	nop

c00229d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00229d2:	55                   	push   ebp
c00229d3:	57                   	push   edi
c00229d4:	56                   	push   esi
c00229d5:	53                   	push   ebx
c00229d6:	31 db                	xor    ebx,ebx
c00229d8:	83 ec 0c             	sub    esp,0xc
c00229db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00229df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00229e3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00229e6:	f7 c7 01 00 00 00    	test   edi,0x1
c00229ec:	74 7a                	je     c0022a68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00229ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00229f2:	89 d8                	mov    eax,ebx
c00229f4:	c1 e0 07             	shl    eax,0x7
c00229f7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00229fe:	55                   	push   ebp
c00229ff:	56                   	push   esi
c0022a00:	e8 29 fe ff ff       	call   c002282e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022a05:	5a                   	pop    edx
c0022a06:	59                   	pop    ecx
c0022a07:	83 f8 01             	cmp    eax,0x1
c0022a0a:	75 21                	jne    c0022a2d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0022a0c:	50                   	push   eax
c0022a0d:	53                   	push   ebx
c0022a0e:	55                   	push   ebp
c0022a0f:	56                   	push   esi
c0022a10:	e8 ab fe ff ff       	call   c00228c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022a15:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022a1c:	e8 23 da fe ff       	call   c0010444 <malloc>
c0022a21:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a24:	89 c5                	mov    ebp,eax
c0022a26:	e8 37 0f 00 00       	call   c0023962 <SATA::SATA()>
c0022a2b:	eb 24                	jmp    c0022a51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0022a2d:	83 f8 04             	cmp    eax,0x4
c0022a30:	75 36                	jne    c0022a68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0022a32:	51                   	push   ecx
c0022a33:	53                   	push   ebx
c0022a34:	55                   	push   ebp
c0022a35:	56                   	push   esi
c0022a36:	e8 85 fe ff ff       	call   c00228c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022a3b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0022a42:	e8 fd d9 fe ff       	call   c0010444 <malloc>
c0022a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a4a:	89 c5                	mov    ebp,eax
c0022a4c:	e8 a7 12 00 00       	call   c0023cf8 <SATAPI::SATAPI()>
c0022a51:	58                   	pop    eax
c0022a52:	5a                   	pop    edx
c0022a53:	55                   	push   ebp
c0022a54:	56                   	push   esi
c0022a55:	e8 f4 7c fe ff       	call   c000a74e <Device::addChild(Device*)>
c0022a5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0022a5d:	56                   	push   esi
c0022a5e:	6a 00                	push   0x0
c0022a60:	53                   	push   ebx
c0022a61:	55                   	push   ebp
c0022a62:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0022a65:	83 c4 20             	add    esp,0x20
c0022a68:	d1 ef                	shr    edi,1
c0022a6a:	43                   	inc    ebx
c0022a6b:	83 fb 20             	cmp    ebx,0x20
c0022a6e:	0f 85 72 ff ff ff    	jne    c00229e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022a74:	83 c4 0c             	add    esp,0xc
c0022a77:	5b                   	pop    ebx
c0022a78:	5e                   	pop    esi
c0022a79:	5f                   	pop    edi
c0022a7a:	5d                   	pop    ebp
c0022a7b:	c3                   	ret    

c0022a7c <SATABus::open(int, int, void*)>:
c0022a7c:	53                   	push   ebx
c0022a7d:	83 ec 08             	sub    esp,0x8
c0022a80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a84:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c0022a8a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022a90:	e8 8f 46 ff ff       	call   c0017124 <KeDisablePreemption()>
c0022a95:	52                   	push   edx
c0022a96:	52                   	push   edx
c0022a97:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c0022a9d:	53                   	push   ebx
c0022a9e:	e8 2f ff ff ff       	call   c00229d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022aa3:	e8 a4 46 ff ff       	call   c001714c <KeRestorePreemption()>
c0022aa8:	83 c4 18             	add    esp,0x18
c0022aab:	31 c0                	xor    eax,eax
c0022aad:	5b                   	pop    ebx
c0022aae:	c3                   	ret    
c0022aaf:	90                   	nop

c0022ab0 <ATA::close(int, int, void*)>:
c0022ab0:	83 ec 0c             	sub    esp,0xc
c0022ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022abd:	85 c0                	test   eax,eax
c0022abf:	74 0c                	je     c0022acd <ATA::close(int, int, void*)+0x1d>
c0022ac1:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ac3:	83 ec 0c             	sub    esp,0xc
c0022ac6:	50                   	push   eax
c0022ac7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022aca:	83 c4 10             	add    esp,0x10
c0022acd:	31 c0                	xor    eax,eax
c0022acf:	83 c4 0c             	add    esp,0xc
c0022ad2:	c3                   	ret    
c0022ad3:	90                   	nop

c0022ad4 <ATA::powerSaving(PowerSavingLevel)>:
c0022ad4:	c3                   	ret    
c0022ad5:	90                   	nop

c0022ad6 <ATA::ATA()>:
c0022ad6:	83 ec 0c             	sub    esp,0xc
c0022ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022add:	83 ec 04             	sub    esp,0x4
c0022ae0:	68 00 02 00 00       	push   0x200
c0022ae5:	68 e5 f3 02 c0       	push   0xc002f3e5
c0022aea:	50                   	push   eax
c0022aeb:	e8 42 80 fe ff       	call   c000ab32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022af0:	83 c4 10             	add    esp,0x10
c0022af3:	ba 4c f3 02 c0       	mov    edx,0xc002f34c
c0022af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022afc:	89 10                	mov    DWORD PTR [eax],edx
c0022afe:	90                   	nop
c0022aff:	83 c4 0c             	add    esp,0xc
c0022b02:	c3                   	ret    
c0022b03:	90                   	nop

c0022b04 <ATA::flush(bool)>:
c0022b04:	53                   	push   ebx
c0022b05:	83 ec 08             	sub    esp,0x8
c0022b08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022b11:	83 f8 01             	cmp    eax,0x1
c0022b14:	19 c0                	sbb    eax,eax
c0022b16:	83 e0 fd             	and    eax,0xfffffffd
c0022b19:	05 ea 00 00 00       	add    eax,0xea
c0022b1e:	50                   	push   eax
c0022b1f:	6a 07                	push   0x7
c0022b21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022b28:	50                   	push   eax
c0022b29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022b2f:	e8 48 ee ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b34:	83 c4 0c             	add    esp,0xc
c0022b37:	6a 00                	push   0x0
c0022b39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022b40:	50                   	push   eax
c0022b41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022b47:	e8 d0 fb ff ff       	call   c002271c <IDE::polling(unsigned char, unsigned int)>
c0022b4c:	83 c4 18             	add    esp,0x18
c0022b4f:	5b                   	pop    ebx
c0022b50:	c3                   	ret    
c0022b51:	90                   	nop

c0022b52 <ATA::readyForCommand()>:
c0022b52:	56                   	push   esi
c0022b53:	53                   	push   ebx
c0022b54:	31 db                	xor    ebx,ebx
c0022b56:	50                   	push   eax
c0022b57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b5b:	50                   	push   eax
c0022b5c:	6a 0c                	push   0xc
c0022b5e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022b65:	50                   	push   eax
c0022b66:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022b6c:	e8 cb ee ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c0022b71:	83 c4 10             	add    esp,0x10
c0022b74:	a8 88                	test   al,0x88
c0022b76:	74 20                	je     c0022b98 <ATA::readyForCommand()+0x46>
c0022b78:	43                   	inc    ebx
c0022b79:	83 fb 63             	cmp    ebx,0x63
c0022b7c:	7e dd                	jle    c0022b5b <ATA::readyForCommand()+0x9>
c0022b7e:	51                   	push   ecx
c0022b7f:	51                   	push   ecx
c0022b80:	6a 00                	push   0x0
c0022b82:	6a 0a                	push   0xa
c0022b84:	e8 8b 4a ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0022b89:	83 c4 10             	add    esp,0x10
c0022b8c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022b92:	75 c7                	jne    c0022b5b <ATA::readyForCommand()+0x9>
c0022b94:	31 c0                	xor    eax,eax
c0022b96:	eb 02                	jmp    c0022b9a <ATA::readyForCommand()+0x48>
c0022b98:	b0 01                	mov    al,0x1
c0022b9a:	5a                   	pop    edx
c0022b9b:	5b                   	pop    ebx
c0022b9c:	5e                   	pop    esi
c0022b9d:	c3                   	ret    

c0022b9e <ATA::access(unsigned long long, int, void*, bool)>:
c0022b9e:	55                   	push   ebp
c0022b9f:	57                   	push   edi
c0022ba0:	56                   	push   esi
c0022ba1:	53                   	push   ebx
c0022ba2:	83 ec 2c             	sub    esp,0x2c
c0022ba5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022ba9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022bad:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022bb1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022bb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022bb9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022bbd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022bc1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022bc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022bcb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022bd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022bd5:	c1 e0 06             	shl    eax,0x6
c0022bd8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022be0:	74 5b                	je     c0022c3d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c0022be2:	89 fa                	mov    edx,edi
c0022be4:	89 f0                	mov    eax,esi
c0022be6:	c1 ea 1c             	shr    edx,0x1c
c0022be9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c0022bed:	89 d1                	mov    ecx,edx
c0022bef:	09 c1                	or     ecx,eax
c0022bf1:	74 25                	je     c0022c18 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022bf3:	31 ed                	xor    ebp,ebp
c0022bf5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022bfc:	89 fa                	mov    edx,edi
c0022bfe:	89 f0                	mov    eax,esi
c0022c00:	0f ad d0             	shrd   eax,edx,cl
c0022c03:	d3 ea                	shr    edx,cl
c0022c05:	f6 c1 20             	test   cl,0x20
c0022c08:	74 02                	je     c0022c0c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0022c0a:	89 d0                	mov    eax,edx
c0022c0c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022c10:	45                   	inc    ebp
c0022c11:	83 fd 06             	cmp    ebp,0x6
c0022c14:	75 df                	jne    c0022bf5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022c16:	eb 71                	jmp    c0022c89 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c0022c18:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022c1d:	89 f0                	mov    eax,esi
c0022c1f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022c26:	0f ac f8 10          	shrd   eax,edi,0x10
c0022c2a:	bf 01 00 00 00       	mov    edi,0x1
c0022c2f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022c33:	c1 ee 18             	shr    esi,0x18
c0022c36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022c3b:	eb 53                	jmp    c0022c90 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0022c3d:	6a 00                	push   0x0
c0022c3f:	6a 3f                	push   0x3f
c0022c41:	57                   	push   edi
c0022c42:	56                   	push   esi
c0022c43:	e8 cc 20 00 00       	call   c0024d14 <__umoddi3>
c0022c48:	83 c4 10             	add    esp,0x10
c0022c4b:	40                   	inc    eax
c0022c4c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022c50:	6a 00                	push   0x0
c0022c52:	68 f0 03 00 00       	push   0x3f0
c0022c57:	57                   	push   edi
c0022c58:	56                   	push   esi
c0022c59:	e8 b6 1f 00 00       	call   c0024c14 <__udivdi3>
c0022c5e:	83 c4 10             	add    esp,0x10
c0022c61:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022c66:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022c6d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022c72:	6a 00                	push   0x0
c0022c74:	6a 3f                	push   0x3f
c0022c76:	57                   	push   edi
c0022c77:	31 ff                	xor    edi,edi
c0022c79:	56                   	push   esi
c0022c7a:	e8 95 1f 00 00       	call   c0024c14 <__udivdi3>
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	83 e0 0f             	and    eax,0xf
c0022c85:	89 c6                	mov    esi,eax
c0022c87:	eb 07                	jmp    c0022c90 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0022c89:	31 f6                	xor    esi,esi
c0022c8b:	bf 02 00 00 00       	mov    edi,0x2
c0022c90:	55                   	push   ebp
c0022c91:	6a 00                	push   0x0
c0022c93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022c9a:	50                   	push   eax
c0022c9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c9f:	e8 e8 ee ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c0022ca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ca7:	e8 a6 fe ff ff       	call   c0022b52 <ATA::readyForCommand()>
c0022cac:	83 c4 10             	add    esp,0x10
c0022caf:	84 c0                	test   al,al
c0022cb1:	75 0a                	jne    c0022cbd <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c0022cb3:	be 01 00 00 00       	mov    esi,0x1
c0022cb8:	e9 df 02 00 00       	jmp    c0022f9c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c0022cbd:	fa                   	cli    
c0022cbe:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022cc4:	f7 c7 03 00 00 00    	test   edi,0x3
c0022cca:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022cd0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022cd6:	75 0a                	jne    c0022ce2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c0022cd8:	c1 e0 04             	shl    eax,0x4
c0022cdb:	09 c6                	or     esi,eax
c0022cdd:	83 ce a0             	or     esi,0xffffffa0
c0022ce0:	eb 08                	jmp    c0022cea <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c0022ce2:	c1 e0 04             	shl    eax,0x4
c0022ce5:	09 c6                	or     esi,eax
c0022ce7:	83 ce e0             	or     esi,0xffffffe0
c0022cea:	89 f0                	mov    eax,esi
c0022cec:	0f b6 d2             	movzx  edx,dl
c0022cef:	0f b6 f0             	movzx  esi,al
c0022cf2:	56                   	push   esi
c0022cf3:	6a 06                	push   0x6
c0022cf5:	52                   	push   edx
c0022cf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022cfc:	e8 7b ec ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d01:	83 c4 10             	add    esp,0x10
c0022d04:	6a 00                	push   0x0
c0022d06:	6a 01                	push   0x1
c0022d08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d0f:	50                   	push   eax
c0022d10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d16:	e8 61 ec ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d1b:	89 f8                	mov    eax,edi
c0022d1d:	83 c4 10             	add    esp,0x10
c0022d20:	0f b6 f0             	movzx  esi,al
c0022d23:	83 fe 02             	cmp    esi,0x2
c0022d26:	75 6e                	jne    c0022d96 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0022d28:	6a 00                	push   0x0
c0022d2a:	6a 08                	push   0x8
c0022d2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d33:	50                   	push   eax
c0022d34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d3a:	e8 3d ec ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d3f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022d44:	50                   	push   eax
c0022d45:	6a 09                	push   0x9
c0022d47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d4e:	50                   	push   eax
c0022d4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d55:	e8 22 ec ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d5a:	83 c4 20             	add    esp,0x20
c0022d5d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022d62:	50                   	push   eax
c0022d63:	6a 0a                	push   0xa
c0022d65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d6c:	50                   	push   eax
c0022d6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d73:	e8 04 ec ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d78:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0022d7d:	50                   	push   eax
c0022d7e:	6a 0b                	push   0xb
c0022d80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d87:	50                   	push   eax
c0022d88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d8e:	e8 e9 eb ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d93:	83 c4 20             	add    esp,0x20
c0022d96:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0022d9b:	50                   	push   eax
c0022d9c:	6a 02                	push   0x2
c0022d9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022da5:	50                   	push   eax
c0022da6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022dac:	e8 cb eb ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022db1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022db6:	50                   	push   eax
c0022db7:	6a 03                	push   0x3
c0022db9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022dc0:	50                   	push   eax
c0022dc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022dc7:	e8 b0 eb ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dcc:	83 c4 20             	add    esp,0x20
c0022dcf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022dd4:	50                   	push   eax
c0022dd5:	6a 04                	push   0x4
c0022dd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022dde:	50                   	push   eax
c0022ddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022de5:	e8 92 eb ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dea:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022def:	50                   	push   eax
c0022df0:	6a 05                	push   0x5
c0022df2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022df9:	50                   	push   eax
c0022dfa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e00:	e8 77 eb ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e05:	83 c4 20             	add    esp,0x20
c0022e08:	83 fe 02             	cmp    esi,0x2
c0022e0b:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c0022e10:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0022e15:	85 c9                	test   ecx,ecx
c0022e17:	74 07                	je     c0022e20 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0022e19:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022e1e:	75 45                	jne    c0022e65 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c0022e20:	89 f8                	mov    eax,edi
c0022e22:	0f b6 f8             	movzx  edi,al
c0022e25:	31 c0                	xor    eax,eax
c0022e27:	4f                   	dec    edi
c0022e28:	0f 94 c0             	sete   al
c0022e2b:	89 c6                	mov    esi,eax
c0022e2d:	75 0c                	jne    c0022e3b <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c0022e2f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022e34:	b8 30 00 00 00       	mov    eax,0x30
c0022e39:	75 2f                	jne    c0022e6a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0022e3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e3f:	83 f2 01             	xor    edx,0x1
c0022e42:	85 c9                	test   ecx,ecx
c0022e44:	74 09                	je     c0022e4f <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c0022e46:	84 d2                	test   dl,dl
c0022e48:	b8 24 00 00 00       	mov    eax,0x24
c0022e4d:	75 1b                	jne    c0022e6a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0022e4f:	85 f6                	test   esi,esi
c0022e51:	0f 84 5c fe ff ff    	je     c0022cb3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0022e57:	84 d2                	test   dl,dl
c0022e59:	b8 20 00 00 00       	mov    eax,0x20
c0022e5e:	75 0a                	jne    c0022e6a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0022e60:	e9 4e fe ff ff       	jmp    c0022cb3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0022e65:	b8 34 00 00 00       	mov    eax,0x34
c0022e6a:	50                   	push   eax
c0022e6b:	6a 07                	push   0x7
c0022e6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e74:	50                   	push   eax
c0022e75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e7b:	e8 fc ea ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e80:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022e87:	83 c4 10             	add    esp,0x10
c0022e8a:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0022e91:	75 01                	jne    c0022e94 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c0022e93:	fb                   	sti    
c0022e94:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0022e98:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c0022e9d:	85 f6                	test   esi,esi
c0022e9f:	0f 84 dd 00 00 00    	je     c0022f82 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0022ea5:	57                   	push   edi
c0022ea6:	6a 01                	push   0x1
c0022ea8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022eaf:	50                   	push   eax
c0022eb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022eb6:	e8 61 f8 ff ff       	call   c002271c <IDE::polling(unsigned char, unsigned int)>
c0022ebb:	83 c4 10             	add    esp,0x10
c0022ebe:	0f b6 c0             	movzx  eax,al
c0022ec1:	85 c0                	test   eax,eax
c0022ec3:	74 23                	je     c0022ee8 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c0022ec5:	50                   	push   eax
c0022ec6:	89 c6                	mov    esi,eax
c0022ec8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022ecf:	50                   	push   eax
c0022ed0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ed7:	50                   	push   eax
c0022ed8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ede:	e8 7f f7 ff ff       	call   c0022662 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022ee3:	e9 b1 00 00 00       	jmp    c0022f99 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c0022ee8:	85 ed                	test   ebp,ebp
c0022eea:	74 49                	je     c0022f35 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c0022eec:	fa                   	cli    
c0022eed:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022ef3:	31 ff                	xor    edi,edi
c0022ef5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022ef9:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c0022efd:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0022f02:	51                   	push   ecx
c0022f03:	51                   	push   ecx
c0022f04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f0b:	50                   	push   eax
c0022f0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f12:	e8 53 ea ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c0022f17:	89 c2                	mov    edx,eax
c0022f19:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f1e:	66 ef                	out    dx,ax
c0022f20:	47                   	inc    edi
c0022f21:	83 c4 10             	add    esp,0x10
c0022f24:	81 ff 00 01 00 00    	cmp    edi,0x100
c0022f2a:	75 c9                	jne    c0022ef5 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c0022f2c:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022f33:	eb 35                	jmp    c0022f6a <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c0022f35:	fa                   	cli    
c0022f36:	52                   	push   edx
c0022f37:	52                   	push   edx
c0022f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f3f:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022f45:	50                   	push   eax
c0022f46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f4c:	e8 19 ea ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c0022f51:	b9 00 01 00 00       	mov    ecx,0x100
c0022f56:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0022f5a:	89 c2                	mov    edx,eax
c0022f5c:	fc                   	cld    
c0022f5d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0022f60:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022f67:	83 c4 10             	add    esp,0x10
c0022f6a:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0022f71:	75 01                	jne    c0022f74 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c0022f73:	fb                   	sti    
c0022f74:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0022f7c:	4e                   	dec    esi
c0022f7d:	e9 1b ff ff ff       	jmp    c0022e9d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c0022f82:	31 f6                	xor    esi,esi
c0022f84:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022f89:	74 11                	je     c0022f9c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c0022f8b:	50                   	push   eax
c0022f8c:	50                   	push   eax
c0022f8d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022f92:	50                   	push   eax
c0022f93:	53                   	push   ebx
c0022f94:	e8 6b fb ff ff       	call   c0022b04 <ATA::flush(bool)>
c0022f99:	83 c4 10             	add    esp,0x10
c0022f9c:	83 c4 2c             	add    esp,0x2c
c0022f9f:	89 f0                	mov    eax,esi
c0022fa1:	5b                   	pop    ebx
c0022fa2:	5e                   	pop    esi
c0022fa3:	5f                   	pop    edi
c0022fa4:	5d                   	pop    ebp
c0022fa5:	c3                   	ret    

c0022fa6 <ATA::read(unsigned long long, int, void*)>:
c0022fa6:	57                   	push   edi
c0022fa7:	b8 04 00 00 00       	mov    eax,0x4
c0022fac:	56                   	push   esi
c0022fad:	53                   	push   ebx
c0022fae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022fb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022fb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022fba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022fbe:	8d 7a ff             	lea    edi,[edx-0x1]
c0022fc1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022fc7:	77 25                	ja     c0022fee <ATA::read(unsigned long long, int, void*)+0x48>
c0022fc9:	85 f6                	test   esi,esi
c0022fcb:	b8 06 00 00 00       	mov    eax,0x6
c0022fd0:	74 1c                	je     c0022fee <ATA::read(unsigned long long, int, void*)+0x48>
c0022fd2:	50                   	push   eax
c0022fd3:	50                   	push   eax
c0022fd4:	6a 00                	push   0x0
c0022fd6:	56                   	push   esi
c0022fd7:	52                   	push   edx
c0022fd8:	53                   	push   ebx
c0022fd9:	51                   	push   ecx
c0022fda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fde:	e8 bb fb ff ff       	call   c0022b9e <ATA::access(unsigned long long, int, void*, bool)>
c0022fe3:	83 c4 20             	add    esp,0x20
c0022fe6:	85 c0                	test   eax,eax
c0022fe8:	0f 95 c0             	setne  al
c0022feb:	0f b6 c0             	movzx  eax,al
c0022fee:	5b                   	pop    ebx
c0022fef:	5e                   	pop    esi
c0022ff0:	5f                   	pop    edi
c0022ff1:	c3                   	ret    

c0022ff2 <ATA::write(unsigned long long, int, void*)>:
c0022ff2:	57                   	push   edi
c0022ff3:	b8 04 00 00 00       	mov    eax,0x4
c0022ff8:	56                   	push   esi
c0022ff9:	53                   	push   ebx
c0022ffa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022ffe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023002:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023006:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002300a:	8d 7a ff             	lea    edi,[edx-0x1]
c002300d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0023013:	77 25                	ja     c002303a <ATA::write(unsigned long long, int, void*)+0x48>
c0023015:	85 f6                	test   esi,esi
c0023017:	b8 06 00 00 00       	mov    eax,0x6
c002301c:	74 1c                	je     c002303a <ATA::write(unsigned long long, int, void*)+0x48>
c002301e:	50                   	push   eax
c002301f:	50                   	push   eax
c0023020:	6a 01                	push   0x1
c0023022:	56                   	push   esi
c0023023:	52                   	push   edx
c0023024:	53                   	push   ebx
c0023025:	51                   	push   ecx
c0023026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002302a:	e8 6f fb ff ff       	call   c0022b9e <ATA::access(unsigned long long, int, void*, bool)>
c002302f:	83 c4 20             	add    esp,0x20
c0023032:	85 c0                	test   eax,eax
c0023034:	0f 95 c0             	setne  al
c0023037:	0f b6 c0             	movzx  eax,al
c002303a:	5b                   	pop    ebx
c002303b:	5e                   	pop    esi
c002303c:	5f                   	pop    edi
c002303d:	c3                   	ret    

c002303e <ATA::detectCHS()>:
c002303e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023042:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023048:	c1 e0 06             	shl    eax,0x6
c002304b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023051:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002305b:	c7 44 24 04 88 f2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002f288
c0023063:	e9 30 d8 fe ff       	jmp    c0010898 <KePanic(char const*)>

c0023068 <ATA::open(int, int, void*)>:
c0023068:	53                   	push   ebx
c0023069:	83 ec 08             	sub    esp,0x8
c002306c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023070:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023074:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023078:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002307e:	c1 e0 06             	shl    eax,0x6
c0023081:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023087:	01 d0                	add    eax,edx
c0023089:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023090:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023096:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002309d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00230a7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00230ae:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00230b4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00230bb:	75 0c                	jne    c00230c9 <ATA::open(int, int, void*)+0x61>
c00230bd:	83 ec 0c             	sub    esp,0xc
c00230c0:	53                   	push   ebx
c00230c1:	e8 78 ff ff ff       	call   c002303e <ATA::detectCHS()>
c00230c6:	83 c4 10             	add    esp,0x10
c00230c9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00230cf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00230d5:	c1 e0 06             	shl    eax,0x6
c00230d8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00230df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00230e9:	d1 e8                	shr    eax,1
c00230eb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00230f1:	6a 04                	push   0x4
c00230f3:	6a 0c                	push   0xc
c00230f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230fc:	50                   	push   eax
c00230fd:	52                   	push   edx
c00230fe:	e8 79 e8 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023103:	90                   	nop
c0023104:	90                   	nop
c0023105:	6a 00                	push   0x0
c0023107:	6a 0c                	push   0xc
c0023109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023110:	50                   	push   eax
c0023111:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023117:	e8 60 e8 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002311c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023122:	83 c4 20             	add    esp,0x20
c0023125:	c1 e0 06             	shl    eax,0x6
c0023128:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c002312e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0023135:	0f 84 00 01 00 00    	je     c002323b <ATA::open(int, int, void*)+0x1d3>
c002313b:	83 ec 0c             	sub    esp,0xc
c002313e:	6a 08                	push   0x8
c0023140:	e8 34 da fe ff       	call   c0010b79 <Phys::allocateContiguousPages(int)>
c0023145:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002314b:	c7 04 24 9a f2 02 c0 	mov    DWORD PTR [esp],0xc002f29a
c0023152:	e8 0f 3e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023157:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002315e:	e8 7c 0c ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0023163:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0023169:	6a 03                	push   0x3
c002316b:	50                   	push   eax
c002316c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0023172:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0023178:	e8 3b 13 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c002317d:	83 c4 20             	add    esp,0x20
c0023180:	e8 0d d9 fe ff       	call   c0010a92 <Phys::allocatePage()>
c0023185:	83 ec 0c             	sub    esp,0xc
c0023188:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002318e:	6a 01                	push   0x1
c0023190:	e8 4a 0c ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0023195:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002319b:	6a 03                	push   0x3
c002319d:	50                   	push   eax
c002319e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00231a4:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c00231aa:	e8 09 13 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00231af:	83 c4 14             	add    esp,0x14
c00231b2:	68 d3 f2 02 c0       	push   0xc002f2d3
c00231b7:	e8 aa 3d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00231bc:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00231c3:	50                   	push   eax
c00231c4:	6a 12                	push   0x12
c00231c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231cd:	50                   	push   eax
c00231ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d4:	e8 a3 e7 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231d9:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00231df:	83 c4 20             	add    esp,0x20
c00231e2:	0f b6 c4             	movzx  eax,ah
c00231e5:	50                   	push   eax
c00231e6:	6a 13                	push   0x13
c00231e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ef:	50                   	push   eax
c00231f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231f6:	e8 81 e7 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231fb:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0023202:	50                   	push   eax
c0023203:	6a 14                	push   0x14
c0023205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002320c:	50                   	push   eax
c002320d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023213:	e8 64 e7 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023218:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c002321f:	83 c4 20             	add    esp,0x20
c0023222:	50                   	push   eax
c0023223:	6a 15                	push   0x15
c0023225:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002322c:	50                   	push   eax
c002322d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023233:	e8 44 e7 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023238:	83 c4 10             	add    esp,0x10
c002323b:	83 ec 0c             	sub    esp,0xc
c002323e:	53                   	push   ebx
c002323f:	e8 56 79 fe ff       	call   c000ab9a <PhysicalDisk::startCache()>
c0023244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023247:	e8 ba 87 fe ff       	call   c000ba06 <createPartitionsForDisk(PhysicalDisk*)>
c002324c:	83 c4 18             	add    esp,0x18
c002324f:	31 c0                	xor    eax,eax
c0023251:	5b                   	pop    ebx
c0023252:	c3                   	ret    

c0023253 <combineCharAndColour(char, unsigned char)>:
c0023253:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023258:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002325e:	c1 e0 08             	shl    eax,0x8
c0023261:	09 d0                	or     eax,edx
c0023263:	c3                   	ret    

c0023264 <combineColours(unsigned char, unsigned char)>:
c0023264:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023269:	c1 e0 04             	shl    eax,0x4
c002326c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0023270:	c3                   	ret    
c0023271:	90                   	nop

c0023272 <ATAPI::write(unsigned long long, int, void*)>:
c0023272:	b8 03 00 00 00       	mov    eax,0x3
c0023277:	c3                   	ret    

c0023278 <ATAPI::close(int, int, void*)>:
c0023278:	83 ec 0c             	sub    esp,0xc
c002327b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023285:	85 c0                	test   eax,eax
c0023287:	74 0c                	je     c0023295 <ATAPI::close(int, int, void*)+0x1d>
c0023289:	8b 10                	mov    edx,DWORD PTR [eax]
c002328b:	83 ec 0c             	sub    esp,0xc
c002328e:	50                   	push   eax
c002328f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023292:	83 c4 10             	add    esp,0x10
c0023295:	31 c0                	xor    eax,eax
c0023297:	83 c4 0c             	add    esp,0xc
c002329a:	c3                   	ret    
c002329b:	90                   	nop

c002329c <ATAPI::ATAPI()>:
c002329c:	83 ec 0c             	sub    esp,0xc
c002329f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a3:	83 ec 04             	sub    esp,0x4
c00232a6:	68 00 08 00 00       	push   0x800
c00232ab:	68 85 f4 02 c0       	push   0xc002f485
c00232b0:	50                   	push   eax
c00232b1:	e8 7c 78 fe ff       	call   c000ab32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00232b6:	83 c4 10             	add    esp,0x10
c00232b9:	ba 94 f3 02 c0       	mov    edx,0xc002f394
c00232be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c2:	89 10                	mov    DWORD PTR [eax],edx
c00232c4:	90                   	nop
c00232c5:	83 c4 0c             	add    esp,0xc
c00232c8:	c3                   	ret    
c00232c9:	90                   	nop

c00232ca <ATAPI::readyForCommand()>:
c00232ca:	56                   	push   esi
c00232cb:	53                   	push   ebx
c00232cc:	31 db                	xor    ebx,ebx
c00232ce:	50                   	push   eax
c00232cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00232d3:	50                   	push   eax
c00232d4:	6a 0c                	push   0xc
c00232d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00232dd:	50                   	push   eax
c00232de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00232e4:	e8 53 e7 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00232e9:	83 c4 10             	add    esp,0x10
c00232ec:	a8 88                	test   al,0x88
c00232ee:	74 26                	je     c0023316 <ATAPI::readyForCommand()+0x4c>
c00232f0:	43                   	inc    ebx
c00232f1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00232f7:	7e da                	jle    c00232d3 <ATAPI::readyForCommand()+0x9>
c00232f9:	51                   	push   ecx
c00232fa:	51                   	push   ecx
c00232fb:	6a 00                	push   0x0
c00232fd:	68 5e 01 00 00       	push   0x15e
c0023302:	e8 0d 43 ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0023307:	83 c4 10             	add    esp,0x10
c002330a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0023310:	75 c1                	jne    c00232d3 <ATAPI::readyForCommand()+0x9>
c0023312:	31 c0                	xor    eax,eax
c0023314:	eb 02                	jmp    c0023318 <ATAPI::readyForCommand()+0x4e>
c0023316:	b0 01                	mov    al,0x1
c0023318:	5a                   	pop    edx
c0023319:	5b                   	pop    ebx
c002331a:	5e                   	pop    esi
c002331b:	c3                   	ret    

c002331c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002331c:	55                   	push   ebp
c002331d:	57                   	push   edi
c002331e:	56                   	push   esi
c002331f:	53                   	push   ebx
c0023320:	83 ec 20             	sub    esp,0x20
c0023323:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023327:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002332b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002332f:	6a 01                	push   0x1
c0023331:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023338:	50                   	push   eax
c0023339:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002333f:	e8 48 e8 ff ff       	call   c0021b8c <IDE::enableIRQs(unsigned char, bool)>
c0023344:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002334b:	59                   	pop    ecx
c002334c:	5e                   	pop    esi
c002334d:	50                   	push   eax
c002334e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023354:	e8 fd e5 ff ff       	call   c0021956 <IDE::prepareInterrupt(unsigned char)>
c0023359:	89 3c 24             	mov    DWORD PTR [esp],edi
c002335c:	e8 69 ff ff ff       	call   c00232ca <ATAPI::readyForCommand()>
c0023361:	83 c4 10             	add    esp,0x10
c0023364:	84 c0                	test   al,al
c0023366:	75 0a                	jne    c0023372 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0023368:	bb 01 00 00 00       	mov    ebx,0x1
c002336d:	e9 5f 02 00 00       	jmp    c00235d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023372:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0023378:	c1 e0 04             	shl    eax,0x4
c002337b:	0f b6 c0             	movzx  eax,al
c002337e:	50                   	push   eax
c002337f:	6a 06                	push   0x6
c0023381:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023388:	50                   	push   eax
c0023389:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002338f:	e8 e8 e5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023394:	6a 00                	push   0x0
c0023396:	6a 01                	push   0x1
c0023398:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002339f:	50                   	push   eax
c00233a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00233a6:	e8 d1 e5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233ab:	83 c4 20             	add    esp,0x20
c00233ae:	0f b6 c3             	movzx  eax,bl
c00233b1:	50                   	push   eax
c00233b2:	0f b6 df             	movzx  ebx,bh
c00233b5:	6a 04                	push   0x4
c00233b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00233be:	50                   	push   eax
c00233bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00233c5:	e8 b2 e5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233ca:	53                   	push   ebx
c00233cb:	6a 05                	push   0x5
c00233cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00233d4:	50                   	push   eax
c00233d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00233db:	e8 9c e5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e0:	83 c4 20             	add    esp,0x20
c00233e3:	68 a0 00 00 00       	push   0xa0
c00233e8:	6a 07                	push   0x7
c00233ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00233f1:	50                   	push   eax
c00233f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00233f8:	e8 7f e5 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233fd:	83 c4 0c             	add    esp,0xc
c0023400:	6a 01                	push   0x1
c0023402:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023409:	50                   	push   eax
c002340a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023410:	e8 07 f3 ff ff       	call   c002271c <IDE::polling(unsigned char, unsigned int)>
c0023415:	83 c4 10             	add    esp,0x10
c0023418:	0f b6 d8             	movzx  ebx,al
c002341b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0023421:	85 db                	test   ebx,ebx
c0023423:	74 20                	je     c0023445 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c0023425:	53                   	push   ebx
c0023426:	0f b6 c0             	movzx  eax,al
c0023429:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0023430:	52                   	push   edx
c0023431:	50                   	push   eax
c0023432:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023438:	e8 25 f2 ff ff       	call   c0022662 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002343d:	83 c4 10             	add    esp,0x10
c0023440:	e9 8c 01 00 00       	jmp    c00235d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023445:	52                   	push   edx
c0023446:	0f b6 c0             	movzx  eax,al
c0023449:	52                   	push   edx
c002344a:	50                   	push   eax
c002344b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023451:	e8 14 e5 ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c0023456:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002345a:	b9 06 00 00 00       	mov    ecx,0x6
c002345f:	89 c2                	mov    edx,eax
c0023461:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023464:	89 e8                	mov    eax,ebp
c0023466:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002346a:	83 c4 10             	add    esp,0x10
c002346d:	0f b6 c0             	movzx  eax,al
c0023470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023474:	85 db                	test   ebx,ebx
c0023476:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002347c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023483:	0f 84 eb 00 00 00    	je     c0023574 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023489:	55                   	push   ebp
c002348a:	55                   	push   ebp
c002348b:	52                   	push   edx
c002348c:	50                   	push   eax
c002348d:	e8 5e e6 ff ff       	call   c0021af0 <IDE::waitInterrupt(unsigned char)>
c0023492:	83 c4 10             	add    esp,0x10
c0023495:	84 c0                	test   al,al
c0023497:	0f 84 cb fe ff ff    	je     c0023368 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002349d:	56                   	push   esi
c002349e:	56                   	push   esi
c002349f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234a6:	50                   	push   eax
c00234a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234ad:	e8 a4 e4 ff ff       	call   c0021956 <IDE::prepareInterrupt(unsigned char)>
c00234b2:	83 c4 0c             	add    esp,0xc
c00234b5:	6a 04                	push   0x4
c00234b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234be:	50                   	push   eax
c00234bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234c5:	e8 72 e5 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00234ca:	83 c4 0c             	add    esp,0xc
c00234cd:	6a 05                	push   0x5
c00234cf:	89 c6                	mov    esi,eax
c00234d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234d8:	50                   	push   eax
c00234d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234df:	e8 58 e5 ff ff       	call   c0021a3c <IDE::read(unsigned char, unsigned char)>
c00234e4:	83 c4 10             	add    esp,0x10
c00234e7:	0f b6 e8             	movzx  ebp,al
c00234ea:	89 f0                	mov    eax,esi
c00234ec:	c1 e5 08             	shl    ebp,0x8
c00234ef:	0f b6 f0             	movzx  esi,al
c00234f2:	09 f5                	or     ebp,esi
c00234f4:	31 f6                	xor    esi,esi
c00234f6:	d1 fd                	sar    ebp,1
c00234f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00234fd:	74 5c                	je     c002355b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c00234ff:	39 ee                	cmp    esi,ebp
c0023501:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023507:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002350e:	75 0d                	jne    c002351d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0023510:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0023513:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0023517:	4b                   	dec    ebx
c0023518:	e9 57 ff ff ff       	jmp    c0023474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002351d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023521:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0023525:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002352a:	51                   	push   ecx
c002352b:	51                   	push   ecx
c002352c:	52                   	push   edx
c002352d:	50                   	push   eax
c002352e:	e8 37 e4 ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c0023533:	89 c2                	mov    edx,eax
c0023535:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002353a:	66 ef                	out    dx,ax
c002353c:	46                   	inc    esi
c002353d:	83 c4 10             	add    esp,0x10
c0023540:	eb bd                	jmp    c00234ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c0023542:	51                   	push   ecx
c0023543:	51                   	push   ecx
c0023544:	52                   	push   edx
c0023545:	50                   	push   eax
c0023546:	e8 1f e4 ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c002354b:	89 c2                	mov    edx,eax
c002354d:	66 ed                	in     ax,dx
c002354f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023553:	83 c4 10             	add    esp,0x10
c0023556:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002355a:	46                   	inc    esi
c002355b:	39 ee                	cmp    esi,ebp
c002355d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023563:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002356a:	75 d6                	jne    c0023542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002356c:	01 f6                	add    esi,esi
c002356e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0023572:	eb a3                	jmp    c0023517 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0023574:	51                   	push   ecx
c0023575:	51                   	push   ecx
c0023576:	52                   	push   edx
c0023577:	50                   	push   eax
c0023578:	e8 73 e5 ff ff       	call   c0021af0 <IDE::waitInterrupt(unsigned char)>
c002357d:	83 c4 10             	add    esp,0x10
c0023580:	84 c0                	test   al,al
c0023582:	0f 84 e0 fd ff ff    	je     c0023368 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0023588:	52                   	push   edx
c0023589:	bb a0 86 01 00       	mov    ebx,0x186a0
c002358e:	52                   	push   edx
c002358f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023596:	50                   	push   eax
c0023597:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002359d:	e8 b4 e3 ff ff       	call   c0021956 <IDE::prepareInterrupt(unsigned char)>
c00235a2:	83 c4 10             	add    esp,0x10
c00235a5:	50                   	push   eax
c00235a6:	50                   	push   eax
c00235a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235ae:	50                   	push   eax
c00235af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235b5:	e8 b0 e3 ff ff       	call   c002196a <IDE::getBase(unsigned char)>
c00235ba:	8d 50 07             	lea    edx,[eax+0x7]
c00235bd:	ec                   	in     al,dx
c00235be:	83 c4 10             	add    esp,0x10
c00235c1:	a8 88                	test   al,0x88
c00235c3:	74 0a                	je     c00235cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00235c5:	4b                   	dec    ebx
c00235c6:	75 dd                	jne    c00235a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00235c8:	bb 02 00 00 00       	mov    ebx,0x2
c00235cd:	eb 02                	jmp    c00235d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00235cf:	31 db                	xor    ebx,ebx
c00235d1:	83 c4 1c             	add    esp,0x1c
c00235d4:	89 d8                	mov    eax,ebx
c00235d6:	5b                   	pop    ebx
c00235d7:	5e                   	pop    esi
c00235d8:	5f                   	pop    edi
c00235d9:	5d                   	pop    ebp
c00235da:	c3                   	ret    
c00235db:	90                   	nop

c00235dc <ATAPI::diskRemoved()>:
c00235dc:	53                   	push   ebx
c00235dd:	83 ec 14             	sub    esp,0x14
c00235e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00235e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00235eb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00235f1:	e8 fe 80 fe ff       	call   c000b6f4 <LogicalDisk::unmount()>
c00235f6:	58                   	pop    eax
c00235f7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00235fd:	e8 da 8a fe ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c0023602:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0023608:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002360c:	83 c4 18             	add    esp,0x18
c002360f:	5b                   	pop    ebx
c0023610:	e9 b7 8a fe ff       	jmp    c000c0cc <VCache::invalidateReadBuffer()>
c0023615:	90                   	nop

c0023616 <ATAPI::eject()>:
c0023616:	57                   	push   edi
c0023617:	b9 03 00 00 00       	mov    ecx,0x3
c002361c:	53                   	push   ebx
c002361d:	83 ec 14             	sub    esp,0x14
c0023620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023624:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023628:	fc                   	cld    
c0023629:	31 c0                	xor    eax,eax
c002362b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002362d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023632:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023637:	50                   	push   eax
c0023638:	50                   	push   eax
c0023639:	6a 00                	push   0x0
c002363b:	6a 00                	push   0x0
c002363d:	6a 00                	push   0x0
c002363f:	6a 02                	push   0x2
c0023641:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023645:	50                   	push   eax
c0023646:	53                   	push   ebx
c0023647:	e8 d0 fc ff ff       	call   c002331c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002364c:	83 c4 14             	add    esp,0x14
c002364f:	53                   	push   ebx
c0023650:	e8 87 ff ff ff       	call   c00235dc <ATAPI::diskRemoved()>
c0023655:	83 c4 24             	add    esp,0x24
c0023658:	31 c0                	xor    eax,eax
c002365a:	5b                   	pop    ebx
c002365b:	5f                   	pop    edi
c002365c:	c3                   	ret    
c002365d:	90                   	nop

c002365e <ATAPI::diskInserted()>:
c002365e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023662:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0023669:	c3                   	ret    

c002366a <ATAPI::detectMedia()>:
c002366a:	56                   	push   esi
c002366b:	53                   	push   ebx
c002366c:	83 ec 28             	sub    esp,0x28
c002366f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023673:	6a 0c                	push   0xc
c0023675:	6a 00                	push   0x0
c0023677:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002367b:	56                   	push   esi
c002367c:	e8 6f ce fd ff       	call   c00004f0 <memset>
c0023681:	58                   	pop    eax
c0023682:	5a                   	pop    edx
c0023683:	6a 00                	push   0x0
c0023685:	6a 00                	push   0x0
c0023687:	6a 00                	push   0x0
c0023689:	6a 00                	push   0x0
c002368b:	56                   	push   esi
c002368c:	53                   	push   ebx
c002368d:	e8 8a fc ff ff       	call   c002331c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023692:	83 c4 1c             	add    esp,0x1c
c0023695:	6a 0c                	push   0xc
c0023697:	6a 00                	push   0x0
c0023699:	56                   	push   esi
c002369a:	e8 51 ce fd ff       	call   c00004f0 <memset>
c002369f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00236a4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00236a9:	59                   	pop    ecx
c00236aa:	58                   	pop    eax
c00236ab:	6a 01                	push   0x1
c00236ad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00236b1:	50                   	push   eax
c00236b2:	6a 00                	push   0x0
c00236b4:	6a 12                	push   0x12
c00236b6:	56                   	push   esi
c00236b7:	53                   	push   ebx
c00236b8:	e8 5f fc ff ff       	call   c002331c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00236bd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00236c1:	83 c4 20             	add    esp,0x20
c00236c4:	83 e0 7f             	and    eax,0x7f
c00236c7:	83 f8 70             	cmp    eax,0x70
c00236ca:	74 15                	je     c00236e1 <ATAPI::detectMedia()+0x77>
c00236cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00236d3:	75 0c                	jne    c00236e1 <ATAPI::detectMedia()+0x77>
c00236d5:	83 ec 0c             	sub    esp,0xc
c00236d8:	53                   	push   ebx
c00236d9:	e8 80 ff ff ff       	call   c002365e <ATAPI::diskInserted()>
c00236de:	83 c4 10             	add    esp,0x10
c00236e1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00236e5:	83 e0 0f             	and    eax,0xf
c00236e8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00236ed:	0f b6 c0             	movzx  eax,al
c00236f0:	75 19                	jne    c002370b <ATAPI::detectMedia()+0xa1>
c00236f2:	83 f8 02             	cmp    eax,0x2
c00236f5:	75 14                	jne    c002370b <ATAPI::detectMedia()+0xa1>
c00236f7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00236fe:	74 24                	je     c0023724 <ATAPI::detectMedia()+0xba>
c0023700:	83 ec 0c             	sub    esp,0xc
c0023703:	53                   	push   ebx
c0023704:	e8 d3 fe ff ff       	call   c00235dc <ATAPI::diskRemoved()>
c0023709:	eb 16                	jmp    c0023721 <ATAPI::detectMedia()+0xb7>
c002370b:	85 c0                	test   eax,eax
c002370d:	75 15                	jne    c0023724 <ATAPI::detectMedia()+0xba>
c002370f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023716:	75 0c                	jne    c0023724 <ATAPI::detectMedia()+0xba>
c0023718:	83 ec 0c             	sub    esp,0xc
c002371b:	53                   	push   ebx
c002371c:	e8 3d ff ff ff       	call   c002365e <ATAPI::diskInserted()>
c0023721:	83 c4 10             	add    esp,0x10
c0023724:	83 c4 24             	add    esp,0x24
c0023727:	5b                   	pop    ebx
c0023728:	5e                   	pop    esi
c0023729:	c3                   	ret    

c002372a <ATAPI::open(int, int, void*)>:
c002372a:	56                   	push   esi
c002372b:	53                   	push   ebx
c002372c:	50                   	push   eax
c002372d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023731:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023735:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023739:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002373f:	c1 e0 06             	shl    eax,0x6
c0023742:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023748:	01 d0                	add    eax,edx
c002374a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023751:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023757:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002375e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023768:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002376f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023775:	6a 04                	push   0x4
c0023777:	6a 0c                	push   0xc
c0023779:	51                   	push   ecx
c002377a:	52                   	push   edx
c002377b:	e8 fc e1 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023780:	90                   	nop
c0023781:	90                   	nop
c0023782:	6a 00                	push   0x0
c0023784:	6a 0c                	push   0xc
c0023786:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002378d:	50                   	push   eax
c002378e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023794:	e8 e3 e1 ff ff       	call   c002197c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023799:	83 c4 14             	add    esp,0x14
c002379c:	68 78 01 00 00       	push   0x178
c00237a1:	e8 9e cc fe ff       	call   c0010444 <malloc>
c00237a6:	83 c4 0c             	add    esp,0xc
c00237a9:	6a 00                	push   0x0
c00237ab:	68 ff ff ff 7f       	push   0x7fffffff
c00237b0:	6a 00                	push   0x0
c00237b2:	6a 00                	push   0x0
c00237b4:	53                   	push   ebx
c00237b5:	68 37 f5 02 c0       	push   0xc002f537
c00237ba:	89 c6                	mov    esi,eax
c00237bc:	50                   	push   eax
c00237bd:	e8 70 7d fe ff       	call   c000b532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00237c2:	83 c4 14             	add    esp,0x14
c00237c5:	56                   	push   esi
c00237c6:	e8 27 7e fe ff       	call   c000b5f2 <LogicalDisk::assignDriveLetter()>
c00237cb:	5a                   	pop    edx
c00237cc:	59                   	pop    ecx
c00237cd:	0f be c0             	movsx  eax,al
c00237d0:	50                   	push   eax
c00237d1:	68 7c f3 02 c0       	push   0xc002f37c
c00237d6:	e8 8b 37 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00237db:	58                   	pop    eax
c00237dc:	5a                   	pop    edx
c00237dd:	56                   	push   esi
c00237de:	53                   	push   ebx
c00237df:	e8 6a 6f fe ff       	call   c000a74e <Device::addChild(Device*)>
c00237e4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00237ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00237ed:	e8 a8 73 fe ff       	call   c000ab9a <PhysicalDisk::startCache()>
c00237f2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00237f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00237fc:	e8 69 fe ff ff       	call   c002366a <ATAPI::detectMedia()>
c0023801:	83 c4 14             	add    esp,0x14
c0023804:	31 c0                	xor    eax,eax
c0023806:	5b                   	pop    ebx
c0023807:	5e                   	pop    esi
c0023808:	c3                   	ret    
c0023809:	90                   	nop

c002380a <ATAPI::read(unsigned long long, int, void*)>:
c002380a:	55                   	push   ebp
c002380b:	57                   	push   edi
c002380c:	56                   	push   esi
c002380d:	53                   	push   ebx
c002380e:	83 ec 1c             	sub    esp,0x1c
c0023811:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023815:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023819:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002381d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023824:	74 3c                	je     c0023862 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0023826:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002382a:	b9 03 00 00 00       	mov    ecx,0x3
c002382f:	fc                   	cld    
c0023830:	31 c0                	xor    eax,eax
c0023832:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023834:	89 e8                	mov    eax,ebp
c0023836:	0f ce                	bswap  esi
c0023838:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002383c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023841:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0023845:	50                   	push   eax
c0023846:	50                   	push   eax
c0023847:	55                   	push   ebp
c0023848:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002384c:	c1 e5 0b             	shl    ebp,0xb
c002384f:	6a 00                	push   0x0
c0023851:	55                   	push   ebp
c0023852:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023856:	50                   	push   eax
c0023857:	53                   	push   ebx
c0023858:	e8 bf fa ff ff       	call   c002331c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002385d:	83 c4 20             	add    esp,0x20
c0023860:	eb 1a                	jmp    c002387c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0023862:	83 ec 0c             	sub    esp,0xc
c0023865:	53                   	push   ebx
c0023866:	e8 ff fd ff ff       	call   c002366a <ATAPI::detectMedia()>
c002386b:	83 c4 10             	add    esp,0x10
c002386e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023875:	75 af                	jne    c0023826 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023877:	b8 02 00 00 00       	mov    eax,0x2
c002387c:	83 c4 1c             	add    esp,0x1c
c002387f:	5b                   	pop    ebx
c0023880:	5e                   	pop    esi
c0023881:	5f                   	pop    edi
c0023882:	5d                   	pop    ebp
c0023883:	c3                   	ret    

c0023884 <SATA::close(int, int, void*)>:
c0023884:	83 ec 0c             	sub    esp,0xc
c0023887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002388b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023891:	85 c0                	test   eax,eax
c0023893:	74 0c                	je     c00238a1 <SATA::close(int, int, void*)+0x1d>
c0023895:	8b 10                	mov    edx,DWORD PTR [eax]
c0023897:	83 ec 0c             	sub    esp,0xc
c002389a:	50                   	push   eax
c002389b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002389e:	83 c4 10             	add    esp,0x10
c00238a1:	31 c0                	xor    eax,eax
c00238a3:	83 c4 0c             	add    esp,0xc
c00238a6:	c3                   	ret    
c00238a7:	90                   	nop

c00238a8 <SATA::powerSaving(PowerSavingLevel)>:
c00238a8:	c3                   	ret    
c00238a9:	90                   	nop

c00238aa <SATA::open(int, int, void*)>:
c00238aa:	56                   	push   esi
c00238ab:	53                   	push   ebx
c00238ac:	83 ec 10             	sub    esp,0x10
c00238af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238b3:	68 c4 f3 02 c0       	push   0xc002f3c4
c00238b8:	e8 a9 36 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00238bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00238c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00238cb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00238d5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00238db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00238e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00238f0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00238f6:	e8 97 d1 fe ff       	call   c0010a92 <Phys::allocatePage()>
c00238fb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023901:	89 c6                	mov    esi,eax
c0023903:	e8 8a d1 fe ff       	call   c0010a92 <Phys::allocatePage()>
c0023908:	81 c6 00 10 00 00    	add    esi,0x1000
c002390e:	83 c4 10             	add    esp,0x10
c0023911:	39 c6                	cmp    esi,eax
c0023913:	74 10                	je     c0023925 <SATA::open(int, int, void*)+0x7b>
c0023915:	83 ec 0c             	sub    esp,0xc
c0023918:	68 d0 f3 02 c0       	push   0xc002f3d0
c002391d:	e8 76 cf fe ff       	call   c0010898 <KePanic(char const*)>
c0023922:	83 c4 10             	add    esp,0x10
c0023925:	83 ec 0c             	sub    esp,0xc
c0023928:	6a 02                	push   0x2
c002392a:	e8 b0 04 ff ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c002392f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023935:	6a 03                	push   0x3
c0023937:	50                   	push   eax
c0023938:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002393e:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0023944:	e8 6f 0b ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023949:	83 c4 14             	add    esp,0x14
c002394c:	53                   	push   ebx
c002394d:	e8 48 72 fe ff       	call   c000ab9a <PhysicalDisk::startCache()>
c0023952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023955:	e8 ac 80 fe ff       	call   c000ba06 <createPartitionsForDisk(PhysicalDisk*)>
c002395a:	83 c4 14             	add    esp,0x14
c002395d:	31 c0                	xor    eax,eax
c002395f:	5b                   	pop    ebx
c0023960:	5e                   	pop    esi
c0023961:	c3                   	ret    

c0023962 <SATA::SATA()>:
c0023962:	83 ec 0c             	sub    esp,0xc
c0023965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023969:	83 ec 04             	sub    esp,0x4
c002396c:	68 00 02 00 00       	push   0x200
c0023971:	68 e4 f3 02 c0       	push   0xc002f3e4
c0023976:	50                   	push   eax
c0023977:	e8 b6 71 fe ff       	call   c000ab32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002397c:	83 c4 10             	add    esp,0x10
c002397f:	ba 54 f4 02 c0       	mov    edx,0xc002f454
c0023984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023988:	89 10                	mov    DWORD PTR [eax],edx
c002398a:	90                   	nop
c002398b:	83 c4 0c             	add    esp,0xc
c002398e:	c3                   	ret    
c002398f:	90                   	nop

c0023990 <SATA::access(unsigned long long, int, void*, bool)>:
c0023990:	55                   	push   ebp
c0023991:	57                   	push   edi
c0023992:	56                   	push   esi
c0023993:	53                   	push   ebx
c0023994:	83 ec 2c             	sub    esp,0x2c
c0023997:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002399b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002399f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00239a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00239a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00239ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00239af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00239b3:	fa                   	cli    
c00239b4:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c00239ba:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00239bf:	7e 10                	jle    c00239d1 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c00239c1:	83 ec 0c             	sub    esp,0xc
c00239c4:	68 f4 f3 02 c0       	push   0xc002f3f4
c00239c9:	e8 ca ce fe ff       	call   c0010898 <KePanic(char const*)>
c00239ce:	83 c4 10             	add    esp,0x10
c00239d1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00239d7:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00239dd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00239e3:	89 e8                	mov    eax,ebp
c00239e5:	c1 e0 07             	shl    eax,0x7
c00239e8:	01 d0                	add    eax,edx
c00239ea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00239f4:	8d 45 02             	lea    eax,[ebp+0x2]
c00239f7:	51                   	push   ecx
c00239f8:	c1 e0 07             	shl    eax,0x7
c00239fb:	51                   	push   ecx
c00239fc:	01 d0                	add    eax,edx
c00239fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0023a02:	50                   	push   eax
c0023a03:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023a09:	e8 ee ed ff ff       	call   c00227fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023a0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a12:	83 c4 10             	add    esp,0x10
c0023a15:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0023a1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a1e:	0f 84 a6 01 00 00    	je     c0023bca <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0023a24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023a28:	c1 e0 09             	shl    eax,0x9
c0023a2b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0023a30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023a34:	74 0e                	je     c0023a44 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0023a36:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0023a3c:	89 c1                	mov    ecx,eax
c0023a3e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0023a42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023a44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023a48:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0023a4e:	8d 45 02             	lea    eax,[ebp+0x2]
c0023a51:	c1 e0 07             	shl    eax,0x7
c0023a54:	01 d0                	add    eax,edx
c0023a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0023a58:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0023a5e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0023a64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023a68:	c1 e1 05             	shl    ecx,0x5
c0023a6b:	01 c8                	add    eax,ecx
c0023a6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023a71:	83 e1 01             	and    ecx,0x1
c0023a74:	89 ce                	mov    esi,ecx
c0023a76:	8a 08                	mov    cl,BYTE PTR [eax]
c0023a78:	c1 e6 06             	shl    esi,0x6
c0023a7b:	83 e1 bf             	and    ecx,0xffffffbf
c0023a7e:	09 f1                	or     ecx,esi
c0023a80:	88 08                	mov    BYTE PTR [eax],cl
c0023a82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023a84:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0023a8a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0023a90:	89 08                	mov    DWORD PTR [eax],ecx
c0023a92:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0023a98:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0023a9e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0023aa4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0023aa7:	50                   	push   eax
c0023aa8:	68 90 00 00 00       	push   0x90
c0023aad:	6a 00                	push   0x0
c0023aaf:	56                   	push   esi
c0023ab0:	e8 3b ca fd ff       	call   c00004f0 <memset>
c0023ab5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023abb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0023ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ac5:	83 c4 10             	add    esp,0x10
c0023ac8:	48                   	dec    eax
c0023ac9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0023ace:	89 c1                	mov    ecx,eax
c0023ad0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0023ad6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023adb:	09 c8                	or     eax,ecx
c0023add:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0023ae3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0023ae9:	83 c8 80             	or     eax,0xffffff80
c0023aec:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0023af2:	66 8b 06             	mov    ax,WORD PTR [esi]
c0023af5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023af9:	25 00 7f 00 00       	and    eax,0x7f00
c0023afe:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023b03:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0023b08:	66 89 06             	mov    WORD PTR [esi],ax
c0023b0b:	b0 35                	mov    al,0x35
c0023b0d:	75 02                	jne    c0023b11 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0023b0f:	b0 25                	mov    al,0x25
c0023b11:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0023b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b18:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0023b1c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0023b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b24:	c1 e8 10             	shr    eax,0x10
c0023b27:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0023b2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b2e:	c1 e8 18             	shr    eax,0x18
c0023b31:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0023b34:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023b38:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0023b3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b3f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0023b42:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023b46:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0023b4a:	89 ee                	mov    esi,ebp
c0023b4c:	31 c0                	xor    eax,eax
c0023b4e:	c1 e6 07             	shl    esi,0x7
c0023b51:	01 d6                	add    esi,edx
c0023b53:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0023b59:	80 e1 88             	and    cl,0x88
c0023b5c:	74 0a                	je     c0023b68 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0023b5e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023b63:	74 0a                	je     c0023b6f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0023b65:	40                   	inc    eax
c0023b66:	eb eb                	jmp    c0023b53 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0023b68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023b6d:	75 0a                	jne    c0023b79 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	68 2d f4 02 c0       	push   0xc002f42d
c0023b77:	eb 34                	jmp    c0023bad <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0023b79:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023b7d:	c1 e5 07             	shl    ebp,0x7
c0023b80:	b8 01 00 00 00       	mov    eax,0x1
c0023b85:	01 ea                	add    edx,ebp
c0023b87:	d3 e0                	shl    eax,cl
c0023b89:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0023b8f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0023b95:	85 c8                	test   eax,ecx
c0023b97:	74 25                	je     c0023bbe <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0023b99:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0023b9f:	0f ba e1 1e          	bt     ecx,0x1e
c0023ba3:	73 ea                	jae    c0023b8f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0023ba5:	83 ec 0c             	sub    esp,0xc
c0023ba8:	68 3b f4 02 c0       	push   0xc002f43b
c0023bad:	e8 b4 33 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023bb2:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023bb9:	83 c4 10             	add    esp,0x10
c0023bbc:	eb 13                	jmp    c0023bd1 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0023bbe:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0023bc4:	0f ba e0 1e          	bt     eax,0x1e
c0023bc8:	73 18                	jae    c0023be2 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0023bca:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023bd1:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0023bd8:	75 01                	jne    c0023bdb <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0023bda:	fb                   	sti    
c0023bdb:	b8 01 00 00 00       	mov    eax,0x1
c0023be0:	eb 2c                	jmp    c0023c0e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0023be2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0023be7:	75 10                	jne    c0023bf9 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0023be9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0023bef:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0023bf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023bf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023bf9:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023c00:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0023c05:	85 c0                	test   eax,eax
c0023c07:	75 03                	jne    c0023c0c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023c09:	fb                   	sti    
c0023c0a:	eb 02                	jmp    c0023c0e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0023c0c:	31 c0                	xor    eax,eax
c0023c0e:	83 c4 2c             	add    esp,0x2c
c0023c11:	5b                   	pop    ebx
c0023c12:	5e                   	pop    esi
c0023c13:	5f                   	pop    edi
c0023c14:	5d                   	pop    ebp
c0023c15:	c3                   	ret    

c0023c16 <SATA::read(unsigned long long, int, void*)>:
c0023c16:	57                   	push   edi
c0023c17:	b8 04 00 00 00       	mov    eax,0x4
c0023c1c:	56                   	push   esi
c0023c1d:	53                   	push   ebx
c0023c1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023c26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023c2a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c2e:	8d 7a ff             	lea    edi,[edx-0x1]
c0023c31:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0023c37:	77 25                	ja     c0023c5e <SATA::read(unsigned long long, int, void*)+0x48>
c0023c39:	85 f6                	test   esi,esi
c0023c3b:	b8 06 00 00 00       	mov    eax,0x6
c0023c40:	74 1c                	je     c0023c5e <SATA::read(unsigned long long, int, void*)+0x48>
c0023c42:	50                   	push   eax
c0023c43:	50                   	push   eax
c0023c44:	6a 00                	push   0x0
c0023c46:	56                   	push   esi
c0023c47:	52                   	push   edx
c0023c48:	53                   	push   ebx
c0023c49:	51                   	push   ecx
c0023c4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023c4e:	e8 3d fd ff ff       	call   c0023990 <SATA::access(unsigned long long, int, void*, bool)>
c0023c53:	83 c4 20             	add    esp,0x20
c0023c56:	85 c0                	test   eax,eax
c0023c58:	0f 95 c0             	setne  al
c0023c5b:	0f b6 c0             	movzx  eax,al
c0023c5e:	5b                   	pop    ebx
c0023c5f:	5e                   	pop    esi
c0023c60:	5f                   	pop    edi
c0023c61:	c3                   	ret    

c0023c62 <SATA::write(unsigned long long, int, void*)>:
c0023c62:	55                   	push   ebp
c0023c63:	b8 04 00 00 00       	mov    eax,0x4
c0023c68:	57                   	push   edi
c0023c69:	56                   	push   esi
c0023c6a:	53                   	push   ebx
c0023c6b:	83 ec 0c             	sub    esp,0xc
c0023c6e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023c72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023c76:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0023c7a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023c7e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0023c81:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c87:	77 3d                	ja     c0023cc6 <SATA::write(unsigned long long, int, void*)+0x64>
c0023c89:	85 ed                	test   ebp,ebp
c0023c8b:	b8 06 00 00 00       	mov    eax,0x6
c0023c90:	74 34                	je     c0023cc6 <SATA::write(unsigned long long, int, void*)+0x64>
c0023c92:	c1 e3 09             	shl    ebx,0x9
c0023c95:	01 eb                	add    ebx,ebp
c0023c97:	50                   	push   eax
c0023c98:	89 d6                	mov    esi,edx
c0023c9a:	50                   	push   eax
c0023c9b:	83 c6 01             	add    esi,0x1
c0023c9e:	6a 01                	push   0x1
c0023ca0:	89 cf                	mov    edi,ecx
c0023ca2:	55                   	push   ebp
c0023ca3:	83 d7 00             	adc    edi,0x0
c0023ca6:	6a 01                	push   0x1
c0023ca8:	81 c5 00 02 00 00    	add    ebp,0x200
c0023cae:	51                   	push   ecx
c0023caf:	52                   	push   edx
c0023cb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023cb4:	e8 d7 fc ff ff       	call   c0023990 <SATA::access(unsigned long long, int, void*, bool)>
c0023cb9:	83 c4 20             	add    esp,0x20
c0023cbc:	39 dd                	cmp    ebp,ebx
c0023cbe:	89 f2                	mov    edx,esi
c0023cc0:	89 f9                	mov    ecx,edi
c0023cc2:	75 d3                	jne    c0023c97 <SATA::write(unsigned long long, int, void*)+0x35>
c0023cc4:	31 c0                	xor    eax,eax
c0023cc6:	83 c4 0c             	add    esp,0xc
c0023cc9:	5b                   	pop    ebx
c0023cca:	5e                   	pop    esi
c0023ccb:	5f                   	pop    edi
c0023ccc:	5d                   	pop    ebp
c0023ccd:	c3                   	ret    

c0023cce <SATAPI::write(unsigned long long, int, void*)>:
c0023cce:	b8 03 00 00 00       	mov    eax,0x3
c0023cd3:	c3                   	ret    

c0023cd4 <SATAPI::close(int, int, void*)>:
c0023cd4:	83 ec 0c             	sub    esp,0xc
c0023cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ce1:	85 c0                	test   eax,eax
c0023ce3:	74 0c                	je     c0023cf1 <SATAPI::close(int, int, void*)+0x1d>
c0023ce5:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ce7:	83 ec 0c             	sub    esp,0xc
c0023cea:	50                   	push   eax
c0023ceb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023cee:	83 c4 10             	add    esp,0x10
c0023cf1:	31 c0                	xor    eax,eax
c0023cf3:	83 c4 0c             	add    esp,0xc
c0023cf6:	c3                   	ret    
c0023cf7:	90                   	nop

c0023cf8 <SATAPI::SATAPI()>:
c0023cf8:	83 ec 0c             	sub    esp,0xc
c0023cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cff:	83 ec 04             	sub    esp,0x4
c0023d02:	68 00 08 00 00       	push   0x800
c0023d07:	68 84 f4 02 c0       	push   0xc002f484
c0023d0c:	50                   	push   eax
c0023d0d:	e8 20 6e fe ff       	call   c000ab32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d12:	83 c4 10             	add    esp,0x10
c0023d15:	ba 78 f5 02 c0       	mov    edx,0xc002f578
c0023d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1e:	89 10                	mov    DWORD PTR [eax],edx
c0023d20:	90                   	nop
c0023d21:	83 c4 0c             	add    esp,0xc
c0023d24:	c3                   	ret    
c0023d25:	90                   	nop

c0023d26 <SATAPI::diskRemoved()>:
c0023d26:	c3                   	ret    
c0023d27:	90                   	nop

c0023d28 <SATAPI::diskInserted()>:
c0023d28:	83 ec 18             	sub    esp,0x18
c0023d2b:	68 90 f4 02 c0       	push   0xc002f490
c0023d30:	e8 31 32 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d39:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0023d40:	83 c4 1c             	add    esp,0x1c
c0023d43:	c3                   	ret    

c0023d44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0023d44:	55                   	push   ebp
c0023d45:	57                   	push   edi
c0023d46:	56                   	push   esi
c0023d47:	53                   	push   ebx
c0023d48:	83 ec 34             	sub    esp,0x34
c0023d4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d4f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0023d53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d57:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023d5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023d5f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0023d65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023d6f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0023d75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023d79:	83 c0 02             	add    eax,0x2
c0023d7c:	c1 e0 07             	shl    eax,0x7
c0023d7f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023d83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d8b:	c1 e0 07             	shl    eax,0x7
c0023d8e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023d92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d96:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023da0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023da4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023daa:	e8 4d ea ff ff       	call   c00227fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023daf:	83 c4 10             	add    esp,0x10
c0023db2:	89 c2                	mov    edx,eax
c0023db4:	b8 01 00 00 00       	mov    eax,0x1
c0023db9:	83 fa ff             	cmp    edx,0xffffffff
c0023dbc:	0f 84 63 02 00 00    	je     c0024025 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0023dc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023dca:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0023dd2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0023dd8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0023dde:	89 d1                	mov    ecx,edx
c0023de0:	c1 e1 05             	shl    ecx,0x5
c0023de3:	01 c8                	add    eax,ecx
c0023de5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023de7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0023ded:	81 c9 25 00 01 00    	or     ecx,0x10025
c0023df3:	89 08                	mov    DWORD PTR [eax],ecx
c0023df5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023dfb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0023e01:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0023e07:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0023e0a:	50                   	push   eax
c0023e0b:	68 90 00 00 00       	push   0x90
c0023e10:	6a 00                	push   0x0
c0023e12:	53                   	push   ebx
c0023e13:	e8 d8 c6 fd ff       	call   c00004f0 <memset>
c0023e18:	8d 7b 40             	lea    edi,[ebx+0x40]
c0023e1b:	b9 0c 00 00 00       	mov    ecx,0xc
c0023e20:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0023e24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023e26:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0023e2c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0023e30:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023e34:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0023e3a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023e3e:	48                   	dec    eax
c0023e3f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0023e44:	89 c1                	mov    ecx,eax
c0023e46:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023e4c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023e51:	09 c8                	or     eax,ecx
c0023e53:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023e59:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0023e5f:	83 c8 80             	or     eax,0xffffff80
c0023e62:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0023e68:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023e6b:	25 00 7f 00 00       	and    eax,0x7f00
c0023e70:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023e75:	66 89 03             	mov    WORD PTR [ebx],ax
c0023e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023e7c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0023e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023e84:	c1 e8 10             	shr    eax,0x10
c0023e87:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023e8e:	c1 e8 18             	shr    eax,0x18
c0023e91:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023e94:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023e98:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023e9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023e9f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023ea2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0023ea6:	83 c4 10             	add    esp,0x10
c0023ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ead:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0023eb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023eb5:	31 c0                	xor    eax,eax
c0023eb7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0023ebd:	80 e1 88             	and    cl,0x88
c0023ec0:	74 0a                	je     c0023ecc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0023ec2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023ec7:	74 0a                	je     c0023ed3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0023ec9:	40                   	inc    eax
c0023eca:	eb eb                	jmp    c0023eb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0023ecc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023ed1:	75 43                	jne    c0023f16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0023ed3:	83 ec 0c             	sub    esp,0xc
c0023ed6:	68 a8 f4 02 c0       	push   0xc002f4a8
c0023edb:	e8 86 30 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023ee0:	58                   	pop    eax
c0023ee1:	5a                   	pop    edx
c0023ee2:	68 bd f4 02 c0       	push   0xc002f4bd
c0023ee7:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c0023eed:	e8 e2 f2 fe ff       	call   c00131d4 <VgaText::puts(char const*)>
c0023ef2:	59                   	pop    ecx
c0023ef3:	5b                   	pop    ebx
c0023ef4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023ef8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023efe:	e8 93 e9 ff ff       	call   c0022896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023f03:	5e                   	pop    esi
c0023f04:	5f                   	pop    edi
c0023f05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023f09:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023f0f:	e8 62 e9 ff ff       	call   c0022876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0023f14:	eb 48                	jmp    c0023f5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0023f16:	b8 01 00 00 00       	mov    eax,0x1
c0023f1b:	88 d1                	mov    cl,dl
c0023f1d:	d3 e0                	shl    eax,cl
c0023f1f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0023f24:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0023f2a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023f2e:	89 c7                	mov    edi,eax
c0023f30:	c1 e3 07             	shl    ebx,0x7
c0023f33:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0023f37:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023f3d:	85 c7                	test   edi,eax
c0023f3f:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023f45:	0f 84 a7 00 00 00    	je     c0023ff2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0023f4b:	0f ba e0 1e          	bt     eax,0x1e
c0023f4f:	73 1a                	jae    c0023f6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0023f51:	83 ec 0c             	sub    esp,0xc
c0023f54:	68 cf f4 02 c0       	push   0xc002f4cf
c0023f59:	e8 08 30 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0023f5e:	83 c4 10             	add    esp,0x10
c0023f61:	b8 01 00 00 00       	mov    eax,0x1
c0023f66:	e9 ba 00 00 00       	jmp    c0024025 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0023f6b:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0023f71:	83 f8 0d             	cmp    eax,0xd
c0023f74:	77 0b                	ja     c0023f81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0023f76:	50                   	push   eax
c0023f77:	50                   	push   eax
c0023f78:	6a 00                	push   0x0
c0023f7a:	68 c8 00 00 00       	push   0xc8
c0023f7f:	eb 2a                	jmp    c0023fab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023f81:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0023f87:	83 f8 0d             	cmp    eax,0xd
c0023f8a:	77 0b                	ja     c0023f97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0023f8c:	51                   	push   ecx
c0023f8d:	51                   	push   ecx
c0023f8e:	6a 00                	push   0x0
c0023f90:	68 58 02 00 00       	push   0x258
c0023f95:	eb 14                	jmp    c0023fab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023f97:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0023f9d:	83 f8 06             	cmp    eax,0x6
c0023fa0:	77 11                	ja     c0023fb3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0023fa2:	52                   	push   edx
c0023fa3:	52                   	push   edx
c0023fa4:	6a 00                	push   0x0
c0023fa6:	68 dc 05 00 00       	push   0x5dc
c0023fab:	e8 64 36 ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0023fb0:	83 c4 10             	add    esp,0x10
c0023fb3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0023fb7:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0023fba:	75 06                	jne    c0023fc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0023fbc:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0023fc0:	74 16                	je     c0023fd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0023fc2:	83 fe 06             	cmp    esi,0x6
c0023fc5:	77 11                	ja     c0023fd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0023fc7:	50                   	push   eax
c0023fc8:	50                   	push   eax
c0023fc9:	6a 00                	push   0x0
c0023fcb:	68 c4 09 00 00       	push   0x9c4
c0023fd0:	e8 3f 36 ff ff       	call   c0017614 <milliTenthSleep(unsigned long long)>
c0023fd5:	83 c4 10             	add    esp,0x10
c0023fd8:	46                   	inc    esi
c0023fd9:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0023fdf:	0f 85 52 ff ff ff    	jne    c0023f37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0023fe5:	83 ec 0c             	sub    esp,0xc
c0023fe8:	68 e2 f4 02 c0       	push   0xc002f4e2
c0023fed:	e9 67 ff ff ff       	jmp    c0023f59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0023ff2:	0f ba e0 1e          	bt     eax,0x1e
c0023ff6:	73 0d                	jae    c0024005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0023ff8:	83 ec 0c             	sub    esp,0xc
c0023ffb:	68 f6 f4 02 c0       	push   0xc002f4f6
c0024000:	e9 54 ff ff ff       	jmp    c0023f59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0024005:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002400a:	74 17                	je     c0024023 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c002400c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024011:	74 10                	je     c0024023 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0024013:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0024019:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002401d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024021:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024023:	31 c0                	xor    eax,eax
c0024025:	83 c4 2c             	add    esp,0x2c
c0024028:	5b                   	pop    ebx
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	5d                   	pop    ebp
c002402c:	c3                   	ret    
c002402d:	90                   	nop

c002402e <SATAPI::eject()>:
c002402e:	57                   	push   edi
c002402f:	b9 03 00 00 00       	mov    ecx,0x3
c0024034:	83 ec 18             	sub    esp,0x18
c0024037:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002403b:	fc                   	cld    
c002403c:	31 c0                	xor    eax,eax
c002403e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024040:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024045:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002404a:	50                   	push   eax
c002404b:	6a 00                	push   0x0
c002404d:	6a 00                	push   0x0
c002404f:	6a 00                	push   0x0
c0024051:	6a 00                	push   0x0
c0024053:	6a 02                	push   0x2
c0024055:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024059:	50                   	push   eax
c002405a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002405e:	e8 e1 fc ff ff       	call   c0023d44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024063:	83 c4 38             	add    esp,0x38
c0024066:	31 c0                	xor    eax,eax
c0024068:	5f                   	pop    edi
c0024069:	c3                   	ret    

c002406a <SATAPI::detectMedia()>:
c002406a:	53                   	push   ebx
c002406b:	83 ec 14             	sub    esp,0x14
c002406e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024072:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0024078:	e8 5f 80 fe ff       	call   c000c0dc <VCache::writeWriteBuffer()>
c002407d:	59                   	pop    ecx
c002407e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0024084:	e8 43 80 fe ff       	call   c000c0cc <VCache::invalidateReadBuffer()>
c0024089:	c7 04 24 0b f5 02 c0 	mov    DWORD PTR [esp],0xc002f50b
c0024090:	e8 d1 2e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0024095:	83 c4 10             	add    esp,0x10
c0024098:	31 c0                	xor    eax,eax
c002409a:	8b 14 85 e0 6a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9520]
c00240a1:	85 d2                	test   edx,edx
c00240a3:	74 0f                	je     c00240b4 <SATAPI::detectMedia()+0x4a>
c00240a5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00240ab:	75 07                	jne    c00240b4 <SATAPI::detectMedia()+0x4a>
c00240ad:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00240b4:	40                   	inc    eax
c00240b5:	83 f8 1a             	cmp    eax,0x1a
c00240b8:	75 e0                	jne    c002409a <SATAPI::detectMedia()+0x30>
c00240ba:	83 c4 08             	add    esp,0x8
c00240bd:	5b                   	pop    ebx
c00240be:	c3                   	ret    
c00240bf:	90                   	nop

c00240c0 <SATAPI::open(int, int, void*)>:
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	51                   	push   ecx
c00240c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00240cb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00240d5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00240db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00240e9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00240f3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00240fa:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024100:	e8 8d c9 fe ff       	call   c0010a92 <Phys::allocatePage()>
c0024105:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002410b:	89 c6                	mov    esi,eax
c002410d:	e8 80 c9 fe ff       	call   c0010a92 <Phys::allocatePage()>
c0024112:	81 c6 00 10 00 00    	add    esi,0x1000
c0024118:	39 c6                	cmp    esi,eax
c002411a:	74 10                	je     c002412c <SATAPI::open(int, int, void*)+0x6c>
c002411c:	83 ec 0c             	sub    esp,0xc
c002411f:	68 20 f5 02 c0       	push   0xc002f520
c0024124:	e8 6f c7 fe ff       	call   c0010898 <KePanic(char const*)>
c0024129:	83 c4 10             	add    esp,0x10
c002412c:	83 ec 0c             	sub    esp,0xc
c002412f:	6a 02                	push   0x2
c0024131:	e8 a9 fc fe ff       	call   c0013ddf <Virt::allocateKernelVirtualPages(int)>
c0024136:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002413c:	6a 03                	push   0x3
c002413e:	50                   	push   eax
c002413f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024145:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c002414b:	e8 68 03 ff ff       	call   c00144b8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024150:	83 c4 14             	add    esp,0x14
c0024153:	68 78 01 00 00       	push   0x178
c0024158:	e8 e7 c2 fe ff       	call   c0010444 <malloc>
c002415d:	83 c4 0c             	add    esp,0xc
c0024160:	6a 00                	push   0x0
c0024162:	68 ff ff ff 7f       	push   0x7fffffff
c0024167:	6a 00                	push   0x0
c0024169:	6a 00                	push   0x0
c002416b:	53                   	push   ebx
c002416c:	68 36 f5 02 c0       	push   0xc002f536
c0024171:	89 c6                	mov    esi,eax
c0024173:	50                   	push   eax
c0024174:	e8 b9 73 fe ff       	call   c000b532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0024179:	83 c4 14             	add    esp,0x14
c002417c:	56                   	push   esi
c002417d:	e8 70 74 fe ff       	call   c000b5f2 <LogicalDisk::assignDriveLetter()>
c0024182:	5a                   	pop    edx
c0024183:	59                   	pop    ecx
c0024184:	0f be c0             	movsx  eax,al
c0024187:	50                   	push   eax
c0024188:	68 7c f3 02 c0       	push   0xc002f37c
c002418d:	e8 d4 2d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0024192:	58                   	pop    eax
c0024193:	5a                   	pop    edx
c0024194:	56                   	push   esi
c0024195:	53                   	push   ebx
c0024196:	e8 b3 65 fe ff       	call   c000a74e <Device::addChild(Device*)>
c002419b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00241a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241a4:	e8 f1 69 fe ff       	call   c000ab9a <PhysicalDisk::startCache()>
c00241a9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00241b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241b3:	e8 b2 fe ff ff       	call   c002406a <SATAPI::detectMedia()>
c00241b8:	83 c4 14             	add    esp,0x14
c00241bb:	31 c0                	xor    eax,eax
c00241bd:	5b                   	pop    ebx
c00241be:	5e                   	pop    esi
c00241bf:	c3                   	ret    

c00241c0 <SATAPI::read(unsigned long long, int, void*)>:
c00241c0:	55                   	push   ebp
c00241c1:	57                   	push   edi
c00241c2:	56                   	push   esi
c00241c3:	53                   	push   ebx
c00241c4:	83 ec 3c             	sub    esp,0x3c
c00241c7:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00241cb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00241cf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00241d3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00241d7:	83 fd 04             	cmp    ebp,0x4
c00241da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00241e2:	7e 10                	jle    c00241f4 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00241e4:	83 ec 0c             	sub    esp,0xc
c00241e7:	68 44 f5 02 c0       	push   0xc002f544
c00241ec:	e8 a7 c6 fe ff       	call   c0010898 <KePanic(char const*)>
c00241f1:	83 c4 10             	add    esp,0x10
c00241f4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00241fa:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024200:	51                   	push   ecx
c0024201:	50                   	push   eax
c0024202:	83 c0 02             	add    eax,0x2
c0024205:	c1 e0 07             	shl    eax,0x7
c0024208:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002420e:	50                   	push   eax
c002420f:	52                   	push   edx
c0024210:	e8 ab e6 ff ff       	call   c00228c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024215:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0024219:	b9 03 00 00 00       	mov    ecx,0x3
c002421e:	fc                   	cld    
c002421f:	31 c0                	xor    eax,eax
c0024221:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024223:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0024228:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002422d:	83 c4 0c             	add    esp,0xc
c0024230:	6a 00                	push   0x0
c0024232:	6a 00                	push   0x0
c0024234:	6a 00                	push   0x0
c0024236:	6a 00                	push   0x0
c0024238:	6a 02                	push   0x2
c002423a:	8d 44 24 30          	lea    eax,[esp+0x30]
c002423e:	50                   	push   eax
c002423f:	53                   	push   ebx
c0024240:	e8 ff fa ff ff       	call   c0023d44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024245:	83 c4 20             	add    esp,0x20
c0024248:	85 c0                	test   eax,eax
c002424a:	89 c6                	mov    esi,eax
c002424c:	75 46                	jne    c0024294 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002424e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0024252:	b9 03 00 00 00       	mov    ecx,0x3
c0024257:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024259:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002425d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0024262:	0f c8                	bswap  eax
c0024264:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0024268:	89 e8                	mov    eax,ebp
c002426a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002426e:	50                   	push   eax
c002426f:	55                   	push   ebp
c0024270:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0024274:	c1 e5 0b             	shl    ebp,0xb
c0024277:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002427b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002427f:	55                   	push   ebp
c0024280:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0024284:	50                   	push   eax
c0024285:	53                   	push   ebx
c0024286:	e8 b9 fa ff ff       	call   c0023d44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002428b:	83 c4 20             	add    esp,0x20
c002428e:	85 c0                	test   eax,eax
c0024290:	89 c6                	mov    esi,eax
c0024292:	74 0c                	je     c00242a0 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0024294:	83 ec 0c             	sub    esp,0xc
c0024297:	53                   	push   ebx
c0024298:	e8 cd fd ff ff       	call   c002406a <SATAPI::detectMedia()>
c002429d:	83 c4 10             	add    esp,0x10
c00242a0:	83 c4 3c             	add    esp,0x3c
c00242a3:	89 f0                	mov    eax,esi
c00242a5:	5b                   	pop    ebx
c00242a6:	5e                   	pop    esi
c00242a7:	5f                   	pop    edi
c00242a8:	5d                   	pop    ebp
c00242a9:	c3                   	ret    
c00242aa:	66 90                	xchg   ax,ax

c00242ac <APICTimer::close(int, int, void*)>:
c00242ac:	b8 00 00 00 00       	mov    eax,0x0
c00242b1:	c3                   	ret    
c00242b2:	66 90                	xchg   ax,ax

c00242b4 <apicTimerHandler(regs*, void*)>:
c00242b4:	83 ec 0c             	sub    esp,0xc
c00242b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00242bd:	b8 10 27 00 00       	mov    eax,0x2710
c00242c2:	ba 00 00 00 00       	mov    edx,0x0
c00242c7:	f7 f1                	div    ecx
c00242c9:	83 ec 0c             	sub    esp,0xc
c00242cc:	50                   	push   eax
c00242cd:	e8 1e 7b fe ff       	call   c000bdf0 <timerHandler(unsigned int)>
c00242d2:	83 c4 10             	add    esp,0x10
c00242d5:	90                   	nop
c00242d6:	83 c4 0c             	add    esp,0xc
c00242d9:	c3                   	ret    
c00242da:	66 90                	xchg   ax,ax

c00242dc <APICTimer::open(int, int, void*)>:
c00242dc:	83 ec 0c             	sub    esp,0xc
c00242df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e5:	83 c0 24             	add    eax,0x24
c00242e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00242ea:	83 ec 08             	sub    esp,0x8
c00242ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242f5:	ff d0                	call   eax
c00242f7:	83 c4 10             	add    esp,0x10
c00242fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024302:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002430c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024310:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024316:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002431a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024320:	83 ec 0c             	sub    esp,0xc
c0024323:	51                   	push   ecx
c0024324:	6a 01                	push   0x1
c0024326:	68 b4 42 02 c0       	push   0xc00242b4
c002432b:	52                   	push   edx
c002432c:	50                   	push   eax
c002432d:	e8 c8 63 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024332:	83 c4 20             	add    esp,0x20
c0024335:	89 c2                	mov    edx,eax
c0024337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024341:	b8 00 00 00 00       	mov    eax,0x0
c0024346:	83 c4 0c             	add    esp,0xc
c0024349:	c3                   	ret    
c002434a:	66 90                	xchg   ax,ax

c002434c <APICTimer::write(int)>:
c002434c:	83 ec 0c             	sub    esp,0xc
c002434f:	83 ec 0c             	sub    esp,0xc
c0024352:	68 a8 f5 02 c0       	push   0xc002f5a8
c0024357:	e8 3c c5 fe ff       	call   c0010898 <KePanic(char const*)>
c002435c:	83 c4 10             	add    esp,0x10
c002435f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024363:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024367:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002436d:	90                   	nop
c002436e:	83 c4 0c             	add    esp,0xc
c0024371:	c3                   	ret    
c0024372:	66 90                	xchg   ax,ax

c0024374 <APICTimer::APICTimer()>:
c0024374:	83 ec 0c             	sub    esp,0xc
c0024377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437b:	83 ec 08             	sub    esp,0x8
c002437e:	68 b8 f5 02 c0       	push   0xc002f5b8
c0024383:	50                   	push   eax
c0024384:	e8 9b 79 fe ff       	call   c000bd24 <Timer::Timer(char const*)>
c0024389:	83 c4 10             	add    esp,0x10
c002438c:	ba cc f5 02 c0       	mov    edx,0xc002f5cc
c0024391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024395:	89 10                	mov    DWORD PTR [eax],edx
c0024397:	90                   	nop
c0024398:	83 c4 0c             	add    esp,0xc
c002439b:	c3                   	ret    

c002439c <PIT::write(int)>:
c002439c:	83 ec 10             	sub    esp,0x10
c002439f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00243a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00243ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243b1:	a3 b8 9d 03 c0       	mov    ds:0xc0039db8,eax
c00243b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00243bb:	89 c2                	mov    edx,eax
c00243bd:	c1 fa 1f             	sar    edx,0x1f
c00243c0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00243c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243c8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00243cf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00243d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00243d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00243dd:	ee                   	out    dx,al
c00243de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243e2:	0f b6 c0             	movzx  eax,al
c00243e5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00243ec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00243f0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00243f4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00243f9:	ee                   	out    dx,al
c00243fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243fe:	c1 f8 08             	sar    eax,0x8
c0024401:	0f b6 c0             	movzx  eax,al
c0024404:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002440b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002440f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024413:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024418:	ee                   	out    dx,al
c0024419:	90                   	nop
c002441a:	83 c4 10             	add    esp,0x10
c002441d:	c3                   	ret    
c002441e:	66 90                	xchg   ax,ax

c0024420 <pitHandler(regs*, void*)>:
c0024420:	83 ec 0c             	sub    esp,0xc
c0024423:	8b 0d b8 9d 03 c0    	mov    ecx,DWORD PTR ds:0xc0039db8
c0024429:	b8 10 27 00 00       	mov    eax,0x2710
c002442e:	89 c2                	mov    edx,eax
c0024430:	c1 fa 1f             	sar    edx,0x1f
c0024433:	f7 f9                	idiv   ecx
c0024435:	83 ec 0c             	sub    esp,0xc
c0024438:	50                   	push   eax
c0024439:	e8 b2 79 fe ff       	call   c000bdf0 <timerHandler(unsigned int)>
c002443e:	83 c4 10             	add    esp,0x10
c0024441:	90                   	nop
c0024442:	83 c4 0c             	add    esp,0xc
c0024445:	c3                   	ret    
c0024446:	66 90                	xchg   ax,ax

c0024448 <PIT::open(int, int, void*)>:
c0024448:	83 ec 0c             	sub    esp,0xc
c002444b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002444f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024451:	83 c0 24             	add    eax,0x24
c0024454:	8b 00                	mov    eax,DWORD PTR [eax]
c0024456:	83 ec 08             	sub    esp,0x8
c0024459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002445d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024461:	ff d0                	call   eax
c0024463:	83 c4 10             	add    esp,0x10
c0024466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002446a:	83 ec 0c             	sub    esp,0xc
c002446d:	6a 00                	push   0x0
c002446f:	6a 01                	push   0x1
c0024471:	68 20 44 02 c0       	push   0xc0024420
c0024476:	6a 00                	push   0x0
c0024478:	50                   	push   eax
c0024479:	e8 7c 62 fe ff       	call   c000a6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002447e:	83 c4 20             	add    esp,0x20
c0024481:	89 c2                	mov    edx,eax
c0024483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024487:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002448d:	b8 00 00 00 00       	mov    eax,0x0
c0024492:	83 c4 0c             	add    esp,0xc
c0024495:	c3                   	ret    
c0024496:	66 90                	xchg   ax,ax

c0024498 <PIT::close(int, int, void*)>:
c0024498:	83 ec 0c             	sub    esp,0xc
c002449b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00244a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ad:	6a 01                	push   0x1
c00244af:	68 20 44 02 c0       	push   0xc0024420
c00244b4:	6a 00                	push   0x0
c00244b6:	50                   	push   eax
c00244b7:	e8 74 62 fe ff       	call   c000a730 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00244bc:	83 c4 10             	add    esp,0x10
c00244bf:	b8 00 00 00 00       	mov    eax,0x0
c00244c4:	83 c4 0c             	add    esp,0xc
c00244c7:	c3                   	ret    

c00244c8 <PIT::PIT()>:
c00244c8:	83 ec 0c             	sub    esp,0xc
c00244cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cf:	83 ec 08             	sub    esp,0x8
c00244d2:	68 f4 f5 02 c0       	push   0xc002f5f4
c00244d7:	50                   	push   eax
c00244d8:	e8 47 78 fe ff       	call   c000bd24 <Timer::Timer(char const*)>
c00244dd:	83 c4 10             	add    esp,0x10
c00244e0:	ba 1c f6 02 c0       	mov    edx,0xc002f61c
c00244e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e9:	89 10                	mov    DWORD PTR [eax],edx
c00244eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00244f5:	0f b6 d0             	movzx  edx,al
c00244f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244fc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024507:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002450d:	0f b6 d0             	movzx  edx,al
c0024510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024514:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002451d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024523:	8d 50 01             	lea    edx,[eax+0x1]
c0024526:	88 d1                	mov    cl,dl
c0024528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002452c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0024532:	0f b6 d0             	movzx  edx,al
c0024535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024539:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002453d:	83 e1 3f             	and    ecx,0x3f
c0024540:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024544:	90                   	nop
c0024545:	83 c4 0c             	add    esp,0xc
c0024548:	c3                   	ret    
c0024549:	66 90                	xchg   ax,ax
c002454b:	66 90                	xchg   ax,ax
c002454d:	66 90                	xchg   ax,ax
c002454f:	90                   	nop

c0024550 <avxDetect>:
c0024550:	b8 01 00 00 00       	mov    eax,0x1
c0024555:	0f a2                	cpuid  
c0024557:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002455d:	74 15                	je     c0024574 <avxDetect.noAVX>
c002455f:	b8 01 00 00 00       	mov    eax,0x1
c0024564:	0f a2                	cpuid  
c0024566:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002456c:	74 06                	je     c0024574 <avxDetect.noAVX>
c002456e:	b8 01 00 00 00       	mov    eax,0x1
c0024573:	c3                   	ret    

c0024574 <avxDetect.noAVX>:
c0024574:	b8 00 00 00 00       	mov    eax,0x0
c0024579:	c3                   	ret    

c002457a <avxSave>:
c002457a:	53                   	push   ebx
c002457b:	52                   	push   edx
c002457c:	31 c0                	xor    eax,eax
c002457e:	48                   	dec    eax
c002457f:	89 c2                	mov    edx,eax
c0024581:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024585:	0f ae 23             	xsave  [ebx]
c0024588:	5a                   	pop    edx
c0024589:	5b                   	pop    ebx
c002458a:	c3                   	ret    

c002458b <avxLoad>:
c002458b:	53                   	push   ebx
c002458c:	52                   	push   edx
c002458d:	31 c0                	xor    eax,eax
c002458f:	48                   	dec    eax
c0024590:	89 c2                	mov    edx,eax
c0024592:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024596:	0f ae 2b             	xrstor [ebx]
c0024599:	5a                   	pop    edx
c002459a:	5b                   	pop    ebx
c002459b:	c3                   	ret    

c002459c <avxInit>:
c002459c:	e8 17 03 00 00       	call   c00248b8 <sseInit>
c00245a1:	50                   	push   eax
c00245a2:	51                   	push   ecx
c00245a3:	0f 20 e0             	mov    eax,cr4
c00245a6:	0d 00 00 04 00       	or     eax,0x40000
c00245ab:	0f 22 e0             	mov    cr4,eax
c00245ae:	31 c9                	xor    ecx,ecx
c00245b0:	0f 01 d0             	xgetbv 
c00245b3:	0d 07 00 00 00       	or     eax,0x7
c00245b8:	0f 01 d1             	xsetbv 
c00245bb:	59                   	pop    ecx
c00245bc:	58                   	pop    eax
c00245bd:	c3                   	ret    

c00245be <avxClose>:
c00245be:	c3                   	ret    
c00245bf:	90                   	nop

c00245c0 <isr0>:
c00245c0:	fa                   	cli    
c00245c1:	68 00 00 00 00       	push   0x0
c00245c6:	68 00 00 00 00       	push   0x0
c00245cb:	e9 56 01 00 00       	jmp    c0024726 <int_common_stub>

c00245d0 <isr1>:
c00245d0:	fa                   	cli    
c00245d1:	6a 00                	push   0x0
c00245d3:	6a 01                	push   0x1
c00245d5:	e9 4c 01 00 00       	jmp    c0024726 <int_common_stub>

c00245da <isr2>:
c00245da:	fa                   	cli    
c00245db:	6a 00                	push   0x0
c00245dd:	6a 02                	push   0x2
c00245df:	e9 42 01 00 00       	jmp    c0024726 <int_common_stub>

c00245e4 <isr3>:
c00245e4:	fa                   	cli    
c00245e5:	6a 00                	push   0x0
c00245e7:	6a 03                	push   0x3
c00245e9:	e9 38 01 00 00       	jmp    c0024726 <int_common_stub>

c00245ee <isr4>:
c00245ee:	fa                   	cli    
c00245ef:	6a 00                	push   0x0
c00245f1:	6a 04                	push   0x4
c00245f3:	e9 2e 01 00 00       	jmp    c0024726 <int_common_stub>

c00245f8 <isr5>:
c00245f8:	fa                   	cli    
c00245f9:	6a 00                	push   0x0
c00245fb:	6a 05                	push   0x5
c00245fd:	e9 24 01 00 00       	jmp    c0024726 <int_common_stub>

c0024602 <isr6>:
c0024602:	fa                   	cli    
c0024603:	6a 00                	push   0x0
c0024605:	6a 06                	push   0x6
c0024607:	e9 1a 01 00 00       	jmp    c0024726 <int_common_stub>

c002460c <isr7>:
c002460c:	fa                   	cli    
c002460d:	6a 00                	push   0x0
c002460f:	6a 07                	push   0x7
c0024611:	e9 10 01 00 00       	jmp    c0024726 <int_common_stub>

c0024616 <isr8>:
c0024616:	fa                   	cli    
c0024617:	6a 08                	push   0x8
c0024619:	e9 08 01 00 00       	jmp    c0024726 <int_common_stub>

c002461e <isr9>:
c002461e:	fa                   	cli    
c002461f:	6a 00                	push   0x0
c0024621:	6a 09                	push   0x9
c0024623:	e9 fe 00 00 00       	jmp    c0024726 <int_common_stub>

c0024628 <isr10>:
c0024628:	fa                   	cli    
c0024629:	6a 0a                	push   0xa
c002462b:	e9 f6 00 00 00       	jmp    c0024726 <int_common_stub>

c0024630 <isr11>:
c0024630:	fa                   	cli    
c0024631:	6a 0b                	push   0xb
c0024633:	e9 ee 00 00 00       	jmp    c0024726 <int_common_stub>

c0024638 <isr12>:
c0024638:	fa                   	cli    
c0024639:	6a 0c                	push   0xc
c002463b:	e9 e6 00 00 00       	jmp    c0024726 <int_common_stub>

c0024640 <isr13>:
c0024640:	fa                   	cli    
c0024641:	6a 0d                	push   0xd
c0024643:	53                   	push   ebx
c0024644:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024648:	81 fb eb 47 02 c0    	cmp    ebx,0xc00247eb
c002464e:	5b                   	pop    ebx
c002464f:	0f 84 98 01 00 00    	je     c00247ed <finishSignal2>
c0024655:	e9 cc 00 00 00       	jmp    c0024726 <int_common_stub>

c002465a <isr14>:
c002465a:	fa                   	cli    
c002465b:	6a 0e                	push   0xe
c002465d:	e9 c4 00 00 00       	jmp    c0024726 <int_common_stub>

c0024662 <isr15>:
c0024662:	fa                   	cli    
c0024663:	6a 00                	push   0x0
c0024665:	6a 0f                	push   0xf
c0024667:	e9 ba 00 00 00       	jmp    c0024726 <int_common_stub>

c002466c <isr16>:
c002466c:	fa                   	cli    
c002466d:	6a 00                	push   0x0
c002466f:	6a 10                	push   0x10
c0024671:	e9 b0 00 00 00       	jmp    c0024726 <int_common_stub>

c0024676 <isr17>:
c0024676:	fa                   	cli    
c0024677:	6a 00                	push   0x0
c0024679:	6a 11                	push   0x11
c002467b:	e9 a6 00 00 00       	jmp    c0024726 <int_common_stub>

c0024680 <isr18>:
c0024680:	fa                   	cli    
c0024681:	6a 00                	push   0x0
c0024683:	6a 12                	push   0x12
c0024685:	e9 9c 00 00 00       	jmp    c0024726 <int_common_stub>

c002468a <irq3>:
c002468a:	fa                   	cli    
c002468b:	6a 00                	push   0x0
c002468d:	6a 23                	push   0x23
c002468f:	e9 92 00 00 00       	jmp    c0024726 <int_common_stub>

c0024694 <irq4>:
c0024694:	fa                   	cli    
c0024695:	6a 00                	push   0x0
c0024697:	6a 24                	push   0x24
c0024699:	e9 88 00 00 00       	jmp    c0024726 <int_common_stub>

c002469e <irq5>:
c002469e:	fa                   	cli    
c002469f:	6a 00                	push   0x0
c00246a1:	6a 25                	push   0x25
c00246a3:	e9 7e 00 00 00       	jmp    c0024726 <int_common_stub>

c00246a8 <irq6>:
c00246a8:	fa                   	cli    
c00246a9:	6a 00                	push   0x0
c00246ab:	6a 26                	push   0x26
c00246ad:	e9 74 00 00 00       	jmp    c0024726 <int_common_stub>

c00246b2 <irq7>:
c00246b2:	fa                   	cli    
c00246b3:	6a 00                	push   0x0
c00246b5:	6a 27                	push   0x27
c00246b7:	e9 6a 00 00 00       	jmp    c0024726 <int_common_stub>

c00246bc <irq8>:
c00246bc:	fa                   	cli    
c00246bd:	6a 00                	push   0x0
c00246bf:	6a 28                	push   0x28
c00246c1:	e9 60 00 00 00       	jmp    c0024726 <int_common_stub>

c00246c6 <irq9>:
c00246c6:	fa                   	cli    
c00246c7:	6a 00                	push   0x0
c00246c9:	6a 29                	push   0x29
c00246cb:	e9 56 00 00 00       	jmp    c0024726 <int_common_stub>

c00246d0 <irq10>:
c00246d0:	fa                   	cli    
c00246d1:	6a 00                	push   0x0
c00246d3:	6a 2a                	push   0x2a
c00246d5:	e9 4c 00 00 00       	jmp    c0024726 <int_common_stub>

c00246da <irq11>:
c00246da:	fa                   	cli    
c00246db:	6a 00                	push   0x0
c00246dd:	6a 2b                	push   0x2b
c00246df:	e9 42 00 00 00       	jmp    c0024726 <int_common_stub>

c00246e4 <irq12>:
c00246e4:	fa                   	cli    
c00246e5:	6a 00                	push   0x0
c00246e7:	6a 2c                	push   0x2c
c00246e9:	e9 38 00 00 00       	jmp    c0024726 <int_common_stub>

c00246ee <irq13>:
c00246ee:	fa                   	cli    
c00246ef:	6a 00                	push   0x0
c00246f1:	6a 2d                	push   0x2d
c00246f3:	e9 2e 00 00 00       	jmp    c0024726 <int_common_stub>

c00246f8 <irq14>:
c00246f8:	fa                   	cli    
c00246f9:	6a 00                	push   0x0
c00246fb:	6a 2e                	push   0x2e
c00246fd:	e9 24 00 00 00       	jmp    c0024726 <int_common_stub>

c0024702 <irq15>:
c0024702:	fa                   	cli    
c0024703:	6a 00                	push   0x0
c0024705:	6a 2f                	push   0x2f
c0024707:	e9 1a 00 00 00       	jmp    c0024726 <int_common_stub>

c002470c <irq1>:
c002470c:	fa                   	cli    
c002470d:	6a 00                	push   0x0
c002470f:	6a 21                	push   0x21
c0024711:	eb 13                	jmp    c0024726 <int_common_stub>

c0024713 <irq2>:
c0024713:	fa                   	cli    
c0024714:	6a 00                	push   0x0
c0024716:	6a 22                	push   0x22
c0024718:	eb 0c                	jmp    c0024726 <int_common_stub>

c002471a <isr96>:
c002471a:	6a 00                	push   0x0
c002471c:	6a 60                	push   0x60
c002471e:	fb                   	sti    
c002471f:	eb 05                	jmp    c0024726 <int_common_stub>

c0024721 <irq0>:
c0024721:	fa                   	cli    
c0024722:	6a 00                	push   0x0
c0024724:	6a 20                	push   0x20

c0024726 <int_common_stub>:
c0024726:	60                   	pusha  
c0024727:	1e                   	push   ds
c0024728:	06                   	push   es
c0024729:	0f a0                	push   fs
c002472b:	0f a8                	push   gs
c002472d:	66 b8 10 00          	mov    ax,0x10
c0024731:	66 8e d8             	mov    ds,ax
c0024734:	66 8e c0             	mov    es,ax
c0024737:	66 8e e0             	mov    fs,ax
c002473a:	66 8e e8             	mov    gs,ax
c002473d:	54                   	push   esp
c002473e:	fc                   	cld    
c002473f:	e8 ae 73 ff ff       	call   c001baf2 <int_handler>
c0024744:	81 c4 04 00 00 00    	add    esp,0x4
c002474a:	e8 08 d5 fe ff       	call   c0011c57 <KiCheckSignalZ>
c002474f:	85 c0                	test   eax,eax
c0024751:	75 0e                	jne    c0024761 <doSignals>
c0024753:	0f a9                	pop    gs
c0024755:	0f a1                	pop    fs
c0024757:	07                   	pop    es
c0024758:	1f                   	pop    ds
c0024759:	61                   	popa   
c002475a:	81 c4 08 00 00 00    	add    esp,0x8
c0024760:	cf                   	iret   

c0024761 <doSignals>:
c0024761:	0f a9                	pop    gs
c0024763:	0f a1                	pop    fs
c0024765:	07                   	pop    es
c0024766:	1f                   	pop    ds
c0024767:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002476c:	61                   	popa   
c002476d:	53                   	push   ebx
c002476e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0024774:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0024777:	5b                   	pop    ebx
c0024778:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002477d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0024780:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0024783:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024786:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0024789:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002478c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002478f:	81 c4 08 00 00 00    	add    esp,0x8
c0024795:	5e                   	pop    esi
c0024796:	5b                   	pop    ebx
c0024797:	59                   	pop    ecx
c0024798:	5a                   	pop    edx
c0024799:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002479c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002479f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00247a2:	52                   	push   edx
c00247a3:	51                   	push   ecx
c00247a4:	53                   	push   ebx
c00247a5:	56                   	push   esi
c00247a6:	81 ec 08 00 00 00    	sub    esp,0x8
c00247ac:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00247af:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00247b2:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00247b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00247bb:	60                   	pusha  
c00247bc:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00247c2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00247c5:	89 e3                	mov    ebx,esp
c00247c7:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00247ca:	52                   	push   edx
c00247cb:	68 eb 47 02 c0       	push   0xc00247eb
c00247d0:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00247d3:	89 dc                	mov    esp,ebx
c00247d5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00247d8:	68 23 00 00 00       	push   0x23
c00247dd:	51                   	push   ecx
c00247de:	68 02 02 00 00       	push   0x202
c00247e3:	68 1b 00 00 00       	push   0x1b
c00247e8:	ff 36                	push   DWORD PTR [esi]
c00247ea:	cf                   	iret   

c00247eb <finishSignal>:
c00247eb:	cd 0f                	int    0xf

c00247ed <finishSignal2>:
c00247ed:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00247f3:	e8 eb d4 fe ff       	call   c0011ce3 <KiFinishSignalZ>
c00247f8:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00247fe:	68 23 00 00 00       	push   0x23
c0024803:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0024806:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0024809:	68 1b 00 00 00       	push   0x1b
c002480e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0024811:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024814:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024817:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002481a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002481d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0024820:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0024823:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0024826:	cf                   	iret   
c0024827:	90                   	nop

c0024828 <irq16>:
c0024828:	fa                   	cli    
c0024829:	6a 00                	push   0x0
c002482b:	6a 30                	push   0x30
c002482d:	e9 f4 fe ff ff       	jmp    c0024726 <int_common_stub>

c0024832 <irq17>:
c0024832:	fa                   	cli    
c0024833:	6a 00                	push   0x0
c0024835:	6a 31                	push   0x31
c0024837:	e9 ea fe ff ff       	jmp    c0024726 <int_common_stub>

c002483c <irq18>:
c002483c:	fa                   	cli    
c002483d:	6a 00                	push   0x0
c002483f:	6a 32                	push   0x32
c0024841:	e9 e0 fe ff ff       	jmp    c0024726 <int_common_stub>

c0024846 <irq19>:
c0024846:	fa                   	cli    
c0024847:	6a 00                	push   0x0
c0024849:	6a 33                	push   0x33
c002484b:	e9 d6 fe ff ff       	jmp    c0024726 <int_common_stub>

c0024850 <irq20>:
c0024850:	fa                   	cli    
c0024851:	6a 00                	push   0x0
c0024853:	6a 34                	push   0x34
c0024855:	e9 cc fe ff ff       	jmp    c0024726 <int_common_stub>

c002485a <irq21>:
c002485a:	fa                   	cli    
c002485b:	6a 00                	push   0x0
c002485d:	6a 35                	push   0x35
c002485f:	e9 c2 fe ff ff       	jmp    c0024726 <int_common_stub>

c0024864 <irq22>:
c0024864:	fa                   	cli    
c0024865:	6a 00                	push   0x0
c0024867:	6a 36                	push   0x36
c0024869:	e9 b8 fe ff ff       	jmp    c0024726 <int_common_stub>

c002486e <irq23>:
c002486e:	fa                   	cli    
c002486f:	6a 00                	push   0x0
c0024871:	6a 37                	push   0x37
c0024873:	e9 ae fe ff ff       	jmp    c0024726 <int_common_stub>
c0024878:	66 90                	xchg   ax,ax
c002487a:	66 90                	xchg   ax,ax
c002487c:	66 90                	xchg   ax,ax
c002487e:	66 90                	xchg   ax,ax

c0024880 <i386GetRDRAND>:
c0024880:	b9 64 00 00 00       	mov    ecx,0x64

c0024885 <retry>:
c0024885:	0f c7 f0             	rdrand eax
c0024888:	72 05                	jb     c002488f <retry.done>
c002488a:	e2 f9                	loop   c0024885 <retry>

c002488c <retry.fail>:
c002488c:	31 c0                	xor    eax,eax
c002488e:	c3                   	ret    

c002488f <retry.done>:
c002488f:	c3                   	ret    

c0024890 <sseDetect>:
c0024890:	b8 01 00 00 00       	mov    eax,0x1
c0024895:	0f a2                	cpuid  
c0024897:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002489d:	74 06                	je     c00248a5 <sseDetect.noSSE>
c002489f:	b8 01 00 00 00       	mov    eax,0x1
c00248a4:	c3                   	ret    

c00248a5 <sseDetect.noSSE>:
c00248a5:	31 c0                	xor    eax,eax
c00248a7:	c3                   	ret    

c00248a8 <sseSave>:
c00248a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248ac:	0f ae 00             	fxsave [eax]
c00248af:	c3                   	ret    

c00248b0 <sseLoad>:
c00248b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248b4:	0f ae 08             	fxrstor [eax]
c00248b7:	c3                   	ret    

c00248b8 <sseInit>:
c00248b8:	e8 48 00 00 00       	call   c0024905 <x87Init>
c00248bd:	0f 20 e0             	mov    eax,cr4
c00248c0:	66 0d 00 06          	or     ax,0x600
c00248c4:	0f 22 e0             	mov    cr4,eax
c00248c7:	c3                   	ret    

c00248c8 <sseClose>:
c00248c8:	c3                   	ret    
c00248c9:	66 90                	xchg   ax,ax
c00248cb:	66 90                	xchg   ax,ax
c00248cd:	66 90                	xchg   ax,ax
c00248cf:	90                   	nop

c00248d0 <value_37F>:
c00248d0:	7f 03                	jg     c00248d5 <value_37A+0x1>

c00248d2 <value_37E>:
c00248d2:	7e 03                	jle    c00248d7 <x87Detect+0x1>

c00248d4 <value_37A>:
c00248d4:	7a 03                	jp     c00248d9 <x87Detect+0x3>

c00248d6 <x87Detect>:
c00248d6:	53                   	push   ebx
c00248d7:	51                   	push   ecx
c00248d8:	52                   	push   edx
c00248d9:	b8 01 00 00 00       	mov    eax,0x1
c00248de:	0f a2                	cpuid  
c00248e0:	f7 c2 01 00 00 00    	test   edx,0x1
c00248e6:	74 06                	je     c00248ee <x87Detect.nox87>
c00248e8:	b8 01 00 00 00       	mov    eax,0x1
c00248ed:	c3                   	ret    

c00248ee <x87Detect.nox87>:
c00248ee:	b8 00 00 00 00       	mov    eax,0x0
c00248f3:	5a                   	pop    edx
c00248f4:	59                   	pop    ecx
c00248f5:	5b                   	pop    ebx
c00248f6:	c3                   	ret    

c00248f7 <x87Save>:
c00248f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00248fb:	dd 30                	fnsave [eax]
c00248fd:	c3                   	ret    

c00248fe <x87Load>:
c00248fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024902:	dd 20                	frstor [eax]
c0024904:	c3                   	ret    

c0024905 <x87Init>:
c0024905:	0f 20 c0             	mov    eax,cr0
c0024908:	66 25 fb ff          	and    ax,0xfffb
c002490c:	66 0d 22 00          	or     ax,0x22
c0024910:	0f 22 c0             	mov    cr0,eax
c0024913:	db e3                	fninit 
c0024915:	0f 06                	clts   
c0024917:	d9 2d d4 48 02 c0    	fldcw  WORD PTR ds:0xc00248d4
c002491d:	c3                   	ret    

c002491e <x87Close>:
c002491e:	c3                   	ret    
c002491f:	90                   	nop

c0024920 <__do_global_ctors_aux>:
c0024920:	a1 b8 a5 02 c0       	mov    eax,ds:0xc002a5b8
c0024925:	83 f8 ff             	cmp    eax,0xffffffff
c0024928:	74 1a                	je     c0024944 <__do_global_ctors_aux+0x24>
c002492a:	55                   	push   ebp
c002492b:	89 e5                	mov    ebp,esp
c002492d:	53                   	push   ebx
c002492e:	52                   	push   edx
c002492f:	bb b8 a5 02 c0       	mov    ebx,0xc002a5b8
c0024934:	ff d0                	call   eax
c0024936:	83 eb 04             	sub    ebx,0x4
c0024939:	8b 03                	mov    eax,DWORD PTR [ebx]
c002493b:	83 f8 ff             	cmp    eax,0xffffffff
c002493e:	75 f4                	jne    c0024934 <__do_global_ctors_aux+0x14>
c0024940:	58                   	pop    eax
c0024941:	5b                   	pop    ebx
c0024942:	5d                   	pop    ebp
c0024943:	c3                   	ret    
c0024944:	c3                   	ret    
c0024945:	66 90                	xchg   ax,ax
c0024947:	90                   	nop

c0024948 <__divdi3>:
c0024948:	55                   	push   ebp
c0024949:	57                   	push   edi
c002494a:	56                   	push   esi
c002494b:	53                   	push   ebx
c002494c:	83 ec 1c             	sub    esp,0x1c
c002494f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024953:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024957:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002495a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002495e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024962:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024966:	85 db                	test   ebx,ebx
c0024968:	0f 88 8e 00 00 00    	js     c00249fc <__divdi3+0xb4>
c002496e:	89 dd                	mov    ebp,ebx
c0024970:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0024978:	89 d3                	mov    ebx,edx
c002497a:	85 d2                	test   edx,edx
c002497c:	79 0d                	jns    c002498b <__divdi3+0x43>
c002497e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0024982:	f7 d8                	neg    eax
c0024984:	83 d2 00             	adc    edx,0x0
c0024987:	f7 da                	neg    edx
c0024989:	89 d3                	mov    ebx,edx
c002498b:	89 c7                	mov    edi,eax
c002498d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024990:	85 db                	test   ebx,ebx
c0024992:	75 48                	jne    c00249dc <__divdi3+0x94>
c0024994:	39 ef                	cmp    edi,ebp
c0024996:	76 24                	jbe    c00249bc <__divdi3+0x74>
c0024998:	89 ea                	mov    edx,ebp
c002499a:	f7 f7                	div    edi
c002499c:	89 c1                	mov    ecx,eax
c002499e:	31 f6                	xor    esi,esi
c00249a0:	89 c8                	mov    eax,ecx
c00249a2:	89 f2                	mov    edx,esi
c00249a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249a8:	85 c9                	test   ecx,ecx
c00249aa:	74 07                	je     c00249b3 <__divdi3+0x6b>
c00249ac:	f7 d8                	neg    eax
c00249ae:	83 d2 00             	adc    edx,0x0
c00249b1:	f7 da                	neg    edx
c00249b3:	83 c4 1c             	add    esp,0x1c
c00249b6:	5b                   	pop    ebx
c00249b7:	5e                   	pop    esi
c00249b8:	5f                   	pop    edi
c00249b9:	5d                   	pop    ebp
c00249ba:	c3                   	ret    
c00249bb:	90                   	nop
c00249bc:	85 ff                	test   edi,edi
c00249be:	75 0b                	jne    c00249cb <__divdi3+0x83>
c00249c0:	b8 01 00 00 00       	mov    eax,0x1
c00249c5:	31 d2                	xor    edx,edx
c00249c7:	f7 f3                	div    ebx
c00249c9:	89 c7                	mov    edi,eax
c00249cb:	31 d2                	xor    edx,edx
c00249cd:	89 e8                	mov    eax,ebp
c00249cf:	f7 f7                	div    edi
c00249d1:	89 c6                	mov    esi,eax
c00249d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00249d6:	f7 f7                	div    edi
c00249d8:	89 c1                	mov    ecx,eax
c00249da:	eb c4                	jmp    c00249a0 <__divdi3+0x58>
c00249dc:	39 eb                	cmp    ebx,ebp
c00249de:	77 3c                	ja     c0024a1c <__divdi3+0xd4>
c00249e0:	0f bd f3             	bsr    esi,ebx
c00249e3:	83 f6 1f             	xor    esi,0x1f
c00249e6:	75 40                	jne    c0024a28 <__divdi3+0xe0>
c00249e8:	39 eb                	cmp    ebx,ebp
c00249ea:	72 09                	jb     c00249f5 <__divdi3+0xad>
c00249ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00249ef:	0f 87 97 00 00 00    	ja     c0024a8c <__divdi3+0x144>
c00249f5:	b9 01 00 00 00       	mov    ecx,0x1
c00249fa:	eb a4                	jmp    c00249a0 <__divdi3+0x58>
c00249fc:	f7 d9                	neg    ecx
c00249fe:	83 d3 00             	adc    ebx,0x0
c0024a01:	f7 db                	neg    ebx
c0024a03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024a06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024a0a:	89 dd                	mov    ebp,ebx
c0024a0c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0024a14:	e9 5f ff ff ff       	jmp    c0024978 <__divdi3+0x30>
c0024a19:	8d 76 00             	lea    esi,[esi+0x0]
c0024a1c:	31 f6                	xor    esi,esi
c0024a1e:	31 c9                	xor    ecx,ecx
c0024a20:	e9 7b ff ff ff       	jmp    c00249a0 <__divdi3+0x58>
c0024a25:	8d 76 00             	lea    esi,[esi+0x0]
c0024a28:	b8 20 00 00 00       	mov    eax,0x20
c0024a2d:	29 f0                	sub    eax,esi
c0024a2f:	89 f1                	mov    ecx,esi
c0024a31:	d3 e3                	shl    ebx,cl
c0024a33:	89 fa                	mov    edx,edi
c0024a35:	88 c1                	mov    cl,al
c0024a37:	d3 ea                	shr    edx,cl
c0024a39:	09 da                	or     edx,ebx
c0024a3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024a3f:	89 f1                	mov    ecx,esi
c0024a41:	d3 e7                	shl    edi,cl
c0024a43:	89 eb                	mov    ebx,ebp
c0024a45:	88 c1                	mov    cl,al
c0024a47:	d3 eb                	shr    ebx,cl
c0024a49:	89 f1                	mov    ecx,esi
c0024a4b:	d3 e5                	shl    ebp,cl
c0024a4d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024a50:	88 c1                	mov    cl,al
c0024a52:	d3 ea                	shr    edx,cl
c0024a54:	09 d5                	or     ebp,edx
c0024a56:	89 e8                	mov    eax,ebp
c0024a58:	89 da                	mov    edx,ebx
c0024a5a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0024a5e:	89 d3                	mov    ebx,edx
c0024a60:	89 c5                	mov    ebp,eax
c0024a62:	f7 e7                	mul    edi
c0024a64:	39 d3                	cmp    ebx,edx
c0024a66:	72 18                	jb     c0024a80 <__divdi3+0x138>
c0024a68:	74 0a                	je     c0024a74 <__divdi3+0x12c>
c0024a6a:	89 e9                	mov    ecx,ebp
c0024a6c:	31 f6                	xor    esi,esi
c0024a6e:	e9 2d ff ff ff       	jmp    c00249a0 <__divdi3+0x58>
c0024a73:	90                   	nop
c0024a74:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0024a77:	89 f1                	mov    ecx,esi
c0024a79:	d3 e7                	shl    edi,cl
c0024a7b:	39 c7                	cmp    edi,eax
c0024a7d:	73 eb                	jae    c0024a6a <__divdi3+0x122>
c0024a7f:	90                   	nop
c0024a80:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0024a83:	31 f6                	xor    esi,esi
c0024a85:	e9 16 ff ff ff       	jmp    c00249a0 <__divdi3+0x58>
c0024a8a:	66 90                	xchg   ax,ax
c0024a8c:	31 c9                	xor    ecx,ecx
c0024a8e:	e9 0d ff ff ff       	jmp    c00249a0 <__divdi3+0x58>
c0024a93:	90                   	nop

c0024a94 <__moddi3>:
c0024a94:	55                   	push   ebp
c0024a95:	57                   	push   edi
c0024a96:	56                   	push   esi
c0024a97:	53                   	push   ebx
c0024a98:	83 ec 2c             	sub    esp,0x2c
c0024a9b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024a9f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0024aa3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024aa7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0024aab:	85 db                	test   ebx,ebx
c0024aad:	0f 88 85 00 00 00    	js     c0024b38 <__moddi3+0xa4>
c0024ab3:	89 de                	mov    esi,ebx
c0024ab5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024abd:	89 d7                	mov    edi,edx
c0024abf:	85 d2                	test   edx,edx
c0024ac1:	79 09                	jns    c0024acc <__moddi3+0x38>
c0024ac3:	f7 d8                	neg    eax
c0024ac5:	83 d2 00             	adc    edx,0x0
c0024ac8:	f7 da                	neg    edx
c0024aca:	89 d7                	mov    edi,edx
c0024acc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ad0:	89 cd                	mov    ebp,ecx
c0024ad2:	85 ff                	test   edi,edi
c0024ad4:	75 52                	jne    c0024b28 <__moddi3+0x94>
c0024ad6:	89 c3                	mov    ebx,eax
c0024ad8:	39 f0                	cmp    eax,esi
c0024ada:	76 24                	jbe    c0024b00 <__moddi3+0x6c>
c0024adc:	89 c8                	mov    eax,ecx
c0024ade:	89 f2                	mov    edx,esi
c0024ae0:	f7 f3                	div    ebx
c0024ae2:	89 d6                	mov    esi,edx
c0024ae4:	89 f0                	mov    eax,esi
c0024ae6:	31 d2                	xor    edx,edx
c0024ae8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024aec:	85 c9                	test   ecx,ecx
c0024aee:	74 07                	je     c0024af7 <__moddi3+0x63>
c0024af0:	f7 d8                	neg    eax
c0024af2:	83 d2 00             	adc    edx,0x0
c0024af5:	f7 da                	neg    edx
c0024af7:	83 c4 2c             	add    esp,0x2c
c0024afa:	5b                   	pop    ebx
c0024afb:	5e                   	pop    esi
c0024afc:	5f                   	pop    edi
c0024afd:	5d                   	pop    ebp
c0024afe:	c3                   	ret    
c0024aff:	90                   	nop
c0024b00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024b04:	85 db                	test   ebx,ebx
c0024b06:	75 0d                	jne    c0024b15 <__moddi3+0x81>
c0024b08:	b8 01 00 00 00       	mov    eax,0x1
c0024b0d:	31 d2                	xor    edx,edx
c0024b0f:	f7 f7                	div    edi
c0024b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b15:	89 f0                	mov    eax,esi
c0024b17:	31 d2                	xor    edx,edx
c0024b19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024b1d:	f7 f7                	div    edi
c0024b1f:	89 e8                	mov    eax,ebp
c0024b21:	f7 f7                	div    edi
c0024b23:	89 d6                	mov    esi,edx
c0024b25:	eb bd                	jmp    c0024ae4 <__moddi3+0x50>
c0024b27:	90                   	nop
c0024b28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024b2c:	39 f7                	cmp    edi,esi
c0024b2e:	76 20                	jbe    c0024b50 <__moddi3+0xbc>
c0024b30:	89 c8                	mov    eax,ecx
c0024b32:	89 f2                	mov    edx,esi
c0024b34:	eb b2                	jmp    c0024ae8 <__moddi3+0x54>
c0024b36:	66 90                	xchg   ax,ax
c0024b38:	f7 d9                	neg    ecx
c0024b3a:	83 d3 00             	adc    ebx,0x0
c0024b3d:	f7 db                	neg    ebx
c0024b3f:	89 de                	mov    esi,ebx
c0024b41:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024b49:	e9 6f ff ff ff       	jmp    c0024abd <__moddi3+0x29>
c0024b4e:	66 90                	xchg   ax,ax
c0024b50:	0f bd c7             	bsr    eax,edi
c0024b53:	83 f0 1f             	xor    eax,0x1f
c0024b56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024b5a:	75 24                	jne    c0024b80 <__moddi3+0xec>
c0024b5c:	39 f7                	cmp    edi,esi
c0024b5e:	72 06                	jb     c0024b66 <__moddi3+0xd2>
c0024b60:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0024b64:	77 0c                	ja     c0024b72 <__moddi3+0xde>
c0024b66:	89 e9                	mov    ecx,ebp
c0024b68:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0024b6c:	19 fe                	sbb    esi,edi
c0024b6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b76:	89 f2                	mov    edx,esi
c0024b78:	e9 6b ff ff ff       	jmp    c0024ae8 <__moddi3+0x54>
c0024b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0024b80:	b8 20 00 00 00       	mov    eax,0x20
c0024b85:	89 c2                	mov    edx,eax
c0024b87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024b8b:	29 da                	sub    edx,ebx
c0024b8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024b91:	88 d9                	mov    cl,bl
c0024b93:	d3 e7                	shl    edi,cl
c0024b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024b99:	88 d1                	mov    cl,dl
c0024b9b:	d3 e8                	shr    eax,cl
c0024b9d:	09 c7                	or     edi,eax
c0024b9f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0024ba3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024ba7:	89 d8                	mov    eax,ebx
c0024ba9:	88 d9                	mov    cl,bl
c0024bab:	d3 e7                	shl    edi,cl
c0024bad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024bb1:	89 f3                	mov    ebx,esi
c0024bb3:	88 d1                	mov    cl,dl
c0024bb5:	d3 eb                	shr    ebx,cl
c0024bb7:	89 c7                	mov    edi,eax
c0024bb9:	88 c1                	mov    cl,al
c0024bbb:	d3 e6                	shl    esi,cl
c0024bbd:	89 e8                	mov    eax,ebp
c0024bbf:	88 d1                	mov    cl,dl
c0024bc1:	d3 e8                	shr    eax,cl
c0024bc3:	09 f0                	or     eax,esi
c0024bc5:	89 f9                	mov    ecx,edi
c0024bc7:	d3 e5                	shl    ebp,cl
c0024bc9:	89 da                	mov    edx,ebx
c0024bcb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0024bcf:	89 d3                	mov    ebx,edx
c0024bd1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024bd5:	89 c6                	mov    esi,eax
c0024bd7:	89 d1                	mov    ecx,edx
c0024bd9:	39 d3                	cmp    ebx,edx
c0024bdb:	72 27                	jb     c0024c04 <__moddi3+0x170>
c0024bdd:	74 21                	je     c0024c00 <__moddi3+0x16c>
c0024bdf:	29 f5                	sub    ebp,esi
c0024be1:	19 cb                	sbb    ebx,ecx
c0024be3:	89 de                	mov    esi,ebx
c0024be5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024be9:	d3 e6                	shl    esi,cl
c0024beb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0024bef:	89 f9                	mov    ecx,edi
c0024bf1:	d3 ed                	shr    ebp,cl
c0024bf3:	09 ee                	or     esi,ebp
c0024bf5:	89 f0                	mov    eax,esi
c0024bf7:	d3 eb                	shr    ebx,cl
c0024bf9:	89 da                	mov    edx,ebx
c0024bfb:	e9 e8 fe ff ff       	jmp    c0024ae8 <__moddi3+0x54>
c0024c00:	39 c5                	cmp    ebp,eax
c0024c02:	73 db                	jae    c0024bdf <__moddi3+0x14b>
c0024c04:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024c08:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024c0c:	89 d1                	mov    ecx,edx
c0024c0e:	89 c6                	mov    esi,eax
c0024c10:	eb cd                	jmp    c0024bdf <__moddi3+0x14b>
c0024c12:	66 90                	xchg   ax,ax

c0024c14 <__udivdi3>:
c0024c14:	55                   	push   ebp
c0024c15:	57                   	push   edi
c0024c16:	56                   	push   esi
c0024c17:	53                   	push   ebx
c0024c18:	83 ec 1c             	sub    esp,0x1c
c0024c1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024c1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024c23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024c27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024c2b:	85 d2                	test   edx,edx
c0024c2d:	75 41                	jne    c0024c70 <__udivdi3+0x5c>
c0024c2f:	39 f7                	cmp    edi,esi
c0024c31:	76 15                	jbe    c0024c48 <__udivdi3+0x34>
c0024c33:	89 e8                	mov    eax,ebp
c0024c35:	89 f2                	mov    edx,esi
c0024c37:	f7 f7                	div    edi
c0024c39:	31 db                	xor    ebx,ebx
c0024c3b:	89 da                	mov    edx,ebx
c0024c3d:	83 c4 1c             	add    esp,0x1c
c0024c40:	5b                   	pop    ebx
c0024c41:	5e                   	pop    esi
c0024c42:	5f                   	pop    edi
c0024c43:	5d                   	pop    ebp
c0024c44:	c3                   	ret    
c0024c45:	8d 76 00             	lea    esi,[esi+0x0]
c0024c48:	89 f9                	mov    ecx,edi
c0024c4a:	85 ff                	test   edi,edi
c0024c4c:	75 0b                	jne    c0024c59 <__udivdi3+0x45>
c0024c4e:	b8 01 00 00 00       	mov    eax,0x1
c0024c53:	31 d2                	xor    edx,edx
c0024c55:	f7 f7                	div    edi
c0024c57:	89 c1                	mov    ecx,eax
c0024c59:	31 d2                	xor    edx,edx
c0024c5b:	89 f0                	mov    eax,esi
c0024c5d:	f7 f1                	div    ecx
c0024c5f:	89 c3                	mov    ebx,eax
c0024c61:	89 e8                	mov    eax,ebp
c0024c63:	f7 f1                	div    ecx
c0024c65:	89 da                	mov    edx,ebx
c0024c67:	83 c4 1c             	add    esp,0x1c
c0024c6a:	5b                   	pop    ebx
c0024c6b:	5e                   	pop    esi
c0024c6c:	5f                   	pop    edi
c0024c6d:	5d                   	pop    ebp
c0024c6e:	c3                   	ret    
c0024c6f:	90                   	nop
c0024c70:	39 f2                	cmp    edx,esi
c0024c72:	77 1c                	ja     c0024c90 <__udivdi3+0x7c>
c0024c74:	0f bd da             	bsr    ebx,edx
c0024c77:	83 f3 1f             	xor    ebx,0x1f
c0024c7a:	75 24                	jne    c0024ca0 <__udivdi3+0x8c>
c0024c7c:	39 f2                	cmp    edx,esi
c0024c7e:	72 08                	jb     c0024c88 <__udivdi3+0x74>
c0024c80:	39 ef                	cmp    edi,ebp
c0024c82:	0f 87 84 00 00 00    	ja     c0024d0c <__udivdi3+0xf8>
c0024c88:	b8 01 00 00 00       	mov    eax,0x1
c0024c8d:	eb ac                	jmp    c0024c3b <__udivdi3+0x27>
c0024c8f:	90                   	nop
c0024c90:	31 db                	xor    ebx,ebx
c0024c92:	31 c0                	xor    eax,eax
c0024c94:	89 da                	mov    edx,ebx
c0024c96:	83 c4 1c             	add    esp,0x1c
c0024c99:	5b                   	pop    ebx
c0024c9a:	5e                   	pop    esi
c0024c9b:	5f                   	pop    edi
c0024c9c:	5d                   	pop    ebp
c0024c9d:	c3                   	ret    
c0024c9e:	66 90                	xchg   ax,ax
c0024ca0:	b8 20 00 00 00       	mov    eax,0x20
c0024ca5:	29 d8                	sub    eax,ebx
c0024ca7:	88 d9                	mov    cl,bl
c0024ca9:	d3 e2                	shl    edx,cl
c0024cab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024caf:	89 fa                	mov    edx,edi
c0024cb1:	88 c1                	mov    cl,al
c0024cb3:	d3 ea                	shr    edx,cl
c0024cb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024cb9:	09 d1                	or     ecx,edx
c0024cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024cbf:	88 d9                	mov    cl,bl
c0024cc1:	d3 e7                	shl    edi,cl
c0024cc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024cc7:	89 f7                	mov    edi,esi
c0024cc9:	88 c1                	mov    cl,al
c0024ccb:	d3 ef                	shr    edi,cl
c0024ccd:	88 d9                	mov    cl,bl
c0024ccf:	d3 e6                	shl    esi,cl
c0024cd1:	89 ea                	mov    edx,ebp
c0024cd3:	88 c1                	mov    cl,al
c0024cd5:	d3 ea                	shr    edx,cl
c0024cd7:	09 d6                	or     esi,edx
c0024cd9:	89 f0                	mov    eax,esi
c0024cdb:	89 fa                	mov    edx,edi
c0024cdd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024ce1:	89 d7                	mov    edi,edx
c0024ce3:	89 c6                	mov    esi,eax
c0024ce5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024ce9:	39 d7                	cmp    edi,edx
c0024ceb:	72 13                	jb     c0024d00 <__udivdi3+0xec>
c0024ced:	74 09                	je     c0024cf8 <__udivdi3+0xe4>
c0024cef:	89 f0                	mov    eax,esi
c0024cf1:	31 db                	xor    ebx,ebx
c0024cf3:	e9 43 ff ff ff       	jmp    c0024c3b <__udivdi3+0x27>
c0024cf8:	88 d9                	mov    cl,bl
c0024cfa:	d3 e5                	shl    ebp,cl
c0024cfc:	39 c5                	cmp    ebp,eax
c0024cfe:	73 ef                	jae    c0024cef <__udivdi3+0xdb>
c0024d00:	8d 46 ff             	lea    eax,[esi-0x1]
c0024d03:	31 db                	xor    ebx,ebx
c0024d05:	e9 31 ff ff ff       	jmp    c0024c3b <__udivdi3+0x27>
c0024d0a:	66 90                	xchg   ax,ax
c0024d0c:	31 c0                	xor    eax,eax
c0024d0e:	e9 28 ff ff ff       	jmp    c0024c3b <__udivdi3+0x27>
c0024d13:	90                   	nop

c0024d14 <__umoddi3>:
c0024d14:	55                   	push   ebp
c0024d15:	57                   	push   edi
c0024d16:	56                   	push   esi
c0024d17:	53                   	push   ebx
c0024d18:	83 ec 1c             	sub    esp,0x1c
c0024d1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024d1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024d27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024d2b:	89 da                	mov    edx,ebx
c0024d2d:	85 c0                	test   eax,eax
c0024d2f:	75 37                	jne    c0024d68 <__umoddi3+0x54>
c0024d31:	39 df                	cmp    edi,ebx
c0024d33:	76 13                	jbe    c0024d48 <__umoddi3+0x34>
c0024d35:	89 f0                	mov    eax,esi
c0024d37:	f7 f7                	div    edi
c0024d39:	89 d0                	mov    eax,edx
c0024d3b:	31 d2                	xor    edx,edx
c0024d3d:	83 c4 1c             	add    esp,0x1c
c0024d40:	5b                   	pop    ebx
c0024d41:	5e                   	pop    esi
c0024d42:	5f                   	pop    edi
c0024d43:	5d                   	pop    ebp
c0024d44:	c3                   	ret    
c0024d45:	8d 76 00             	lea    esi,[esi+0x0]
c0024d48:	89 fd                	mov    ebp,edi
c0024d4a:	85 ff                	test   edi,edi
c0024d4c:	75 0b                	jne    c0024d59 <__umoddi3+0x45>
c0024d4e:	b8 01 00 00 00       	mov    eax,0x1
c0024d53:	31 d2                	xor    edx,edx
c0024d55:	f7 f7                	div    edi
c0024d57:	89 c5                	mov    ebp,eax
c0024d59:	89 d8                	mov    eax,ebx
c0024d5b:	31 d2                	xor    edx,edx
c0024d5d:	f7 f5                	div    ebp
c0024d5f:	89 f0                	mov    eax,esi
c0024d61:	f7 f5                	div    ebp
c0024d63:	89 d0                	mov    eax,edx
c0024d65:	eb d4                	jmp    c0024d3b <__umoddi3+0x27>
c0024d67:	90                   	nop
c0024d68:	89 f1                	mov    ecx,esi
c0024d6a:	39 d8                	cmp    eax,ebx
c0024d6c:	76 0a                	jbe    c0024d78 <__umoddi3+0x64>
c0024d6e:	89 f0                	mov    eax,esi
c0024d70:	83 c4 1c             	add    esp,0x1c
c0024d73:	5b                   	pop    ebx
c0024d74:	5e                   	pop    esi
c0024d75:	5f                   	pop    edi
c0024d76:	5d                   	pop    ebp
c0024d77:	c3                   	ret    
c0024d78:	0f bd e8             	bsr    ebp,eax
c0024d7b:	83 f5 1f             	xor    ebp,0x1f
c0024d7e:	75 1c                	jne    c0024d9c <__umoddi3+0x88>
c0024d80:	39 d8                	cmp    eax,ebx
c0024d82:	72 04                	jb     c0024d88 <__umoddi3+0x74>
c0024d84:	39 f7                	cmp    edi,esi
c0024d86:	77 08                	ja     c0024d90 <__umoddi3+0x7c>
c0024d88:	89 da                	mov    edx,ebx
c0024d8a:	29 fe                	sub    esi,edi
c0024d8c:	19 c2                	sbb    edx,eax
c0024d8e:	89 f1                	mov    ecx,esi
c0024d90:	89 c8                	mov    eax,ecx
c0024d92:	83 c4 1c             	add    esp,0x1c
c0024d95:	5b                   	pop    ebx
c0024d96:	5e                   	pop    esi
c0024d97:	5f                   	pop    edi
c0024d98:	5d                   	pop    ebp
c0024d99:	c3                   	ret    
c0024d9a:	66 90                	xchg   ax,ax
c0024d9c:	ba 20 00 00 00       	mov    edx,0x20
c0024da1:	29 ea                	sub    edx,ebp
c0024da3:	89 e9                	mov    ecx,ebp
c0024da5:	d3 e0                	shl    eax,cl
c0024da7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024dab:	89 f8                	mov    eax,edi
c0024dad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024db1:	88 d1                	mov    cl,dl
c0024db3:	d3 e8                	shr    eax,cl
c0024db5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024db9:	09 c1                	or     ecx,eax
c0024dbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024dbf:	89 e9                	mov    ecx,ebp
c0024dc1:	d3 e7                	shl    edi,cl
c0024dc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024dc7:	89 d8                	mov    eax,ebx
c0024dc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024dcd:	88 d1                	mov    cl,dl
c0024dcf:	d3 e8                	shr    eax,cl
c0024dd1:	89 c7                	mov    edi,eax
c0024dd3:	89 e9                	mov    ecx,ebp
c0024dd5:	d3 e3                	shl    ebx,cl
c0024dd7:	89 f0                	mov    eax,esi
c0024dd9:	88 d1                	mov    cl,dl
c0024ddb:	d3 e8                	shr    eax,cl
c0024ddd:	09 d8                	or     eax,ebx
c0024ddf:	89 e9                	mov    ecx,ebp
c0024de1:	d3 e6                	shl    esi,cl
c0024de3:	89 f3                	mov    ebx,esi
c0024de5:	89 fa                	mov    edx,edi
c0024de7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024deb:	89 d1                	mov    ecx,edx
c0024ded:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024df1:	89 c6                	mov    esi,eax
c0024df3:	89 d7                	mov    edi,edx
c0024df5:	39 d1                	cmp    ecx,edx
c0024df7:	72 27                	jb     c0024e20 <__umoddi3+0x10c>
c0024df9:	74 21                	je     c0024e1c <__umoddi3+0x108>
c0024dfb:	89 ca                	mov    edx,ecx
c0024dfd:	29 f3                	sub    ebx,esi
c0024dff:	19 fa                	sbb    edx,edi
c0024e01:	89 d0                	mov    eax,edx
c0024e03:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024e07:	d3 e0                	shl    eax,cl
c0024e09:	89 e9                	mov    ecx,ebp
c0024e0b:	d3 eb                	shr    ebx,cl
c0024e0d:	09 d8                	or     eax,ebx
c0024e0f:	d3 ea                	shr    edx,cl
c0024e11:	83 c4 1c             	add    esp,0x1c
c0024e14:	5b                   	pop    ebx
c0024e15:	5e                   	pop    esi
c0024e16:	5f                   	pop    edi
c0024e17:	5d                   	pop    ebp
c0024e18:	c3                   	ret    
c0024e19:	8d 76 00             	lea    esi,[esi+0x0]
c0024e1c:	39 c3                	cmp    ebx,eax
c0024e1e:	73 db                	jae    c0024dfb <__umoddi3+0xe7>
c0024e20:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024e24:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024e28:	89 d7                	mov    edi,edx
c0024e2a:	89 c6                	mov    esi,eax
c0024e2c:	eb cd                	jmp    c0024dfb <__umoddi3+0xe7>
c0024e2e:	66 90                	xchg   ax,ax

c0024e30 <acos>:
c0024e30:	83 ec 4c             	sub    esp,0x4c
c0024e33:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024e37:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e3f:	89 d0                	mov    eax,edx
c0024e41:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024e46:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0024e4b:	7e 23                	jle    c0024e70 <acos+0x40>
c0024e4d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024e51:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0024e56:	09 c8                	or     eax,ecx
c0024e58:	0f 85 32 01 00 00    	jne    c0024f90 <acos+0x160>
c0024e5e:	85 d2                	test   edx,edx
c0024e60:	0f 8e 4a 01 00 00    	jle    c0024fb0 <acos+0x180>
c0024e66:	d9 ee                	fldz   
c0024e68:	83 c4 4c             	add    esp,0x4c
c0024e6b:	c3                   	ret    
c0024e6c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024e70:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0024e75:	7f 29                	jg     c0024ea0 <acos+0x70>
c0024e77:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c0024e7c:	0f 8f 4e 01 00 00    	jg     c0024fd0 <acos+0x1a0>
c0024e82:	dd 05 30 10 03 c0    	fld    QWORD PTR ds:0xc0031030
c0024e88:	dc 05 50 f6 02 c0    	fadd   QWORD PTR ds:0xc002f650
c0024e8e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e92:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e96:	83 c4 4c             	add    esp,0x4c
c0024e99:	c3                   	ret    
c0024e9a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ea0:	85 d2                	test   edx,edx
c0024ea2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ea6:	0f 88 d4 01 00 00    	js     c0025080 <acos+0x250>
c0024eac:	d9 e8                	fld1   
c0024eae:	de e1                	fsubrp st(1),st
c0024eb0:	d8 0d ac f6 02 c0    	fmul   DWORD PTR ds:0xc002f6ac
c0024eb6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024eba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ebe:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0024ec2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ec5:	e8 36 27 00 00       	call   c0027600 <sqrt>
c0024eca:	31 c0                	xor    eax,eax
c0024ecc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024ed0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024ed4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ed8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024edc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024ee0:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024ee4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ee8:	d9 c1                	fld    st(1)
c0024eea:	dc 0d 58 f6 02 c0    	fmul   QWORD PTR ds:0xc002f658
c0024ef0:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c0024ef6:	d8 ca                	fmul   st,st(2)
c0024ef8:	dc 25 68 f6 02 c0    	fsub   QWORD PTR ds:0xc002f668
c0024efe:	d8 ca                	fmul   st,st(2)
c0024f00:	dc 05 70 f6 02 c0    	fadd   QWORD PTR ds:0xc002f670
c0024f06:	d8 ca                	fmul   st,st(2)
c0024f08:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c0024f0e:	d8 ca                	fmul   st,st(2)
c0024f10:	dc 05 80 f6 02 c0    	fadd   QWORD PTR ds:0xc002f680
c0024f16:	d8 ca                	fmul   st,st(2)
c0024f18:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f1c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f20:	d9 c2                	fld    st(2)
c0024f22:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c0024f28:	dc 25 90 f6 02 c0    	fsub   QWORD PTR ds:0xc002f690
c0024f2e:	d8 cb                	fmul   st,st(3)
c0024f30:	dc 05 98 f6 02 c0    	fadd   QWORD PTR ds:0xc002f698
c0024f36:	d8 cb                	fmul   st,st(3)
c0024f38:	dc 25 a0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a0
c0024f3e:	d8 cb                	fmul   st,st(3)
c0024f40:	d9 e8                	fld1   
c0024f42:	de c1                	faddp  st(1),st
c0024f44:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f48:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f4c:	de f9                	fdivp  st(1),st
c0024f4e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f52:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f56:	d8 c9                	fmul   st,st(1)
c0024f58:	d9 c3                	fld    st(3)
c0024f5a:	d8 cc                	fmul   st,st(4)
c0024f5c:	de eb                	fsubp  st(3),st
c0024f5e:	d9 c9                	fxch   st(1)
c0024f60:	d8 c3                	fadd   st,st(3)
c0024f62:	de fa                	fdivp  st(2),st
c0024f64:	d9 c9                	fxch   st(1)
c0024f66:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f6a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f6e:	de c1                	faddp  st(1),st
c0024f70:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f74:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f78:	de c1                	faddp  st(1),st
c0024f7a:	d8 c0                	fadd   st,st(0)
c0024f7c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f80:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f84:	83 c4 4c             	add    esp,0x4c
c0024f87:	c3                   	ret    
c0024f88:	90                   	nop
c0024f89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024f90:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f94:	d8 e0                	fsub   st,st(0)
c0024f96:	d8 f0                	fdiv   st,st(0)
c0024f98:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f9c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fa0:	83 c4 4c             	add    esp,0x4c
c0024fa3:	c3                   	ret    
c0024fa4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024faa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024fb0:	dd 05 30 10 03 c0    	fld    QWORD PTR ds:0xc0031030
c0024fb6:	d8 c0                	fadd   st,st(0)
c0024fb8:	dc 05 48 f6 02 c0    	fadd   QWORD PTR ds:0xc002f648
c0024fbe:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fc2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fc6:	83 c4 4c             	add    esp,0x4c
c0024fc9:	c3                   	ret    
c0024fca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024fd0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024fd4:	d9 c0                	fld    st(0)
c0024fd6:	d8 c9                	fmul   st,st(1)
c0024fd8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fdc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fe0:	dd 05 30 10 03 c0    	fld    QWORD PTR ds:0xc0031030
c0024fe6:	d9 c1                	fld    st(1)
c0024fe8:	dc 0d 58 f6 02 c0    	fmul   QWORD PTR ds:0xc002f658
c0024fee:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c0024ff4:	d8 ca                	fmul   st,st(2)
c0024ff6:	dc 25 68 f6 02 c0    	fsub   QWORD PTR ds:0xc002f668
c0024ffc:	d8 ca                	fmul   st,st(2)
c0024ffe:	dc 05 70 f6 02 c0    	fadd   QWORD PTR ds:0xc002f670
c0025004:	d8 ca                	fmul   st,st(2)
c0025006:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c002500c:	d8 ca                	fmul   st,st(2)
c002500e:	dc 05 80 f6 02 c0    	fadd   QWORD PTR ds:0xc002f680
c0025014:	d8 ca                	fmul   st,st(2)
c0025016:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002501a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002501e:	d9 c2                	fld    st(2)
c0025020:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c0025026:	dc 25 90 f6 02 c0    	fsub   QWORD PTR ds:0xc002f690
c002502c:	d8 cb                	fmul   st,st(3)
c002502e:	dc 05 98 f6 02 c0    	fadd   QWORD PTR ds:0xc002f698
c0025034:	d8 cb                	fmul   st,st(3)
c0025036:	dc 25 a0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a0
c002503c:	de cb                	fmulp  st(3),st
c002503e:	d9 ca                	fxch   st(2)
c0025040:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c0025046:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002504a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002504e:	de fa                	fdivp  st(2),st
c0025050:	d9 c9                	fxch   st(1)
c0025052:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025056:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002505a:	d8 ca                	fmul   st,st(2)
c002505c:	de e9                	fsubp  st(1),st
c002505e:	de e9                	fsubp  st(1),st
c0025060:	dc 2d 50 f6 02 c0    	fsubr  QWORD PTR ds:0xc002f650
c0025066:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002506a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002506e:	83 c4 4c             	add    esp,0x4c
c0025071:	c3                   	ret    
c0025072:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025079:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025080:	d9 e8                	fld1   
c0025082:	de c1                	faddp  st(1),st
c0025084:	d8 0d ac f6 02 c0    	fmul   DWORD PTR ds:0xc002f6ac
c002508a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002508e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025092:	d9 c0                	fld    st(0)
c0025094:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025098:	dd 1c 24             	fstp   QWORD PTR [esp]
c002509b:	e8 60 25 00 00       	call   c0027600 <sqrt>
c00250a0:	dd 05 30 10 03 c0    	fld    QWORD PTR ds:0xc0031030
c00250a6:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00250aa:	d9 c0                	fld    st(0)
c00250ac:	dc 0d 58 f6 02 c0    	fmul   QWORD PTR ds:0xc002f658
c00250b2:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c00250b8:	d8 c9                	fmul   st,st(1)
c00250ba:	dc 25 68 f6 02 c0    	fsub   QWORD PTR ds:0xc002f668
c00250c0:	d8 c9                	fmul   st,st(1)
c00250c2:	dc 05 70 f6 02 c0    	fadd   QWORD PTR ds:0xc002f670
c00250c8:	d8 c9                	fmul   st,st(1)
c00250ca:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c00250d0:	d8 c9                	fmul   st,st(1)
c00250d2:	dc 05 80 f6 02 c0    	fadd   QWORD PTR ds:0xc002f680
c00250d8:	d8 c9                	fmul   st,st(1)
c00250da:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250de:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250e2:	d9 c1                	fld    st(1)
c00250e4:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c00250ea:	dc 25 90 f6 02 c0    	fsub   QWORD PTR ds:0xc002f690
c00250f0:	d8 ca                	fmul   st,st(2)
c00250f2:	dc 05 98 f6 02 c0    	fadd   QWORD PTR ds:0xc002f698
c00250f8:	d8 ca                	fmul   st,st(2)
c00250fa:	dc 25 a0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a0
c0025100:	de ca                	fmulp  st(2),st
c0025102:	d9 e8                	fld1   
c0025104:	de c2                	faddp  st(2),st
c0025106:	d9 c9                	fxch   st(1)
c0025108:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002510c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025110:	de f9                	fdivp  st(1),st
c0025112:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025116:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002511a:	d8 ca                	fmul   st,st(2)
c002511c:	de e1                	fsubrp st(1),st
c002511e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025122:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025126:	de c1                	faddp  st(1),st
c0025128:	d8 c0                	fadd   st,st(0)
c002512a:	dc 2d 48 f6 02 c0    	fsubr  QWORD PTR ds:0xc002f648
c0025130:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025134:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025138:	83 c4 4c             	add    esp,0x4c
c002513b:	c3                   	ret    
c002513c:	66 90                	xchg   ax,ax
c002513e:	66 90                	xchg   ax,ax

c0025140 <asin>:
c0025140:	56                   	push   esi
c0025141:	53                   	push   ebx
c0025142:	83 ec 44             	sub    esp,0x44
c0025145:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025149:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002514d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0025151:	89 f3                	mov    ebx,esi
c0025153:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025159:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002515f:	7e 4f                	jle    c00251b0 <asin+0x70>
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c002516b:	09 c3                	or     ebx,eax
c002516d:	74 21                	je     c0025190 <asin+0x50>
c002516f:	d8 e0                	fsub   st,st(0)
c0025171:	d8 f0                	fdiv   st,st(0)
c0025173:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025177:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002517b:	eb 05                	jmp    c0025182 <asin+0x42>
c002517d:	8d 76 00             	lea    esi,[esi+0x0]
c0025180:	dd d9                	fstp   st(1)
c0025182:	83 c4 44             	add    esp,0x44
c0025185:	5b                   	pop    ebx
c0025186:	5e                   	pop    esi
c0025187:	c3                   	ret    
c0025188:	90                   	nop
c0025189:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025190:	d9 c0                	fld    st(0)
c0025192:	dc 0d 50 f6 02 c0    	fmul   QWORD PTR ds:0xc002f650
c0025198:	d9 c9                	fxch   st(1)
c002519a:	dc 0d b0 f6 02 c0    	fmul   QWORD PTR ds:0xc002f6b0
c00251a0:	de c1                	faddp  st(1),st
c00251a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251a6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251aa:	83 c4 44             	add    esp,0x44
c00251ad:	5b                   	pop    ebx
c00251ae:	5e                   	pop    esi
c00251af:	c3                   	ret    
c00251b0:	dd d8                	fstp   st(0)
c00251b2:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c00251b8:	0f 8f b2 00 00 00    	jg     c0025270 <asin+0x130>
c00251be:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c00251c4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00251c8:	7f 16                	jg     c00251e0 <asin+0xa0>
c00251ca:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00251ce:	d9 e8                	fld1   
c00251d0:	d9 c2                	fld    st(2)
c00251d2:	dc 05 b8 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6b8
c00251d8:	df f1                	fcomip st,st(1)
c00251da:	dd d8                	fstp   st(0)
c00251dc:	77 a2                	ja     c0025180 <asin+0x40>
c00251de:	dd d8                	fstp   st(0)
c00251e0:	d9 c0                	fld    st(0)
c00251e2:	d8 c9                	fmul   st,st(1)
c00251e4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251e8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251ec:	d9 c0                	fld    st(0)
c00251ee:	dc 0d 58 f6 02 c0    	fmul   QWORD PTR ds:0xc002f658
c00251f4:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c00251fa:	d8 c9                	fmul   st,st(1)
c00251fc:	dc 25 68 f6 02 c0    	fsub   QWORD PTR ds:0xc002f668
c0025202:	d8 c9                	fmul   st,st(1)
c0025204:	dc 05 70 f6 02 c0    	fadd   QWORD PTR ds:0xc002f670
c002520a:	d8 c9                	fmul   st,st(1)
c002520c:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c0025212:	d8 c9                	fmul   st,st(1)
c0025214:	dc 05 80 f6 02 c0    	fadd   QWORD PTR ds:0xc002f680
c002521a:	d8 c9                	fmul   st,st(1)
c002521c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025220:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025224:	d9 c1                	fld    st(1)
c0025226:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c002522c:	dc 25 90 f6 02 c0    	fsub   QWORD PTR ds:0xc002f690
c0025232:	d8 ca                	fmul   st,st(2)
c0025234:	dc 05 98 f6 02 c0    	fadd   QWORD PTR ds:0xc002f698
c002523a:	d8 ca                	fmul   st,st(2)
c002523c:	dc 25 a0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a0
c0025242:	de ca                	fmulp  st(2),st
c0025244:	d9 c9                	fxch   st(1)
c0025246:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c002524c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025250:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025254:	de f9                	fdivp  st(1),st
c0025256:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002525a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002525e:	d8 c9                	fmul   st,st(1)
c0025260:	de c1                	faddp  st(1),st
c0025262:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025266:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002526a:	83 c4 44             	add    esp,0x44
c002526d:	5b                   	pop    ebx
c002526e:	5e                   	pop    esi
c002526f:	c3                   	ret    
c0025270:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025274:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025277:	e8 34 1d 00 00       	call   c0026fb0 <fabs>
c002527c:	d9 e8                	fld1   
c002527e:	dc e1                	fsubr  st(1),st
c0025280:	d9 c9                	fxch   st(1)
c0025282:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025286:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002528a:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c0025290:	de c9                	fmulp  st(1),st
c0025292:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025296:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002529a:	d9 c0                	fld    st(0)
c002529c:	d9 c0                	fld    st(0)
c002529e:	dc 0d 58 f6 02 c0    	fmul   QWORD PTR ds:0xc002f658
c00252a4:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c00252aa:	d8 c9                	fmul   st,st(1)
c00252ac:	dc 25 68 f6 02 c0    	fsub   QWORD PTR ds:0xc002f668
c00252b2:	d8 c9                	fmul   st,st(1)
c00252b4:	dc 05 70 f6 02 c0    	fadd   QWORD PTR ds:0xc002f670
c00252ba:	d8 c9                	fmul   st,st(1)
c00252bc:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c00252c2:	d8 c9                	fmul   st,st(1)
c00252c4:	dc 05 80 f6 02 c0    	fadd   QWORD PTR ds:0xc002f680
c00252ca:	d8 c9                	fmul   st,st(1)
c00252cc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00252d0:	d9 c0                	fld    st(0)
c00252d2:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c00252d8:	dc 25 90 f6 02 c0    	fsub   QWORD PTR ds:0xc002f690
c00252de:	d8 c9                	fmul   st,st(1)
c00252e0:	dc 05 98 f6 02 c0    	fadd   QWORD PTR ds:0xc002f698
c00252e6:	d8 c9                	fmul   st,st(1)
c00252e8:	dc 25 a0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a0
c00252ee:	d8 c9                	fmul   st,st(1)
c00252f0:	d9 c9                	fxch   st(1)
c00252f2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00252f6:	de c2                	faddp  st(2),st
c00252f8:	d9 c9                	fxch   st(1)
c00252fa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00252fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025301:	e8 fa 22 00 00       	call   c0027600 <sqrt>
c0025306:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c002530c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0025310:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025314:	7e 4a                	jle    c0025360 <asin+0x220>
c0025316:	dd d8                	fstp   st(0)
c0025318:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002531c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0025320:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025324:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025328:	d8 c9                	fmul   st,st(1)
c002532a:	de c1                	faddp  st(1),st
c002532c:	d8 c0                	fadd   st,st(0)
c002532e:	dc 25 b0 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6b0
c0025334:	dc 2d 50 f6 02 c0    	fsubr  QWORD PTR ds:0xc002f650
c002533a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002533e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025342:	85 f6                	test   esi,esi
c0025344:	0f 8f 38 fe ff ff    	jg     c0025182 <asin+0x42>
c002534a:	d9 e0                	fchs   
c002534c:	e9 31 fe ff ff       	jmp    c0025182 <asin+0x42>
c0025351:	eb 0d                	jmp    c0025360 <asin+0x220>
c0025353:	90                   	nop
c0025354:	90                   	nop
c0025355:	90                   	nop
c0025356:	90                   	nop
c0025357:	90                   	nop
c0025358:	90                   	nop
c0025359:	90                   	nop
c002535a:	90                   	nop
c002535b:	90                   	nop
c002535c:	90                   	nop
c002535d:	90                   	nop
c002535e:	90                   	nop
c002535f:	90                   	nop
c0025360:	dd d9                	fstp   st(1)
c0025362:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025366:	31 c0                	xor    eax,eax
c0025368:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002536c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025370:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025374:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025378:	d9 c0                	fld    st(0)
c002537a:	d8 c1                	fadd   st,st(1)
c002537c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025380:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0025384:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025388:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002538c:	de c9                	fmulp  st(1),st
c002538e:	d9 c2                	fld    st(2)
c0025390:	d8 cb                	fmul   st,st(3)
c0025392:	de ec                	fsubp  st(4),st
c0025394:	d9 c9                	fxch   st(1)
c0025396:	d8 c2                	fadd   st,st(2)
c0025398:	de fb                	fdivp  st(3),st
c002539a:	d9 ca                	fxch   st(2)
c002539c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00253a0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00253a4:	d8 c0                	fadd   st,st(0)
c00253a6:	dc 2d b0 f6 02 c0    	fsubr  QWORD PTR ds:0xc002f6b0
c00253ac:	de ea                	fsubp  st(2),st
c00253ae:	d9 c9                	fxch   st(1)
c00253b0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00253b4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00253b8:	d9 c9                	fxch   st(1)
c00253ba:	d8 c0                	fadd   st,st(0)
c00253bc:	dd 05 c0 f6 02 c0    	fld    QWORD PTR ds:0xc002f6c0
c00253c2:	dc e1                	fsubr  st(1),st
c00253c4:	d9 c9                	fxch   st(1)
c00253c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00253ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00253ce:	de ea                	fsubp  st(2),st
c00253d0:	de e1                	fsubrp st(1),st
c00253d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00253d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00253da:	e9 63 ff ff ff       	jmp    c0025342 <asin+0x202>
c00253df:	90                   	nop

c00253e0 <atan2>:
c00253e0:	83 ec 4c             	sub    esp,0x4c
c00253e3:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00253e7:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00253eb:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00253ef:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c00253f3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00253f7:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c00253fb:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00253ff:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025407:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002540b:	89 c1                	mov    ecx,eax
c002540d:	f7 d9                	neg    ecx
c002540f:	89 d3                	mov    ebx,edx
c0025411:	09 c1                	or     ecx,eax
c0025413:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025419:	c1 e9 1f             	shr    ecx,0x1f
c002541c:	09 d9                	or     ecx,ebx
c002541e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0025424:	77 7a                	ja     c00254a0 <atan2+0xc0>
c0025426:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002542a:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c002542e:	89 f1                	mov    ecx,esi
c0025430:	f7 d9                	neg    ecx
c0025432:	89 ef                	mov    edi,ebp
c0025434:	09 f1                	or     ecx,esi
c0025436:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c002543c:	c1 e9 1f             	shr    ecx,0x1f
c002543f:	09 f9                	or     ecx,edi
c0025441:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0025447:	77 57                	ja     c00254a0 <atan2+0xc0>
c0025449:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c002544f:	75 08                	jne    c0025459 <atan2+0x79>
c0025451:	85 c0                	test   eax,eax
c0025453:	0f 84 f7 00 00 00    	je     c0025550 <atan2+0x170>
c0025459:	89 d1                	mov    ecx,edx
c002545b:	c1 f9 1e             	sar    ecx,0x1e
c002545e:	83 e1 02             	and    ecx,0x2
c0025461:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0025465:	89 e9                	mov    ecx,ebp
c0025467:	c1 e9 1f             	shr    ecx,0x1f
c002546a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c002546e:	09 fe                	or     esi,edi
c0025470:	75 5e                	jne    c00254d0 <atan2+0xf0>
c0025472:	83 f9 02             	cmp    ecx,0x2
c0025475:	0f 84 65 01 00 00    	je     c00255e0 <atan2+0x200>
c002547b:	83 f9 03             	cmp    ecx,0x3
c002547e:	0f 85 1c 01 00 00    	jne    c00255a0 <atan2+0x1c0>
c0025484:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c002548a:	dd 05 c8 f6 02 c0    	fld    QWORD PTR ds:0xc002f6c8
c0025490:	de e1                	fsubrp st(1),st
c0025492:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025496:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002549a:	eb 14                	jmp    c00254b0 <atan2+0xd0>
c002549c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00254a0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00254a4:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00254a8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00254ac:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00254b0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00254b4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00254b8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00254bc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00254c0:	83 c4 4c             	add    esp,0x4c
c00254c3:	c3                   	ret    
c00254c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00254ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00254d0:	09 d8                	or     eax,ebx
c00254d2:	0f 84 98 00 00 00    	je     c0025570 <atan2+0x190>
c00254d8:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00254de:	0f 84 1c 01 00 00    	je     c0025600 <atan2+0x220>
c00254e4:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c00254ea:	0f 84 80 00 00 00    	je     c0025570 <atan2+0x190>
c00254f0:	29 df                	sub    edi,ebx
c00254f2:	c1 ff 14             	sar    edi,0x14
c00254f5:	83 ff 3c             	cmp    edi,0x3c
c00254f8:	0f 8f b2 00 00 00    	jg     c00255b0 <atan2+0x1d0>
c00254fe:	c1 ea 1f             	shr    edx,0x1f
c0025501:	84 d2                	test   dl,dl
c0025503:	0f 84 97 01 00 00    	je     c00256a0 <atan2+0x2c0>
c0025509:	83 ff c4             	cmp    edi,0xffffffc4
c002550c:	0f 8d 8e 01 00 00    	jge    c00256a0 <atan2+0x2c0>
c0025512:	d9 ee                	fldz   
c0025514:	83 f9 01             	cmp    ecx,0x1
c0025517:	0f 84 02 01 00 00    	je     c002561f <atan2+0x23f>
c002551d:	83 f9 02             	cmp    ecx,0x2
c0025520:	0f 84 2a 01 00 00    	je     c0025650 <atan2+0x270>
c0025526:	85 c9                	test   ecx,ecx
c0025528:	74 86                	je     c00254b0 <atan2+0xd0>
c002552a:	dd 05 38 10 03 c0    	fld    QWORD PTR ds:0xc0031038
c0025530:	de e9                	fsubp  st(1),st
c0025532:	dc 25 48 f6 02 c0    	fsub   QWORD PTR ds:0xc002f648
c0025538:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002553c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025540:	e9 6b ff ff ff       	jmp    c00254b0 <atan2+0xd0>
c0025545:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025549:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025550:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025554:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0025558:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002555c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025560:	83 c4 4c             	add    esp,0x4c
c0025563:	e9 a8 11 00 00       	jmp    c0026710 <atan>
c0025568:	90                   	nop
c0025569:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025570:	85 ed                	test   ebp,ebp
c0025572:	0f 88 b8 00 00 00    	js     c0025630 <atan2+0x250>
c0025578:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c002557e:	dc 05 50 f6 02 c0    	fadd   QWORD PTR ds:0xc002f650
c0025584:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025588:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002558c:	e9 1f ff ff ff       	jmp    c00254b0 <atan2+0xd0>
c0025591:	eb 0d                	jmp    c00255a0 <atan2+0x1c0>
c0025593:	90                   	nop
c0025594:	90                   	nop
c0025595:	90                   	nop
c0025596:	90                   	nop
c0025597:	90                   	nop
c0025598:	90                   	nop
c0025599:	90                   	nop
c002559a:	90                   	nop
c002559b:	90                   	nop
c002559c:	90                   	nop
c002559d:	90                   	nop
c002559e:	90                   	nop
c002559f:	90                   	nop
c00255a0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00255a4:	e9 07 ff ff ff       	jmp    c00254b0 <atan2+0xd0>
c00255a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00255b0:	dd 05 38 10 03 c0    	fld    QWORD PTR ds:0xc0031038
c00255b6:	83 e1 01             	and    ecx,0x1
c00255b9:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c00255bf:	de c9                	fmulp  st(1),st
c00255c1:	dc 05 50 f6 02 c0    	fadd   QWORD PTR ds:0xc002f650
c00255c7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00255cb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00255cf:	e9 40 ff ff ff       	jmp    c0025514 <atan2+0x134>
c00255d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00255da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00255e0:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c00255e6:	dc 05 48 f6 02 c0    	fadd   QWORD PTR ds:0xc002f648
c00255ec:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00255f0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00255f4:	e9 b7 fe ff ff       	jmp    c00254b0 <atan2+0xd0>
c00255f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025600:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0025606:	74 68                	je     c0025670 <atan2+0x290>
c0025608:	83 f9 02             	cmp    ecx,0x2
c002560b:	74 d3                	je     c00255e0 <atan2+0x200>
c002560d:	83 f9 03             	cmp    ecx,0x3
c0025610:	0f 84 6e fe ff ff    	je     c0025484 <atan2+0xa4>
c0025616:	d9 ee                	fldz   
c0025618:	49                   	dec    ecx
c0025619:	0f 85 91 fe ff ff    	jne    c00254b0 <atan2+0xd0>
c002561f:	d9 e0                	fchs   
c0025621:	e9 8a fe ff ff       	jmp    c00254b0 <atan2+0xd0>
c0025626:	8d 76 00             	lea    esi,[esi+0x0]
c0025629:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025630:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c0025636:	dd 05 d0 f6 02 c0    	fld    QWORD PTR ds:0xc002f6d0
c002563c:	de e1                	fsubrp st(1),st
c002563e:	e9 41 ff ff ff       	jmp    c0025584 <atan2+0x1a4>
c0025643:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025649:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025650:	dd 05 38 10 03 c0    	fld    QWORD PTR ds:0xc0031038
c0025656:	de e9                	fsubp  st(1),st
c0025658:	dc 2d 48 f6 02 c0    	fsubr  QWORD PTR ds:0xc002f648
c002565e:	e9 21 ff ff ff       	jmp    c0025584 <atan2+0x1a4>
c0025663:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025669:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025670:	83 f9 02             	cmp    ecx,0x2
c0025673:	0f 84 82 00 00 00    	je     c00256fb <atan2+0x31b>
c0025679:	83 f9 03             	cmp    ecx,0x3
c002567c:	74 62                	je     c00256e0 <atan2+0x300>
c002567e:	49                   	dec    ecx
c002567f:	90                   	nop
c0025680:	74 43                	je     c00256c5 <atan2+0x2e5>
c0025682:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c0025688:	dc 05 c0 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6c0
c002568e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025692:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025696:	e9 15 fe ff ff       	jmp    c00254b0 <atan2+0xd0>
c002569b:	90                   	nop
c002569c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00256a0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00256a4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256a8:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c00256ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256af:	e8 fc 18 00 00       	call   c0026fb0 <fabs>
c00256b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256b7:	e8 54 10 00 00       	call   c0026710 <atan>
c00256bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00256c0:	e9 4f fe ff ff       	jmp    c0025514 <atan2+0x134>
c00256c5:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c00256cb:	dd 05 d8 f6 02 c0    	fld    QWORD PTR ds:0xc002f6d8
c00256d1:	de e1                	fsubrp st(1),st
c00256d3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00256d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00256db:	e9 d0 fd ff ff       	jmp    c00254b0 <atan2+0xd0>
c00256e0:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c00256e6:	dd 05 e8 f6 02 c0    	fld    QWORD PTR ds:0xc002f6e8
c00256ec:	de e1                	fsubrp st(1),st
c00256ee:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00256f2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00256f6:	e9 b5 fd ff ff       	jmp    c00254b0 <atan2+0xd0>
c00256fb:	dd 05 40 10 03 c0    	fld    QWORD PTR ds:0xc0031040
c0025701:	dc 05 e0 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6e0
c0025707:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002570b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002570f:	e9 9c fd ff ff       	jmp    c00254b0 <atan2+0xd0>
c0025714:	66 90                	xchg   ax,ax
c0025716:	66 90                	xchg   ax,ax
c0025718:	66 90                	xchg   ax,ax
c002571a:	66 90                	xchg   ax,ax
c002571c:	66 90                	xchg   ax,ax
c002571e:	66 90                	xchg   ax,ax

c0025720 <cosh>:
c0025720:	53                   	push   ebx
c0025721:	83 ec 28             	sub    esp,0x28
c0025724:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025728:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002572c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025730:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025736:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002573c:	0f 8f 9e 00 00 00    	jg     c00257e0 <cosh+0xc0>
c0025742:	dd d8                	fstp   st(0)
c0025744:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c002574a:	7e 44                	jle    c0025790 <cosh+0x70>
c002574c:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025752:	0f 8e a8 00 00 00    	jle    c0025800 <cosh+0xe0>
c0025758:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c002575e:	0f 8e dc 00 00 00    	jle    c0025840 <cosh+0x120>
c0025764:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c002576a:	0f 8e 00 01 00 00    	jle    c0025870 <cosh+0x150>
c0025770:	d9 05 f0 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f0
c0025776:	eb 0c                	jmp    c0025784 <cosh+0x64>
c0025778:	90                   	nop
c0025779:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025780:	dd d9                	fstp   st(1)
c0025782:	dd d9                	fstp   st(1)
c0025784:	83 c4 28             	add    esp,0x28
c0025787:	5b                   	pop    ebx
c0025788:	c3                   	ret    
c0025789:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025790:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025794:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025797:	e8 14 18 00 00       	call   c0026fb0 <fabs>
c002579c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002579f:	e8 7c 13 00 00       	call   c0026b20 <expm1>
c00257a4:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c00257aa:	d9 e8                	fld1   
c00257ac:	d9 c1                	fld    st(1)
c00257ae:	d8 c1                	fadd   st,st(1)
c00257b0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00257b4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00257b8:	7e c6                	jle    c0025780 <cosh+0x60>
c00257ba:	d9 ca                	fxch   st(2)
c00257bc:	d8 c8                	fmul   st,st(0)
c00257be:	d9 ca                	fxch   st(2)
c00257c0:	d8 c0                	fadd   st,st(0)
c00257c2:	de fa                	fdivp  st(2),st
c00257c4:	de c1                	faddp  st(1),st
c00257c6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00257ca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00257ce:	83 c4 28             	add    esp,0x28
c00257d1:	5b                   	pop    ebx
c00257d2:	c3                   	ret    
c00257d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00257d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00257e0:	d9 c0                	fld    st(0)
c00257e2:	de c9                	fmulp  st(1),st
c00257e4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00257e8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00257ec:	83 c4 28             	add    esp,0x28
c00257ef:	5b                   	pop    ebx
c00257f0:	c3                   	ret    
c00257f1:	eb 0d                	jmp    c0025800 <cosh+0xe0>
c00257f3:	90                   	nop
c00257f4:	90                   	nop
c00257f5:	90                   	nop
c00257f6:	90                   	nop
c00257f7:	90                   	nop
c00257f8:	90                   	nop
c00257f9:	90                   	nop
c00257fa:	90                   	nop
c00257fb:	90                   	nop
c00257fc:	90                   	nop
c00257fd:	90                   	nop
c00257fe:	90                   	nop
c00257ff:	90                   	nop
c0025800:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025804:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025807:	e8 a4 17 00 00       	call   c0026fb0 <fabs>
c002580c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002580f:	e8 54 1d 00 00       	call   c0027568 <exp>
c0025814:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c002581a:	d9 c1                	fld    st(1)
c002581c:	d8 c9                	fmul   st,st(1)
c002581e:	d9 c9                	fxch   st(1)
c0025820:	de f2                	fdivrp st(2),st
c0025822:	de c1                	faddp  st(1),st
c0025824:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025828:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002582c:	e9 53 ff ff ff       	jmp    c0025784 <cosh+0x64>
c0025831:	eb 0d                	jmp    c0025840 <cosh+0x120>
c0025833:	90                   	nop
c0025834:	90                   	nop
c0025835:	90                   	nop
c0025836:	90                   	nop
c0025837:	90                   	nop
c0025838:	90                   	nop
c0025839:	90                   	nop
c002583a:	90                   	nop
c002583b:	90                   	nop
c002583c:	90                   	nop
c002583d:	90                   	nop
c002583e:	90                   	nop
c002583f:	90                   	nop
c0025840:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025844:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025847:	e8 64 17 00 00       	call   c0026fb0 <fabs>
c002584c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002584f:	e8 14 1d 00 00       	call   c0027568 <exp>
c0025854:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c002585a:	de c9                	fmulp  st(1),st
c002585c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025860:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025864:	e9 1b ff ff ff       	jmp    c0025784 <cosh+0x64>
c0025869:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025870:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025874:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025877:	e8 34 17 00 00       	call   c0026fb0 <fabs>
c002587c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025885:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025888:	e8 d3 0c 00 00       	call   c0026560 <__ldexp_exp>
c002588d:	e9 f2 fe ff ff       	jmp    c0025784 <cosh+0x64>
c0025892:	66 90                	xchg   ax,ax
c0025894:	66 90                	xchg   ax,ax
c0025896:	66 90                	xchg   ax,ax
c0025898:	66 90                	xchg   ax,ax
c002589a:	66 90                	xchg   ax,ax
c002589c:	66 90                	xchg   ax,ax
c002589e:	66 90                	xchg   ax,ax

c00258a0 <pow>:
c00258a0:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00258a6:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c00258ad:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c00258b4:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c00258bb:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c00258c2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00258c6:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c00258cd:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c00258d4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00258d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	89 f3                	mov    ebx,esi
c00258e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00258e8:	89 d9                	mov    ecx,ebx
c00258ea:	09 c1                	or     ecx,eax
c00258ec:	0f 84 9e 00 00 00    	je     c0025990 <pow+0xf0>
c00258f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00258f6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00258fa:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0025900:	75 3e                	jne    c0025940 <pow+0xa0>
c0025902:	85 ed                	test   ebp,ebp
c0025904:	75 3a                	jne    c0025940 <pow+0xa0>
c0025906:	d9 e8                	fld1   
c0025908:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002590c:	eb 02                	jmp    c0025910 <pow+0x70>
c002590e:	dd d8                	fstp   st(0)
c0025910:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025914:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002591b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0025922:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0025929:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0025930:	81 c4 9c 00 00 00    	add    esp,0x9c
c0025936:	c3                   	ret    
c0025937:	89 f6                	mov    esi,esi
c0025939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025940:	89 fa                	mov    edx,edi
c0025942:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c002594c:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0025952:	7f 1c                	jg     c0025970 <pow+0xd0>
c0025954:	0f 94 c1             	sete   cl
c0025957:	85 ed                	test   ebp,ebp
c0025959:	0f 95 c2             	setne  dl
c002595c:	84 ca                	test   dl,cl
c002595e:	75 10                	jne    c0025970 <pow+0xd0>
c0025960:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025966:	7f 08                	jg     c0025970 <pow+0xd0>
c0025968:	75 36                	jne    c00259a0 <pow+0x100>
c002596a:	85 c0                	test   eax,eax
c002596c:	74 32                	je     c00259a0 <pow+0x100>
c002596e:	66 90                	xchg   ax,ax
c0025970:	d9 ee                	fldz   
c0025972:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025976:	d8 c1                	fadd   st,st(1)
c0025978:	d9 c9                	fxch   st(1)
c002597a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c002597e:	de c1                	faddp  st(1),st
c0025980:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025984:	eb 8a                	jmp    c0025910 <pow+0x70>
c0025986:	8d 76 00             	lea    esi,[esi+0x0]
c0025989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025990:	d9 e8                	fld1   
c0025992:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025996:	e9 75 ff ff ff       	jmp    c0025910 <pow+0x70>
c002599b:	90                   	nop
c002599c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00259a0:	31 c9                	xor    ecx,ecx
c00259a2:	85 ff                	test   edi,edi
c00259a4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00259a8:	0f 88 22 01 00 00    	js     c0025ad0 <pow+0x230>
c00259ae:	85 c0                	test   eax,eax
c00259b0:	75 5e                	jne    c0025a10 <pow+0x170>
c00259b2:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00259b8:	0f 84 72 01 00 00    	je     c0025b30 <pow+0x290>
c00259be:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c00259c4:	0f 84 b6 01 00 00    	je     c0025b80 <pow+0x2e0>
c00259ca:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c00259d0:	0f 84 38 07 00 00    	je     c002610e <pow+0x86e>
c00259d6:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c00259dc:	0f 84 33 08 00 00    	je     c0026215 <pow+0x975>
c00259e2:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c00259e8:	0f 84 4f 08 00 00    	je     c002623d <pow+0x99d>
c00259ee:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c00259f4:	75 1a                	jne    c0025a10 <pow+0x170>
c00259f6:	89 f8                	mov    eax,edi
c00259f8:	f7 d0                	not    eax
c00259fa:	c1 e8 1f             	shr    eax,0x1f
c00259fd:	84 c0                	test   al,al
c00259ff:	0f 85 f1 08 00 00    	jne    c00262f6 <pow+0xa56>
c0025a05:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025a09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025a10:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025a14:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025a17:	e8 94 15 00 00       	call   c0026fb0 <fabs>
c0025a1c:	85 ed                	test   ebp,ebp
c0025a1e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025a22:	75 1e                	jne    c0025a42 <pow+0x1a2>
c0025a24:	89 f8                	mov    eax,edi
c0025a26:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025a2b:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0025a30:	0f 84 33 06 00 00    	je     c0026069 <pow+0x7c9>
c0025a36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025a3a:	85 c0                	test   eax,eax
c0025a3c:	0f 84 27 06 00 00    	je     c0026069 <pow+0x7c9>
c0025a42:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025a46:	89 f8                	mov    eax,edi
c0025a48:	c1 e8 1f             	shr    eax,0x1f
c0025a4b:	48                   	dec    eax
c0025a4c:	09 c1                	or     ecx,eax
c0025a4e:	0f 84 49 01 00 00    	je     c0025b9d <pow+0x2fd>
c0025a54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025a58:	d9 ee                	fldz   
c0025a5a:	49                   	dec    ecx
c0025a5b:	09 c1                	or     ecx,eax
c0025a5d:	0f 85 4b 01 00 00    	jne    c0025bae <pow+0x30e>
c0025a63:	d9 e0                	fchs   
c0025a65:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025a69:	d9 05 f4 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f4
c0025a6f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a73:	db 2d 40 f7 02 c0    	fld    TBYTE PTR ds:0xc002f740
c0025a79:	db 2d 50 f7 02 c0    	fld    TBYTE PTR ds:0xc002f750
c0025a7f:	d9 e8                	fld1   
c0025a81:	d9 e0                	fchs   
c0025a83:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025a87:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c0025a8d:	0f 8e 40 01 00 00    	jle    c0025bd3 <pow+0x333>
c0025a93:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0025a99:	0f 8e 93 06 00 00    	jle    c0026132 <pow+0x892>
c0025a9f:	dd d8                	fstp   st(0)
c0025aa1:	dd d8                	fstp   st(0)
c0025aa3:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c0025aab:	0f 8f c9 07 00 00    	jg     c002627a <pow+0x9da>
c0025ab1:	85 f6                	test   esi,esi
c0025ab3:	0f 88 94 08 00 00    	js     c002634d <pow+0xaad>
c0025ab9:	d9 ee                	fldz   
c0025abb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025abf:	e9 4c fe ff ff       	jmp    c0025910 <pow+0x70>
c0025ac4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025aca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025ad0:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0025ad6:	0f 8f 94 00 00 00    	jg     c0025b70 <pow+0x2d0>
c0025adc:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0025ae2:	0f 8e c6 fe ff ff    	jle    c00259ae <pow+0x10e>
c0025ae8:	89 d9                	mov    ecx,ebx
c0025aea:	c1 f9 14             	sar    ecx,0x14
c0025aed:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0025af3:	83 f9 14             	cmp    ecx,0x14
c0025af6:	0f 8e e5 06 00 00    	jle    c00261e1 <pow+0x941>
c0025afc:	ba 34 00 00 00       	mov    edx,0x34
c0025b01:	29 ca                	sub    edx,ecx
c0025b03:	89 d1                	mov    ecx,edx
c0025b05:	89 c2                	mov    edx,eax
c0025b07:	d3 ea                	shr    edx,cl
c0025b09:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0025b0d:	d3 e2                	shl    edx,cl
c0025b0f:	39 c2                	cmp    edx,eax
c0025b11:	0f 85 97 fe ff ff    	jne    c00259ae <pow+0x10e>
c0025b17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0025b1b:	b9 02 00 00 00       	mov    ecx,0x2
c0025b20:	83 e2 01             	and    edx,0x1
c0025b23:	29 d1                	sub    ecx,edx
c0025b25:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0025b29:	e9 80 fe ff ff       	jmp    c00259ae <pow+0x10e>
c0025b2e:	66 90                	xchg   ax,ax
c0025b30:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0025b34:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0025b3a:	09 e8                	or     eax,ebp
c0025b3c:	0f 84 61 05 00 00    	je     c00260a3 <pow+0x803>
c0025b42:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0025b48:	0f 8e 60 05 00 00    	jle    c00260ae <pow+0x80e>
c0025b4e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025b52:	85 f6                	test   esi,esi
c0025b54:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b58:	0f 89 b2 fd ff ff    	jns    c0025910 <pow+0x70>
c0025b5e:	e9 56 ff ff ff       	jmp    c0025ab9 <pow+0x219>
c0025b63:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025b70:	ba 02 00 00 00       	mov    edx,0x2
c0025b75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0025b79:	e9 30 fe ff ff       	jmp    c00259ae <pow+0x10e>
c0025b7e:	66 90                	xchg   ax,ax
c0025b80:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025b84:	85 f6                	test   esi,esi
c0025b86:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0025b8a:	0f 89 7e fd ff ff    	jns    c002590e <pow+0x6e>
c0025b90:	d9 e8                	fld1   
c0025b92:	de f1                	fdivrp st(1),st
c0025b94:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b98:	e9 73 fd ff ff       	jmp    c0025910 <pow+0x70>
c0025b9d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ba1:	d8 e0                	fsub   st,st(0)
c0025ba3:	d8 f0                	fdiv   st,st(0)
c0025ba5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025ba9:	e9 62 fd ff ff       	jmp    c0025910 <pow+0x70>
c0025bae:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025bb2:	d9 05 f0 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f0
c0025bb8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025bbc:	db 2d 20 f7 02 c0    	fld    TBYTE PTR ds:0xc002f720
c0025bc2:	db 2d 30 f7 02 c0    	fld    TBYTE PTR ds:0xc002f730
c0025bc8:	d9 e8                	fld1   
c0025bca:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025bce:	e9 b4 fe ff ff       	jmp    c0025a87 <pow+0x1e7>
c0025bd3:	dd d8                	fstp   st(0)
c0025bd5:	dd d8                	fstp   st(0)
c0025bd7:	31 c0                	xor    eax,eax
c0025bd9:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0025bdf:	75 1b                	jne    c0025bfc <pow+0x35c>
c0025be1:	d9 05 08 f7 02 c0    	fld    DWORD PTR ds:0xc002f708
c0025be7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0025beb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0025bf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0025bf7:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0025bfc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0025c00:	89 f9                	mov    ecx,edi
c0025c02:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0025c08:	c1 f9 14             	sar    ecx,0x14
c0025c0b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0025c12:	89 f8                	mov    eax,edi
c0025c14:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0025c19:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0025c1f:	0f 8e f8 04 00 00    	jle    c002611d <pow+0x87d>
c0025c25:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0025c2b:	0f 8e 25 06 00 00    	jle    c0026256 <pow+0x9b6>
c0025c31:	d9 ee                	fldz   
c0025c33:	41                   	inc    ecx
c0025c34:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0025c38:	2d 00 00 10 00       	sub    eax,0x100000
c0025c3d:	31 d2                	xor    edx,edx
c0025c3f:	d9 ee                	fldz   
c0025c41:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0025c45:	d9 e8                	fld1   
c0025c47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025c4b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c4f:	d1 f8                	sar    eax,1
c0025c51:	31 f6                	xor    esi,esi
c0025c53:	0d 00 00 00 20       	or     eax,0x20000000
c0025c58:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0025c5c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0025c63:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0025c67:	31 ff                	xor    edi,edi
c0025c69:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025c6d:	d9 c0                	fld    st(0)
c0025c6f:	d8 e2                	fsub   st,st(2)
c0025c71:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c75:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c79:	d9 c1                	fld    st(1)
c0025c7b:	d8 c3                	fadd   st,st(3)
c0025c7d:	d8 3d a8 f6 02 c0    	fdivr  DWORD PTR ds:0xc002f6a8
c0025c83:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c87:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c8b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025c8f:	d9 c0                	fld    st(0)
c0025c91:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025c95:	de ca                	fmulp  st(2),st
c0025c97:	d9 c9                	fxch   st(1)
c0025c99:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025c9d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0025ca1:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0025ca5:	31 ed                	xor    ebp,ebp
c0025ca7:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025cab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025caf:	31 c0                	xor    eax,eax
c0025cb1:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025cb5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025cb9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025cbd:	d9 c0                	fld    st(0)
c0025cbf:	d8 c9                	fmul   st,st(1)
c0025cc1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cc5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025cc9:	d9 c2                	fld    st(2)
c0025ccb:	d8 cc                	fmul   st,st(4)
c0025ccd:	de ed                	fsubp  st(5),st
c0025ccf:	d9 ca                	fxch   st(2)
c0025cd1:	de e6                	fsubrp st(6),st
c0025cd3:	d9 cc                	fxch   st(4)
c0025cd5:	de e5                	fsubrp st(5),st
c0025cd7:	d9 cc                	fxch   st(4)
c0025cd9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cdd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ce1:	d8 c9                	fmul   st,st(1)
c0025ce3:	de ea                	fsubp  st(2),st
c0025ce5:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025ce9:	de ca                	fmulp  st(2),st
c0025ceb:	d9 c9                	fxch   st(1)
c0025ced:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cf1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025cf5:	d9 c3                	fld    st(3)
c0025cf7:	dc 0d 88 f7 02 c0    	fmul   QWORD PTR ds:0xc002f788
c0025cfd:	dc 05 90 f7 02 c0    	fadd   QWORD PTR ds:0xc002f790
c0025d03:	d8 cc                	fmul   st,st(4)
c0025d05:	dc 05 98 f7 02 c0    	fadd   QWORD PTR ds:0xc002f798
c0025d0b:	d8 cc                	fmul   st,st(4)
c0025d0d:	dc 05 a0 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7a0
c0025d13:	d8 cc                	fmul   st,st(4)
c0025d15:	dc 05 a8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7a8
c0025d1b:	d8 cc                	fmul   st,st(4)
c0025d1d:	dc 05 b0 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7b0
c0025d23:	d9 cc                	fxch   st(4)
c0025d25:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0025d29:	d8 c8                	fmul   st,st(0)
c0025d2b:	de cc                	fmulp  st(4),st
c0025d2d:	d9 cb                	fxch   st(3)
c0025d2f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d33:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d37:	d9 c1                	fld    st(1)
c0025d39:	d8 c3                	fadd   st,st(3)
c0025d3b:	d8 cc                	fmul   st,st(4)
c0025d3d:	de c1                	faddp  st(1),st
c0025d3f:	d9 c1                	fld    st(1)
c0025d41:	d8 ca                	fmul   st,st(2)
c0025d43:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d47:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d4b:	d9 c9                	fxch   st(1)
c0025d4d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d51:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d55:	d9 05 0c f7 02 c0    	fld    DWORD PTR ds:0xc002f70c
c0025d5b:	d9 c2                	fld    st(2)
c0025d5d:	d8 c1                	fadd   st,st(1)
c0025d5f:	d8 c2                	fadd   st,st(2)
c0025d61:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d65:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025d69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025d6d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025d71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025d75:	31 c0                	xor    eax,eax
c0025d77:	dc cc                	fmul   st(4),st
c0025d79:	d9 cc                	fxch   st(4)
c0025d7b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d7f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d83:	d9 c9                	fxch   st(1)
c0025d85:	d8 ec                	fsubr  st,st(4)
c0025d87:	de e3                	fsubrp st(3),st
c0025d89:	d9 c9                	fxch   st(1)
c0025d8b:	de e2                	fsubrp st(2),st
c0025d8d:	d9 c9                	fxch   st(1)
c0025d8f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d93:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d97:	de cb                	fmulp  st(3),st
c0025d99:	d9 cb                	fxch   st(3)
c0025d9b:	de c9                	fmulp  st(1),st
c0025d9d:	de c1                	faddp  st(1),st
c0025d9f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025da3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025da7:	d9 c1                	fld    st(1)
c0025da9:	d8 c1                	fadd   st,st(1)
c0025dab:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025daf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025db3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025db7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025dbb:	d9 c0                	fld    st(0)
c0025dbd:	d8 0d 10 f7 02 c0    	fmul   DWORD PTR ds:0xc002f710
c0025dc3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025dc7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025dcb:	d9 cb                	fxch   st(3)
c0025dcd:	d8 e9                	fsubr  st,st(1)
c0025dcf:	de ea                	fsubp  st(2),st
c0025dd1:	d9 c9                	fxch   st(1)
c0025dd3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025dd7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ddb:	dc 0d b8 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7b8
c0025de1:	d9 c9                	fxch   st(1)
c0025de3:	dc 0d c0 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7c0
c0025de9:	de c1                	faddp  st(1),st
c0025deb:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c0025def:	de c1                	faddp  st(1),st
c0025df1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025df5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0025df9:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025dfd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0025e01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025e05:	d9 c2                	fld    st(2)
c0025e07:	d8 c2                	fadd   st,st(2)
c0025e09:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c0025e0d:	dc c1                	fadd   st(1),st
c0025e0f:	d9 c9                	fxch   st(1)
c0025e11:	d8 c2                	fadd   st,st(2)
c0025e13:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e17:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025e1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025e1f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e23:	dc e2                	fsubr  st(2),st
c0025e25:	d9 ca                	fxch   st(2)
c0025e27:	de e1                	fsubrp st(1),st
c0025e29:	de e3                	fsubrp st(3),st
c0025e2b:	d9 ca                	fxch   st(2)
c0025e2d:	de e9                	fsubp  st(1),st
c0025e2f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e33:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025e37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e3b:	31 db                	xor    ebx,ebx
c0025e3d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0025e41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025e45:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e49:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e4d:	d9 c0                	fld    st(0)
c0025e4f:	d8 e2                	fsub   st,st(2)
c0025e51:	d8 cc                	fmul   st,st(4)
c0025e53:	d9 c9                	fxch   st(1)
c0025e55:	de cb                	fmulp  st(3),st
c0025e57:	de c2                	faddp  st(2),st
c0025e59:	d9 c9                	fxch   st(1)
c0025e5b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e5f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025e63:	d9 ca                	fxch   st(2)
c0025e65:	de c9                	fmulp  st(1),st
c0025e67:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e6b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025e6f:	d9 c1                	fld    st(1)
c0025e71:	d8 c1                	fadd   st,st(1)
c0025e73:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e77:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025e7b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0025e7f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0025e85:	89 d3                	mov    ebx,edx
c0025e87:	0f 8e 38 02 00 00    	jle    c00260c5 <pow+0x825>
c0025e8d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0025e93:	09 c1                	or     ecx,eax
c0025e95:	0f 85 f6 03 00 00    	jne    c0026291 <pow+0x9f1>
c0025e9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e9f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ea3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025ea7:	d8 e1                	fsub   st,st(1)
c0025ea9:	d9 c2                	fld    st(2)
c0025eab:	dc 05 c8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7c8
c0025eb1:	df f1                	fcomip st,st(1)
c0025eb3:	dd d8                	fstp   st(0)
c0025eb5:	0f 87 2a 04 00 00    	ja     c00262e5 <pow+0xa45>
c0025ebb:	89 d9                	mov    ecx,ebx
c0025ebd:	c1 f9 14             	sar    ecx,0x14
c0025ec0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025ec6:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c0025ecc:	b8 00 00 10 00       	mov    eax,0x100000
c0025ed1:	d3 f8                	sar    eax,cl
c0025ed3:	31 c9                	xor    ecx,ecx
c0025ed5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025ed9:	01 d8                	add    eax,ebx
c0025edb:	be ff ff 0f 00       	mov    esi,0xfffff
c0025ee0:	89 c2                	mov    edx,eax
c0025ee2:	c1 fa 14             	sar    edx,0x14
c0025ee5:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0025eeb:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025ef1:	88 d1                	mov    cl,dl
c0025ef3:	d3 fe                	sar    esi,cl
c0025ef5:	b9 14 00 00 00       	mov    ecx,0x14
c0025efa:	f7 d6                	not    esi
c0025efc:	29 d1                	sub    ecx,edx
c0025efe:	21 c6                	and    esi,eax
c0025f00:	25 ff ff 0f 00       	and    eax,0xfffff
c0025f05:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025f09:	0d 00 00 10 00       	or     eax,0x100000
c0025f0e:	d3 f8                	sar    eax,cl
c0025f10:	85 db                	test   ebx,ebx
c0025f12:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f16:	89 c1                	mov    ecx,eax
c0025f18:	79 02                	jns    c0025f1c <pow+0x67c>
c0025f1a:	f7 d9                	neg    ecx
c0025f1c:	de e9                	fsubp  st(1),st
c0025f1e:	89 ce                	mov    esi,ecx
c0025f20:	c1 e6 14             	shl    esi,0x14
c0025f23:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f27:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f2b:	d9 c1                	fld    st(1)
c0025f2d:	d8 c1                	fadd   st,st(1)
c0025f2f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f33:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025f37:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025f3b:	31 c0                	xor    eax,eax
c0025f3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f41:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f45:	d9 c0                	fld    st(0)
c0025f47:	d8 0d 14 f7 02 c0    	fmul   DWORD PTR ds:0xc002f714
c0025f4d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f51:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f55:	d9 ca                	fxch   st(2)
c0025f57:	d8 e9                	fsubr  st,st(1)
c0025f59:	de eb                	fsubp  st(3),st
c0025f5b:	d9 ca                	fxch   st(2)
c0025f5d:	dc 0d d0 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7d0
c0025f63:	d9 ca                	fxch   st(2)
c0025f65:	dc 0d d8 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7d8
c0025f6b:	de c2                	faddp  st(2),st
c0025f6d:	d9 c9                	fxch   st(1)
c0025f6f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f73:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f77:	d9 c1                	fld    st(1)
c0025f79:	d8 c1                	fadd   st,st(1)
c0025f7b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f7f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f83:	d9 c0                	fld    st(0)
c0025f85:	d8 c9                	fmul   st,st(1)
c0025f87:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f8b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f8f:	d9 c0                	fld    st(0)
c0025f91:	dc 0d e0 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7e0
c0025f97:	dc 25 e8 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7e8
c0025f9d:	d8 c9                	fmul   st,st(1)
c0025f9f:	dc 05 f0 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7f0
c0025fa5:	d8 c9                	fmul   st,st(1)
c0025fa7:	dc 25 f8 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7f8
c0025fad:	d8 c9                	fmul   st,st(1)
c0025faf:	dc 05 00 f8 02 c0    	fadd   QWORD PTR ds:0xc002f800
c0025fb5:	de c9                	fmulp  st(1),st
c0025fb7:	d8 e9                	fsubr  st,st(1)
c0025fb9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025fbd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025fc1:	d9 cb                	fxch   st(3)
c0025fc3:	d8 e9                	fsubr  st,st(1)
c0025fc5:	de ea                	fsubp  st(2),st
c0025fc7:	d9 c9                	fxch   st(1)
c0025fc9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025fcd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025fd1:	d9 c1                	fld    st(1)
c0025fd3:	d8 cb                	fmul   st,st(3)
c0025fd5:	d9 cb                	fxch   st(3)
c0025fd7:	d8 25 18 f7 02 c0    	fsub   DWORD PTR ds:0xc002f718
c0025fdd:	de fb                	fdivp  st(3),st
c0025fdf:	d9 c1                	fld    st(1)
c0025fe1:	d8 c9                	fmul   st,st(1)
c0025fe3:	de c1                	faddp  st(1),st
c0025fe5:	de ea                	fsubp  st(2),st
c0025fe7:	d9 c9                	fxch   st(1)
c0025fe9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025fed:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ff1:	de e1                	fsubrp st(1),st
c0025ff3:	d8 2d a8 f6 02 c0    	fsubr  DWORD PTR ds:0xc002f6a8
c0025ff9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ffd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0026001:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0026005:	89 d3                	mov    ebx,edx
c0026007:	01 f3                	add    ebx,esi
c0026009:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002600f:	0f 8e a7 02 00 00    	jle    c00262bc <pow+0xa1c>
c0026015:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026019:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002601d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026021:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0026025:	de c9                	fmulp  st(1),st
c0026027:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002602b:	e9 e0 f8 ff ff       	jmp    c0025910 <pow+0x70>
c0026030:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026034:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026037:	e8 74 0f 00 00       	call   c0026fb0 <fabs>
c002603c:	85 ed                	test   ebp,ebp
c002603e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026042:	0f 85 55 fb ff ff    	jne    c0025b9d <pow+0x2fd>
c0026048:	89 f8                	mov    eax,edi
c002604a:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002604f:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0026054:	74 0b                	je     c0026061 <pow+0x7c1>
c0026056:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002605b:	0f 85 3c fb ff ff    	jne    c0025b9d <pow+0x2fd>
c0026061:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0026069:	85 f6                	test   esi,esi
c002606b:	79 0a                	jns    c0026077 <pow+0x7d7>
c002606d:	d9 e8                	fld1   
c002606f:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0026073:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026077:	85 ff                	test   edi,edi
c0026079:	0f 89 91 f8 ff ff    	jns    c0025910 <pow+0x70>
c002607f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026083:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0026088:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002608c:	0f 85 10 02 00 00    	jne    c00262a2 <pow+0xa02>
c0026092:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026096:	d8 e0                	fsub   st,st(0)
c0026098:	d8 f0                	fdiv   st,st(0)
c002609a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002609e:	e9 6d f8 ff ff       	jmp    c0025910 <pow+0x70>
c00260a3:	d9 e8                	fld1   
c00260a5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00260a9:	e9 62 f8 ff ff       	jmp    c0025910 <pow+0x70>
c00260ae:	85 f6                	test   esi,esi
c00260b0:	0f 89 03 fa ff ff    	jns    c0025ab9 <pow+0x219>
c00260b6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00260ba:	d9 e0                	fchs   
c00260bc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00260c0:	e9 4b f8 ff ff       	jmp    c0025910 <pow+0x70>
c00260c5:	89 d1                	mov    ecx,edx
c00260c7:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c00260cd:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c00260d3:	0f 8e 4f 01 00 00    	jle    c0026228 <pow+0x988>
c00260d9:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c00260df:	09 c1                	or     ecx,eax
c00260e1:	0f 85 55 02 00 00    	jne    c002633c <pow+0xa9c>
c00260e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00260ef:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00260f3:	d8 e1                	fsub   st,st(1)
c00260f5:	df f2                	fcomip st,st(2)
c00260f7:	0f 82 be fd ff ff    	jb     c0025ebb <pow+0x61b>
c00260fd:	dd d8                	fstp   st(0)
c00260ff:	dd d8                	fstp   st(0)
c0026101:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0026105:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026109:	e9 02 f8 ff ff       	jmp    c0025910 <pow+0x70>
c002610e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026112:	d8 c8                	fmul   st,st(0)
c0026114:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026118:	e9 f3 f7 ff ff       	jmp    c0025910 <pow+0x70>
c002611d:	d9 ee                	fldz   
c002611f:	31 d2                	xor    edx,edx
c0026121:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0026125:	d9 ee                	fldz   
c0026127:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002612b:	d9 e8                	fld1   
c002612d:	e9 15 fb ff ff       	jmp    c0025c47 <pow+0x3a7>
c0026132:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c002613a:	0f 8e 91 01 00 00    	jle    c00262d1 <pow+0xa31>
c0026140:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c0026148:	0f 8f da 01 00 00    	jg     c0026328 <pow+0xa88>
c002614e:	dd d8                	fstp   st(0)
c0026150:	dd d8                	fstp   st(0)
c0026152:	d9 e8                	fld1   
c0026154:	31 c0                	xor    eax,eax
c0026156:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002615a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002615e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026162:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0026166:	d9 c0                	fld    st(0)
c0026168:	d8 0d 00 f7 02 c0    	fmul   DWORD PTR ds:0xc002f700
c002616e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026172:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0026176:	d9 c1                	fld    st(1)
c0026178:	dc 0d 78 f7 02 c0    	fmul   QWORD PTR ds:0xc002f778
c002617e:	d9 c2                	fld    st(2)
c0026180:	d8 0d 04 f7 02 c0    	fmul   DWORD PTR ds:0xc002f704
c0026186:	db 2d 60 f7 02 c0    	fld    TBYTE PTR ds:0xc002f760
c002618c:	de e1                	fsubrp st(1),st
c002618e:	d8 cb                	fmul   st,st(3)
c0026190:	d8 2d ac f6 02 c0    	fsubr  DWORD PTR ds:0xc002f6ac
c0026196:	d9 cb                	fxch   st(3)
c0026198:	d8 c8                	fmul   st,st(0)
c002619a:	de cb                	fmulp  st(3),st
c002619c:	d9 ca                	fxch   st(2)
c002619e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00261a2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00261a6:	dc 0d 80 f7 02 c0    	fmul   QWORD PTR ds:0xc002f780
c00261ac:	de ea                	fsubp  st(2),st
c00261ae:	d9 c9                	fxch   st(1)
c00261b0:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00261b4:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00261b8:	d9 c1                	fld    st(1)
c00261ba:	d8 c1                	fadd   st,st(1)
c00261bc:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00261c0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00261c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00261c8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00261cc:	dc e2                	fsubr  st(2),st
c00261ce:	d9 c9                	fxch   st(1)
c00261d0:	de e2                	fsubrp st(2),st
c00261d2:	d9 c9                	fxch   st(1)
c00261d4:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00261d8:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00261dc:	e9 56 fc ff ff       	jmp    c0025e37 <pow+0x597>
c00261e1:	85 c0                	test   eax,eax
c00261e3:	0f 85 47 fe ff ff    	jne    c0026030 <pow+0x790>
c00261e9:	b8 14 00 00 00       	mov    eax,0x14
c00261ee:	29 c8                	sub    eax,ecx
c00261f0:	89 c1                	mov    ecx,eax
c00261f2:	89 d8                	mov    eax,ebx
c00261f4:	d3 f8                	sar    eax,cl
c00261f6:	89 c2                	mov    edx,eax
c00261f8:	d3 e2                	shl    edx,cl
c00261fa:	39 da                	cmp    edx,ebx
c00261fc:	0f 85 bc f7 ff ff    	jne    c00259be <pow+0x11e>
c0026202:	83 e0 01             	and    eax,0x1
c0026205:	b9 02 00 00 00       	mov    ecx,0x2
c002620a:	29 c1                	sub    ecx,eax
c002620c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0026210:	e9 a9 f7 ff ff       	jmp    c00259be <pow+0x11e>
c0026215:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026219:	d9 c0                	fld    st(0)
c002621b:	d8 c9                	fmul   st,st(1)
c002621d:	de c9                	fmulp  st(1),st
c002621f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026223:	e9 e8 f6 ff ff       	jmp    c0025910 <pow+0x70>
c0026228:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c002622e:	0f 8f 28 01 00 00    	jg     c002635c <pow+0xabc>
c0026234:	31 f6                	xor    esi,esi
c0026236:	31 c9                	xor    ecx,ecx
c0026238:	e9 fa fc ff ff       	jmp    c0025f37 <pow+0x697>
c002623d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026241:	d8 c8                	fmul   st,st(0)
c0026243:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026247:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002624b:	d8 c8                	fmul   st,st(0)
c002624d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026251:	e9 ba f6 ff ff       	jmp    c0025910 <pow+0x70>
c0026256:	d9 05 f8 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f8
c002625c:	ba 00 00 04 00       	mov    edx,0x40000
c0026261:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0026265:	dd 05 70 f7 02 c0    	fld    QWORD PTR ds:0xc002f770
c002626b:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002626f:	d9 05 fc f6 02 c0    	fld    DWORD PTR ds:0xc002f6fc
c0026275:	e9 cd f9 ff ff       	jmp    c0025c47 <pow+0x3a7>
c002627a:	85 f6                	test   esi,esi
c002627c:	0f 8e 37 f8 ff ff    	jle    c0025ab9 <pow+0x219>
c0026282:	d9 05 f0 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f0
c0026288:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002628c:	e9 7f f6 ff ff       	jmp    c0025910 <pow+0x70>
c0026291:	dd d8                	fstp   st(0)
c0026293:	dd d8                	fstp   st(0)
c0026295:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026299:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002629d:	e9 6e f6 ff ff       	jmp    c0025910 <pow+0x70>
c00262a2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00262a7:	0f 85 63 f6 ff ff    	jne    c0025910 <pow+0x70>
c00262ad:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00262b1:	d9 e0                	fchs   
c00262b3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00262b7:	e9 54 f6 ff ff       	jmp    c0025910 <pow+0x70>
c00262bc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00262c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00262c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00262c7:	e8 c0 13 00 00       	call   c002768c <ldexp>
c00262cc:	e9 50 fd ff ff       	jmp    c0026021 <pow+0x781>
c00262d1:	85 f6                	test   esi,esi
c00262d3:	0f 99 c0             	setns  al
c00262d6:	84 c0                	test   al,al
c00262d8:	db c9                	fcmovne st,st(1)
c00262da:	dd d9                	fstp   st(1)
c00262dc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00262e0:	e9 2b f6 ff ff       	jmp    c0025910 <pow+0x70>
c00262e5:	dd d8                	fstp   st(0)
c00262e7:	dd d8                	fstp   st(0)
c00262e9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00262ed:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00262f1:	e9 1a f6 ff ff       	jmp    c0025910 <pow+0x70>
c00262f6:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00262fd:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0026304:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c002630b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0026312:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026316:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c002631d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0026323:	e9 d8 12 00 00       	jmp    c0027600 <sqrt>
c0026328:	85 f6                	test   esi,esi
c002632a:	0f 9e c0             	setle  al
c002632d:	84 c0                	test   al,al
c002632f:	db c9                	fcmovne st,st(1)
c0026331:	dd d9                	fstp   st(1)
c0026333:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026337:	e9 d4 f5 ff ff       	jmp    c0025910 <pow+0x70>
c002633c:	dd d8                	fstp   st(0)
c002633e:	dd d8                	fstp   st(0)
c0026340:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0026344:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026348:	e9 c3 f5 ff ff       	jmp    c0025910 <pow+0x70>
c002634d:	d9 05 f0 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f0
c0026353:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026357:	e9 b4 f5 ff ff       	jmp    c0025910 <pow+0x70>
c002635c:	c1 f9 14             	sar    ecx,0x14
c002635f:	e9 62 fb ff ff       	jmp    c0025ec6 <pow+0x626>
c0026364:	66 90                	xchg   ax,ax
c0026366:	66 90                	xchg   ax,ax
c0026368:	66 90                	xchg   ax,ax
c002636a:	66 90                	xchg   ax,ax
c002636c:	66 90                	xchg   ax,ax
c002636e:	66 90                	xchg   ax,ax

c0026370 <sinh>:
c0026370:	53                   	push   ebx
c0026371:	83 ec 38             	sub    esp,0x38
c0026374:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026378:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002637c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026380:	89 c3                	mov    ebx,eax
c0026382:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026388:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002638e:	0f 8f ec 00 00 00    	jg     c0026480 <sinh+0x110>
c0026394:	dd d8                	fstp   st(0)
c0026396:	d9 e8                	fld1   
c0026398:	85 c0                	test   eax,eax
c002639a:	0f 88 90 00 00 00    	js     c0026430 <sinh+0xc0>
c00263a0:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00263a6:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c00263ac:	0f 8f 8e 00 00 00    	jg     c0026440 <sinh+0xd0>
c00263b2:	dd d9                	fstp   st(1)
c00263b4:	eb 0c                	jmp    c00263c2 <sinh+0x52>
c00263b6:	8d 76 00             	lea    esi,[esi+0x0]
c00263b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00263c0:	dd d9                	fstp   st(1)
c00263c2:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c00263c8:	0f 8f d2 00 00 00    	jg     c00264a0 <sinh+0x130>
c00263ce:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00263d2:	d9 e8                	fld1   
c00263d4:	d9 c1                	fld    st(1)
c00263d6:	dc 05 10 f8 02 c0    	fadd   QWORD PTR ds:0xc002f810
c00263dc:	df f1                	fcomip st,st(1)
c00263de:	dd d8                	fstp   st(0)
c00263e0:	77 3e                	ja     c0026420 <sinh+0xb0>
c00263e2:	dd d8                	fstp   st(0)
c00263e4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00263e8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00263ec:	dd 1c 24             	fstp   QWORD PTR [esp]
c00263ef:	e8 bc 0b 00 00       	call   c0026fb0 <fabs>
c00263f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00263f7:	e8 24 07 00 00       	call   c0026b20 <expm1>
c00263fc:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0026400:	d9 c1                	fld    st(1)
c0026402:	d8 c2                	fadd   st,st(2)
c0026404:	d9 c2                	fld    st(2)
c0026406:	d8 cb                	fmul   st,st(3)
c0026408:	d9 cb                	fxch   st(3)
c002640a:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c0026410:	de fb                	fdivp  st(3),st
c0026412:	de e2                	fsubrp st(2),st
c0026414:	de c9                	fmulp  st(1),st
c0026416:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002641a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002641e:	eb 02                	jmp    c0026422 <sinh+0xb2>
c0026420:	dd d9                	fstp   st(1)
c0026422:	83 c4 38             	add    esp,0x38
c0026425:	5b                   	pop    ebx
c0026426:	c3                   	ret    
c0026427:	89 f6                	mov    esi,esi
c0026429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026430:	d9 e0                	fchs   
c0026432:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0026438:	d9 05 08 f8 02 c0    	fld    DWORD PTR ds:0xc002f808
c002643e:	7e 80                	jle    c00263c0 <sinh+0x50>
c0026440:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0026446:	0f 8e a4 00 00 00    	jle    c00264f0 <sinh+0x180>
c002644c:	dd d8                	fstp   st(0)
c002644e:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0026454:	0f 8e c6 00 00 00    	jle    c0026520 <sinh+0x1b0>
c002645a:	dd d8                	fstp   st(0)
c002645c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026460:	dc 0d 10 f8 02 c0    	fmul   QWORD PTR ds:0xc002f810
c0026466:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002646a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002646e:	83 c4 38             	add    esp,0x38
c0026471:	5b                   	pop    ebx
c0026472:	c3                   	ret    
c0026473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026480:	d9 c0                	fld    st(0)
c0026482:	de c1                	faddp  st(1),st
c0026484:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026488:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002648c:	83 c4 38             	add    esp,0x38
c002648f:	5b                   	pop    ebx
c0026490:	c3                   	ret    
c0026491:	eb 0d                	jmp    c00264a0 <sinh+0x130>
c0026493:	90                   	nop
c0026494:	90                   	nop
c0026495:	90                   	nop
c0026496:	90                   	nop
c0026497:	90                   	nop
c0026498:	90                   	nop
c0026499:	90                   	nop
c002649a:	90                   	nop
c002649b:	90                   	nop
c002649c:	90                   	nop
c002649d:	90                   	nop
c002649e:	90                   	nop
c002649f:	90                   	nop
c00264a0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00264a4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00264a8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00264ab:	e8 00 0b 00 00       	call   c0026fb0 <fabs>
c00264b0:	dd 1c 24             	fstp   QWORD PTR [esp]
c00264b3:	e8 68 06 00 00       	call   c0026b20 <expm1>
c00264b8:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00264be:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00264c2:	0f 8e 38 ff ff ff    	jle    c0026400 <sinh+0x90>
c00264c8:	d9 c1                	fld    st(1)
c00264ca:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c00264d0:	d8 fa                	fdivr  st,st(2)
c00264d2:	de c2                	faddp  st(2),st
c00264d4:	de c9                	fmulp  st(1),st
c00264d6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00264da:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00264de:	83 c4 38             	add    esp,0x38
c00264e1:	5b                   	pop    ebx
c00264e2:	c3                   	ret    
c00264e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00264e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00264f0:	dd d9                	fstp   st(1)
c00264f2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00264f6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00264fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c00264fd:	e8 ae 0a 00 00       	call   c0026fb0 <fabs>
c0026502:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026505:	e8 5e 10 00 00       	call   c0027568 <exp>
c002650a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002650e:	de c9                	fmulp  st(1),st
c0026510:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026514:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026518:	e9 05 ff ff ff       	jmp    c0026422 <sinh+0xb2>
c002651d:	8d 76 00             	lea    esi,[esi+0x0]
c0026520:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0026524:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026528:	dd 1c 24             	fstp   QWORD PTR [esp]
c002652b:	e8 80 0a 00 00       	call   c0026fb0 <fabs>
c0026530:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026539:	dd 1c 24             	fstp   QWORD PTR [esp]
c002653c:	e8 1f 00 00 00       	call   c0026560 <__ldexp_exp>
c0026541:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0026545:	de c9                	fmulp  st(1),st
c0026547:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002654b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002654f:	e9 ce fe ff ff       	jmp    c0026422 <sinh+0xb2>
c0026554:	66 90                	xchg   ax,ax
c0026556:	66 90                	xchg   ax,ax
c0026558:	66 90                	xchg   ax,ax
c002655a:	66 90                	xchg   ax,ax
c002655c:	66 90                	xchg   ax,ax
c002655e:	66 90                	xchg   ax,ax

c0026560 <__ldexp_exp>:
c0026560:	53                   	push   ebx
c0026561:	83 ec 28             	sub    esp,0x28
c0026564:	dd 05 18 f8 02 c0    	fld    QWORD PTR ds:0xc002f818
c002656a:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c002656e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026571:	e8 f2 0f 00 00       	call   c0027568 <exp>
c0026576:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002657a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002657e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026582:	89 da                	mov    edx,ebx
c0026584:	89 d8                	mov    eax,ebx
c0026586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002658a:	c1 e8 14             	shr    eax,0x14
c002658d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0026593:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0026599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002659d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00265a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00265a5:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c00265ac:	c1 e0 14             	shl    eax,0x14
c00265af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00265b3:	31 c0                	xor    eax,eax
c00265b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00265b9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00265bd:	de c9                	fmulp  st(1),st
c00265bf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00265c3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265c7:	83 c4 28             	add    esp,0x28
c00265ca:	5b                   	pop    ebx
c00265cb:	c3                   	ret    
c00265cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00265d0 <__ldexp_cexp>:
c00265d0:	57                   	push   edi
c00265d1:	56                   	push   esi
c00265d2:	53                   	push   ebx
c00265d3:	83 ec 60             	sub    esp,0x60
c00265d6:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c00265da:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c00265de:	dd 14 24             	fst    QWORD PTR [esp]
c00265e1:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00265e5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00265e9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00265ed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00265f1:	e8 6a 0f 00 00       	call   c0027560 <creal>
c00265f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00265fa:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00265fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026601:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026605:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026609:	e8 42 0f 00 00       	call   c0027550 <cimag>
c002660e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026612:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026616:	dc 25 18 f8 02 c0    	fsub   QWORD PTR ds:0xc002f818
c002661c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002661f:	e8 44 0f 00 00       	call   c0027568 <exp>
c0026624:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026628:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002662c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0026630:	89 fa                	mov    edx,edi
c0026632:	89 f8                	mov    eax,edi
c0026634:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0026638:	c1 e8 14             	shr    eax,0x14
c002663b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0026641:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0026647:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002664b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0026652:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026656:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002665a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0026661:	89 d1                	mov    ecx,edx
c0026663:	c1 e9 1f             	shr    ecx,0x1f
c0026666:	01 d1                	add    ecx,edx
c0026668:	d1 f9                	sar    ecx,1
c002666a:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0026670:	29 ca                	sub    edx,ecx
c0026672:	c1 e0 14             	shl    eax,0x14
c0026675:	81 c2 ff 03 00 00    	add    edx,0x3ff
c002667b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002667f:	c1 e2 14             	shl    edx,0x14
c0026682:	31 c0                	xor    eax,eax
c0026684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026688:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002668c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026690:	31 d2                	xor    edx,edx
c0026692:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026696:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002669a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002669e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00266a2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266a6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00266a9:	e8 12 03 00 00       	call   c00269c0 <cos>
c00266ae:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00266b2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00266b6:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c00266ba:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00266be:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c00266c2:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00266c6:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c00266ca:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266ce:	dd 1c 24             	fstp   QWORD PTR [esp]
c00266d1:	e8 fa 0b 00 00       	call   c00272d0 <sin>
c00266d6:	89 d8                	mov    eax,ebx
c00266d8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00266dc:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c00266e0:	dc c9                	fmul   st(1),st
c00266e2:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00266e6:	dc ca                	fmul   st(2),st
c00266e8:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c00266ec:	dc cb                	fmul   st(3),st
c00266ee:	d9 cb                	fxch   st(3)
c00266f0:	dd 1b                	fstp   QWORD PTR [ebx]
c00266f2:	d9 cb                	fxch   st(3)
c00266f4:	de c9                	fmulp  st(1),st
c00266f6:	de ca                	fmulp  st(2),st
c00266f8:	de c9                	fmulp  st(1),st
c00266fa:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00266fd:	83 c4 60             	add    esp,0x60
c0026700:	5b                   	pop    ebx
c0026701:	5e                   	pop    esi
c0026702:	5f                   	pop    edi
c0026703:	c2 04 00             	ret    0x4
c0026706:	66 90                	xchg   ax,ax
c0026708:	66 90                	xchg   ax,ax
c002670a:	66 90                	xchg   ax,ax
c002670c:	66 90                	xchg   ax,ax
c002670e:	66 90                	xchg   ax,ax

c0026710 <atan>:
c0026710:	56                   	push   esi
c0026711:	53                   	push   ebx
c0026712:	83 ec 24             	sub    esp,0x24
c0026715:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026719:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002671d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0026721:	89 f3                	mov    ebx,esi
c0026723:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026729:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c002672f:	7e 5f                	jle    c0026790 <atan+0x80>
c0026731:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0026737:	7f 0a                	jg     c0026743 <atan+0x33>
c0026739:	75 25                	jne    c0026760 <atan+0x50>
c002673b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673f:	85 c0                	test   eax,eax
c0026741:	74 1d                	je     c0026760 <atan+0x50>
c0026743:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026747:	d8 c0                	fadd   st,st(0)
c0026749:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002674d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026751:	83 c4 24             	add    esp,0x24
c0026754:	5b                   	pop    ebx
c0026755:	5e                   	pop    esi
c0026756:	c3                   	ret    
c0026757:	89 f6                	mov    esi,esi
c0026759:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026760:	85 f6                	test   esi,esi
c0026762:	dd 05 38 f8 02 c0    	fld    QWORD PTR ds:0xc002f838
c0026768:	0f 8e 22 01 00 00    	jle    c0026890 <atan+0x180>
c002676e:	dc 05 50 f6 02 c0    	fadd   QWORD PTR ds:0xc002f650
c0026774:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026778:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002677c:	83 c4 24             	add    esp,0x24
c002677f:	5b                   	pop    ebx
c0026780:	5e                   	pop    esi
c0026781:	c3                   	ret    
c0026782:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026790:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0026796:	0f 8f 34 01 00 00    	jg     c00268d0 <atan+0x1c0>
c002679c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c00267a2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00267a6:	0f 8e c4 00 00 00    	jle    c0026870 <atan+0x160>
c00267ac:	eb 04                	jmp    c00267b2 <atan+0xa2>
c00267ae:	66 90                	xchg   ax,ax
c00267b0:	dd d8                	fstp   st(0)
c00267b2:	d9 ee                	fldz   
c00267b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00267b9:	d9 ee                	fldz   
c00267bb:	d9 c2                	fld    st(2)
c00267bd:	40                   	inc    eax
c00267be:	d8 cb                	fmul   st,st(3)
c00267c0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267c4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00267c8:	d9 c0                	fld    st(0)
c00267ca:	d8 c9                	fmul   st,st(1)
c00267cc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00267d4:	d9 c0                	fld    st(0)
c00267d6:	dc 0d 68 f8 02 c0    	fmul   QWORD PTR ds:0xc002f868
c00267dc:	dc 05 70 f8 02 c0    	fadd   QWORD PTR ds:0xc002f870
c00267e2:	d8 c9                	fmul   st,st(1)
c00267e4:	dc 05 78 f8 02 c0    	fadd   QWORD PTR ds:0xc002f878
c00267ea:	d8 c9                	fmul   st,st(1)
c00267ec:	dc 05 80 f8 02 c0    	fadd   QWORD PTR ds:0xc002f880
c00267f2:	d8 c9                	fmul   st,st(1)
c00267f4:	dc 05 88 f8 02 c0    	fadd   QWORD PTR ds:0xc002f888
c00267fa:	d8 c9                	fmul   st,st(1)
c00267fc:	dc 05 90 f8 02 c0    	fadd   QWORD PTR ds:0xc002f890
c0026802:	de ca                	fmulp  st(2),st
c0026804:	d9 c9                	fxch   st(1)
c0026806:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002680a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002680e:	d9 c1                	fld    st(1)
c0026810:	dc 0d 98 f8 02 c0    	fmul   QWORD PTR ds:0xc002f898
c0026816:	dc 25 a0 f8 02 c0    	fsub   QWORD PTR ds:0xc002f8a0
c002681c:	d8 ca                	fmul   st,st(2)
c002681e:	dc 25 a8 f8 02 c0    	fsub   QWORD PTR ds:0xc002f8a8
c0026824:	d8 ca                	fmul   st,st(2)
c0026826:	dc 25 b0 f8 02 c0    	fsub   QWORD PTR ds:0xc002f8b0
c002682c:	d8 ca                	fmul   st,st(2)
c002682e:	dc 25 b8 f8 02 c0    	fsub   QWORD PTR ds:0xc002f8b8
c0026834:	de ca                	fmulp  st(2),st
c0026836:	d9 c9                	fxch   st(1)
c0026838:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002683c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026840:	de c1                	faddp  st(1),st
c0026842:	d8 cb                	fmul   st,st(3)
c0026844:	74 6a                	je     c00268b0 <atan+0x1a0>
c0026846:	85 f6                	test   esi,esi
c0026848:	de e2                	fsubrp st(2),st
c002684a:	d9 c9                	fxch   st(1)
c002684c:	de e2                	fsubrp st(2),st
c002684e:	de e1                	fsubrp st(1),st
c0026850:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026854:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026858:	0f 89 f3 fe ff ff    	jns    c0026751 <atan+0x41>
c002685e:	d9 e0                	fchs   
c0026860:	83 c4 24             	add    esp,0x24
c0026863:	5b                   	pop    ebx
c0026864:	5e                   	pop    esi
c0026865:	c3                   	ret    
c0026866:	8d 76 00             	lea    esi,[esi+0x0]
c0026869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026870:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026874:	d9 e8                	fld1   
c0026876:	d9 c2                	fld    st(2)
c0026878:	dc 05 b8 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6b8
c002687e:	df f1                	fcomip st,st(1)
c0026880:	dd d8                	fstp   st(0)
c0026882:	0f 86 28 ff ff ff    	jbe    c00267b0 <atan+0xa0>
c0026888:	dd d9                	fstp   st(1)
c002688a:	e9 c2 fe ff ff       	jmp    c0026751 <atan+0x41>
c002688f:	90                   	nop
c0026890:	dd 05 d0 f6 02 c0    	fld    QWORD PTR ds:0xc002f6d0
c0026896:	de e1                	fsubrp st(1),st
c0026898:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002689c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00268a0:	e9 ac fe ff ff       	jmp    c0026751 <atan+0x41>
c00268a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00268a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00268b0:	dd da                	fstp   st(2)
c00268b2:	dd d8                	fstp   st(0)
c00268b4:	de e9                	fsubp  st(1),st
c00268b6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00268ba:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00268be:	83 c4 24             	add    esp,0x24
c00268c1:	5b                   	pop    ebx
c00268c2:	5e                   	pop    esi
c00268c3:	c3                   	ret    
c00268c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00268ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00268d0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00268d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00268d7:	e8 d4 06 00 00       	call   c0026fb0 <fabs>
c00268dc:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c00268e2:	7f 3c                	jg     c0026920 <atan+0x210>
c00268e4:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c00268ea:	0f 8f a0 00 00 00    	jg     c0026990 <atan+0x280>
c00268f0:	d9 c0                	fld    st(0)
c00268f2:	31 c0                	xor    eax,eax
c00268f4:	d8 c1                	fadd   st,st(1)
c00268f6:	d8 25 a8 f6 02 c0    	fsub   DWORD PTR ds:0xc002f6a8
c00268fc:	d9 c9                	fxch   st(1)
c00268fe:	d8 05 18 f7 02 c0    	fadd   DWORD PTR ds:0xc002f718
c0026904:	de f9                	fdivp  st(1),st
c0026906:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002690a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002690e:	dd 05 58 f8 02 c0    	fld    QWORD PTR ds:0xc002f858
c0026914:	dd 05 60 f8 02 c0    	fld    QWORD PTR ds:0xc002f860
c002691a:	e9 9c fe ff ff       	jmp    c00267bb <atan+0xab>
c002691f:	90                   	nop
c0026920:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0026926:	7f 38                	jg     c0026960 <atan+0x250>
c0026928:	d9 05 fc f6 02 c0    	fld    DWORD PTR ds:0xc002f6fc
c002692e:	b8 02 00 00 00       	mov    eax,0x2
c0026933:	d9 c1                	fld    st(1)
c0026935:	d8 e1                	fsub   st,st(1)
c0026937:	d9 ca                	fxch   st(2)
c0026939:	de c9                	fmulp  st(1),st
c002693b:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c0026941:	de f9                	fdivp  st(1),st
c0026943:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026947:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002694b:	dd 05 48 f8 02 c0    	fld    QWORD PTR ds:0xc002f848
c0026951:	dd 05 50 f8 02 c0    	fld    QWORD PTR ds:0xc002f850
c0026957:	e9 5f fe ff ff       	jmp    c00267bb <atan+0xab>
c002695c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026960:	d8 3d c0 f8 02 c0    	fdivr  DWORD PTR ds:0xc002f8c0
c0026966:	b8 03 00 00 00       	mov    eax,0x3
c002696b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002696f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026973:	dd 05 b0 f6 02 c0    	fld    QWORD PTR ds:0xc002f6b0
c0026979:	dd 05 50 f6 02 c0    	fld    QWORD PTR ds:0xc002f650
c002697f:	e9 37 fe ff ff       	jmp    c00267bb <atan+0xab>
c0026984:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002698a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026990:	d9 e8                	fld1   
c0026992:	b8 01 00 00 00       	mov    eax,0x1
c0026997:	d9 c1                	fld    st(1)
c0026999:	d8 e1                	fsub   st,st(1)
c002699b:	d9 ca                	fxch   st(2)
c002699d:	de c1                	faddp  st(1),st
c002699f:	de f9                	fdivp  st(1),st
c00269a1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00269a5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00269a9:	dd 05 40 f8 02 c0    	fld    QWORD PTR ds:0xc002f840
c00269af:	dd 05 c0 f6 02 c0    	fld    QWORD PTR ds:0xc002f6c0
c00269b5:	e9 01 fe ff ff       	jmp    c00267bb <atan+0xab>
c00269ba:	66 90                	xchg   ax,ax
c00269bc:	66 90                	xchg   ax,ax
c00269be:	66 90                	xchg   ax,ax

c00269c0 <cos>:
c00269c0:	83 ec 5c             	sub    esp,0x5c
c00269c3:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00269c7:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00269cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00269cf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269d4:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c00269d9:	7f 55                	jg     c0026a30 <cos+0x70>
c00269db:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c00269e0:	7f 2e                	jg     c0026a10 <cos+0x50>
c00269e2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00269e6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00269eb:	66 0d 00 0c          	or     ax,0xc00
c00269ef:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00269f4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00269f8:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c00269fc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026a00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a04:	85 c0                	test   eax,eax
c0026a06:	0f 84 94 00 00 00    	je     c0026aa0 <cos+0xe0>
c0026a0c:	eb 04                	jmp    c0026a12 <cos+0x52>
c0026a0e:	66 90                	xchg   ax,ax
c0026a10:	dd d8                	fstp   st(0)
c0026a12:	d9 ee                	fldz   
c0026a14:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a18:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a1c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a1f:	e8 ac 11 00 00       	call   c0027bd0 <__kernel_cos>
c0026a24:	83 c4 5c             	add    esp,0x5c
c0026a27:	c3                   	ret    
c0026a28:	90                   	nop
c0026a29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026a30:	dd d8                	fstp   st(0)
c0026a32:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026a37:	7e 17                	jle    c0026a50 <cos+0x90>
c0026a39:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a3d:	d8 e0                	fsub   st,st(0)
c0026a3f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026a43:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026a47:	83 c4 5c             	add    esp,0x5c
c0026a4a:	c3                   	ret    
c0026a4b:	90                   	nop
c0026a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026a50:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a54:	8d 44 24 40          	lea    eax,[esp+0x40]
c0026a58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a5c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a5f:	e8 3c 0c 00 00       	call   c00276a0 <__ieee754_rem_pio2>
c0026a64:	83 e0 03             	and    eax,0x3
c0026a67:	83 f8 01             	cmp    eax,0x1
c0026a6a:	0f 84 80 00 00 00    	je     c0026af0 <cos+0x130>
c0026a70:	83 f8 02             	cmp    eax,0x2
c0026a73:	74 5b                	je     c0026ad0 <cos+0x110>
c0026a75:	85 c0                	test   eax,eax
c0026a77:	74 37                	je     c0026ab0 <cos+0xf0>
c0026a79:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026a7d:	b8 01 00 00 00       	mov    eax,0x1
c0026a82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a86:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a8a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026a8e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a91:	e8 ba 1b 00 00       	call   c0028650 <__kernel_sin>
c0026a96:	eb 8c                	jmp    c0026a24 <cos+0x64>
c0026a98:	90                   	nop
c0026a99:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026aa0:	d9 e8                	fld1   
c0026aa2:	83 c4 5c             	add    esp,0x5c
c0026aa5:	c3                   	ret    
c0026aa6:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026ab0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026ab4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026ab8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026abc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026abf:	e8 0c 11 00 00       	call   c0027bd0 <__kernel_cos>
c0026ac4:	e9 5b ff ff ff       	jmp    c0026a24 <cos+0x64>
c0026ac9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026ad0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026ad4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026ad8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026adc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026adf:	e8 ec 10 00 00       	call   c0027bd0 <__kernel_cos>
c0026ae4:	d9 e0                	fchs   
c0026ae6:	e9 39 ff ff ff       	jmp    c0026a24 <cos+0x64>
c0026aeb:	90                   	nop
c0026aec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026af0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026af4:	ba 01 00 00 00       	mov    edx,0x1
c0026af9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026afd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026b01:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026b05:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026b08:	e8 43 1b 00 00       	call   c0028650 <__kernel_sin>
c0026b0d:	d9 e0                	fchs   
c0026b0f:	e9 10 ff ff ff       	jmp    c0026a24 <cos+0x64>
c0026b14:	66 90                	xchg   ax,ax
c0026b16:	66 90                	xchg   ax,ax
c0026b18:	66 90                	xchg   ax,ax
c0026b1a:	66 90                	xchg   ax,ax
c0026b1c:	66 90                	xchg   ax,ax
c0026b1e:	66 90                	xchg   ax,ax

c0026b20 <expm1>:
c0026b20:	d9 05 d0 f8 02 c0    	fld    DWORD PTR ds:0xc002f8d0
c0026b26:	83 ec 24             	sub    esp,0x24
c0026b29:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026b2d:	dd 14 24             	fst    QWORD PTR [esp]
c0026b30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b34:	89 d0                	mov    eax,edx
c0026b36:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b3b:	3d 79 68 43 40       	cmp    eax,0x40436879
c0026b40:	0f 86 ea 00 00 00    	jbe    c0026c30 <expm1+0x110>
c0026b46:	dd d9                	fstp   st(1)
c0026b48:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0026b4d:	76 51                	jbe    c0026ba0 <expm1+0x80>
c0026b4f:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026b54:	76 2a                	jbe    c0026b80 <expm1+0x60>
c0026b56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b59:	89 d1                	mov    ecx,edx
c0026b5b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0026b61:	09 c1                	or     ecx,eax
c0026b63:	0f 84 b7 03 00 00    	je     c0026f20 <expm1+0x400>
c0026b69:	d9 c0                	fld    st(0)
c0026b6b:	de c1                	faddp  st(1),st
c0026b6d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b71:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b75:	e9 0a 02 00 00       	jmp    c0026d84 <expm1+0x264>
c0026b7a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026b80:	dd d8                	fstp   st(0)
c0026b82:	dd 05 e8 f8 02 c0    	fld    QWORD PTR ds:0xc002f8e8
c0026b88:	dd 04 24             	fld    QWORD PTR [esp]
c0026b8b:	df f1                	fcomip st,st(1)
c0026b8d:	dd d8                	fstp   st(0)
c0026b8f:	0f 87 cb 03 00 00    	ja     c0026f60 <expm1+0x440>
c0026b95:	eb 0b                	jmp    c0026ba2 <expm1+0x82>
c0026b97:	89 f6                	mov    esi,esi
c0026b99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026ba0:	dd d8                	fstp   st(0)
c0026ba2:	85 d2                	test   edx,edx
c0026ba4:	dd 04 24             	fld    QWORD PTR [esp]
c0026ba7:	0f 88 e3 01 00 00    	js     c0026d90 <expm1+0x270>
c0026bad:	d9 c0                	fld    st(0)
c0026baf:	dc 0d 80 f7 02 c0    	fmul   QWORD PTR ds:0xc002f780
c0026bb5:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c0026bbb:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0026bbf:	de c1                	faddp  st(1),st
c0026bc1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0026bc6:	66 0d 00 0c          	or     ax,0xc00
c0026bca:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0026bcf:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0026bd3:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0026bd7:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0026bdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bdf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026be2:	db 04 24             	fild   DWORD PTR [esp]
c0026be5:	d9 c0                	fld    st(0)
c0026be7:	dc 0d f8 f8 02 c0    	fmul   QWORD PTR ds:0xc002f8f8
c0026bed:	de ea                	fsubp  st(2),st
c0026bef:	d9 c9                	fxch   st(1)
c0026bf1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026bf5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026bf9:	d9 c9                	fxch   st(1)
c0026bfb:	dc 0d e0 f8 02 c0    	fmul   QWORD PTR ds:0xc002f8e0
c0026c01:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c05:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c09:	d9 c1                	fld    st(1)
c0026c0b:	d8 e1                	fsub   st,st(1)
c0026c0d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026c10:	dd 04 24             	fld    QWORD PTR [esp]
c0026c13:	dc ea                	fsub   st(2),st
c0026c15:	d9 ca                	fxch   st(2)
c0026c17:	de e1                	fsubrp st(1),st
c0026c19:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c1d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c21:	eb 2c                	jmp    c0026c4f <expm1+0x12f>
c0026c23:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026c29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026c30:	dd d8                	fstp   st(0)
c0026c32:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0026c37:	dd 04 24             	fld    QWORD PTR [esp]
c0026c3a:	0f 87 c0 01 00 00    	ja     c0026e00 <expm1+0x2e0>
c0026c40:	31 c9                	xor    ecx,ecx
c0026c42:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0026c47:	0f 86 f3 01 00 00    	jbe    c0026e40 <expm1+0x320>
c0026c4d:	d9 c9                	fxch   st(1)
c0026c4f:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c0026c55:	85 c9                	test   ecx,ecx
c0026c57:	d9 c2                	fld    st(2)
c0026c59:	d8 c9                	fmul   st,st(1)
c0026c5b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c5f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c63:	d9 c0                	fld    st(0)
c0026c65:	d8 cc                	fmul   st,st(4)
c0026c67:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c6b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c6f:	d9 c0                	fld    st(0)
c0026c71:	dc 0d 00 f9 02 c0    	fmul   QWORD PTR ds:0xc002f900
c0026c77:	dc 05 08 f9 02 c0    	fadd   QWORD PTR ds:0xc002f908
c0026c7d:	d8 c9                	fmul   st,st(1)
c0026c7f:	dc 25 10 f9 02 c0    	fsub   QWORD PTR ds:0xc002f910
c0026c85:	d8 c9                	fmul   st,st(1)
c0026c87:	dc 05 18 f9 02 c0    	fadd   QWORD PTR ds:0xc002f918
c0026c8d:	d8 c9                	fmul   st,st(1)
c0026c8f:	dc 25 20 f9 02 c0    	fsub   QWORD PTR ds:0xc002f920
c0026c95:	d8 c9                	fmul   st,st(1)
c0026c97:	d9 e8                	fld1   
c0026c99:	dc c1                	fadd   st(1),st
c0026c9b:	d9 c9                	fxch   st(1)
c0026c9d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ca1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ca5:	dc cb                	fmul   st(3),st
c0026ca7:	d9 cb                	fxch   st(3)
c0026ca9:	d8 2d 0c f7 02 c0    	fsubr  DWORD PTR ds:0xc002f70c
c0026caf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026cb3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026cb7:	dc eb                	fsub   st(3),st
c0026cb9:	d8 ce                	fmul   st,st(6)
c0026cbb:	d8 2d c4 f8 02 c0    	fsubr  DWORD PTR ds:0xc002f8c4
c0026cc1:	de fb                	fdivp  st(3),st
c0026cc3:	d9 ca                	fxch   st(2)
c0026cc5:	d8 c9                	fmul   st,st(1)
c0026cc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ccb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ccf:	0f 84 9b 00 00 00    	je     c0026d70 <expm1+0x250>
c0026cd5:	89 c8                	mov    eax,ecx
c0026cd7:	c1 e0 14             	shl    eax,0x14
c0026cda:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0026cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ce3:	31 c0                	xor    eax,eax
c0026ce5:	83 f9 ff             	cmp    ecx,0xffffffff
c0026ce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cec:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026cf0:	d9 c9                	fxch   st(1)
c0026cf2:	d8 e5                	fsub   st,st(5)
c0026cf4:	d8 ce                	fmul   st,st(6)
c0026cf6:	de e5                	fsubrp st(5),st
c0026cf8:	d9 cc                	fxch   st(4)
c0026cfa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026cfe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d02:	de e1                	fsubrp st(1),st
c0026d04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d0c:	0f 84 9e 01 00 00    	je     c0026eb0 <expm1+0x390>
c0026d12:	83 f9 01             	cmp    ecx,0x1
c0026d15:	0f 84 55 01 00 00    	je     c0026e70 <expm1+0x350>
c0026d1b:	dd da                	fstp   st(2)
c0026d1d:	d9 c9                	fxch   st(1)
c0026d1f:	8d 41 01             	lea    eax,[ecx+0x1]
c0026d22:	83 f8 39             	cmp    eax,0x39
c0026d25:	0f 87 95 00 00 00    	ja     c0026dc0 <expm1+0x2a0>
c0026d2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0026d32:	83 f9 13             	cmp    ecx,0x13
c0026d35:	0f 8f b5 01 00 00    	jg     c0026ef0 <expm1+0x3d0>
c0026d3b:	dd d9                	fstp   st(1)
c0026d3d:	b8 00 00 20 00       	mov    eax,0x200000
c0026d42:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0026d47:	d3 f8                	sar    eax,cl
c0026d49:	29 c2                	sub    edx,eax
c0026d4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026d4f:	dd 04 24             	fld    QWORD PTR [esp]
c0026d52:	d9 cb                	fxch   st(3)
c0026d54:	de e9                	fsubp  st(1),st
c0026d56:	de ea                	fsubp  st(2),st
c0026d58:	d9 c9                	fxch   st(1)
c0026d5a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d5e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d62:	de c9                	fmulp  st(1),st
c0026d64:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d68:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d6c:	83 c4 24             	add    esp,0x24
c0026d6f:	c3                   	ret    
c0026d70:	dd db                	fstp   st(3)
c0026d72:	dd db                	fstp   st(3)
c0026d74:	dd d8                	fstp   st(0)
c0026d76:	d8 ca                	fmul   st,st(2)
c0026d78:	de e1                	fsubrp st(1),st
c0026d7a:	de e9                	fsubp  st(1),st
c0026d7c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d80:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d84:	83 c4 24             	add    esp,0x24
c0026d87:	c3                   	ret    
c0026d88:	90                   	nop
c0026d89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026d90:	d9 ee                	fldz   
c0026d92:	d9 c1                	fld    st(1)
c0026d94:	dc 05 f0 f8 02 c0    	fadd   QWORD PTR ds:0xc002f8f0
c0026d9a:	d9 c9                	fxch   st(1)
c0026d9c:	df f1                	fcomip st,st(1)
c0026d9e:	dd d8                	fstp   st(0)
c0026da0:	0f 87 8a 01 00 00    	ja     c0026f30 <expm1+0x410>
c0026da6:	d9 c0                	fld    st(0)
c0026da8:	dc 0d 80 f7 02 c0    	fmul   QWORD PTR ds:0xc002f780
c0026dae:	d9 05 08 f8 02 c0    	fld    DWORD PTR ds:0xc002f808
c0026db4:	e9 02 fe ff ff       	jmp    c0026bbb <expm1+0x9b>
c0026db9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026dc0:	de e3                	fsubrp st(3),st
c0026dc2:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0026dc8:	de e2                	fsubrp st(2),st
c0026dca:	d9 c9                	fxch   st(1)
c0026dcc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026dd0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026dd4:	0f 84 96 01 00 00    	je     c0026f70 <expm1+0x450>
c0026dda:	de c9                	fmulp  st(1),st
c0026ddc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026de0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026de4:	d9 e8                	fld1   
c0026de6:	de e9                	fsubp  st(1),st
c0026de8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026dec:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026df0:	eb 92                	jmp    c0026d84 <expm1+0x264>
c0026df2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026df9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026e00:	dd d9                	fstp   st(1)
c0026e02:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0026e07:	0f 87 7a 01 00 00    	ja     c0026f87 <expm1+0x467>
c0026e0d:	85 d2                	test   edx,edx
c0026e0f:	0f 88 bb 00 00 00    	js     c0026ed0 <expm1+0x3b0>
c0026e15:	dc 25 f8 f8 02 c0    	fsub   QWORD PTR ds:0xc002f8f8
c0026e1b:	b9 01 00 00 00       	mov    ecx,0x1
c0026e20:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e24:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e28:	dd 05 e0 f8 02 c0    	fld    QWORD PTR ds:0xc002f8e0
c0026e2e:	e9 d6 fd ff ff       	jmp    c0026c09 <expm1+0xe9>
c0026e33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026e39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026e40:	dd d9                	fstp   st(1)
c0026e42:	d9 c0                	fld    st(0)
c0026e44:	dc 05 b8 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6b8
c0026e4a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0026e4e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e52:	de e1                	fsubrp st(1),st
c0026e54:	de e9                	fsubp  st(1),st
c0026e56:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e5a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e5e:	83 c4 24             	add    esp,0x24
c0026e61:	c3                   	ret    
c0026e62:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026e69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026e70:	dd db                	fstp   st(3)
c0026e72:	d9 c9                	fxch   st(1)
c0026e74:	d9 ca                	fxch   st(2)
c0026e76:	dd 04 24             	fld    QWORD PTR [esp]
c0026e79:	d9 05 c8 f8 02 c0    	fld    DWORD PTR ds:0xc002f8c8
c0026e7f:	df f1                	fcomip st,st(1)
c0026e81:	dd d8                	fstp   st(0)
c0026e83:	0f 86 b7 00 00 00    	jbe    c0026f40 <expm1+0x420>
c0026e89:	dd d9                	fstp   st(1)
c0026e8b:	d9 ca                	fxch   st(2)
c0026e8d:	de c1                	faddp  st(1),st
c0026e8f:	de e9                	fsubp  st(1),st
c0026e91:	d8 0d cc f8 02 c0    	fmul   DWORD PTR ds:0xc002f8cc
c0026e97:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e9b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e9f:	e9 e0 fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026ea4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026eaa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026eb0:	dd db                	fstp   st(3)
c0026eb2:	dd d8                	fstp   st(0)
c0026eb4:	d9 c9                	fxch   st(1)
c0026eb6:	de ea                	fsubp  st(2),st
c0026eb8:	dc c9                	fmul   st(1),st
c0026eba:	de e9                	fsubp  st(1),st
c0026ebc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ec0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ec4:	e9 bb fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026ec9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026ed0:	dc 05 f8 f8 02 c0    	fadd   QWORD PTR ds:0xc002f8f8
c0026ed6:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c0026edb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026edf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ee3:	dd 05 d8 f8 02 c0    	fld    QWORD PTR ds:0xc002f8d8
c0026ee9:	e9 1b fd ff ff       	jmp    c0026c09 <expm1+0xe9>
c0026eee:	66 90                	xchg   ax,ax
c0026ef0:	b8 ff 03 00 00       	mov    eax,0x3ff
c0026ef5:	29 c8                	sub    eax,ecx
c0026ef7:	c1 e0 14             	shl    eax,0x14
c0026efa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026efe:	dd 04 24             	fld    QWORD PTR [esp]
c0026f01:	de c1                	faddp  st(1),st
c0026f03:	de eb                	fsubp  st(3),st
c0026f05:	d9 ca                	fxch   st(2)
c0026f07:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026f0b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026f0f:	de c2                	faddp  st(2),st
c0026f11:	d9 c9                	fxch   st(1)
c0026f13:	e9 42 fe ff ff       	jmp    c0026d5a <expm1+0x23a>
c0026f18:	90                   	nop
c0026f19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026f20:	dd d8                	fstp   st(0)
c0026f22:	85 d2                	test   edx,edx
c0026f24:	78 0c                	js     c0026f32 <expm1+0x412>
c0026f26:	dd 04 24             	fld    QWORD PTR [esp]
c0026f29:	e9 56 fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026f2e:	66 90                	xchg   ax,ax
c0026f30:	dd d8                	fstp   st(0)
c0026f32:	d9 e8                	fld1   
c0026f34:	d9 e0                	fchs   
c0026f36:	e9 49 fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026f3b:	90                   	nop
c0026f3c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026f40:	dd da                	fstp   st(2)
c0026f42:	d9 c9                	fxch   st(1)
c0026f44:	de ea                	fsubp  st(2),st
c0026f46:	d9 c9                	fxch   st(1)
c0026f48:	d8 c0                	fadd   st,st(0)
c0026f4a:	de c1                	faddp  st(1),st
c0026f4c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026f50:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026f54:	e9 2b fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026f59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026f60:	d9 05 f0 f6 02 c0    	fld    DWORD PTR ds:0xc002f6f0
c0026f66:	e9 19 fe ff ff       	jmp    c0026d84 <expm1+0x264>
c0026f6b:	90                   	nop
c0026f6c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026f70:	dd d9                	fstp   st(1)
c0026f72:	d8 c0                	fadd   st,st(0)
c0026f74:	dc 0d 28 f9 02 c0    	fmul   QWORD PTR ds:0xc002f928
c0026f7a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026f7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026f82:	e9 5d fe ff ff       	jmp    c0026de4 <expm1+0x2c4>
c0026f87:	d9 c0                	fld    st(0)
c0026f89:	85 d2                	test   edx,edx
c0026f8b:	dc 0d 80 f7 02 c0    	fmul   QWORD PTR ds:0xc002f780
c0026f91:	0f 88 17 fe ff ff    	js     c0026dae <expm1+0x28e>
c0026f97:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c0026f9d:	e9 19 fc ff ff       	jmp    c0026bbb <expm1+0x9b>
c0026fa2:	66 90                	xchg   ax,ax
c0026fa4:	66 90                	xchg   ax,ax
c0026fa6:	66 90                	xchg   ax,ax
c0026fa8:	66 90                	xchg   ax,ax
c0026faa:	66 90                	xchg   ax,ax
c0026fac:	66 90                	xchg   ax,ax
c0026fae:	66 90                	xchg   ax,ax

c0026fb0 <fabs>:
c0026fb0:	83 ec 0c             	sub    esp,0xc
c0026fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0026fba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026fbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026fc7:	dd 04 24             	fld    QWORD PTR [esp]
c0026fca:	83 c4 0c             	add    esp,0xc
c0026fcd:	c3                   	ret    
c0026fce:	66 90                	xchg   ax,ax

c0026fd0 <frexp>:
c0026fd0:	53                   	push   ebx
c0026fd1:	83 ec 10             	sub    esp,0x10
c0026fd4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026fd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0026fdc:	dd 14 24             	fst    QWORD PTR [esp]
c0026fdf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026fe3:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0026fe9:	89 d0                	mov    eax,edx
c0026feb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ff0:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026ff5:	7f 59                	jg     c0027050 <frexp+0x80>
c0026ff7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0026ffa:	09 c3                	or     ebx,eax
c0026ffc:	74 62                	je     c0027060 <frexp+0x90>
c0026ffe:	31 db                	xor    ebx,ebx
c0027000:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0027006:	75 28                	jne    c0027030 <frexp+0x60>
c0027008:	d9 05 30 f9 02 c0    	fld    DWORD PTR ds:0xc002f930
c002700e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0027013:	de c9                	fmulp  st(1),st
c0027015:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027018:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002701c:	89 d0                	mov    eax,edx
c002701e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027023:	eb 0d                	jmp    c0027032 <frexp+0x62>
c0027025:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027029:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027030:	dd d8                	fstp   st(0)
c0027032:	c1 f8 14             	sar    eax,0x14
c0027035:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c002703b:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c0027042:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c0027048:	89 01                	mov    DWORD PTR [ecx],eax
c002704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002704e:	eb 12                	jmp    c0027062 <frexp+0x92>
c0027050:	dd d8                	fstp   st(0)
c0027052:	eb 0e                	jmp    c0027062 <frexp+0x92>
c0027054:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002705a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027060:	dd d8                	fstp   st(0)
c0027062:	dd 04 24             	fld    QWORD PTR [esp]
c0027065:	83 c4 10             	add    esp,0x10
c0027068:	5b                   	pop    ebx
c0027069:	c3                   	ret    
c002706a:	66 90                	xchg   ax,ax
c002706c:	66 90                	xchg   ax,ax
c002706e:	66 90                	xchg   ax,ax

c0027070 <modf>:
c0027070:	53                   	push   ebx
c0027071:	83 ec 18             	sub    esp,0x18
c0027074:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027078:	dd 14 24             	fst    QWORD PTR [esp]
c002707b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002707f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0027082:	89 d0                	mov    eax,edx
c0027084:	c1 f8 14             	sar    eax,0x14
c0027087:	25 ff 07 00 00       	and    eax,0x7ff
c002708c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0027092:	83 f9 13             	cmp    ecx,0x13
c0027095:	7f 49                	jg     c00270e0 <modf+0x70>
c0027097:	85 c9                	test   ecx,ecx
c0027099:	0f 88 f1 00 00 00    	js     c0027190 <modf+0x120>
c002709f:	dd d8                	fstp   st(0)
c00270a1:	b8 ff ff 0f 00       	mov    eax,0xfffff
c00270a6:	d3 f8                	sar    eax,cl
c00270a8:	89 d1                	mov    ecx,edx
c00270aa:	21 c1                	and    ecx,eax
c00270ac:	09 d9                	or     ecx,ebx
c00270ae:	0f 84 ac 00 00 00    	je     c0027160 <modf+0xf0>
c00270b4:	f7 d0                	not    eax
c00270b6:	21 d0                	and    eax,edx
c00270b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270bc:	31 c0                	xor    eax,eax
c00270be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00270c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00270c6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00270ca:	dd 10                	fst    QWORD PTR [eax]
c00270cc:	dd 04 24             	fld    QWORD PTR [esp]
c00270cf:	de e1                	fsubrp st(1),st
c00270d1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00270d5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00270d9:	83 c4 18             	add    esp,0x18
c00270dc:	5b                   	pop    ebx
c00270dd:	c3                   	ret    
c00270de:	66 90                	xchg   ax,ax
c00270e0:	dd d8                	fstp   st(0)
c00270e2:	83 f9 33             	cmp    ecx,0x33
c00270e5:	7e 39                	jle    c0027120 <modf+0xb0>
c00270e7:	81 f9 00 04 00 00    	cmp    ecx,0x400
c00270ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00270f1:	0f 84 e9 00 00 00    	je     c00271e0 <modf+0x170>
c00270f7:	dd 04 24             	fld    QWORD PTR [esp]
c00270fa:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027100:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0027107:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002710b:	dd 18                	fstp   QWORD PTR [eax]
c002710d:	dd 04 24             	fld    QWORD PTR [esp]
c0027110:	83 c4 18             	add    esp,0x18
c0027113:	5b                   	pop    ebx
c0027114:	c3                   	ret    
c0027115:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027119:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027120:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c0027126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002712b:	d3 e8                	shr    eax,cl
c002712d:	85 d8                	test   eax,ebx
c002712f:	75 7f                	jne    c00271b0 <modf+0x140>
c0027131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027135:	81 e2 00 00 00 80    	and    edx,0x80000000
c002713b:	dd 04 24             	fld    QWORD PTR [esp]
c002713e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0027145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027149:	dd 18                	fstp   QWORD PTR [eax]
c002714b:	dd 04 24             	fld    QWORD PTR [esp]
c002714e:	83 c4 18             	add    esp,0x18
c0027151:	5b                   	pop    ebx
c0027152:	c3                   	ret    
c0027153:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027159:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027164:	81 e2 00 00 00 80    	and    edx,0x80000000
c002716a:	dd 04 24             	fld    QWORD PTR [esp]
c002716d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0027174:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027178:	dd 18                	fstp   QWORD PTR [eax]
c002717a:	dd 04 24             	fld    QWORD PTR [esp]
c002717d:	83 c4 18             	add    esp,0x18
c0027180:	5b                   	pop    ebx
c0027181:	c3                   	ret    
c0027182:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027189:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027190:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027196:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002719a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002719e:	31 d2                	xor    edx,edx
c00271a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00271a4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00271a8:	dd 18                	fstp   QWORD PTR [eax]
c00271aa:	83 c4 18             	add    esp,0x18
c00271ad:	5b                   	pop    ebx
c00271ae:	c3                   	ret    
c00271af:	90                   	nop
c00271b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00271b4:	f7 d0                	not    eax
c00271b6:	21 d8                	and    eax,ebx
c00271b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00271bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00271c0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00271c4:	dd 10                	fst    QWORD PTR [eax]
c00271c6:	dd 04 24             	fld    QWORD PTR [esp]
c00271c9:	de e1                	fsubrp st(1),st
c00271cb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00271cf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00271d3:	83 c4 18             	add    esp,0x18
c00271d6:	5b                   	pop    ebx
c00271d7:	c3                   	ret    
c00271d8:	90                   	nop
c00271d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00271e0:	dd 04 24             	fld    QWORD PTR [esp]
c00271e3:	dd 10                	fst    QWORD PTR [eax]
c00271e5:	d9 ee                	fldz   
c00271e7:	de f1                	fdivrp st(1),st
c00271e9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00271ed:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00271f1:	e9 e3 fe ff ff       	jmp    c00270d9 <modf+0x69>
c00271f6:	66 90                	xchg   ax,ax
c00271f8:	66 90                	xchg   ax,ax
c00271fa:	66 90                	xchg   ax,ax
c00271fc:	66 90                	xchg   ax,ax
c00271fe:	66 90                	xchg   ax,ax

c0027200 <round>:
c0027200:	83 ec 2c             	sub    esp,0x2c
c0027203:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0027207:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002720b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002720f:	89 c2                	mov    edx,eax
c0027211:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027217:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c002721d:	0f 84 9d 00 00 00    	je     c00272c0 <round+0xc0>
c0027223:	dd d8                	fstp   st(0)
c0027225:	85 c0                	test   eax,eax
c0027227:	78 47                	js     c0027270 <round+0x70>
c0027229:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002722d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027230:	e8 ff 03 00 00       	call   c0027634 <floor>
c0027235:	d9 c0                	fld    st(0)
c0027237:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002723b:	d8 e9                	fsubr  st,st(1)
c002723d:	d9 05 08 f8 02 c0    	fld    DWORD PTR ds:0xc002f808
c0027243:	df f1                	fcomip st,st(1)
c0027245:	dd d8                	fstp   st(0)
c0027247:	72 17                	jb     c0027260 <round+0x60>
c0027249:	dd d9                	fstp   st(1)
c002724b:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c0027251:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027255:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027259:	eb 07                	jmp    c0027262 <round+0x62>
c002725b:	90                   	nop
c002725c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027260:	dd d8                	fstp   st(0)
c0027262:	83 c4 2c             	add    esp,0x2c
c0027265:	c3                   	ret    
c0027266:	8d 76 00             	lea    esi,[esi+0x0]
c0027269:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027270:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027274:	d9 e0                	fchs   
c0027276:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027279:	e8 b6 03 00 00       	call   c0027634 <floor>
c002727e:	d9 c0                	fld    st(0)
c0027280:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027284:	d8 c1                	fadd   st,st(1)
c0027286:	d9 05 08 f8 02 c0    	fld    DWORD PTR ds:0xc002f808
c002728c:	df f1                	fcomip st,st(1)
c002728e:	dd d8                	fstp   st(0)
c0027290:	72 1e                	jb     c00272b0 <round+0xb0>
c0027292:	dd d9                	fstp   st(1)
c0027294:	d8 05 a8 f6 02 c0    	fadd   DWORD PTR ds:0xc002f6a8
c002729a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002729e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00272a2:	eb 0e                	jmp    c00272b2 <round+0xb2>
c00272a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00272aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00272b0:	dd d8                	fstp   st(0)
c00272b2:	d9 e0                	fchs   
c00272b4:	83 c4 2c             	add    esp,0x2c
c00272b7:	c3                   	ret    
c00272b8:	90                   	nop
c00272b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00272c0:	d9 c0                	fld    st(0)
c00272c2:	de c1                	faddp  st(1),st
c00272c4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00272c8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00272cc:	83 c4 2c             	add    esp,0x2c
c00272cf:	c3                   	ret    

c00272d0 <sin>:
c00272d0:	83 ec 5c             	sub    esp,0x5c
c00272d3:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00272d7:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00272db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00272df:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272e4:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c00272e9:	7f 65                	jg     c0027350 <sin+0x80>
c00272eb:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c00272f0:	7f 2e                	jg     c0027320 <sin+0x50>
c00272f2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00272f6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00272fb:	66 0d 00 0c          	or     ax,0xc00
c00272ff:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0027304:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027308:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c002730c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027314:	85 c0                	test   eax,eax
c0027316:	75 18                	jne    c0027330 <sin+0x60>
c0027318:	83 c4 5c             	add    esp,0x5c
c002731b:	c3                   	ret    
c002731c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027320:	dd d8                	fstp   st(0)
c0027322:	eb 0e                	jmp    c0027332 <sin+0x62>
c0027324:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002732a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027330:	dd d8                	fstp   st(0)
c0027332:	d9 ee                	fldz   
c0027334:	31 c9                	xor    ecx,ecx
c0027336:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002733a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002733e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0027342:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027345:	e8 06 13 00 00       	call   c0028650 <__kernel_sin>
c002734a:	83 c4 5c             	add    esp,0x5c
c002734d:	c3                   	ret    
c002734e:	66 90                	xchg   ax,ax
c0027350:	dd d8                	fstp   st(0)
c0027352:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0027357:	7e 17                	jle    c0027370 <sin+0xa0>
c0027359:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002735d:	d8 e0                	fsub   st,st(0)
c002735f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027363:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027367:	83 c4 5c             	add    esp,0x5c
c002736a:	c3                   	ret    
c002736b:	90                   	nop
c002736c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027370:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0027374:	8d 44 24 40          	lea    eax,[esp+0x40]
c0027378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002737c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002737f:	e8 1c 03 00 00       	call   c00276a0 <__ieee754_rem_pio2>
c0027384:	83 e0 03             	and    eax,0x3
c0027387:	83 f8 01             	cmp    eax,0x1
c002738a:	0f 84 90 00 00 00    	je     c0027420 <sin+0x150>
c0027390:	83 f8 02             	cmp    eax,0x2
c0027393:	74 2b                	je     c00273c0 <sin+0xf0>
c0027395:	85 c0                	test   eax,eax
c0027397:	74 57                	je     c00273f0 <sin+0x120>
c0027399:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002739d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00273a1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00273a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00273a8:	e8 23 08 00 00       	call   c0027bd0 <__kernel_cos>
c00273ad:	d9 e0                	fchs   
c00273af:	e9 64 ff ff ff       	jmp    c0027318 <sin+0x48>
c00273b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00273ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00273c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00273c4:	b8 01 00 00 00       	mov    eax,0x1
c00273c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00273cd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00273d1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00273d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00273d8:	e8 73 12 00 00       	call   c0028650 <__kernel_sin>
c00273dd:	d9 e0                	fchs   
c00273df:	e9 34 ff ff ff       	jmp    c0027318 <sin+0x48>
c00273e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00273ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00273f0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00273f4:	ba 01 00 00 00       	mov    edx,0x1
c00273f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00273fd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0027401:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0027405:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027408:	e8 43 12 00 00       	call   c0028650 <__kernel_sin>
c002740d:	e9 06 ff ff ff       	jmp    c0027318 <sin+0x48>
c0027412:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027419:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027420:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027424:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0027428:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002742c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002742f:	e8 9c 07 00 00       	call   c0027bd0 <__kernel_cos>
c0027434:	e9 df fe ff ff       	jmp    c0027318 <sin+0x48>
c0027439:	66 90                	xchg   ax,ax
c002743b:	66 90                	xchg   ax,ax
c002743d:	66 90                	xchg   ax,ax
c002743f:	90                   	nop

c0027440 <tanh>:
c0027440:	53                   	push   ebx
c0027441:	83 ec 28             	sub    esp,0x28
c0027444:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0027448:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002744c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0027450:	89 d8                	mov    eax,ebx
c0027452:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027457:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c002745c:	7e 32                	jle    c0027490 <tanh+0x50>
c002745e:	d9 e8                	fld1   
c0027460:	85 db                	test   ebx,ebx
c0027462:	dc f1                	fdivr  st(1),st
c0027464:	78 1a                	js     c0027480 <tanh+0x40>
c0027466:	de c1                	faddp  st(1),st
c0027468:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002746c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027470:	83 c4 28             	add    esp,0x28
c0027473:	5b                   	pop    ebx
c0027474:	c3                   	ret    
c0027475:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027480:	de e9                	fsubp  st(1),st
c0027482:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027486:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002748a:	83 c4 28             	add    esp,0x28
c002748d:	5b                   	pop    ebx
c002748e:	c3                   	ret    
c002748f:	90                   	nop
c0027490:	dd d8                	fstp   st(0)
c0027492:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0027497:	7f 57                	jg     c00274f0 <tanh+0xb0>
c0027499:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c002749e:	7f 70                	jg     c0027510 <tanh+0xd0>
c00274a0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00274a4:	d9 e8                	fld1   
c00274a6:	d9 c1                	fld    st(1)
c00274a8:	dc 05 b8 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6b8
c00274ae:	df f1                	fcomip st,st(1)
c00274b0:	dd d8                	fstp   st(0)
c00274b2:	77 bc                	ja     c0027470 <tanh+0x30>
c00274b4:	dd d8                	fstp   st(0)
c00274b6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00274ba:	dd 1c 24             	fstp   QWORD PTR [esp]
c00274bd:	e8 ee fa ff ff       	call   c0026fb0 <fabs>
c00274c2:	d9 05 cc f8 02 c0    	fld    DWORD PTR ds:0xc002f8cc
c00274c8:	de c9                	fmulp  st(1),st
c00274ca:	dd 1c 24             	fstp   QWORD PTR [esp]
c00274cd:	e8 4e f6 ff ff       	call   c0026b20 <expm1>
c00274d2:	d9 c0                	fld    st(0)
c00274d4:	d9 e0                	fchs   
c00274d6:	d9 05 18 f7 02 c0    	fld    DWORD PTR ds:0xc002f718
c00274dc:	de c2                	faddp  st(2),st
c00274de:	de f1                	fdivrp st(1),st
c00274e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00274e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00274e8:	eb 08                	jmp    c00274f2 <tanh+0xb2>
c00274ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00274f0:	d9 e8                	fld1   
c00274f2:	85 db                	test   ebx,ebx
c00274f4:	0f 89 76 ff ff ff    	jns    c0027470 <tanh+0x30>
c00274fa:	d9 e0                	fchs   
c00274fc:	83 c4 28             	add    esp,0x28
c00274ff:	5b                   	pop    ebx
c0027500:	c3                   	ret    
c0027501:	eb 0d                	jmp    c0027510 <tanh+0xd0>
c0027503:	90                   	nop
c0027504:	90                   	nop
c0027505:	90                   	nop
c0027506:	90                   	nop
c0027507:	90                   	nop
c0027508:	90                   	nop
c0027509:	90                   	nop
c002750a:	90                   	nop
c002750b:	90                   	nop
c002750c:	90                   	nop
c002750d:	90                   	nop
c002750e:	90                   	nop
c002750f:	90                   	nop
c0027510:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0027515:	7e 9f                	jle    c00274b6 <tanh+0x76>
c0027517:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002751b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002751e:	e8 8d fa ff ff       	call   c0026fb0 <fabs>
c0027523:	d8 c0                	fadd   st,st(0)
c0027525:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027528:	e8 f3 f5 ff ff       	call   c0026b20 <expm1>
c002752d:	d9 05 18 f7 02 c0    	fld    DWORD PTR ds:0xc002f718
c0027533:	dc c1                	fadd   st(1),st
c0027535:	de f1                	fdivrp st(1),st
c0027537:	d8 2d a8 f6 02 c0    	fsubr  DWORD PTR ds:0xc002f6a8
c002753d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027541:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027545:	eb ab                	jmp    c00274f2 <tanh+0xb2>
c0027547:	66 90                	xchg   ax,ax
c0027549:	66 90                	xchg   ax,ax
c002754b:	66 90                	xchg   ax,ax
c002754d:	66 90                	xchg   ax,ax
c002754f:	90                   	nop

c0027550 <cimag>:
c0027550:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0027554:	c3                   	ret    
c0027555:	66 90                	xchg   ax,ax
c0027557:	66 90                	xchg   ax,ax
c0027559:	66 90                	xchg   ax,ax
c002755b:	66 90                	xchg   ax,ax
c002755d:	66 90                	xchg   ax,ax
c002755f:	90                   	nop

c0027560 <creal>:
c0027560:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027564:	c3                   	ret    
c0027565:	66 90                	xchg   ax,ax
c0027567:	90                   	nop

c0027568 <exp>:
c0027568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002756c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027571:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0027576:	73 42                	jae    c00275ba <x_Inf_or_NaN>
c0027578:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002757c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0027581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027585:	25 00 03 00 00       	and    eax,0x300
c002758a:	3d 00 03 00 00       	cmp    eax,0x300
c002758f:	74 0c                	je     c002759d <exp+0x35>
c0027591:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0027599:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c002759d:	d9 ea                	fldl2e 
c002759f:	de c9                	fmulp  st(1),st
c00275a1:	dd d1                	fst    st(1)
c00275a3:	d9 fc                	frndint 
c00275a5:	dd d2                	fst    st(2)
c00275a7:	de e9                	fsubp  st(1),st
c00275a9:	d9 f0                	f2xm1  
c00275ab:	d9 e8                	fld1   
c00275ad:	de c1                	faddp  st(1),st
c00275af:	d9 fd                	fscale 
c00275b1:	dd d9                	fstp   st(1)
c00275b3:	74 04                	je     c00275b9 <exp+0x51>
c00275b5:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c00275b9:	c3                   	ret    

c00275ba <x_Inf_or_NaN>:
c00275ba:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c00275c2:	75 0a                	jne    c00275ce <x_not_minus_Inf>
c00275c4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00275c9:	75 03                	jne    c00275ce <x_not_minus_Inf>
c00275cb:	d9 ee                	fldz   
c00275cd:	c3                   	ret    

c00275ce <x_not_minus_Inf>:
c00275ce:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275d2:	c3                   	ret    
c00275d3:	90                   	nop

c00275d4 <fmod>:
c00275d4:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c00275d8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275dc:	d9 f8                	fprem  
c00275de:	9b df e0             	fstsw  ax
c00275e1:	9e                   	sahf   
c00275e2:	7a f8                	jp     c00275dc <fmod+0x8>
c00275e4:	dd d9                	fstp   st(1)
c00275e6:	c3                   	ret    
c00275e7:	90                   	nop

c00275e8 <log>:
c00275e8:	d9 ed                	fldln2 
c00275ea:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275ee:	d9 f1                	fyl2x  
c00275f0:	c3                   	ret    
c00275f1:	66 90                	xchg   ax,ax
c00275f3:	90                   	nop

c00275f4 <log10>:
c00275f4:	d9 ec                	fldlg2 
c00275f6:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275fa:	d9 f1                	fyl2x  
c00275fc:	c3                   	ret    
c00275fd:	66 90                	xchg   ax,ax
c00275ff:	90                   	nop

c0027600 <sqrt>:
c0027600:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027604:	d9 fa                	fsqrt  
c0027606:	c3                   	ret    
c0027607:	90                   	nop

c0027608 <ceil>:
c0027608:	55                   	push   ebp
c0027609:	89 e5                	mov    ebp,esp
c002760b:	83 ec 08             	sub    esp,0x8
c002760e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0027612:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0027616:	66 81 ca 00 08       	or     dx,0x800
c002761b:	66 81 e2 ff fb       	and    dx,0xfbff
c0027620:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0027624:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0027627:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c002762a:	d9 fc                	frndint 
c002762c:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002762f:	c9                   	leave  
c0027630:	c3                   	ret    
c0027631:	66 90                	xchg   ax,ax
c0027633:	90                   	nop

c0027634 <floor>:
c0027634:	55                   	push   ebp
c0027635:	89 e5                	mov    ebp,esp
c0027637:	83 ec 08             	sub    esp,0x8
c002763a:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c002763e:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0027642:	66 81 ca 00 04       	or     dx,0x400
c0027647:	66 81 e2 ff f7       	and    dx,0xf7ff
c002764c:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0027650:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0027653:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0027656:	d9 fc                	frndint 
c0027658:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002765b:	c9                   	leave  
c002765c:	c3                   	ret    
c002765d:	66 90                	xchg   ax,ax
c002765f:	90                   	nop

c0027660 <tan>:
c0027660:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027664:	d9 f2                	fptan  
c0027666:	df e0                	fnstsw ax
c0027668:	66 25 00 04          	and    ax,0x400
c002766c:	75 03                	jne    c0027671 <tan+0x11>
c002766e:	dd d8                	fstp   st(0)
c0027670:	c3                   	ret    
c0027671:	d9 eb                	fldpi  
c0027673:	d8 c0                	fadd   st,st(0)
c0027675:	d9 c9                	fxch   st(1)
c0027677:	d9 f5                	fprem1 
c0027679:	9b df e0             	fstsw  ax
c002767c:	66 25 00 04          	and    ax,0x400
c0027680:	75 f5                	jne    c0027677 <tan+0x17>
c0027682:	dd d9                	fstp   st(1)
c0027684:	d9 f2                	fptan  
c0027686:	dd d8                	fstp   st(0)
c0027688:	c3                   	ret    
c0027689:	66 90                	xchg   ax,ax
c002768b:	90                   	nop

c002768c <ldexp>:
c002768c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0027690:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027694:	d9 fd                	fscale 
c0027696:	dd d9                	fstp   st(1)
c0027698:	c3                   	ret    
c0027699:	66 90                	xchg   ax,ax
c002769b:	66 90                	xchg   ax,ax
c002769d:	66 90                	xchg   ax,ax
c002769f:	90                   	nop

c00276a0 <__ieee754_rem_pio2>:
c00276a0:	56                   	push   esi
c00276a1:	53                   	push   ebx
c00276a2:	83 ec 74             	sub    esp,0x74
c00276a5:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c00276ac:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c00276b3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00276b7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00276bb:	89 f2                	mov    edx,esi
c00276bd:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00276c3:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c00276c9:	7f 65                	jg     c0027730 <__ieee754_rem_pio2+0x90>
c00276cb:	89 f0                	mov    eax,esi
c00276cd:	25 ff ff 0f 00       	and    eax,0xfffff
c00276d2:	3d fb 21 09 00       	cmp    eax,0x921fb
c00276d7:	0f 84 57 02 00 00    	je     c0027934 <__ieee754_rem_pio2+0x294>
c00276dd:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c00276e3:	0f 8f b7 01 00 00    	jg     c00278a0 <__ieee754_rem_pio2+0x200>
c00276e9:	85 f6                	test   esi,esi
c00276eb:	0f 8e 3a 04 00 00    	jle    c0027b2b <__ieee754_rem_pio2+0x48b>
c00276f1:	dc 25 38 f9 02 c0    	fsub   QWORD PTR ds:0xc002f938
c00276f7:	b8 01 00 00 00       	mov    eax,0x1
c00276fc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027700:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027704:	dd 05 40 f9 02 c0    	fld    QWORD PTR ds:0xc002f940
c002770a:	d9 c1                	fld    st(1)
c002770c:	d8 e1                	fsub   st,st(1)
c002770e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027712:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027716:	dd 13                	fst    QWORD PTR [ebx]
c0027718:	de ea                	fsubp  st(2),st
c002771a:	de e9                	fsubp  st(1),st
c002771c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002771f:	83 c4 74             	add    esp,0x74
c0027722:	5b                   	pop    ebx
c0027723:	5e                   	pop    esi
c0027724:	c3                   	ret    
c0027725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027730:	dd d8                	fstp   st(0)
c0027732:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0027738:	7f 66                	jg     c00277a0 <__ieee754_rem_pio2+0x100>
c002773a:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0027740:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027744:	0f 8f 96 01 00 00    	jg     c00278e0 <__ieee754_rem_pio2+0x240>
c002774a:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0027750:	0f 84 de 01 00 00    	je     c0027934 <__ieee754_rem_pio2+0x294>
c0027756:	85 f6                	test   esi,esi
c0027758:	0f 8e 00 04 00 00    	jle    c0027b5e <__ieee754_rem_pio2+0x4be>
c002775e:	dc 25 58 f9 02 c0    	fsub   QWORD PTR ds:0xc002f958
c0027764:	b8 03 00 00 00       	mov    eax,0x3
c0027769:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002776d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027771:	db 2d a0 f9 02 c0    	fld    TBYTE PTR ds:0xc002f9a0
c0027777:	d9 c1                	fld    st(1)
c0027779:	d8 e1                	fsub   st,st(1)
c002777b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002777f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027783:	dd 13                	fst    QWORD PTR [ebx]
c0027785:	de ea                	fsubp  st(2),st
c0027787:	de e9                	fsubp  st(1),st
c0027789:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002778c:	83 c4 74             	add    esp,0x74
c002778f:	5b                   	pop    ebx
c0027790:	5e                   	pop    esi
c0027791:	c3                   	ret    
c0027792:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027799:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00277a0:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c00277a6:	0f 8e 84 01 00 00    	jle    c0027930 <__ieee754_rem_pio2+0x290>
c00277ac:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c00277b2:	0f 8f d8 02 00 00    	jg     c0027a90 <__ieee754_rem_pio2+0x3f0>
c00277b8:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00277bc:	89 d1                	mov    ecx,edx
c00277be:	c1 f9 14             	sar    ecx,0x14
c00277c1:	81 e9 16 04 00 00    	sub    ecx,0x416
c00277c7:	89 c8                	mov    eax,ecx
c00277c9:	c1 e0 14             	shl    eax,0x14
c00277cc:	29 c2                	sub    edx,eax
c00277ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00277d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00277d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00277da:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00277df:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00277e3:	66 0d 00 0c          	or     ax,0xc00
c00277e7:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00277ec:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00277f0:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c00277f4:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00277f8:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c00277fc:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0027800:	de e9                	fsubp  st(1),st
c0027802:	d9 05 b4 f9 02 c0    	fld    DWORD PTR ds:0xc002f9b4
c0027808:	dc c9                	fmul   st(1),st
c002780a:	d9 c9                	fxch   st(1)
c002780c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027810:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027814:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027818:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c002781c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027820:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0027824:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0027828:	de e9                	fsubp  st(1),st
c002782a:	de c9                	fmulp  st(1),st
c002782c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027830:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027834:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0027838:	d9 ee                	fldz   
c002783a:	d9 c9                	fxch   st(1)
c002783c:	df e9                	fucomip st,st(1)
c002783e:	dd d8                	fstp   st(0)
c0027840:	0f 8a 8a 02 00 00    	jp     c0027ad0 <__ieee754_rem_pio2+0x430>
c0027846:	0f 85 84 02 00 00    	jne    c0027ad0 <__ieee754_rem_pio2+0x430>
c002784c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027850:	31 c0                	xor    eax,eax
c0027852:	85 d2                	test   edx,edx
c0027854:	0f 95 c0             	setne  al
c0027857:	40                   	inc    eax
c0027858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002785c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0027860:	ba 01 00 00 00       	mov    edx,0x1
c0027865:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027869:	8d 44 24 58          	lea    eax,[esp+0x58]
c002786d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027871:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0027875:	89 04 24             	mov    DWORD PTR [esp],eax
c0027878:	e8 f3 03 00 00       	call   c0027c70 <__kernel_rem_pio2>
c002787d:	85 f6                	test   esi,esi
c002787f:	0f 88 5b 02 00 00    	js     c0027ae0 <__ieee754_rem_pio2+0x440>
c0027885:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027889:	dd 1b                	fstp   QWORD PTR [ebx]
c002788b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002788f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027892:	e9 88 fe ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027897:	89 f6                	mov    esi,esi
c0027899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00278a0:	85 f6                	test   esi,esi
c00278a2:	0f 8e 50 02 00 00    	jle    c0027af8 <__ieee754_rem_pio2+0x458>
c00278a8:	dc 25 48 f9 02 c0    	fsub   QWORD PTR ds:0xc002f948
c00278ae:	b8 02 00 00 00       	mov    eax,0x2
c00278b3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278b7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278bb:	dd 05 50 f9 02 c0    	fld    QWORD PTR ds:0xc002f950
c00278c1:	d9 c1                	fld    st(1)
c00278c3:	d8 e1                	fsub   st,st(1)
c00278c5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278c9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278cd:	dd 13                	fst    QWORD PTR [ebx]
c00278cf:	de ea                	fsubp  st(2),st
c00278d1:	de e9                	fsubp  st(1),st
c00278d3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00278d6:	83 c4 74             	add    esp,0x74
c00278d9:	5b                   	pop    ebx
c00278da:	5e                   	pop    esi
c00278db:	c3                   	ret    
c00278dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00278e0:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c00278e6:	74 4c                	je     c0027934 <__ieee754_rem_pio2+0x294>
c00278e8:	85 f6                	test   esi,esi
c00278ea:	0f 8e a1 02 00 00    	jle    c0027b91 <__ieee754_rem_pio2+0x4f1>
c00278f0:	dc 25 60 f9 02 c0    	fsub   QWORD PTR ds:0xc002f960
c00278f6:	b8 04 00 00 00       	mov    eax,0x4
c00278fb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278ff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027903:	dd 05 68 f9 02 c0    	fld    QWORD PTR ds:0xc002f968
c0027909:	d9 c1                	fld    st(1)
c002790b:	d8 e1                	fsub   st,st(1)
c002790d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027911:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027915:	dd 13                	fst    QWORD PTR [ebx]
c0027917:	de ea                	fsubp  st(2),st
c0027919:	de e9                	fsubp  st(1),st
c002791b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002791e:	83 c4 74             	add    esp,0x74
c0027921:	5b                   	pop    ebx
c0027922:	5e                   	pop    esi
c0027923:	c3                   	ret    
c0027924:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002792a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027930:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027934:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0027938:	d9 c0                	fld    st(0)
c002793a:	dc 0d 70 f9 02 c0    	fmul   QWORD PTR ds:0xc002f970
c0027940:	c1 fa 14             	sar    edx,0x14
c0027943:	89 d6                	mov    esi,edx
c0027945:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002794a:	d9 05 b0 f9 02 c0    	fld    DWORD PTR ds:0xc002f9b0
c0027950:	dc c1                	fadd   st(1),st
c0027952:	d9 c9                	fxch   st(1)
c0027954:	66 0d 00 0c          	or     ax,0xc00
c0027958:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002795d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027961:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027965:	de e1                	fsubrp st(1),st
c0027967:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002796b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002796f:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027973:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0027977:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c002797b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002797f:	d9 c0                	fld    st(0)
c0027981:	dc 0d 38 f9 02 c0    	fmul   QWORD PTR ds:0xc002f938
c0027987:	de ea                	fsubp  st(2),st
c0027989:	d9 c9                	fxch   st(1)
c002798b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002798f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027993:	d9 c1                	fld    st(1)
c0027995:	dc 0d 40 f9 02 c0    	fmul   QWORD PTR ds:0xc002f940
c002799b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002799f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00279a3:	d9 c1                	fld    st(1)
c00279a5:	d8 e1                	fsub   st,st(1)
c00279a7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00279ab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00279af:	c1 e9 14             	shr    ecx,0x14
c00279b2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00279b8:	29 ce                	sub    esi,ecx
c00279ba:	83 fe 10             	cmp    esi,0x10
c00279bd:	7f 21                	jg     c00279e0 <__ieee754_rem_pio2+0x340>
c00279bf:	dd da                	fstp   st(2)
c00279c1:	d9 c9                	fxch   st(1)
c00279c3:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00279c7:	dd 1b                	fstp   QWORD PTR [ebx]
c00279c9:	d9 c9                	fxch   st(1)
c00279cb:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c00279cf:	de e1                	fsubrp st(1),st
c00279d1:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00279d4:	83 c4 74             	add    esp,0x74
c00279d7:	5b                   	pop    ebx
c00279d8:	5e                   	pop    esi
c00279d9:	c3                   	ret    
c00279da:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00279e0:	dd d8                	fstp   st(0)
c00279e2:	d9 c1                	fld    st(1)
c00279e4:	dc 0d 78 f9 02 c0    	fmul   QWORD PTR ds:0xc002f978
c00279ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00279ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00279f2:	d9 c1                	fld    st(1)
c00279f4:	d8 e1                	fsub   st,st(1)
c00279f6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00279fa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00279fe:	d9 c0                	fld    st(0)
c0027a00:	dc eb                	fsub   st(3),st
c0027a02:	d9 cb                	fxch   st(3)
c0027a04:	de e2                	fsubrp st(2),st
c0027a06:	d9 c3                	fld    st(3)
c0027a08:	dc 0d 80 f9 02 c0    	fmul   QWORD PTR ds:0xc002f980
c0027a0e:	de e2                	fsubrp st(2),st
c0027a10:	d9 c9                	fxch   st(1)
c0027a12:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a16:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a1a:	d9 c2                	fld    st(2)
c0027a1c:	d8 e1                	fsub   st,st(1)
c0027a1e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0027a22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0027a26:	c1 e9 14             	shr    ecx,0x14
c0027a29:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027a2f:	29 ca                	sub    edx,ecx
c0027a31:	83 fa 31             	cmp    edx,0x31
c0027a34:	7e 7a                	jle    c0027ab0 <__ieee754_rem_pio2+0x410>
c0027a36:	dd d8                	fstp   st(0)
c0027a38:	dd d8                	fstp   st(0)
c0027a3a:	d9 c1                	fld    st(1)
c0027a3c:	dc 0d 88 f9 02 c0    	fmul   QWORD PTR ds:0xc002f988
c0027a42:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a46:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a4a:	d9 c1                	fld    st(1)
c0027a4c:	d8 e1                	fsub   st,st(1)
c0027a4e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a52:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a56:	d9 cb                	fxch   st(3)
c0027a58:	dc 0d 90 f9 02 c0    	fmul   QWORD PTR ds:0xc002f990
c0027a5e:	d9 ca                	fxch   st(2)
c0027a60:	d8 e3                	fsub   st,st(3)
c0027a62:	de e1                	fsubrp st(1),st
c0027a64:	de e9                	fsubp  st(1),st
c0027a66:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a6a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a6e:	d9 c1                	fld    st(1)
c0027a70:	d8 e1                	fsub   st,st(1)
c0027a72:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0027a76:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027a7a:	dd 1b                	fstp   QWORD PTR [ebx]
c0027a7c:	d9 c9                	fxch   st(1)
c0027a7e:	e9 48 ff ff ff       	jmp    c00279cb <__ieee754_rem_pio2+0x32b>
c0027a83:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027a90:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027a94:	31 c0                	xor    eax,eax
c0027a96:	d8 e0                	fsub   st,st(0)
c0027a98:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a9c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027aa0:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0027aa3:	dd 1b                	fstp   QWORD PTR [ebx]
c0027aa5:	e9 75 fc ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027aaa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027ab0:	dd da                	fstp   st(2)
c0027ab2:	dd da                	fstp   st(2)
c0027ab4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027ab8:	dd 1b                	fstp   QWORD PTR [ebx]
c0027aba:	d9 c9                	fxch   st(1)
c0027abc:	e9 0a ff ff ff       	jmp    c00279cb <__ieee754_rem_pio2+0x32b>
c0027ac1:	eb 0d                	jmp    c0027ad0 <__ieee754_rem_pio2+0x430>
c0027ac3:	90                   	nop
c0027ac4:	90                   	nop
c0027ac5:	90                   	nop
c0027ac6:	90                   	nop
c0027ac7:	90                   	nop
c0027ac8:	90                   	nop
c0027ac9:	90                   	nop
c0027aca:	90                   	nop
c0027acb:	90                   	nop
c0027acc:	90                   	nop
c0027acd:	90                   	nop
c0027ace:	90                   	nop
c0027acf:	90                   	nop
c0027ad0:	b8 03 00 00 00       	mov    eax,0x3
c0027ad5:	e9 7e fd ff ff       	jmp    c0027858 <__ieee754_rem_pio2+0x1b8>
c0027ada:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027ae0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027ae4:	f7 d8                	neg    eax
c0027ae6:	d9 e0                	fchs   
c0027ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0027aea:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0027aee:	d9 e0                	fchs   
c0027af0:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027af3:	e9 27 fc ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027af8:	dc 05 48 f9 02 c0    	fadd   QWORD PTR ds:0xc002f948
c0027afe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0027b03:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b0b:	dd 05 50 f9 02 c0    	fld    QWORD PTR ds:0xc002f950
c0027b11:	d9 c1                	fld    st(1)
c0027b13:	d8 c1                	fadd   st,st(1)
c0027b15:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b19:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b1d:	dd 13                	fst    QWORD PTR [ebx]
c0027b1f:	de ea                	fsubp  st(2),st
c0027b21:	de c1                	faddp  st(1),st
c0027b23:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027b26:	e9 f4 fb ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027b2b:	dc 05 38 f9 02 c0    	fadd   QWORD PTR ds:0xc002f938
c0027b31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027b36:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b3a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b3e:	dd 05 40 f9 02 c0    	fld    QWORD PTR ds:0xc002f940
c0027b44:	d9 c1                	fld    st(1)
c0027b46:	d8 c1                	fadd   st,st(1)
c0027b48:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b4c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b50:	dd 13                	fst    QWORD PTR [ebx]
c0027b52:	de ea                	fsubp  st(2),st
c0027b54:	de c1                	faddp  st(1),st
c0027b56:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027b59:	e9 c1 fb ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027b5e:	dc 05 58 f9 02 c0    	fadd   QWORD PTR ds:0xc002f958
c0027b64:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0027b69:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b6d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b71:	db 2d a0 f9 02 c0    	fld    TBYTE PTR ds:0xc002f9a0
c0027b77:	d9 c1                	fld    st(1)
c0027b79:	d8 c1                	fadd   st,st(1)
c0027b7b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027b7f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027b83:	dd 13                	fst    QWORD PTR [ebx]
c0027b85:	de ea                	fsubp  st(2),st
c0027b87:	de c1                	faddp  st(1),st
c0027b89:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027b8c:	e9 8e fb ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027b91:	dc 05 60 f9 02 c0    	fadd   QWORD PTR ds:0xc002f960
c0027b97:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0027b9c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027ba0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027ba4:	dd 05 68 f9 02 c0    	fld    QWORD PTR ds:0xc002f968
c0027baa:	d9 c1                	fld    st(1)
c0027bac:	d8 c1                	fadd   st,st(1)
c0027bae:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027bb2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027bb6:	dd 13                	fst    QWORD PTR [ebx]
c0027bb8:	de ea                	fsubp  st(2),st
c0027bba:	de c1                	faddp  st(1),st
c0027bbc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027bbf:	e9 5b fb ff ff       	jmp    c002771f <__ieee754_rem_pio2+0x7f>
c0027bc4:	66 90                	xchg   ax,ax
c0027bc6:	66 90                	xchg   ax,ax
c0027bc8:	66 90                	xchg   ax,ax
c0027bca:	66 90                	xchg   ax,ax
c0027bcc:	66 90                	xchg   ax,ax
c0027bce:	66 90                	xchg   ax,ax

c0027bd0 <__kernel_cos>:
c0027bd0:	83 ec 0c             	sub    esp,0xc
c0027bd3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027bd7:	d9 c0                	fld    st(0)
c0027bd9:	d8 c9                	fmul   st,st(1)
c0027bdb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027bde:	dd 04 24             	fld    QWORD PTR [esp]
c0027be1:	d9 c0                	fld    st(0)
c0027be3:	d8 c9                	fmul   st,st(1)
c0027be5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027be8:	dd 04 24             	fld    QWORD PTR [esp]
c0027beb:	d9 c1                	fld    st(1)
c0027bed:	d8 0d ac f6 02 c0    	fmul   DWORD PTR ds:0xc002f6ac
c0027bf3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027bf6:	dd 04 24             	fld    QWORD PTR [esp]
c0027bf9:	d9 e8                	fld1   
c0027bfb:	d9 c0                	fld    st(0)
c0027bfd:	d8 e2                	fsub   st,st(2)
c0027bff:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027c02:	dd 04 24             	fld    QWORD PTR [esp]
c0027c05:	d9 c4                	fld    st(4)
c0027c07:	dc 0d b8 f9 02 c0    	fmul   QWORD PTR ds:0xc002f9b8
c0027c0d:	dc 05 c0 f9 02 c0    	fadd   QWORD PTR ds:0xc002f9c0
c0027c13:	d8 cd                	fmul   st,st(5)
c0027c15:	dc 25 c8 f9 02 c0    	fsub   QWORD PTR ds:0xc002f9c8
c0027c1b:	d9 cc                	fxch   st(4)
c0027c1d:	d8 c8                	fmul   st,st(0)
c0027c1f:	de cc                	fmulp  st(4),st
c0027c21:	d9 c4                	fld    st(4)
c0027c23:	dc 0d d0 f9 02 c0    	fmul   QWORD PTR ds:0xc002f9d0
c0027c29:	dc 25 d8 f9 02 c0    	fsub   QWORD PTR ds:0xc002f9d8
c0027c2f:	d8 cd                	fmul   st,st(5)
c0027c31:	dc 05 e0 f9 02 c0    	fadd   QWORD PTR ds:0xc002f9e0
c0027c37:	d8 cd                	fmul   st,st(5)
c0027c39:	de c4                	faddp  st(4),st
c0027c3b:	d9 cb                	fxch   st(3)
c0027c3d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027c40:	dd 04 24             	fld    QWORD PTR [esp]
c0027c43:	de cc                	fmulp  st(4),st
c0027c45:	d9 cc                	fxch   st(4)
c0027c47:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0027c4b:	de eb                	fsubp  st(3),st
c0027c4d:	d9 cb                	fxch   st(3)
c0027c4f:	d8 e1                	fsub   st,st(1)
c0027c51:	de e3                	fsubrp st(3),st
c0027c53:	d9 c9                	fxch   st(1)
c0027c55:	de c2                	faddp  st(2),st
c0027c57:	de c1                	faddp  st(1),st
c0027c59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027c5c:	dd 04 24             	fld    QWORD PTR [esp]
c0027c5f:	83 c4 0c             	add    esp,0xc
c0027c62:	c3                   	ret    
c0027c63:	66 90                	xchg   ax,ax
c0027c65:	66 90                	xchg   ax,ax
c0027c67:	66 90                	xchg   ax,ax
c0027c69:	66 90                	xchg   ax,ax
c0027c6b:	66 90                	xchg   ax,ax
c0027c6d:	66 90                	xchg   ax,ax
c0027c6f:	90                   	nop

c0027c70 <__kernel_rem_pio2>:
c0027c70:	55                   	push   ebp
c0027c71:	57                   	push   edi
c0027c72:	56                   	push   esi
c0027c73:	53                   	push   ebx
c0027c74:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0027c7a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027c81:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0027c88:	8b 04 85 c8 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb38]
c0027c8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027c93:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027c9a:	48                   	dec    eax
c0027c9b:	83 fb ec             	cmp    ebx,0xffffffec
c0027c9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027ca2:	0f 8c 44 08 00 00    	jl     c00284ec <__kernel_rem_pio2+0x87c>
c0027ca8:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0027cab:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0027cb0:	89 c8                	mov    eax,ecx
c0027cb2:	f7 ea                	imul   edx
c0027cb4:	c1 f9 1f             	sar    ecx,0x1f
c0027cb7:	c1 fa 02             	sar    edx,0x2
c0027cba:	29 ca                	sub    edx,ecx
c0027cbc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027cc0:	8d 42 01             	lea    eax,[edx+0x1]
c0027cc3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0027cca:	29 d0                	sub    eax,edx
c0027ccc:	c1 e0 03             	shl    eax,0x3
c0027ccf:	01 d8                	add    eax,ebx
c0027cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027cd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0027cd9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027ce1:	29 c2                	sub    edx,eax
c0027ce3:	01 c6                	add    esi,eax
c0027ce5:	78 58                	js     c0027d3f <__kernel_rem_pio2+0xcf>
c0027ce7:	85 d2                	test   edx,edx
c0027ce9:	0f 89 f4 04 00 00    	jns    c00281e3 <__kernel_rem_pio2+0x573>
c0027cef:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0027cf3:	b8 00 00 00 00       	mov    eax,0x0
c0027cf8:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0027cff:	85 db                	test   ebx,ebx
c0027d01:	0f 4f d8             	cmovg  ebx,eax
c0027d04:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027d0a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027d10:	d9 ee                	fldz   
c0027d12:	42                   	inc    edx
c0027d13:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0027d16:	40                   	inc    eax
c0027d17:	39 da                	cmp    edx,ebx
c0027d19:	7c f5                	jl     c0027d10 <__kernel_rem_pio2+0xa0>
c0027d1b:	39 c6                	cmp    esi,eax
c0027d1d:	7c 20                	jl     c0027d3f <__kernel_rem_pio2+0xcf>
c0027d1f:	29 c2                	sub    edx,eax
c0027d21:	c1 e2 02             	shl    edx,0x2
c0027d24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027d2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027d30:	db 84 82 00 fa 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd0600]
c0027d37:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0027d3a:	40                   	inc    eax
c0027d3b:	39 c6                	cmp    esi,eax
c0027d3d:	7d f1                	jge    c0027d30 <__kernel_rem_pio2+0xc0>
c0027d3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027d43:	85 c0                	test   eax,eax
c0027d45:	78 7c                	js     c0027dc3 <__kernel_rem_pio2+0x153>
c0027d47:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0027d4e:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027d55:	31 db                	xor    ebx,ebx
c0027d57:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0027d5e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0027d65:	c1 e0 03             	shl    eax,0x3
c0027d68:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0027d6f:	01 c1                	add    ecx,eax
c0027d71:	eb 0d                	jmp    c0027d80 <__kernel_rem_pio2+0x110>
c0027d73:	90                   	nop
c0027d74:	90                   	nop
c0027d75:	90                   	nop
c0027d76:	90                   	nop
c0027d77:	90                   	nop
c0027d78:	90                   	nop
c0027d79:	90                   	nop
c0027d7a:	90                   	nop
c0027d7b:	90                   	nop
c0027d7c:	90                   	nop
c0027d7d:	90                   	nop
c0027d7e:	90                   	nop
c0027d7f:	90                   	nop
c0027d80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027d84:	85 c0                	test   eax,eax
c0027d86:	0f 88 65 04 00 00    	js     c00281f1 <__kernel_rem_pio2+0x581>
c0027d8c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027d93:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0027d96:	d9 ee                	fldz   
c0027d98:	90                   	nop
c0027d99:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027da0:	dd 02                	fld    QWORD PTR [edx]
c0027da2:	83 c0 08             	add    eax,0x8
c0027da5:	83 ea 08             	sub    edx,0x8
c0027da8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0027dab:	39 c1                	cmp    ecx,eax
c0027dad:	de c1                	faddp  st(1),st
c0027daf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027db3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027db7:	75 e7                	jne    c0027da0 <__kernel_rem_pio2+0x130>
c0027db9:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0027dbc:	83 c3 08             	add    ebx,0x8
c0027dbf:	39 dd                	cmp    ebp,ebx
c0027dc1:	75 bd                	jne    c0027d80 <__kernel_rem_pio2+0x110>
c0027dc3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027dc7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0027dcb:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0027dd2:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0027dd6:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0027dda:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c0027dde:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0027de5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ded:	c1 e0 02             	shl    eax,0x2
c0027df0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0027df4:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027dfb:	8d 1c f8             	lea    ebx,[eax+edi*8]
c0027dfe:	b8 18 00 00 00       	mov    eax,0x18
c0027e03:	29 e8                	sub    eax,ebp
c0027e05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027e09:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027e10:	85 f6                	test   esi,esi
c0027e12:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0027e19:	7e 6a                	jle    c0027e85 <__kernel_rem_pio2+0x215>
c0027e1b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027e1f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0027e26:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c0027e2a:	8d 54 24 50          	lea    edx,[esp+0x50]
c0027e2e:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0027e33:	66 81 c9 00 0c       	or     cx,0xc00
c0027e38:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c0027e3d:	eb 03                	jmp    c0027e42 <__kernel_rem_pio2+0x1d2>
c0027e3f:	90                   	nop
c0027e40:	89 c8                	mov    eax,ecx
c0027e42:	83 c2 04             	add    edx,0x4
c0027e45:	d9 c0                	fld    st(0)
c0027e47:	d8 0d dc 04 03 c0    	fmul   DWORD PTR ds:0xc00304dc
c0027e4d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0027e50:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027e54:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0027e58:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027e5c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0027e60:	d9 c0                	fld    st(0)
c0027e62:	d8 0d b4 f9 02 c0    	fmul   DWORD PTR ds:0xc002f9b4
c0027e68:	de ea                	fsubp  st(2),st
c0027e6a:	d9 c9                	fxch   st(1)
c0027e6c:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027e70:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0027e73:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027e77:	39 c5                	cmp    ebp,eax
c0027e79:	dc 00                	fadd   QWORD PTR [eax]
c0027e7b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027e7f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027e83:	75 bb                	jne    c0027e40 <__kernel_rem_pio2+0x1d0>
c0027e85:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027e89:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027e8c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0027e90:	e8 f7 f7 ff ff       	call   c002768c <ldexp>
c0027e95:	d9 c0                	fld    st(0)
c0027e97:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c0027e9b:	d8 0d e0 04 03 c0    	fmul   DWORD PTR ds:0xc00304e0
c0027ea1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027ea4:	e8 8b f7 ff ff       	call   c0027634 <floor>
c0027ea9:	d9 05 e4 04 03 c0    	fld    DWORD PTR ds:0xc00304e4
c0027eaf:	de c9                	fmulp  st(1),st
c0027eb1:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027eb5:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0027eb9:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0027ebe:	de e1                	fsubrp st(1),st
c0027ec0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027ec4:	66 0d 00 0c          	or     ax,0xc00
c0027ec8:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0027ecd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027ed1:	85 ff                	test   edi,edi
c0027ed3:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027ed7:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c0027edb:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027edf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0027ee3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027ee7:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c0027eeb:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0027eef:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0027ef3:	de e9                	fsubp  st(1),st
c0027ef5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027ef9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027efd:	0f 8e 2d 01 00 00    	jle    c0028030 <__kernel_rem_pio2+0x3c0>
c0027f03:	8d 7e ff             	lea    edi,[esi-0x1]
c0027f06:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c0027f0b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c0027f0f:	89 c2                	mov    edx,eax
c0027f11:	d3 fa                	sar    edx,cl
c0027f13:	01 d5                	add    ebp,edx
c0027f15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0027f19:	d3 e2                	shl    edx,cl
c0027f1b:	b9 17 00 00 00       	mov    ecx,0x17
c0027f20:	29 d0                	sub    eax,edx
c0027f22:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0027f26:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027f2a:	29 f9                	sub    ecx,edi
c0027f2c:	d3 f8                	sar    eax,cl
c0027f2e:	89 c5                	mov    ebp,eax
c0027f30:	85 ed                	test   ebp,ebp
c0027f32:	0f 8f 0e 01 00 00    	jg     c0028046 <__kernel_rem_pio2+0x3d6>
c0027f38:	d9 ee                	fldz   
c0027f3a:	d9 c9                	fxch   st(1)
c0027f3c:	db e9                	fucomi st,st(1)
c0027f3e:	dd d9                	fstp   st(1)
c0027f40:	0f 8a a2 01 00 00    	jp     c00280e8 <__kernel_rem_pio2+0x478>
c0027f46:	0f 85 9c 01 00 00    	jne    c00280e8 <__kernel_rem_pio2+0x478>
c0027f4c:	dd d8                	fstp   st(0)
c0027f4e:	8d 7e ff             	lea    edi,[esi-0x1]
c0027f51:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0027f55:	7f 2a                	jg     c0027f81 <__kernel_rem_pio2+0x311>
c0027f57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027f5b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c0027f5f:	31 d2                	xor    edx,edx
c0027f61:	eb 0d                	jmp    c0027f70 <__kernel_rem_pio2+0x300>
c0027f63:	90                   	nop
c0027f64:	90                   	nop
c0027f65:	90                   	nop
c0027f66:	90                   	nop
c0027f67:	90                   	nop
c0027f68:	90                   	nop
c0027f69:	90                   	nop
c0027f6a:	90                   	nop
c0027f6b:	90                   	nop
c0027f6c:	90                   	nop
c0027f6d:	90                   	nop
c0027f6e:	90                   	nop
c0027f6f:	90                   	nop
c0027f70:	0b 10                	or     edx,DWORD PTR [eax]
c0027f72:	83 e8 04             	sub    eax,0x4
c0027f75:	39 c1                	cmp    ecx,eax
c0027f77:	75 f7                	jne    c0027f70 <__kernel_rem_pio2+0x300>
c0027f79:	85 d2                	test   edx,edx
c0027f7b:	0f 85 85 02 00 00    	jne    c0028206 <__kernel_rem_pio2+0x596>
c0027f81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f85:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0027f89:	85 c9                	test   ecx,ecx
c0027f8b:	0f 85 48 02 00 00    	jne    c00281d9 <__kernel_rem_pio2+0x569>
c0027f91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027f95:	bf 01 00 00 00       	mov    edi,0x1
c0027f9a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027fa0:	83 e8 04             	sub    eax,0x4
c0027fa3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027fa6:	47                   	inc    edi
c0027fa7:	85 d2                	test   edx,edx
c0027fa9:	74 f5                	je     c0027fa0 <__kernel_rem_pio2+0x330>
c0027fab:	8d 4e 01             	lea    ecx,[esi+0x1]
c0027fae:	01 f7                	add    edi,esi
c0027fb0:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027fb7:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0027fbe:	01 c6                	add    esi,eax
c0027fc0:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0027fc7:	89 f6                	mov    esi,esi
c0027fc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fd4:	db 84 88 00 fa 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd0600]
c0027fdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027fdf:	85 c0                	test   eax,eax
c0027fe1:	dd 1e                	fstp   QWORD PTR [esi]
c0027fe3:	78 3b                	js     c0028020 <__kernel_rem_pio2+0x3b0>
c0027fe5:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027fec:	d9 ee                	fldz   
c0027fee:	89 f2                	mov    edx,esi
c0027ff0:	dd 02                	fld    QWORD PTR [edx]
c0027ff2:	83 c0 08             	add    eax,0x8
c0027ff5:	83 ea 08             	sub    edx,0x8
c0027ff8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0027ffb:	39 c3                	cmp    ebx,eax
c0027ffd:	de c1                	faddp  st(1),st
c0027fff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028003:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028007:	75 e7                	jne    c0027ff0 <__kernel_rem_pio2+0x380>
c0028009:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002800d:	41                   	inc    ecx
c002800e:	83 c6 08             	add    esi,0x8
c0028011:	39 cf                	cmp    edi,ecx
c0028013:	7d bb                	jge    c0027fd0 <__kernel_rem_pio2+0x360>
c0028015:	89 fe                	mov    esi,edi
c0028017:	e9 f4 fd ff ff       	jmp    c0027e10 <__kernel_rem_pio2+0x1a0>
c002801c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0028020:	d9 ee                	fldz   
c0028022:	83 c6 08             	add    esi,0x8
c0028025:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c0028029:	41                   	inc    ecx
c002802a:	39 cf                	cmp    edi,ecx
c002802c:	7d a2                	jge    c0027fd0 <__kernel_rem_pio2+0x360>
c002802e:	eb e5                	jmp    c0028015 <__kernel_rem_pio2+0x3a5>
c0028030:	0f 85 8a 01 00 00    	jne    c00281c0 <__kernel_rem_pio2+0x550>
c0028036:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c002803a:	c1 fd 17             	sar    ebp,0x17
c002803d:	85 ed                	test   ebp,ebp
c002803f:	90                   	nop
c0028040:	0f 8e f2 fe ff ff    	jle    c0027f38 <__kernel_rem_pio2+0x2c8>
c0028046:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c002804a:	85 f6                	test   esi,esi
c002804c:	0f 8e d3 04 00 00    	jle    c0028525 <__kernel_rem_pio2+0x8b5>
c0028052:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0028056:	85 d2                	test   edx,edx
c0028058:	0f 85 12 01 00 00    	jne    c0028170 <__kernel_rem_pio2+0x500>
c002805e:	83 fe 01             	cmp    esi,0x1
c0028061:	b9 01 00 00 00       	mov    ecx,0x1
c0028066:	74 15                	je     c002807d <__kernel_rem_pio2+0x40d>
c0028068:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c002806c:	8d 41 01             	lea    eax,[ecx+0x1]
c002806f:	85 d2                	test   edx,edx
c0028071:	0f 85 00 01 00 00    	jne    c0028177 <__kernel_rem_pio2+0x507>
c0028077:	39 c6                	cmp    esi,eax
c0028079:	89 c1                	mov    ecx,eax
c002807b:	75 eb                	jne    c0028068 <__kernel_rem_pio2+0x3f8>
c002807d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028081:	85 c0                	test   eax,eax
c0028083:	7e 16                	jle    c002809b <__kernel_rem_pio2+0x42b>
c0028085:	83 f8 01             	cmp    eax,0x1
c0028088:	0f 84 51 04 00 00    	je     c00284df <__kernel_rem_pio2+0x86f>
c002808e:	83 f8 02             	cmp    eax,0x2
c0028091:	75 08                	jne    c002809b <__kernel_rem_pio2+0x42b>
c0028093:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002809b:	83 fd 02             	cmp    ebp,0x2
c002809e:	0f 85 94 fe ff ff    	jne    c0027f38 <__kernel_rem_pio2+0x2c8>
c00280a4:	d9 e8                	fld1   
c00280a6:	85 d2                	test   edx,edx
c00280a8:	de e1                	fsubrp st(1),st
c00280aa:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00280ae:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00280b2:	0f 84 80 fe ff ff    	je     c0027f38 <__kernel_rem_pio2+0x2c8>
c00280b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00280bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00280c0:	d9 e8                	fld1   
c00280c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00280c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00280c9:	e8 be f5 ff ff       	call   c002768c <ldexp>
c00280ce:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00280d2:	de e1                	fsubrp st(1),st
c00280d4:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00280d8:	d9 ee                	fldz   
c00280da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00280de:	db e9                	fucomi st,st(1)
c00280e0:	dd d9                	fstp   st(1)
c00280e2:	0f 8b 5e fe ff ff    	jnp    c0027f46 <__kernel_rem_pio2+0x2d6>
c00280e8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00280ec:	dd 1c 24             	fstp   QWORD PTR [esp]
c00280ef:	89 d8                	mov    eax,ebx
c00280f1:	f7 d8                	neg    eax
c00280f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00280f7:	e8 90 f5 ff ff       	call   c002768c <ldexp>
c00280fc:	d9 05 b4 f9 02 c0    	fld    DWORD PTR ds:0xc002f9b4
c0028102:	d9 c9                	fxch   st(1)
c0028104:	db f1                	fcomi  st,st(1)
c0028106:	dd d9                	fstp   st(1)
c0028108:	0f 82 94 04 00 00    	jb     c00285a2 <__kernel_rem_pio2+0x932>
c002810e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0028112:	83 c3 18             	add    ebx,0x18
c0028115:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0028119:	d9 c0                	fld    st(0)
c002811b:	d8 0d dc 04 03 c0    	fmul   DWORD PTR ds:0xc00304dc
c0028121:	8d 7e 01             	lea    edi,[esi+0x1]
c0028124:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0028129:	66 0d 00 0c          	or     ax,0xc00
c002812d:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0028132:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0028136:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c002813a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002813e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0028142:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028146:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c002814a:	d8 0d b4 f9 02 c0    	fmul   DWORD PTR ds:0xc002f9b4
c0028150:	de e9                	fsubp  st(1),st
c0028152:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0028156:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002815a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002815e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0028162:	89 d8                	mov    eax,ebx
c0028164:	e9 be 00 00 00       	jmp    c0028227 <__kernel_rem_pio2+0x5b7>
c0028169:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0028170:	b8 01 00 00 00       	mov    eax,0x1
c0028175:	31 c9                	xor    ecx,ecx
c0028177:	bf 00 00 00 01       	mov    edi,0x1000000
c002817c:	29 d7                	sub    edi,edx
c002817e:	39 c6                	cmp    esi,eax
c0028180:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0028184:	7e 30                	jle    c00281b6 <__kernel_rem_pio2+0x546>
c0028186:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002818a:	ba ff ff ff 00       	mov    edx,0xffffff
c002818f:	29 ca                	sub    edx,ecx
c0028191:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0028195:	40                   	inc    eax
c0028196:	39 c6                	cmp    esi,eax
c0028198:	7e 1c                	jle    c00281b6 <__kernel_rem_pio2+0x546>
c002819a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002819e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c00281a3:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c00281a7:	89 ca                	mov    edx,ecx
c00281a9:	83 c0 04             	add    eax,0x4
c00281ac:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c00281af:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00281b2:	39 c7                	cmp    edi,eax
c00281b4:	75 f1                	jne    c00281a7 <__kernel_rem_pio2+0x537>
c00281b6:	ba 01 00 00 00       	mov    edx,0x1
c00281bb:	e9 bd fe ff ff       	jmp    c002807d <__kernel_rem_pio2+0x40d>
c00281c0:	d9 05 ac f6 02 c0    	fld    DWORD PTR ds:0xc002f6ac
c00281c6:	d9 c9                	fxch   st(1)
c00281c8:	db f1                	fcomi  st,st(1)
c00281ca:	dd d9                	fstp   st(1)
c00281cc:	0f 83 2a 03 00 00    	jae    c00284fc <__kernel_rem_pio2+0x88c>
c00281d2:	31 ed                	xor    ebp,ebp
c00281d4:	e9 5f fd ff ff       	jmp    c0027f38 <__kernel_rem_pio2+0x2c8>
c00281d9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00281dc:	89 cf                	mov    edi,ecx
c00281de:	e9 cd fd ff ff       	jmp    c0027fb0 <__kernel_rem_pio2+0x340>
c00281e3:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c00281ea:	31 c0                	xor    eax,eax
c00281ec:	e9 2e fb ff ff       	jmp    c0027d1f <__kernel_rem_pio2+0xaf>
c00281f1:	d9 ee                	fldz   
c00281f3:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c00281f6:	83 c3 08             	add    ebx,0x8
c00281f9:	39 dd                	cmp    ebp,ebx
c00281fb:	0f 85 7f fb ff ff    	jne    c0027d80 <__kernel_rem_pio2+0x110>
c0028201:	e9 bd fb ff ff       	jmp    c0027dc3 <__kernel_rem_pio2+0x153>
c0028206:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002820a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002820f:	85 db                	test   ebx,ebx
c0028211:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028215:	75 10                	jne    c0028227 <__kernel_rem_pio2+0x5b7>
c0028217:	4f                   	dec    edi
c0028218:	83 e8 18             	sub    eax,0x18
c002821b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c002821f:	85 c9                	test   ecx,ecx
c0028221:	74 f4                	je     c0028217 <__kernel_rem_pio2+0x5a7>
c0028223:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0028227:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002822b:	d9 e8                	fld1   
c002822d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028230:	e8 57 f4 ff ff       	call   c002768c <ldexp>
c0028235:	85 ff                	test   edi,edi
c0028237:	0f 88 d2 03 00 00    	js     c002860f <__kernel_rem_pio2+0x99f>
c002823d:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0028244:	89 f8                	mov    eax,edi
c0028246:	8d 76 00             	lea    esi,[esi+0x0]
c0028249:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0028250:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0028254:	d8 c9                	fmul   st,st(1)
c0028256:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0028259:	48                   	dec    eax
c002825a:	d8 0d dc 04 03 c0    	fmul   DWORD PTR ds:0xc00304dc
c0028260:	83 f8 ff             	cmp    eax,0xffffffff
c0028263:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028267:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002826b:	75 e3                	jne    c0028250 <__kernel_rem_pio2+0x5e0>
c002826d:	dd d8                	fstp   st(0)
c002826f:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0028276:	31 d2                	xor    edx,edx
c0028278:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002827c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028280:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0028287:	01 f0                	add    eax,esi
c0028289:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c002828d:	eb 03                	jmp    c0028292 <__kernel_rem_pio2+0x622>
c002828f:	90                   	nop
c0028290:	89 e8                	mov    eax,ebp
c0028292:	85 db                	test   ebx,ebx
c0028294:	0f 88 84 02 00 00    	js     c002851e <__kernel_rem_pio2+0x8ae>
c002829a:	d9 05 fc 04 03 c0    	fld    DWORD PTR ds:0xc00304fc
c00282a0:	dc 08                	fmul   QWORD PTR [eax]
c00282a2:	d8 05 d8 04 03 c0    	fadd   DWORD PTR ds:0xc00304d8
c00282a8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00282ac:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00282b0:	0f 84 d9 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c00282b6:	85 d2                	test   edx,edx
c00282b8:	0f 84 d1 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c00282be:	d9 05 e8 04 03 c0    	fld    DWORD PTR ds:0xc00304e8
c00282c4:	83 fb 01             	cmp    ebx,0x1
c00282c7:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c00282ca:	de c1                	faddp  st(1),st
c00282cc:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00282d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00282d4:	0f 84 b5 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c00282da:	83 fa 01             	cmp    edx,0x1
c00282dd:	0f 84 ac 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c00282e3:	d9 05 ec 04 03 c0    	fld    DWORD PTR ds:0xc00304ec
c00282e9:	83 fb 02             	cmp    ebx,0x2
c00282ec:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c00282ef:	de c1                	faddp  st(1),st
c00282f1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00282f5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00282f9:	0f 84 90 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c00282ff:	83 fa 02             	cmp    edx,0x2
c0028302:	0f 84 87 00 00 00    	je     c002838f <__kernel_rem_pio2+0x71f>
c0028308:	d9 05 f0 04 03 c0    	fld    DWORD PTR ds:0xc00304f0
c002830e:	83 fb 03             	cmp    ebx,0x3
c0028311:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0028314:	de c1                	faddp  st(1),st
c0028316:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002831a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002831e:	74 6f                	je     c002838f <__kernel_rem_pio2+0x71f>
c0028320:	83 fa 03             	cmp    edx,0x3
c0028323:	74 6a                	je     c002838f <__kernel_rem_pio2+0x71f>
c0028325:	d9 05 f4 04 03 c0    	fld    DWORD PTR ds:0xc00304f4
c002832b:	83 fb 04             	cmp    ebx,0x4
c002832e:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0028331:	de c1                	faddp  st(1),st
c0028333:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028337:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002833b:	74 52                	je     c002838f <__kernel_rem_pio2+0x71f>
c002833d:	83 fa 04             	cmp    edx,0x4
c0028340:	74 4d                	je     c002838f <__kernel_rem_pio2+0x71f>
c0028342:	d9 05 f8 04 03 c0    	fld    DWORD PTR ds:0xc00304f8
c0028348:	83 fb 05             	cmp    ebx,0x5
c002834b:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c002834e:	de c1                	faddp  st(1),st
c0028350:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028354:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028358:	74 35                	je     c002838f <__kernel_rem_pio2+0x71f>
c002835a:	83 fa 05             	cmp    edx,0x5
c002835d:	74 30                	je     c002838f <__kernel_rem_pio2+0x71f>
c002835f:	dd 05 00 05 03 c0    	fld    QWORD PTR ds:0xc0030500
c0028365:	83 fb 06             	cmp    ebx,0x6
c0028368:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c002836b:	de c1                	faddp  st(1),st
c002836d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028371:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028375:	74 18                	je     c002838f <__kernel_rem_pio2+0x71f>
c0028377:	83 fa 06             	cmp    edx,0x6
c002837a:	74 13                	je     c002838f <__kernel_rem_pio2+0x71f>
c002837c:	dd 05 08 05 03 c0    	fld    QWORD PTR ds:0xc0030508
c0028382:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0028385:	de c1                	faddp  st(1),st
c0028387:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002838b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002838f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0028392:	42                   	inc    edx
c0028393:	8d 68 f8             	lea    ebp,[eax-0x8]
c0028396:	39 c6                	cmp    esi,eax
c0028398:	0f 85 f2 fe ff ff    	jne    c0028290 <__kernel_rem_pio2+0x620>
c002839e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c00283a6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00283aa:	7f 4f                	jg     c00283fb <__kernel_rem_pio2+0x78b>
c00283ac:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c00283b3:	85 c0                	test   eax,eax
c00283b5:	0f 8f 71 01 00 00    	jg     c002852c <__kernel_rem_pio2+0x8bc>
c00283bb:	75 2c                	jne    c00283e9 <__kernel_rem_pio2+0x779>
c00283bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00283c1:	d9 ee                	fldz   
c00283c3:	01 c8                	add    eax,ecx
c00283c5:	eb 02                	jmp    c00283c9 <__kernel_rem_pio2+0x759>
c00283c7:	89 d0                	mov    eax,edx
c00283c9:	39 c8                	cmp    eax,ecx
c00283cb:	dc 00                	fadd   QWORD PTR [eax]
c00283cd:	8d 50 f8             	lea    edx,[eax-0x8]
c00283d0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00283d4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00283d8:	75 ed                	jne    c00283c7 <__kernel_rem_pio2+0x757>
c00283da:	85 ed                	test   ebp,ebp
c00283dc:	74 02                	je     c00283e0 <__kernel_rem_pio2+0x770>
c00283de:	d9 e0                	fchs   
c00283e0:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00283e7:	dd 18                	fstp   QWORD PTR [eax]
c00283e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ed:	81 c4 8c 02 00 00    	add    esp,0x28c
c00283f3:	5b                   	pop    ebx
c00283f4:	5e                   	pop    esi
c00283f5:	83 e0 07             	and    eax,0x7
c00283f8:	5f                   	pop    edi
c00283f9:	5d                   	pop    ebp
c00283fa:	c3                   	ret    
c00283fb:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0028403:	75 e4                	jne    c00283e9 <__kernel_rem_pio2+0x779>
c0028405:	85 ff                	test   edi,edi
c0028407:	0f 8e 38 02 00 00    	jle    c0028645 <__kernel_rem_pio2+0x9d5>
c002840d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0028414:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c002841b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0028422:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0028426:	eb 02                	jmp    c002842a <__kernel_rem_pio2+0x7ba>
c0028428:	89 d0                	mov    eax,edx
c002842a:	dd 00                	fld    QWORD PTR [eax]
c002842c:	8d 50 f8             	lea    edx,[eax-0x8]
c002842f:	39 c1                	cmp    ecx,eax
c0028431:	d9 c1                	fld    st(1)
c0028433:	d9 c1                	fld    st(1)
c0028435:	de c3                	faddp  st(3),st
c0028437:	d9 ca                	fxch   st(2)
c0028439:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002843d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028441:	d9 c0                	fld    st(0)
c0028443:	dc ea                	fsub   st(2),st
c0028445:	d9 ca                	fxch   st(2)
c0028447:	de c3                	faddp  st(3),st
c0028449:	d9 ca                	fxch   st(2)
c002844b:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002844e:	d9 c9                	fxch   st(1)
c0028450:	dd 18                	fstp   QWORD PTR [eax]
c0028452:	75 d4                	jne    c0028428 <__kernel_rem_pio2+0x7b8>
c0028454:	dd d8                	fstp   st(0)
c0028456:	83 ff 01             	cmp    edi,0x1
c0028459:	0f 8e e6 01 00 00    	jle    c0028645 <__kernel_rem_pio2+0x9d5>
c002845f:	c1 e7 03             	shl    edi,0x3
c0028462:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0028466:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c002846d:	eb 02                	jmp    c0028471 <__kernel_rem_pio2+0x801>
c002846f:	89 d0                	mov    eax,edx
c0028471:	dd 00                	fld    QWORD PTR [eax]
c0028473:	8d 50 f8             	lea    edx,[eax-0x8]
c0028476:	d9 c1                	fld    st(1)
c0028478:	39 d1                	cmp    ecx,edx
c002847a:	d9 c1                	fld    st(1)
c002847c:	de c3                	faddp  st(3),st
c002847e:	d9 ca                	fxch   st(2)
c0028480:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028484:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028488:	d9 c0                	fld    st(0)
c002848a:	dc ea                	fsub   st(2),st
c002848c:	d9 ca                	fxch   st(2)
c002848e:	de c3                	faddp  st(3),st
c0028490:	d9 ca                	fxch   st(2)
c0028492:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0028495:	d9 c9                	fxch   st(1)
c0028497:	dd 18                	fstp   QWORD PTR [eax]
c0028499:	75 d4                	jne    c002846f <__kernel_rem_pio2+0x7ff>
c002849b:	dd d8                	fstp   st(0)
c002849d:	d9 ee                	fldz   
c002849f:	01 f9                	add    ecx,edi
c00284a1:	83 e9 08             	sub    ecx,0x8
c00284a4:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c00284a7:	39 c8                	cmp    eax,ecx
c00284a9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00284ad:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00284b1:	75 ee                	jne    c00284a1 <__kernel_rem_pio2+0x831>
c00284b3:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c00284ba:	85 ed                	test   ebp,ebp
c00284bc:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c00284c3:	0f 85 02 01 00 00    	jne    c00285cb <__kernel_rem_pio2+0x95b>
c00284c9:	d9 c9                	fxch   st(1)
c00284cb:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00284d2:	dd 18                	fstp   QWORD PTR [eax]
c00284d4:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00284d7:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c00284da:	e9 0a ff ff ff       	jmp    c00283e9 <__kernel_rem_pio2+0x779>
c00284df:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c00284e7:	e9 af fb ff ff       	jmp    c002809b <__kernel_rem_pio2+0x42b>
c00284ec:	31 d2                	xor    edx,edx
c00284ee:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c00284f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00284f7:	e9 d3 f7 ff ff       	jmp    c0027ccf <__kernel_rem_pio2+0x5f>
c00284fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0028500:	85 f6                	test   esi,esi
c0028502:	bd 02 00 00 00       	mov    ebp,0x2
c0028507:	0f 8f 45 fb ff ff    	jg     c0028052 <__kernel_rem_pio2+0x3e2>
c002850d:	d9 e8                	fld1   
c002850f:	de e1                	fsubrp st(1),st
c0028511:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028515:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028519:	e9 1a fa ff ff       	jmp    c0027f38 <__kernel_rem_pio2+0x2c8>
c002851e:	d9 ee                	fldz   
c0028520:	e9 6a fe ff ff       	jmp    c002838f <__kernel_rem_pio2+0x71f>
c0028525:	31 d2                	xor    edx,edx
c0028527:	e9 51 fb ff ff       	jmp    c002807d <__kernel_rem_pio2+0x40d>
c002852c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028530:	d9 ee                	fldz   
c0028532:	01 c8                	add    eax,ecx
c0028534:	eb 02                	jmp    c0028538 <__kernel_rem_pio2+0x8c8>
c0028536:	89 d0                	mov    eax,edx
c0028538:	39 c8                	cmp    eax,ecx
c002853a:	dc 00                	fadd   QWORD PTR [eax]
c002853c:	8d 50 f8             	lea    edx,[eax-0x8]
c002853f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028543:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028547:	75 ed                	jne    c0028536 <__kernel_rem_pio2+0x8c6>
c0028549:	d9 c0                	fld    st(0)
c002854b:	85 ed                	test   ebp,ebp
c002854d:	0f 85 94 00 00 00    	jne    c00285e7 <__kernel_rem_pio2+0x977>
c0028553:	d9 c9                	fxch   st(1)
c0028555:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002855c:	85 ff                	test   edi,edi
c002855e:	dd 18                	fstp   QWORD PTR [eax]
c0028560:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0028567:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002856b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002856f:	7e 22                	jle    c0028593 <__kernel_rem_pio2+0x923>
c0028571:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0028578:	8d 14 f8             	lea    edx,[eax+edi*8]
c002857b:	83 c0 08             	add    eax,0x8
c002857e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0028581:	39 d0                	cmp    eax,edx
c0028583:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028587:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002858b:	75 ee                	jne    c002857b <__kernel_rem_pio2+0x90b>
c002858d:	85 ed                	test   ebp,ebp
c002858f:	74 02                	je     c0028593 <__kernel_rem_pio2+0x923>
c0028591:	d9 e0                	fchs   
c0028593:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002859a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002859d:	e9 47 fe ff ff       	jmp    c00283e9 <__kernel_rem_pio2+0x779>
c00285a2:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00285a6:	89 f7                	mov    edi,esi
c00285a8:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00285ad:	66 0d 00 0c          	or     ax,0xc00
c00285b1:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00285b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00285ba:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00285be:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00285c2:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00285c6:	e9 5c fc ff ff       	jmp    c0028227 <__kernel_rem_pio2+0x5b7>
c00285cb:	d9 c9                	fxch   st(1)
c00285cd:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00285d4:	d9 e0                	fchs   
c00285d6:	dd 18                	fstp   QWORD PTR [eax]
c00285d8:	d9 e0                	fchs   
c00285da:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00285dd:	d9 e0                	fchs   
c00285df:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c00285e2:	e9 02 fe ff ff       	jmp    c00283e9 <__kernel_rem_pio2+0x779>
c00285e7:	d9 c9                	fxch   st(1)
c00285e9:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00285f0:	d9 e0                	fchs   
c00285f2:	85 ff                	test   edi,edi
c00285f4:	dd 18                	fstp   QWORD PTR [eax]
c00285f6:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c00285fd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028601:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028605:	0f 8f 66 ff ff ff    	jg     c0028571 <__kernel_rem_pio2+0x901>
c002860b:	d9 e0                	fchs   
c002860d:	eb 84                	jmp    c0028593 <__kernel_rem_pio2+0x923>
c002860f:	dd d8                	fstp   st(0)
c0028611:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0028619:	0f 8f dc fd ff ff    	jg     c00283fb <__kernel_rem_pio2+0x78b>
c002861f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0028626:	85 d2                	test   edx,edx
c0028628:	7f 0d                	jg     c0028637 <__kernel_rem_pio2+0x9c7>
c002862a:	0f 85 b9 fd ff ff    	jne    c00283e9 <__kernel_rem_pio2+0x779>
c0028630:	d9 ee                	fldz   
c0028632:	e9 a3 fd ff ff       	jmp    c00283da <__kernel_rem_pio2+0x76a>
c0028637:	d9 ee                	fldz   
c0028639:	d9 ee                	fldz   
c002863b:	90                   	nop
c002863c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0028640:	e9 06 ff ff ff       	jmp    c002854b <__kernel_rem_pio2+0x8db>
c0028645:	d9 ee                	fldz   
c0028647:	e9 67 fe ff ff       	jmp    c00284b3 <__kernel_rem_pio2+0x843>
c002864c:	66 90                	xchg   ax,ax
c002864e:	66 90                	xchg   ax,ax

c0028650 <__kernel_sin>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0028657:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002865b:	d9 c0                	fld    st(0)
c002865d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028661:	d8 c9                	fmul   st,st(1)
c0028663:	85 c0                	test   eax,eax
c0028665:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028668:	dd 04 24             	fld    QWORD PTR [esp]
c002866b:	d9 c1                	fld    st(1)
c002866d:	d8 c9                	fmul   st,st(1)
c002866f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028672:	dd 04 24             	fld    QWORD PTR [esp]
c0028675:	d9 c1                	fld    st(1)
c0028677:	d8 ca                	fmul   st,st(2)
c0028679:	dd 1c 24             	fstp   QWORD PTR [esp]
c002867c:	dd 04 24             	fld    QWORD PTR [esp]
c002867f:	d8 ca                	fmul   st,st(2)
c0028681:	d9 c2                	fld    st(2)
c0028683:	dc 0d 10 05 03 c0    	fmul   QWORD PTR ds:0xc0030510
c0028689:	dc 25 18 05 03 c0    	fsub   QWORD PTR ds:0xc0030518
c002868f:	de c9                	fmulp  st(1),st
c0028691:	d9 c2                	fld    st(2)
c0028693:	dc 0d 20 05 03 c0    	fmul   QWORD PTR ds:0xc0030520
c0028699:	dc 25 28 05 03 c0    	fsub   QWORD PTR ds:0xc0030528
c002869f:	d8 cb                	fmul   st,st(3)
c00286a1:	dc 05 30 05 03 c0    	fadd   QWORD PTR ds:0xc0030530
c00286a7:	de c1                	faddp  st(1),st
c00286a9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00286ac:	dd 04 24             	fld    QWORD PTR [esp]
c00286af:	75 2f                	jne    c00286e0 <__kernel_sin+0x90>
c00286b1:	dd dc                	fstp   st(4)
c00286b3:	d9 c9                	fxch   st(1)
c00286b5:	d9 ca                	fxch   st(2)
c00286b7:	d9 cb                	fxch   st(3)
c00286b9:	de ca                	fmulp  st(2),st
c00286bb:	d9 c9                	fxch   st(1)
c00286bd:	dc 25 38 05 03 c0    	fsub   QWORD PTR ds:0xc0030538
c00286c3:	de c9                	fmulp  st(1),st
c00286c5:	de c1                	faddp  st(1),st
c00286c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00286ca:	dd 04 24             	fld    QWORD PTR [esp]
c00286cd:	83 c4 0c             	add    esp,0xc
c00286d0:	c3                   	ret    
c00286d1:	eb 0d                	jmp    c00286e0 <__kernel_sin+0x90>
c00286d3:	90                   	nop
c00286d4:	90                   	nop
c00286d5:	90                   	nop
c00286d6:	90                   	nop
c00286d7:	90                   	nop
c00286d8:	90                   	nop
c00286d9:	90                   	nop
c00286da:	90                   	nop
c00286db:	90                   	nop
c00286dc:	90                   	nop
c00286dd:	90                   	nop
c00286de:	90                   	nop
c00286df:	90                   	nop
c00286e0:	d9 c4                	fld    st(4)
c00286e2:	d8 0d ac f6 02 c0    	fmul   DWORD PTR ds:0xc002f6ac
c00286e8:	d9 c9                	fxch   st(1)
c00286ea:	d8 ca                	fmul   st,st(2)
c00286ec:	de e9                	fsubp  st(1),st
c00286ee:	de ca                	fmulp  st(2),st
c00286f0:	d9 c9                	fxch   st(1)
c00286f2:	de e3                	fsubrp st(3),st
c00286f4:	dc 0d 38 05 03 c0    	fmul   QWORD PTR ds:0xc0030538
c00286fa:	de c2                	faddp  st(2),st
c00286fc:	de e1                	fsubrp st(1),st
c00286fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028701:	dd 04 24             	fld    QWORD PTR [esp]
c0028704:	83 c4 0c             	add    esp,0xc
c0028707:	c3                   	ret    

Disassembly of section .init:

c0028708 <_init>:
c0028708:	55                   	push   ebp
c0028709:	89 e5                	mov    ebp,esp
c002870b:	e8 e4 79 fd ff       	call   c00000f4 <frame_dummy>
c0028710:	e8 0b c2 ff ff       	call   c0024920 <__do_global_ctors_aux>
c0028715:	5d                   	pop    ebp
c0028716:	c3                   	ret    

Disassembly of section .fini:

c0028717 <_fini>:
c0028717:	55                   	push   ebp
c0028718:	89 e5                	mov    ebp,esp
c002871a:	e8 65 79 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002871f:	5d                   	pop    ebp
c0028720:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c0028724 <RootHardware::_getDriver()>:
c0028724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028728:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002872e:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c0028730 <RootHardware::getType()>:
c0028730:	b8 04 00 00 00       	mov    eax,0x4
c0028735:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c0028738 <Driver::Driver()>:
c0028738:	ba f4 b2 02 c0       	mov    edx,0xc002b2f4
c002873d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028741:	89 10                	mov    DWORD PTR [eax],edx
c0028743:	90                   	nop
c0028744:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c0028748 <RootDriver::RootDriver()>:
c0028748:	83 ec 0c             	sub    esp,0xc
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	83 ec 0c             	sub    esp,0xc
c0028752:	50                   	push   eax
c0028753:	e8 e0 ff ff ff       	call   c0028738 <Driver::Driver()>
c0028758:	83 c4 10             	add    esp,0x10
c002875b:	ba 8c b3 02 c0       	mov    edx,0xc002b38c
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	89 10                	mov    DWORD PTR [eax],edx
c0028766:	90                   	nop
c0028767:	83 c4 0c             	add    esp,0xc
c002876a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c002876c <std::vector<Hardware*>::iterator::~iterator()>:
c002876c:	90                   	nop
c002876d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c0028770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028774:	8b 10                	mov    edx,DWORD PTR [eax]
c0028776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877a:	89 10                	mov    DWORD PTR [eax],edx
c002877c:	90                   	nop
c002877d:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c0028780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028784:	8b 10                	mov    edx,DWORD PTR [eax]
c0028786:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002878a:	8b 00                	mov    eax,DWORD PTR [eax]
c002878c:	39 c2                	cmp    edx,eax
c002878e:	0f 95 c0             	setne  al
c0028791:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c0028794 <std::vector<Hardware*>::iterator::operator*() const>:
c0028794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028798:	8b 00                	mov    eax,DWORD PTR [eax]
c002879a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorD2Ev:

c002879c <std::vector<DevicePortRange>::iterator::~iterator()>:
c002879c:	90                   	nop
c002879d:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorI15DevicePortRangeE8iteratorneERKS2_:

c00287a0 <std::vector<DevicePortRange>::iterator::operator!=(std::vector<DevicePortRange>::iterator const&) const>:
c00287a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00287a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ac:	39 c2                	cmp    edx,eax
c00287ae:	0f 95 c0             	setne  al
c00287b1:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorI15DevicePortRangeE8iteratordeEv:

c00287b4 <std::vector<DevicePortRange>::iterator::operator*() const>:
c00287b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ba:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c00287bc <std::vector<DeviceMemoryRange>::~vector()>:
c00287bc:	83 ec 0c             	sub    esp,0xc
c00287bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c6:	85 c0                	test   eax,eax
c00287c8:	74 1e                	je     c00287e8 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c00287ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d1:	85 c0                	test   eax,eax
c00287d3:	74 13                	je     c00287e8 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c00287d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287dc:	83 ec 0c             	sub    esp,0xc
c00287df:	50                   	push   eax
c00287e0:	e8 5c 58 fe ff       	call   c000e041 <operator delete[](void*)>
c00287e5:	83 c4 10             	add    esp,0x10
c00287e8:	90                   	nop
c00287e9:	83 c4 0c             	add    esp,0xc
c00287ec:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c00287f0 <std::vector<DevicePortRange>::~vector()>:
c00287f0:	83 ec 0c             	sub    esp,0xc
c00287f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287fa:	85 c0                	test   eax,eax
c00287fc:	74 1e                	je     c002881c <std::vector<DevicePortRange>::~vector()+0x2c>
c00287fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028805:	85 c0                	test   eax,eax
c0028807:	74 13                	je     c002881c <std::vector<DevicePortRange>::~vector()+0x2c>
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	50                   	push   eax
c0028814:	e8 28 58 fe ff       	call   c000e041 <operator delete[](void*)>
c0028819:	83 c4 10             	add    esp,0x10
c002881c:	90                   	nop
c002881d:	83 c4 0c             	add    esp,0xc
c0028820:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0028824 <std::vector<Hardware*>::~vector()>:
c0028824:	83 ec 0c             	sub    esp,0xc
c0028827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002882e:	85 c0                	test   eax,eax
c0028830:	74 1e                	je     c0028850 <std::vector<Hardware*>::~vector()+0x2c>
c0028832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028836:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028839:	85 c0                	test   eax,eax
c002883b:	74 13                	je     c0028850 <std::vector<Hardware*>::~vector()+0x2c>
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	50                   	push   eax
c0028848:	e8 f4 57 fe ff       	call   c000e041 <operator delete[](void*)>
c002884d:	83 c4 10             	add    esp,0x10
c0028850:	90                   	nop
c0028851:	83 c4 0c             	add    esp,0xc
c0028854:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c0028858 <RootHardware::~RootHardware()>:
c0028858:	83 ec 0c             	sub    esp,0xc
c002885b:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	89 10                	mov    DWORD PTR [eax],edx
c0028866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886a:	83 ec 0c             	sub    esp,0xc
c002886d:	50                   	push   eax
c002886e:	e8 e9 eb fd ff       	call   c000745c <Hardware::~Hardware()>
c0028873:	83 c4 10             	add    esp,0x10
c0028876:	90                   	nop
c0028877:	83 c4 0c             	add    esp,0xc
c002887a:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c002887c <RootHardware::~RootHardware()>:
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	83 ec 0c             	sub    esp,0xc
c0028882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028886:	e8 cd ff ff ff       	call   c0028858 <RootHardware::~RootHardware()>
c002888b:	83 c4 10             	add    esp,0x10
c002888e:	83 ec 08             	sub    esp,0x8
c0028891:	68 8c 00 00 00       	push   0x8c
c0028896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889a:	e8 9d 57 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002889f:	83 c4 10             	add    esp,0x10
c00288a2:	83 c4 0c             	add    esp,0xc
c00288a5:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c00288a8 <std::vector<DeviceMemoryRange>::vector()>:
c00288a8:	83 ec 1c             	sub    esp,0x1c
c00288ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288af:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00288b6:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00288be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288c2:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00288c7:	77 07                	ja     c00288d0 <std::vector<DeviceMemoryRange>::vector()+0x28>
c00288c9:	c1 e0 03             	shl    eax,0x3
c00288cc:	eb 0a                	jmp    c00288d8 <std::vector<DeviceMemoryRange>::vector()+0x30>
c00288ce:	66 90                	xchg   ax,ax
c00288d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00288d5:	8d 76 00             	lea    esi,[esi+0x0]
c00288d8:	83 ec 0c             	sub    esp,0xc
c00288db:	50                   	push   eax
c00288dc:	e8 56 57 fe ff       	call   c000e037 <operator new[](unsigned long)>
c00288e1:	83 c4 10             	add    esp,0x10
c00288e4:	89 c2                	mov    edx,eax
c00288e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288f1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288f8:	89 10                	mov    DWORD PTR [eax],edx
c00288fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288fe:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028905:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002890c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002891b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002891e:	90                   	nop
c002891f:	83 c4 1c             	add    esp,0x1c
c0028922:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0028924 <std::vector<DevicePortRange>::vector()>:
c0028924:	83 ec 1c             	sub    esp,0x1c
c0028927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002892b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028932:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002893a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002893e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0028943:	77 07                	ja     c002894c <std::vector<DevicePortRange>::vector()+0x28>
c0028945:	c1 e0 02             	shl    eax,0x2
c0028948:	eb 0a                	jmp    c0028954 <std::vector<DevicePortRange>::vector()+0x30>
c002894a:	66 90                	xchg   ax,ax
c002894c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028951:	8d 76 00             	lea    esi,[esi+0x0]
c0028954:	83 ec 0c             	sub    esp,0xc
c0028957:	50                   	push   eax
c0028958:	e8 da 56 fe ff       	call   c000e037 <operator new[](unsigned long)>
c002895d:	83 c4 10             	add    esp,0x10
c0028960:	89 c2                	mov    edx,eax
c0028962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028966:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002896d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028974:	89 10                	mov    DWORD PTR [eax],edx
c0028976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002897a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002897d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028981:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028988:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002898f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028997:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002899a:	90                   	nop
c002899b:	83 c4 1c             	add    esp,0x1c
c002899e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c00289a0 <std::vector<Hardware*>::vector()>:
c00289a0:	83 ec 1c             	sub    esp,0x1c
c00289a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289a7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00289ae:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00289b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00289ba:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00289bf:	77 07                	ja     c00289c8 <std::vector<Hardware*>::vector()+0x28>
c00289c1:	c1 e0 02             	shl    eax,0x2
c00289c4:	eb 0a                	jmp    c00289d0 <std::vector<Hardware*>::vector()+0x30>
c00289c6:	66 90                	xchg   ax,ax
c00289c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00289cd:	8d 76 00             	lea    esi,[esi+0x0]
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	50                   	push   eax
c00289d4:	e8 5e 56 fe ff       	call   c000e037 <operator new[](unsigned long)>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	89 c2                	mov    edx,eax
c00289de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289e9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00289ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289f0:	89 10                	mov    DWORD PTR [eax],edx
c00289f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289f6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00289f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a04:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a13:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028a16:	90                   	nop
c0028a17:	83 c4 1c             	add    esp,0x1c
c0028a1a:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c0028a1c <RootHardware::RootHardware()>:
c0028a1c:	53                   	push   ebx
c0028a1d:	83 ec 18             	sub    esp,0x18
c0028a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a24:	83 ec 0c             	sub    esp,0xc
c0028a27:	50                   	push   eax
c0028a28:	e8 a7 ea fd ff       	call   c00074d4 <Hardware::Hardware()>
c0028a2d:	83 c4 10             	add    esp,0x10
c0028a30:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0028a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a39:	89 10                	mov    DWORD PTR [eax],edx
c0028a3b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0028a43:	83 ec 0c             	sub    esp,0xc
c0028a46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0028a4a:	e8 f5 79 fe ff       	call   c0010444 <malloc>
c0028a4f:	83 c4 10             	add    esp,0x10
c0028a52:	89 c3                	mov    ebx,eax
c0028a54:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0028a5a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0028a61:	83 ec 0c             	sub    esp,0xc
c0028a64:	53                   	push   ebx
c0028a65:	e8 de fc ff ff       	call   c0028748 <RootDriver::RootDriver()>
c0028a6a:	83 c4 10             	add    esp,0x10
c0028a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a71:	89 98 88 00 00 00    	mov    DWORD PTR [eax+0x88],ebx
c0028a77:	90                   	nop
c0028a78:	83 c4 18             	add    esp,0x18
c0028a7b:	5b                   	pop    ebx
c0028a7c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0028a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0028a88:	89 10                	mov    DWORD PTR [eax],edx
c0028a8a:	90                   	nop
c0028a8b:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0028a8c <std::vector<Hardware*>::begin()>:
c0028a8c:	83 ec 0c             	sub    esp,0xc
c0028a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a95:	83 ec 08             	sub    esp,0x8
c0028a98:	50                   	push   eax
c0028a99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a9d:	e8 de ff ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028aa2:	83 c4 10             	add    esp,0x10
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	83 c4 0c             	add    esp,0xc
c0028aac:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0028ab0 <std::vector<Hardware*>::end()>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ab7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aba:	83 ec 08             	sub    esp,0x8
c0028abd:	50                   	push   eax
c0028abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac2:	e8 b9 ff ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	83 c4 0c             	add    esp,0xc
c0028ad1:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0028ad4 <std::vector<Hardware*>::iterator::operator++()>:
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028add:	8d 50 04             	lea    edx,[eax+0x4]
c0028ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ae4:	89 10                	mov    DWORD PTR [eax],edx
c0028ae6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aec:	83 ec 08             	sub    esp,0x8
c0028aef:	50                   	push   eax
c0028af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af4:	e8 87 ff ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028af9:	83 c4 10             	add    esp,0x10
c0028afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b00:	83 c4 0c             	add    esp,0xc
c0028b03:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorC2EPS0_:

c0028b08 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>:
c0028b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0028b10:	89 10                	mov    DWORD PTR [eax],edx
c0028b12:	90                   	nop
c0028b13:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE5beginEv:

c0028b14 <std::vector<DevicePortRange>::begin()>:
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1d:	83 ec 08             	sub    esp,0x8
c0028b20:	50                   	push   eax
c0028b21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b25:	e8 de ff ff ff       	call   c0028b08 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028b2a:	83 c4 10             	add    esp,0x10
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	83 c4 0c             	add    esp,0xc
c0028b34:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE3endEv:

c0028b38 <std::vector<DevicePortRange>::end()>:
c0028b38:	83 ec 0c             	sub    esp,0xc
c0028b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b42:	83 ec 08             	sub    esp,0x8
c0028b45:	50                   	push   eax
c0028b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b4a:	e8 b9 ff ff ff       	call   c0028b08 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028b4f:	83 c4 10             	add    esp,0x10
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	83 c4 0c             	add    esp,0xc
c0028b59:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorppEv:

c0028b5c <std::vector<DevicePortRange>::iterator::operator++()>:
c0028b5c:	83 ec 0c             	sub    esp,0xc
c0028b5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b65:	8d 50 04             	lea    edx,[eax+0x4]
c0028b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b6c:	89 10                	mov    DWORD PTR [eax],edx
c0028b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b74:	83 ec 08             	sub    esp,0x8
c0028b77:	50                   	push   eax
c0028b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b7c:	e8 87 ff ff ff       	call   c0028b08 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028b81:	83 c4 10             	add    esp,0x10
c0028b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b88:	83 c4 0c             	add    esp,0xc
c0028b8b:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0028b90 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0028b90:	83 ec 1c             	sub    esp,0x1c
c0028b93:	90                   	nop
c0028b94:	83 ec 08             	sub    esp,0x8
c0028b97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b9f:	e8 dc fb ff ff       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028ba4:	83 c4 10             	add    esp,0x10
c0028ba7:	0f b6 c0             	movzx  eax,al
c0028baa:	85 c0                	test   eax,eax
c0028bac:	74 62                	je     c0028c10 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c0028bae:	83 ec 0c             	sub    esp,0xc
c0028bb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028bb5:	e8 da fb ff ff       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0028bba:	83 c4 10             	add    esp,0x10
c0028bbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0028bbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0028bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc5:	39 c2                	cmp    edx,eax
c0028bc7:	0f 94 c0             	sete   al
c0028bca:	0f b6 c0             	movzx  eax,al
c0028bcd:	85 c0                	test   eax,eax
c0028bcf:	74 17                	je     c0028be8 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c0028bd1:	83 ec 08             	sub    esp,0x8
c0028bd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028bd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028bdc:	e8 8f fb ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028be1:	83 c4 10             	add    esp,0x10
c0028be4:	eb 3e                	jmp    c0028c24 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c0028be6:	66 90                	xchg   ax,ax
c0028be8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028bec:	83 ec 08             	sub    esp,0x8
c0028bef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028bf3:	50                   	push   eax
c0028bf4:	e8 db fe ff ff       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0028bf9:	83 c4 0c             	add    esp,0xc
c0028bfc:	83 ec 0c             	sub    esp,0xc
c0028bff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028c03:	50                   	push   eax
c0028c04:	e8 63 fb ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028c09:	83 c4 10             	add    esp,0x10
c0028c0c:	eb 86                	jmp    c0028b94 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c0028c0e:	66 90                	xchg   ax,ax
c0028c10:	83 ec 08             	sub    esp,0x8
c0028c13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028c1b:	e8 50 fb ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028c20:	83 c4 10             	add    esp,0x10
c0028c23:	90                   	nop
c0028c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c28:	83 c4 1c             	add    esp,0x1c
c0028c2b:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c0028c30 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c0028c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c34:	8b 10                	mov    edx,DWORD PTR [eax]
c0028c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c3a:	89 10                	mov    DWORD PTR [eax],edx
c0028c3c:	90                   	nop
c0028c3d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c0028c40 <std::vector<Hardware*>::iterator::operator++(int)>:
c0028c40:	83 ec 0c             	sub    esp,0xc
c0028c43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c49:	8d 48 04             	lea    ecx,[eax+0x4]
c0028c4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c50:	89 0a                	mov    DWORD PTR [edx],ecx
c0028c52:	83 ec 08             	sub    esp,0x8
c0028c55:	50                   	push   eax
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 21 fe ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	83 c4 0c             	add    esp,0xc
c0028c69:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c0028c6c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c0028c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c70:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0028c74 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0028c74:	53                   	push   ebx
c0028c75:	83 ec 28             	sub    esp,0x28
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028c83:	50                   	push   eax
c0028c84:	e8 e7 fa ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028c89:	83 c4 10             	add    esp,0x10
c0028c8c:	83 ec 08             	sub    esp,0x8
c0028c8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028c93:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028c97:	50                   	push   eax
c0028c98:	e8 d3 fa ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028c9d:	83 c4 10             	add    esp,0x10
c0028ca0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028ca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028ca8:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028cac:	52                   	push   edx
c0028cad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0028cb1:	52                   	push   edx
c0028cb2:	50                   	push   eax
c0028cb3:	e8 d8 fe ff ff       	call   c0028b90 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0028cb8:	83 c4 0c             	add    esp,0xc
c0028cbb:	83 ec 08             	sub    esp,0x8
c0028cbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028cc2:	50                   	push   eax
c0028cc3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028cc7:	e8 64 ff ff ff       	call   c0028c30 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0028ccc:	83 c4 10             	add    esp,0x10
c0028ccf:	83 ec 0c             	sub    esp,0xc
c0028cd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028cd6:	50                   	push   eax
c0028cd7:	e8 90 fa ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028cdc:	83 c4 10             	add    esp,0x10
c0028cdf:	83 ec 0c             	sub    esp,0xc
c0028ce2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028ce6:	50                   	push   eax
c0028ce7:	e8 80 fa ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028cec:	83 c4 10             	add    esp,0x10
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028cf6:	50                   	push   eax
c0028cf7:	e8 70 fa ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028cfc:	83 c4 10             	add    esp,0x10
c0028cff:	83 ec 08             	sub    esp,0x8
c0028d02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028d06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028d0a:	e8 71 fa ff ff       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	0f b6 c0             	movzx  eax,al
c0028d15:	85 c0                	test   eax,eax
c0028d17:	0f 84 ef 00 00 00    	je     c0028e0c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0028d1d:	83 ec 08             	sub    esp,0x8
c0028d20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028d24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d28:	50                   	push   eax
c0028d29:	e8 42 fa ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028d2e:	83 c4 10             	add    esp,0x10
c0028d31:	8d 76 00             	lea    esi,[esi+0x0]
c0028d34:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028d38:	83 ec 08             	sub    esp,0x8
c0028d3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028d3f:	52                   	push   edx
c0028d40:	50                   	push   eax
c0028d41:	e8 8e fd ff ff       	call   c0028ad4 <std::vector<Hardware*>::iterator::operator++()>
c0028d46:	83 c4 0c             	add    esp,0xc
c0028d49:	83 ec 08             	sub    esp,0x8
c0028d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028d50:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028d54:	50                   	push   eax
c0028d55:	e8 26 fa ff ff       	call   c0028780 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028d5a:	83 c4 10             	add    esp,0x10
c0028d5d:	88 c3                	mov    bl,al
c0028d5f:	83 ec 0c             	sub    esp,0xc
c0028d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028d66:	50                   	push   eax
c0028d67:	e8 00 fa ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028d6c:	83 c4 10             	add    esp,0x10
c0028d6f:	0f b6 c3             	movzx  eax,bl
c0028d72:	85 c0                	test   eax,eax
c0028d74:	0f 84 82 00 00 00    	je     c0028dfc <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d81:	50                   	push   eax
c0028d82:	e8 0d fa ff ff       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0028d8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d92:	39 c2                	cmp    edx,eax
c0028d94:	0f 95 c0             	setne  al
c0028d97:	0f b6 c0             	movzx  eax,al
c0028d9a:	85 c0                	test   eax,eax
c0028d9c:	74 96                	je     c0028d34 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028da5:	50                   	push   eax
c0028da6:	e8 e9 f9 ff ff       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	50                   	push   eax
c0028db2:	e8 b5 fe ff ff       	call   c0028c6c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	89 c3                	mov    ebx,eax
c0028dbc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028dc0:	83 ec 04             	sub    esp,0x4
c0028dc3:	6a 00                	push   0x0
c0028dc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028dc9:	50                   	push   eax
c0028dca:	e8 71 fe ff ff       	call   c0028c40 <std::vector<Hardware*>::iterator::operator++(int)>
c0028dcf:	83 c4 0c             	add    esp,0xc
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028dd9:	50                   	push   eax
c0028dda:	e8 b5 f9 ff ff       	call   c0028794 <std::vector<Hardware*>::iterator::operator*() const>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0028de4:	89 10                	mov    DWORD PTR [eax],edx
c0028de6:	83 ec 0c             	sub    esp,0xc
c0028de9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028ded:	50                   	push   eax
c0028dee:	e8 79 f9 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	e9 39 ff ff ff       	jmp    c0028d34 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028dfb:	90                   	nop
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e03:	50                   	push   eax
c0028e04:	e8 63 f9 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	83 ec 08             	sub    esp,0x8
c0028e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028e13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028e17:	e8 54 f9 ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028e1c:	83 c4 10             	add    esp,0x10
c0028e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028e23:	83 c4 28             	add    esp,0x28
c0028e26:	5b                   	pop    ebx
c0028e27:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0028e2c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0028e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e30:	8b 10                	mov    edx,DWORD PTR [eax]
c0028e32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e38:	29 c2                	sub    edx,eax
c0028e3a:	89 d0                	mov    eax,edx
c0028e3c:	c1 f8 02             	sar    eax,0x2
c0028e3f:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c0028e40 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c0028e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e44:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028e48:	74 1a                	je     c0028e64 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0028e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0028e50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e54:	89 10                	mov    DWORD PTR [eax],edx
c0028e56:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0028e5b:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0028e60:	eb de                	jmp    c0028e40 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028e62:	66 90                	xchg   ax,ax
c0028e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e68:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0028e6c <std::vector<Hardware*>::reserve(unsigned long)>:
c0028e6c:	83 ec 1c             	sub    esp,0x1c
c0028e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028e76:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028e7a:	0f 86 d0 00 00 00    	jbe    c0028f50 <std::vector<Hardware*>::reserve(unsigned long)+0xe4>
c0028e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028e87:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028e8b:	76 13                	jbe    c0028ea0 <std::vector<Hardware*>::reserve(unsigned long)+0x34>
c0028e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e91:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028e94:	8d 14 00             	lea    edx,[eax+eax*1]
c0028e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028e9e:	eb e0                	jmp    c0028e80 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0028ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ea4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028ea7:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0028eac:	77 06                	ja     c0028eb4 <std::vector<Hardware*>::reserve(unsigned long)+0x48>
c0028eae:	c1 e0 02             	shl    eax,0x2
c0028eb1:	eb 09                	jmp    c0028ebc <std::vector<Hardware*>::reserve(unsigned long)+0x50>
c0028eb3:	90                   	nop
c0028eb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	50                   	push   eax
c0028ec0:	e8 72 51 fe ff       	call   c000e037 <operator new[](unsigned long)>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ed0:	8b 10                	mov    edx,DWORD PTR [eax]
c0028ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ed9:	39 c2                	cmp    edx,eax
c0028edb:	74 1f                	je     c0028efc <std::vector<Hardware*>::reserve(unsigned long)+0x90>
c0028edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ee1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ee8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028eeb:	83 ec 04             	sub    esp,0x4
c0028eee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028ef2:	52                   	push   edx
c0028ef3:	50                   	push   eax
c0028ef4:	e8 47 ff ff ff       	call   c0028e40 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f03:	85 c0                	test   eax,eax
c0028f05:	74 15                	je     c0028f1c <std::vector<Hardware*>::reserve(unsigned long)+0xb0>
c0028f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	50                   	push   eax
c0028f12:	e8 2a 51 fe ff       	call   c000e041 <operator delete[](void*)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	66 90                	xchg   ax,ax
c0028f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028f24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f2b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f32:	89 10                	mov    DWORD PTR [eax],edx
c0028f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f38:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028f42:	c1 e0 02             	shl    eax,0x2
c0028f45:	01 c2                	add    edx,eax
c0028f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f4e:	66 90                	xchg   ax,ax
c0028f50:	90                   	nop
c0028f51:	83 c4 1c             	add    esp,0x1c
c0028f54:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c0028f58 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028f69:	39 c2                	cmp    edx,eax
c0028f6b:	73 2f                	jae    c0028f9c <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c0028f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f74:	8d 48 04             	lea    ecx,[eax+0x4]
c0028f77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028f7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028f7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f82:	8b 12                	mov    edx,DWORD PTR [edx]
c0028f84:	89 10                	mov    DWORD PTR [eax],edx
c0028f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028f8d:	8d 50 01             	lea    edx,[eax+0x1]
c0028f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f94:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028f97:	eb 47                	jmp    c0028fe0 <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c0028f99:	8d 76 00             	lea    esi,[esi+0x0]
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028fa3:	d1 e0                	shl    eax,1
c0028fa5:	83 ec 08             	sub    esp,0x8
c0028fa8:	50                   	push   eax
c0028fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fad:	e8 ba fe ff ff       	call   c0028e6c <std::vector<Hardware*>::reserve(unsigned long)>
c0028fb2:	83 c4 10             	add    esp,0x10
c0028fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028fbc:	8d 50 01             	lea    edx,[eax+0x1]
c0028fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fcd:	8d 48 04             	lea    ecx,[eax+0x4]
c0028fd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028fd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fdb:	8b 12                	mov    edx,DWORD PTR [edx]
c0028fdd:	89 10                	mov    DWORD PTR [eax],edx
c0028fdf:	90                   	nop
c0028fe0:	90                   	nop
c0028fe1:	83 c4 0c             	add    esp,0xc
c0028fe4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c0028fe8 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c0028fe8:	53                   	push   ebx
c0028fe9:	83 ec 28             	sub    esp,0x28
c0028fec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ff2:	83 ec 08             	sub    esp,0x8
c0028ff5:	50                   	push   eax
c0028ff6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028ffa:	50                   	push   eax
c0028ffb:	e8 80 fa ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0029000:	83 c4 10             	add    esp,0x10
c0029003:	83 ec 08             	sub    esp,0x8
c0029006:	8d 44 24 10          	lea    eax,[esp+0x10]
c002900a:	50                   	push   eax
c002900b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002900f:	e8 18 fe ff ff       	call   c0028e2c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0029014:	83 c4 10             	add    esp,0x10
c0029017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002901b:	83 ec 0c             	sub    esp,0xc
c002901e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029022:	50                   	push   eax
c0029023:	e8 44 f7 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0029028:	83 c4 10             	add    esp,0x10
c002902b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002902f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029031:	83 ec 08             	sub    esp,0x8
c0029034:	50                   	push   eax
c0029035:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029039:	50                   	push   eax
c002903a:	e8 41 fa ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 ec 08             	sub    esp,0x8
c0029045:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029049:	50                   	push   eax
c002904a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002904e:	e8 d9 fd ff ff       	call   c0028e2c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002905a:	83 ec 0c             	sub    esp,0xc
c002905d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029061:	50                   	push   eax
c0029062:	e8 05 f7 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002906e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029071:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029075:	c1 e2 02             	shl    edx,0x2
c0029078:	8d 0c 10             	lea    ecx,[eax+edx*1]
c002907b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002907f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029082:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029086:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029089:	c1 e0 02             	shl    eax,0x2
c002908c:	01 c2                	add    edx,eax
c002908e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029092:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029095:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029099:	c1 e3 02             	shl    ebx,0x2
c002909c:	01 d8                	add    eax,ebx
c002909e:	83 ec 04             	sub    esp,0x4
c00290a1:	51                   	push   ecx
c00290a2:	52                   	push   edx
c00290a3:	50                   	push   eax
c00290a4:	e8 97 fd ff ff       	call   c0028e40 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	83 ec 08             	sub    esp,0x8
c00290af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00290b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00290b7:	50                   	push   eax
c00290b8:	e8 b3 f6 ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	83 ec 08             	sub    esp,0x8
c00290c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00290c7:	50                   	push   eax
c00290c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00290cc:	e8 5b fd ff ff       	call   c0028e2c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00290d1:	83 c4 10             	add    esp,0x10
c00290d4:	89 c2                	mov    edx,eax
c00290d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00290da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00290dd:	29 d0                	sub    eax,edx
c00290df:	89 c2                	mov    edx,eax
c00290e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00290e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00290ef:	50                   	push   eax
c00290f0:	e8 77 f6 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c00290f5:	83 c4 10             	add    esp,0x10
c00290f8:	83 ec 08             	sub    esp,0x8
c00290fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00290ff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029103:	50                   	push   eax
c0029104:	e8 67 f6 ff ff       	call   c0028770 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	83 ec 08             	sub    esp,0x8
c002910f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029113:	50                   	push   eax
c0029114:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029118:	e8 0f fd ff ff       	call   c0028e2c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	89 c2                	mov    edx,eax
c0029122:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029126:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029129:	c1 e2 02             	shl    edx,0x2
c002912c:	f7 da                	neg    edx
c002912e:	01 c2                	add    edx,eax
c0029130:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029134:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029137:	83 ec 0c             	sub    esp,0xc
c002913a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002913e:	50                   	push   eax
c002913f:	e8 28 f6 ff ff       	call   c002876c <std::vector<Hardware*>::iterator::~iterator()>
c0029144:	83 c4 10             	add    esp,0x10
c0029147:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002914e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029152:	c1 e2 02             	shl    edx,0x2
c0029155:	01 d0                	add    eax,edx
c0029157:	83 ec 08             	sub    esp,0x8
c002915a:	50                   	push   eax
c002915b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002915f:	e8 1c f9 ff ff       	call   c0028a80 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0029164:	83 c4 10             	add    esp,0x10
c0029167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002916b:	83 c4 28             	add    esp,0x28
c002916e:	5b                   	pop    ebx
c002916f:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c0029174 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c0029174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029178:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002917c:	74 1e                	je     c002919c <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c002917e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0029182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029186:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0029189:	8b 00                	mov    eax,DWORD PTR [eax]
c002918b:	89 01                	mov    DWORD PTR [ecx],eax
c002918d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029190:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c0029195:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c002919a:	eb d8                	jmp    c0029174 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c002919c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00291a0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c00291a4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c00291a4:	83 ec 1c             	sub    esp,0x1c
c00291a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00291ae:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00291b2:	0f 86 d0 00 00 00    	jbe    c0029288 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe4>
c00291b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00291bf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00291c3:	76 13                	jbe    c00291d8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x34>
c00291c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00291cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00291cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00291d6:	eb e0                	jmp    c00291b8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c00291d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00291df:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00291e4:	77 06                	ja     c00291ec <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x48>
c00291e6:	c1 e0 03             	shl    eax,0x3
c00291e9:	eb 09                	jmp    c00291f4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x50>
c00291eb:	90                   	nop
c00291ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00291f1:	8d 76 00             	lea    esi,[esi+0x0]
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	50                   	push   eax
c00291f8:	e8 3a 4e fe ff       	call   c000e037 <operator new[](unsigned long)>
c00291fd:	83 c4 10             	add    esp,0x10
c0029200:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029208:	8b 10                	mov    edx,DWORD PTR [eax]
c002920a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002920e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029211:	39 c2                	cmp    edx,eax
c0029213:	74 1f                	je     c0029234 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x90>
c0029215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029219:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002921c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029220:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029223:	83 ec 04             	sub    esp,0x4
c0029226:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002922a:	52                   	push   edx
c002922b:	50                   	push   eax
c002922c:	e8 43 ff ff ff       	call   c0029174 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c0029231:	83 c4 10             	add    esp,0x10
c0029234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029238:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002923b:	85 c0                	test   eax,eax
c002923d:	74 15                	je     c0029254 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb0>
c002923f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029243:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	50                   	push   eax
c002924a:	e8 f2 4d fe ff       	call   c000e041 <operator delete[](void*)>
c002924f:	83 c4 10             	add    esp,0x10
c0029252:	66 90                	xchg   ax,ax
c0029254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029258:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002925c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002925f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029263:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002926a:	89 10                	mov    DWORD PTR [eax],edx
c002926c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029270:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029277:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002927a:	c1 e0 03             	shl    eax,0x3
c002927d:	01 c2                	add    edx,eax
c002927f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029283:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029286:	66 90                	xchg   ax,ax
c0029288:	90                   	nop
c0029289:	83 c4 1c             	add    esp,0x1c
c002928c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0029290 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0029290:	83 ec 0c             	sub    esp,0xc
c0029293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029297:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002929a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292a1:	39 c2                	cmp    edx,eax
c00292a3:	73 33                	jae    c00292d8 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c00292a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00292ac:	8d 51 08             	lea    edx,[ecx+0x8]
c00292af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00292b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00292ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00292bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00292bf:	89 01                	mov    DWORD PTR [ecx],eax
c00292c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00292c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00292cb:	8d 50 01             	lea    edx,[eax+0x1]
c00292ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00292d5:	eb 4d                	jmp    c0029324 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c00292d7:	90                   	nop
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292df:	d1 e0                	shl    eax,1
c00292e1:	83 ec 08             	sub    esp,0x8
c00292e4:	50                   	push   eax
c00292e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e9:	e8 b6 fe ff ff       	call   c00291a4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c00292ee:	83 c4 10             	add    esp,0x10
c00292f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00292f8:	8d 50 01             	lea    edx,[eax+0x1]
c00292fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029306:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0029309:	8d 51 08             	lea    edx,[ecx+0x8]
c002930c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029310:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029313:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002931a:	8b 00                	mov    eax,DWORD PTR [eax]
c002931c:	89 01                	mov    DWORD PTR [ecx],eax
c002931e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029321:	8d 76 00             	lea    esi,[esi+0x0]
c0029324:	90                   	nop
c0029325:	83 c4 0c             	add    esp,0xc
c0029328:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c002932c <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c002932c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029330:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0029334:	74 1a                	je     c0029350 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c0029336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002933a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002933e:	8b 12                	mov    edx,DWORD PTR [edx]
c0029340:	89 10                	mov    DWORD PTR [eax],edx
c0029342:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0029347:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c002934c:	eb de                	jmp    c002932c <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c002934e:	66 90                	xchg   ax,ax
c0029350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029354:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c0029358 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c0029358:	83 ec 1c             	sub    esp,0x1c
c002935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002935f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029362:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0029366:	0f 86 d0 00 00 00    	jbe    c002943c <std::vector<DevicePortRange>::reserve(unsigned long)+0xe4>
c002936c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029370:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029373:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0029377:	76 13                	jbe    c002938c <std::vector<DevicePortRange>::reserve(unsigned long)+0x34>
c0029379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002937d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029380:	8d 14 00             	lea    edx,[eax+eax*1]
c0029383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029387:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002938a:	eb e0                	jmp    c002936c <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c002938c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029390:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029393:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0029398:	77 06                	ja     c00293a0 <std::vector<DevicePortRange>::reserve(unsigned long)+0x48>
c002939a:	c1 e0 02             	shl    eax,0x2
c002939d:	eb 09                	jmp    c00293a8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x50>
c002939f:	90                   	nop
c00293a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00293a5:	8d 76 00             	lea    esi,[esi+0x0]
c00293a8:	83 ec 0c             	sub    esp,0xc
c00293ab:	50                   	push   eax
c00293ac:	e8 86 4c fe ff       	call   c000e037 <operator new[](unsigned long)>
c00293b1:	83 c4 10             	add    esp,0x10
c00293b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00293b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00293be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c5:	39 c2                	cmp    edx,eax
c00293c7:	74 1f                	je     c00293e8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x90>
c00293c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00293d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293d7:	83 ec 04             	sub    esp,0x4
c00293da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00293de:	52                   	push   edx
c00293df:	50                   	push   eax
c00293e0:	e8 47 ff ff ff       	call   c002932c <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c00293e5:	83 c4 10             	add    esp,0x10
c00293e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293ef:	85 c0                	test   eax,eax
c00293f1:	74 15                	je     c0029408 <std::vector<DevicePortRange>::reserve(unsigned long)+0xb0>
c00293f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00293f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293fa:	83 ec 0c             	sub    esp,0xc
c00293fd:	50                   	push   eax
c00293fe:	e8 3e 4c fe ff       	call   c000e041 <operator delete[](void*)>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	66 90                	xchg   ax,ax
c0029408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002940c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029410:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029417:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002941a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002941e:	89 10                	mov    DWORD PTR [eax],edx
c0029420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029424:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002942b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002942e:	c1 e0 02             	shl    eax,0x2
c0029431:	01 c2                	add    edx,eax
c0029433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029437:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002943a:	66 90                	xchg   ax,ax
c002943c:	90                   	nop
c002943d:	83 c4 1c             	add    esp,0x1c
c0029440:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c0029444 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002944e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029452:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029455:	39 c2                	cmp    edx,eax
c0029457:	73 2f                	jae    c0029488 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c0029459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029460:	8d 48 04             	lea    ecx,[eax+0x4]
c0029463:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029467:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002946a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002946e:	8b 12                	mov    edx,DWORD PTR [edx]
c0029470:	89 10                	mov    DWORD PTR [eax],edx
c0029472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029476:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029479:	8d 50 01             	lea    edx,[eax+0x1]
c002947c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029480:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029483:	eb 47                	jmp    c00294cc <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c0029485:	8d 76 00             	lea    esi,[esi+0x0]
c0029488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002948f:	d1 e0                	shl    eax,1
c0029491:	83 ec 08             	sub    esp,0x8
c0029494:	50                   	push   eax
c0029495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029499:	e8 ba fe ff ff       	call   c0029358 <std::vector<DevicePortRange>::reserve(unsigned long)>
c002949e:	83 c4 10             	add    esp,0x10
c00294a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00294a8:	8d 50 01             	lea    edx,[eax+0x1]
c00294ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00294b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b9:	8d 48 04             	lea    ecx,[eax+0x4]
c00294bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00294c0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00294c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294c7:	8b 12                	mov    edx,DWORD PTR [edx]
c00294c9:	89 10                	mov    DWORD PTR [eax],edx
c00294cb:	90                   	nop
c00294cc:	90                   	nop
c00294cd:	83 c4 0c             	add    esp,0xc
c00294d0:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c00294d4 <BusHardware::_getDriver()>:
c00294d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294d8:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00294de:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c00294e0 <BusHardware::getType()>:
c00294e0:	b8 01 00 00 00       	mov    eax,0x1
c00294e5:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c00294e8 <BusHardware::~BusHardware()>:
c00294e8:	83 ec 0c             	sub    esp,0xc
c00294eb:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c00294f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f4:	89 10                	mov    DWORD PTR [eax],edx
c00294f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fa:	83 ec 0c             	sub    esp,0xc
c00294fd:	50                   	push   eax
c00294fe:	e8 59 df fd ff       	call   c000745c <Hardware::~Hardware()>
c0029503:	83 c4 10             	add    esp,0x10
c0029506:	90                   	nop
c0029507:	83 c4 0c             	add    esp,0xc
c002950a:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c002950c <BusHardware::~BusHardware()>:
c002950c:	83 ec 0c             	sub    esp,0xc
c002950f:	83 ec 0c             	sub    esp,0xc
c0029512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029516:	e8 cd ff ff ff       	call   c00294e8 <BusHardware::~BusHardware()>
c002951b:	83 c4 10             	add    esp,0x10
c002951e:	83 ec 08             	sub    esp,0x8
c0029521:	68 8c 00 00 00       	push   0x8c
c0029526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002952a:	e8 0d 4b fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002952f:	83 c4 10             	add    esp,0x10
c0029532:	83 c4 0c             	add    esp,0xc
c0029535:	c3                   	ret    

Disassembly of section .text._ZN9BusDriverC2Ev:

c0029538 <BusDriver::BusDriver()>:
c0029538:	83 ec 0c             	sub    esp,0xc
c002953b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953f:	83 ec 0c             	sub    esp,0xc
c0029542:	50                   	push   eax
c0029543:	e8 f0 f1 ff ff       	call   c0028738 <Driver::Driver()>
c0029548:	83 c4 10             	add    esp,0x10
c002954b:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	89 10                	mov    DWORD PTR [eax],edx
c0029556:	90                   	nop
c0029557:	83 c4 0c             	add    esp,0xc
c002955a:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2Ev:

c002955c <BusHardware::BusHardware()>:
c002955c:	83 ec 0c             	sub    esp,0xc
c002955f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029563:	83 ec 0c             	sub    esp,0xc
c0029566:	50                   	push   eax
c0029567:	e8 68 df fd ff       	call   c00074d4 <Hardware::Hardware()>
c002956c:	83 c4 10             	add    esp,0x10
c002956f:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c0029574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029578:	89 10                	mov    DWORD PTR [eax],edx
c002957a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957e:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c0029588:	90                   	nop
c0029589:	83 c4 0c             	add    esp,0xc
c002958c:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware9setDriverEP9BusDriver:

c0029590 <BusHardware::setDriver(BusDriver*)>:
c0029590:	83 ec 0c             	sub    esp,0xc
c0029593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029597:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002959b:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c00295a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a5:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00295ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00295af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b6:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00295bc:	89 c2                	mov    edx,eax
c00295be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c2:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00295c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ca:	83 c0 04             	add    eax,0x4
c00295cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00295cf:	83 ec 0c             	sub    esp,0xc
c00295d2:	52                   	push   edx
c00295d3:	ff d0                	call   eax
c00295d5:	83 c4 10             	add    esp,0x10
c00295d8:	90                   	nop
c00295d9:	83 c4 0c             	add    esp,0xc
c00295dc:	c3                   	ret    

Disassembly of section .text._ZN12ISAPnPDriverC2Ev:

c00295e0 <ISAPnPDriver::ISAPnPDriver()>:
c00295e0:	83 ec 0c             	sub    esp,0xc
c00295e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e7:	83 ec 0c             	sub    esp,0xc
c00295ea:	50                   	push   eax
c00295eb:	e8 48 ff ff ff       	call   c0029538 <BusDriver::BusDriver()>
c00295f0:	83 c4 10             	add    esp,0x10
c00295f3:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c00295f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fc:	89 10                	mov    DWORD PTR [eax],edx
c00295fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029602:	66 c7 40 08 79 02    	mov    WORD PTR [eax+0x8],0x279
c0029608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960c:	66 c7 40 0a 79 0a    	mov    WORD PTR [eax+0xa],0xa79
c0029612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029616:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c002961c:	90                   	nop
c002961d:	83 c4 0c             	add    esp,0xc
c0029620:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c0029624 <ACPIDriver::ACPIDriver()>:
c0029624:	83 ec 0c             	sub    esp,0xc
c0029627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962b:	83 ec 0c             	sub    esp,0xc
c002962e:	50                   	push   eax
c002962f:	e8 04 ff ff ff       	call   c0029538 <BusDriver::BusDriver()>
c0029634:	83 c4 10             	add    esp,0x10
c0029637:	ba 54 d9 02 c0       	mov    edx,0xc002d954
c002963c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029640:	89 10                	mov    DWORD PTR [eax],edx
c0029642:	90                   	nop
c0029643:	83 c4 0c             	add    esp,0xc
c0029646:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c0029648 <PCIDriver::PCIDriver()>:
c0029648:	83 ec 0c             	sub    esp,0xc
c002964b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964f:	83 ec 0c             	sub    esp,0xc
c0029652:	50                   	push   eax
c0029653:	e8 e0 fe ff ff       	call   c0029538 <BusDriver::BusDriver()>
c0029658:	83 c4 10             	add    esp,0x10
c002965b:	ba d4 e8 02 c0       	mov    edx,0xc002e8d4
c0029660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029664:	89 10                	mov    DWORD PTR [eax],edx
c0029666:	90                   	nop
c0029667:	83 c4 0c             	add    esp,0xc
c002966a:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c002966c <ISADriver::ISADriver()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029673:	83 ec 0c             	sub    esp,0xc
c0029676:	50                   	push   eax
c0029677:	e8 bc f0 ff ff       	call   c0028738 <Driver::Driver()>
c002967c:	83 c4 10             	add    esp,0x10
c002967f:	ba 34 db 02 c0       	mov    edx,0xc002db34
c0029684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029688:	89 10                	mov    DWORD PTR [eax],edx
c002968a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029695:	90                   	nop
c0029696:	83 c4 0c             	add    esp,0xc
c0029699:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002969a <DriverlessDevice::~DriverlessDevice()>:
c002969a:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c002969f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a3:	89 10                	mov    DWORD PTR [eax],edx
c00296a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a9:	50                   	push   eax
c00296aa:	e8 a1 0f fe ff       	call   c000a650 <Device::~Device()>
c00296af:	83 c4 04             	add    esp,0x4
c00296b2:	90                   	nop
c00296b3:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00296b4 <DriverlessDevice::~DriverlessDevice()>:
c00296b4:	83 ec 0c             	sub    esp,0xc
c00296b7:	83 ec 0c             	sub    esp,0xc
c00296ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296be:	e8 d7 ff ff ff       	call   c002969a <DriverlessDevice::~DriverlessDevice()>
c00296c3:	83 c4 10             	add    esp,0x10
c00296c6:	83 ec 08             	sub    esp,0x8
c00296c9:	68 58 01 00 00       	push   0x158
c00296ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d2:	e8 65 49 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c00296d7:	83 c4 10             	add    esp,0x10
c00296da:	83 c4 0c             	add    esp,0xc
c00296dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00296de <LinkedList<Device>::addElement(Device*)>:
c00296de:	83 ec 0c             	sub    esp,0xc
c00296e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00296e6:	75 10                	jne    c00296f8 <LinkedList<Device>::addElement(Device*)+0x1a>
c00296e8:	83 ec 0c             	sub    esp,0xc
c00296eb:	68 f0 b7 02 c0       	push   0xc002b7f0
c00296f0:	e8 a3 71 fe ff       	call   c0010898 <KePanic(char const*)>
c00296f5:	83 c4 10             	add    esp,0x10
c00296f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00296fe:	85 c0                	test   eax,eax
c0029700:	74 3a                	je     c002973c <LinkedList<Device>::addElement(Device*)+0x5e>
c0029702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029709:	85 c0                	test   eax,eax
c002970b:	74 2f                	je     c002973c <LinkedList<Device>::addElement(Device*)+0x5e>
c002970d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029718:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029722:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029726:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029730:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002973a:	eb 68                	jmp    c00297a4 <LinkedList<Device>::addElement(Device*)+0xc6>
c002973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029740:	8b 00                	mov    eax,DWORD PTR [eax]
c0029742:	85 c0                	test   eax,eax
c0029744:	75 4e                	jne    c0029794 <LinkedList<Device>::addElement(Device*)+0xb6>
c0029746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002974d:	85 c0                	test   eax,eax
c002974f:	75 43                	jne    c0029794 <LinkedList<Device>::addElement(Device*)+0xb6>
c0029751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029755:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029759:	89 10                	mov    DWORD PTR [eax],edx
c002975b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029763:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002976d:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002977e:	85 c0                	test   eax,eax
c0029780:	74 22                	je     c00297a4 <LinkedList<Device>::addElement(Device*)+0xc6>
c0029782:	83 ec 0c             	sub    esp,0xc
c0029785:	68 12 b8 02 c0       	push   0xc002b812
c002978a:	e8 09 71 fe ff       	call   c0010898 <KePanic(char const*)>
c002978f:	83 c4 10             	add    esp,0x10
c0029792:	eb 10                	jmp    c00297a4 <LinkedList<Device>::addElement(Device*)+0xc6>
c0029794:	83 ec 0c             	sub    esp,0xc
c0029797:	68 1c b8 02 c0       	push   0xc002b81c
c002979c:	e8 f7 70 fe ff       	call   c0010898 <KePanic(char const*)>
c00297a1:	83 c4 10             	add    esp,0x10
c00297a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297ab:	8d 50 01             	lea    edx,[eax+0x1]
c00297ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00297b5:	90                   	nop
c00297b6:	83 c4 0c             	add    esp,0xc
c00297b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00297ba <LinkedList<Device>::LinkedList()>:
c00297ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00297c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00297cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00297da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00297e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00297ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00297fa:	90                   	nop
c00297fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00297fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00297fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029800:	8b 00                	mov    eax,DWORD PTR [eax]
c0029802:	85 c0                	test   eax,eax
c0029804:	75 0e                	jne    c0029814 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002980a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002980d:	85 c0                	test   eax,eax
c002980f:	75 03                	jne    c0029814 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029811:	b0 01                	mov    al,0x1
c0029813:	c3                   	ret    
c0029814:	b0 00                	mov    al,0x0
c0029816:	90                   	nop
c0029817:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029818 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002981c:	8b 00                	mov    eax,DWORD PTR [eax]
c002981e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0029820 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0029820:	83 ec 0c             	sub    esp,0xc
c0029823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029827:	8b 00                	mov    eax,DWORD PTR [eax]
c0029829:	85 c0                	test   eax,eax
c002982b:	75 17                	jne    c0029844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002982d:	83 ec 0c             	sub    esp,0xc
c0029830:	68 8c ba 02 c0       	push   0xc002ba8c
c0029835:	e8 5e 70 fe ff       	call   c0010898 <KePanic(char const*)>
c002983a:	83 c4 10             	add    esp,0x10
c002983d:	e9 96 00 00 00       	jmp    c00298d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0029842:	66 90                	xchg   ax,ax
c0029844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002984b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002984e:	85 c0                	test   eax,eax
c0029850:	0f 95 c0             	setne  al
c0029853:	0f b6 c0             	movzx  eax,al
c0029856:	85 c0                	test   eax,eax
c0029858:	74 12                	je     c002986c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002985a:	83 ec 0c             	sub    esp,0xc
c002985d:	68 d7 ba 02 c0       	push   0xc002bad7
c0029862:	e8 31 70 fe ff       	call   c0010898 <KePanic(char const*)>
c0029867:	83 c4 10             	add    esp,0x10
c002986a:	66 90                	xchg   ax,ax
c002986c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029870:	8b 00                	mov    eax,DWORD PTR [eax]
c0029872:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029875:	85 c0                	test   eax,eax
c0029877:	0f 94 c0             	sete   al
c002987a:	0f b6 c0             	movzx  eax,al
c002987d:	85 c0                	test   eax,eax
c002987f:	74 33                	je     c00298b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0029881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029885:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002988b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002989d:	83 f8 01             	cmp    eax,0x1
c00298a0:	74 22                	je     c00298c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00298a2:	83 ec 0c             	sub    esp,0xc
c00298a5:	68 b0 ba 02 c0       	push   0xc002bab0
c00298aa:	e8 e9 6f fe ff       	call   c0010898 <KePanic(char const*)>
c00298af:	83 c4 10             	add    esp,0x10
c00298b2:	eb 10                	jmp    c00298c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00298b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00298ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00298bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c1:	89 10                	mov    DWORD PTR [eax],edx
c00298c3:	90                   	nop
c00298c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00298ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00298d5:	8d 76 00             	lea    esi,[esi+0x0]
c00298d8:	83 c4 0c             	add    esp,0xc
c00298db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00298e4:	75 12                	jne    c00298f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00298e6:	83 ec 0c             	sub    esp,0xc
c00298e9:	68 f0 b7 02 c0       	push   0xc002b7f0
c00298ee:	e8 a5 6f fe ff       	call   c0010898 <KePanic(char const*)>
c00298f3:	83 c4 10             	add    esp,0x10
c00298f6:	66 90                	xchg   ax,ax
c00298f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00298fe:	85 c0                	test   eax,eax
c0029900:	74 36                	je     c0029938 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0029902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029909:	85 c0                	test   eax,eax
c002990b:	74 2b                	je     c0029938 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002990d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029918:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002991b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029923:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002992d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029934:	eb 6a                	jmp    c00299a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0029936:	66 90                	xchg   ax,ax
c0029938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993c:	8b 00                	mov    eax,DWORD PTR [eax]
c002993e:	85 c0                	test   eax,eax
c0029940:	75 4e                	jne    c0029990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0029942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029949:	85 c0                	test   eax,eax
c002994b:	75 43                	jne    c0029990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002994d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029955:	89 10                	mov    DWORD PTR [eax],edx
c0029957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002995f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029969:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029977:	85 c0                	test   eax,eax
c0029979:	74 25                	je     c00299a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002997b:	83 ec 0c             	sub    esp,0xc
c002997e:	68 12 b8 02 c0       	push   0xc002b812
c0029983:	e8 10 6f fe ff       	call   c0010898 <KePanic(char const*)>
c0029988:	83 c4 10             	add    esp,0x10
c002998b:	eb 13                	jmp    c00299a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002998d:	8d 76 00             	lea    esi,[esi+0x0]
c0029990:	83 ec 0c             	sub    esp,0xc
c0029993:	68 1c b8 02 c0       	push   0xc002b81c
c0029998:	e8 fb 6e fe ff       	call   c0010898 <KePanic(char const*)>
c002999d:	83 c4 10             	add    esp,0x10
c00299a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00299a7:	8d 50 01             	lea    edx,[eax+0x1]
c00299aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00299b1:	90                   	nop
c00299b2:	83 c4 0c             	add    esp,0xc
c00299b5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00299b8 <ACPI::~ACPI()>:
c00299b8:	83 ec 0c             	sub    esp,0xc
c00299bb:	ba f4 be 02 c0       	mov    edx,0xc002bef4
c00299c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c4:	89 10                	mov    DWORD PTR [eax],edx
c00299c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ca:	83 ec 0c             	sub    esp,0xc
c00299cd:	50                   	push   eax
c00299ce:	e8 7d 0c fe ff       	call   c000a650 <Device::~Device()>
c00299d3:	83 c4 10             	add    esp,0x10
c00299d6:	90                   	nop
c00299d7:	83 c4 0c             	add    esp,0xc
c00299da:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00299dc <ACPI::~ACPI()>:
c00299dc:	83 ec 0c             	sub    esp,0xc
c00299df:	83 ec 0c             	sub    esp,0xc
c00299e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e6:	e8 cd ff ff ff       	call   c00299b8 <ACPI::~ACPI()>
c00299eb:	83 c4 10             	add    esp,0x10
c00299ee:	83 ec 08             	sub    esp,0x8
c00299f1:	68 64 12 00 00       	push   0x1264
c00299f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299fa:	e8 3d 46 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c00299ff:	83 c4 10             	add    esp,0x10
c0029a02:	83 c4 0c             	add    esp,0xc
c0029a05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029a08 <LinkedList<Device>::~LinkedList()>:
c0029a08:	90                   	nop
c0029a09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029a0c <LinkedList<Device>::isEmpty()>:
c0029a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a12:	85 c0                	test   eax,eax
c0029a14:	75 0e                	jne    c0029a24 <LinkedList<Device>::isEmpty()+0x18>
c0029a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029a1d:	85 c0                	test   eax,eax
c0029a1f:	75 03                	jne    c0029a24 <LinkedList<Device>::isEmpty()+0x18>
c0029a21:	b0 01                	mov    al,0x1
c0029a23:	c3                   	ret    
c0029a24:	b0 00                	mov    al,0x0
c0029a26:	90                   	nop
c0029a27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029a28 <LinkedList<Device>::getFirstElement()>:
c0029a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029a30 <LinkedList<Device>::removeFirst()>:
c0029a30:	83 ec 0c             	sub    esp,0xc
c0029a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a39:	85 c0                	test   eax,eax
c0029a3b:	75 17                	jne    c0029a54 <LinkedList<Device>::removeFirst()+0x24>
c0029a3d:	83 ec 0c             	sub    esp,0xc
c0029a40:	68 8c ba 02 c0       	push   0xc002ba8c
c0029a45:	e8 4e 6e fe ff       	call   c0010898 <KePanic(char const*)>
c0029a4a:	83 c4 10             	add    esp,0x10
c0029a4d:	e9 92 00 00 00       	jmp    c0029ae4 <LinkedList<Device>::removeFirst()+0xb4>
c0029a52:	66 90                	xchg   ax,ax
c0029a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029a5b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029a61:	85 c0                	test   eax,eax
c0029a63:	74 13                	je     c0029a78 <LinkedList<Device>::removeFirst()+0x48>
c0029a65:	83 ec 0c             	sub    esp,0xc
c0029a68:	68 d7 ba 02 c0       	push   0xc002bad7
c0029a6d:	e8 26 6e fe ff       	call   c0010898 <KePanic(char const*)>
c0029a72:	83 c4 10             	add    esp,0x10
c0029a75:	8d 76 00             	lea    esi,[esi+0x0]
c0029a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a7e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029a84:	85 c0                	test   eax,eax
c0029a86:	75 34                	jne    c0029abc <LinkedList<Device>::removeFirst()+0x8c>
c0029a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029aa4:	83 f8 01             	cmp    eax,0x1
c0029aa7:	74 27                	je     c0029ad0 <LinkedList<Device>::removeFirst()+0xa0>
c0029aa9:	83 ec 0c             	sub    esp,0xc
c0029aac:	68 b0 ba 02 c0       	push   0xc002bab0
c0029ab1:	e8 e2 6d fe ff       	call   c0010898 <KePanic(char const*)>
c0029ab6:	83 c4 10             	add    esp,0x10
c0029ab9:	eb 15                	jmp    c0029ad0 <LinkedList<Device>::removeFirst()+0xa0>
c0029abb:	90                   	nop
c0029abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0029ac2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029acc:	89 10                	mov    DWORD PTR [eax],edx
c0029ace:	66 90                	xchg   ax,ax
c0029ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ad4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029ad7:	8d 50 ff             	lea    edx,[eax-0x1]
c0029ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ade:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0029ae4:	83 c4 0c             	add    esp,0xc
c0029ae7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029ae8 <Computer::~Computer()>:
c0029ae8:	83 ec 0c             	sub    esp,0xc
c0029aeb:	ba 60 c0 02 c0       	mov    edx,0xc002c060
c0029af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af4:	89 10                	mov    DWORD PTR [eax],edx
c0029af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afa:	83 ec 0c             	sub    esp,0xc
c0029afd:	50                   	push   eax
c0029afe:	e8 4d 0b fe ff       	call   c000a650 <Device::~Device()>
c0029b03:	83 c4 10             	add    esp,0x10
c0029b06:	90                   	nop
c0029b07:	83 c4 0c             	add    esp,0xc
c0029b0a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029b0c <Computer::~Computer()>:
c0029b0c:	83 ec 0c             	sub    esp,0xc
c0029b0f:	83 ec 0c             	sub    esp,0xc
c0029b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b16:	e8 cd ff ff ff       	call   c0029ae8 <Computer::~Computer()>
c0029b1b:	83 c4 10             	add    esp,0x10
c0029b1e:	83 ec 08             	sub    esp,0x8
c0029b21:	68 68 01 00 00       	push   0x168
c0029b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2a:	e8 0d 45 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0029b2f:	83 c4 10             	add    esp,0x10
c0029b32:	83 c4 0c             	add    esp,0xc
c0029b35:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029b36 <idleCommon()>:
c0029b36:	83 ec 0c             	sub    esp,0xc
c0029b39:	fa                   	cli    
c0029b3a:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0029b40:	e8 db d8 fe ff       	call   c0017420 <schedule()>
c0029b45:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0029b4c:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0029b53:	75 01                	jne    c0029b56 <idleCommon()+0x20>
c0029b55:	fb                   	sti    
c0029b56:	83 c4 0c             	add    esp,0xc
c0029b59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029b5a <LinkedList<UnixFile>::~LinkedList()>:
c0029b5a:	90                   	nop
c0029b5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029b5c <LinkedList<UnixFile>::LinkedList()>:
c0029b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b9c:	90                   	nop
c0029b9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0029b9e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0029b9e:	83 ec 0c             	sub    esp,0xc
c0029ba1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029ba6:	75 10                	jne    c0029bb8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029ba8:	83 ec 0c             	sub    esp,0xc
c0029bab:	68 f0 b7 02 c0       	push   0xc002b7f0
c0029bb0:	e8 e3 6c fe ff       	call   c0010898 <KePanic(char const*)>
c0029bb5:	83 c4 10             	add    esp,0x10
c0029bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0029bbe:	85 c0                	test   eax,eax
c0029bc0:	74 34                	je     c0029bf6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029bc9:	85 c0                	test   eax,eax
c0029bcb:	74 29                	je     c0029bf6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029bd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029bd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029be3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029bed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029bf4:	eb 65                	jmp    c0029c5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0029bfc:	85 c0                	test   eax,eax
c0029bfe:	75 4b                	jne    c0029c4b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029c07:	85 c0                	test   eax,eax
c0029c09:	75 40                	jne    c0029c4b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c13:	89 10                	mov    DWORD PTR [eax],edx
c0029c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029c27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c35:	85 c0                	test   eax,eax
c0029c37:	74 22                	je     c0029c5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029c39:	83 ec 0c             	sub    esp,0xc
c0029c3c:	68 12 b8 02 c0       	push   0xc002b812
c0029c41:	e8 52 6c fe ff       	call   c0010898 <KePanic(char const*)>
c0029c46:	83 c4 10             	add    esp,0x10
c0029c49:	eb 10                	jmp    c0029c5b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029c4b:	83 ec 0c             	sub    esp,0xc
c0029c4e:	68 1c b8 02 c0       	push   0xc002b81c
c0029c53:	e8 40 6c fe ff       	call   c0010898 <KePanic(char const*)>
c0029c58:	83 c4 10             	add    esp,0x10
c0029c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c62:	8d 50 01             	lea    edx,[eax+0x1]
c0029c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c6c:	90                   	nop
c0029c6d:	83 c4 0c             	add    esp,0xc
c0029c70:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029c72 <LinkedList<UnixFile>::getFirstElement()>:
c0029c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c78:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029c7a <LinkedList<UnixFile>::removeFirst()>:
c0029c7a:	83 ec 0c             	sub    esp,0xc
c0029c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c83:	85 c0                	test   eax,eax
c0029c85:	75 12                	jne    c0029c99 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029c87:	83 ec 0c             	sub    esp,0xc
c0029c8a:	68 8c ba 02 c0       	push   0xc002ba8c
c0029c8f:	e8 04 6c fe ff       	call   c0010898 <KePanic(char const*)>
c0029c94:	83 c4 10             	add    esp,0x10
c0029c97:	eb 7e                	jmp    c0029d17 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029ca0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029ca3:	85 c0                	test   eax,eax
c0029ca5:	74 10                	je     c0029cb7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029ca7:	83 ec 0c             	sub    esp,0xc
c0029caa:	68 d7 ba 02 c0       	push   0xc002bad7
c0029caf:	e8 e4 6b fe ff       	call   c0010898 <KePanic(char const*)>
c0029cb4:	83 c4 10             	add    esp,0x10
c0029cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0029cbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029cc0:	85 c0                	test   eax,eax
c0029cc2:	75 33                	jne    c0029cf7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cdd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029ce0:	83 f8 01             	cmp    eax,0x1
c0029ce3:	74 21                	je     c0029d06 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029ce5:	83 ec 0c             	sub    esp,0xc
c0029ce8:	68 b0 ba 02 c0       	push   0xc002bab0
c0029ced:	e8 a6 6b fe ff       	call   c0010898 <KePanic(char const*)>
c0029cf2:	83 c4 10             	add    esp,0x10
c0029cf5:	eb 0f                	jmp    c0029d06 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0029cfd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d04:	89 10                	mov    DWORD PTR [eax],edx
c0029d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029d0d:	8d 50 ff             	lea    edx,[eax-0x1]
c0029d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029d17:	83 c4 0c             	add    esp,0xc
c0029d1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0029d1c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0029d1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029d20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029d23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029d24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029d28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029d2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029d2c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029d2c:	90                   	nop
c0029d2d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029d30 <ThreadControlBlock::ThreadControlBlock()>:
c0029d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d34:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029d3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d3f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d4a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029d51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d55:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d60:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d6b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d73:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029d77:	90                   	nop
c0029d78:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029d91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029da0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029daa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029db5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029dbc:	90                   	nop
c0029dbd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029dbe <IOAPIC::~IOAPIC()>:
c0029dbe:	83 ec 0c             	sub    esp,0xc
c0029dc1:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c0029dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dca:	89 10                	mov    DWORD PTR [eax],edx
c0029dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dd0:	83 ec 0c             	sub    esp,0xc
c0029dd3:	50                   	push   eax
c0029dd4:	e8 77 08 fe ff       	call   c000a650 <Device::~Device()>
c0029dd9:	83 c4 10             	add    esp,0x10
c0029ddc:	90                   	nop
c0029ddd:	83 c4 0c             	add    esp,0xc
c0029de0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029de2 <IOAPIC::~IOAPIC()>:
c0029de2:	83 ec 0c             	sub    esp,0xc
c0029de5:	83 ec 0c             	sub    esp,0xc
c0029de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dec:	e8 cd ff ff ff       	call   c0029dbe <IOAPIC::~IOAPIC()>
c0029df1:	83 c4 10             	add    esp,0x10
c0029df4:	83 ec 08             	sub    esp,0x8
c0029df7:	68 68 01 00 00       	push   0x168
c0029dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e00:	e8 37 42 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0029e05:	83 c4 10             	add    esp,0x10
c0029e08:	83 c4 0c             	add    esp,0xc
c0029e0b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029e0c <CPU::~CPU()>:
c0029e0c:	83 ec 0c             	sub    esp,0xc
c0029e0f:	ba 38 d8 02 c0       	mov    edx,0xc002d838
c0029e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e18:	89 10                	mov    DWORD PTR [eax],edx
c0029e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e1e:	83 ec 0c             	sub    esp,0xc
c0029e21:	50                   	push   eax
c0029e22:	e8 29 08 fe ff       	call   c000a650 <Device::~Device()>
c0029e27:	83 c4 10             	add    esp,0x10
c0029e2a:	90                   	nop
c0029e2b:	83 c4 0c             	add    esp,0xc
c0029e2e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029e30 <CPU::~CPU()>:
c0029e30:	83 ec 0c             	sub    esp,0xc
c0029e33:	83 ec 0c             	sub    esp,0xc
c0029e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e3a:	e8 cd ff ff ff       	call   c0029e0c <CPU::~CPU()>
c0029e3f:	83 c4 10             	add    esp,0x10
c0029e42:	83 ec 08             	sub    esp,0x8
c0029e45:	68 78 11 00 00       	push   0x1178
c0029e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e4e:	e8 e9 41 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0029e53:	83 c4 10             	add    esp,0x10
c0029e56:	83 c4 0c             	add    esp,0xc
c0029e59:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware10_getDriverEv:

c0029e5c <SerialHardware::_getDriver()>:
c0029e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e60:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029e66:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware7getTypeEv:

c0029e68 <SerialHardware::getType()>:
c0029e68:	b8 06 00 00 00       	mov    eax,0x6
c0029e6d:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware10_getDriverEv:

c0029e70 <LegacyDMAHardware::_getDriver()>:
c0029e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e74:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029e7a:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware7getTypeEv:

c0029e7c <LegacyDMAHardware::getType()>:
c0029e7c:	b8 07 00 00 00       	mov    eax,0x7
c0029e81:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareD2Ev:

c0029e84 <SerialHardware::~SerialHardware()>:
c0029e84:	83 ec 0c             	sub    esp,0xc
c0029e87:	ba e0 da 02 c0       	mov    edx,0xc002dae0
c0029e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e90:	89 10                	mov    DWORD PTR [eax],edx
c0029e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e96:	83 ec 0c             	sub    esp,0xc
c0029e99:	50                   	push   eax
c0029e9a:	e8 bd d5 fd ff       	call   c000745c <Hardware::~Hardware()>
c0029e9f:	83 c4 10             	add    esp,0x10
c0029ea2:	90                   	nop
c0029ea3:	83 c4 0c             	add    esp,0xc
c0029ea6:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareD0Ev:

c0029ea8 <SerialHardware::~SerialHardware()>:
c0029ea8:	83 ec 0c             	sub    esp,0xc
c0029eab:	83 ec 0c             	sub    esp,0xc
c0029eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029eb2:	e8 cd ff ff ff       	call   c0029e84 <SerialHardware::~SerialHardware()>
c0029eb7:	83 c4 10             	add    esp,0x10
c0029eba:	83 ec 08             	sub    esp,0x8
c0029ebd:	68 8c 00 00 00       	push   0x8c
c0029ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ec6:	e8 71 41 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0029ecb:	83 c4 10             	add    esp,0x10
c0029ece:	83 c4 0c             	add    esp,0xc
c0029ed1:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareD2Ev:

c0029ed4 <LegacyDMAHardware::~LegacyDMAHardware()>:
c0029ed4:	83 ec 0c             	sub    esp,0xc
c0029ed7:	ba 18 db 02 c0       	mov    edx,0xc002db18
c0029edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ee0:	89 10                	mov    DWORD PTR [eax],edx
c0029ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ee6:	83 ec 0c             	sub    esp,0xc
c0029ee9:	50                   	push   eax
c0029eea:	e8 6d d5 fd ff       	call   c000745c <Hardware::~Hardware()>
c0029eef:	83 c4 10             	add    esp,0x10
c0029ef2:	90                   	nop
c0029ef3:	83 c4 0c             	add    esp,0xc
c0029ef6:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareD0Ev:

c0029ef8 <LegacyDMAHardware::~LegacyDMAHardware()>:
c0029ef8:	83 ec 0c             	sub    esp,0xc
c0029efb:	83 ec 0c             	sub    esp,0xc
c0029efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f02:	e8 cd ff ff ff       	call   c0029ed4 <LegacyDMAHardware::~LegacyDMAHardware()>
c0029f07:	83 c4 10             	add    esp,0x10
c0029f0a:	83 ec 08             	sub    esp,0x8
c0029f0d:	68 8c 00 00 00       	push   0x8c
c0029f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f16:	e8 21 41 fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c0029f1b:	83 c4 10             	add    esp,0x10
c0029f1e:	83 c4 0c             	add    esp,0xc
c0029f21:	c3                   	ret    

Disassembly of section .text._ZN12SerialDriverC2Ev:

c0029f24 <SerialDriver::SerialDriver()>:
c0029f24:	83 ec 0c             	sub    esp,0xc
c0029f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f2b:	83 ec 0c             	sub    esp,0xc
c0029f2e:	50                   	push   eax
c0029f2f:	e8 04 e8 ff ff       	call   c0028738 <Driver::Driver()>
c0029f34:	83 c4 10             	add    esp,0x10
c0029f37:	ba 30 da 02 c0       	mov    edx,0xc002da30
c0029f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f40:	89 10                	mov    DWORD PTR [eax],edx
c0029f42:	90                   	nop
c0029f43:	83 c4 0c             	add    esp,0xc
c0029f46:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareC2Ev:

c0029f48 <SerialHardware::SerialHardware()>:
c0029f48:	83 ec 0c             	sub    esp,0xc
c0029f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f4f:	83 ec 0c             	sub    esp,0xc
c0029f52:	50                   	push   eax
c0029f53:	e8 7c d5 fd ff       	call   c00074d4 <Hardware::Hardware()>
c0029f58:	83 c4 10             	add    esp,0x10
c0029f5b:	ba e0 da 02 c0       	mov    edx,0xc002dae0
c0029f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f64:	89 10                	mov    DWORD PTR [eax],edx
c0029f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f6a:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c0029f74:	90                   	nop
c0029f75:	83 c4 0c             	add    esp,0xc
c0029f78:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware9setDriverEP12SerialDriver:

c0029f7c <SerialHardware::setDriver(SerialDriver*)>:
c0029f7c:	83 ec 0c             	sub    esp,0xc
c0029f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029f87:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0029f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f91:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029f97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029f9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa2:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029fa8:	89 c2                	mov    edx,eax
c0029faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fae:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029fb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0029fb6:	83 c0 04             	add    eax,0x4
c0029fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0029fbb:	83 ec 0c             	sub    esp,0xc
c0029fbe:	52                   	push   edx
c0029fbf:	ff d0                	call   eax
c0029fc1:	83 c4 10             	add    esp,0x10
c0029fc4:	90                   	nop
c0029fc5:	83 c4 0c             	add    esp,0xc
c0029fc8:	c3                   	ret    

Disassembly of section .text._ZN9UART16550C2Ev:

c0029fcc <UART16550::UART16550()>:
c0029fcc:	83 ec 0c             	sub    esp,0xc
c0029fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd3:	83 ec 0c             	sub    esp,0xc
c0029fd6:	50                   	push   eax
c0029fd7:	e8 48 ff ff ff       	call   c0029f24 <SerialDriver::SerialDriver()>
c0029fdc:	83 c4 10             	add    esp,0x10
c0029fdf:	ba d8 eb 02 c0       	mov    edx,0xc002ebd8
c0029fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fe8:	89 10                	mov    DWORD PTR [eax],edx
c0029fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fee:	c6 40 1d 00          	mov    BYTE PTR [eax+0x1d],0x0
c0029ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff6:	c6 80 24 01 00 00 00 	mov    BYTE PTR [eax+0x124],0x0
c0029ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a001:	c7 80 28 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x128],0x0
c002a00b:	90                   	nop
c002a00c:	83 c4 0c             	add    esp,0xc
c002a00f:	c3                   	ret    

Disassembly of section .text._ZN15LegacyDMADriverC2Ev:

c002a010 <LegacyDMADriver::LegacyDMADriver()>:
c002a010:	83 ec 0c             	sub    esp,0xc
c002a013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a017:	83 ec 0c             	sub    esp,0xc
c002a01a:	50                   	push   eax
c002a01b:	e8 18 e7 ff ff       	call   c0028738 <Driver::Driver()>
c002a020:	83 c4 10             	add    esp,0x10
c002a023:	ba fc da 02 c0       	mov    edx,0xc002dafc
c002a028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a02c:	89 10                	mov    DWORD PTR [eax],edx
c002a02e:	90                   	nop
c002a02f:	83 c4 0c             	add    esp,0xc
c002a032:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareC2Ev:

c002a034 <LegacyDMAHardware::LegacyDMAHardware()>:
c002a034:	83 ec 0c             	sub    esp,0xc
c002a037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a03b:	83 ec 0c             	sub    esp,0xc
c002a03e:	50                   	push   eax
c002a03f:	e8 90 d4 fd ff       	call   c00074d4 <Hardware::Hardware()>
c002a044:	83 c4 10             	add    esp,0x10
c002a047:	ba 18 db 02 c0       	mov    edx,0xc002db18
c002a04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a050:	89 10                	mov    DWORD PTR [eax],edx
c002a052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a056:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c002a060:	90                   	nop
c002a061:	83 c4 0c             	add    esp,0xc
c002a064:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware9setDriverEP15LegacyDMADriver:

c002a068 <LegacyDMAHardware::setDriver(LegacyDMADriver*)>:
c002a068:	83 ec 0c             	sub    esp,0xc
c002a06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a06f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a073:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c002a079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a07d:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002a083:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a087:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002a08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a08e:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002a094:	89 c2                	mov    edx,eax
c002a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a09a:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002a0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002a0a2:	83 c0 04             	add    eax,0x4
c002a0a5:	8b 00                	mov    eax,DWORD PTR [eax]
c002a0a7:	83 ec 0c             	sub    esp,0xc
c002a0aa:	52                   	push   edx
c002a0ab:	ff d0                	call   eax
c002a0ad:	83 c4 10             	add    esp,0x10
c002a0b0:	90                   	nop
c002a0b1:	83 c4 0c             	add    esp,0xc
c002a0b4:	c3                   	ret    

Disassembly of section .text._ZN7DMA8237C2Ev:

c002a0b8 <DMA8237::DMA8237()>:
c002a0b8:	83 ec 0c             	sub    esp,0xc
c002a0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0bf:	83 ec 0c             	sub    esp,0xc
c002a0c2:	50                   	push   eax
c002a0c3:	e8 48 ff ff ff       	call   c002a010 <LegacyDMADriver::LegacyDMADriver()>
c002a0c8:	83 c4 10             	add    esp,0x10
c002a0cb:	ba 14 da 02 c0       	mov    edx,0xc002da14
c002a0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0d4:	89 10                	mov    DWORD PTR [eax],edx
c002a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0da:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
c002a0de:	90                   	nop
c002a0df:	83 c4 0c             	add    esp,0xc
c002a0e2:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware10_getDriverEv:

c002a0e4 <UnknownHardware::_getDriver()>:
c002a0e4:	b8 00 00 00 00       	mov    eax,0x0
c002a0e9:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware7getTypeEv:

c002a0ec <UnknownHardware::getType()>:
c002a0ec:	b8 00 00 00 00       	mov    eax,0x0
c002a0f1:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD2Ev:

c002a0f4 <UnknownHardware::~UnknownHardware()>:
c002a0f4:	83 ec 0c             	sub    esp,0xc
c002a0f7:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c002a0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a100:	89 10                	mov    DWORD PTR [eax],edx
c002a102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a106:	83 ec 0c             	sub    esp,0xc
c002a109:	50                   	push   eax
c002a10a:	e8 4d d3 fd ff       	call   c000745c <Hardware::~Hardware()>
c002a10f:	83 c4 10             	add    esp,0x10
c002a112:	90                   	nop
c002a113:	83 c4 0c             	add    esp,0xc
c002a116:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD0Ev:

c002a118 <UnknownHardware::~UnknownHardware()>:
c002a118:	83 ec 0c             	sub    esp,0xc
c002a11b:	83 ec 0c             	sub    esp,0xc
c002a11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a122:	e8 cd ff ff ff       	call   c002a0f4 <UnknownHardware::~UnknownHardware()>
c002a127:	83 c4 10             	add    esp,0x10
c002a12a:	83 ec 08             	sub    esp,0x8
c002a12d:	68 88 01 00 00       	push   0x188
c002a132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a136:	e8 01 3f fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a13b:	83 c4 10             	add    esp,0x10
c002a13e:	83 c4 0c             	add    esp,0xc
c002a141:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2Ev:

c002a144 <UnknownHardware::UnknownHardware()>:
c002a144:	83 ec 0c             	sub    esp,0xc
c002a147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a14b:	83 ec 0c             	sub    esp,0xc
c002a14e:	50                   	push   eax
c002a14f:	e8 80 d3 fd ff       	call   c00074d4 <Hardware::Hardware()>
c002a154:	83 c4 10             	add    esp,0x10
c002a157:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c002a15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a160:	89 10                	mov    DWORD PTR [eax],edx
c002a162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a166:	c7 40 70 04 00 00 00 	mov    DWORD PTR [eax+0x70],0x4
c002a16d:	90                   	nop
c002a16e:	83 c4 0c             	add    esp,0xc
c002a171:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware18setISAPnPDetectionEhy:

c002a174 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>:
c002a174:	53                   	push   ebx
c002a175:	83 ec 10             	sub    esp,0x10
c002a178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a17c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002a180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a184:	89 04 24             	mov    DWORD PTR [esp],eax
c002a187:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a18b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a18f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a193:	c7 40 70 01 00 00 00 	mov    DWORD PTR [eax+0x70],0x1
c002a19a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a19e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c002a1a2:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
c002a1a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002a1a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a1ac:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c002a1af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a1b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a1b6:	89 d0                	mov    eax,edx
c002a1b8:	31 d2                	xor    edx,edx
c002a1ba:	89 c1                	mov    ecx,eax
c002a1bc:	89 d3                	mov    ebx,edx
c002a1be:	89 ca                	mov    edx,ecx
c002a1c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a1c4:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
c002a1c7:	90                   	nop
c002a1c8:	83 c4 10             	add    esp,0x10
c002a1cb:	5b                   	pop    ebx
c002a1cc:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware20getHumanReadableNameEv:

c002a1d0 <UnknownHardware::getHumanReadableName()>:
c002a1d0:	83 ec 0c             	sub    esp,0xc
c002a1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1d7:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002a1da:	83 f8 02             	cmp    eax,0x2
c002a1dd:	75 0d                	jne    c002a1ec <UnknownHardware::getHumanReadableName()+0x1c>
c002a1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1e3:	05 88 00 00 00       	add    eax,0x88
c002a1e8:	eb 2a                	jmp    c002a214 <UnknownHardware::getHumanReadableName()+0x44>
c002a1ea:	66 90                	xchg   ax,ax
c002a1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1f0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002a1f3:	83 f8 01             	cmp    eax,0x1
c002a1f6:	75 08                	jne    c002a200 <UnknownHardware::getHumanReadableName()+0x30>
c002a1f8:	b8 00 dd 02 c0       	mov    eax,0xc002dd00
c002a1fd:	eb 15                	jmp    c002a214 <UnknownHardware::getHumanReadableName()+0x44>
c002a1ff:	90                   	nop
c002a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a204:	83 ec 0c             	sub    esp,0xc
c002a207:	50                   	push   eax
c002a208:	e8 a7 d1 fd ff       	call   c00073b4 <Hardware::getHumanReadableName()>
c002a20d:	83 c4 10             	add    esp,0x10
c002a210:	90                   	nop
c002a211:	8d 76 00             	lea    esi,[esi+0x0]
c002a214:	83 c4 0c             	add    esp,0xc
c002a217:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2E23DevicePCIConnectionInfo:

c002a218 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>:
c002a218:	55                   	push   ebp
c002a219:	89 e5                	mov    ebp,esp
c002a21b:	56                   	push   esi
c002a21c:	53                   	push   ebx
c002a21d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002a220:	83 ec 0c             	sub    esp,0xc
c002a223:	50                   	push   eax
c002a224:	e8 ab d2 fd ff       	call   c00074d4 <Hardware::Hardware()>
c002a229:	83 c4 10             	add    esp,0x10
c002a22c:	ba 28 dd 02 c0       	mov    edx,0xc002dd28
c002a231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002a234:	89 10                	mov    DWORD PTR [eax],edx
c002a236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002a239:	c7 40 70 02 00 00 00 	mov    DWORD PTR [eax+0x70],0x2
c002a240:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002a243:	b8 24 00 00 00       	mov    eax,0x24
c002a248:	83 e0 fc             	and    eax,0xfffffffc
c002a24b:	89 c3                	mov    ebx,eax
c002a24d:	b8 00 00 00 00       	mov    eax,0x0
c002a252:	66 90                	xchg   ax,ax
c002a254:	8b 4c 05 0c          	mov    ecx,DWORD PTR [ebp+eax*1+0xc]
c002a258:	89 4c 02 40          	mov    DWORD PTR [edx+eax*1+0x40],ecx
c002a25c:	83 c0 04             	add    eax,0x4
c002a25f:	39 d8                	cmp    eax,ebx
c002a261:	72 f1                	jb     c002a254 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)+0x3c>
c002a263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002a266:	05 88 00 00 00       	add    eax,0x88
c002a26b:	83 ec 08             	sub    esp,0x8
c002a26e:	68 c0 e8 02 c0       	push   0xc002e8c0
c002a273:	50                   	push   eax
c002a274:	e8 d7 63 fd ff       	call   c0000650 <strcpy>
c002a279:	83 c4 10             	add    esp,0x10
c002a27c:	83 ec 0c             	sub    esp,0xc
c002a27f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002a282:	83 ec 24             	sub    esp,0x24
c002a285:	89 e3                	mov    ebx,esp
c002a287:	b8 24 00 00 00       	mov    eax,0x24
c002a28c:	83 e0 fc             	and    eax,0xfffffffc
c002a28f:	89 c6                	mov    esi,eax
c002a291:	b8 00 00 00 00       	mov    eax,0x0
c002a296:	66 90                	xchg   ax,ax
c002a298:	8b 54 01 40          	mov    edx,DWORD PTR [ecx+eax*1+0x40]
c002a29c:	89 14 03             	mov    DWORD PTR [ebx+eax*1],edx
c002a29f:	83 c0 04             	add    eax,0x4
c002a2a2:	39 f0                	cmp    eax,esi
c002a2a4:	72 f2                	jb     c002a298 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)+0x80>
c002a2a6:	e8 75 36 ff ff       	call   c001d920 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>
c002a2ab:	83 c4 30             	add    esp,0x30
c002a2ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002a2b1:	81 c2 88 00 00 00    	add    edx,0x88
c002a2b7:	83 ec 08             	sub    esp,0x8
c002a2ba:	50                   	push   eax
c002a2bb:	52                   	push   edx
c002a2bc:	e8 af 65 fd ff       	call   c0000870 <strcat>
c002a2c1:	83 c4 10             	add    esp,0x10
c002a2c4:	90                   	nop
c002a2c5:	8d 65 f8             	lea    esp,[ebp-0x8]
c002a2c8:	5b                   	pop    ebx
c002a2c9:	5e                   	pop    esi
c002a2ca:	5d                   	pop    ebp
c002a2cb:	c3                   	ret    

Disassembly of section .text._ZN12SerialDriver17disableInterruptsEv:

c002a2cc <SerialDriver::disableInterrupts()>:
c002a2cc:	83 ec 0c             	sub    esp,0xc
c002a2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2d3:	8b 00                	mov    eax,DWORD PTR [eax]
c002a2d5:	83 c0 1c             	add    eax,0x1c
c002a2d8:	8b 00                	mov    eax,DWORD PTR [eax]
c002a2da:	83 ec 08             	sub    esp,0x8
c002a2dd:	6a 00                	push   0x0
c002a2df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a2e3:	ff d0                	call   eax
c002a2e5:	83 c4 10             	add    esp,0x10
c002a2e8:	90                   	nop
c002a2e9:	83 c4 0c             	add    esp,0xc
c002a2ec:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002a2ee <PCI::~PCI()>:
c002a2ee:	83 ec 0c             	sub    esp,0xc
c002a2f1:	ba c4 f0 02 c0       	mov    edx,0xc002f0c4
c002a2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2fa:	89 10                	mov    DWORD PTR [eax],edx
c002a2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a300:	83 ec 0c             	sub    esp,0xc
c002a303:	50                   	push   eax
c002a304:	e8 eb f3 fd ff       	call   c00096f4 <Bus::~Bus()>
c002a309:	83 c4 10             	add    esp,0x10
c002a30c:	90                   	nop
c002a30d:	83 c4 0c             	add    esp,0xc
c002a310:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002a312 <PCI::~PCI()>:
c002a312:	83 ec 0c             	sub    esp,0xc
c002a315:	83 ec 0c             	sub    esp,0xc
c002a318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a31c:	e8 cd ff ff ff       	call   c002a2ee <PCI::~PCI()>
c002a321:	83 c4 10             	add    esp,0x10
c002a324:	83 ec 08             	sub    esp,0x8
c002a327:	68 5c 01 00 00       	push   0x15c
c002a32c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a330:	e8 07 3d fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a335:	83 c4 10             	add    esp,0x10
c002a338:	83 c4 0c             	add    esp,0xc
c002a33b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002a33c <IDE::~IDE()>:
c002a33c:	83 ec 0c             	sub    esp,0xc
c002a33f:	ba 14 f2 02 c0       	mov    edx,0xc002f214
c002a344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a348:	89 10                	mov    DWORD PTR [eax],edx
c002a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a34e:	83 ec 0c             	sub    esp,0xc
c002a351:	50                   	push   eax
c002a352:	e8 89 07 fe ff       	call   c000aae0 <HardDiskController::~HardDiskController()>
c002a357:	83 c4 10             	add    esp,0x10
c002a35a:	90                   	nop
c002a35b:	83 c4 0c             	add    esp,0xc
c002a35e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002a360 <IDE::~IDE()>:
c002a360:	83 ec 0c             	sub    esp,0xc
c002a363:	83 ec 0c             	sub    esp,0xc
c002a366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a36a:	e8 cd ff ff ff       	call   c002a33c <IDE::~IDE()>
c002a36f:	83 c4 10             	add    esp,0x10
c002a372:	83 ec 08             	sub    esp,0x8
c002a375:	68 70 02 00 00       	push   0x270
c002a37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a37e:	e8 b9 3c fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a383:	83 c4 10             	add    esp,0x10
c002a386:	83 c4 0c             	add    esp,0xc
c002a389:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002a38a <SATABus::~SATABus()>:
c002a38a:	83 ec 0c             	sub    esp,0xc
c002a38d:	ba 64 f2 02 c0       	mov    edx,0xc002f264
c002a392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a396:	89 10                	mov    DWORD PTR [eax],edx
c002a398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a39c:	83 ec 0c             	sub    esp,0xc
c002a39f:	50                   	push   eax
c002a3a0:	e8 3b 07 fe ff       	call   c000aae0 <HardDiskController::~HardDiskController()>
c002a3a5:	83 c4 10             	add    esp,0x10
c002a3a8:	90                   	nop
c002a3a9:	83 c4 0c             	add    esp,0xc
c002a3ac:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002a3ae <SATABus::~SATABus()>:
c002a3ae:	83 ec 0c             	sub    esp,0xc
c002a3b1:	83 ec 0c             	sub    esp,0xc
c002a3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a3b8:	e8 cd ff ff ff       	call   c002a38a <SATABus::~SATABus()>
c002a3bd:	83 c4 10             	add    esp,0x10
c002a3c0:	83 ec 08             	sub    esp,0x8
c002a3c3:	68 64 01 00 00       	push   0x164
c002a3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a3cc:	e8 6b 3c fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a3d1:	83 c4 10             	add    esp,0x10
c002a3d4:	83 c4 0c             	add    esp,0xc
c002a3d7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002a3d8 <ATA::~ATA()>:
c002a3d8:	83 ec 0c             	sub    esp,0xc
c002a3db:	ba 4c f3 02 c0       	mov    edx,0xc002f34c
c002a3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3e4:	89 10                	mov    DWORD PTR [eax],edx
c002a3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3ea:	83 ec 0c             	sub    esp,0xc
c002a3ed:	50                   	push   eax
c002a3ee:	e8 cf 07 fe ff       	call   c000abc2 <PhysicalDisk::~PhysicalDisk()>
c002a3f3:	83 c4 10             	add    esp,0x10
c002a3f6:	90                   	nop
c002a3f7:	83 c4 0c             	add    esp,0xc
c002a3fa:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002a3fc <ATA::~ATA()>:
c002a3fc:	83 ec 0c             	sub    esp,0xc
c002a3ff:	83 ec 0c             	sub    esp,0xc
c002a402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a406:	e8 cd ff ff ff       	call   c002a3d8 <ATA::~ATA()>
c002a40b:	83 c4 10             	add    esp,0x10
c002a40e:	83 ec 08             	sub    esp,0x8
c002a411:	68 8c 01 00 00       	push   0x18c
c002a416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a41a:	e8 1d 3c fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a41f:	83 c4 10             	add    esp,0x10
c002a422:	83 c4 0c             	add    esp,0xc
c002a425:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002a426 <ATAPI::~ATAPI()>:
c002a426:	83 ec 0c             	sub    esp,0xc
c002a429:	ba 94 f3 02 c0       	mov    edx,0xc002f394
c002a42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a432:	89 10                	mov    DWORD PTR [eax],edx
c002a434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a438:	83 ec 0c             	sub    esp,0xc
c002a43b:	50                   	push   eax
c002a43c:	e8 81 07 fe ff       	call   c000abc2 <PhysicalDisk::~PhysicalDisk()>
c002a441:	83 c4 10             	add    esp,0x10
c002a444:	90                   	nop
c002a445:	83 c4 0c             	add    esp,0xc
c002a448:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002a44a <ATAPI::~ATAPI()>:
c002a44a:	83 ec 0c             	sub    esp,0xc
c002a44d:	83 ec 0c             	sub    esp,0xc
c002a450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a454:	e8 cd ff ff ff       	call   c002a426 <ATAPI::~ATAPI()>
c002a459:	83 c4 10             	add    esp,0x10
c002a45c:	83 ec 08             	sub    esp,0x8
c002a45f:	68 84 01 00 00       	push   0x184
c002a464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a468:	e8 cf 3b fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a46d:	83 c4 10             	add    esp,0x10
c002a470:	83 c4 0c             	add    esp,0xc
c002a473:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002a474 <SATA::~SATA()>:
c002a474:	83 ec 0c             	sub    esp,0xc
c002a477:	ba 54 f4 02 c0       	mov    edx,0xc002f454
c002a47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a480:	89 10                	mov    DWORD PTR [eax],edx
c002a482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a486:	83 ec 0c             	sub    esp,0xc
c002a489:	50                   	push   eax
c002a48a:	e8 33 07 fe ff       	call   c000abc2 <PhysicalDisk::~PhysicalDisk()>
c002a48f:	83 c4 10             	add    esp,0x10
c002a492:	90                   	nop
c002a493:	83 c4 0c             	add    esp,0xc
c002a496:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002a498 <SATA::~SATA()>:
c002a498:	83 ec 0c             	sub    esp,0xc
c002a49b:	83 ec 0c             	sub    esp,0xc
c002a49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a4a2:	e8 cd ff ff ff       	call   c002a474 <SATA::~SATA()>
c002a4a7:	83 c4 10             	add    esp,0x10
c002a4aa:	83 ec 08             	sub    esp,0x8
c002a4ad:	68 7c 01 00 00       	push   0x17c
c002a4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a4b6:	e8 81 3b fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a4bb:	83 c4 10             	add    esp,0x10
c002a4be:	83 c4 0c             	add    esp,0xc
c002a4c1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002a4c2 <SATAPI::~SATAPI()>:
c002a4c2:	83 ec 0c             	sub    esp,0xc
c002a4c5:	ba 78 f5 02 c0       	mov    edx,0xc002f578
c002a4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a4ce:	89 10                	mov    DWORD PTR [eax],edx
c002a4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a4d4:	83 ec 0c             	sub    esp,0xc
c002a4d7:	50                   	push   eax
c002a4d8:	e8 e5 06 fe ff       	call   c000abc2 <PhysicalDisk::~PhysicalDisk()>
c002a4dd:	83 c4 10             	add    esp,0x10
c002a4e0:	90                   	nop
c002a4e1:	83 c4 0c             	add    esp,0xc
c002a4e4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002a4e6 <SATAPI::~SATAPI()>:
c002a4e6:	83 ec 0c             	sub    esp,0xc
c002a4e9:	83 ec 0c             	sub    esp,0xc
c002a4ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a4f0:	e8 cd ff ff ff       	call   c002a4c2 <SATAPI::~SATAPI()>
c002a4f5:	83 c4 10             	add    esp,0x10
c002a4f8:	83 ec 08             	sub    esp,0x8
c002a4fb:	68 84 01 00 00       	push   0x184
c002a500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a504:	e8 33 3b fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a509:	83 c4 10             	add    esp,0x10
c002a50c:	83 c4 0c             	add    esp,0xc
c002a50f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002a510 <APICTimer::~APICTimer()>:
c002a510:	83 ec 0c             	sub    esp,0xc
c002a513:	ba cc f5 02 c0       	mov    edx,0xc002f5cc
c002a518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a51c:	89 10                	mov    DWORD PTR [eax],edx
c002a51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a522:	83 ec 0c             	sub    esp,0xc
c002a525:	50                   	push   eax
c002a526:	e8 31 18 fe ff       	call   c000bd5c <Timer::~Timer()>
c002a52b:	83 c4 10             	add    esp,0x10
c002a52e:	90                   	nop
c002a52f:	83 c4 0c             	add    esp,0xc
c002a532:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002a534 <APICTimer::~APICTimer()>:
c002a534:	83 ec 0c             	sub    esp,0xc
c002a537:	83 ec 0c             	sub    esp,0xc
c002a53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a53e:	e8 cd ff ff ff       	call   c002a510 <APICTimer::~APICTimer()>
c002a543:	83 c4 10             	add    esp,0x10
c002a546:	83 ec 08             	sub    esp,0x8
c002a549:	68 60 01 00 00       	push   0x160
c002a54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a552:	e8 e5 3a fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a557:	83 c4 10             	add    esp,0x10
c002a55a:	83 c4 0c             	add    esp,0xc
c002a55d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002a560 <PIT::~PIT()>:
c002a560:	83 ec 0c             	sub    esp,0xc
c002a563:	ba 1c f6 02 c0       	mov    edx,0xc002f61c
c002a568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a56c:	89 10                	mov    DWORD PTR [eax],edx
c002a56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a572:	83 ec 0c             	sub    esp,0xc
c002a575:	50                   	push   eax
c002a576:	e8 e1 17 fe ff       	call   c000bd5c <Timer::~Timer()>
c002a57b:	83 c4 10             	add    esp,0x10
c002a57e:	90                   	nop
c002a57f:	83 c4 0c             	add    esp,0xc
c002a582:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002a584 <PIT::~PIT()>:
c002a584:	83 ec 0c             	sub    esp,0xc
c002a587:	83 ec 0c             	sub    esp,0xc
c002a58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a58e:	e8 cd ff ff ff       	call   c002a560 <PIT::~PIT()>
c002a593:	83 c4 10             	add    esp,0x10
c002a596:	83 ec 08             	sub    esp,0x8
c002a599:	68 5c 01 00 00       	push   0x15c
c002a59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a5a2:	e8 95 3a fe ff       	call   c000e03c <operator delete(void*, unsigned long)>
c002a5a7:	83 c4 10             	add    esp,0x10
c002a5aa:	83 c4 0c             	add    esp,0xc
c002a5ad:	c3                   	ret    

Disassembly of section userkernel:

c0032000 <KiDefaultSignalHandlerAbort(int)>:
c0032000:	57                   	push   edi
c0032001:	b9 07 00 00 00       	mov    ecx,0x7
c0032006:	56                   	push   esi
c0032007:	be 47 c5 02 c0       	mov    esi,0xc002c547
c003200c:	83 ec 24             	sub    esp,0x24
c003200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0032013:	fc                   	cld    
c0032014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0032016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003201a:	50                   	push   eax
c003201b:	6a 00                	push   0x0
c003201d:	6a 38                	push   0x38
c003201f:	6a 01                	push   0x1
c0032021:	e8 2c 00 00 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0032026:	83 c4 34             	add    esp,0x34
c0032029:	5e                   	pop    esi
c003202a:	5f                   	pop    edi
c003202b:	c3                   	ret    

c003202c <KiDefaultSignalHandlerTerminate(int)>:
c003202c:	57                   	push   edi
c003202d:	b9 08 00 00 00       	mov    ecx,0x8
c0032032:	56                   	push   esi
c0032033:	be 63 c5 02 c0       	mov    esi,0xc002c563
c0032038:	83 ec 24             	sub    esp,0x24
c003203b:	89 e7                	mov    edi,esp
c003203d:	fc                   	cld    
c003203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0032040:	54                   	push   esp
c0032041:	6a 00                	push   0x0
c0032043:	6a 37                	push   0x37
c0032045:	6a 01                	push   0x1
c0032047:	e8 06 00 00 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003204c:	83 c4 34             	add    esp,0x34
c003204f:	5e                   	pop    esi
c0032050:	5f                   	pop    edi
c0032051:	c3                   	ret    

c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0032052:	53                   	push   ebx
c0032053:	83 ec 10             	sub    esp,0x10
c0032056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0032062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0032066:	cd 60                	int    0x60
c0032068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0032070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0032074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0032078:	83 c4 10             	add    esp,0x10
c003207b:	5b                   	pop    ebx
c003207c:	c3                   	ret    

Disassembly of section align_previous:

c0033000 <DO_NOT_DELETE()>:
c0033000:	c3                   	ret    
